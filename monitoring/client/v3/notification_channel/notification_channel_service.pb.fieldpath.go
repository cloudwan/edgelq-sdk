// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/notification_channel_service.proto
// DO NOT EDIT!!!

package notification_channel_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	notification_channel "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/notification_channel"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &notification_channel.NotificationChannel{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetNotificationChannelRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetNotificationChannelRequest_FieldPathSelector
	Get(source *GetNotificationChannelRequest) []interface{}
	GetSingle(source *GetNotificationChannelRequest) (interface{}, bool)
	ClearValue(item *GetNotificationChannelRequest)

	// Those methods build corresponding GetNotificationChannelRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetNotificationChannelRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetNotificationChannelRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetNotificationChannelRequest_FieldPathArrayItemValue
}

type GetNotificationChannelRequest_FieldPathSelector int32

const (
	GetNotificationChannelRequest_FieldPathSelectorName      GetNotificationChannelRequest_FieldPathSelector = 0
	GetNotificationChannelRequest_FieldPathSelectorFieldMask GetNotificationChannelRequest_FieldPathSelector = 1
	GetNotificationChannelRequest_FieldPathSelectorView      GetNotificationChannelRequest_FieldPathSelector = 2
)

func (s GetNotificationChannelRequest_FieldPathSelector) String() string {
	switch s {
	case GetNotificationChannelRequest_FieldPathSelectorName:
		return "name"
	case GetNotificationChannelRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetNotificationChannelRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationChannelRequest: %d", s))
	}
}

func BuildGetNotificationChannelRequest_FieldPath(fp gotenobject.RawFieldPath) (GetNotificationChannelRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetNotificationChannelRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetNotificationChannelRequest_FieldTerminalPath{selector: GetNotificationChannelRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetNotificationChannelRequest_FieldTerminalPath{selector: GetNotificationChannelRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetNotificationChannelRequest_FieldTerminalPath{selector: GetNotificationChannelRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetNotificationChannelRequest", fp)
}

func ParseGetNotificationChannelRequest_FieldPath(rawField string) (GetNotificationChannelRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetNotificationChannelRequest_FieldPath(fp)
}

func MustParseGetNotificationChannelRequest_FieldPath(rawField string) GetNotificationChannelRequest_FieldPath {
	fp, err := ParseGetNotificationChannelRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetNotificationChannelRequest_FieldTerminalPath struct {
	selector GetNotificationChannelRequest_FieldPathSelector
}

var _ GetNotificationChannelRequest_FieldPath = (*GetNotificationChannelRequest_FieldTerminalPath)(nil)

func (fp *GetNotificationChannelRequest_FieldTerminalPath) Selector() GetNotificationChannelRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetNotificationChannelRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetNotificationChannelRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetNotificationChannelRequest
func (fp *GetNotificationChannelRequest_FieldTerminalPath) Get(source *GetNotificationChannelRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetNotificationChannelRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetNotificationChannelRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetNotificationChannelRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetNotificationChannelRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetNotificationChannelRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetNotificationChannelRequest))
}

// GetSingle returns value pointed by specific field of from source GetNotificationChannelRequest
func (fp *GetNotificationChannelRequest_FieldTerminalPath) GetSingle(source *GetNotificationChannelRequest) (interface{}, bool) {
	switch fp.selector {
	case GetNotificationChannelRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetNotificationChannelRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetNotificationChannelRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *GetNotificationChannelRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetNotificationChannelRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetNotificationChannelRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetNotificationChannelRequest_FieldPathSelectorName:
		return (*notification_channel.Reference)(nil)
	case GetNotificationChannelRequest_FieldPathSelectorFieldMask:
		return (*notification_channel.NotificationChannel_FieldMask)(nil)
	case GetNotificationChannelRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *GetNotificationChannelRequest_FieldTerminalPath) ClearValue(item *GetNotificationChannelRequest) {
	if item != nil {
		switch fp.selector {
		case GetNotificationChannelRequest_FieldPathSelectorName:
			item.Name = nil
		case GetNotificationChannelRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetNotificationChannelRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetNotificationChannelRequest: %d", fp.selector))
		}
	}
}

func (fp *GetNotificationChannelRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetNotificationChannelRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetNotificationChannelRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetNotificationChannelRequest_FieldPathSelectorName ||
		fp.selector == GetNotificationChannelRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetNotificationChannelRequest_FieldPathSelectorView
}

func (fp *GetNotificationChannelRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetNotificationChannelRequest_FieldTerminalPath) WithIValue(value interface{}) GetNotificationChannelRequest_FieldPathValue {
	switch fp.selector {
	case GetNotificationChannelRequest_FieldPathSelectorName:
		return &GetNotificationChannelRequest_FieldTerminalPathValue{GetNotificationChannelRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.Reference)}
	case GetNotificationChannelRequest_FieldPathSelectorFieldMask:
		return &GetNotificationChannelRequest_FieldTerminalPathValue{GetNotificationChannelRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannel_FieldMask)}
	case GetNotificationChannelRequest_FieldPathSelectorView:
		return &GetNotificationChannelRequest_FieldTerminalPathValue{GetNotificationChannelRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *GetNotificationChannelRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetNotificationChannelRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetNotificationChannelRequest_FieldPathArrayOfValues {
	fpaov := &GetNotificationChannelRequest_FieldTerminalPathArrayOfValues{GetNotificationChannelRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetNotificationChannelRequest_FieldPathSelectorName:
		return &GetNotificationChannelRequest_FieldTerminalPathArrayOfValues{GetNotificationChannelRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.Reference)}
	case GetNotificationChannelRequest_FieldPathSelectorFieldMask:
		return &GetNotificationChannelRequest_FieldTerminalPathArrayOfValues{GetNotificationChannelRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.NotificationChannel_FieldMask)}
	case GetNotificationChannelRequest_FieldPathSelectorView:
		return &GetNotificationChannelRequest_FieldTerminalPathArrayOfValues{GetNotificationChannelRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationChannelRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetNotificationChannelRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetNotificationChannelRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetNotificationChannelRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *GetNotificationChannelRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetNotificationChannelRequest_FieldPathValue allows storing values for GetNotificationChannelRequest fields according to their type
type GetNotificationChannelRequest_FieldPathValue interface {
	GetNotificationChannelRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetNotificationChannelRequest)
	CompareWith(*GetNotificationChannelRequest) (cmp int, comparable bool)
}

func ParseGetNotificationChannelRequest_FieldPathValue(pathStr, valueStr string) (GetNotificationChannelRequest_FieldPathValue, error) {
	fp, err := ParseGetNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetNotificationChannelRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetNotificationChannelRequest_FieldPathValue), nil
}

func MustParseGetNotificationChannelRequest_FieldPathValue(pathStr, valueStr string) GetNotificationChannelRequest_FieldPathValue {
	fpv, err := ParseGetNotificationChannelRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetNotificationChannelRequest_FieldTerminalPathValue struct {
	GetNotificationChannelRequest_FieldTerminalPath
	value interface{}
}

var _ GetNotificationChannelRequest_FieldPathValue = (*GetNotificationChannelRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetNotificationChannelRequest' as interface{}
func (fpv *GetNotificationChannelRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetNotificationChannelRequest_FieldTerminalPathValue) AsNameValue() (*notification_channel.Reference, bool) {
	res, ok := fpv.value.(*notification_channel.Reference)
	return res, ok
}
func (fpv *GetNotificationChannelRequest_FieldTerminalPathValue) AsFieldMaskValue() (*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}
func (fpv *GetNotificationChannelRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetNotificationChannelRequest
func (fpv *GetNotificationChannelRequest_FieldTerminalPathValue) SetTo(target **GetNotificationChannelRequest) {
	if *target == nil {
		*target = new(GetNotificationChannelRequest)
	}
	switch fpv.selector {
	case GetNotificationChannelRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*notification_channel.Reference)
	case GetNotificationChannelRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	case GetNotificationChannelRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationChannelRequest: %d", fpv.selector))
	}
}

func (fpv *GetNotificationChannelRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetNotificationChannelRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetNotificationChannelRequest_FieldTerminalPathValue' with the value under path in 'GetNotificationChannelRequest'.
func (fpv *GetNotificationChannelRequest_FieldTerminalPathValue) CompareWith(source *GetNotificationChannelRequest) (int, bool) {
	switch fpv.selector {
	case GetNotificationChannelRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*notification_channel.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetNotificationChannelRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetNotificationChannelRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetNotificationChannelRequest: %d", fpv.selector))
	}
}

func (fpv *GetNotificationChannelRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetNotificationChannelRequest))
}

// GetNotificationChannelRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetNotificationChannelRequest according to their type
// Present only for array (repeated) types.
type GetNotificationChannelRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetNotificationChannelRequest_FieldPath
	ContainsValue(*GetNotificationChannelRequest) bool
}

// ParseGetNotificationChannelRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetNotificationChannelRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetNotificationChannelRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetNotificationChannelRequest_FieldPathArrayItemValue), nil
}

func MustParseGetNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetNotificationChannelRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetNotificationChannelRequest_FieldTerminalPathArrayItemValue struct {
	GetNotificationChannelRequest_FieldTerminalPath
	value interface{}
}

var _ GetNotificationChannelRequest_FieldPathArrayItemValue = (*GetNotificationChannelRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetNotificationChannelRequest as interface{}
func (fpaiv *GetNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetNotificationChannelRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetNotificationChannelRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetNotificationChannelRequest'
func (fpaiv *GetNotificationChannelRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetNotificationChannelRequest) bool {
	slice := fpaiv.GetNotificationChannelRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetNotificationChannelRequest_FieldPathArrayOfValues allows storing slice of values for GetNotificationChannelRequest fields according to their type
type GetNotificationChannelRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetNotificationChannelRequest_FieldPath
}

func ParseGetNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetNotificationChannelRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetNotificationChannelRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetNotificationChannelRequest_FieldPathArrayOfValues), nil
}

func MustParseGetNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetNotificationChannelRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetNotificationChannelRequest_FieldTerminalPathArrayOfValues struct {
	GetNotificationChannelRequest_FieldTerminalPath
	values interface{}
}

var _ GetNotificationChannelRequest_FieldPathArrayOfValues = (*GetNotificationChannelRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetNotificationChannelRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetNotificationChannelRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*notification_channel.Reference) {
			values = append(values, v)
		}
	case GetNotificationChannelRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*notification_channel.NotificationChannel_FieldMask) {
			values = append(values, v)
		}
	case GetNotificationChannelRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetNotificationChannelRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*notification_channel.Reference, bool) {
	res, ok := fpaov.values.([]*notification_channel.Reference)
	return res, ok
}
func (fpaov *GetNotificationChannelRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}
func (fpaov *GetNotificationChannelRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetNotificationChannelsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetNotificationChannelsRequest_FieldPathSelector
	Get(source *BatchGetNotificationChannelsRequest) []interface{}
	GetSingle(source *BatchGetNotificationChannelsRequest) (interface{}, bool)
	ClearValue(item *BatchGetNotificationChannelsRequest)

	// Those methods build corresponding BatchGetNotificationChannelsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetNotificationChannelsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetNotificationChannelsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetNotificationChannelsRequest_FieldPathArrayItemValue
}

type BatchGetNotificationChannelsRequest_FieldPathSelector int32

const (
	BatchGetNotificationChannelsRequest_FieldPathSelectorNames     BatchGetNotificationChannelsRequest_FieldPathSelector = 0
	BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask BatchGetNotificationChannelsRequest_FieldPathSelector = 1
	BatchGetNotificationChannelsRequest_FieldPathSelectorView      BatchGetNotificationChannelsRequest_FieldPathSelector = 2
)

func (s BatchGetNotificationChannelsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetNotificationChannelsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetNotificationChannelsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsRequest: %d", s))
	}
}

func BuildBatchGetNotificationChannelsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetNotificationChannelsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetNotificationChannelsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetNotificationChannelsRequest_FieldTerminalPath{selector: BatchGetNotificationChannelsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetNotificationChannelsRequest_FieldTerminalPath{selector: BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetNotificationChannelsRequest_FieldTerminalPath{selector: BatchGetNotificationChannelsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetNotificationChannelsRequest", fp)
}

func ParseBatchGetNotificationChannelsRequest_FieldPath(rawField string) (BatchGetNotificationChannelsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetNotificationChannelsRequest_FieldPath(fp)
}

func MustParseBatchGetNotificationChannelsRequest_FieldPath(rawField string) BatchGetNotificationChannelsRequest_FieldPath {
	fp, err := ParseBatchGetNotificationChannelsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetNotificationChannelsRequest_FieldTerminalPath struct {
	selector BatchGetNotificationChannelsRequest_FieldPathSelector
}

var _ BatchGetNotificationChannelsRequest_FieldPath = (*BatchGetNotificationChannelsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) Selector() BatchGetNotificationChannelsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetNotificationChannelsRequest
func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) Get(source *BatchGetNotificationChannelsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetNotificationChannelsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetNotificationChannelsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetNotificationChannelsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetNotificationChannelsRequest
func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) GetSingle(source *BatchGetNotificationChannelsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetNotificationChannelsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetNotificationChannelsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetNotificationChannelsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetNotificationChannelsRequest_FieldPathSelectorNames:
		return ([]*notification_channel.Reference)(nil)
	case BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return (*notification_channel.NotificationChannel_FieldMask)(nil)
	case BatchGetNotificationChannelsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) ClearValue(item *BatchGetNotificationChannelsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetNotificationChannelsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetNotificationChannelsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetNotificationChannelsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetNotificationChannelsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetNotificationChannelsRequest_FieldPathSelectorView
}

func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetNotificationChannelsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetNotificationChannelsRequest_FieldPathSelectorNames:
		return &BatchGetNotificationChannelsRequest_FieldTerminalPathValue{BatchGetNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.([]*notification_channel.Reference)}
	case BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return &BatchGetNotificationChannelsRequest_FieldTerminalPathValue{BatchGetNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannel_FieldMask)}
	case BatchGetNotificationChannelsRequest_FieldPathSelectorView:
		return &BatchGetNotificationChannelsRequest_FieldTerminalPathValue{BatchGetNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetNotificationChannelsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetNotificationChannelsRequest_FieldTerminalPathArrayOfValues{BatchGetNotificationChannelsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetNotificationChannelsRequest_FieldPathSelectorNames:
		return &BatchGetNotificationChannelsRequest_FieldTerminalPathArrayOfValues{BatchGetNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([][]*notification_channel.Reference)}
	case BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return &BatchGetNotificationChannelsRequest_FieldTerminalPathArrayOfValues{BatchGetNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.NotificationChannel_FieldMask)}
	case BatchGetNotificationChannelsRequest_FieldPathSelectorView:
		return &BatchGetNotificationChannelsRequest_FieldTerminalPathArrayOfValues{BatchGetNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetNotificationChannelsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetNotificationChannelsRequest_FieldPathSelectorNames:
		return &BatchGetNotificationChannelsRequest_FieldTerminalPathArrayItemValue{BatchGetNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationChannelsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetNotificationChannelsRequest_FieldPathValue allows storing values for BatchGetNotificationChannelsRequest fields according to their type
type BatchGetNotificationChannelsRequest_FieldPathValue interface {
	BatchGetNotificationChannelsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetNotificationChannelsRequest)
	CompareWith(*BatchGetNotificationChannelsRequest) (cmp int, comparable bool)
}

func ParseBatchGetNotificationChannelsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetNotificationChannelsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetNotificationChannelsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetNotificationChannelsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetNotificationChannelsRequest_FieldPathValue), nil
}

func MustParseBatchGetNotificationChannelsRequest_FieldPathValue(pathStr, valueStr string) BatchGetNotificationChannelsRequest_FieldPathValue {
	fpv, err := ParseBatchGetNotificationChannelsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetNotificationChannelsRequest_FieldTerminalPathValue struct {
	BatchGetNotificationChannelsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetNotificationChannelsRequest_FieldPathValue = (*BatchGetNotificationChannelsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetNotificationChannelsRequest' as interface{}
func (fpv *BatchGetNotificationChannelsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetNotificationChannelsRequest_FieldTerminalPathValue) AsNamesValue() ([]*notification_channel.Reference, bool) {
	res, ok := fpv.value.([]*notification_channel.Reference)
	return res, ok
}
func (fpv *BatchGetNotificationChannelsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}
func (fpv *BatchGetNotificationChannelsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetNotificationChannelsRequest
func (fpv *BatchGetNotificationChannelsRequest_FieldTerminalPathValue) SetTo(target **BatchGetNotificationChannelsRequest) {
	if *target == nil {
		*target = new(BatchGetNotificationChannelsRequest)
	}
	switch fpv.selector {
	case BatchGetNotificationChannelsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*notification_channel.Reference)
	case BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	case BatchGetNotificationChannelsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetNotificationChannelsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetNotificationChannelsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetNotificationChannelsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetNotificationChannelsRequest'.
func (fpv *BatchGetNotificationChannelsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetNotificationChannelsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetNotificationChannelsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetNotificationChannelsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetNotificationChannelsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetNotificationChannelsRequest))
}

// BatchGetNotificationChannelsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetNotificationChannelsRequest according to their type
// Present only for array (repeated) types.
type BatchGetNotificationChannelsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetNotificationChannelsRequest_FieldPath
	ContainsValue(*BatchGetNotificationChannelsRequest) bool
}

// ParseBatchGetNotificationChannelsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetNotificationChannelsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetNotificationChannelsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetNotificationChannelsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetNotificationChannelsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetNotificationChannelsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetNotificationChannelsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetNotificationChannelsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetNotificationChannelsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetNotificationChannelsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetNotificationChannelsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetNotificationChannelsRequest_FieldPathArrayItemValue = (*BatchGetNotificationChannelsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetNotificationChannelsRequest as interface{}
func (fpaiv *BatchGetNotificationChannelsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetNotificationChannelsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*notification_channel.Reference, bool) {
	res, ok := fpaiv.value.(*notification_channel.Reference)
	return res, ok
}

func (fpaiv *BatchGetNotificationChannelsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetNotificationChannelsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetNotificationChannelsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetNotificationChannelsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetNotificationChannelsRequest'
func (fpaiv *BatchGetNotificationChannelsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetNotificationChannelsRequest) bool {
	slice := fpaiv.BatchGetNotificationChannelsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetNotificationChannelsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetNotificationChannelsRequest fields according to their type
type BatchGetNotificationChannelsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetNotificationChannelsRequest_FieldPath
}

func ParseBatchGetNotificationChannelsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetNotificationChannelsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetNotificationChannelsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetNotificationChannelsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetNotificationChannelsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetNotificationChannelsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetNotificationChannelsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetNotificationChannelsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetNotificationChannelsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetNotificationChannelsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetNotificationChannelsRequest_FieldPathArrayOfValues = (*BatchGetNotificationChannelsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetNotificationChannelsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetNotificationChannelsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*notification_channel.Reference) {
			values = append(values, v)
		}
	case BatchGetNotificationChannelsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*notification_channel.NotificationChannel_FieldMask) {
			values = append(values, v)
		}
	case BatchGetNotificationChannelsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*notification_channel.Reference, bool) {
	res, ok := fpaov.values.([][]*notification_channel.Reference)
	return res, ok
}
func (fpaov *BatchGetNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}
func (fpaov *BatchGetNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetNotificationChannelsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetNotificationChannelsResponse_FieldPathSelector
	Get(source *BatchGetNotificationChannelsResponse) []interface{}
	GetSingle(source *BatchGetNotificationChannelsResponse) (interface{}, bool)
	ClearValue(item *BatchGetNotificationChannelsResponse)

	// Those methods build corresponding BatchGetNotificationChannelsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetNotificationChannelsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetNotificationChannelsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetNotificationChannelsResponse_FieldPathArrayItemValue
}

type BatchGetNotificationChannelsResponse_FieldPathSelector int32

const (
	BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels BatchGetNotificationChannelsResponse_FieldPathSelector = 0
	BatchGetNotificationChannelsResponse_FieldPathSelectorMissing              BatchGetNotificationChannelsResponse_FieldPathSelector = 1
)

func (s BatchGetNotificationChannelsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return "notification_channels"
	case BatchGetNotificationChannelsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", s))
	}
}

func BuildBatchGetNotificationChannelsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetNotificationChannelsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetNotificationChannelsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "notification_channels", "notificationChannels", "notification-channels":
			return &BatchGetNotificationChannelsResponse_FieldTerminalPath{selector: BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels}, nil
		case "missing":
			return &BatchGetNotificationChannelsResponse_FieldTerminalPath{selector: BatchGetNotificationChannelsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "notification_channels", "notificationChannels", "notification-channels":
			if subpath, err := notification_channel.BuildNotificationChannel_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetNotificationChannelsResponse_FieldSubPath{selector: BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetNotificationChannelsResponse", fp)
}

func ParseBatchGetNotificationChannelsResponse_FieldPath(rawField string) (BatchGetNotificationChannelsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetNotificationChannelsResponse_FieldPath(fp)
}

func MustParseBatchGetNotificationChannelsResponse_FieldPath(rawField string) BatchGetNotificationChannelsResponse_FieldPath {
	fp, err := ParseBatchGetNotificationChannelsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetNotificationChannelsResponse_FieldTerminalPath struct {
	selector BatchGetNotificationChannelsResponse_FieldPathSelector
}

var _ BatchGetNotificationChannelsResponse_FieldPath = (*BatchGetNotificationChannelsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) Selector() BatchGetNotificationChannelsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetNotificationChannelsResponse
func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) Get(source *BatchGetNotificationChannelsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
			for _, value := range source.GetNotificationChannels() {
				values = append(values, value)
			}
		case BatchGetNotificationChannelsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetNotificationChannelsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetNotificationChannelsResponse
func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) GetSingle(source *BatchGetNotificationChannelsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		res := source.GetNotificationChannels()
		return res, res != nil
	case BatchGetNotificationChannelsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetNotificationChannelsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return ([]*notification_channel.NotificationChannel)(nil)
	case BatchGetNotificationChannelsResponse_FieldPathSelectorMissing:
		return ([]*notification_channel.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) ClearValue(item *BatchGetNotificationChannelsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
			item.NotificationChannels = nil
		case BatchGetNotificationChannelsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetNotificationChannelsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetNotificationChannelsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetNotificationChannelsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return &BatchGetNotificationChannelsResponse_FieldTerminalPathValue{BatchGetNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.([]*notification_channel.NotificationChannel)}
	case BatchGetNotificationChannelsResponse_FieldPathSelectorMissing:
		return &BatchGetNotificationChannelsResponse_FieldTerminalPathValue{BatchGetNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.([]*notification_channel.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetNotificationChannelsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetNotificationChannelsResponse_FieldTerminalPathArrayOfValues{BatchGetNotificationChannelsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return &BatchGetNotificationChannelsResponse_FieldTerminalPathArrayOfValues{BatchGetNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([][]*notification_channel.NotificationChannel)}
	case BatchGetNotificationChannelsResponse_FieldPathSelectorMissing:
		return &BatchGetNotificationChannelsResponse_FieldTerminalPathArrayOfValues{BatchGetNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([][]*notification_channel.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetNotificationChannelsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return &BatchGetNotificationChannelsResponse_FieldTerminalPathArrayItemValue{BatchGetNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannel)}
	case BatchGetNotificationChannelsResponse_FieldPathSelectorMissing:
		return &BatchGetNotificationChannelsResponse_FieldTerminalPathArrayItemValue{BatchGetNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(*notification_channel.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetNotificationChannelsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetNotificationChannelsResponse_FieldSubPath struct {
	selector BatchGetNotificationChannelsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetNotificationChannelsResponse_FieldPath = (*BatchGetNotificationChannelsResponse_FieldSubPath)(nil)

func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) Selector() BatchGetNotificationChannelsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) AsNotificationChannelsSubPath() (notification_channel.NotificationChannel_FieldPath, bool) {
	res, ok := fps.subPath.(notification_channel.NotificationChannel_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetNotificationChannelsResponse
func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) Get(source *BatchGetNotificationChannelsResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		for _, item := range source.GetNotificationChannels() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetNotificationChannelsResponse))
}

// GetSingle returns value of selected field from source BatchGetNotificationChannelsResponse
func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) GetSingle(source *BatchGetNotificationChannelsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		if len(source.GetNotificationChannels()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNotificationChannels()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetNotificationChannelsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) ClearValue(item *BatchGetNotificationChannelsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
			for _, subItem := range item.NotificationChannels {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetNotificationChannelsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetNotificationChannelsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetNotificationChannelsResponse_FieldPathValue {
	return &BatchGetNotificationChannelsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetNotificationChannelsResponse_FieldPathArrayOfValues {
	return &BatchGetNotificationChannelsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetNotificationChannelsResponse_FieldPathArrayItemValue {
	return &BatchGetNotificationChannelsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetNotificationChannelsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetNotificationChannelsResponse_FieldPathValue allows storing values for BatchGetNotificationChannelsResponse fields according to their type
type BatchGetNotificationChannelsResponse_FieldPathValue interface {
	BatchGetNotificationChannelsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetNotificationChannelsResponse)
	CompareWith(*BatchGetNotificationChannelsResponse) (cmp int, comparable bool)
}

func ParseBatchGetNotificationChannelsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetNotificationChannelsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetNotificationChannelsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetNotificationChannelsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetNotificationChannelsResponse_FieldPathValue), nil
}

func MustParseBatchGetNotificationChannelsResponse_FieldPathValue(pathStr, valueStr string) BatchGetNotificationChannelsResponse_FieldPathValue {
	fpv, err := ParseBatchGetNotificationChannelsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetNotificationChannelsResponse_FieldTerminalPathValue struct {
	BatchGetNotificationChannelsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetNotificationChannelsResponse_FieldPathValue = (*BatchGetNotificationChannelsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetNotificationChannelsResponse' as interface{}
func (fpv *BatchGetNotificationChannelsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetNotificationChannelsResponse_FieldTerminalPathValue) AsNotificationChannelsValue() ([]*notification_channel.NotificationChannel, bool) {
	res, ok := fpv.value.([]*notification_channel.NotificationChannel)
	return res, ok
}
func (fpv *BatchGetNotificationChannelsResponse_FieldTerminalPathValue) AsMissingValue() ([]*notification_channel.Reference, bool) {
	res, ok := fpv.value.([]*notification_channel.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetNotificationChannelsResponse
func (fpv *BatchGetNotificationChannelsResponse_FieldTerminalPathValue) SetTo(target **BatchGetNotificationChannelsResponse) {
	if *target == nil {
		*target = new(BatchGetNotificationChannelsResponse)
	}
	switch fpv.selector {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		(*target).NotificationChannels = fpv.value.([]*notification_channel.NotificationChannel)
	case BatchGetNotificationChannelsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*notification_channel.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetNotificationChannelsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetNotificationChannelsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetNotificationChannelsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetNotificationChannelsResponse'.
func (fpv *BatchGetNotificationChannelsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetNotificationChannelsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return 0, false
	case BatchGetNotificationChannelsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetNotificationChannelsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetNotificationChannelsResponse))
}

type BatchGetNotificationChannelsResponse_FieldSubPathValue struct {
	BatchGetNotificationChannelsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetNotificationChannelsResponse_FieldPathValue = (*BatchGetNotificationChannelsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetNotificationChannelsResponse_FieldSubPathValue) AsNotificationChannelsPathValue() (notification_channel.NotificationChannel_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(notification_channel.NotificationChannel_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetNotificationChannelsResponse_FieldSubPathValue) SetTo(target **BatchGetNotificationChannelsResponse) {
	if *target == nil {
		*target = new(BatchGetNotificationChannelsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetNotificationChannelsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetNotificationChannelsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetNotificationChannelsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetNotificationChannelsResponse_FieldSubPathValue) CompareWith(source *BatchGetNotificationChannelsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetNotificationChannelsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetNotificationChannelsResponse))
}

// BatchGetNotificationChannelsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetNotificationChannelsResponse according to their type
// Present only for array (repeated) types.
type BatchGetNotificationChannelsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetNotificationChannelsResponse_FieldPath
	ContainsValue(*BatchGetNotificationChannelsResponse) bool
}

// ParseBatchGetNotificationChannelsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetNotificationChannelsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetNotificationChannelsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetNotificationChannelsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetNotificationChannelsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetNotificationChannelsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetNotificationChannelsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetNotificationChannelsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetNotificationChannelsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetNotificationChannelsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetNotificationChannelsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetNotificationChannelsResponse_FieldPathArrayItemValue = (*BatchGetNotificationChannelsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetNotificationChannelsResponse as interface{}
func (fpaiv *BatchGetNotificationChannelsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetNotificationChannelsResponse_FieldTerminalPathArrayItemValue) AsNotificationChannelsItemValue() (*notification_channel.NotificationChannel, bool) {
	res, ok := fpaiv.value.(*notification_channel.NotificationChannel)
	return res, ok
}
func (fpaiv *BatchGetNotificationChannelsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*notification_channel.Reference, bool) {
	res, ok := fpaiv.value.(*notification_channel.Reference)
	return res, ok
}

func (fpaiv *BatchGetNotificationChannelsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetNotificationChannelsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetNotificationChannelsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetNotificationChannelsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetNotificationChannelsResponse'
func (fpaiv *BatchGetNotificationChannelsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetNotificationChannelsResponse) bool {
	slice := fpaiv.BatchGetNotificationChannelsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetNotificationChannelsResponse_FieldSubPathArrayItemValue struct {
	BatchGetNotificationChannelsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetNotificationChannelsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetNotificationChannelsResponse_FieldSubPathArrayItemValue) AsNotificationChannelsPathItemValue() (notification_channel.NotificationChannel_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(notification_channel.NotificationChannel_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetNotificationChannelsResponse'
func (fpaivs *BatchGetNotificationChannelsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetNotificationChannelsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetNotificationChannelsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetNotificationChannelsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetNotificationChannelsResponse fields according to their type
type BatchGetNotificationChannelsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetNotificationChannelsResponse_FieldPath
}

func ParseBatchGetNotificationChannelsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetNotificationChannelsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetNotificationChannelsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetNotificationChannelsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetNotificationChannelsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetNotificationChannelsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetNotificationChannelsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetNotificationChannelsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetNotificationChannelsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetNotificationChannelsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetNotificationChannelsResponse_FieldPathArrayOfValues = (*BatchGetNotificationChannelsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetNotificationChannelsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		for _, v := range fpaov.values.([][]*notification_channel.NotificationChannel) {
			values = append(values, v)
		}
	case BatchGetNotificationChannelsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*notification_channel.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsNotificationChannelsArrayOfValues() ([][]*notification_channel.NotificationChannel, bool) {
	res, ok := fpaov.values.([][]*notification_channel.NotificationChannel)
	return res, ok
}
func (fpaov *BatchGetNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*notification_channel.Reference, bool) {
	res, ok := fpaov.values.([][]*notification_channel.Reference)
	return res, ok
}

type BatchGetNotificationChannelsResponse_FieldSubPathArrayOfValues struct {
	BatchGetNotificationChannelsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetNotificationChannelsResponse_FieldPathArrayOfValues = (*BatchGetNotificationChannelsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetNotificationChannelsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetNotificationChannelsResponse_FieldSubPathArrayOfValues) AsNotificationChannelsPathArrayOfValues() (notification_channel.NotificationChannel_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(notification_channel.NotificationChannel_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListNotificationChannelsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListNotificationChannelsRequest_FieldPathSelector
	Get(source *ListNotificationChannelsRequest) []interface{}
	GetSingle(source *ListNotificationChannelsRequest) (interface{}, bool)
	ClearValue(item *ListNotificationChannelsRequest)

	// Those methods build corresponding ListNotificationChannelsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListNotificationChannelsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListNotificationChannelsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListNotificationChannelsRequest_FieldPathArrayItemValue
}

type ListNotificationChannelsRequest_FieldPathSelector int32

const (
	ListNotificationChannelsRequest_FieldPathSelectorParent            ListNotificationChannelsRequest_FieldPathSelector = 0
	ListNotificationChannelsRequest_FieldPathSelectorPageSize          ListNotificationChannelsRequest_FieldPathSelector = 1
	ListNotificationChannelsRequest_FieldPathSelectorPageToken         ListNotificationChannelsRequest_FieldPathSelector = 2
	ListNotificationChannelsRequest_FieldPathSelectorOrderBy           ListNotificationChannelsRequest_FieldPathSelector = 3
	ListNotificationChannelsRequest_FieldPathSelectorFilter            ListNotificationChannelsRequest_FieldPathSelector = 4
	ListNotificationChannelsRequest_FieldPathSelectorFieldMask         ListNotificationChannelsRequest_FieldPathSelector = 5
	ListNotificationChannelsRequest_FieldPathSelectorView              ListNotificationChannelsRequest_FieldPathSelector = 6
	ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo ListNotificationChannelsRequest_FieldPathSelector = 7
)

func (s ListNotificationChannelsRequest_FieldPathSelector) String() string {
	switch s {
	case ListNotificationChannelsRequest_FieldPathSelectorParent:
		return "parent"
	case ListNotificationChannelsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListNotificationChannelsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListNotificationChannelsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListNotificationChannelsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListNotificationChannelsRequest_FieldPathSelectorView:
		return "view"
	case ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsRequest: %d", s))
	}
}

func BuildListNotificationChannelsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListNotificationChannelsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListNotificationChannelsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListNotificationChannelsRequest_FieldTerminalPath{selector: ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListNotificationChannelsRequest", fp)
}

func ParseListNotificationChannelsRequest_FieldPath(rawField string) (ListNotificationChannelsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListNotificationChannelsRequest_FieldPath(fp)
}

func MustParseListNotificationChannelsRequest_FieldPath(rawField string) ListNotificationChannelsRequest_FieldPath {
	fp, err := ParseListNotificationChannelsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListNotificationChannelsRequest_FieldTerminalPath struct {
	selector ListNotificationChannelsRequest_FieldPathSelector
}

var _ ListNotificationChannelsRequest_FieldPath = (*ListNotificationChannelsRequest_FieldTerminalPath)(nil)

func (fp *ListNotificationChannelsRequest_FieldTerminalPath) Selector() ListNotificationChannelsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListNotificationChannelsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListNotificationChannelsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListNotificationChannelsRequest
func (fp *ListNotificationChannelsRequest_FieldTerminalPath) Get(source *ListNotificationChannelsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListNotificationChannelsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListNotificationChannelsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListNotificationChannelsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListNotificationChannelsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListNotificationChannelsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListNotificationChannelsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListNotificationChannelsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListNotificationChannelsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListNotificationChannelsRequest))
}

// GetSingle returns value pointed by specific field of from source ListNotificationChannelsRequest
func (fp *ListNotificationChannelsRequest_FieldTerminalPath) GetSingle(source *ListNotificationChannelsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListNotificationChannelsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListNotificationChannelsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListNotificationChannelsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListNotificationChannelsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListNotificationChannelsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListNotificationChannelsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListNotificationChannelsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsRequest: %d", fp.selector))
	}
}

func (fp *ListNotificationChannelsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListNotificationChannelsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListNotificationChannelsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListNotificationChannelsRequest_FieldPathSelectorParent:
		return (*notification_channel.ParentName)(nil)
	case ListNotificationChannelsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListNotificationChannelsRequest_FieldPathSelectorPageToken:
		return (*notification_channel.PagerCursor)(nil)
	case ListNotificationChannelsRequest_FieldPathSelectorOrderBy:
		return (*notification_channel.OrderBy)(nil)
	case ListNotificationChannelsRequest_FieldPathSelectorFilter:
		return (*notification_channel.Filter)(nil)
	case ListNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return (*notification_channel.NotificationChannel_FieldMask)(nil)
	case ListNotificationChannelsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsRequest: %d", fp.selector))
	}
}

func (fp *ListNotificationChannelsRequest_FieldTerminalPath) ClearValue(item *ListNotificationChannelsRequest) {
	if item != nil {
		switch fp.selector {
		case ListNotificationChannelsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListNotificationChannelsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListNotificationChannelsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListNotificationChannelsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListNotificationChannelsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListNotificationChannelsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListNotificationChannelsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListNotificationChannelsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListNotificationChannelsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListNotificationChannelsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListNotificationChannelsRequest_FieldPathSelectorParent ||
		fp.selector == ListNotificationChannelsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListNotificationChannelsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListNotificationChannelsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListNotificationChannelsRequest_FieldPathSelectorFilter ||
		fp.selector == ListNotificationChannelsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListNotificationChannelsRequest_FieldPathSelectorView ||
		fp.selector == ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListNotificationChannelsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListNotificationChannelsRequest_FieldTerminalPath) WithIValue(value interface{}) ListNotificationChannelsRequest_FieldPathValue {
	switch fp.selector {
	case ListNotificationChannelsRequest_FieldPathSelectorParent:
		return &ListNotificationChannelsRequest_FieldTerminalPathValue{ListNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.ParentName)}
	case ListNotificationChannelsRequest_FieldPathSelectorPageSize:
		return &ListNotificationChannelsRequest_FieldTerminalPathValue{ListNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListNotificationChannelsRequest_FieldPathSelectorPageToken:
		return &ListNotificationChannelsRequest_FieldTerminalPathValue{ListNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.PagerCursor)}
	case ListNotificationChannelsRequest_FieldPathSelectorOrderBy:
		return &ListNotificationChannelsRequest_FieldTerminalPathValue{ListNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.OrderBy)}
	case ListNotificationChannelsRequest_FieldPathSelectorFilter:
		return &ListNotificationChannelsRequest_FieldTerminalPathValue{ListNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.Filter)}
	case ListNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return &ListNotificationChannelsRequest_FieldTerminalPathValue{ListNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannel_FieldMask)}
	case ListNotificationChannelsRequest_FieldPathSelectorView:
		return &ListNotificationChannelsRequest_FieldTerminalPathValue{ListNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListNotificationChannelsRequest_FieldTerminalPathValue{ListNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsRequest: %d", fp.selector))
	}
}

func (fp *ListNotificationChannelsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListNotificationChannelsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListNotificationChannelsRequest_FieldPathArrayOfValues {
	fpaov := &ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues{ListNotificationChannelsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListNotificationChannelsRequest_FieldPathSelectorParent:
		return &ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues{ListNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.ParentName)}
	case ListNotificationChannelsRequest_FieldPathSelectorPageSize:
		return &ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues{ListNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListNotificationChannelsRequest_FieldPathSelectorPageToken:
		return &ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues{ListNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.PagerCursor)}
	case ListNotificationChannelsRequest_FieldPathSelectorOrderBy:
		return &ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues{ListNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.OrderBy)}
	case ListNotificationChannelsRequest_FieldPathSelectorFilter:
		return &ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues{ListNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.Filter)}
	case ListNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return &ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues{ListNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.NotificationChannel_FieldMask)}
	case ListNotificationChannelsRequest_FieldPathSelectorView:
		return &ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues{ListNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues{ListNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListNotificationChannelsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListNotificationChannelsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListNotificationChannelsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsRequest: %d", fp.selector))
	}
}

func (fp *ListNotificationChannelsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListNotificationChannelsRequest_FieldPathValue allows storing values for ListNotificationChannelsRequest fields according to their type
type ListNotificationChannelsRequest_FieldPathValue interface {
	ListNotificationChannelsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListNotificationChannelsRequest)
	CompareWith(*ListNotificationChannelsRequest) (cmp int, comparable bool)
}

func ParseListNotificationChannelsRequest_FieldPathValue(pathStr, valueStr string) (ListNotificationChannelsRequest_FieldPathValue, error) {
	fp, err := ParseListNotificationChannelsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListNotificationChannelsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListNotificationChannelsRequest_FieldPathValue), nil
}

func MustParseListNotificationChannelsRequest_FieldPathValue(pathStr, valueStr string) ListNotificationChannelsRequest_FieldPathValue {
	fpv, err := ParseListNotificationChannelsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListNotificationChannelsRequest_FieldTerminalPathValue struct {
	ListNotificationChannelsRequest_FieldTerminalPath
	value interface{}
}

var _ ListNotificationChannelsRequest_FieldPathValue = (*ListNotificationChannelsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListNotificationChannelsRequest' as interface{}
func (fpv *ListNotificationChannelsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListNotificationChannelsRequest_FieldTerminalPathValue) AsParentValue() (*notification_channel.ParentName, bool) {
	res, ok := fpv.value.(*notification_channel.ParentName)
	return res, ok
}
func (fpv *ListNotificationChannelsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListNotificationChannelsRequest_FieldTerminalPathValue) AsPageTokenValue() (*notification_channel.PagerCursor, bool) {
	res, ok := fpv.value.(*notification_channel.PagerCursor)
	return res, ok
}
func (fpv *ListNotificationChannelsRequest_FieldTerminalPathValue) AsOrderByValue() (*notification_channel.OrderBy, bool) {
	res, ok := fpv.value.(*notification_channel.OrderBy)
	return res, ok
}
func (fpv *ListNotificationChannelsRequest_FieldTerminalPathValue) AsFilterValue() (*notification_channel.Filter, bool) {
	res, ok := fpv.value.(*notification_channel.Filter)
	return res, ok
}
func (fpv *ListNotificationChannelsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}
func (fpv *ListNotificationChannelsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListNotificationChannelsRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListNotificationChannelsRequest
func (fpv *ListNotificationChannelsRequest_FieldTerminalPathValue) SetTo(target **ListNotificationChannelsRequest) {
	if *target == nil {
		*target = new(ListNotificationChannelsRequest)
	}
	switch fpv.selector {
	case ListNotificationChannelsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*notification_channel.ParentName)
	case ListNotificationChannelsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListNotificationChannelsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*notification_channel.PagerCursor)
	case ListNotificationChannelsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*notification_channel.OrderBy)
	case ListNotificationChannelsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*notification_channel.Filter)
	case ListNotificationChannelsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	case ListNotificationChannelsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsRequest: %d", fpv.selector))
	}
}

func (fpv *ListNotificationChannelsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListNotificationChannelsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListNotificationChannelsRequest_FieldTerminalPathValue' with the value under path in 'ListNotificationChannelsRequest'.
func (fpv *ListNotificationChannelsRequest_FieldTerminalPathValue) CompareWith(source *ListNotificationChannelsRequest) (int, bool) {
	switch fpv.selector {
	case ListNotificationChannelsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*notification_channel.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListNotificationChannelsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListNotificationChannelsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListNotificationChannelsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListNotificationChannelsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListNotificationChannelsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsRequest: %d", fpv.selector))
	}
}

func (fpv *ListNotificationChannelsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListNotificationChannelsRequest))
}

// ListNotificationChannelsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListNotificationChannelsRequest according to their type
// Present only for array (repeated) types.
type ListNotificationChannelsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListNotificationChannelsRequest_FieldPath
	ContainsValue(*ListNotificationChannelsRequest) bool
}

// ParseListNotificationChannelsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListNotificationChannelsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListNotificationChannelsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListNotificationChannelsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListNotificationChannelsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListNotificationChannelsRequest_FieldPathArrayItemValue), nil
}

func MustParseListNotificationChannelsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListNotificationChannelsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListNotificationChannelsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListNotificationChannelsRequest_FieldTerminalPathArrayItemValue struct {
	ListNotificationChannelsRequest_FieldTerminalPath
	value interface{}
}

var _ ListNotificationChannelsRequest_FieldPathArrayItemValue = (*ListNotificationChannelsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListNotificationChannelsRequest as interface{}
func (fpaiv *ListNotificationChannelsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListNotificationChannelsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListNotificationChannelsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListNotificationChannelsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListNotificationChannelsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListNotificationChannelsRequest'
func (fpaiv *ListNotificationChannelsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListNotificationChannelsRequest) bool {
	slice := fpaiv.ListNotificationChannelsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListNotificationChannelsRequest_FieldPathArrayOfValues allows storing slice of values for ListNotificationChannelsRequest fields according to their type
type ListNotificationChannelsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListNotificationChannelsRequest_FieldPath
}

func ParseListNotificationChannelsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListNotificationChannelsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListNotificationChannelsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListNotificationChannelsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListNotificationChannelsRequest_FieldPathArrayOfValues), nil
}

func MustParseListNotificationChannelsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListNotificationChannelsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListNotificationChannelsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues struct {
	ListNotificationChannelsRequest_FieldTerminalPath
	values interface{}
}

var _ ListNotificationChannelsRequest_FieldPathArrayOfValues = (*ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListNotificationChannelsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*notification_channel.ParentName) {
			values = append(values, v)
		}
	case ListNotificationChannelsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListNotificationChannelsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*notification_channel.PagerCursor) {
			values = append(values, v)
		}
	case ListNotificationChannelsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*notification_channel.OrderBy) {
			values = append(values, v)
		}
	case ListNotificationChannelsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*notification_channel.Filter) {
			values = append(values, v)
		}
	case ListNotificationChannelsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*notification_channel.NotificationChannel_FieldMask) {
			values = append(values, v)
		}
	case ListNotificationChannelsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListNotificationChannelsRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*notification_channel.ParentName, bool) {
	res, ok := fpaov.values.([]*notification_channel.ParentName)
	return res, ok
}
func (fpaov *ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*notification_channel.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification_channel.PagerCursor)
	return res, ok
}
func (fpaov *ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*notification_channel.OrderBy, bool) {
	res, ok := fpaov.values.([]*notification_channel.OrderBy)
	return res, ok
}
func (fpaov *ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*notification_channel.Filter, bool) {
	res, ok := fpaov.values.([]*notification_channel.Filter)
	return res, ok
}
func (fpaov *ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}
func (fpaov *ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListNotificationChannelsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListNotificationChannelsResponse_FieldPathSelector
	Get(source *ListNotificationChannelsResponse) []interface{}
	GetSingle(source *ListNotificationChannelsResponse) (interface{}, bool)
	ClearValue(item *ListNotificationChannelsResponse)

	// Those methods build corresponding ListNotificationChannelsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListNotificationChannelsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListNotificationChannelsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListNotificationChannelsResponse_FieldPathArrayItemValue
}

type ListNotificationChannelsResponse_FieldPathSelector int32

const (
	ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels ListNotificationChannelsResponse_FieldPathSelector = 0
	ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken        ListNotificationChannelsResponse_FieldPathSelector = 1
	ListNotificationChannelsResponse_FieldPathSelectorNextPageToken        ListNotificationChannelsResponse_FieldPathSelector = 2
	ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset        ListNotificationChannelsResponse_FieldPathSelector = 3
	ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount    ListNotificationChannelsResponse_FieldPathSelector = 4
)

func (s ListNotificationChannelsResponse_FieldPathSelector) String() string {
	switch s {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return "notification_channels"
	case ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListNotificationChannelsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", s))
	}
}

func BuildListNotificationChannelsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListNotificationChannelsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListNotificationChannelsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "notification_channels", "notificationChannels", "notification-channels":
			return &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListNotificationChannelsResponse_FieldTerminalPath{selector: ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "notification_channels", "notificationChannels", "notification-channels":
			if subpath, err := notification_channel.BuildNotificationChannel_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListNotificationChannelsResponse_FieldSubPath{selector: ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListNotificationChannelsResponse", fp)
}

func ParseListNotificationChannelsResponse_FieldPath(rawField string) (ListNotificationChannelsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListNotificationChannelsResponse_FieldPath(fp)
}

func MustParseListNotificationChannelsResponse_FieldPath(rawField string) ListNotificationChannelsResponse_FieldPath {
	fp, err := ParseListNotificationChannelsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListNotificationChannelsResponse_FieldTerminalPath struct {
	selector ListNotificationChannelsResponse_FieldPathSelector
}

var _ ListNotificationChannelsResponse_FieldPath = (*ListNotificationChannelsResponse_FieldTerminalPath)(nil)

func (fp *ListNotificationChannelsResponse_FieldTerminalPath) Selector() ListNotificationChannelsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListNotificationChannelsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListNotificationChannelsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListNotificationChannelsResponse
func (fp *ListNotificationChannelsResponse_FieldTerminalPath) Get(source *ListNotificationChannelsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
			for _, value := range source.GetNotificationChannels() {
				values = append(values, value)
			}
		case ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListNotificationChannelsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListNotificationChannelsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListNotificationChannelsResponse))
}

// GetSingle returns value pointed by specific field of from source ListNotificationChannelsResponse
func (fp *ListNotificationChannelsResponse_FieldTerminalPath) GetSingle(source *ListNotificationChannelsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		res := source.GetNotificationChannels()
		return res, res != nil
	case ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListNotificationChannelsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fp.selector))
	}
}

func (fp *ListNotificationChannelsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListNotificationChannelsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListNotificationChannelsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return ([]*notification_channel.NotificationChannel)(nil)
	case ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken:
		return (*notification_channel.PagerCursor)(nil)
	case ListNotificationChannelsResponse_FieldPathSelectorNextPageToken:
		return (*notification_channel.PagerCursor)(nil)
	case ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fp.selector))
	}
}

func (fp *ListNotificationChannelsResponse_FieldTerminalPath) ClearValue(item *ListNotificationChannelsResponse) {
	if item != nil {
		switch fp.selector {
		case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
			item.NotificationChannels = nil
		case ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListNotificationChannelsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListNotificationChannelsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListNotificationChannelsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListNotificationChannelsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListNotificationChannelsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListNotificationChannelsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListNotificationChannelsResponse_FieldTerminalPath) WithIValue(value interface{}) ListNotificationChannelsResponse_FieldPathValue {
	switch fp.selector {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return &ListNotificationChannelsResponse_FieldTerminalPathValue{ListNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.([]*notification_channel.NotificationChannel)}
	case ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken:
		return &ListNotificationChannelsResponse_FieldTerminalPathValue{ListNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(*notification_channel.PagerCursor)}
	case ListNotificationChannelsResponse_FieldPathSelectorNextPageToken:
		return &ListNotificationChannelsResponse_FieldTerminalPathValue{ListNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(*notification_channel.PagerCursor)}
	case ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset:
		return &ListNotificationChannelsResponse_FieldTerminalPathValue{ListNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount:
		return &ListNotificationChannelsResponse_FieldTerminalPathValue{ListNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fp.selector))
	}
}

func (fp *ListNotificationChannelsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListNotificationChannelsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListNotificationChannelsResponse_FieldPathArrayOfValues {
	fpaov := &ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues{ListNotificationChannelsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return &ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues{ListNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([][]*notification_channel.NotificationChannel)}
	case ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken:
		return &ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues{ListNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([]*notification_channel.PagerCursor)}
	case ListNotificationChannelsResponse_FieldPathSelectorNextPageToken:
		return &ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues{ListNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([]*notification_channel.PagerCursor)}
	case ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset:
		return &ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues{ListNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount:
		return &ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues{ListNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListNotificationChannelsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListNotificationChannelsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListNotificationChannelsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return &ListNotificationChannelsResponse_FieldTerminalPathArrayItemValue{ListNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannel)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fp.selector))
	}
}

func (fp *ListNotificationChannelsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListNotificationChannelsResponse_FieldSubPath struct {
	selector ListNotificationChannelsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListNotificationChannelsResponse_FieldPath = (*ListNotificationChannelsResponse_FieldSubPath)(nil)

func (fps *ListNotificationChannelsResponse_FieldSubPath) Selector() ListNotificationChannelsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListNotificationChannelsResponse_FieldSubPath) AsNotificationChannelsSubPath() (notification_channel.NotificationChannel_FieldPath, bool) {
	res, ok := fps.subPath.(notification_channel.NotificationChannel_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListNotificationChannelsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListNotificationChannelsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListNotificationChannelsResponse
func (fps *ListNotificationChannelsResponse_FieldSubPath) Get(source *ListNotificationChannelsResponse) (values []interface{}) {
	switch fps.selector {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		for _, item := range source.GetNotificationChannels() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListNotificationChannelsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListNotificationChannelsResponse))
}

// GetSingle returns value of selected field from source ListNotificationChannelsResponse
func (fps *ListNotificationChannelsResponse_FieldSubPath) GetSingle(source *ListNotificationChannelsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		if len(source.GetNotificationChannels()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNotificationChannels()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fps.selector))
	}
}

func (fps *ListNotificationChannelsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListNotificationChannelsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListNotificationChannelsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListNotificationChannelsResponse_FieldSubPath) ClearValue(item *ListNotificationChannelsResponse) {
	if item != nil {
		switch fps.selector {
		case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
			for _, subItem := range item.NotificationChannels {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListNotificationChannelsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListNotificationChannelsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListNotificationChannelsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListNotificationChannelsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListNotificationChannelsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListNotificationChannelsResponse_FieldSubPath) WithIValue(value interface{}) ListNotificationChannelsResponse_FieldPathValue {
	return &ListNotificationChannelsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListNotificationChannelsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListNotificationChannelsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListNotificationChannelsResponse_FieldPathArrayOfValues {
	return &ListNotificationChannelsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListNotificationChannelsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListNotificationChannelsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListNotificationChannelsResponse_FieldPathArrayItemValue {
	return &ListNotificationChannelsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListNotificationChannelsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListNotificationChannelsResponse_FieldPathValue allows storing values for ListNotificationChannelsResponse fields according to their type
type ListNotificationChannelsResponse_FieldPathValue interface {
	ListNotificationChannelsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListNotificationChannelsResponse)
	CompareWith(*ListNotificationChannelsResponse) (cmp int, comparable bool)
}

func ParseListNotificationChannelsResponse_FieldPathValue(pathStr, valueStr string) (ListNotificationChannelsResponse_FieldPathValue, error) {
	fp, err := ParseListNotificationChannelsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListNotificationChannelsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListNotificationChannelsResponse_FieldPathValue), nil
}

func MustParseListNotificationChannelsResponse_FieldPathValue(pathStr, valueStr string) ListNotificationChannelsResponse_FieldPathValue {
	fpv, err := ParseListNotificationChannelsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListNotificationChannelsResponse_FieldTerminalPathValue struct {
	ListNotificationChannelsResponse_FieldTerminalPath
	value interface{}
}

var _ ListNotificationChannelsResponse_FieldPathValue = (*ListNotificationChannelsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListNotificationChannelsResponse' as interface{}
func (fpv *ListNotificationChannelsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListNotificationChannelsResponse_FieldTerminalPathValue) AsNotificationChannelsValue() ([]*notification_channel.NotificationChannel, bool) {
	res, ok := fpv.value.([]*notification_channel.NotificationChannel)
	return res, ok
}
func (fpv *ListNotificationChannelsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*notification_channel.PagerCursor, bool) {
	res, ok := fpv.value.(*notification_channel.PagerCursor)
	return res, ok
}
func (fpv *ListNotificationChannelsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*notification_channel.PagerCursor, bool) {
	res, ok := fpv.value.(*notification_channel.PagerCursor)
	return res, ok
}
func (fpv *ListNotificationChannelsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListNotificationChannelsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListNotificationChannelsResponse
func (fpv *ListNotificationChannelsResponse_FieldTerminalPathValue) SetTo(target **ListNotificationChannelsResponse) {
	if *target == nil {
		*target = new(ListNotificationChannelsResponse)
	}
	switch fpv.selector {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		(*target).NotificationChannels = fpv.value.([]*notification_channel.NotificationChannel)
	case ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*notification_channel.PagerCursor)
	case ListNotificationChannelsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*notification_channel.PagerCursor)
	case ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fpv.selector))
	}
}

func (fpv *ListNotificationChannelsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListNotificationChannelsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListNotificationChannelsResponse_FieldTerminalPathValue' with the value under path in 'ListNotificationChannelsResponse'.
func (fpv *ListNotificationChannelsResponse_FieldTerminalPathValue) CompareWith(source *ListNotificationChannelsResponse) (int, bool) {
	switch fpv.selector {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return 0, false
	case ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListNotificationChannelsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fpv.selector))
	}
}

func (fpv *ListNotificationChannelsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListNotificationChannelsResponse))
}

type ListNotificationChannelsResponse_FieldSubPathValue struct {
	ListNotificationChannelsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListNotificationChannelsResponse_FieldPathValue = (*ListNotificationChannelsResponse_FieldSubPathValue)(nil)

func (fpvs *ListNotificationChannelsResponse_FieldSubPathValue) AsNotificationChannelsPathValue() (notification_channel.NotificationChannel_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(notification_channel.NotificationChannel_FieldPathValue)
	return res, ok
}

func (fpvs *ListNotificationChannelsResponse_FieldSubPathValue) SetTo(target **ListNotificationChannelsResponse) {
	if *target == nil {
		*target = new(ListNotificationChannelsResponse)
	}
	switch fpvs.Selector() {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListNotificationChannelsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListNotificationChannelsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListNotificationChannelsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListNotificationChannelsResponse_FieldSubPathValue) CompareWith(source *ListNotificationChannelsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListNotificationChannelsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListNotificationChannelsResponse))
}

// ListNotificationChannelsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListNotificationChannelsResponse according to their type
// Present only for array (repeated) types.
type ListNotificationChannelsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListNotificationChannelsResponse_FieldPath
	ContainsValue(*ListNotificationChannelsResponse) bool
}

// ParseListNotificationChannelsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListNotificationChannelsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListNotificationChannelsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListNotificationChannelsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListNotificationChannelsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListNotificationChannelsResponse_FieldPathArrayItemValue), nil
}

func MustParseListNotificationChannelsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListNotificationChannelsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListNotificationChannelsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListNotificationChannelsResponse_FieldTerminalPathArrayItemValue struct {
	ListNotificationChannelsResponse_FieldTerminalPath
	value interface{}
}

var _ ListNotificationChannelsResponse_FieldPathArrayItemValue = (*ListNotificationChannelsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListNotificationChannelsResponse as interface{}
func (fpaiv *ListNotificationChannelsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListNotificationChannelsResponse_FieldTerminalPathArrayItemValue) AsNotificationChannelsItemValue() (*notification_channel.NotificationChannel, bool) {
	res, ok := fpaiv.value.(*notification_channel.NotificationChannel)
	return res, ok
}

func (fpaiv *ListNotificationChannelsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListNotificationChannelsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListNotificationChannelsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListNotificationChannelsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListNotificationChannelsResponse'
func (fpaiv *ListNotificationChannelsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListNotificationChannelsResponse) bool {
	slice := fpaiv.ListNotificationChannelsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListNotificationChannelsResponse_FieldSubPathArrayItemValue struct {
	ListNotificationChannelsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListNotificationChannelsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListNotificationChannelsResponse_FieldSubPathArrayItemValue) AsNotificationChannelsPathItemValue() (notification_channel.NotificationChannel_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(notification_channel.NotificationChannel_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListNotificationChannelsResponse'
func (fpaivs *ListNotificationChannelsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListNotificationChannelsResponse) bool {
	switch fpaivs.Selector() {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListNotificationChannelsResponse: %d", fpaivs.Selector()))
	}
}

// ListNotificationChannelsResponse_FieldPathArrayOfValues allows storing slice of values for ListNotificationChannelsResponse fields according to their type
type ListNotificationChannelsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListNotificationChannelsResponse_FieldPath
}

func ParseListNotificationChannelsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListNotificationChannelsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListNotificationChannelsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListNotificationChannelsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListNotificationChannelsResponse_FieldPathArrayOfValues), nil
}

func MustParseListNotificationChannelsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListNotificationChannelsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListNotificationChannelsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues struct {
	ListNotificationChannelsResponse_FieldTerminalPath
	values interface{}
}

var _ ListNotificationChannelsResponse_FieldPathArrayOfValues = (*ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListNotificationChannelsResponse_FieldPathSelectorNotificationChannels:
		for _, v := range fpaov.values.([][]*notification_channel.NotificationChannel) {
			values = append(values, v)
		}
	case ListNotificationChannelsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*notification_channel.PagerCursor) {
			values = append(values, v)
		}
	case ListNotificationChannelsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*notification_channel.PagerCursor) {
			values = append(values, v)
		}
	case ListNotificationChannelsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListNotificationChannelsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsNotificationChannelsArrayOfValues() ([][]*notification_channel.NotificationChannel, bool) {
	res, ok := fpaov.values.([][]*notification_channel.NotificationChannel)
	return res, ok
}
func (fpaov *ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*notification_channel.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification_channel.PagerCursor)
	return res, ok
}
func (fpaov *ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*notification_channel.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification_channel.PagerCursor)
	return res, ok
}
func (fpaov *ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListNotificationChannelsResponse_FieldSubPathArrayOfValues struct {
	ListNotificationChannelsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListNotificationChannelsResponse_FieldPathArrayOfValues = (*ListNotificationChannelsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListNotificationChannelsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListNotificationChannelsResponse_FieldSubPathArrayOfValues) AsNotificationChannelsPathArrayOfValues() (notification_channel.NotificationChannel_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(notification_channel.NotificationChannel_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchNotificationChannelRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchNotificationChannelRequest_FieldPathSelector
	Get(source *WatchNotificationChannelRequest) []interface{}
	GetSingle(source *WatchNotificationChannelRequest) (interface{}, bool)
	ClearValue(item *WatchNotificationChannelRequest)

	// Those methods build corresponding WatchNotificationChannelRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchNotificationChannelRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchNotificationChannelRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchNotificationChannelRequest_FieldPathArrayItemValue
}

type WatchNotificationChannelRequest_FieldPathSelector int32

const (
	WatchNotificationChannelRequest_FieldPathSelectorName      WatchNotificationChannelRequest_FieldPathSelector = 0
	WatchNotificationChannelRequest_FieldPathSelectorFieldMask WatchNotificationChannelRequest_FieldPathSelector = 1
	WatchNotificationChannelRequest_FieldPathSelectorView      WatchNotificationChannelRequest_FieldPathSelector = 2
)

func (s WatchNotificationChannelRequest_FieldPathSelector) String() string {
	switch s {
	case WatchNotificationChannelRequest_FieldPathSelectorName:
		return "name"
	case WatchNotificationChannelRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchNotificationChannelRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelRequest: %d", s))
	}
}

func BuildWatchNotificationChannelRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchNotificationChannelRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchNotificationChannelRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchNotificationChannelRequest_FieldTerminalPath{selector: WatchNotificationChannelRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchNotificationChannelRequest_FieldTerminalPath{selector: WatchNotificationChannelRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchNotificationChannelRequest_FieldTerminalPath{selector: WatchNotificationChannelRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchNotificationChannelRequest", fp)
}

func ParseWatchNotificationChannelRequest_FieldPath(rawField string) (WatchNotificationChannelRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchNotificationChannelRequest_FieldPath(fp)
}

func MustParseWatchNotificationChannelRequest_FieldPath(rawField string) WatchNotificationChannelRequest_FieldPath {
	fp, err := ParseWatchNotificationChannelRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchNotificationChannelRequest_FieldTerminalPath struct {
	selector WatchNotificationChannelRequest_FieldPathSelector
}

var _ WatchNotificationChannelRequest_FieldPath = (*WatchNotificationChannelRequest_FieldTerminalPath)(nil)

func (fp *WatchNotificationChannelRequest_FieldTerminalPath) Selector() WatchNotificationChannelRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchNotificationChannelRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchNotificationChannelRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchNotificationChannelRequest
func (fp *WatchNotificationChannelRequest_FieldTerminalPath) Get(source *WatchNotificationChannelRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchNotificationChannelRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchNotificationChannelRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchNotificationChannelRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchNotificationChannelRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchNotificationChannelRequest))
}

// GetSingle returns value pointed by specific field of from source WatchNotificationChannelRequest
func (fp *WatchNotificationChannelRequest_FieldTerminalPath) GetSingle(source *WatchNotificationChannelRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchNotificationChannelRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchNotificationChannelRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchNotificationChannelRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchNotificationChannelRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchNotificationChannelRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchNotificationChannelRequest_FieldPathSelectorName:
		return (*notification_channel.Reference)(nil)
	case WatchNotificationChannelRequest_FieldPathSelectorFieldMask:
		return (*notification_channel.NotificationChannel_FieldMask)(nil)
	case WatchNotificationChannelRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelRequest_FieldTerminalPath) ClearValue(item *WatchNotificationChannelRequest) {
	if item != nil {
		switch fp.selector {
		case WatchNotificationChannelRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchNotificationChannelRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchNotificationChannelRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchNotificationChannelRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchNotificationChannelRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchNotificationChannelRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchNotificationChannelRequest_FieldPathSelectorName ||
		fp.selector == WatchNotificationChannelRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchNotificationChannelRequest_FieldPathSelectorView
}

func (fp *WatchNotificationChannelRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchNotificationChannelRequest_FieldTerminalPath) WithIValue(value interface{}) WatchNotificationChannelRequest_FieldPathValue {
	switch fp.selector {
	case WatchNotificationChannelRequest_FieldPathSelectorName:
		return &WatchNotificationChannelRequest_FieldTerminalPathValue{WatchNotificationChannelRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.Reference)}
	case WatchNotificationChannelRequest_FieldPathSelectorFieldMask:
		return &WatchNotificationChannelRequest_FieldTerminalPathValue{WatchNotificationChannelRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannel_FieldMask)}
	case WatchNotificationChannelRequest_FieldPathSelectorView:
		return &WatchNotificationChannelRequest_FieldTerminalPathValue{WatchNotificationChannelRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchNotificationChannelRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchNotificationChannelRequest_FieldPathArrayOfValues {
	fpaov := &WatchNotificationChannelRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchNotificationChannelRequest_FieldPathSelectorName:
		return &WatchNotificationChannelRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.Reference)}
	case WatchNotificationChannelRequest_FieldPathSelectorFieldMask:
		return &WatchNotificationChannelRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.NotificationChannel_FieldMask)}
	case WatchNotificationChannelRequest_FieldPathSelectorView:
		return &WatchNotificationChannelRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchNotificationChannelRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchNotificationChannelRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchNotificationChannelRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchNotificationChannelRequest_FieldPathValue allows storing values for WatchNotificationChannelRequest fields according to their type
type WatchNotificationChannelRequest_FieldPathValue interface {
	WatchNotificationChannelRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchNotificationChannelRequest)
	CompareWith(*WatchNotificationChannelRequest) (cmp int, comparable bool)
}

func ParseWatchNotificationChannelRequest_FieldPathValue(pathStr, valueStr string) (WatchNotificationChannelRequest_FieldPathValue, error) {
	fp, err := ParseWatchNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationChannelRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchNotificationChannelRequest_FieldPathValue), nil
}

func MustParseWatchNotificationChannelRequest_FieldPathValue(pathStr, valueStr string) WatchNotificationChannelRequest_FieldPathValue {
	fpv, err := ParseWatchNotificationChannelRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchNotificationChannelRequest_FieldTerminalPathValue struct {
	WatchNotificationChannelRequest_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationChannelRequest_FieldPathValue = (*WatchNotificationChannelRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchNotificationChannelRequest' as interface{}
func (fpv *WatchNotificationChannelRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchNotificationChannelRequest_FieldTerminalPathValue) AsNameValue() (*notification_channel.Reference, bool) {
	res, ok := fpv.value.(*notification_channel.Reference)
	return res, ok
}
func (fpv *WatchNotificationChannelRequest_FieldTerminalPathValue) AsFieldMaskValue() (*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}
func (fpv *WatchNotificationChannelRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchNotificationChannelRequest
func (fpv *WatchNotificationChannelRequest_FieldTerminalPathValue) SetTo(target **WatchNotificationChannelRequest) {
	if *target == nil {
		*target = new(WatchNotificationChannelRequest)
	}
	switch fpv.selector {
	case WatchNotificationChannelRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*notification_channel.Reference)
	case WatchNotificationChannelRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	case WatchNotificationChannelRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelRequest: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationChannelRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchNotificationChannelRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchNotificationChannelRequest_FieldTerminalPathValue' with the value under path in 'WatchNotificationChannelRequest'.
func (fpv *WatchNotificationChannelRequest_FieldTerminalPathValue) CompareWith(source *WatchNotificationChannelRequest) (int, bool) {
	switch fpv.selector {
	case WatchNotificationChannelRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*notification_channel.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationChannelRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchNotificationChannelRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelRequest: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationChannelRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchNotificationChannelRequest))
}

// WatchNotificationChannelRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchNotificationChannelRequest according to their type
// Present only for array (repeated) types.
type WatchNotificationChannelRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchNotificationChannelRequest_FieldPath
	ContainsValue(*WatchNotificationChannelRequest) bool
}

// ParseWatchNotificationChannelRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchNotificationChannelRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationChannelRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchNotificationChannelRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchNotificationChannelRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchNotificationChannelRequest_FieldTerminalPathArrayItemValue struct {
	WatchNotificationChannelRequest_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationChannelRequest_FieldPathArrayItemValue = (*WatchNotificationChannelRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchNotificationChannelRequest as interface{}
func (fpaiv *WatchNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchNotificationChannelRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchNotificationChannelRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchNotificationChannelRequest'
func (fpaiv *WatchNotificationChannelRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchNotificationChannelRequest) bool {
	slice := fpaiv.WatchNotificationChannelRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchNotificationChannelRequest_FieldPathArrayOfValues allows storing slice of values for WatchNotificationChannelRequest fields according to their type
type WatchNotificationChannelRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchNotificationChannelRequest_FieldPath
}

func ParseWatchNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchNotificationChannelRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationChannelRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchNotificationChannelRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchNotificationChannelRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchNotificationChannelRequest_FieldTerminalPathArrayOfValues struct {
	WatchNotificationChannelRequest_FieldTerminalPath
	values interface{}
}

var _ WatchNotificationChannelRequest_FieldPathArrayOfValues = (*WatchNotificationChannelRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchNotificationChannelRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchNotificationChannelRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*notification_channel.Reference) {
			values = append(values, v)
		}
	case WatchNotificationChannelRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*notification_channel.NotificationChannel_FieldMask) {
			values = append(values, v)
		}
	case WatchNotificationChannelRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchNotificationChannelRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*notification_channel.Reference, bool) {
	res, ok := fpaov.values.([]*notification_channel.Reference)
	return res, ok
}
func (fpaov *WatchNotificationChannelRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}
func (fpaov *WatchNotificationChannelRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchNotificationChannelResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchNotificationChannelResponse_FieldPathSelector
	Get(source *WatchNotificationChannelResponse) []interface{}
	GetSingle(source *WatchNotificationChannelResponse) (interface{}, bool)
	ClearValue(item *WatchNotificationChannelResponse)

	// Those methods build corresponding WatchNotificationChannelResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchNotificationChannelResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchNotificationChannelResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchNotificationChannelResponse_FieldPathArrayItemValue
}

type WatchNotificationChannelResponse_FieldPathSelector int32

const (
	WatchNotificationChannelResponse_FieldPathSelectorChange WatchNotificationChannelResponse_FieldPathSelector = 0
)

func (s WatchNotificationChannelResponse_FieldPathSelector) String() string {
	switch s {
	case WatchNotificationChannelResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelResponse: %d", s))
	}
}

func BuildWatchNotificationChannelResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchNotificationChannelResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchNotificationChannelResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchNotificationChannelResponse_FieldTerminalPath{selector: WatchNotificationChannelResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchNotificationChannelResponse", fp)
}

func ParseWatchNotificationChannelResponse_FieldPath(rawField string) (WatchNotificationChannelResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchNotificationChannelResponse_FieldPath(fp)
}

func MustParseWatchNotificationChannelResponse_FieldPath(rawField string) WatchNotificationChannelResponse_FieldPath {
	fp, err := ParseWatchNotificationChannelResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchNotificationChannelResponse_FieldTerminalPath struct {
	selector WatchNotificationChannelResponse_FieldPathSelector
}

var _ WatchNotificationChannelResponse_FieldPath = (*WatchNotificationChannelResponse_FieldTerminalPath)(nil)

func (fp *WatchNotificationChannelResponse_FieldTerminalPath) Selector() WatchNotificationChannelResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchNotificationChannelResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchNotificationChannelResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchNotificationChannelResponse
func (fp *WatchNotificationChannelResponse_FieldTerminalPath) Get(source *WatchNotificationChannelResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchNotificationChannelResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchNotificationChannelResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchNotificationChannelResponse))
}

// GetSingle returns value pointed by specific field of from source WatchNotificationChannelResponse
func (fp *WatchNotificationChannelResponse_FieldTerminalPath) GetSingle(source *WatchNotificationChannelResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchNotificationChannelResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchNotificationChannelResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchNotificationChannelResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchNotificationChannelResponse_FieldPathSelectorChange:
		return (*notification_channel.NotificationChannelChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelResponse_FieldTerminalPath) ClearValue(item *WatchNotificationChannelResponse) {
	if item != nil {
		switch fp.selector {
		case WatchNotificationChannelResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchNotificationChannelResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchNotificationChannelResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchNotificationChannelResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchNotificationChannelResponse_FieldPathSelectorChange
}

func (fp *WatchNotificationChannelResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchNotificationChannelResponse_FieldTerminalPath) WithIValue(value interface{}) WatchNotificationChannelResponse_FieldPathValue {
	switch fp.selector {
	case WatchNotificationChannelResponse_FieldPathSelectorChange:
		return &WatchNotificationChannelResponse_FieldTerminalPathValue{WatchNotificationChannelResponse_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannelChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchNotificationChannelResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchNotificationChannelResponse_FieldPathArrayOfValues {
	fpaov := &WatchNotificationChannelResponse_FieldTerminalPathArrayOfValues{WatchNotificationChannelResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchNotificationChannelResponse_FieldPathSelectorChange:
		return &WatchNotificationChannelResponse_FieldTerminalPathArrayOfValues{WatchNotificationChannelResponse_FieldTerminalPath: *fp, values: values.([]*notification_channel.NotificationChannelChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchNotificationChannelResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchNotificationChannelResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchNotificationChannelResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchNotificationChannelResponse_FieldPathValue allows storing values for WatchNotificationChannelResponse fields according to their type
type WatchNotificationChannelResponse_FieldPathValue interface {
	WatchNotificationChannelResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchNotificationChannelResponse)
	CompareWith(*WatchNotificationChannelResponse) (cmp int, comparable bool)
}

func ParseWatchNotificationChannelResponse_FieldPathValue(pathStr, valueStr string) (WatchNotificationChannelResponse_FieldPathValue, error) {
	fp, err := ParseWatchNotificationChannelResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationChannelResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchNotificationChannelResponse_FieldPathValue), nil
}

func MustParseWatchNotificationChannelResponse_FieldPathValue(pathStr, valueStr string) WatchNotificationChannelResponse_FieldPathValue {
	fpv, err := ParseWatchNotificationChannelResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchNotificationChannelResponse_FieldTerminalPathValue struct {
	WatchNotificationChannelResponse_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationChannelResponse_FieldPathValue = (*WatchNotificationChannelResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchNotificationChannelResponse' as interface{}
func (fpv *WatchNotificationChannelResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchNotificationChannelResponse_FieldTerminalPathValue) AsChangeValue() (*notification_channel.NotificationChannelChange, bool) {
	res, ok := fpv.value.(*notification_channel.NotificationChannelChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchNotificationChannelResponse
func (fpv *WatchNotificationChannelResponse_FieldTerminalPathValue) SetTo(target **WatchNotificationChannelResponse) {
	if *target == nil {
		*target = new(WatchNotificationChannelResponse)
	}
	switch fpv.selector {
	case WatchNotificationChannelResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*notification_channel.NotificationChannelChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelResponse: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationChannelResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchNotificationChannelResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchNotificationChannelResponse_FieldTerminalPathValue' with the value under path in 'WatchNotificationChannelResponse'.
func (fpv *WatchNotificationChannelResponse_FieldTerminalPathValue) CompareWith(source *WatchNotificationChannelResponse) (int, bool) {
	switch fpv.selector {
	case WatchNotificationChannelResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelResponse: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationChannelResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchNotificationChannelResponse))
}

// WatchNotificationChannelResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchNotificationChannelResponse according to their type
// Present only for array (repeated) types.
type WatchNotificationChannelResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchNotificationChannelResponse_FieldPath
	ContainsValue(*WatchNotificationChannelResponse) bool
}

// ParseWatchNotificationChannelResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchNotificationChannelResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchNotificationChannelResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchNotificationChannelResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationChannelResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchNotificationChannelResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchNotificationChannelResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchNotificationChannelResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchNotificationChannelResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchNotificationChannelResponse_FieldTerminalPathArrayItemValue struct {
	WatchNotificationChannelResponse_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationChannelResponse_FieldPathArrayItemValue = (*WatchNotificationChannelResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchNotificationChannelResponse as interface{}
func (fpaiv *WatchNotificationChannelResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchNotificationChannelResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchNotificationChannelResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchNotificationChannelResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchNotificationChannelResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchNotificationChannelResponse'
func (fpaiv *WatchNotificationChannelResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchNotificationChannelResponse) bool {
	slice := fpaiv.WatchNotificationChannelResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchNotificationChannelResponse_FieldPathArrayOfValues allows storing slice of values for WatchNotificationChannelResponse fields according to their type
type WatchNotificationChannelResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchNotificationChannelResponse_FieldPath
}

func ParseWatchNotificationChannelResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchNotificationChannelResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchNotificationChannelResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationChannelResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchNotificationChannelResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchNotificationChannelResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchNotificationChannelResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchNotificationChannelResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchNotificationChannelResponse_FieldTerminalPathArrayOfValues struct {
	WatchNotificationChannelResponse_FieldTerminalPath
	values interface{}
}

var _ WatchNotificationChannelResponse_FieldPathArrayOfValues = (*WatchNotificationChannelResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchNotificationChannelResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchNotificationChannelResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*notification_channel.NotificationChannelChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchNotificationChannelResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*notification_channel.NotificationChannelChange, bool) {
	res, ok := fpaov.values.([]*notification_channel.NotificationChannelChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchNotificationChannelsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchNotificationChannelsRequest_FieldPathSelector
	Get(source *WatchNotificationChannelsRequest) []interface{}
	GetSingle(source *WatchNotificationChannelsRequest) (interface{}, bool)
	ClearValue(item *WatchNotificationChannelsRequest)

	// Those methods build corresponding WatchNotificationChannelsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchNotificationChannelsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchNotificationChannelsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchNotificationChannelsRequest_FieldPathArrayItemValue
}

type WatchNotificationChannelsRequest_FieldPathSelector int32

const (
	WatchNotificationChannelsRequest_FieldPathSelectorType         WatchNotificationChannelsRequest_FieldPathSelector = 0
	WatchNotificationChannelsRequest_FieldPathSelectorParent       WatchNotificationChannelsRequest_FieldPathSelector = 1
	WatchNotificationChannelsRequest_FieldPathSelectorPageSize     WatchNotificationChannelsRequest_FieldPathSelector = 2
	WatchNotificationChannelsRequest_FieldPathSelectorPageToken    WatchNotificationChannelsRequest_FieldPathSelector = 3
	WatchNotificationChannelsRequest_FieldPathSelectorOrderBy      WatchNotificationChannelsRequest_FieldPathSelector = 4
	WatchNotificationChannelsRequest_FieldPathSelectorResumeToken  WatchNotificationChannelsRequest_FieldPathSelector = 5
	WatchNotificationChannelsRequest_FieldPathSelectorStartingTime WatchNotificationChannelsRequest_FieldPathSelector = 6
	WatchNotificationChannelsRequest_FieldPathSelectorFilter       WatchNotificationChannelsRequest_FieldPathSelector = 7
	WatchNotificationChannelsRequest_FieldPathSelectorFieldMask    WatchNotificationChannelsRequest_FieldPathSelector = 8
	WatchNotificationChannelsRequest_FieldPathSelectorView         WatchNotificationChannelsRequest_FieldPathSelector = 9
	WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize WatchNotificationChannelsRequest_FieldPathSelector = 10
)

func (s WatchNotificationChannelsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchNotificationChannelsRequest_FieldPathSelectorType:
		return "type"
	case WatchNotificationChannelsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchNotificationChannelsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchNotificationChannelsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchNotificationChannelsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchNotificationChannelsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchNotificationChannelsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchNotificationChannelsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchNotificationChannelsRequest_FieldPathSelectorView:
		return "view"
	case WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsRequest: %d", s))
	}
}

func BuildWatchNotificationChannelsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchNotificationChannelsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchNotificationChannelsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchNotificationChannelsRequest_FieldTerminalPath{selector: WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchNotificationChannelsRequest", fp)
}

func ParseWatchNotificationChannelsRequest_FieldPath(rawField string) (WatchNotificationChannelsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchNotificationChannelsRequest_FieldPath(fp)
}

func MustParseWatchNotificationChannelsRequest_FieldPath(rawField string) WatchNotificationChannelsRequest_FieldPath {
	fp, err := ParseWatchNotificationChannelsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchNotificationChannelsRequest_FieldTerminalPath struct {
	selector WatchNotificationChannelsRequest_FieldPathSelector
}

var _ WatchNotificationChannelsRequest_FieldPath = (*WatchNotificationChannelsRequest_FieldTerminalPath)(nil)

func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) Selector() WatchNotificationChannelsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchNotificationChannelsRequest
func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) Get(source *WatchNotificationChannelsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchNotificationChannelsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchNotificationChannelsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchNotificationChannelsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchNotificationChannelsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchNotificationChannelsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchNotificationChannelsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchNotificationChannelsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchNotificationChannelsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchNotificationChannelsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchNotificationChannelsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchNotificationChannelsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchNotificationChannelsRequest
func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) GetSingle(source *WatchNotificationChannelsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchNotificationChannelsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchNotificationChannelsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchNotificationChannelsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchNotificationChannelsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchNotificationChannelsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchNotificationChannelsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchNotificationChannelsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchNotificationChannelsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchNotificationChannelsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchNotificationChannelsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchNotificationChannelsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchNotificationChannelsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchNotificationChannelsRequest_FieldPathSelectorParent:
		return (*notification_channel.ParentReference)(nil)
	case WatchNotificationChannelsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchNotificationChannelsRequest_FieldPathSelectorPageToken:
		return (*notification_channel.PagerCursor)(nil)
	case WatchNotificationChannelsRequest_FieldPathSelectorOrderBy:
		return (*notification_channel.OrderBy)(nil)
	case WatchNotificationChannelsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchNotificationChannelsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchNotificationChannelsRequest_FieldPathSelectorFilter:
		return (*notification_channel.Filter)(nil)
	case WatchNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return (*notification_channel.NotificationChannel_FieldMask)(nil)
	case WatchNotificationChannelsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) ClearValue(item *WatchNotificationChannelsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchNotificationChannelsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchNotificationChannelsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchNotificationChannelsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchNotificationChannelsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchNotificationChannelsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchNotificationChannelsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchNotificationChannelsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchNotificationChannelsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchNotificationChannelsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchNotificationChannelsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchNotificationChannelsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchNotificationChannelsRequest_FieldPathSelectorType ||
		fp.selector == WatchNotificationChannelsRequest_FieldPathSelectorParent ||
		fp.selector == WatchNotificationChannelsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchNotificationChannelsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchNotificationChannelsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchNotificationChannelsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchNotificationChannelsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchNotificationChannelsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchNotificationChannelsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchNotificationChannelsRequest_FieldPathSelectorView ||
		fp.selector == WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchNotificationChannelsRequest_FieldPathValue {
	switch fp.selector {
	case WatchNotificationChannelsRequest_FieldPathSelectorType:
		return &WatchNotificationChannelsRequest_FieldTerminalPathValue{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchNotificationChannelsRequest_FieldPathSelectorParent:
		return &WatchNotificationChannelsRequest_FieldTerminalPathValue{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.ParentReference)}
	case WatchNotificationChannelsRequest_FieldPathSelectorPageSize:
		return &WatchNotificationChannelsRequest_FieldTerminalPathValue{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchNotificationChannelsRequest_FieldPathSelectorPageToken:
		return &WatchNotificationChannelsRequest_FieldTerminalPathValue{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.PagerCursor)}
	case WatchNotificationChannelsRequest_FieldPathSelectorOrderBy:
		return &WatchNotificationChannelsRequest_FieldTerminalPathValue{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.OrderBy)}
	case WatchNotificationChannelsRequest_FieldPathSelectorResumeToken:
		return &WatchNotificationChannelsRequest_FieldTerminalPathValue{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchNotificationChannelsRequest_FieldPathSelectorStartingTime:
		return &WatchNotificationChannelsRequest_FieldTerminalPathValue{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchNotificationChannelsRequest_FieldPathSelectorFilter:
		return &WatchNotificationChannelsRequest_FieldTerminalPathValue{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.Filter)}
	case WatchNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return &WatchNotificationChannelsRequest_FieldTerminalPathValue{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannel_FieldMask)}
	case WatchNotificationChannelsRequest_FieldPathSelectorView:
		return &WatchNotificationChannelsRequest_FieldTerminalPathValue{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchNotificationChannelsRequest_FieldTerminalPathValue{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchNotificationChannelsRequest_FieldPathArrayOfValues {
	fpaov := &WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchNotificationChannelsRequest_FieldPathSelectorType:
		return &WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchNotificationChannelsRequest_FieldPathSelectorParent:
		return &WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.ParentReference)}
	case WatchNotificationChannelsRequest_FieldPathSelectorPageSize:
		return &WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchNotificationChannelsRequest_FieldPathSelectorPageToken:
		return &WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.PagerCursor)}
	case WatchNotificationChannelsRequest_FieldPathSelectorOrderBy:
		return &WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.OrderBy)}
	case WatchNotificationChannelsRequest_FieldPathSelectorResumeToken:
		return &WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchNotificationChannelsRequest_FieldPathSelectorStartingTime:
		return &WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchNotificationChannelsRequest_FieldPathSelectorFilter:
		return &WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.Filter)}
	case WatchNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return &WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.NotificationChannel_FieldMask)}
	case WatchNotificationChannelsRequest_FieldPathSelectorView:
		return &WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues{WatchNotificationChannelsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchNotificationChannelsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsRequest: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchNotificationChannelsRequest_FieldPathValue allows storing values for WatchNotificationChannelsRequest fields according to their type
type WatchNotificationChannelsRequest_FieldPathValue interface {
	WatchNotificationChannelsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchNotificationChannelsRequest)
	CompareWith(*WatchNotificationChannelsRequest) (cmp int, comparable bool)
}

func ParseWatchNotificationChannelsRequest_FieldPathValue(pathStr, valueStr string) (WatchNotificationChannelsRequest_FieldPathValue, error) {
	fp, err := ParseWatchNotificationChannelsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationChannelsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchNotificationChannelsRequest_FieldPathValue), nil
}

func MustParseWatchNotificationChannelsRequest_FieldPathValue(pathStr, valueStr string) WatchNotificationChannelsRequest_FieldPathValue {
	fpv, err := ParseWatchNotificationChannelsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchNotificationChannelsRequest_FieldTerminalPathValue struct {
	WatchNotificationChannelsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationChannelsRequest_FieldPathValue = (*WatchNotificationChannelsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchNotificationChannelsRequest' as interface{}
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) AsParentValue() (*notification_channel.ParentReference, bool) {
	res, ok := fpv.value.(*notification_channel.ParentReference)
	return res, ok
}
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) AsPageTokenValue() (*notification_channel.PagerCursor, bool) {
	res, ok := fpv.value.(*notification_channel.PagerCursor)
	return res, ok
}
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) AsOrderByValue() (*notification_channel.OrderBy, bool) {
	res, ok := fpv.value.(*notification_channel.OrderBy)
	return res, ok
}
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) AsFilterValue() (*notification_channel.Filter, bool) {
	res, ok := fpv.value.(*notification_channel.Filter)
	return res, ok
}
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchNotificationChannelsRequest
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) SetTo(target **WatchNotificationChannelsRequest) {
	if *target == nil {
		*target = new(WatchNotificationChannelsRequest)
	}
	switch fpv.selector {
	case WatchNotificationChannelsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchNotificationChannelsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*notification_channel.ParentReference)
	case WatchNotificationChannelsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchNotificationChannelsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*notification_channel.PagerCursor)
	case WatchNotificationChannelsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*notification_channel.OrderBy)
	case WatchNotificationChannelsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchNotificationChannelsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchNotificationChannelsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*notification_channel.Filter)
	case WatchNotificationChannelsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	case WatchNotificationChannelsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchNotificationChannelsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchNotificationChannelsRequest_FieldTerminalPathValue' with the value under path in 'WatchNotificationChannelsRequest'.
func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) CompareWith(source *WatchNotificationChannelsRequest) (int, bool) {
	switch fpv.selector {
	case WatchNotificationChannelsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*notification_channel.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchNotificationChannelsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchNotificationChannelsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchNotificationChannelsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchNotificationChannelsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationChannelsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchNotificationChannelsRequest))
}

// WatchNotificationChannelsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchNotificationChannelsRequest according to their type
// Present only for array (repeated) types.
type WatchNotificationChannelsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchNotificationChannelsRequest_FieldPath
	ContainsValue(*WatchNotificationChannelsRequest) bool
}

// ParseWatchNotificationChannelsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchNotificationChannelsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchNotificationChannelsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchNotificationChannelsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationChannelsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchNotificationChannelsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchNotificationChannelsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchNotificationChannelsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchNotificationChannelsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchNotificationChannelsRequest_FieldTerminalPathArrayItemValue struct {
	WatchNotificationChannelsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationChannelsRequest_FieldPathArrayItemValue = (*WatchNotificationChannelsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchNotificationChannelsRequest as interface{}
func (fpaiv *WatchNotificationChannelsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchNotificationChannelsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchNotificationChannelsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchNotificationChannelsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchNotificationChannelsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchNotificationChannelsRequest'
func (fpaiv *WatchNotificationChannelsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchNotificationChannelsRequest) bool {
	slice := fpaiv.WatchNotificationChannelsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchNotificationChannelsRequest_FieldPathArrayOfValues allows storing slice of values for WatchNotificationChannelsRequest fields according to their type
type WatchNotificationChannelsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchNotificationChannelsRequest_FieldPath
}

func ParseWatchNotificationChannelsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchNotificationChannelsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchNotificationChannelsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationChannelsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchNotificationChannelsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchNotificationChannelsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchNotificationChannelsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchNotificationChannelsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues struct {
	WatchNotificationChannelsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchNotificationChannelsRequest_FieldPathArrayOfValues = (*WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchNotificationChannelsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*notification_channel.ParentReference) {
			values = append(values, v)
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*notification_channel.PagerCursor) {
			values = append(values, v)
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*notification_channel.OrderBy) {
			values = append(values, v)
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*notification_channel.Filter) {
			values = append(values, v)
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*notification_channel.NotificationChannel_FieldMask) {
			values = append(values, v)
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchNotificationChannelsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*notification_channel.ParentReference, bool) {
	res, ok := fpaov.values.([]*notification_channel.ParentReference)
	return res, ok
}
func (fpaov *WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*notification_channel.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification_channel.PagerCursor)
	return res, ok
}
func (fpaov *WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*notification_channel.OrderBy, bool) {
	res, ok := fpaov.values.([]*notification_channel.OrderBy)
	return res, ok
}
func (fpaov *WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*notification_channel.Filter, bool) {
	res, ok := fpaov.values.([]*notification_channel.Filter)
	return res, ok
}
func (fpaov *WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}
func (fpaov *WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchNotificationChannelsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchNotificationChannelsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchNotificationChannelsResponse_FieldPathSelector
	Get(source *WatchNotificationChannelsResponse) []interface{}
	GetSingle(source *WatchNotificationChannelsResponse) (interface{}, bool)
	ClearValue(item *WatchNotificationChannelsResponse)

	// Those methods build corresponding WatchNotificationChannelsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchNotificationChannelsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchNotificationChannelsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchNotificationChannelsResponse_FieldPathArrayItemValue
}

type WatchNotificationChannelsResponse_FieldPathSelector int32

const (
	WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges WatchNotificationChannelsResponse_FieldPathSelector = 0
	WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent                  WatchNotificationChannelsResponse_FieldPathSelector = 1
	WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange            WatchNotificationChannelsResponse_FieldPathSelector = 2
	WatchNotificationChannelsResponse_FieldPathSelectorResumeToken                WatchNotificationChannelsResponse_FieldPathSelector = 3
	WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize               WatchNotificationChannelsResponse_FieldPathSelector = 4
	WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset                WatchNotificationChannelsResponse_FieldPathSelector = 5
	WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset                WatchNotificationChannelsResponse_FieldPathSelector = 6
)

func (s WatchNotificationChannelsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges:
		return "notification_channel_changes"
	case WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchNotificationChannelsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", s))
	}
}

func BuildWatchNotificationChannelsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchNotificationChannelsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchNotificationChannelsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "notification_channel_changes", "notificationChannelChanges", "notification-channel-changes":
			return &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchNotificationChannelsResponse_FieldTerminalPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchNotificationChannelsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchNotificationChannelsResponse_FieldSubPath{selector: WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchNotificationChannelsResponse", fp)
}

func ParseWatchNotificationChannelsResponse_FieldPath(rawField string) (WatchNotificationChannelsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchNotificationChannelsResponse_FieldPath(fp)
}

func MustParseWatchNotificationChannelsResponse_FieldPath(rawField string) WatchNotificationChannelsResponse_FieldPath {
	fp, err := ParseWatchNotificationChannelsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchNotificationChannelsResponse_FieldTerminalPath struct {
	selector WatchNotificationChannelsResponse_FieldPathSelector
}

var _ WatchNotificationChannelsResponse_FieldPath = (*WatchNotificationChannelsResponse_FieldTerminalPath)(nil)

func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) Selector() WatchNotificationChannelsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchNotificationChannelsResponse
func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) Get(source *WatchNotificationChannelsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges:
			for _, value := range source.GetNotificationChannelChanges() {
				values = append(values, value)
			}
		case WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchNotificationChannelsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchNotificationChannelsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchNotificationChannelsResponse
func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) GetSingle(source *WatchNotificationChannelsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges:
		res := source.GetNotificationChannelChanges()
		return res, res != nil
	case WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchNotificationChannelsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchNotificationChannelsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges:
		return ([]*notification_channel.NotificationChannelChange)(nil)
	case WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchNotificationChannelsResponse_PageTokenChange)(nil)
	case WatchNotificationChannelsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) ClearValue(item *WatchNotificationChannelsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges:
			item.NotificationChannelChanges = nil
		case WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchNotificationChannelsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchNotificationChannelsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges ||
		fp.selector == WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchNotificationChannelsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchNotificationChannelsResponse_FieldPathValue {
	switch fp.selector {
	case WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges:
		return &WatchNotificationChannelsResponse_FieldTerminalPathValue{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.([]*notification_channel.NotificationChannelChange)}
	case WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent:
		return &WatchNotificationChannelsResponse_FieldTerminalPathValue{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
		return &WatchNotificationChannelsResponse_FieldTerminalPathValue{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(*WatchNotificationChannelsResponse_PageTokenChange)}
	case WatchNotificationChannelsResponse_FieldPathSelectorResumeToken:
		return &WatchNotificationChannelsResponse_FieldTerminalPathValue{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize:
		return &WatchNotificationChannelsResponse_FieldTerminalPathValue{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset:
		return &WatchNotificationChannelsResponse_FieldTerminalPathValue{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset:
		return &WatchNotificationChannelsResponse_FieldTerminalPathValue{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchNotificationChannelsResponse_FieldPathArrayOfValues {
	fpaov := &WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues{WatchNotificationChannelsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges:
		return &WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([][]*notification_channel.NotificationChannelChange)}
	case WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent:
		return &WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
		return &WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([]*WatchNotificationChannelsResponse_PageTokenChange)}
	case WatchNotificationChannelsResponse_FieldPathSelectorResumeToken:
		return &WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize:
		return &WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset:
		return &WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset:
		return &WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchNotificationChannelsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges:
		return &WatchNotificationChannelsResponse_FieldTerminalPathArrayItemValue{WatchNotificationChannelsResponse_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannelChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchNotificationChannelsResponse_FieldSubPath struct {
	selector WatchNotificationChannelsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchNotificationChannelsResponse_FieldPath = (*WatchNotificationChannelsResponse_FieldSubPath)(nil)

func (fps *WatchNotificationChannelsResponse_FieldSubPath) Selector() WatchNotificationChannelsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchNotificationChannelsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchNotificationChannelsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchNotificationChannelsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchNotificationChannelsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchNotificationChannelsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchNotificationChannelsResponse
func (fps *WatchNotificationChannelsResponse_FieldSubPath) Get(source *WatchNotificationChannelsResponse) (values []interface{}) {
	switch fps.selector {
	case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchNotificationChannelsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchNotificationChannelsResponse))
}

// GetSingle returns value of selected field from source WatchNotificationChannelsResponse
func (fps *WatchNotificationChannelsResponse_FieldSubPath) GetSingle(source *WatchNotificationChannelsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fps.selector))
	}
}

func (fps *WatchNotificationChannelsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchNotificationChannelsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchNotificationChannelsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchNotificationChannelsResponse_FieldSubPath) ClearValue(item *WatchNotificationChannelsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchNotificationChannelsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchNotificationChannelsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchNotificationChannelsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchNotificationChannelsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchNotificationChannelsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchNotificationChannelsResponse_FieldSubPath) WithIValue(value interface{}) WatchNotificationChannelsResponse_FieldPathValue {
	return &WatchNotificationChannelsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchNotificationChannelsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchNotificationChannelsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchNotificationChannelsResponse_FieldPathArrayOfValues {
	return &WatchNotificationChannelsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchNotificationChannelsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchNotificationChannelsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchNotificationChannelsResponse_FieldPathArrayItemValue {
	return &WatchNotificationChannelsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchNotificationChannelsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchNotificationChannelsResponse_FieldPathValue allows storing values for WatchNotificationChannelsResponse fields according to their type
type WatchNotificationChannelsResponse_FieldPathValue interface {
	WatchNotificationChannelsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchNotificationChannelsResponse)
	CompareWith(*WatchNotificationChannelsResponse) (cmp int, comparable bool)
}

func ParseWatchNotificationChannelsResponse_FieldPathValue(pathStr, valueStr string) (WatchNotificationChannelsResponse_FieldPathValue, error) {
	fp, err := ParseWatchNotificationChannelsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationChannelsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchNotificationChannelsResponse_FieldPathValue), nil
}

func MustParseWatchNotificationChannelsResponse_FieldPathValue(pathStr, valueStr string) WatchNotificationChannelsResponse_FieldPathValue {
	fpv, err := ParseWatchNotificationChannelsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchNotificationChannelsResponse_FieldTerminalPathValue struct {
	WatchNotificationChannelsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationChannelsResponse_FieldPathValue = (*WatchNotificationChannelsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchNotificationChannelsResponse' as interface{}
func (fpv *WatchNotificationChannelsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchNotificationChannelsResponse_FieldTerminalPathValue) AsNotificationChannelChangesValue() ([]*notification_channel.NotificationChannelChange, bool) {
	res, ok := fpv.value.([]*notification_channel.NotificationChannelChange)
	return res, ok
}
func (fpv *WatchNotificationChannelsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchNotificationChannelsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchNotificationChannelsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchNotificationChannelsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchNotificationChannelsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchNotificationChannelsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchNotificationChannelsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchNotificationChannelsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchNotificationChannelsResponse
func (fpv *WatchNotificationChannelsResponse_FieldTerminalPathValue) SetTo(target **WatchNotificationChannelsResponse) {
	if *target == nil {
		*target = new(WatchNotificationChannelsResponse)
	}
	switch fpv.selector {
	case WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges:
		(*target).NotificationChannelChanges = fpv.value.([]*notification_channel.NotificationChannelChange)
	case WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchNotificationChannelsResponse_PageTokenChange)
	case WatchNotificationChannelsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationChannelsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchNotificationChannelsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchNotificationChannelsResponse_FieldTerminalPathValue' with the value under path in 'WatchNotificationChannelsResponse'.
func (fpv *WatchNotificationChannelsResponse_FieldTerminalPathValue) CompareWith(source *WatchNotificationChannelsResponse) (int, bool) {
	switch fpv.selector {
	case WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges:
		return 0, false
	case WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchNotificationChannelsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationChannelsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchNotificationChannelsResponse))
}

type WatchNotificationChannelsResponse_FieldSubPathValue struct {
	WatchNotificationChannelsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchNotificationChannelsResponse_FieldPathValue = (*WatchNotificationChannelsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchNotificationChannelsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchNotificationChannelsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchNotificationChannelsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchNotificationChannelsResponse_FieldSubPathValue) SetTo(target **WatchNotificationChannelsResponse) {
	if *target == nil {
		*target = new(WatchNotificationChannelsResponse)
	}
	switch fpvs.Selector() {
	case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchNotificationChannelsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchNotificationChannelsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchNotificationChannelsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchNotificationChannelsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchNotificationChannelsResponse_FieldSubPathValue) CompareWith(source *WatchNotificationChannelsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchNotificationChannelsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchNotificationChannelsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchNotificationChannelsResponse))
}

// WatchNotificationChannelsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchNotificationChannelsResponse according to their type
// Present only for array (repeated) types.
type WatchNotificationChannelsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchNotificationChannelsResponse_FieldPath
	ContainsValue(*WatchNotificationChannelsResponse) bool
}

// ParseWatchNotificationChannelsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchNotificationChannelsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchNotificationChannelsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchNotificationChannelsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationChannelsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchNotificationChannelsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchNotificationChannelsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchNotificationChannelsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchNotificationChannelsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchNotificationChannelsResponse_FieldTerminalPathArrayItemValue struct {
	WatchNotificationChannelsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationChannelsResponse_FieldPathArrayItemValue = (*WatchNotificationChannelsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchNotificationChannelsResponse as interface{}
func (fpaiv *WatchNotificationChannelsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchNotificationChannelsResponse_FieldTerminalPathArrayItemValue) AsNotificationChannelChangesItemValue() (*notification_channel.NotificationChannelChange, bool) {
	res, ok := fpaiv.value.(*notification_channel.NotificationChannelChange)
	return res, ok
}

func (fpaiv *WatchNotificationChannelsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchNotificationChannelsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchNotificationChannelsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchNotificationChannelsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchNotificationChannelsResponse'
func (fpaiv *WatchNotificationChannelsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchNotificationChannelsResponse) bool {
	slice := fpaiv.WatchNotificationChannelsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchNotificationChannelsResponse_FieldSubPathArrayItemValue struct {
	WatchNotificationChannelsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchNotificationChannelsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchNotificationChannelsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchNotificationChannelsResponse'
func (fpaivs *WatchNotificationChannelsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchNotificationChannelsResponse) bool {
	switch fpaivs.Selector() {
	case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse: %d", fpaivs.Selector()))
	}
}

// WatchNotificationChannelsResponse_FieldPathArrayOfValues allows storing slice of values for WatchNotificationChannelsResponse fields according to their type
type WatchNotificationChannelsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchNotificationChannelsResponse_FieldPath
}

func ParseWatchNotificationChannelsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchNotificationChannelsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchNotificationChannelsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchNotificationChannelsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchNotificationChannelsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchNotificationChannelsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchNotificationChannelsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchNotificationChannelsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues struct {
	WatchNotificationChannelsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchNotificationChannelsResponse_FieldPathArrayOfValues = (*WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchNotificationChannelsResponse_FieldPathSelectorNotificationChannelChanges:
		for _, v := range fpaov.values.([][]*notification_channel.NotificationChannelChange) {
			values = append(values, v)
		}
	case WatchNotificationChannelsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchNotificationChannelsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchNotificationChannelsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchNotificationChannelsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchNotificationChannelsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchNotificationChannelsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchNotificationChannelsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsNotificationChannelChangesArrayOfValues() ([][]*notification_channel.NotificationChannelChange, bool) {
	res, ok := fpaov.values.([][]*notification_channel.NotificationChannelChange)
	return res, ok
}
func (fpaov *WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchNotificationChannelsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchNotificationChannelsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchNotificationChannelsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchNotificationChannelsResponse_FieldSubPathArrayOfValues struct {
	WatchNotificationChannelsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchNotificationChannelsResponse_FieldPathArrayOfValues = (*WatchNotificationChannelsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchNotificationChannelsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchNotificationChannelsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchNotificationChannelsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchNotificationChannelsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchNotificationChannelsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchNotificationChannelsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchNotificationChannelsResponse_PageTokenChange)

	// Those methods build corresponding WatchNotificationChannelsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchNotificationChannelsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchNotificationChannelsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchNotificationChannelsResponsePageTokenChange_FieldPathSelector = 0
	WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchNotificationChannelsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchNotificationChannelsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchNotificationChannelsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchNotificationChannelsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchNotificationChannelsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath{selector: WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath{selector: WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchNotificationChannelsResponse_PageTokenChange", fp)
}

func ParseWatchNotificationChannelsResponsePageTokenChange_FieldPath(rawField string) (WatchNotificationChannelsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchNotificationChannelsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchNotificationChannelsResponsePageTokenChange_FieldPath(rawField string) WatchNotificationChannelsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchNotificationChannelsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchNotificationChannelsResponsePageTokenChange_FieldPathSelector
}

var _ WatchNotificationChannelsResponsePageTokenChange_FieldPath = (*WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) Selector() WatchNotificationChannelsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchNotificationChannelsResponse_PageTokenChange
func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchNotificationChannelsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchNotificationChannelsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchNotificationChannelsResponse_PageTokenChange
func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchNotificationChannelsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchNotificationChannelsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*notification_channel.PagerCursor)(nil)
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*notification_channel.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchNotificationChannelsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchNotificationChannelsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchNotificationChannelsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathValue{WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*notification_channel.PagerCursor)}
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathValue{WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*notification_channel.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*notification_channel.PagerCursor)}
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*notification_channel.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchNotificationChannelsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchNotificationChannelsResponsePageTokenChange_FieldPathValue interface {
	WatchNotificationChannelsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchNotificationChannelsResponse_PageTokenChange)
	CompareWith(*WatchNotificationChannelsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchNotificationChannelsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchNotificationChannelsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchNotificationChannelsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchNotificationChannelsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchNotificationChannelsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchNotificationChannelsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchNotificationChannelsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationChannelsResponsePageTokenChange_FieldPathValue = (*WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*notification_channel.PagerCursor, bool) {
	res, ok := fpv.value.(*notification_channel.PagerCursor)
	return res, ok
}
func (fpv *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*notification_channel.PagerCursor, bool) {
	res, ok := fpv.value.(*notification_channel.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchNotificationChannelsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchNotificationChannelsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*notification_channel.PagerCursor)
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*notification_channel.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchNotificationChannelsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchNotificationChannelsResponse_PageTokenChange'.
func (fpv *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchNotificationChannelsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchNotificationChannelsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchNotificationChannelsResponse_PageTokenChange))
}

// WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchNotificationChannelsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchNotificationChannelsResponse_PageTokenChange) bool
}

// ParseWatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchNotificationChannelsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchNotificationChannelsResponse_PageTokenChange as interface{}
func (fpaiv *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchNotificationChannelsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchNotificationChannelsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchNotificationChannelsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchNotificationChannelsResponsePageTokenChange_FieldPath
}

func ParseWatchNotificationChannelsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchNotificationChannelsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchNotificationChannelsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchNotificationChannelsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchNotificationChannelsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*notification_channel.PagerCursor) {
			values = append(values, v)
		}
	case WatchNotificationChannelsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*notification_channel.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*notification_channel.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification_channel.PagerCursor)
	return res, ok
}
func (fpaov *WatchNotificationChannelsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*notification_channel.PagerCursor, bool) {
	res, ok := fpaov.values.([]*notification_channel.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateNotificationChannelRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateNotificationChannelRequest_FieldPathSelector
	Get(source *CreateNotificationChannelRequest) []interface{}
	GetSingle(source *CreateNotificationChannelRequest) (interface{}, bool)
	ClearValue(item *CreateNotificationChannelRequest)

	// Those methods build corresponding CreateNotificationChannelRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateNotificationChannelRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateNotificationChannelRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateNotificationChannelRequest_FieldPathArrayItemValue
}

type CreateNotificationChannelRequest_FieldPathSelector int32

const (
	CreateNotificationChannelRequest_FieldPathSelectorParent              CreateNotificationChannelRequest_FieldPathSelector = 0
	CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel CreateNotificationChannelRequest_FieldPathSelector = 1
)

func (s CreateNotificationChannelRequest_FieldPathSelector) String() string {
	switch s {
	case CreateNotificationChannelRequest_FieldPathSelectorParent:
		return "parent"
	case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return "notification_channel"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", s))
	}
}

func BuildCreateNotificationChannelRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateNotificationChannelRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateNotificationChannelRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateNotificationChannelRequest_FieldTerminalPath{selector: CreateNotificationChannelRequest_FieldPathSelectorParent}, nil
		case "notification_channel", "notificationChannel", "notification-channel":
			return &CreateNotificationChannelRequest_FieldTerminalPath{selector: CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel}, nil
		}
	} else {
		switch fp[0] {
		case "notification_channel", "notificationChannel", "notification-channel":
			if subpath, err := notification_channel.BuildNotificationChannel_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateNotificationChannelRequest_FieldSubPath{selector: CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateNotificationChannelRequest", fp)
}

func ParseCreateNotificationChannelRequest_FieldPath(rawField string) (CreateNotificationChannelRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateNotificationChannelRequest_FieldPath(fp)
}

func MustParseCreateNotificationChannelRequest_FieldPath(rawField string) CreateNotificationChannelRequest_FieldPath {
	fp, err := ParseCreateNotificationChannelRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateNotificationChannelRequest_FieldTerminalPath struct {
	selector CreateNotificationChannelRequest_FieldPathSelector
}

var _ CreateNotificationChannelRequest_FieldPath = (*CreateNotificationChannelRequest_FieldTerminalPath)(nil)

func (fp *CreateNotificationChannelRequest_FieldTerminalPath) Selector() CreateNotificationChannelRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateNotificationChannelRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateNotificationChannelRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateNotificationChannelRequest
func (fp *CreateNotificationChannelRequest_FieldTerminalPath) Get(source *CreateNotificationChannelRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateNotificationChannelRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
			if source.NotificationChannel != nil {
				values = append(values, source.NotificationChannel)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateNotificationChannelRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateNotificationChannelRequest))
}

// GetSingle returns value pointed by specific field of from source CreateNotificationChannelRequest
func (fp *CreateNotificationChannelRequest_FieldTerminalPath) GetSingle(source *CreateNotificationChannelRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateNotificationChannelRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		res := source.GetNotificationChannel()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *CreateNotificationChannelRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateNotificationChannelRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateNotificationChannelRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateNotificationChannelRequest_FieldPathSelectorParent:
		return (*notification_channel.ParentReference)(nil)
	case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return (*notification_channel.NotificationChannel)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *CreateNotificationChannelRequest_FieldTerminalPath) ClearValue(item *CreateNotificationChannelRequest) {
	if item != nil {
		switch fp.selector {
		case CreateNotificationChannelRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
			item.NotificationChannel = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateNotificationChannelRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateNotificationChannelRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateNotificationChannelRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateNotificationChannelRequest_FieldPathSelectorParent
}

func (fp *CreateNotificationChannelRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreateNotificationChannelRequest_FieldTerminalPath) WithIValue(value interface{}) CreateNotificationChannelRequest_FieldPathValue {
	switch fp.selector {
	case CreateNotificationChannelRequest_FieldPathSelectorParent:
		return &CreateNotificationChannelRequest_FieldTerminalPathValue{CreateNotificationChannelRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.ParentReference)}
	case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return &CreateNotificationChannelRequest_FieldTerminalPathValue{CreateNotificationChannelRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannel)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *CreateNotificationChannelRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateNotificationChannelRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateNotificationChannelRequest_FieldPathArrayOfValues {
	fpaov := &CreateNotificationChannelRequest_FieldTerminalPathArrayOfValues{CreateNotificationChannelRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateNotificationChannelRequest_FieldPathSelectorParent:
		return &CreateNotificationChannelRequest_FieldTerminalPathArrayOfValues{CreateNotificationChannelRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.ParentReference)}
	case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return &CreateNotificationChannelRequest_FieldTerminalPathArrayOfValues{CreateNotificationChannelRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.NotificationChannel)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateNotificationChannelRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateNotificationChannelRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateNotificationChannelRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *CreateNotificationChannelRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateNotificationChannelRequest_FieldSubPath struct {
	selector CreateNotificationChannelRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateNotificationChannelRequest_FieldPath = (*CreateNotificationChannelRequest_FieldSubPath)(nil)

func (fps *CreateNotificationChannelRequest_FieldSubPath) Selector() CreateNotificationChannelRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateNotificationChannelRequest_FieldSubPath) AsNotificationChannelSubPath() (notification_channel.NotificationChannel_FieldPath, bool) {
	res, ok := fps.subPath.(notification_channel.NotificationChannel_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateNotificationChannelRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateNotificationChannelRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateNotificationChannelRequest
func (fps *CreateNotificationChannelRequest_FieldSubPath) Get(source *CreateNotificationChannelRequest) (values []interface{}) {
	switch fps.selector {
	case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		values = append(values, fps.subPath.GetRaw(source.GetNotificationChannel())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateNotificationChannelRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateNotificationChannelRequest))
}

// GetSingle returns value of selected field from source CreateNotificationChannelRequest
func (fps *CreateNotificationChannelRequest_FieldSubPath) GetSingle(source *CreateNotificationChannelRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		if source.GetNotificationChannel() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNotificationChannel())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fps.selector))
	}
}

func (fps *CreateNotificationChannelRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateNotificationChannelRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateNotificationChannelRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateNotificationChannelRequest_FieldSubPath) ClearValue(item *CreateNotificationChannelRequest) {
	if item != nil {
		switch fps.selector {
		case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
			fps.subPath.ClearValueRaw(item.NotificationChannel)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateNotificationChannelRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateNotificationChannelRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateNotificationChannelRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateNotificationChannelRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreateNotificationChannelRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreateNotificationChannelRequest_FieldSubPath) WithIValue(value interface{}) CreateNotificationChannelRequest_FieldPathValue {
	return &CreateNotificationChannelRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateNotificationChannelRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateNotificationChannelRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateNotificationChannelRequest_FieldPathArrayOfValues {
	return &CreateNotificationChannelRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateNotificationChannelRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateNotificationChannelRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateNotificationChannelRequest_FieldPathArrayItemValue {
	return &CreateNotificationChannelRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateNotificationChannelRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateNotificationChannelRequest_FieldPathValue allows storing values for CreateNotificationChannelRequest fields according to their type
type CreateNotificationChannelRequest_FieldPathValue interface {
	CreateNotificationChannelRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateNotificationChannelRequest)
	CompareWith(*CreateNotificationChannelRequest) (cmp int, comparable bool)
}

func ParseCreateNotificationChannelRequest_FieldPathValue(pathStr, valueStr string) (CreateNotificationChannelRequest_FieldPathValue, error) {
	fp, err := ParseCreateNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateNotificationChannelRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateNotificationChannelRequest_FieldPathValue), nil
}

func MustParseCreateNotificationChannelRequest_FieldPathValue(pathStr, valueStr string) CreateNotificationChannelRequest_FieldPathValue {
	fpv, err := ParseCreateNotificationChannelRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateNotificationChannelRequest_FieldTerminalPathValue struct {
	CreateNotificationChannelRequest_FieldTerminalPath
	value interface{}
}

var _ CreateNotificationChannelRequest_FieldPathValue = (*CreateNotificationChannelRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateNotificationChannelRequest' as interface{}
func (fpv *CreateNotificationChannelRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateNotificationChannelRequest_FieldTerminalPathValue) AsParentValue() (*notification_channel.ParentReference, bool) {
	res, ok := fpv.value.(*notification_channel.ParentReference)
	return res, ok
}
func (fpv *CreateNotificationChannelRequest_FieldTerminalPathValue) AsNotificationChannelValue() (*notification_channel.NotificationChannel, bool) {
	res, ok := fpv.value.(*notification_channel.NotificationChannel)
	return res, ok
}

// SetTo stores value for selected field for object CreateNotificationChannelRequest
func (fpv *CreateNotificationChannelRequest_FieldTerminalPathValue) SetTo(target **CreateNotificationChannelRequest) {
	if *target == nil {
		*target = new(CreateNotificationChannelRequest)
	}
	switch fpv.selector {
	case CreateNotificationChannelRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*notification_channel.ParentReference)
	case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		(*target).NotificationChannel = fpv.value.(*notification_channel.NotificationChannel)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fpv.selector))
	}
}

func (fpv *CreateNotificationChannelRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateNotificationChannelRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateNotificationChannelRequest_FieldTerminalPathValue' with the value under path in 'CreateNotificationChannelRequest'.
func (fpv *CreateNotificationChannelRequest_FieldTerminalPathValue) CompareWith(source *CreateNotificationChannelRequest) (int, bool) {
	switch fpv.selector {
	case CreateNotificationChannelRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*notification_channel.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fpv.selector))
	}
}

func (fpv *CreateNotificationChannelRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateNotificationChannelRequest))
}

type CreateNotificationChannelRequest_FieldSubPathValue struct {
	CreateNotificationChannelRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateNotificationChannelRequest_FieldPathValue = (*CreateNotificationChannelRequest_FieldSubPathValue)(nil)

func (fpvs *CreateNotificationChannelRequest_FieldSubPathValue) AsNotificationChannelPathValue() (notification_channel.NotificationChannel_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(notification_channel.NotificationChannel_FieldPathValue)
	return res, ok
}

func (fpvs *CreateNotificationChannelRequest_FieldSubPathValue) SetTo(target **CreateNotificationChannelRequest) {
	if *target == nil {
		*target = new(CreateNotificationChannelRequest)
	}
	switch fpvs.Selector() {
	case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		fpvs.subPathValue.(notification_channel.NotificationChannel_FieldPathValue).SetTo(&(*target).NotificationChannel)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateNotificationChannelRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateNotificationChannelRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateNotificationChannelRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateNotificationChannelRequest_FieldSubPathValue) CompareWith(source *CreateNotificationChannelRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return fpvs.subPathValue.(notification_channel.NotificationChannel_FieldPathValue).CompareWith(source.GetNotificationChannel())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateNotificationChannelRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateNotificationChannelRequest))
}

// CreateNotificationChannelRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateNotificationChannelRequest according to their type
// Present only for array (repeated) types.
type CreateNotificationChannelRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateNotificationChannelRequest_FieldPath
	ContainsValue(*CreateNotificationChannelRequest) bool
}

// ParseCreateNotificationChannelRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateNotificationChannelRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateNotificationChannelRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateNotificationChannelRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateNotificationChannelRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateNotificationChannelRequest_FieldTerminalPathArrayItemValue struct {
	CreateNotificationChannelRequest_FieldTerminalPath
	value interface{}
}

var _ CreateNotificationChannelRequest_FieldPathArrayItemValue = (*CreateNotificationChannelRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateNotificationChannelRequest as interface{}
func (fpaiv *CreateNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateNotificationChannelRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateNotificationChannelRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateNotificationChannelRequest'
func (fpaiv *CreateNotificationChannelRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateNotificationChannelRequest) bool {
	slice := fpaiv.CreateNotificationChannelRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateNotificationChannelRequest_FieldSubPathArrayItemValue struct {
	CreateNotificationChannelRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateNotificationChannelRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateNotificationChannelRequest_FieldSubPathArrayItemValue) AsNotificationChannelPathItemValue() (notification_channel.NotificationChannel_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(notification_channel.NotificationChannel_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateNotificationChannelRequest'
func (fpaivs *CreateNotificationChannelRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateNotificationChannelRequest) bool {
	switch fpaivs.Selector() {
	case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return fpaivs.subPathItemValue.(notification_channel.NotificationChannel_FieldPathArrayItemValue).ContainsValue(source.GetNotificationChannel())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateNotificationChannelRequest: %d", fpaivs.Selector()))
	}
}

// CreateNotificationChannelRequest_FieldPathArrayOfValues allows storing slice of values for CreateNotificationChannelRequest fields according to their type
type CreateNotificationChannelRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateNotificationChannelRequest_FieldPath
}

func ParseCreateNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateNotificationChannelRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateNotificationChannelRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateNotificationChannelRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateNotificationChannelRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateNotificationChannelRequest_FieldTerminalPathArrayOfValues struct {
	CreateNotificationChannelRequest_FieldTerminalPath
	values interface{}
}

var _ CreateNotificationChannelRequest_FieldPathArrayOfValues = (*CreateNotificationChannelRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateNotificationChannelRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateNotificationChannelRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*notification_channel.ParentReference) {
			values = append(values, v)
		}
	case CreateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		for _, v := range fpaov.values.([]*notification_channel.NotificationChannel) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateNotificationChannelRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*notification_channel.ParentReference, bool) {
	res, ok := fpaov.values.([]*notification_channel.ParentReference)
	return res, ok
}
func (fpaov *CreateNotificationChannelRequest_FieldTerminalPathArrayOfValues) AsNotificationChannelArrayOfValues() ([]*notification_channel.NotificationChannel, bool) {
	res, ok := fpaov.values.([]*notification_channel.NotificationChannel)
	return res, ok
}

type CreateNotificationChannelRequest_FieldSubPathArrayOfValues struct {
	CreateNotificationChannelRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateNotificationChannelRequest_FieldPathArrayOfValues = (*CreateNotificationChannelRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateNotificationChannelRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateNotificationChannelRequest_FieldSubPathArrayOfValues) AsNotificationChannelPathArrayOfValues() (notification_channel.NotificationChannel_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(notification_channel.NotificationChannel_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateNotificationChannelRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateNotificationChannelRequest_FieldPathSelector
	Get(source *UpdateNotificationChannelRequest) []interface{}
	GetSingle(source *UpdateNotificationChannelRequest) (interface{}, bool)
	ClearValue(item *UpdateNotificationChannelRequest)

	// Those methods build corresponding UpdateNotificationChannelRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateNotificationChannelRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateNotificationChannelRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateNotificationChannelRequest_FieldPathArrayItemValue
}

type UpdateNotificationChannelRequest_FieldPathSelector int32

const (
	UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel UpdateNotificationChannelRequest_FieldPathSelector = 0
	UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask          UpdateNotificationChannelRequest_FieldPathSelector = 1
	UpdateNotificationChannelRequest_FieldPathSelectorCas                 UpdateNotificationChannelRequest_FieldPathSelector = 2
)

func (s UpdateNotificationChannelRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return "notification_channel"
	case UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateNotificationChannelRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", s))
	}
}

func BuildUpdateNotificationChannelRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateNotificationChannelRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateNotificationChannelRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "notification_channel", "notificationChannel", "notification-channel":
			return &UpdateNotificationChannelRequest_FieldTerminalPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateNotificationChannelRequest_FieldTerminalPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateNotificationChannelRequest_FieldTerminalPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "notification_channel", "notificationChannel", "notification-channel":
			if subpath, err := notification_channel.BuildNotificationChannel_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateNotificationChannelRequest_FieldSubPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateNotificationChannelRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateNotificationChannelRequest_FieldSubPath{selector: UpdateNotificationChannelRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateNotificationChannelRequest", fp)
}

func ParseUpdateNotificationChannelRequest_FieldPath(rawField string) (UpdateNotificationChannelRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateNotificationChannelRequest_FieldPath(fp)
}

func MustParseUpdateNotificationChannelRequest_FieldPath(rawField string) UpdateNotificationChannelRequest_FieldPath {
	fp, err := ParseUpdateNotificationChannelRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateNotificationChannelRequest_FieldTerminalPath struct {
	selector UpdateNotificationChannelRequest_FieldPathSelector
}

var _ UpdateNotificationChannelRequest_FieldPath = (*UpdateNotificationChannelRequest_FieldTerminalPath)(nil)

func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) Selector() UpdateNotificationChannelRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateNotificationChannelRequest
func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) Get(source *UpdateNotificationChannelRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
			if source.NotificationChannel != nil {
				values = append(values, source.NotificationChannel)
			}
		case UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateNotificationChannelRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateNotificationChannelRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateNotificationChannelRequest
func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) GetSingle(source *UpdateNotificationChannelRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		res := source.GetNotificationChannel()
		return res, res != nil
	case UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateNotificationChannelRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateNotificationChannelRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return (*notification_channel.NotificationChannel)(nil)
	case UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask:
		return (*notification_channel.NotificationChannel_FieldMask)(nil)
	case UpdateNotificationChannelRequest_FieldPathSelectorCas:
		return (*UpdateNotificationChannelRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) ClearValue(item *UpdateNotificationChannelRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
			item.NotificationChannel = nil
		case UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateNotificationChannelRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateNotificationChannelRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateNotificationChannelRequest_FieldPathValue {
	switch fp.selector {
	case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return &UpdateNotificationChannelRequest_FieldTerminalPathValue{UpdateNotificationChannelRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannel)}
	case UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask:
		return &UpdateNotificationChannelRequest_FieldTerminalPathValue{UpdateNotificationChannelRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannel_FieldMask)}
	case UpdateNotificationChannelRequest_FieldPathSelectorCas:
		return &UpdateNotificationChannelRequest_FieldTerminalPathValue{UpdateNotificationChannelRequest_FieldTerminalPath: *fp, value: value.(*UpdateNotificationChannelRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateNotificationChannelRequest_FieldPathArrayOfValues {
	fpaov := &UpdateNotificationChannelRequest_FieldTerminalPathArrayOfValues{UpdateNotificationChannelRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return &UpdateNotificationChannelRequest_FieldTerminalPathArrayOfValues{UpdateNotificationChannelRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.NotificationChannel)}
	case UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask:
		return &UpdateNotificationChannelRequest_FieldTerminalPathArrayOfValues{UpdateNotificationChannelRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.NotificationChannel_FieldMask)}
	case UpdateNotificationChannelRequest_FieldPathSelectorCas:
		return &UpdateNotificationChannelRequest_FieldTerminalPathArrayOfValues{UpdateNotificationChannelRequest_FieldTerminalPath: *fp, values: values.([]*UpdateNotificationChannelRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateNotificationChannelRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *UpdateNotificationChannelRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateNotificationChannelRequest_FieldSubPath struct {
	selector UpdateNotificationChannelRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateNotificationChannelRequest_FieldPath = (*UpdateNotificationChannelRequest_FieldSubPath)(nil)

func (fps *UpdateNotificationChannelRequest_FieldSubPath) Selector() UpdateNotificationChannelRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateNotificationChannelRequest_FieldSubPath) AsNotificationChannelSubPath() (notification_channel.NotificationChannel_FieldPath, bool) {
	res, ok := fps.subPath.(notification_channel.NotificationChannel_FieldPath)
	return res, ok
}
func (fps *UpdateNotificationChannelRequest_FieldSubPath) AsCasSubPath() (UpdateNotificationChannelRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateNotificationChannelRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateNotificationChannelRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateNotificationChannelRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateNotificationChannelRequest
func (fps *UpdateNotificationChannelRequest_FieldSubPath) Get(source *UpdateNotificationChannelRequest) (values []interface{}) {
	switch fps.selector {
	case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		values = append(values, fps.subPath.GetRaw(source.GetNotificationChannel())...)
	case UpdateNotificationChannelRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateNotificationChannelRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateNotificationChannelRequest))
}

// GetSingle returns value of selected field from source UpdateNotificationChannelRequest
func (fps *UpdateNotificationChannelRequest_FieldSubPath) GetSingle(source *UpdateNotificationChannelRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		if source.GetNotificationChannel() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNotificationChannel())
	case UpdateNotificationChannelRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fps.selector))
	}
}

func (fps *UpdateNotificationChannelRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateNotificationChannelRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateNotificationChannelRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateNotificationChannelRequest_FieldSubPath) ClearValue(item *UpdateNotificationChannelRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
			fps.subPath.ClearValueRaw(item.NotificationChannel)
		case UpdateNotificationChannelRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateNotificationChannelRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateNotificationChannelRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateNotificationChannelRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateNotificationChannelRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateNotificationChannelRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateNotificationChannelRequest_FieldSubPath) WithIValue(value interface{}) UpdateNotificationChannelRequest_FieldPathValue {
	return &UpdateNotificationChannelRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateNotificationChannelRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateNotificationChannelRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateNotificationChannelRequest_FieldPathArrayOfValues {
	return &UpdateNotificationChannelRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateNotificationChannelRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateNotificationChannelRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateNotificationChannelRequest_FieldPathArrayItemValue {
	return &UpdateNotificationChannelRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateNotificationChannelRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateNotificationChannelRequest_FieldPathValue allows storing values for UpdateNotificationChannelRequest fields according to their type
type UpdateNotificationChannelRequest_FieldPathValue interface {
	UpdateNotificationChannelRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateNotificationChannelRequest)
	CompareWith(*UpdateNotificationChannelRequest) (cmp int, comparable bool)
}

func ParseUpdateNotificationChannelRequest_FieldPathValue(pathStr, valueStr string) (UpdateNotificationChannelRequest_FieldPathValue, error) {
	fp, err := ParseUpdateNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateNotificationChannelRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateNotificationChannelRequest_FieldPathValue), nil
}

func MustParseUpdateNotificationChannelRequest_FieldPathValue(pathStr, valueStr string) UpdateNotificationChannelRequest_FieldPathValue {
	fpv, err := ParseUpdateNotificationChannelRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateNotificationChannelRequest_FieldTerminalPathValue struct {
	UpdateNotificationChannelRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateNotificationChannelRequest_FieldPathValue = (*UpdateNotificationChannelRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateNotificationChannelRequest' as interface{}
func (fpv *UpdateNotificationChannelRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateNotificationChannelRequest_FieldTerminalPathValue) AsNotificationChannelValue() (*notification_channel.NotificationChannel, bool) {
	res, ok := fpv.value.(*notification_channel.NotificationChannel)
	return res, ok
}
func (fpv *UpdateNotificationChannelRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}
func (fpv *UpdateNotificationChannelRequest_FieldTerminalPathValue) AsCasValue() (*UpdateNotificationChannelRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateNotificationChannelRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateNotificationChannelRequest
func (fpv *UpdateNotificationChannelRequest_FieldTerminalPathValue) SetTo(target **UpdateNotificationChannelRequest) {
	if *target == nil {
		*target = new(UpdateNotificationChannelRequest)
	}
	switch fpv.selector {
	case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		(*target).NotificationChannel = fpv.value.(*notification_channel.NotificationChannel)
	case UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	case UpdateNotificationChannelRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateNotificationChannelRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateNotificationChannelRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateNotificationChannelRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateNotificationChannelRequest_FieldTerminalPathValue' with the value under path in 'UpdateNotificationChannelRequest'.
func (fpv *UpdateNotificationChannelRequest_FieldTerminalPathValue) CompareWith(source *UpdateNotificationChannelRequest) (int, bool) {
	switch fpv.selector {
	case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return 0, false
	case UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateNotificationChannelRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateNotificationChannelRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateNotificationChannelRequest))
}

type UpdateNotificationChannelRequest_FieldSubPathValue struct {
	UpdateNotificationChannelRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateNotificationChannelRequest_FieldPathValue = (*UpdateNotificationChannelRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateNotificationChannelRequest_FieldSubPathValue) AsNotificationChannelPathValue() (notification_channel.NotificationChannel_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(notification_channel.NotificationChannel_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateNotificationChannelRequest_FieldSubPathValue) AsCasPathValue() (UpdateNotificationChannelRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateNotificationChannelRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateNotificationChannelRequest_FieldSubPathValue) SetTo(target **UpdateNotificationChannelRequest) {
	if *target == nil {
		*target = new(UpdateNotificationChannelRequest)
	}
	switch fpvs.Selector() {
	case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		fpvs.subPathValue.(notification_channel.NotificationChannel_FieldPathValue).SetTo(&(*target).NotificationChannel)
	case UpdateNotificationChannelRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateNotificationChannelRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateNotificationChannelRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateNotificationChannelRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateNotificationChannelRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateNotificationChannelRequest_FieldSubPathValue) CompareWith(source *UpdateNotificationChannelRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return fpvs.subPathValue.(notification_channel.NotificationChannel_FieldPathValue).CompareWith(source.GetNotificationChannel())
	case UpdateNotificationChannelRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateNotificationChannelRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateNotificationChannelRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateNotificationChannelRequest))
}

// UpdateNotificationChannelRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateNotificationChannelRequest according to their type
// Present only for array (repeated) types.
type UpdateNotificationChannelRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateNotificationChannelRequest_FieldPath
	ContainsValue(*UpdateNotificationChannelRequest) bool
}

// ParseUpdateNotificationChannelRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateNotificationChannelRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateNotificationChannelRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateNotificationChannelRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateNotificationChannelRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateNotificationChannelRequest_FieldTerminalPathArrayItemValue struct {
	UpdateNotificationChannelRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateNotificationChannelRequest_FieldPathArrayItemValue = (*UpdateNotificationChannelRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateNotificationChannelRequest as interface{}
func (fpaiv *UpdateNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateNotificationChannelRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateNotificationChannelRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateNotificationChannelRequest'
func (fpaiv *UpdateNotificationChannelRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateNotificationChannelRequest) bool {
	slice := fpaiv.UpdateNotificationChannelRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateNotificationChannelRequest_FieldSubPathArrayItemValue struct {
	UpdateNotificationChannelRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateNotificationChannelRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateNotificationChannelRequest_FieldSubPathArrayItemValue) AsNotificationChannelPathItemValue() (notification_channel.NotificationChannel_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(notification_channel.NotificationChannel_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateNotificationChannelRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateNotificationChannelRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateNotificationChannelRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateNotificationChannelRequest'
func (fpaivs *UpdateNotificationChannelRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateNotificationChannelRequest) bool {
	switch fpaivs.Selector() {
	case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		return fpaivs.subPathItemValue.(notification_channel.NotificationChannel_FieldPathArrayItemValue).ContainsValue(source.GetNotificationChannel())
	case UpdateNotificationChannelRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateNotificationChannelRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest: %d", fpaivs.Selector()))
	}
}

// UpdateNotificationChannelRequest_FieldPathArrayOfValues allows storing slice of values for UpdateNotificationChannelRequest fields according to their type
type UpdateNotificationChannelRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateNotificationChannelRequest_FieldPath
}

func ParseUpdateNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateNotificationChannelRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateNotificationChannelRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateNotificationChannelRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateNotificationChannelRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateNotificationChannelRequest_FieldTerminalPathArrayOfValues struct {
	UpdateNotificationChannelRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateNotificationChannelRequest_FieldPathArrayOfValues = (*UpdateNotificationChannelRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateNotificationChannelRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateNotificationChannelRequest_FieldPathSelectorNotificationChannel:
		for _, v := range fpaov.values.([]*notification_channel.NotificationChannel) {
			values = append(values, v)
		}
	case UpdateNotificationChannelRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*notification_channel.NotificationChannel_FieldMask) {
			values = append(values, v)
		}
	case UpdateNotificationChannelRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateNotificationChannelRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateNotificationChannelRequest_FieldTerminalPathArrayOfValues) AsNotificationChannelArrayOfValues() ([]*notification_channel.NotificationChannel, bool) {
	res, ok := fpaov.values.([]*notification_channel.NotificationChannel)
	return res, ok
}
func (fpaov *UpdateNotificationChannelRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}
func (fpaov *UpdateNotificationChannelRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateNotificationChannelRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateNotificationChannelRequest_CAS)
	return res, ok
}

type UpdateNotificationChannelRequest_FieldSubPathArrayOfValues struct {
	UpdateNotificationChannelRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateNotificationChannelRequest_FieldPathArrayOfValues = (*UpdateNotificationChannelRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateNotificationChannelRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateNotificationChannelRequest_FieldSubPathArrayOfValues) AsNotificationChannelPathArrayOfValues() (notification_channel.NotificationChannel_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(notification_channel.NotificationChannel_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateNotificationChannelRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateNotificationChannelRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateNotificationChannelRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateNotificationChannelRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateNotificationChannelRequestCAS_FieldPathSelector
	Get(source *UpdateNotificationChannelRequest_CAS) []interface{}
	GetSingle(source *UpdateNotificationChannelRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateNotificationChannelRequest_CAS)

	// Those methods build corresponding UpdateNotificationChannelRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateNotificationChannelRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateNotificationChannelRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateNotificationChannelRequestCAS_FieldPathArrayItemValue
}

type UpdateNotificationChannelRequestCAS_FieldPathSelector int32

const (
	UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState UpdateNotificationChannelRequestCAS_FieldPathSelector = 0
	UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask        UpdateNotificationChannelRequestCAS_FieldPathSelector = 1
)

func (s UpdateNotificationChannelRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", s))
	}
}

func BuildUpdateNotificationChannelRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateNotificationChannelRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateNotificationChannelRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateNotificationChannelRequestCAS_FieldTerminalPath{selector: UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateNotificationChannelRequestCAS_FieldTerminalPath{selector: UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := notification_channel.BuildNotificationChannel_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateNotificationChannelRequestCAS_FieldSubPath{selector: UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateNotificationChannelRequest_CAS", fp)
}

func ParseUpdateNotificationChannelRequestCAS_FieldPath(rawField string) (UpdateNotificationChannelRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateNotificationChannelRequestCAS_FieldPath(fp)
}

func MustParseUpdateNotificationChannelRequestCAS_FieldPath(rawField string) UpdateNotificationChannelRequestCAS_FieldPath {
	fp, err := ParseUpdateNotificationChannelRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateNotificationChannelRequestCAS_FieldTerminalPath struct {
	selector UpdateNotificationChannelRequestCAS_FieldPathSelector
}

var _ UpdateNotificationChannelRequestCAS_FieldPath = (*UpdateNotificationChannelRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) Selector() UpdateNotificationChannelRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateNotificationChannelRequest_CAS
func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) Get(source *UpdateNotificationChannelRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateNotificationChannelRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateNotificationChannelRequest_CAS
func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) GetSingle(source *UpdateNotificationChannelRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateNotificationChannelRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
		return (*notification_channel.NotificationChannel)(nil)
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask:
		return (*notification_channel.NotificationChannel_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) ClearValue(item *UpdateNotificationChannelRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateNotificationChannelRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateNotificationChannelRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateNotificationChannelRequestCAS_FieldTerminalPathValue{UpdateNotificationChannelRequestCAS_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannel)}
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateNotificationChannelRequestCAS_FieldTerminalPathValue{UpdateNotificationChannelRequestCAS_FieldTerminalPath: *fp, value: value.(*notification_channel.NotificationChannel_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateNotificationChannelRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayOfValues{UpdateNotificationChannelRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayOfValues{UpdateNotificationChannelRequestCAS_FieldTerminalPath: *fp, values: values.([]*notification_channel.NotificationChannel)}
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayOfValues{UpdateNotificationChannelRequestCAS_FieldTerminalPath: *fp, values: values.([]*notification_channel.NotificationChannel_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateNotificationChannelRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateNotificationChannelRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateNotificationChannelRequestCAS_FieldSubPath struct {
	selector UpdateNotificationChannelRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateNotificationChannelRequestCAS_FieldPath = (*UpdateNotificationChannelRequestCAS_FieldSubPath)(nil)

func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) Selector() UpdateNotificationChannelRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) AsConditionalStateSubPath() (notification_channel.NotificationChannel_FieldPath, bool) {
	res, ok := fps.subPath.(notification_channel.NotificationChannel_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateNotificationChannelRequest_CAS
func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) Get(source *UpdateNotificationChannelRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateNotificationChannelRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateNotificationChannelRequest_CAS
func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) GetSingle(source *UpdateNotificationChannelRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateNotificationChannelRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) ClearValue(item *UpdateNotificationChannelRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateNotificationChannelRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdateNotificationChannelRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateNotificationChannelRequestCAS_FieldPathValue {
	return &UpdateNotificationChannelRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateNotificationChannelRequestCAS_FieldPathArrayOfValues {
	return &UpdateNotificationChannelRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateNotificationChannelRequestCAS_FieldPathArrayItemValue {
	return &UpdateNotificationChannelRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateNotificationChannelRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateNotificationChannelRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateNotificationChannelRequestCAS_FieldPathValue interface {
	UpdateNotificationChannelRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateNotificationChannelRequest_CAS)
	CompareWith(*UpdateNotificationChannelRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateNotificationChannelRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateNotificationChannelRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateNotificationChannelRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateNotificationChannelRequestCAS_FieldPathValue), nil
}

func MustParseUpdateNotificationChannelRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateNotificationChannelRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateNotificationChannelRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateNotificationChannelRequestCAS_FieldTerminalPathValue struct {
	UpdateNotificationChannelRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateNotificationChannelRequestCAS_FieldPathValue = (*UpdateNotificationChannelRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateNotificationChannelRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateNotificationChannelRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*notification_channel.NotificationChannel, bool) {
	res, ok := fpv.value.(*notification_channel.NotificationChannel)
	return res, ok
}
func (fpv *UpdateNotificationChannelRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateNotificationChannelRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateNotificationChannelRequest_CAS) {
	if *target == nil {
		*target = new(UpdateNotificationChannelRequest_CAS)
	}
	switch fpv.selector {
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*notification_channel.NotificationChannel)
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*notification_channel.NotificationChannel_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateNotificationChannelRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateNotificationChannelRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateNotificationChannelRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateNotificationChannelRequest_CAS'.
func (fpv *UpdateNotificationChannelRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateNotificationChannelRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateNotificationChannelRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateNotificationChannelRequest_CAS))
}

type UpdateNotificationChannelRequestCAS_FieldSubPathValue struct {
	UpdateNotificationChannelRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateNotificationChannelRequestCAS_FieldPathValue = (*UpdateNotificationChannelRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateNotificationChannelRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (notification_channel.NotificationChannel_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(notification_channel.NotificationChannel_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateNotificationChannelRequestCAS_FieldSubPathValue) SetTo(target **UpdateNotificationChannelRequest_CAS) {
	if *target == nil {
		*target = new(UpdateNotificationChannelRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(notification_channel.NotificationChannel_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateNotificationChannelRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateNotificationChannelRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateNotificationChannelRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateNotificationChannelRequestCAS_FieldSubPathValue) CompareWith(source *UpdateNotificationChannelRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(notification_channel.NotificationChannel_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateNotificationChannelRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateNotificationChannelRequest_CAS))
}

// UpdateNotificationChannelRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateNotificationChannelRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateNotificationChannelRequestCAS_FieldPath
	ContainsValue(*UpdateNotificationChannelRequest_CAS) bool
}

// ParseUpdateNotificationChannelRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateNotificationChannelRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateNotificationChannelRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateNotificationChannelRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateNotificationChannelRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateNotificationChannelRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateNotificationChannelRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateNotificationChannelRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateNotificationChannelRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateNotificationChannelRequestCAS_FieldPathArrayItemValue = (*UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateNotificationChannelRequest_CAS as interface{}
func (fpaiv *UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateNotificationChannelRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateNotificationChannelRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateNotificationChannelRequest_CAS) bool {
	slice := fpaiv.UpdateNotificationChannelRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateNotificationChannelRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateNotificationChannelRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateNotificationChannelRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateNotificationChannelRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (notification_channel.NotificationChannel_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(notification_channel.NotificationChannel_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateNotificationChannelRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateNotificationChannelRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(notification_channel.NotificationChannel_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateNotificationChannelRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateNotificationChannelRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateNotificationChannelRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateNotificationChannelRequestCAS_FieldPath
}

func ParseUpdateNotificationChannelRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateNotificationChannelRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateNotificationChannelRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateNotificationChannelRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateNotificationChannelRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateNotificationChannelRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateNotificationChannelRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateNotificationChannelRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateNotificationChannelRequestCAS_FieldPathArrayOfValues = (*UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*notification_channel.NotificationChannel) {
			values = append(values, v)
		}
	case UpdateNotificationChannelRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*notification_channel.NotificationChannel_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*notification_channel.NotificationChannel, bool) {
	res, ok := fpaov.values.([]*notification_channel.NotificationChannel)
	return res, ok
}
func (fpaov *UpdateNotificationChannelRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*notification_channel.NotificationChannel_FieldMask, bool) {
	res, ok := fpaov.values.([]*notification_channel.NotificationChannel_FieldMask)
	return res, ok
}

type UpdateNotificationChannelRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateNotificationChannelRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateNotificationChannelRequestCAS_FieldPathArrayOfValues = (*UpdateNotificationChannelRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateNotificationChannelRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateNotificationChannelRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (notification_channel.NotificationChannel_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(notification_channel.NotificationChannel_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteNotificationChannelRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteNotificationChannelRequest_FieldPathSelector
	Get(source *DeleteNotificationChannelRequest) []interface{}
	GetSingle(source *DeleteNotificationChannelRequest) (interface{}, bool)
	ClearValue(item *DeleteNotificationChannelRequest)

	// Those methods build corresponding DeleteNotificationChannelRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteNotificationChannelRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteNotificationChannelRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteNotificationChannelRequest_FieldPathArrayItemValue
}

type DeleteNotificationChannelRequest_FieldPathSelector int32

const (
	DeleteNotificationChannelRequest_FieldPathSelectorName DeleteNotificationChannelRequest_FieldPathSelector = 0
)

func (s DeleteNotificationChannelRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteNotificationChannelRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationChannelRequest: %d", s))
	}
}

func BuildDeleteNotificationChannelRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteNotificationChannelRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteNotificationChannelRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteNotificationChannelRequest_FieldTerminalPath{selector: DeleteNotificationChannelRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteNotificationChannelRequest", fp)
}

func ParseDeleteNotificationChannelRequest_FieldPath(rawField string) (DeleteNotificationChannelRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteNotificationChannelRequest_FieldPath(fp)
}

func MustParseDeleteNotificationChannelRequest_FieldPath(rawField string) DeleteNotificationChannelRequest_FieldPath {
	fp, err := ParseDeleteNotificationChannelRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteNotificationChannelRequest_FieldTerminalPath struct {
	selector DeleteNotificationChannelRequest_FieldPathSelector
}

var _ DeleteNotificationChannelRequest_FieldPath = (*DeleteNotificationChannelRequest_FieldTerminalPath)(nil)

func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) Selector() DeleteNotificationChannelRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteNotificationChannelRequest
func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) Get(source *DeleteNotificationChannelRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteNotificationChannelRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteNotificationChannelRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteNotificationChannelRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteNotificationChannelRequest
func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) GetSingle(source *DeleteNotificationChannelRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteNotificationChannelRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteNotificationChannelRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteNotificationChannelRequest_FieldPathSelectorName:
		return (*notification_channel.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) ClearValue(item *DeleteNotificationChannelRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteNotificationChannelRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteNotificationChannelRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteNotificationChannelRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteNotificationChannelRequest_FieldPathSelectorName
}

func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteNotificationChannelRequest_FieldPathValue {
	switch fp.selector {
	case DeleteNotificationChannelRequest_FieldPathSelectorName:
		return &DeleteNotificationChannelRequest_FieldTerminalPathValue{DeleteNotificationChannelRequest_FieldTerminalPath: *fp, value: value.(*notification_channel.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteNotificationChannelRequest_FieldPathArrayOfValues {
	fpaov := &DeleteNotificationChannelRequest_FieldTerminalPathArrayOfValues{DeleteNotificationChannelRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteNotificationChannelRequest_FieldPathSelectorName:
		return &DeleteNotificationChannelRequest_FieldTerminalPathArrayOfValues{DeleteNotificationChannelRequest_FieldTerminalPath: *fp, values: values.([]*notification_channel.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationChannelRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteNotificationChannelRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationChannelRequest: %d", fp.selector))
	}
}

func (fp *DeleteNotificationChannelRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteNotificationChannelRequest_FieldPathValue allows storing values for DeleteNotificationChannelRequest fields according to their type
type DeleteNotificationChannelRequest_FieldPathValue interface {
	DeleteNotificationChannelRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteNotificationChannelRequest)
	CompareWith(*DeleteNotificationChannelRequest) (cmp int, comparable bool)
}

func ParseDeleteNotificationChannelRequest_FieldPathValue(pathStr, valueStr string) (DeleteNotificationChannelRequest_FieldPathValue, error) {
	fp, err := ParseDeleteNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteNotificationChannelRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteNotificationChannelRequest_FieldPathValue), nil
}

func MustParseDeleteNotificationChannelRequest_FieldPathValue(pathStr, valueStr string) DeleteNotificationChannelRequest_FieldPathValue {
	fpv, err := ParseDeleteNotificationChannelRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteNotificationChannelRequest_FieldTerminalPathValue struct {
	DeleteNotificationChannelRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteNotificationChannelRequest_FieldPathValue = (*DeleteNotificationChannelRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteNotificationChannelRequest' as interface{}
func (fpv *DeleteNotificationChannelRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteNotificationChannelRequest_FieldTerminalPathValue) AsNameValue() (*notification_channel.Reference, bool) {
	res, ok := fpv.value.(*notification_channel.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteNotificationChannelRequest
func (fpv *DeleteNotificationChannelRequest_FieldTerminalPathValue) SetTo(target **DeleteNotificationChannelRequest) {
	if *target == nil {
		*target = new(DeleteNotificationChannelRequest)
	}
	switch fpv.selector {
	case DeleteNotificationChannelRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*notification_channel.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationChannelRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteNotificationChannelRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteNotificationChannelRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteNotificationChannelRequest_FieldTerminalPathValue' with the value under path in 'DeleteNotificationChannelRequest'.
func (fpv *DeleteNotificationChannelRequest_FieldTerminalPathValue) CompareWith(source *DeleteNotificationChannelRequest) (int, bool) {
	switch fpv.selector {
	case DeleteNotificationChannelRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*notification_channel.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteNotificationChannelRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteNotificationChannelRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteNotificationChannelRequest))
}

// DeleteNotificationChannelRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteNotificationChannelRequest according to their type
// Present only for array (repeated) types.
type DeleteNotificationChannelRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteNotificationChannelRequest_FieldPath
	ContainsValue(*DeleteNotificationChannelRequest) bool
}

// ParseDeleteNotificationChannelRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteNotificationChannelRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteNotificationChannelRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteNotificationChannelRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteNotificationChannelRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteNotificationChannelRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteNotificationChannelRequest_FieldTerminalPathArrayItemValue struct {
	DeleteNotificationChannelRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteNotificationChannelRequest_FieldPathArrayItemValue = (*DeleteNotificationChannelRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteNotificationChannelRequest as interface{}
func (fpaiv *DeleteNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteNotificationChannelRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteNotificationChannelRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteNotificationChannelRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteNotificationChannelRequest'
func (fpaiv *DeleteNotificationChannelRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteNotificationChannelRequest) bool {
	slice := fpaiv.DeleteNotificationChannelRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteNotificationChannelRequest_FieldPathArrayOfValues allows storing slice of values for DeleteNotificationChannelRequest fields according to their type
type DeleteNotificationChannelRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteNotificationChannelRequest_FieldPath
}

func ParseDeleteNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteNotificationChannelRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteNotificationChannelRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteNotificationChannelRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteNotificationChannelRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteNotificationChannelRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteNotificationChannelRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteNotificationChannelRequest_FieldTerminalPathArrayOfValues struct {
	DeleteNotificationChannelRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteNotificationChannelRequest_FieldPathArrayOfValues = (*DeleteNotificationChannelRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteNotificationChannelRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteNotificationChannelRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*notification_channel.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteNotificationChannelRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*notification_channel.Reference, bool) {
	res, ok := fpaov.values.([]*notification_channel.Reference)
	return res, ok
}
