// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/notification_channel.proto
// DO NOT EDIT!!!

package notification_channel

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type NotificationChannel_FieldPath interface {
	gotenobject.FieldPath
	Selector() NotificationChannel_FieldPathSelector
	Get(source *NotificationChannel) []interface{}
	GetSingle(source *NotificationChannel) (interface{}, bool)
	ClearValue(item *NotificationChannel)

	// Those methods build corresponding NotificationChannel_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) NotificationChannel_FieldPathValue
	WithIArrayOfValues(values interface{}) NotificationChannel_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) NotificationChannel_FieldPathArrayItemValue
}

type NotificationChannel_FieldPathSelector int32

const (
	NotificationChannel_FieldPathSelectorName        NotificationChannel_FieldPathSelector = 0
	NotificationChannel_FieldPathSelectorMetadata    NotificationChannel_FieldPathSelector = 1
	NotificationChannel_FieldPathSelectorDisplayName NotificationChannel_FieldPathSelector = 2
	NotificationChannel_FieldPathSelectorSpec        NotificationChannel_FieldPathSelector = 3
	NotificationChannel_FieldPathSelectorState       NotificationChannel_FieldPathSelector = 4
	NotificationChannel_FieldPathSelectorDescription NotificationChannel_FieldPathSelector = 5
)

func (s NotificationChannel_FieldPathSelector) String() string {
	switch s {
	case NotificationChannel_FieldPathSelectorName:
		return "name"
	case NotificationChannel_FieldPathSelectorMetadata:
		return "metadata"
	case NotificationChannel_FieldPathSelectorDisplayName:
		return "display_name"
	case NotificationChannel_FieldPathSelectorSpec:
		return "spec"
	case NotificationChannel_FieldPathSelectorState:
		return "state"
	case NotificationChannel_FieldPathSelectorDescription:
		return "description"
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", s))
	}
}

func BuildNotificationChannel_FieldPath(fp gotenobject.RawFieldPath) (NotificationChannel_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object NotificationChannel")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorName}, nil
		case "metadata":
			return &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorDisplayName}, nil
		case "spec":
			return &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorSpec}, nil
		case "state":
			return &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorState}, nil
		case "description":
			return &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorDescription}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &NotificationChannel_FieldSubPath{selector: NotificationChannel_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildNotificationChannelSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &NotificationChannel_FieldSubPath{selector: NotificationChannel_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "state":
			if subpath, err := BuildNotificationChannelState_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &NotificationChannel_FieldSubPath{selector: NotificationChannel_FieldPathSelectorState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object NotificationChannel", fp)
}

func ParseNotificationChannel_FieldPath(rawField string) (NotificationChannel_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildNotificationChannel_FieldPath(fp)
}

func MustParseNotificationChannel_FieldPath(rawField string) NotificationChannel_FieldPath {
	fp, err := ParseNotificationChannel_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type NotificationChannel_FieldTerminalPath struct {
	selector NotificationChannel_FieldPathSelector
}

var _ NotificationChannel_FieldPath = (*NotificationChannel_FieldTerminalPath)(nil)

func (fp *NotificationChannel_FieldTerminalPath) Selector() NotificationChannel_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *NotificationChannel_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *NotificationChannel_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source NotificationChannel
func (fp *NotificationChannel_FieldTerminalPath) Get(source *NotificationChannel) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case NotificationChannel_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case NotificationChannel_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case NotificationChannel_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case NotificationChannel_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case NotificationChannel_FieldPathSelectorState:
			if source.State != nil {
				values = append(values, source.State)
			}
		case NotificationChannel_FieldPathSelectorDescription:
			values = append(values, source.Description)
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
		}
	}
	return
}

func (fp *NotificationChannel_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*NotificationChannel))
}

// GetSingle returns value pointed by specific field of from source NotificationChannel
func (fp *NotificationChannel_FieldTerminalPath) GetSingle(source *NotificationChannel) (interface{}, bool) {
	switch fp.selector {
	case NotificationChannel_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case NotificationChannel_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case NotificationChannel_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case NotificationChannel_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case NotificationChannel_FieldPathSelectorState:
		res := source.GetState()
		return res, res != nil
	case NotificationChannel_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
	}
}

func (fp *NotificationChannel_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*NotificationChannel))
}

// GetDefault returns a default value of the field type
func (fp *NotificationChannel_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case NotificationChannel_FieldPathSelectorName:
		return (*Name)(nil)
	case NotificationChannel_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case NotificationChannel_FieldPathSelectorDisplayName:
		return ""
	case NotificationChannel_FieldPathSelectorSpec:
		return (*NotificationChannel_Spec)(nil)
	case NotificationChannel_FieldPathSelectorState:
		return (*NotificationChannel_State)(nil)
	case NotificationChannel_FieldPathSelectorDescription:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
	}
}

func (fp *NotificationChannel_FieldTerminalPath) ClearValue(item *NotificationChannel) {
	if item != nil {
		switch fp.selector {
		case NotificationChannel_FieldPathSelectorName:
			item.Name = nil
		case NotificationChannel_FieldPathSelectorMetadata:
			item.Metadata = nil
		case NotificationChannel_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case NotificationChannel_FieldPathSelectorSpec:
			item.Spec = nil
		case NotificationChannel_FieldPathSelectorState:
			item.State = nil
		case NotificationChannel_FieldPathSelectorDescription:
			item.Description = ""
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
		}
	}
}

func (fp *NotificationChannel_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*NotificationChannel))
}

// IsLeaf - whether field path is holds simple value
func (fp *NotificationChannel_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == NotificationChannel_FieldPathSelectorName ||
		fp.selector == NotificationChannel_FieldPathSelectorDisplayName ||
		fp.selector == NotificationChannel_FieldPathSelectorDescription
}

func (fp *NotificationChannel_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *NotificationChannel_FieldTerminalPath) WithIValue(value interface{}) NotificationChannel_FieldPathValue {
	switch fp.selector {
	case NotificationChannel_FieldPathSelectorName:
		return &NotificationChannel_FieldTerminalPathValue{NotificationChannel_FieldTerminalPath: *fp, value: value.(*Name)}
	case NotificationChannel_FieldPathSelectorMetadata:
		return &NotificationChannel_FieldTerminalPathValue{NotificationChannel_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case NotificationChannel_FieldPathSelectorDisplayName:
		return &NotificationChannel_FieldTerminalPathValue{NotificationChannel_FieldTerminalPath: *fp, value: value.(string)}
	case NotificationChannel_FieldPathSelectorSpec:
		return &NotificationChannel_FieldTerminalPathValue{NotificationChannel_FieldTerminalPath: *fp, value: value.(*NotificationChannel_Spec)}
	case NotificationChannel_FieldPathSelectorState:
		return &NotificationChannel_FieldTerminalPathValue{NotificationChannel_FieldTerminalPath: *fp, value: value.(*NotificationChannel_State)}
	case NotificationChannel_FieldPathSelectorDescription:
		return &NotificationChannel_FieldTerminalPathValue{NotificationChannel_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
	}
}

func (fp *NotificationChannel_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *NotificationChannel_FieldTerminalPath) WithIArrayOfValues(values interface{}) NotificationChannel_FieldPathArrayOfValues {
	fpaov := &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp}
	switch fp.selector {
	case NotificationChannel_FieldPathSelectorName:
		return &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp, values: values.([]*Name)}
	case NotificationChannel_FieldPathSelectorMetadata:
		return &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case NotificationChannel_FieldPathSelectorDisplayName:
		return &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp, values: values.([]string)}
	case NotificationChannel_FieldPathSelectorSpec:
		return &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp, values: values.([]*NotificationChannel_Spec)}
	case NotificationChannel_FieldPathSelectorState:
		return &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp, values: values.([]*NotificationChannel_State)}
	case NotificationChannel_FieldPathSelectorDescription:
		return &NotificationChannel_FieldTerminalPathArrayOfValues{NotificationChannel_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
	}
	return fpaov
}

func (fp *NotificationChannel_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *NotificationChannel_FieldTerminalPath) WithIArrayItemValue(value interface{}) NotificationChannel_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fp.selector))
	}
}

func (fp *NotificationChannel_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type NotificationChannel_FieldSubPath struct {
	selector NotificationChannel_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ NotificationChannel_FieldPath = (*NotificationChannel_FieldSubPath)(nil)

func (fps *NotificationChannel_FieldSubPath) Selector() NotificationChannel_FieldPathSelector {
	return fps.selector
}
func (fps *NotificationChannel_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *NotificationChannel_FieldSubPath) AsSpecSubPath() (NotificationChannelSpec_FieldPath, bool) {
	res, ok := fps.subPath.(NotificationChannelSpec_FieldPath)
	return res, ok
}
func (fps *NotificationChannel_FieldSubPath) AsStateSubPath() (NotificationChannelState_FieldPath, bool) {
	res, ok := fps.subPath.(NotificationChannelState_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *NotificationChannel_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *NotificationChannel_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source NotificationChannel
func (fps *NotificationChannel_FieldSubPath) Get(source *NotificationChannel) (values []interface{}) {
	switch fps.selector {
	case NotificationChannel_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case NotificationChannel_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	case NotificationChannel_FieldPathSelectorState:
		values = append(values, fps.subPath.GetRaw(source.GetState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fps.selector))
	}
	return
}

func (fps *NotificationChannel_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*NotificationChannel))
}

// GetSingle returns value of selected field from source NotificationChannel
func (fps *NotificationChannel_FieldSubPath) GetSingle(source *NotificationChannel) (interface{}, bool) {
	switch fps.selector {
	case NotificationChannel_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case NotificationChannel_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case NotificationChannel_FieldPathSelectorState:
		if source.GetState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetState())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fps.selector))
	}
}

func (fps *NotificationChannel_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*NotificationChannel))
}

// GetDefault returns a default value of the field type
func (fps *NotificationChannel_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *NotificationChannel_FieldSubPath) ClearValue(item *NotificationChannel) {
	if item != nil {
		switch fps.selector {
		case NotificationChannel_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case NotificationChannel_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case NotificationChannel_FieldPathSelectorState:
			fps.subPath.ClearValueRaw(item.State)
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fps.selector))
		}
	}
}

func (fps *NotificationChannel_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*NotificationChannel))
}

// IsLeaf - whether field path is holds simple value
func (fps *NotificationChannel_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *NotificationChannel_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&NotificationChannel_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *NotificationChannel_FieldSubPath) WithIValue(value interface{}) NotificationChannel_FieldPathValue {
	return &NotificationChannel_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *NotificationChannel_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *NotificationChannel_FieldSubPath) WithIArrayOfValues(values interface{}) NotificationChannel_FieldPathArrayOfValues {
	return &NotificationChannel_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *NotificationChannel_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *NotificationChannel_FieldSubPath) WithIArrayItemValue(value interface{}) NotificationChannel_FieldPathArrayItemValue {
	return &NotificationChannel_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *NotificationChannel_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// NotificationChannel_FieldPathValue allows storing values for NotificationChannel fields according to their type
type NotificationChannel_FieldPathValue interface {
	NotificationChannel_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **NotificationChannel)
	CompareWith(*NotificationChannel) (cmp int, comparable bool)
}

func ParseNotificationChannel_FieldPathValue(pathStr, valueStr string) (NotificationChannel_FieldPathValue, error) {
	fp, err := ParseNotificationChannel_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NotificationChannel field path value from %s: %v", valueStr, err)
	}
	return fpv.(NotificationChannel_FieldPathValue), nil
}

func MustParseNotificationChannel_FieldPathValue(pathStr, valueStr string) NotificationChannel_FieldPathValue {
	fpv, err := ParseNotificationChannel_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type NotificationChannel_FieldTerminalPathValue struct {
	NotificationChannel_FieldTerminalPath
	value interface{}
}

var _ NotificationChannel_FieldPathValue = (*NotificationChannel_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'NotificationChannel' as interface{}
func (fpv *NotificationChannel_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *NotificationChannel_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *NotificationChannel_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *NotificationChannel_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *NotificationChannel_FieldTerminalPathValue) AsSpecValue() (*NotificationChannel_Spec, bool) {
	res, ok := fpv.value.(*NotificationChannel_Spec)
	return res, ok
}
func (fpv *NotificationChannel_FieldTerminalPathValue) AsStateValue() (*NotificationChannel_State, bool) {
	res, ok := fpv.value.(*NotificationChannel_State)
	return res, ok
}
func (fpv *NotificationChannel_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object NotificationChannel
func (fpv *NotificationChannel_FieldTerminalPathValue) SetTo(target **NotificationChannel) {
	if *target == nil {
		*target = new(NotificationChannel)
	}
	switch fpv.selector {
	case NotificationChannel_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case NotificationChannel_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case NotificationChannel_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case NotificationChannel_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*NotificationChannel_Spec)
	case NotificationChannel_FieldPathSelectorState:
		(*target).State = fpv.value.(*NotificationChannel_State)
	case NotificationChannel_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fpv.selector))
	}
}

func (fpv *NotificationChannel_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'NotificationChannel_FieldTerminalPathValue' with the value under path in 'NotificationChannel'.
func (fpv *NotificationChannel_FieldTerminalPathValue) CompareWith(source *NotificationChannel) (int, bool) {
	switch fpv.selector {
	case NotificationChannel_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case NotificationChannel_FieldPathSelectorMetadata:
		return 0, false
	case NotificationChannel_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case NotificationChannel_FieldPathSelectorSpec:
		return 0, false
	case NotificationChannel_FieldPathSelectorState:
		return 0, false
	case NotificationChannel_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fpv.selector))
	}
}

func (fpv *NotificationChannel_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*NotificationChannel))
}

type NotificationChannel_FieldSubPathValue struct {
	NotificationChannel_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ NotificationChannel_FieldPathValue = (*NotificationChannel_FieldSubPathValue)(nil)

func (fpvs *NotificationChannel_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *NotificationChannel_FieldSubPathValue) AsSpecPathValue() (NotificationChannelSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(NotificationChannelSpec_FieldPathValue)
	return res, ok
}
func (fpvs *NotificationChannel_FieldSubPathValue) AsStatePathValue() (NotificationChannelState_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(NotificationChannelState_FieldPathValue)
	return res, ok
}

func (fpvs *NotificationChannel_FieldSubPathValue) SetTo(target **NotificationChannel) {
	if *target == nil {
		*target = new(NotificationChannel)
	}
	switch fpvs.Selector() {
	case NotificationChannel_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case NotificationChannel_FieldPathSelectorSpec:
		fpvs.subPathValue.(NotificationChannelSpec_FieldPathValue).SetTo(&(*target).Spec)
	case NotificationChannel_FieldPathSelectorState:
		fpvs.subPathValue.(NotificationChannelState_FieldPathValue).SetTo(&(*target).State)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fpvs.Selector()))
	}
}

func (fpvs *NotificationChannel_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel)
	fpvs.SetTo(&typedObject)
}

func (fpvs *NotificationChannel_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *NotificationChannel_FieldSubPathValue) CompareWith(source *NotificationChannel) (int, bool) {
	switch fpvs.Selector() {
	case NotificationChannel_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case NotificationChannel_FieldPathSelectorSpec:
		return fpvs.subPathValue.(NotificationChannelSpec_FieldPathValue).CompareWith(source.GetSpec())
	case NotificationChannel_FieldPathSelectorState:
		return fpvs.subPathValue.(NotificationChannelState_FieldPathValue).CompareWith(source.GetState())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fpvs.Selector()))
	}
}

func (fpvs *NotificationChannel_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*NotificationChannel))
}

// NotificationChannel_FieldPathArrayItemValue allows storing single item in Path-specific values for NotificationChannel according to their type
// Present only for array (repeated) types.
type NotificationChannel_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	NotificationChannel_FieldPath
	ContainsValue(*NotificationChannel) bool
}

// ParseNotificationChannel_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseNotificationChannel_FieldPathArrayItemValue(pathStr, valueStr string) (NotificationChannel_FieldPathArrayItemValue, error) {
	fp, err := ParseNotificationChannel_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NotificationChannel field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(NotificationChannel_FieldPathArrayItemValue), nil
}

func MustParseNotificationChannel_FieldPathArrayItemValue(pathStr, valueStr string) NotificationChannel_FieldPathArrayItemValue {
	fpaiv, err := ParseNotificationChannel_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type NotificationChannel_FieldTerminalPathArrayItemValue struct {
	NotificationChannel_FieldTerminalPath
	value interface{}
}

var _ NotificationChannel_FieldPathArrayItemValue = (*NotificationChannel_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object NotificationChannel as interface{}
func (fpaiv *NotificationChannel_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *NotificationChannel_FieldTerminalPathArrayItemValue) GetSingle(source *NotificationChannel) (interface{}, bool) {
	return nil, false
}

func (fpaiv *NotificationChannel_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*NotificationChannel))
}

// Contains returns a boolean indicating if value that is being held is present in given 'NotificationChannel'
func (fpaiv *NotificationChannel_FieldTerminalPathArrayItemValue) ContainsValue(source *NotificationChannel) bool {
	slice := fpaiv.NotificationChannel_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type NotificationChannel_FieldSubPathArrayItemValue struct {
	NotificationChannel_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *NotificationChannel_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *NotificationChannel_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *NotificationChannel_FieldSubPathArrayItemValue) AsSpecPathItemValue() (NotificationChannelSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(NotificationChannelSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *NotificationChannel_FieldSubPathArrayItemValue) AsStatePathItemValue() (NotificationChannelState_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(NotificationChannelState_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'NotificationChannel'
func (fpaivs *NotificationChannel_FieldSubPathArrayItemValue) ContainsValue(source *NotificationChannel) bool {
	switch fpaivs.Selector() {
	case NotificationChannel_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case NotificationChannel_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(NotificationChannelSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case NotificationChannel_FieldPathSelectorState:
		return fpaivs.subPathItemValue.(NotificationChannelState_FieldPathArrayItemValue).ContainsValue(source.GetState())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel: %d", fpaivs.Selector()))
	}
}

// NotificationChannel_FieldPathArrayOfValues allows storing slice of values for NotificationChannel fields according to their type
type NotificationChannel_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	NotificationChannel_FieldPath
}

func ParseNotificationChannel_FieldPathArrayOfValues(pathStr, valuesStr string) (NotificationChannel_FieldPathArrayOfValues, error) {
	fp, err := ParseNotificationChannel_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NotificationChannel field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(NotificationChannel_FieldPathArrayOfValues), nil
}

func MustParseNotificationChannel_FieldPathArrayOfValues(pathStr, valuesStr string) NotificationChannel_FieldPathArrayOfValues {
	fpaov, err := ParseNotificationChannel_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type NotificationChannel_FieldTerminalPathArrayOfValues struct {
	NotificationChannel_FieldTerminalPath
	values interface{}
}

var _ NotificationChannel_FieldPathArrayOfValues = (*NotificationChannel_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case NotificationChannel_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case NotificationChannel_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case NotificationChannel_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case NotificationChannel_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*NotificationChannel_Spec) {
			values = append(values, v)
		}
	case NotificationChannel_FieldPathSelectorState:
		for _, v := range fpaov.values.([]*NotificationChannel_State) {
			values = append(values, v)
		}
	case NotificationChannel_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*NotificationChannel_Spec, bool) {
	res, ok := fpaov.values.([]*NotificationChannel_Spec)
	return res, ok
}
func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) AsStateArrayOfValues() ([]*NotificationChannel_State, bool) {
	res, ok := fpaov.values.([]*NotificationChannel_State)
	return res, ok
}
func (fpaov *NotificationChannel_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type NotificationChannel_FieldSubPathArrayOfValues struct {
	NotificationChannel_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ NotificationChannel_FieldPathArrayOfValues = (*NotificationChannel_FieldSubPathArrayOfValues)(nil)

func (fpsaov *NotificationChannel_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *NotificationChannel_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *NotificationChannel_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (NotificationChannelSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(NotificationChannelSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *NotificationChannel_FieldSubPathArrayOfValues) AsStatePathArrayOfValues() (NotificationChannelState_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(NotificationChannelState_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type NotificationChannelSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() NotificationChannelSpec_FieldPathSelector
	Get(source *NotificationChannel_Spec) []interface{}
	GetSingle(source *NotificationChannel_Spec) (interface{}, bool)
	ClearValue(item *NotificationChannel_Spec)

	// Those methods build corresponding NotificationChannelSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) NotificationChannelSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) NotificationChannelSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) NotificationChannelSpec_FieldPathArrayItemValue
}

type NotificationChannelSpec_FieldPathSelector int32

const (
	NotificationChannelSpec_FieldPathSelectorEnabled                  NotificationChannelSpec_FieldPathSelector = 0
	NotificationChannelSpec_FieldPathSelectorType                     NotificationChannelSpec_FieldPathSelector = 1
	NotificationChannelSpec_FieldPathSelectorEmail                    NotificationChannelSpec_FieldPathSelector = 2
	NotificationChannelSpec_FieldPathSelectorSlack                    NotificationChannelSpec_FieldPathSelector = 3
	NotificationChannelSpec_FieldPathSelectorWebhook                  NotificationChannelSpec_FieldPathSelector = 4
	NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode NotificationChannelSpec_FieldPathSelector = 5
)

func (s NotificationChannelSpec_FieldPathSelector) String() string {
	switch s {
	case NotificationChannelSpec_FieldPathSelectorEnabled:
		return "enabled"
	case NotificationChannelSpec_FieldPathSelectorType:
		return "type"
	case NotificationChannelSpec_FieldPathSelectorEmail:
		return "email"
	case NotificationChannelSpec_FieldPathSelectorSlack:
		return "slack"
	case NotificationChannelSpec_FieldPathSelectorWebhook:
		return "webhook"
	case NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode:
		return "notification_language_code"
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", s))
	}
}

func BuildNotificationChannelSpec_FieldPath(fp gotenobject.RawFieldPath) (NotificationChannelSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object NotificationChannel_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "enabled":
			return &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorEnabled}, nil
		case "type":
			return &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorType}, nil
		case "email":
			return &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorEmail}, nil
		case "slack":
			return &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorSlack}, nil
		case "webhook":
			return &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorWebhook}, nil
		case "notification_language_code", "notificationLanguageCode", "notification-language-code":
			return &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode}, nil
		}
	} else {
		switch fp[0] {
		case "email":
			if subpath, err := BuildNotificationChannelSpecEmail_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &NotificationChannelSpec_FieldSubPath{selector: NotificationChannelSpec_FieldPathSelectorEmail, subPath: subpath}, nil
			}
		case "slack":
			if subpath, err := BuildNotificationChannelSpecSlack_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &NotificationChannelSpec_FieldSubPath{selector: NotificationChannelSpec_FieldPathSelectorSlack, subPath: subpath}, nil
			}
		case "webhook":
			if subpath, err := BuildNotificationChannelSpecWebhook_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &NotificationChannelSpec_FieldSubPath{selector: NotificationChannelSpec_FieldPathSelectorWebhook, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object NotificationChannel_Spec", fp)
}

func ParseNotificationChannelSpec_FieldPath(rawField string) (NotificationChannelSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildNotificationChannelSpec_FieldPath(fp)
}

func MustParseNotificationChannelSpec_FieldPath(rawField string) NotificationChannelSpec_FieldPath {
	fp, err := ParseNotificationChannelSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type NotificationChannelSpec_FieldTerminalPath struct {
	selector NotificationChannelSpec_FieldPathSelector
}

var _ NotificationChannelSpec_FieldPath = (*NotificationChannelSpec_FieldTerminalPath)(nil)

func (fp *NotificationChannelSpec_FieldTerminalPath) Selector() NotificationChannelSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *NotificationChannelSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *NotificationChannelSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source NotificationChannel_Spec
func (fp *NotificationChannelSpec_FieldTerminalPath) Get(source *NotificationChannel_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case NotificationChannelSpec_FieldPathSelectorEnabled:
			values = append(values, source.Enabled)
		case NotificationChannelSpec_FieldPathSelectorType:
			values = append(values, source.Type)
		case NotificationChannelSpec_FieldPathSelectorEmail:
			if source.Email != nil {
				values = append(values, source.Email)
			}
		case NotificationChannelSpec_FieldPathSelectorSlack:
			if source.Slack != nil {
				values = append(values, source.Slack)
			}
		case NotificationChannelSpec_FieldPathSelectorWebhook:
			if source.Webhook != nil {
				values = append(values, source.Webhook)
			}
		case NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode:
			values = append(values, source.NotificationLanguageCode)
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *NotificationChannelSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*NotificationChannel_Spec))
}

// GetSingle returns value pointed by specific field of from source NotificationChannel_Spec
func (fp *NotificationChannelSpec_FieldTerminalPath) GetSingle(source *NotificationChannel_Spec) (interface{}, bool) {
	switch fp.selector {
	case NotificationChannelSpec_FieldPathSelectorEnabled:
		return source.GetEnabled(), source != nil
	case NotificationChannelSpec_FieldPathSelectorType:
		return source.GetType(), source != nil
	case NotificationChannelSpec_FieldPathSelectorEmail:
		res := source.GetEmail()
		return res, res != nil
	case NotificationChannelSpec_FieldPathSelectorSlack:
		res := source.GetSlack()
		return res, res != nil
	case NotificationChannelSpec_FieldPathSelectorWebhook:
		res := source.GetWebhook()
		return res, res != nil
	case NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode:
		return source.GetNotificationLanguageCode(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*NotificationChannel_Spec))
}

// GetDefault returns a default value of the field type
func (fp *NotificationChannelSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case NotificationChannelSpec_FieldPathSelectorEnabled:
		return false
	case NotificationChannelSpec_FieldPathSelectorType:
		return NotificationChannel_Spec_TYPE_UNSPECIFIED
	case NotificationChannelSpec_FieldPathSelectorEmail:
		return (*NotificationChannel_Spec_Email)(nil)
	case NotificationChannelSpec_FieldPathSelectorSlack:
		return (*NotificationChannel_Spec_Slack)(nil)
	case NotificationChannelSpec_FieldPathSelectorWebhook:
		return (*NotificationChannel_Spec_Webhook)(nil)
	case NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpec_FieldTerminalPath) ClearValue(item *NotificationChannel_Spec) {
	if item != nil {
		switch fp.selector {
		case NotificationChannelSpec_FieldPathSelectorEnabled:
			item.Enabled = false
		case NotificationChannelSpec_FieldPathSelectorType:
			item.Type = NotificationChannel_Spec_TYPE_UNSPECIFIED
		case NotificationChannelSpec_FieldPathSelectorEmail:
			item.Email = nil
		case NotificationChannelSpec_FieldPathSelectorSlack:
			item.Slack = nil
		case NotificationChannelSpec_FieldPathSelectorWebhook:
			item.Webhook = nil
		case NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode:
			item.NotificationLanguageCode = ""
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fp.selector))
		}
	}
}

func (fp *NotificationChannelSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*NotificationChannel_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *NotificationChannelSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == NotificationChannelSpec_FieldPathSelectorEnabled ||
		fp.selector == NotificationChannelSpec_FieldPathSelectorType ||
		fp.selector == NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode
}

func (fp *NotificationChannelSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *NotificationChannelSpec_FieldTerminalPath) WithIValue(value interface{}) NotificationChannelSpec_FieldPathValue {
	switch fp.selector {
	case NotificationChannelSpec_FieldPathSelectorEnabled:
		return &NotificationChannelSpec_FieldTerminalPathValue{NotificationChannelSpec_FieldTerminalPath: *fp, value: value.(bool)}
	case NotificationChannelSpec_FieldPathSelectorType:
		return &NotificationChannelSpec_FieldTerminalPathValue{NotificationChannelSpec_FieldTerminalPath: *fp, value: value.(NotificationChannel_Spec_Type)}
	case NotificationChannelSpec_FieldPathSelectorEmail:
		return &NotificationChannelSpec_FieldTerminalPathValue{NotificationChannelSpec_FieldTerminalPath: *fp, value: value.(*NotificationChannel_Spec_Email)}
	case NotificationChannelSpec_FieldPathSelectorSlack:
		return &NotificationChannelSpec_FieldTerminalPathValue{NotificationChannelSpec_FieldTerminalPath: *fp, value: value.(*NotificationChannel_Spec_Slack)}
	case NotificationChannelSpec_FieldPathSelectorWebhook:
		return &NotificationChannelSpec_FieldTerminalPathValue{NotificationChannelSpec_FieldTerminalPath: *fp, value: value.(*NotificationChannel_Spec_Webhook)}
	case NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode:
		return &NotificationChannelSpec_FieldTerminalPathValue{NotificationChannelSpec_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *NotificationChannelSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) NotificationChannelSpec_FieldPathArrayOfValues {
	fpaov := &NotificationChannelSpec_FieldTerminalPathArrayOfValues{NotificationChannelSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case NotificationChannelSpec_FieldPathSelectorEnabled:
		return &NotificationChannelSpec_FieldTerminalPathArrayOfValues{NotificationChannelSpec_FieldTerminalPath: *fp, values: values.([]bool)}
	case NotificationChannelSpec_FieldPathSelectorType:
		return &NotificationChannelSpec_FieldTerminalPathArrayOfValues{NotificationChannelSpec_FieldTerminalPath: *fp, values: values.([]NotificationChannel_Spec_Type)}
	case NotificationChannelSpec_FieldPathSelectorEmail:
		return &NotificationChannelSpec_FieldTerminalPathArrayOfValues{NotificationChannelSpec_FieldTerminalPath: *fp, values: values.([]*NotificationChannel_Spec_Email)}
	case NotificationChannelSpec_FieldPathSelectorSlack:
		return &NotificationChannelSpec_FieldTerminalPathArrayOfValues{NotificationChannelSpec_FieldTerminalPath: *fp, values: values.([]*NotificationChannel_Spec_Slack)}
	case NotificationChannelSpec_FieldPathSelectorWebhook:
		return &NotificationChannelSpec_FieldTerminalPathArrayOfValues{NotificationChannelSpec_FieldTerminalPath: *fp, values: values.([]*NotificationChannel_Spec_Webhook)}
	case NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode:
		return &NotificationChannelSpec_FieldTerminalPathArrayOfValues{NotificationChannelSpec_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *NotificationChannelSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *NotificationChannelSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) NotificationChannelSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type NotificationChannelSpec_FieldSubPath struct {
	selector NotificationChannelSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ NotificationChannelSpec_FieldPath = (*NotificationChannelSpec_FieldSubPath)(nil)

func (fps *NotificationChannelSpec_FieldSubPath) Selector() NotificationChannelSpec_FieldPathSelector {
	return fps.selector
}
func (fps *NotificationChannelSpec_FieldSubPath) AsEmailSubPath() (NotificationChannelSpecEmail_FieldPath, bool) {
	res, ok := fps.subPath.(NotificationChannelSpecEmail_FieldPath)
	return res, ok
}
func (fps *NotificationChannelSpec_FieldSubPath) AsSlackSubPath() (NotificationChannelSpecSlack_FieldPath, bool) {
	res, ok := fps.subPath.(NotificationChannelSpecSlack_FieldPath)
	return res, ok
}
func (fps *NotificationChannelSpec_FieldSubPath) AsWebhookSubPath() (NotificationChannelSpecWebhook_FieldPath, bool) {
	res, ok := fps.subPath.(NotificationChannelSpecWebhook_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *NotificationChannelSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *NotificationChannelSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source NotificationChannel_Spec
func (fps *NotificationChannelSpec_FieldSubPath) Get(source *NotificationChannel_Spec) (values []interface{}) {
	switch fps.selector {
	case NotificationChannelSpec_FieldPathSelectorEmail:
		values = append(values, fps.subPath.GetRaw(source.GetEmail())...)
	case NotificationChannelSpec_FieldPathSelectorSlack:
		values = append(values, fps.subPath.GetRaw(source.GetSlack())...)
	case NotificationChannelSpec_FieldPathSelectorWebhook:
		values = append(values, fps.subPath.GetRaw(source.GetWebhook())...)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fps.selector))
	}
	return
}

func (fps *NotificationChannelSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*NotificationChannel_Spec))
}

// GetSingle returns value of selected field from source NotificationChannel_Spec
func (fps *NotificationChannelSpec_FieldSubPath) GetSingle(source *NotificationChannel_Spec) (interface{}, bool) {
	switch fps.selector {
	case NotificationChannelSpec_FieldPathSelectorEmail:
		if source.GetEmail() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetEmail())
	case NotificationChannelSpec_FieldPathSelectorSlack:
		if source.GetSlack() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSlack())
	case NotificationChannelSpec_FieldPathSelectorWebhook:
		if source.GetWebhook() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetWebhook())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fps.selector))
	}
}

func (fps *NotificationChannelSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*NotificationChannel_Spec))
}

// GetDefault returns a default value of the field type
func (fps *NotificationChannelSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *NotificationChannelSpec_FieldSubPath) ClearValue(item *NotificationChannel_Spec) {
	if item != nil {
		switch fps.selector {
		case NotificationChannelSpec_FieldPathSelectorEmail:
			fps.subPath.ClearValueRaw(item.Email)
		case NotificationChannelSpec_FieldPathSelectorSlack:
			fps.subPath.ClearValueRaw(item.Slack)
		case NotificationChannelSpec_FieldPathSelectorWebhook:
			fps.subPath.ClearValueRaw(item.Webhook)
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fps.selector))
		}
	}
}

func (fps *NotificationChannelSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*NotificationChannel_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fps *NotificationChannelSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *NotificationChannelSpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&NotificationChannelSpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *NotificationChannelSpec_FieldSubPath) WithIValue(value interface{}) NotificationChannelSpec_FieldPathValue {
	return &NotificationChannelSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *NotificationChannelSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *NotificationChannelSpec_FieldSubPath) WithIArrayOfValues(values interface{}) NotificationChannelSpec_FieldPathArrayOfValues {
	return &NotificationChannelSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *NotificationChannelSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *NotificationChannelSpec_FieldSubPath) WithIArrayItemValue(value interface{}) NotificationChannelSpec_FieldPathArrayItemValue {
	return &NotificationChannelSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *NotificationChannelSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// NotificationChannelSpec_FieldPathValue allows storing values for Spec fields according to their type
type NotificationChannelSpec_FieldPathValue interface {
	NotificationChannelSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **NotificationChannel_Spec)
	CompareWith(*NotificationChannel_Spec) (cmp int, comparable bool)
}

func ParseNotificationChannelSpec_FieldPathValue(pathStr, valueStr string) (NotificationChannelSpec_FieldPathValue, error) {
	fp, err := ParseNotificationChannelSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(NotificationChannelSpec_FieldPathValue), nil
}

func MustParseNotificationChannelSpec_FieldPathValue(pathStr, valueStr string) NotificationChannelSpec_FieldPathValue {
	fpv, err := ParseNotificationChannelSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type NotificationChannelSpec_FieldTerminalPathValue struct {
	NotificationChannelSpec_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelSpec_FieldPathValue = (*NotificationChannelSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *NotificationChannelSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *NotificationChannelSpec_FieldTerminalPathValue) AsEnabledValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *NotificationChannelSpec_FieldTerminalPathValue) AsTypeValue() (NotificationChannel_Spec_Type, bool) {
	res, ok := fpv.value.(NotificationChannel_Spec_Type)
	return res, ok
}
func (fpv *NotificationChannelSpec_FieldTerminalPathValue) AsEmailValue() (*NotificationChannel_Spec_Email, bool) {
	res, ok := fpv.value.(*NotificationChannel_Spec_Email)
	return res, ok
}
func (fpv *NotificationChannelSpec_FieldTerminalPathValue) AsSlackValue() (*NotificationChannel_Spec_Slack, bool) {
	res, ok := fpv.value.(*NotificationChannel_Spec_Slack)
	return res, ok
}
func (fpv *NotificationChannelSpec_FieldTerminalPathValue) AsWebhookValue() (*NotificationChannel_Spec_Webhook, bool) {
	res, ok := fpv.value.(*NotificationChannel_Spec_Webhook)
	return res, ok
}
func (fpv *NotificationChannelSpec_FieldTerminalPathValue) AsNotificationLanguageCodeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *NotificationChannelSpec_FieldTerminalPathValue) SetTo(target **NotificationChannel_Spec) {
	if *target == nil {
		*target = new(NotificationChannel_Spec)
	}
	switch fpv.selector {
	case NotificationChannelSpec_FieldPathSelectorEnabled:
		(*target).Enabled = fpv.value.(bool)
	case NotificationChannelSpec_FieldPathSelectorType:
		(*target).Type = fpv.value.(NotificationChannel_Spec_Type)
	case NotificationChannelSpec_FieldPathSelectorEmail:
		(*target).Email = fpv.value.(*NotificationChannel_Spec_Email)
	case NotificationChannelSpec_FieldPathSelectorSlack:
		(*target).Slack = fpv.value.(*NotificationChannel_Spec_Slack)
	case NotificationChannelSpec_FieldPathSelectorWebhook:
		(*target).Webhook = fpv.value.(*NotificationChannel_Spec_Webhook)
	case NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode:
		(*target).NotificationLanguageCode = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'NotificationChannelSpec_FieldTerminalPathValue' with the value under path in 'NotificationChannel_Spec'.
func (fpv *NotificationChannelSpec_FieldTerminalPathValue) CompareWith(source *NotificationChannel_Spec) (int, bool) {
	switch fpv.selector {
	case NotificationChannelSpec_FieldPathSelectorEnabled:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEnabled()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case NotificationChannelSpec_FieldPathSelectorType:
		leftValue := fpv.value.(NotificationChannel_Spec_Type)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case NotificationChannelSpec_FieldPathSelectorEmail:
		return 0, false
	case NotificationChannelSpec_FieldPathSelectorSlack:
		return 0, false
	case NotificationChannelSpec_FieldPathSelectorWebhook:
		return 0, false
	case NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode:
		leftValue := fpv.value.(string)
		rightValue := source.GetNotificationLanguageCode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*NotificationChannel_Spec))
}

type NotificationChannelSpec_FieldSubPathValue struct {
	NotificationChannelSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ NotificationChannelSpec_FieldPathValue = (*NotificationChannelSpec_FieldSubPathValue)(nil)

func (fpvs *NotificationChannelSpec_FieldSubPathValue) AsEmailPathValue() (NotificationChannelSpecEmail_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(NotificationChannelSpecEmail_FieldPathValue)
	return res, ok
}
func (fpvs *NotificationChannelSpec_FieldSubPathValue) AsSlackPathValue() (NotificationChannelSpecSlack_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(NotificationChannelSpecSlack_FieldPathValue)
	return res, ok
}
func (fpvs *NotificationChannelSpec_FieldSubPathValue) AsWebhookPathValue() (NotificationChannelSpecWebhook_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(NotificationChannelSpecWebhook_FieldPathValue)
	return res, ok
}

func (fpvs *NotificationChannelSpec_FieldSubPathValue) SetTo(target **NotificationChannel_Spec) {
	if *target == nil {
		*target = new(NotificationChannel_Spec)
	}
	switch fpvs.Selector() {
	case NotificationChannelSpec_FieldPathSelectorEmail:
		fpvs.subPathValue.(NotificationChannelSpecEmail_FieldPathValue).SetTo(&(*target).Email)
	case NotificationChannelSpec_FieldPathSelectorSlack:
		fpvs.subPathValue.(NotificationChannelSpecSlack_FieldPathValue).SetTo(&(*target).Slack)
	case NotificationChannelSpec_FieldPathSelectorWebhook:
		fpvs.subPathValue.(NotificationChannelSpecWebhook_FieldPathValue).SetTo(&(*target).Webhook)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *NotificationChannelSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_Spec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *NotificationChannelSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *NotificationChannelSpec_FieldSubPathValue) CompareWith(source *NotificationChannel_Spec) (int, bool) {
	switch fpvs.Selector() {
	case NotificationChannelSpec_FieldPathSelectorEmail:
		return fpvs.subPathValue.(NotificationChannelSpecEmail_FieldPathValue).CompareWith(source.GetEmail())
	case NotificationChannelSpec_FieldPathSelectorSlack:
		return fpvs.subPathValue.(NotificationChannelSpecSlack_FieldPathValue).CompareWith(source.GetSlack())
	case NotificationChannelSpec_FieldPathSelectorWebhook:
		return fpvs.subPathValue.(NotificationChannelSpecWebhook_FieldPathValue).CompareWith(source.GetWebhook())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *NotificationChannelSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*NotificationChannel_Spec))
}

// NotificationChannelSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type NotificationChannelSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	NotificationChannelSpec_FieldPath
	ContainsValue(*NotificationChannel_Spec) bool
}

// ParseNotificationChannelSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseNotificationChannelSpec_FieldPathArrayItemValue(pathStr, valueStr string) (NotificationChannelSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseNotificationChannelSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(NotificationChannelSpec_FieldPathArrayItemValue), nil
}

func MustParseNotificationChannelSpec_FieldPathArrayItemValue(pathStr, valueStr string) NotificationChannelSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseNotificationChannelSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type NotificationChannelSpec_FieldTerminalPathArrayItemValue struct {
	NotificationChannelSpec_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelSpec_FieldPathArrayItemValue = (*NotificationChannelSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object NotificationChannel_Spec as interface{}
func (fpaiv *NotificationChannelSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *NotificationChannelSpec_FieldTerminalPathArrayItemValue) GetSingle(source *NotificationChannel_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *NotificationChannelSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*NotificationChannel_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *NotificationChannelSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *NotificationChannel_Spec) bool {
	slice := fpaiv.NotificationChannelSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type NotificationChannelSpec_FieldSubPathArrayItemValue struct {
	NotificationChannelSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *NotificationChannelSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *NotificationChannelSpec_FieldSubPathArrayItemValue) AsEmailPathItemValue() (NotificationChannelSpecEmail_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(NotificationChannelSpecEmail_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *NotificationChannelSpec_FieldSubPathArrayItemValue) AsSlackPathItemValue() (NotificationChannelSpecSlack_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(NotificationChannelSpecSlack_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *NotificationChannelSpec_FieldSubPathArrayItemValue) AsWebhookPathItemValue() (NotificationChannelSpecWebhook_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(NotificationChannelSpecWebhook_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaivs *NotificationChannelSpec_FieldSubPathArrayItemValue) ContainsValue(source *NotificationChannel_Spec) bool {
	switch fpaivs.Selector() {
	case NotificationChannelSpec_FieldPathSelectorEmail:
		return fpaivs.subPathItemValue.(NotificationChannelSpecEmail_FieldPathArrayItemValue).ContainsValue(source.GetEmail())
	case NotificationChannelSpec_FieldPathSelectorSlack:
		return fpaivs.subPathItemValue.(NotificationChannelSpecSlack_FieldPathArrayItemValue).ContainsValue(source.GetSlack())
	case NotificationChannelSpec_FieldPathSelectorWebhook:
		return fpaivs.subPathItemValue.(NotificationChannelSpecWebhook_FieldPathArrayItemValue).ContainsValue(source.GetWebhook())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec: %d", fpaivs.Selector()))
	}
}

// NotificationChannelSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type NotificationChannelSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	NotificationChannelSpec_FieldPath
}

func ParseNotificationChannelSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (NotificationChannelSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseNotificationChannelSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(NotificationChannelSpec_FieldPathArrayOfValues), nil
}

func MustParseNotificationChannelSpec_FieldPathArrayOfValues(pathStr, valuesStr string) NotificationChannelSpec_FieldPathArrayOfValues {
	fpaov, err := ParseNotificationChannelSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type NotificationChannelSpec_FieldTerminalPathArrayOfValues struct {
	NotificationChannelSpec_FieldTerminalPath
	values interface{}
}

var _ NotificationChannelSpec_FieldPathArrayOfValues = (*NotificationChannelSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *NotificationChannelSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case NotificationChannelSpec_FieldPathSelectorEnabled:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case NotificationChannelSpec_FieldPathSelectorType:
		for _, v := range fpaov.values.([]NotificationChannel_Spec_Type) {
			values = append(values, v)
		}
	case NotificationChannelSpec_FieldPathSelectorEmail:
		for _, v := range fpaov.values.([]*NotificationChannel_Spec_Email) {
			values = append(values, v)
		}
	case NotificationChannelSpec_FieldPathSelectorSlack:
		for _, v := range fpaov.values.([]*NotificationChannel_Spec_Slack) {
			values = append(values, v)
		}
	case NotificationChannelSpec_FieldPathSelectorWebhook:
		for _, v := range fpaov.values.([]*NotificationChannel_Spec_Webhook) {
			values = append(values, v)
		}
	case NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *NotificationChannelSpec_FieldTerminalPathArrayOfValues) AsEnabledArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *NotificationChannelSpec_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]NotificationChannel_Spec_Type, bool) {
	res, ok := fpaov.values.([]NotificationChannel_Spec_Type)
	return res, ok
}
func (fpaov *NotificationChannelSpec_FieldTerminalPathArrayOfValues) AsEmailArrayOfValues() ([]*NotificationChannel_Spec_Email, bool) {
	res, ok := fpaov.values.([]*NotificationChannel_Spec_Email)
	return res, ok
}
func (fpaov *NotificationChannelSpec_FieldTerminalPathArrayOfValues) AsSlackArrayOfValues() ([]*NotificationChannel_Spec_Slack, bool) {
	res, ok := fpaov.values.([]*NotificationChannel_Spec_Slack)
	return res, ok
}
func (fpaov *NotificationChannelSpec_FieldTerminalPathArrayOfValues) AsWebhookArrayOfValues() ([]*NotificationChannel_Spec_Webhook, bool) {
	res, ok := fpaov.values.([]*NotificationChannel_Spec_Webhook)
	return res, ok
}
func (fpaov *NotificationChannelSpec_FieldTerminalPathArrayOfValues) AsNotificationLanguageCodeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type NotificationChannelSpec_FieldSubPathArrayOfValues struct {
	NotificationChannelSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ NotificationChannelSpec_FieldPathArrayOfValues = (*NotificationChannelSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *NotificationChannelSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *NotificationChannelSpec_FieldSubPathArrayOfValues) AsEmailPathArrayOfValues() (NotificationChannelSpecEmail_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(NotificationChannelSpecEmail_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *NotificationChannelSpec_FieldSubPathArrayOfValues) AsSlackPathArrayOfValues() (NotificationChannelSpecSlack_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(NotificationChannelSpecSlack_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *NotificationChannelSpec_FieldSubPathArrayOfValues) AsWebhookPathArrayOfValues() (NotificationChannelSpecWebhook_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(NotificationChannelSpecWebhook_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type NotificationChannelState_FieldPath interface {
	gotenobject.FieldPath
	Selector() NotificationChannelState_FieldPathSelector
	Get(source *NotificationChannel_State) []interface{}
	GetSingle(source *NotificationChannel_State) (interface{}, bool)
	ClearValue(item *NotificationChannel_State)

	// Those methods build corresponding NotificationChannelState_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) NotificationChannelState_FieldPathValue
	WithIArrayOfValues(values interface{}) NotificationChannelState_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) NotificationChannelState_FieldPathArrayItemValue
}

type NotificationChannelState_FieldPathSelector int32

const (
	NotificationChannelState_FieldPathSelectorStatus NotificationChannelState_FieldPathSelector = 0
	NotificationChannelState_FieldPathSelectorError  NotificationChannelState_FieldPathSelector = 1
)

func (s NotificationChannelState_FieldPathSelector) String() string {
	switch s {
	case NotificationChannelState_FieldPathSelectorStatus:
		return "status"
	case NotificationChannelState_FieldPathSelectorError:
		return "error"
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", s))
	}
}

func BuildNotificationChannelState_FieldPath(fp gotenobject.RawFieldPath) (NotificationChannelState_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object NotificationChannel_State")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "status":
			return &NotificationChannelState_FieldTerminalPath{selector: NotificationChannelState_FieldPathSelectorStatus}, nil
		case "error":
			return &NotificationChannelState_FieldTerminalPath{selector: NotificationChannelState_FieldPathSelectorError}, nil
		}
	} else {
		switch fp[0] {
		case "error":
			if subpath, err := BuildNotificationChannelStateError_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &NotificationChannelState_FieldSubPath{selector: NotificationChannelState_FieldPathSelectorError, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object NotificationChannel_State", fp)
}

func ParseNotificationChannelState_FieldPath(rawField string) (NotificationChannelState_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildNotificationChannelState_FieldPath(fp)
}

func MustParseNotificationChannelState_FieldPath(rawField string) NotificationChannelState_FieldPath {
	fp, err := ParseNotificationChannelState_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type NotificationChannelState_FieldTerminalPath struct {
	selector NotificationChannelState_FieldPathSelector
}

var _ NotificationChannelState_FieldPath = (*NotificationChannelState_FieldTerminalPath)(nil)

func (fp *NotificationChannelState_FieldTerminalPath) Selector() NotificationChannelState_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *NotificationChannelState_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *NotificationChannelState_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source NotificationChannel_State
func (fp *NotificationChannelState_FieldTerminalPath) Get(source *NotificationChannel_State) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case NotificationChannelState_FieldPathSelectorStatus:
			values = append(values, source.Status)
		case NotificationChannelState_FieldPathSelectorError:
			if source.Error != nil {
				values = append(values, source.Error)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
		}
	}
	return
}

func (fp *NotificationChannelState_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*NotificationChannel_State))
}

// GetSingle returns value pointed by specific field of from source NotificationChannel_State
func (fp *NotificationChannelState_FieldTerminalPath) GetSingle(source *NotificationChannel_State) (interface{}, bool) {
	switch fp.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		return source.GetStatus(), source != nil
	case NotificationChannelState_FieldPathSelectorError:
		res := source.GetError()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
	}
}

func (fp *NotificationChannelState_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*NotificationChannel_State))
}

// GetDefault returns a default value of the field type
func (fp *NotificationChannelState_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		return NotificationChannel_State_STATE_UNSPECIFIED
	case NotificationChannelState_FieldPathSelectorError:
		return (*NotificationChannel_State_Error)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
	}
}

func (fp *NotificationChannelState_FieldTerminalPath) ClearValue(item *NotificationChannel_State) {
	if item != nil {
		switch fp.selector {
		case NotificationChannelState_FieldPathSelectorStatus:
			item.Status = NotificationChannel_State_STATE_UNSPECIFIED
		case NotificationChannelState_FieldPathSelectorError:
			item.Error = nil
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
		}
	}
}

func (fp *NotificationChannelState_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*NotificationChannel_State))
}

// IsLeaf - whether field path is holds simple value
func (fp *NotificationChannelState_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == NotificationChannelState_FieldPathSelectorStatus
}

func (fp *NotificationChannelState_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *NotificationChannelState_FieldTerminalPath) WithIValue(value interface{}) NotificationChannelState_FieldPathValue {
	switch fp.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		return &NotificationChannelState_FieldTerminalPathValue{NotificationChannelState_FieldTerminalPath: *fp, value: value.(NotificationChannel_State_Status)}
	case NotificationChannelState_FieldPathSelectorError:
		return &NotificationChannelState_FieldTerminalPathValue{NotificationChannelState_FieldTerminalPath: *fp, value: value.(*NotificationChannel_State_Error)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
	}
}

func (fp *NotificationChannelState_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *NotificationChannelState_FieldTerminalPath) WithIArrayOfValues(values interface{}) NotificationChannelState_FieldPathArrayOfValues {
	fpaov := &NotificationChannelState_FieldTerminalPathArrayOfValues{NotificationChannelState_FieldTerminalPath: *fp}
	switch fp.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		return &NotificationChannelState_FieldTerminalPathArrayOfValues{NotificationChannelState_FieldTerminalPath: *fp, values: values.([]NotificationChannel_State_Status)}
	case NotificationChannelState_FieldPathSelectorError:
		return &NotificationChannelState_FieldTerminalPathArrayOfValues{NotificationChannelState_FieldTerminalPath: *fp, values: values.([]*NotificationChannel_State_Error)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
	}
	return fpaov
}

func (fp *NotificationChannelState_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *NotificationChannelState_FieldTerminalPath) WithIArrayItemValue(value interface{}) NotificationChannelState_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fp.selector))
	}
}

func (fp *NotificationChannelState_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type NotificationChannelState_FieldSubPath struct {
	selector NotificationChannelState_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ NotificationChannelState_FieldPath = (*NotificationChannelState_FieldSubPath)(nil)

func (fps *NotificationChannelState_FieldSubPath) Selector() NotificationChannelState_FieldPathSelector {
	return fps.selector
}
func (fps *NotificationChannelState_FieldSubPath) AsErrorSubPath() (NotificationChannelStateError_FieldPath, bool) {
	res, ok := fps.subPath.(NotificationChannelStateError_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *NotificationChannelState_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *NotificationChannelState_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source NotificationChannel_State
func (fps *NotificationChannelState_FieldSubPath) Get(source *NotificationChannel_State) (values []interface{}) {
	switch fps.selector {
	case NotificationChannelState_FieldPathSelectorError:
		values = append(values, fps.subPath.GetRaw(source.GetError())...)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fps.selector))
	}
	return
}

func (fps *NotificationChannelState_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*NotificationChannel_State))
}

// GetSingle returns value of selected field from source NotificationChannel_State
func (fps *NotificationChannelState_FieldSubPath) GetSingle(source *NotificationChannel_State) (interface{}, bool) {
	switch fps.selector {
	case NotificationChannelState_FieldPathSelectorError:
		if source.GetError() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetError())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fps.selector))
	}
}

func (fps *NotificationChannelState_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*NotificationChannel_State))
}

// GetDefault returns a default value of the field type
func (fps *NotificationChannelState_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *NotificationChannelState_FieldSubPath) ClearValue(item *NotificationChannel_State) {
	if item != nil {
		switch fps.selector {
		case NotificationChannelState_FieldPathSelectorError:
			fps.subPath.ClearValueRaw(item.Error)
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fps.selector))
		}
	}
}

func (fps *NotificationChannelState_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*NotificationChannel_State))
}

// IsLeaf - whether field path is holds simple value
func (fps *NotificationChannelState_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *NotificationChannelState_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&NotificationChannelState_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *NotificationChannelState_FieldSubPath) WithIValue(value interface{}) NotificationChannelState_FieldPathValue {
	return &NotificationChannelState_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *NotificationChannelState_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *NotificationChannelState_FieldSubPath) WithIArrayOfValues(values interface{}) NotificationChannelState_FieldPathArrayOfValues {
	return &NotificationChannelState_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *NotificationChannelState_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *NotificationChannelState_FieldSubPath) WithIArrayItemValue(value interface{}) NotificationChannelState_FieldPathArrayItemValue {
	return &NotificationChannelState_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *NotificationChannelState_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// NotificationChannelState_FieldPathValue allows storing values for State fields according to their type
type NotificationChannelState_FieldPathValue interface {
	NotificationChannelState_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **NotificationChannel_State)
	CompareWith(*NotificationChannel_State) (cmp int, comparable bool)
}

func ParseNotificationChannelState_FieldPathValue(pathStr, valueStr string) (NotificationChannelState_FieldPathValue, error) {
	fp, err := ParseNotificationChannelState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path value from %s: %v", valueStr, err)
	}
	return fpv.(NotificationChannelState_FieldPathValue), nil
}

func MustParseNotificationChannelState_FieldPathValue(pathStr, valueStr string) NotificationChannelState_FieldPathValue {
	fpv, err := ParseNotificationChannelState_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type NotificationChannelState_FieldTerminalPathValue struct {
	NotificationChannelState_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelState_FieldPathValue = (*NotificationChannelState_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'State' as interface{}
func (fpv *NotificationChannelState_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *NotificationChannelState_FieldTerminalPathValue) AsStatusValue() (NotificationChannel_State_Status, bool) {
	res, ok := fpv.value.(NotificationChannel_State_Status)
	return res, ok
}
func (fpv *NotificationChannelState_FieldTerminalPathValue) AsErrorValue() (*NotificationChannel_State_Error, bool) {
	res, ok := fpv.value.(*NotificationChannel_State_Error)
	return res, ok
}

// SetTo stores value for selected field for object State
func (fpv *NotificationChannelState_FieldTerminalPathValue) SetTo(target **NotificationChannel_State) {
	if *target == nil {
		*target = new(NotificationChannel_State)
	}
	switch fpv.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(NotificationChannel_State_Status)
	case NotificationChannelState_FieldPathSelectorError:
		(*target).Error = fpv.value.(*NotificationChannel_State_Error)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelState_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_State)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'NotificationChannelState_FieldTerminalPathValue' with the value under path in 'NotificationChannel_State'.
func (fpv *NotificationChannelState_FieldTerminalPathValue) CompareWith(source *NotificationChannel_State) (int, bool) {
	switch fpv.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		leftValue := fpv.value.(NotificationChannel_State_Status)
		rightValue := source.GetStatus()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case NotificationChannelState_FieldPathSelectorError:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelState_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*NotificationChannel_State))
}

type NotificationChannelState_FieldSubPathValue struct {
	NotificationChannelState_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ NotificationChannelState_FieldPathValue = (*NotificationChannelState_FieldSubPathValue)(nil)

func (fpvs *NotificationChannelState_FieldSubPathValue) AsErrorPathValue() (NotificationChannelStateError_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(NotificationChannelStateError_FieldPathValue)
	return res, ok
}

func (fpvs *NotificationChannelState_FieldSubPathValue) SetTo(target **NotificationChannel_State) {
	if *target == nil {
		*target = new(NotificationChannel_State)
	}
	switch fpvs.Selector() {
	case NotificationChannelState_FieldPathSelectorError:
		fpvs.subPathValue.(NotificationChannelStateError_FieldPathValue).SetTo(&(*target).Error)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fpvs.Selector()))
	}
}

func (fpvs *NotificationChannelState_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_State)
	fpvs.SetTo(&typedObject)
}

func (fpvs *NotificationChannelState_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *NotificationChannelState_FieldSubPathValue) CompareWith(source *NotificationChannel_State) (int, bool) {
	switch fpvs.Selector() {
	case NotificationChannelState_FieldPathSelectorError:
		return fpvs.subPathValue.(NotificationChannelStateError_FieldPathValue).CompareWith(source.GetError())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fpvs.Selector()))
	}
}

func (fpvs *NotificationChannelState_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*NotificationChannel_State))
}

// NotificationChannelState_FieldPathArrayItemValue allows storing single item in Path-specific values for State according to their type
// Present only for array (repeated) types.
type NotificationChannelState_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	NotificationChannelState_FieldPath
	ContainsValue(*NotificationChannel_State) bool
}

// ParseNotificationChannelState_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseNotificationChannelState_FieldPathArrayItemValue(pathStr, valueStr string) (NotificationChannelState_FieldPathArrayItemValue, error) {
	fp, err := ParseNotificationChannelState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(NotificationChannelState_FieldPathArrayItemValue), nil
}

func MustParseNotificationChannelState_FieldPathArrayItemValue(pathStr, valueStr string) NotificationChannelState_FieldPathArrayItemValue {
	fpaiv, err := ParseNotificationChannelState_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type NotificationChannelState_FieldTerminalPathArrayItemValue struct {
	NotificationChannelState_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelState_FieldPathArrayItemValue = (*NotificationChannelState_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object NotificationChannel_State as interface{}
func (fpaiv *NotificationChannelState_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *NotificationChannelState_FieldTerminalPathArrayItemValue) GetSingle(source *NotificationChannel_State) (interface{}, bool) {
	return nil, false
}

func (fpaiv *NotificationChannelState_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*NotificationChannel_State))
}

// Contains returns a boolean indicating if value that is being held is present in given 'State'
func (fpaiv *NotificationChannelState_FieldTerminalPathArrayItemValue) ContainsValue(source *NotificationChannel_State) bool {
	slice := fpaiv.NotificationChannelState_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type NotificationChannelState_FieldSubPathArrayItemValue struct {
	NotificationChannelState_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *NotificationChannelState_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *NotificationChannelState_FieldSubPathArrayItemValue) AsErrorPathItemValue() (NotificationChannelStateError_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(NotificationChannelStateError_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'State'
func (fpaivs *NotificationChannelState_FieldSubPathArrayItemValue) ContainsValue(source *NotificationChannel_State) bool {
	switch fpaivs.Selector() {
	case NotificationChannelState_FieldPathSelectorError:
		return fpaivs.subPathItemValue.(NotificationChannelStateError_FieldPathArrayItemValue).ContainsValue(source.GetError())
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State: %d", fpaivs.Selector()))
	}
}

// NotificationChannelState_FieldPathArrayOfValues allows storing slice of values for State fields according to their type
type NotificationChannelState_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	NotificationChannelState_FieldPath
}

func ParseNotificationChannelState_FieldPathArrayOfValues(pathStr, valuesStr string) (NotificationChannelState_FieldPathArrayOfValues, error) {
	fp, err := ParseNotificationChannelState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(NotificationChannelState_FieldPathArrayOfValues), nil
}

func MustParseNotificationChannelState_FieldPathArrayOfValues(pathStr, valuesStr string) NotificationChannelState_FieldPathArrayOfValues {
	fpaov, err := ParseNotificationChannelState_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type NotificationChannelState_FieldTerminalPathArrayOfValues struct {
	NotificationChannelState_FieldTerminalPath
	values interface{}
}

var _ NotificationChannelState_FieldPathArrayOfValues = (*NotificationChannelState_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *NotificationChannelState_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case NotificationChannelState_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]NotificationChannel_State_Status) {
			values = append(values, v)
		}
	case NotificationChannelState_FieldPathSelectorError:
		for _, v := range fpaov.values.([]*NotificationChannel_State_Error) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *NotificationChannelState_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]NotificationChannel_State_Status, bool) {
	res, ok := fpaov.values.([]NotificationChannel_State_Status)
	return res, ok
}
func (fpaov *NotificationChannelState_FieldTerminalPathArrayOfValues) AsErrorArrayOfValues() ([]*NotificationChannel_State_Error, bool) {
	res, ok := fpaov.values.([]*NotificationChannel_State_Error)
	return res, ok
}

type NotificationChannelState_FieldSubPathArrayOfValues struct {
	NotificationChannelState_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ NotificationChannelState_FieldPathArrayOfValues = (*NotificationChannelState_FieldSubPathArrayOfValues)(nil)

func (fpsaov *NotificationChannelState_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *NotificationChannelState_FieldSubPathArrayOfValues) AsErrorPathArrayOfValues() (NotificationChannelStateError_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(NotificationChannelStateError_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type NotificationChannelSpecEmail_FieldPath interface {
	gotenobject.FieldPath
	Selector() NotificationChannelSpecEmail_FieldPathSelector
	Get(source *NotificationChannel_Spec_Email) []interface{}
	GetSingle(source *NotificationChannel_Spec_Email) (interface{}, bool)
	ClearValue(item *NotificationChannel_Spec_Email)

	// Those methods build corresponding NotificationChannelSpecEmail_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) NotificationChannelSpecEmail_FieldPathValue
	WithIArrayOfValues(values interface{}) NotificationChannelSpecEmail_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) NotificationChannelSpecEmail_FieldPathArrayItemValue
}

type NotificationChannelSpecEmail_FieldPathSelector int32

const (
	NotificationChannelSpecEmail_FieldPathSelectorAddresses NotificationChannelSpecEmail_FieldPathSelector = 0
)

func (s NotificationChannelSpecEmail_FieldPathSelector) String() string {
	switch s {
	case NotificationChannelSpecEmail_FieldPathSelectorAddresses:
		return "addresses"
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Email: %d", s))
	}
}

func BuildNotificationChannelSpecEmail_FieldPath(fp gotenobject.RawFieldPath) (NotificationChannelSpecEmail_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object NotificationChannel_Spec_Email")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "addresses":
			return &NotificationChannelSpecEmail_FieldTerminalPath{selector: NotificationChannelSpecEmail_FieldPathSelectorAddresses}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object NotificationChannel_Spec_Email", fp)
}

func ParseNotificationChannelSpecEmail_FieldPath(rawField string) (NotificationChannelSpecEmail_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildNotificationChannelSpecEmail_FieldPath(fp)
}

func MustParseNotificationChannelSpecEmail_FieldPath(rawField string) NotificationChannelSpecEmail_FieldPath {
	fp, err := ParseNotificationChannelSpecEmail_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type NotificationChannelSpecEmail_FieldTerminalPath struct {
	selector NotificationChannelSpecEmail_FieldPathSelector
}

var _ NotificationChannelSpecEmail_FieldPath = (*NotificationChannelSpecEmail_FieldTerminalPath)(nil)

func (fp *NotificationChannelSpecEmail_FieldTerminalPath) Selector() NotificationChannelSpecEmail_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *NotificationChannelSpecEmail_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *NotificationChannelSpecEmail_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source NotificationChannel_Spec_Email
func (fp *NotificationChannelSpecEmail_FieldTerminalPath) Get(source *NotificationChannel_Spec_Email) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case NotificationChannelSpecEmail_FieldPathSelectorAddresses:
			for _, value := range source.GetAddresses() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Email: %d", fp.selector))
		}
	}
	return
}

func (fp *NotificationChannelSpecEmail_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*NotificationChannel_Spec_Email))
}

// GetSingle returns value pointed by specific field of from source NotificationChannel_Spec_Email
func (fp *NotificationChannelSpecEmail_FieldTerminalPath) GetSingle(source *NotificationChannel_Spec_Email) (interface{}, bool) {
	switch fp.selector {
	case NotificationChannelSpecEmail_FieldPathSelectorAddresses:
		res := source.GetAddresses()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Email: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecEmail_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*NotificationChannel_Spec_Email))
}

// GetDefault returns a default value of the field type
func (fp *NotificationChannelSpecEmail_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case NotificationChannelSpecEmail_FieldPathSelectorAddresses:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Email: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecEmail_FieldTerminalPath) ClearValue(item *NotificationChannel_Spec_Email) {
	if item != nil {
		switch fp.selector {
		case NotificationChannelSpecEmail_FieldPathSelectorAddresses:
			item.Addresses = nil
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Email: %d", fp.selector))
		}
	}
}

func (fp *NotificationChannelSpecEmail_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*NotificationChannel_Spec_Email))
}

// IsLeaf - whether field path is holds simple value
func (fp *NotificationChannelSpecEmail_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == NotificationChannelSpecEmail_FieldPathSelectorAddresses
}

func (fp *NotificationChannelSpecEmail_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *NotificationChannelSpecEmail_FieldTerminalPath) WithIValue(value interface{}) NotificationChannelSpecEmail_FieldPathValue {
	switch fp.selector {
	case NotificationChannelSpecEmail_FieldPathSelectorAddresses:
		return &NotificationChannelSpecEmail_FieldTerminalPathValue{NotificationChannelSpecEmail_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Email: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecEmail_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *NotificationChannelSpecEmail_FieldTerminalPath) WithIArrayOfValues(values interface{}) NotificationChannelSpecEmail_FieldPathArrayOfValues {
	fpaov := &NotificationChannelSpecEmail_FieldTerminalPathArrayOfValues{NotificationChannelSpecEmail_FieldTerminalPath: *fp}
	switch fp.selector {
	case NotificationChannelSpecEmail_FieldPathSelectorAddresses:
		return &NotificationChannelSpecEmail_FieldTerminalPathArrayOfValues{NotificationChannelSpecEmail_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Email: %d", fp.selector))
	}
	return fpaov
}

func (fp *NotificationChannelSpecEmail_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *NotificationChannelSpecEmail_FieldTerminalPath) WithIArrayItemValue(value interface{}) NotificationChannelSpecEmail_FieldPathArrayItemValue {
	switch fp.selector {
	case NotificationChannelSpecEmail_FieldPathSelectorAddresses:
		return &NotificationChannelSpecEmail_FieldTerminalPathArrayItemValue{NotificationChannelSpecEmail_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Email: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecEmail_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// NotificationChannelSpecEmail_FieldPathValue allows storing values for Email fields according to their type
type NotificationChannelSpecEmail_FieldPathValue interface {
	NotificationChannelSpecEmail_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **NotificationChannel_Spec_Email)
	CompareWith(*NotificationChannel_Spec_Email) (cmp int, comparable bool)
}

func ParseNotificationChannelSpecEmail_FieldPathValue(pathStr, valueStr string) (NotificationChannelSpecEmail_FieldPathValue, error) {
	fp, err := ParseNotificationChannelSpecEmail_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Email field path value from %s: %v", valueStr, err)
	}
	return fpv.(NotificationChannelSpecEmail_FieldPathValue), nil
}

func MustParseNotificationChannelSpecEmail_FieldPathValue(pathStr, valueStr string) NotificationChannelSpecEmail_FieldPathValue {
	fpv, err := ParseNotificationChannelSpecEmail_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type NotificationChannelSpecEmail_FieldTerminalPathValue struct {
	NotificationChannelSpecEmail_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelSpecEmail_FieldPathValue = (*NotificationChannelSpecEmail_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Email' as interface{}
func (fpv *NotificationChannelSpecEmail_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *NotificationChannelSpecEmail_FieldTerminalPathValue) AsAddressesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object Email
func (fpv *NotificationChannelSpecEmail_FieldTerminalPathValue) SetTo(target **NotificationChannel_Spec_Email) {
	if *target == nil {
		*target = new(NotificationChannel_Spec_Email)
	}
	switch fpv.selector {
	case NotificationChannelSpecEmail_FieldPathSelectorAddresses:
		(*target).Addresses = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Email: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelSpecEmail_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_Spec_Email)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'NotificationChannelSpecEmail_FieldTerminalPathValue' with the value under path in 'NotificationChannel_Spec_Email'.
func (fpv *NotificationChannelSpecEmail_FieldTerminalPathValue) CompareWith(source *NotificationChannel_Spec_Email) (int, bool) {
	switch fpv.selector {
	case NotificationChannelSpecEmail_FieldPathSelectorAddresses:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Email: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelSpecEmail_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*NotificationChannel_Spec_Email))
}

// NotificationChannelSpecEmail_FieldPathArrayItemValue allows storing single item in Path-specific values for Email according to their type
// Present only for array (repeated) types.
type NotificationChannelSpecEmail_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	NotificationChannelSpecEmail_FieldPath
	ContainsValue(*NotificationChannel_Spec_Email) bool
}

// ParseNotificationChannelSpecEmail_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseNotificationChannelSpecEmail_FieldPathArrayItemValue(pathStr, valueStr string) (NotificationChannelSpecEmail_FieldPathArrayItemValue, error) {
	fp, err := ParseNotificationChannelSpecEmail_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Email field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(NotificationChannelSpecEmail_FieldPathArrayItemValue), nil
}

func MustParseNotificationChannelSpecEmail_FieldPathArrayItemValue(pathStr, valueStr string) NotificationChannelSpecEmail_FieldPathArrayItemValue {
	fpaiv, err := ParseNotificationChannelSpecEmail_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type NotificationChannelSpecEmail_FieldTerminalPathArrayItemValue struct {
	NotificationChannelSpecEmail_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelSpecEmail_FieldPathArrayItemValue = (*NotificationChannelSpecEmail_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object NotificationChannel_Spec_Email as interface{}
func (fpaiv *NotificationChannelSpecEmail_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *NotificationChannelSpecEmail_FieldTerminalPathArrayItemValue) AsAddressesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *NotificationChannelSpecEmail_FieldTerminalPathArrayItemValue) GetSingle(source *NotificationChannel_Spec_Email) (interface{}, bool) {
	return nil, false
}

func (fpaiv *NotificationChannelSpecEmail_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*NotificationChannel_Spec_Email))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Email'
func (fpaiv *NotificationChannelSpecEmail_FieldTerminalPathArrayItemValue) ContainsValue(source *NotificationChannel_Spec_Email) bool {
	slice := fpaiv.NotificationChannelSpecEmail_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// NotificationChannelSpecEmail_FieldPathArrayOfValues allows storing slice of values for Email fields according to their type
type NotificationChannelSpecEmail_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	NotificationChannelSpecEmail_FieldPath
}

func ParseNotificationChannelSpecEmail_FieldPathArrayOfValues(pathStr, valuesStr string) (NotificationChannelSpecEmail_FieldPathArrayOfValues, error) {
	fp, err := ParseNotificationChannelSpecEmail_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Email field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(NotificationChannelSpecEmail_FieldPathArrayOfValues), nil
}

func MustParseNotificationChannelSpecEmail_FieldPathArrayOfValues(pathStr, valuesStr string) NotificationChannelSpecEmail_FieldPathArrayOfValues {
	fpaov, err := ParseNotificationChannelSpecEmail_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type NotificationChannelSpecEmail_FieldTerminalPathArrayOfValues struct {
	NotificationChannelSpecEmail_FieldTerminalPath
	values interface{}
}

var _ NotificationChannelSpecEmail_FieldPathArrayOfValues = (*NotificationChannelSpecEmail_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *NotificationChannelSpecEmail_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case NotificationChannelSpecEmail_FieldPathSelectorAddresses:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *NotificationChannelSpecEmail_FieldTerminalPathArrayOfValues) AsAddressesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type NotificationChannelSpecSlack_FieldPath interface {
	gotenobject.FieldPath
	Selector() NotificationChannelSpecSlack_FieldPathSelector
	Get(source *NotificationChannel_Spec_Slack) []interface{}
	GetSingle(source *NotificationChannel_Spec_Slack) (interface{}, bool)
	ClearValue(item *NotificationChannel_Spec_Slack)

	// Those methods build corresponding NotificationChannelSpecSlack_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) NotificationChannelSpecSlack_FieldPathValue
	WithIArrayOfValues(values interface{}) NotificationChannelSpecSlack_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) NotificationChannelSpecSlack_FieldPathArrayItemValue
}

type NotificationChannelSpecSlack_FieldPathSelector int32

const (
	NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook NotificationChannelSpecSlack_FieldPathSelector = 0
)

func (s NotificationChannelSpecSlack_FieldPathSelector) String() string {
	switch s {
	case NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook:
		return "incoming_webhook"
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Slack: %d", s))
	}
}

func BuildNotificationChannelSpecSlack_FieldPath(fp gotenobject.RawFieldPath) (NotificationChannelSpecSlack_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object NotificationChannel_Spec_Slack")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "incoming_webhook", "incomingWebhook", "incoming-webhook":
			return &NotificationChannelSpecSlack_FieldTerminalPath{selector: NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object NotificationChannel_Spec_Slack", fp)
}

func ParseNotificationChannelSpecSlack_FieldPath(rawField string) (NotificationChannelSpecSlack_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildNotificationChannelSpecSlack_FieldPath(fp)
}

func MustParseNotificationChannelSpecSlack_FieldPath(rawField string) NotificationChannelSpecSlack_FieldPath {
	fp, err := ParseNotificationChannelSpecSlack_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type NotificationChannelSpecSlack_FieldTerminalPath struct {
	selector NotificationChannelSpecSlack_FieldPathSelector
}

var _ NotificationChannelSpecSlack_FieldPath = (*NotificationChannelSpecSlack_FieldTerminalPath)(nil)

func (fp *NotificationChannelSpecSlack_FieldTerminalPath) Selector() NotificationChannelSpecSlack_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *NotificationChannelSpecSlack_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *NotificationChannelSpecSlack_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source NotificationChannel_Spec_Slack
func (fp *NotificationChannelSpecSlack_FieldTerminalPath) Get(source *NotificationChannel_Spec_Slack) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook:
			values = append(values, source.IncomingWebhook)
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Slack: %d", fp.selector))
		}
	}
	return
}

func (fp *NotificationChannelSpecSlack_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*NotificationChannel_Spec_Slack))
}

// GetSingle returns value pointed by specific field of from source NotificationChannel_Spec_Slack
func (fp *NotificationChannelSpecSlack_FieldTerminalPath) GetSingle(source *NotificationChannel_Spec_Slack) (interface{}, bool) {
	switch fp.selector {
	case NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook:
		return source.GetIncomingWebhook(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Slack: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecSlack_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*NotificationChannel_Spec_Slack))
}

// GetDefault returns a default value of the field type
func (fp *NotificationChannelSpecSlack_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Slack: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecSlack_FieldTerminalPath) ClearValue(item *NotificationChannel_Spec_Slack) {
	if item != nil {
		switch fp.selector {
		case NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook:
			item.IncomingWebhook = ""
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Slack: %d", fp.selector))
		}
	}
}

func (fp *NotificationChannelSpecSlack_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*NotificationChannel_Spec_Slack))
}

// IsLeaf - whether field path is holds simple value
func (fp *NotificationChannelSpecSlack_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook
}

func (fp *NotificationChannelSpecSlack_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *NotificationChannelSpecSlack_FieldTerminalPath) WithIValue(value interface{}) NotificationChannelSpecSlack_FieldPathValue {
	switch fp.selector {
	case NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook:
		return &NotificationChannelSpecSlack_FieldTerminalPathValue{NotificationChannelSpecSlack_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Slack: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecSlack_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *NotificationChannelSpecSlack_FieldTerminalPath) WithIArrayOfValues(values interface{}) NotificationChannelSpecSlack_FieldPathArrayOfValues {
	fpaov := &NotificationChannelSpecSlack_FieldTerminalPathArrayOfValues{NotificationChannelSpecSlack_FieldTerminalPath: *fp}
	switch fp.selector {
	case NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook:
		return &NotificationChannelSpecSlack_FieldTerminalPathArrayOfValues{NotificationChannelSpecSlack_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Slack: %d", fp.selector))
	}
	return fpaov
}

func (fp *NotificationChannelSpecSlack_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *NotificationChannelSpecSlack_FieldTerminalPath) WithIArrayItemValue(value interface{}) NotificationChannelSpecSlack_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Slack: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecSlack_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// NotificationChannelSpecSlack_FieldPathValue allows storing values for Slack fields according to their type
type NotificationChannelSpecSlack_FieldPathValue interface {
	NotificationChannelSpecSlack_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **NotificationChannel_Spec_Slack)
	CompareWith(*NotificationChannel_Spec_Slack) (cmp int, comparable bool)
}

func ParseNotificationChannelSpecSlack_FieldPathValue(pathStr, valueStr string) (NotificationChannelSpecSlack_FieldPathValue, error) {
	fp, err := ParseNotificationChannelSpecSlack_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Slack field path value from %s: %v", valueStr, err)
	}
	return fpv.(NotificationChannelSpecSlack_FieldPathValue), nil
}

func MustParseNotificationChannelSpecSlack_FieldPathValue(pathStr, valueStr string) NotificationChannelSpecSlack_FieldPathValue {
	fpv, err := ParseNotificationChannelSpecSlack_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type NotificationChannelSpecSlack_FieldTerminalPathValue struct {
	NotificationChannelSpecSlack_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelSpecSlack_FieldPathValue = (*NotificationChannelSpecSlack_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Slack' as interface{}
func (fpv *NotificationChannelSpecSlack_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *NotificationChannelSpecSlack_FieldTerminalPathValue) AsIncomingWebhookValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Slack
func (fpv *NotificationChannelSpecSlack_FieldTerminalPathValue) SetTo(target **NotificationChannel_Spec_Slack) {
	if *target == nil {
		*target = new(NotificationChannel_Spec_Slack)
	}
	switch fpv.selector {
	case NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook:
		(*target).IncomingWebhook = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Slack: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelSpecSlack_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_Spec_Slack)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'NotificationChannelSpecSlack_FieldTerminalPathValue' with the value under path in 'NotificationChannel_Spec_Slack'.
func (fpv *NotificationChannelSpecSlack_FieldTerminalPathValue) CompareWith(source *NotificationChannel_Spec_Slack) (int, bool) {
	switch fpv.selector {
	case NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook:
		leftValue := fpv.value.(string)
		rightValue := source.GetIncomingWebhook()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Slack: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelSpecSlack_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*NotificationChannel_Spec_Slack))
}

// NotificationChannelSpecSlack_FieldPathArrayItemValue allows storing single item in Path-specific values for Slack according to their type
// Present only for array (repeated) types.
type NotificationChannelSpecSlack_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	NotificationChannelSpecSlack_FieldPath
	ContainsValue(*NotificationChannel_Spec_Slack) bool
}

// ParseNotificationChannelSpecSlack_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseNotificationChannelSpecSlack_FieldPathArrayItemValue(pathStr, valueStr string) (NotificationChannelSpecSlack_FieldPathArrayItemValue, error) {
	fp, err := ParseNotificationChannelSpecSlack_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Slack field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(NotificationChannelSpecSlack_FieldPathArrayItemValue), nil
}

func MustParseNotificationChannelSpecSlack_FieldPathArrayItemValue(pathStr, valueStr string) NotificationChannelSpecSlack_FieldPathArrayItemValue {
	fpaiv, err := ParseNotificationChannelSpecSlack_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type NotificationChannelSpecSlack_FieldTerminalPathArrayItemValue struct {
	NotificationChannelSpecSlack_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelSpecSlack_FieldPathArrayItemValue = (*NotificationChannelSpecSlack_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object NotificationChannel_Spec_Slack as interface{}
func (fpaiv *NotificationChannelSpecSlack_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *NotificationChannelSpecSlack_FieldTerminalPathArrayItemValue) GetSingle(source *NotificationChannel_Spec_Slack) (interface{}, bool) {
	return nil, false
}

func (fpaiv *NotificationChannelSpecSlack_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*NotificationChannel_Spec_Slack))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Slack'
func (fpaiv *NotificationChannelSpecSlack_FieldTerminalPathArrayItemValue) ContainsValue(source *NotificationChannel_Spec_Slack) bool {
	slice := fpaiv.NotificationChannelSpecSlack_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// NotificationChannelSpecSlack_FieldPathArrayOfValues allows storing slice of values for Slack fields according to their type
type NotificationChannelSpecSlack_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	NotificationChannelSpecSlack_FieldPath
}

func ParseNotificationChannelSpecSlack_FieldPathArrayOfValues(pathStr, valuesStr string) (NotificationChannelSpecSlack_FieldPathArrayOfValues, error) {
	fp, err := ParseNotificationChannelSpecSlack_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Slack field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(NotificationChannelSpecSlack_FieldPathArrayOfValues), nil
}

func MustParseNotificationChannelSpecSlack_FieldPathArrayOfValues(pathStr, valuesStr string) NotificationChannelSpecSlack_FieldPathArrayOfValues {
	fpaov, err := ParseNotificationChannelSpecSlack_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type NotificationChannelSpecSlack_FieldTerminalPathArrayOfValues struct {
	NotificationChannelSpecSlack_FieldTerminalPath
	values interface{}
}

var _ NotificationChannelSpecSlack_FieldPathArrayOfValues = (*NotificationChannelSpecSlack_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *NotificationChannelSpecSlack_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *NotificationChannelSpecSlack_FieldTerminalPathArrayOfValues) AsIncomingWebhookArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type NotificationChannelSpecPagerDuty_FieldPath interface {
	gotenobject.FieldPath
	Selector() NotificationChannelSpecPagerDuty_FieldPathSelector
	Get(source *NotificationChannel_Spec_PagerDuty) []interface{}
	GetSingle(source *NotificationChannel_Spec_PagerDuty) (interface{}, bool)
	ClearValue(item *NotificationChannel_Spec_PagerDuty)

	// Those methods build corresponding NotificationChannelSpecPagerDuty_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) NotificationChannelSpecPagerDuty_FieldPathValue
	WithIArrayOfValues(values interface{}) NotificationChannelSpecPagerDuty_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) NotificationChannelSpecPagerDuty_FieldPathArrayItemValue
}

type NotificationChannelSpecPagerDuty_FieldPathSelector int32

const (
	NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey NotificationChannelSpecPagerDuty_FieldPathSelector = 0
)

func (s NotificationChannelSpecPagerDuty_FieldPathSelector) String() string {
	switch s {
	case NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey:
		return "service_key"
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_PagerDuty: %d", s))
	}
}

func BuildNotificationChannelSpecPagerDuty_FieldPath(fp gotenobject.RawFieldPath) (NotificationChannelSpecPagerDuty_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object NotificationChannel_Spec_PagerDuty")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "service_key", "serviceKey", "service-key":
			return &NotificationChannelSpecPagerDuty_FieldTerminalPath{selector: NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object NotificationChannel_Spec_PagerDuty", fp)
}

func ParseNotificationChannelSpecPagerDuty_FieldPath(rawField string) (NotificationChannelSpecPagerDuty_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildNotificationChannelSpecPagerDuty_FieldPath(fp)
}

func MustParseNotificationChannelSpecPagerDuty_FieldPath(rawField string) NotificationChannelSpecPagerDuty_FieldPath {
	fp, err := ParseNotificationChannelSpecPagerDuty_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type NotificationChannelSpecPagerDuty_FieldTerminalPath struct {
	selector NotificationChannelSpecPagerDuty_FieldPathSelector
}

var _ NotificationChannelSpecPagerDuty_FieldPath = (*NotificationChannelSpecPagerDuty_FieldTerminalPath)(nil)

func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) Selector() NotificationChannelSpecPagerDuty_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source NotificationChannel_Spec_PagerDuty
func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) Get(source *NotificationChannel_Spec_PagerDuty) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey:
			values = append(values, source.ServiceKey)
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_PagerDuty: %d", fp.selector))
		}
	}
	return
}

func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*NotificationChannel_Spec_PagerDuty))
}

// GetSingle returns value pointed by specific field of from source NotificationChannel_Spec_PagerDuty
func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) GetSingle(source *NotificationChannel_Spec_PagerDuty) (interface{}, bool) {
	switch fp.selector {
	case NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey:
		return source.GetServiceKey(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_PagerDuty: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*NotificationChannel_Spec_PagerDuty))
}

// GetDefault returns a default value of the field type
func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_PagerDuty: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) ClearValue(item *NotificationChannel_Spec_PagerDuty) {
	if item != nil {
		switch fp.selector {
		case NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey:
			item.ServiceKey = ""
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_PagerDuty: %d", fp.selector))
		}
	}
}

func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*NotificationChannel_Spec_PagerDuty))
}

// IsLeaf - whether field path is holds simple value
func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey
}

func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) WithIValue(value interface{}) NotificationChannelSpecPagerDuty_FieldPathValue {
	switch fp.selector {
	case NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey:
		return &NotificationChannelSpecPagerDuty_FieldTerminalPathValue{NotificationChannelSpecPagerDuty_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_PagerDuty: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) WithIArrayOfValues(values interface{}) NotificationChannelSpecPagerDuty_FieldPathArrayOfValues {
	fpaov := &NotificationChannelSpecPagerDuty_FieldTerminalPathArrayOfValues{NotificationChannelSpecPagerDuty_FieldTerminalPath: *fp}
	switch fp.selector {
	case NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey:
		return &NotificationChannelSpecPagerDuty_FieldTerminalPathArrayOfValues{NotificationChannelSpecPagerDuty_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_PagerDuty: %d", fp.selector))
	}
	return fpaov
}

func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) WithIArrayItemValue(value interface{}) NotificationChannelSpecPagerDuty_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_PagerDuty: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecPagerDuty_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// NotificationChannelSpecPagerDuty_FieldPathValue allows storing values for PagerDuty fields according to their type
type NotificationChannelSpecPagerDuty_FieldPathValue interface {
	NotificationChannelSpecPagerDuty_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **NotificationChannel_Spec_PagerDuty)
	CompareWith(*NotificationChannel_Spec_PagerDuty) (cmp int, comparable bool)
}

func ParseNotificationChannelSpecPagerDuty_FieldPathValue(pathStr, valueStr string) (NotificationChannelSpecPagerDuty_FieldPathValue, error) {
	fp, err := ParseNotificationChannelSpecPagerDuty_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PagerDuty field path value from %s: %v", valueStr, err)
	}
	return fpv.(NotificationChannelSpecPagerDuty_FieldPathValue), nil
}

func MustParseNotificationChannelSpecPagerDuty_FieldPathValue(pathStr, valueStr string) NotificationChannelSpecPagerDuty_FieldPathValue {
	fpv, err := ParseNotificationChannelSpecPagerDuty_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type NotificationChannelSpecPagerDuty_FieldTerminalPathValue struct {
	NotificationChannelSpecPagerDuty_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelSpecPagerDuty_FieldPathValue = (*NotificationChannelSpecPagerDuty_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PagerDuty' as interface{}
func (fpv *NotificationChannelSpecPagerDuty_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *NotificationChannelSpecPagerDuty_FieldTerminalPathValue) AsServiceKeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object PagerDuty
func (fpv *NotificationChannelSpecPagerDuty_FieldTerminalPathValue) SetTo(target **NotificationChannel_Spec_PagerDuty) {
	if *target == nil {
		*target = new(NotificationChannel_Spec_PagerDuty)
	}
	switch fpv.selector {
	case NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey:
		(*target).ServiceKey = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_PagerDuty: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelSpecPagerDuty_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_Spec_PagerDuty)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'NotificationChannelSpecPagerDuty_FieldTerminalPathValue' with the value under path in 'NotificationChannel_Spec_PagerDuty'.
func (fpv *NotificationChannelSpecPagerDuty_FieldTerminalPathValue) CompareWith(source *NotificationChannel_Spec_PagerDuty) (int, bool) {
	switch fpv.selector {
	case NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey:
		leftValue := fpv.value.(string)
		rightValue := source.GetServiceKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_PagerDuty: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelSpecPagerDuty_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*NotificationChannel_Spec_PagerDuty))
}

// NotificationChannelSpecPagerDuty_FieldPathArrayItemValue allows storing single item in Path-specific values for PagerDuty according to their type
// Present only for array (repeated) types.
type NotificationChannelSpecPagerDuty_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	NotificationChannelSpecPagerDuty_FieldPath
	ContainsValue(*NotificationChannel_Spec_PagerDuty) bool
}

// ParseNotificationChannelSpecPagerDuty_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseNotificationChannelSpecPagerDuty_FieldPathArrayItemValue(pathStr, valueStr string) (NotificationChannelSpecPagerDuty_FieldPathArrayItemValue, error) {
	fp, err := ParseNotificationChannelSpecPagerDuty_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PagerDuty field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(NotificationChannelSpecPagerDuty_FieldPathArrayItemValue), nil
}

func MustParseNotificationChannelSpecPagerDuty_FieldPathArrayItemValue(pathStr, valueStr string) NotificationChannelSpecPagerDuty_FieldPathArrayItemValue {
	fpaiv, err := ParseNotificationChannelSpecPagerDuty_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type NotificationChannelSpecPagerDuty_FieldTerminalPathArrayItemValue struct {
	NotificationChannelSpecPagerDuty_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelSpecPagerDuty_FieldPathArrayItemValue = (*NotificationChannelSpecPagerDuty_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object NotificationChannel_Spec_PagerDuty as interface{}
func (fpaiv *NotificationChannelSpecPagerDuty_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *NotificationChannelSpecPagerDuty_FieldTerminalPathArrayItemValue) GetSingle(source *NotificationChannel_Spec_PagerDuty) (interface{}, bool) {
	return nil, false
}

func (fpaiv *NotificationChannelSpecPagerDuty_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*NotificationChannel_Spec_PagerDuty))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PagerDuty'
func (fpaiv *NotificationChannelSpecPagerDuty_FieldTerminalPathArrayItemValue) ContainsValue(source *NotificationChannel_Spec_PagerDuty) bool {
	slice := fpaiv.NotificationChannelSpecPagerDuty_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// NotificationChannelSpecPagerDuty_FieldPathArrayOfValues allows storing slice of values for PagerDuty fields according to their type
type NotificationChannelSpecPagerDuty_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	NotificationChannelSpecPagerDuty_FieldPath
}

func ParseNotificationChannelSpecPagerDuty_FieldPathArrayOfValues(pathStr, valuesStr string) (NotificationChannelSpecPagerDuty_FieldPathArrayOfValues, error) {
	fp, err := ParseNotificationChannelSpecPagerDuty_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PagerDuty field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(NotificationChannelSpecPagerDuty_FieldPathArrayOfValues), nil
}

func MustParseNotificationChannelSpecPagerDuty_FieldPathArrayOfValues(pathStr, valuesStr string) NotificationChannelSpecPagerDuty_FieldPathArrayOfValues {
	fpaov, err := ParseNotificationChannelSpecPagerDuty_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type NotificationChannelSpecPagerDuty_FieldTerminalPathArrayOfValues struct {
	NotificationChannelSpecPagerDuty_FieldTerminalPath
	values interface{}
}

var _ NotificationChannelSpecPagerDuty_FieldPathArrayOfValues = (*NotificationChannelSpecPagerDuty_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *NotificationChannelSpecPagerDuty_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *NotificationChannelSpecPagerDuty_FieldTerminalPathArrayOfValues) AsServiceKeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type NotificationChannelSpecWebhook_FieldPath interface {
	gotenobject.FieldPath
	Selector() NotificationChannelSpecWebhook_FieldPathSelector
	Get(source *NotificationChannel_Spec_Webhook) []interface{}
	GetSingle(source *NotificationChannel_Spec_Webhook) (interface{}, bool)
	ClearValue(item *NotificationChannel_Spec_Webhook)

	// Those methods build corresponding NotificationChannelSpecWebhook_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) NotificationChannelSpecWebhook_FieldPathValue
	WithIArrayOfValues(values interface{}) NotificationChannelSpecWebhook_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) NotificationChannelSpecWebhook_FieldPathArrayItemValue
}

type NotificationChannelSpecWebhook_FieldPathSelector int32

const (
	NotificationChannelSpecWebhook_FieldPathSelectorUrl     NotificationChannelSpecWebhook_FieldPathSelector = 0
	NotificationChannelSpecWebhook_FieldPathSelectorHeaders NotificationChannelSpecWebhook_FieldPathSelector = 1
)

func (s NotificationChannelSpecWebhook_FieldPathSelector) String() string {
	switch s {
	case NotificationChannelSpecWebhook_FieldPathSelectorUrl:
		return "url"
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		return "headers"
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", s))
	}
}

func BuildNotificationChannelSpecWebhook_FieldPath(fp gotenobject.RawFieldPath) (NotificationChannelSpecWebhook_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object NotificationChannel_Spec_Webhook")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "url":
			return &NotificationChannelSpecWebhook_FieldTerminalPath{selector: NotificationChannelSpecWebhook_FieldPathSelectorUrl}, nil
		case "headers":
			return &NotificationChannelSpecWebhook_FieldTerminalPath{selector: NotificationChannelSpecWebhook_FieldPathSelectorHeaders}, nil
		}
	} else {
		switch fp[0] {
		case "headers":
			if subpath, err := BuildNotificationChannelSpecWebhookHeader_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &NotificationChannelSpecWebhook_FieldSubPath{selector: NotificationChannelSpecWebhook_FieldPathSelectorHeaders, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object NotificationChannel_Spec_Webhook", fp)
}

func ParseNotificationChannelSpecWebhook_FieldPath(rawField string) (NotificationChannelSpecWebhook_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildNotificationChannelSpecWebhook_FieldPath(fp)
}

func MustParseNotificationChannelSpecWebhook_FieldPath(rawField string) NotificationChannelSpecWebhook_FieldPath {
	fp, err := ParseNotificationChannelSpecWebhook_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type NotificationChannelSpecWebhook_FieldTerminalPath struct {
	selector NotificationChannelSpecWebhook_FieldPathSelector
}

var _ NotificationChannelSpecWebhook_FieldPath = (*NotificationChannelSpecWebhook_FieldTerminalPath)(nil)

func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) Selector() NotificationChannelSpecWebhook_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source NotificationChannel_Spec_Webhook
func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) Get(source *NotificationChannel_Spec_Webhook) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case NotificationChannelSpecWebhook_FieldPathSelectorUrl:
			values = append(values, source.Url)
		case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
			for _, value := range source.GetHeaders() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fp.selector))
		}
	}
	return
}

func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*NotificationChannel_Spec_Webhook))
}

// GetSingle returns value pointed by specific field of from source NotificationChannel_Spec_Webhook
func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) GetSingle(source *NotificationChannel_Spec_Webhook) (interface{}, bool) {
	switch fp.selector {
	case NotificationChannelSpecWebhook_FieldPathSelectorUrl:
		return source.GetUrl(), source != nil
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		res := source.GetHeaders()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*NotificationChannel_Spec_Webhook))
}

// GetDefault returns a default value of the field type
func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case NotificationChannelSpecWebhook_FieldPathSelectorUrl:
		return ""
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		return ([]*NotificationChannel_Spec_Webhook_Header)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) ClearValue(item *NotificationChannel_Spec_Webhook) {
	if item != nil {
		switch fp.selector {
		case NotificationChannelSpecWebhook_FieldPathSelectorUrl:
			item.Url = ""
		case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
			item.Headers = nil
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fp.selector))
		}
	}
}

func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*NotificationChannel_Spec_Webhook))
}

// IsLeaf - whether field path is holds simple value
func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == NotificationChannelSpecWebhook_FieldPathSelectorUrl
}

func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) WithIValue(value interface{}) NotificationChannelSpecWebhook_FieldPathValue {
	switch fp.selector {
	case NotificationChannelSpecWebhook_FieldPathSelectorUrl:
		return &NotificationChannelSpecWebhook_FieldTerminalPathValue{NotificationChannelSpecWebhook_FieldTerminalPath: *fp, value: value.(string)}
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		return &NotificationChannelSpecWebhook_FieldTerminalPathValue{NotificationChannelSpecWebhook_FieldTerminalPath: *fp, value: value.([]*NotificationChannel_Spec_Webhook_Header)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) WithIArrayOfValues(values interface{}) NotificationChannelSpecWebhook_FieldPathArrayOfValues {
	fpaov := &NotificationChannelSpecWebhook_FieldTerminalPathArrayOfValues{NotificationChannelSpecWebhook_FieldTerminalPath: *fp}
	switch fp.selector {
	case NotificationChannelSpecWebhook_FieldPathSelectorUrl:
		return &NotificationChannelSpecWebhook_FieldTerminalPathArrayOfValues{NotificationChannelSpecWebhook_FieldTerminalPath: *fp, values: values.([]string)}
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		return &NotificationChannelSpecWebhook_FieldTerminalPathArrayOfValues{NotificationChannelSpecWebhook_FieldTerminalPath: *fp, values: values.([][]*NotificationChannel_Spec_Webhook_Header)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fp.selector))
	}
	return fpaov
}

func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) WithIArrayItemValue(value interface{}) NotificationChannelSpecWebhook_FieldPathArrayItemValue {
	switch fp.selector {
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		return &NotificationChannelSpecWebhook_FieldTerminalPathArrayItemValue{NotificationChannelSpecWebhook_FieldTerminalPath: *fp, value: value.(*NotificationChannel_Spec_Webhook_Header)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecWebhook_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type NotificationChannelSpecWebhook_FieldSubPath struct {
	selector NotificationChannelSpecWebhook_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ NotificationChannelSpecWebhook_FieldPath = (*NotificationChannelSpecWebhook_FieldSubPath)(nil)

func (fps *NotificationChannelSpecWebhook_FieldSubPath) Selector() NotificationChannelSpecWebhook_FieldPathSelector {
	return fps.selector
}
func (fps *NotificationChannelSpecWebhook_FieldSubPath) AsHeadersSubPath() (NotificationChannelSpecWebhookHeader_FieldPath, bool) {
	res, ok := fps.subPath.(NotificationChannelSpecWebhookHeader_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *NotificationChannelSpecWebhook_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *NotificationChannelSpecWebhook_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source NotificationChannel_Spec_Webhook
func (fps *NotificationChannelSpecWebhook_FieldSubPath) Get(source *NotificationChannel_Spec_Webhook) (values []interface{}) {
	switch fps.selector {
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		for _, item := range source.GetHeaders() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fps.selector))
	}
	return
}

func (fps *NotificationChannelSpecWebhook_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*NotificationChannel_Spec_Webhook))
}

// GetSingle returns value of selected field from source NotificationChannel_Spec_Webhook
func (fps *NotificationChannelSpecWebhook_FieldSubPath) GetSingle(source *NotificationChannel_Spec_Webhook) (interface{}, bool) {
	switch fps.selector {
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		if len(source.GetHeaders()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetHeaders()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fps.selector))
	}
}

func (fps *NotificationChannelSpecWebhook_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*NotificationChannel_Spec_Webhook))
}

// GetDefault returns a default value of the field type
func (fps *NotificationChannelSpecWebhook_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *NotificationChannelSpecWebhook_FieldSubPath) ClearValue(item *NotificationChannel_Spec_Webhook) {
	if item != nil {
		switch fps.selector {
		case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
			for _, subItem := range item.Headers {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fps.selector))
		}
	}
}

func (fps *NotificationChannelSpecWebhook_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*NotificationChannel_Spec_Webhook))
}

// IsLeaf - whether field path is holds simple value
func (fps *NotificationChannelSpecWebhook_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *NotificationChannelSpecWebhook_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&NotificationChannelSpecWebhook_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *NotificationChannelSpecWebhook_FieldSubPath) WithIValue(value interface{}) NotificationChannelSpecWebhook_FieldPathValue {
	return &NotificationChannelSpecWebhook_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *NotificationChannelSpecWebhook_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *NotificationChannelSpecWebhook_FieldSubPath) WithIArrayOfValues(values interface{}) NotificationChannelSpecWebhook_FieldPathArrayOfValues {
	return &NotificationChannelSpecWebhook_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *NotificationChannelSpecWebhook_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *NotificationChannelSpecWebhook_FieldSubPath) WithIArrayItemValue(value interface{}) NotificationChannelSpecWebhook_FieldPathArrayItemValue {
	return &NotificationChannelSpecWebhook_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *NotificationChannelSpecWebhook_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// NotificationChannelSpecWebhook_FieldPathValue allows storing values for Webhook fields according to their type
type NotificationChannelSpecWebhook_FieldPathValue interface {
	NotificationChannelSpecWebhook_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **NotificationChannel_Spec_Webhook)
	CompareWith(*NotificationChannel_Spec_Webhook) (cmp int, comparable bool)
}

func ParseNotificationChannelSpecWebhook_FieldPathValue(pathStr, valueStr string) (NotificationChannelSpecWebhook_FieldPathValue, error) {
	fp, err := ParseNotificationChannelSpecWebhook_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Webhook field path value from %s: %v", valueStr, err)
	}
	return fpv.(NotificationChannelSpecWebhook_FieldPathValue), nil
}

func MustParseNotificationChannelSpecWebhook_FieldPathValue(pathStr, valueStr string) NotificationChannelSpecWebhook_FieldPathValue {
	fpv, err := ParseNotificationChannelSpecWebhook_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type NotificationChannelSpecWebhook_FieldTerminalPathValue struct {
	NotificationChannelSpecWebhook_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelSpecWebhook_FieldPathValue = (*NotificationChannelSpecWebhook_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Webhook' as interface{}
func (fpv *NotificationChannelSpecWebhook_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *NotificationChannelSpecWebhook_FieldTerminalPathValue) AsUrlValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *NotificationChannelSpecWebhook_FieldTerminalPathValue) AsHeadersValue() ([]*NotificationChannel_Spec_Webhook_Header, bool) {
	res, ok := fpv.value.([]*NotificationChannel_Spec_Webhook_Header)
	return res, ok
}

// SetTo stores value for selected field for object Webhook
func (fpv *NotificationChannelSpecWebhook_FieldTerminalPathValue) SetTo(target **NotificationChannel_Spec_Webhook) {
	if *target == nil {
		*target = new(NotificationChannel_Spec_Webhook)
	}
	switch fpv.selector {
	case NotificationChannelSpecWebhook_FieldPathSelectorUrl:
		(*target).Url = fpv.value.(string)
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		(*target).Headers = fpv.value.([]*NotificationChannel_Spec_Webhook_Header)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelSpecWebhook_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_Spec_Webhook)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'NotificationChannelSpecWebhook_FieldTerminalPathValue' with the value under path in 'NotificationChannel_Spec_Webhook'.
func (fpv *NotificationChannelSpecWebhook_FieldTerminalPathValue) CompareWith(source *NotificationChannel_Spec_Webhook) (int, bool) {
	switch fpv.selector {
	case NotificationChannelSpecWebhook_FieldPathSelectorUrl:
		leftValue := fpv.value.(string)
		rightValue := source.GetUrl()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelSpecWebhook_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*NotificationChannel_Spec_Webhook))
}

type NotificationChannelSpecWebhook_FieldSubPathValue struct {
	NotificationChannelSpecWebhook_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ NotificationChannelSpecWebhook_FieldPathValue = (*NotificationChannelSpecWebhook_FieldSubPathValue)(nil)

func (fpvs *NotificationChannelSpecWebhook_FieldSubPathValue) AsHeadersPathValue() (NotificationChannelSpecWebhookHeader_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(NotificationChannelSpecWebhookHeader_FieldPathValue)
	return res, ok
}

func (fpvs *NotificationChannelSpecWebhook_FieldSubPathValue) SetTo(target **NotificationChannel_Spec_Webhook) {
	if *target == nil {
		*target = new(NotificationChannel_Spec_Webhook)
	}
	switch fpvs.Selector() {
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fpvs.Selector()))
	}
}

func (fpvs *NotificationChannelSpecWebhook_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_Spec_Webhook)
	fpvs.SetTo(&typedObject)
}

func (fpvs *NotificationChannelSpecWebhook_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *NotificationChannelSpecWebhook_FieldSubPathValue) CompareWith(source *NotificationChannel_Spec_Webhook) (int, bool) {
	switch fpvs.Selector() {
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fpvs.Selector()))
	}
}

func (fpvs *NotificationChannelSpecWebhook_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*NotificationChannel_Spec_Webhook))
}

// NotificationChannelSpecWebhook_FieldPathArrayItemValue allows storing single item in Path-specific values for Webhook according to their type
// Present only for array (repeated) types.
type NotificationChannelSpecWebhook_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	NotificationChannelSpecWebhook_FieldPath
	ContainsValue(*NotificationChannel_Spec_Webhook) bool
}

// ParseNotificationChannelSpecWebhook_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseNotificationChannelSpecWebhook_FieldPathArrayItemValue(pathStr, valueStr string) (NotificationChannelSpecWebhook_FieldPathArrayItemValue, error) {
	fp, err := ParseNotificationChannelSpecWebhook_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Webhook field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(NotificationChannelSpecWebhook_FieldPathArrayItemValue), nil
}

func MustParseNotificationChannelSpecWebhook_FieldPathArrayItemValue(pathStr, valueStr string) NotificationChannelSpecWebhook_FieldPathArrayItemValue {
	fpaiv, err := ParseNotificationChannelSpecWebhook_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type NotificationChannelSpecWebhook_FieldTerminalPathArrayItemValue struct {
	NotificationChannelSpecWebhook_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelSpecWebhook_FieldPathArrayItemValue = (*NotificationChannelSpecWebhook_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object NotificationChannel_Spec_Webhook as interface{}
func (fpaiv *NotificationChannelSpecWebhook_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *NotificationChannelSpecWebhook_FieldTerminalPathArrayItemValue) AsHeadersItemValue() (*NotificationChannel_Spec_Webhook_Header, bool) {
	res, ok := fpaiv.value.(*NotificationChannel_Spec_Webhook_Header)
	return res, ok
}

func (fpaiv *NotificationChannelSpecWebhook_FieldTerminalPathArrayItemValue) GetSingle(source *NotificationChannel_Spec_Webhook) (interface{}, bool) {
	return nil, false
}

func (fpaiv *NotificationChannelSpecWebhook_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*NotificationChannel_Spec_Webhook))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Webhook'
func (fpaiv *NotificationChannelSpecWebhook_FieldTerminalPathArrayItemValue) ContainsValue(source *NotificationChannel_Spec_Webhook) bool {
	slice := fpaiv.NotificationChannelSpecWebhook_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type NotificationChannelSpecWebhook_FieldSubPathArrayItemValue struct {
	NotificationChannelSpecWebhook_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *NotificationChannelSpecWebhook_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *NotificationChannelSpecWebhook_FieldSubPathArrayItemValue) AsHeadersPathItemValue() (NotificationChannelSpecWebhookHeader_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(NotificationChannelSpecWebhookHeader_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Webhook'
func (fpaivs *NotificationChannelSpecWebhook_FieldSubPathArrayItemValue) ContainsValue(source *NotificationChannel_Spec_Webhook) bool {
	switch fpaivs.Selector() {
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook: %d", fpaivs.Selector()))
	}
}

// NotificationChannelSpecWebhook_FieldPathArrayOfValues allows storing slice of values for Webhook fields according to their type
type NotificationChannelSpecWebhook_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	NotificationChannelSpecWebhook_FieldPath
}

func ParseNotificationChannelSpecWebhook_FieldPathArrayOfValues(pathStr, valuesStr string) (NotificationChannelSpecWebhook_FieldPathArrayOfValues, error) {
	fp, err := ParseNotificationChannelSpecWebhook_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Webhook field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(NotificationChannelSpecWebhook_FieldPathArrayOfValues), nil
}

func MustParseNotificationChannelSpecWebhook_FieldPathArrayOfValues(pathStr, valuesStr string) NotificationChannelSpecWebhook_FieldPathArrayOfValues {
	fpaov, err := ParseNotificationChannelSpecWebhook_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type NotificationChannelSpecWebhook_FieldTerminalPathArrayOfValues struct {
	NotificationChannelSpecWebhook_FieldTerminalPath
	values interface{}
}

var _ NotificationChannelSpecWebhook_FieldPathArrayOfValues = (*NotificationChannelSpecWebhook_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *NotificationChannelSpecWebhook_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case NotificationChannelSpecWebhook_FieldPathSelectorUrl:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case NotificationChannelSpecWebhook_FieldPathSelectorHeaders:
		for _, v := range fpaov.values.([][]*NotificationChannel_Spec_Webhook_Header) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *NotificationChannelSpecWebhook_FieldTerminalPathArrayOfValues) AsUrlArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *NotificationChannelSpecWebhook_FieldTerminalPathArrayOfValues) AsHeadersArrayOfValues() ([][]*NotificationChannel_Spec_Webhook_Header, bool) {
	res, ok := fpaov.values.([][]*NotificationChannel_Spec_Webhook_Header)
	return res, ok
}

type NotificationChannelSpecWebhook_FieldSubPathArrayOfValues struct {
	NotificationChannelSpecWebhook_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ NotificationChannelSpecWebhook_FieldPathArrayOfValues = (*NotificationChannelSpecWebhook_FieldSubPathArrayOfValues)(nil)

func (fpsaov *NotificationChannelSpecWebhook_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *NotificationChannelSpecWebhook_FieldSubPathArrayOfValues) AsHeadersPathArrayOfValues() (NotificationChannelSpecWebhookHeader_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(NotificationChannelSpecWebhookHeader_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type NotificationChannelSpecWebhookHeader_FieldPath interface {
	gotenobject.FieldPath
	Selector() NotificationChannelSpecWebhookHeader_FieldPathSelector
	Get(source *NotificationChannel_Spec_Webhook_Header) []interface{}
	GetSingle(source *NotificationChannel_Spec_Webhook_Header) (interface{}, bool)
	ClearValue(item *NotificationChannel_Spec_Webhook_Header)

	// Those methods build corresponding NotificationChannelSpecWebhookHeader_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) NotificationChannelSpecWebhookHeader_FieldPathValue
	WithIArrayOfValues(values interface{}) NotificationChannelSpecWebhookHeader_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) NotificationChannelSpecWebhookHeader_FieldPathArrayItemValue
}

type NotificationChannelSpecWebhookHeader_FieldPathSelector int32

const (
	NotificationChannelSpecWebhookHeader_FieldPathSelectorKey   NotificationChannelSpecWebhookHeader_FieldPathSelector = 0
	NotificationChannelSpecWebhookHeader_FieldPathSelectorValue NotificationChannelSpecWebhookHeader_FieldPathSelector = 1
)

func (s NotificationChannelSpecWebhookHeader_FieldPathSelector) String() string {
	switch s {
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorKey:
		return "key"
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorValue:
		return "value"
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook_Header: %d", s))
	}
}

func BuildNotificationChannelSpecWebhookHeader_FieldPath(fp gotenobject.RawFieldPath) (NotificationChannelSpecWebhookHeader_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object NotificationChannel_Spec_Webhook_Header")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "key":
			return &NotificationChannelSpecWebhookHeader_FieldTerminalPath{selector: NotificationChannelSpecWebhookHeader_FieldPathSelectorKey}, nil
		case "value":
			return &NotificationChannelSpecWebhookHeader_FieldTerminalPath{selector: NotificationChannelSpecWebhookHeader_FieldPathSelectorValue}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object NotificationChannel_Spec_Webhook_Header", fp)
}

func ParseNotificationChannelSpecWebhookHeader_FieldPath(rawField string) (NotificationChannelSpecWebhookHeader_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildNotificationChannelSpecWebhookHeader_FieldPath(fp)
}

func MustParseNotificationChannelSpecWebhookHeader_FieldPath(rawField string) NotificationChannelSpecWebhookHeader_FieldPath {
	fp, err := ParseNotificationChannelSpecWebhookHeader_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type NotificationChannelSpecWebhookHeader_FieldTerminalPath struct {
	selector NotificationChannelSpecWebhookHeader_FieldPathSelector
}

var _ NotificationChannelSpecWebhookHeader_FieldPath = (*NotificationChannelSpecWebhookHeader_FieldTerminalPath)(nil)

func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) Selector() NotificationChannelSpecWebhookHeader_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source NotificationChannel_Spec_Webhook_Header
func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) Get(source *NotificationChannel_Spec_Webhook_Header) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case NotificationChannelSpecWebhookHeader_FieldPathSelectorKey:
			values = append(values, source.Key)
		case NotificationChannelSpecWebhookHeader_FieldPathSelectorValue:
			values = append(values, source.Value)
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook_Header: %d", fp.selector))
		}
	}
	return
}

func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*NotificationChannel_Spec_Webhook_Header))
}

// GetSingle returns value pointed by specific field of from source NotificationChannel_Spec_Webhook_Header
func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) GetSingle(source *NotificationChannel_Spec_Webhook_Header) (interface{}, bool) {
	switch fp.selector {
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorKey:
		return source.GetKey(), source != nil
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorValue:
		return source.GetValue(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook_Header: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*NotificationChannel_Spec_Webhook_Header))
}

// GetDefault returns a default value of the field type
func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorKey:
		return ""
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorValue:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook_Header: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) ClearValue(item *NotificationChannel_Spec_Webhook_Header) {
	if item != nil {
		switch fp.selector {
		case NotificationChannelSpecWebhookHeader_FieldPathSelectorKey:
			item.Key = ""
		case NotificationChannelSpecWebhookHeader_FieldPathSelectorValue:
			item.Value = ""
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook_Header: %d", fp.selector))
		}
	}
}

func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*NotificationChannel_Spec_Webhook_Header))
}

// IsLeaf - whether field path is holds simple value
func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == NotificationChannelSpecWebhookHeader_FieldPathSelectorKey ||
		fp.selector == NotificationChannelSpecWebhookHeader_FieldPathSelectorValue
}

func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) WithIValue(value interface{}) NotificationChannelSpecWebhookHeader_FieldPathValue {
	switch fp.selector {
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorKey:
		return &NotificationChannelSpecWebhookHeader_FieldTerminalPathValue{NotificationChannelSpecWebhookHeader_FieldTerminalPath: *fp, value: value.(string)}
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorValue:
		return &NotificationChannelSpecWebhookHeader_FieldTerminalPathValue{NotificationChannelSpecWebhookHeader_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook_Header: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) WithIArrayOfValues(values interface{}) NotificationChannelSpecWebhookHeader_FieldPathArrayOfValues {
	fpaov := &NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayOfValues{NotificationChannelSpecWebhookHeader_FieldTerminalPath: *fp}
	switch fp.selector {
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorKey:
		return &NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayOfValues{NotificationChannelSpecWebhookHeader_FieldTerminalPath: *fp, values: values.([]string)}
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorValue:
		return &NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayOfValues{NotificationChannelSpecWebhookHeader_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook_Header: %d", fp.selector))
	}
	return fpaov
}

func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) WithIArrayItemValue(value interface{}) NotificationChannelSpecWebhookHeader_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook_Header: %d", fp.selector))
	}
}

func (fp *NotificationChannelSpecWebhookHeader_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// NotificationChannelSpecWebhookHeader_FieldPathValue allows storing values for Header fields according to their type
type NotificationChannelSpecWebhookHeader_FieldPathValue interface {
	NotificationChannelSpecWebhookHeader_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **NotificationChannel_Spec_Webhook_Header)
	CompareWith(*NotificationChannel_Spec_Webhook_Header) (cmp int, comparable bool)
}

func ParseNotificationChannelSpecWebhookHeader_FieldPathValue(pathStr, valueStr string) (NotificationChannelSpecWebhookHeader_FieldPathValue, error) {
	fp, err := ParseNotificationChannelSpecWebhookHeader_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Header field path value from %s: %v", valueStr, err)
	}
	return fpv.(NotificationChannelSpecWebhookHeader_FieldPathValue), nil
}

func MustParseNotificationChannelSpecWebhookHeader_FieldPathValue(pathStr, valueStr string) NotificationChannelSpecWebhookHeader_FieldPathValue {
	fpv, err := ParseNotificationChannelSpecWebhookHeader_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type NotificationChannelSpecWebhookHeader_FieldTerminalPathValue struct {
	NotificationChannelSpecWebhookHeader_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelSpecWebhookHeader_FieldPathValue = (*NotificationChannelSpecWebhookHeader_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Header' as interface{}
func (fpv *NotificationChannelSpecWebhookHeader_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *NotificationChannelSpecWebhookHeader_FieldTerminalPathValue) AsKeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *NotificationChannelSpecWebhookHeader_FieldTerminalPathValue) AsValueValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Header
func (fpv *NotificationChannelSpecWebhookHeader_FieldTerminalPathValue) SetTo(target **NotificationChannel_Spec_Webhook_Header) {
	if *target == nil {
		*target = new(NotificationChannel_Spec_Webhook_Header)
	}
	switch fpv.selector {
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorKey:
		(*target).Key = fpv.value.(string)
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorValue:
		(*target).Value = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook_Header: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelSpecWebhookHeader_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_Spec_Webhook_Header)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'NotificationChannelSpecWebhookHeader_FieldTerminalPathValue' with the value under path in 'NotificationChannel_Spec_Webhook_Header'.
func (fpv *NotificationChannelSpecWebhookHeader_FieldTerminalPathValue) CompareWith(source *NotificationChannel_Spec_Webhook_Header) (int, bool) {
	switch fpv.selector {
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorKey:
		leftValue := fpv.value.(string)
		rightValue := source.GetKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorValue:
		leftValue := fpv.value.(string)
		rightValue := source.GetValue()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_Spec_Webhook_Header: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelSpecWebhookHeader_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*NotificationChannel_Spec_Webhook_Header))
}

// NotificationChannelSpecWebhookHeader_FieldPathArrayItemValue allows storing single item in Path-specific values for Header according to their type
// Present only for array (repeated) types.
type NotificationChannelSpecWebhookHeader_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	NotificationChannelSpecWebhookHeader_FieldPath
	ContainsValue(*NotificationChannel_Spec_Webhook_Header) bool
}

// ParseNotificationChannelSpecWebhookHeader_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseNotificationChannelSpecWebhookHeader_FieldPathArrayItemValue(pathStr, valueStr string) (NotificationChannelSpecWebhookHeader_FieldPathArrayItemValue, error) {
	fp, err := ParseNotificationChannelSpecWebhookHeader_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Header field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(NotificationChannelSpecWebhookHeader_FieldPathArrayItemValue), nil
}

func MustParseNotificationChannelSpecWebhookHeader_FieldPathArrayItemValue(pathStr, valueStr string) NotificationChannelSpecWebhookHeader_FieldPathArrayItemValue {
	fpaiv, err := ParseNotificationChannelSpecWebhookHeader_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayItemValue struct {
	NotificationChannelSpecWebhookHeader_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelSpecWebhookHeader_FieldPathArrayItemValue = (*NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object NotificationChannel_Spec_Webhook_Header as interface{}
func (fpaiv *NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayItemValue) GetSingle(source *NotificationChannel_Spec_Webhook_Header) (interface{}, bool) {
	return nil, false
}

func (fpaiv *NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*NotificationChannel_Spec_Webhook_Header))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Header'
func (fpaiv *NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayItemValue) ContainsValue(source *NotificationChannel_Spec_Webhook_Header) bool {
	slice := fpaiv.NotificationChannelSpecWebhookHeader_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// NotificationChannelSpecWebhookHeader_FieldPathArrayOfValues allows storing slice of values for Header fields according to their type
type NotificationChannelSpecWebhookHeader_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	NotificationChannelSpecWebhookHeader_FieldPath
}

func ParseNotificationChannelSpecWebhookHeader_FieldPathArrayOfValues(pathStr, valuesStr string) (NotificationChannelSpecWebhookHeader_FieldPathArrayOfValues, error) {
	fp, err := ParseNotificationChannelSpecWebhookHeader_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Header field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(NotificationChannelSpecWebhookHeader_FieldPathArrayOfValues), nil
}

func MustParseNotificationChannelSpecWebhookHeader_FieldPathArrayOfValues(pathStr, valuesStr string) NotificationChannelSpecWebhookHeader_FieldPathArrayOfValues {
	fpaov, err := ParseNotificationChannelSpecWebhookHeader_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayOfValues struct {
	NotificationChannelSpecWebhookHeader_FieldTerminalPath
	values interface{}
}

var _ NotificationChannelSpecWebhookHeader_FieldPathArrayOfValues = (*NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorKey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case NotificationChannelSpecWebhookHeader_FieldPathSelectorValue:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayOfValues) AsKeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *NotificationChannelSpecWebhookHeader_FieldTerminalPathArrayOfValues) AsValueArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type NotificationChannelStateError_FieldPath interface {
	gotenobject.FieldPath
	Selector() NotificationChannelStateError_FieldPathSelector
	Get(source *NotificationChannel_State_Error) []interface{}
	GetSingle(source *NotificationChannel_State_Error) (interface{}, bool)
	ClearValue(item *NotificationChannel_State_Error)

	// Those methods build corresponding NotificationChannelStateError_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) NotificationChannelStateError_FieldPathValue
	WithIArrayOfValues(values interface{}) NotificationChannelStateError_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) NotificationChannelStateError_FieldPathArrayItemValue
}

type NotificationChannelStateError_FieldPathSelector int32

const (
	NotificationChannelStateError_FieldPathSelectorTime    NotificationChannelStateError_FieldPathSelector = 0
	NotificationChannelStateError_FieldPathSelectorMessage NotificationChannelStateError_FieldPathSelector = 1
)

func (s NotificationChannelStateError_FieldPathSelector) String() string {
	switch s {
	case NotificationChannelStateError_FieldPathSelectorTime:
		return "time"
	case NotificationChannelStateError_FieldPathSelectorMessage:
		return "message"
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", s))
	}
}

func BuildNotificationChannelStateError_FieldPath(fp gotenobject.RawFieldPath) (NotificationChannelStateError_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object NotificationChannel_State_Error")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "time":
			return &NotificationChannelStateError_FieldTerminalPath{selector: NotificationChannelStateError_FieldPathSelectorTime}, nil
		case "message":
			return &NotificationChannelStateError_FieldTerminalPath{selector: NotificationChannelStateError_FieldPathSelectorMessage}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object NotificationChannel_State_Error", fp)
}

func ParseNotificationChannelStateError_FieldPath(rawField string) (NotificationChannelStateError_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildNotificationChannelStateError_FieldPath(fp)
}

func MustParseNotificationChannelStateError_FieldPath(rawField string) NotificationChannelStateError_FieldPath {
	fp, err := ParseNotificationChannelStateError_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type NotificationChannelStateError_FieldTerminalPath struct {
	selector NotificationChannelStateError_FieldPathSelector
}

var _ NotificationChannelStateError_FieldPath = (*NotificationChannelStateError_FieldTerminalPath)(nil)

func (fp *NotificationChannelStateError_FieldTerminalPath) Selector() NotificationChannelStateError_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *NotificationChannelStateError_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *NotificationChannelStateError_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source NotificationChannel_State_Error
func (fp *NotificationChannelStateError_FieldTerminalPath) Get(source *NotificationChannel_State_Error) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case NotificationChannelStateError_FieldPathSelectorTime:
			if source.Time != nil {
				values = append(values, source.Time)
			}
		case NotificationChannelStateError_FieldPathSelectorMessage:
			values = append(values, source.Message)
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
		}
	}
	return
}

func (fp *NotificationChannelStateError_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*NotificationChannel_State_Error))
}

// GetSingle returns value pointed by specific field of from source NotificationChannel_State_Error
func (fp *NotificationChannelStateError_FieldTerminalPath) GetSingle(source *NotificationChannel_State_Error) (interface{}, bool) {
	switch fp.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		res := source.GetTime()
		return res, res != nil
	case NotificationChannelStateError_FieldPathSelectorMessage:
		return source.GetMessage(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
	}
}

func (fp *NotificationChannelStateError_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*NotificationChannel_State_Error))
}

// GetDefault returns a default value of the field type
func (fp *NotificationChannelStateError_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		return (*timestamppb.Timestamp)(nil)
	case NotificationChannelStateError_FieldPathSelectorMessage:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
	}
}

func (fp *NotificationChannelStateError_FieldTerminalPath) ClearValue(item *NotificationChannel_State_Error) {
	if item != nil {
		switch fp.selector {
		case NotificationChannelStateError_FieldPathSelectorTime:
			item.Time = nil
		case NotificationChannelStateError_FieldPathSelectorMessage:
			item.Message = ""
		default:
			panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
		}
	}
}

func (fp *NotificationChannelStateError_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*NotificationChannel_State_Error))
}

// IsLeaf - whether field path is holds simple value
func (fp *NotificationChannelStateError_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == NotificationChannelStateError_FieldPathSelectorTime ||
		fp.selector == NotificationChannelStateError_FieldPathSelectorMessage
}

func (fp *NotificationChannelStateError_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *NotificationChannelStateError_FieldTerminalPath) WithIValue(value interface{}) NotificationChannelStateError_FieldPathValue {
	switch fp.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		return &NotificationChannelStateError_FieldTerminalPathValue{NotificationChannelStateError_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	case NotificationChannelStateError_FieldPathSelectorMessage:
		return &NotificationChannelStateError_FieldTerminalPathValue{NotificationChannelStateError_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
	}
}

func (fp *NotificationChannelStateError_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *NotificationChannelStateError_FieldTerminalPath) WithIArrayOfValues(values interface{}) NotificationChannelStateError_FieldPathArrayOfValues {
	fpaov := &NotificationChannelStateError_FieldTerminalPathArrayOfValues{NotificationChannelStateError_FieldTerminalPath: *fp}
	switch fp.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		return &NotificationChannelStateError_FieldTerminalPathArrayOfValues{NotificationChannelStateError_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	case NotificationChannelStateError_FieldPathSelectorMessage:
		return &NotificationChannelStateError_FieldTerminalPathArrayOfValues{NotificationChannelStateError_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
	}
	return fpaov
}

func (fp *NotificationChannelStateError_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *NotificationChannelStateError_FieldTerminalPath) WithIArrayItemValue(value interface{}) NotificationChannelStateError_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fp.selector))
	}
}

func (fp *NotificationChannelStateError_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// NotificationChannelStateError_FieldPathValue allows storing values for Error fields according to their type
type NotificationChannelStateError_FieldPathValue interface {
	NotificationChannelStateError_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **NotificationChannel_State_Error)
	CompareWith(*NotificationChannel_State_Error) (cmp int, comparable bool)
}

func ParseNotificationChannelStateError_FieldPathValue(pathStr, valueStr string) (NotificationChannelStateError_FieldPathValue, error) {
	fp, err := ParseNotificationChannelStateError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Error field path value from %s: %v", valueStr, err)
	}
	return fpv.(NotificationChannelStateError_FieldPathValue), nil
}

func MustParseNotificationChannelStateError_FieldPathValue(pathStr, valueStr string) NotificationChannelStateError_FieldPathValue {
	fpv, err := ParseNotificationChannelStateError_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type NotificationChannelStateError_FieldTerminalPathValue struct {
	NotificationChannelStateError_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelStateError_FieldPathValue = (*NotificationChannelStateError_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Error' as interface{}
func (fpv *NotificationChannelStateError_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *NotificationChannelStateError_FieldTerminalPathValue) AsTimeValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}
func (fpv *NotificationChannelStateError_FieldTerminalPathValue) AsMessageValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Error
func (fpv *NotificationChannelStateError_FieldTerminalPathValue) SetTo(target **NotificationChannel_State_Error) {
	if *target == nil {
		*target = new(NotificationChannel_State_Error)
	}
	switch fpv.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		(*target).Time = fpv.value.(*timestamppb.Timestamp)
	case NotificationChannelStateError_FieldPathSelectorMessage:
		(*target).Message = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelStateError_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*NotificationChannel_State_Error)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'NotificationChannelStateError_FieldTerminalPathValue' with the value under path in 'NotificationChannel_State_Error'.
func (fpv *NotificationChannelStateError_FieldTerminalPathValue) CompareWith(source *NotificationChannel_State_Error) (int, bool) {
	switch fpv.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case NotificationChannelStateError_FieldPathSelectorMessage:
		leftValue := fpv.value.(string)
		rightValue := source.GetMessage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for NotificationChannel_State_Error: %d", fpv.selector))
	}
}

func (fpv *NotificationChannelStateError_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*NotificationChannel_State_Error))
}

// NotificationChannelStateError_FieldPathArrayItemValue allows storing single item in Path-specific values for Error according to their type
// Present only for array (repeated) types.
type NotificationChannelStateError_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	NotificationChannelStateError_FieldPath
	ContainsValue(*NotificationChannel_State_Error) bool
}

// ParseNotificationChannelStateError_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseNotificationChannelStateError_FieldPathArrayItemValue(pathStr, valueStr string) (NotificationChannelStateError_FieldPathArrayItemValue, error) {
	fp, err := ParseNotificationChannelStateError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Error field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(NotificationChannelStateError_FieldPathArrayItemValue), nil
}

func MustParseNotificationChannelStateError_FieldPathArrayItemValue(pathStr, valueStr string) NotificationChannelStateError_FieldPathArrayItemValue {
	fpaiv, err := ParseNotificationChannelStateError_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type NotificationChannelStateError_FieldTerminalPathArrayItemValue struct {
	NotificationChannelStateError_FieldTerminalPath
	value interface{}
}

var _ NotificationChannelStateError_FieldPathArrayItemValue = (*NotificationChannelStateError_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object NotificationChannel_State_Error as interface{}
func (fpaiv *NotificationChannelStateError_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *NotificationChannelStateError_FieldTerminalPathArrayItemValue) GetSingle(source *NotificationChannel_State_Error) (interface{}, bool) {
	return nil, false
}

func (fpaiv *NotificationChannelStateError_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*NotificationChannel_State_Error))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Error'
func (fpaiv *NotificationChannelStateError_FieldTerminalPathArrayItemValue) ContainsValue(source *NotificationChannel_State_Error) bool {
	slice := fpaiv.NotificationChannelStateError_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// NotificationChannelStateError_FieldPathArrayOfValues allows storing slice of values for Error fields according to their type
type NotificationChannelStateError_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	NotificationChannelStateError_FieldPath
}

func ParseNotificationChannelStateError_FieldPathArrayOfValues(pathStr, valuesStr string) (NotificationChannelStateError_FieldPathArrayOfValues, error) {
	fp, err := ParseNotificationChannelStateError_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Error field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(NotificationChannelStateError_FieldPathArrayOfValues), nil
}

func MustParseNotificationChannelStateError_FieldPathArrayOfValues(pathStr, valuesStr string) NotificationChannelStateError_FieldPathArrayOfValues {
	fpaov, err := ParseNotificationChannelStateError_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type NotificationChannelStateError_FieldTerminalPathArrayOfValues struct {
	NotificationChannelStateError_FieldTerminalPath
	values interface{}
}

var _ NotificationChannelStateError_FieldPathArrayOfValues = (*NotificationChannelStateError_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *NotificationChannelStateError_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case NotificationChannelStateError_FieldPathSelectorTime:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	case NotificationChannelStateError_FieldPathSelectorMessage:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *NotificationChannelStateError_FieldTerminalPathArrayOfValues) AsTimeArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}
func (fpaov *NotificationChannelStateError_FieldTerminalPathArrayOfValues) AsMessageArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
