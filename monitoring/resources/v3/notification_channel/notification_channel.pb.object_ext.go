// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/notification_channel.proto
// DO NOT EDIT!!!

package notification_channel

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &project.Project{}
	_ = &timestamp.Timestamp{}
)

func (o *NotificationChannel) GotenObjectExt() {}

func (o *NotificationChannel) MakeFullFieldMask() *NotificationChannel_FieldMask {
	return FullNotificationChannel_FieldMask()
}

func (o *NotificationChannel) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannel_FieldMask()
}

func (o *NotificationChannel) MakeDiffFieldMask(other *NotificationChannel) *NotificationChannel_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannel_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannel_FieldMask()
	}

	res := &NotificationChannel_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannel_FieldSubPath{selector: NotificationChannel_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorDisplayName})
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannel_FieldSubPath{selector: NotificationChannel_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetState().MakeDiffFieldMask(other.GetState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannel_FieldSubPath{selector: NotificationChannel_FieldPathSelectorState, subPath: subpath})
			}
		}
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &NotificationChannel_FieldTerminalPath{selector: NotificationChannel_FieldPathSelectorDescription})
	}
	return res
}

func (o *NotificationChannel) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannel))
}

func (o *NotificationChannel) Clone() *NotificationChannel {
	if o == nil {
		return nil
	}
	result := &NotificationChannel{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	result.Spec = o.Spec.Clone()
	result.State = o.State.Clone()
	result.Description = o.Description
	return result
}

func (o *NotificationChannel) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannel) Merge(source *NotificationChannel) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(NotificationChannel_Spec)
		}
		o.Spec.Merge(source.GetSpec())
	}
	if source.GetState() != nil {
		if o.State == nil {
			o.State = new(NotificationChannel_State)
		}
		o.State.Merge(source.GetState())
	}
	o.Description = source.GetDescription()
}

func (o *NotificationChannel) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannel))
}

func (o *NotificationChannel_Spec) GotenObjectExt() {}

func (o *NotificationChannel_Spec) MakeFullFieldMask() *NotificationChannel_Spec_FieldMask {
	return FullNotificationChannel_Spec_FieldMask()
}

func (o *NotificationChannel_Spec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannel_Spec_FieldMask()
}

func (o *NotificationChannel_Spec) MakeDiffFieldMask(other *NotificationChannel_Spec) *NotificationChannel_Spec_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannel_Spec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannel_Spec_FieldMask()
	}

	res := &NotificationChannel_Spec_FieldMask{}
	if o.GetEnabled() != other.GetEnabled() {
		res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorEnabled})
	}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorType})
	}
	{
		subMask := o.GetEmail().MakeDiffFieldMask(other.GetEmail())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorEmail})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannelSpec_FieldSubPath{selector: NotificationChannelSpec_FieldPathSelectorEmail, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSlack().MakeDiffFieldMask(other.GetSlack())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorSlack})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannelSpec_FieldSubPath{selector: NotificationChannelSpec_FieldPathSelectorSlack, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetWebhook().MakeDiffFieldMask(other.GetWebhook())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorWebhook})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannelSpec_FieldSubPath{selector: NotificationChannelSpec_FieldPathSelectorWebhook, subPath: subpath})
			}
		}
	}
	if o.GetNotificationLanguageCode() != other.GetNotificationLanguageCode() {
		res.Paths = append(res.Paths, &NotificationChannelSpec_FieldTerminalPath{selector: NotificationChannelSpec_FieldPathSelectorNotificationLanguageCode})
	}
	return res
}

func (o *NotificationChannel_Spec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannel_Spec))
}

func (o *NotificationChannel_Spec) Clone() *NotificationChannel_Spec {
	if o == nil {
		return nil
	}
	result := &NotificationChannel_Spec{}
	result.Enabled = o.Enabled
	result.Type = o.Type
	result.Email = o.Email.Clone()
	result.Slack = o.Slack.Clone()
	result.Webhook = o.Webhook.Clone()
	result.NotificationLanguageCode = o.NotificationLanguageCode
	return result
}

func (o *NotificationChannel_Spec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannel_Spec) Merge(source *NotificationChannel_Spec) {
	o.Enabled = source.GetEnabled()
	o.Type = source.GetType()
	if source.GetEmail() != nil {
		if o.Email == nil {
			o.Email = new(NotificationChannel_Spec_Email)
		}
		o.Email.Merge(source.GetEmail())
	}
	if source.GetSlack() != nil {
		if o.Slack == nil {
			o.Slack = new(NotificationChannel_Spec_Slack)
		}
		o.Slack.Merge(source.GetSlack())
	}
	if source.GetWebhook() != nil {
		if o.Webhook == nil {
			o.Webhook = new(NotificationChannel_Spec_Webhook)
		}
		o.Webhook.Merge(source.GetWebhook())
	}
	o.NotificationLanguageCode = source.GetNotificationLanguageCode()
}

func (o *NotificationChannel_Spec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannel_Spec))
}

func (o *NotificationChannel_State) GotenObjectExt() {}

func (o *NotificationChannel_State) MakeFullFieldMask() *NotificationChannel_State_FieldMask {
	return FullNotificationChannel_State_FieldMask()
}

func (o *NotificationChannel_State) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannel_State_FieldMask()
}

func (o *NotificationChannel_State) MakeDiffFieldMask(other *NotificationChannel_State) *NotificationChannel_State_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannel_State_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannel_State_FieldMask()
	}

	res := &NotificationChannel_State_FieldMask{}
	if o.GetStatus() != other.GetStatus() {
		res.Paths = append(res.Paths, &NotificationChannelState_FieldTerminalPath{selector: NotificationChannelState_FieldPathSelectorStatus})
	}
	{
		subMask := o.GetError().MakeDiffFieldMask(other.GetError())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &NotificationChannelState_FieldTerminalPath{selector: NotificationChannelState_FieldPathSelectorError})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &NotificationChannelState_FieldSubPath{selector: NotificationChannelState_FieldPathSelectorError, subPath: subpath})
			}
		}
	}
	return res
}

func (o *NotificationChannel_State) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannel_State))
}

func (o *NotificationChannel_State) Clone() *NotificationChannel_State {
	if o == nil {
		return nil
	}
	result := &NotificationChannel_State{}
	result.Status = o.Status
	result.Error = o.Error.Clone()
	return result
}

func (o *NotificationChannel_State) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannel_State) Merge(source *NotificationChannel_State) {
	o.Status = source.GetStatus()
	if source.GetError() != nil {
		if o.Error == nil {
			o.Error = new(NotificationChannel_State_Error)
		}
		o.Error.Merge(source.GetError())
	}
}

func (o *NotificationChannel_State) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannel_State))
}

func (o *NotificationChannel_Spec_Email) GotenObjectExt() {}

func (o *NotificationChannel_Spec_Email) MakeFullFieldMask() *NotificationChannel_Spec_Email_FieldMask {
	return FullNotificationChannel_Spec_Email_FieldMask()
}

func (o *NotificationChannel_Spec_Email) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannel_Spec_Email_FieldMask()
}

func (o *NotificationChannel_Spec_Email) MakeDiffFieldMask(other *NotificationChannel_Spec_Email) *NotificationChannel_Spec_Email_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannel_Spec_Email_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannel_Spec_Email_FieldMask()
	}

	res := &NotificationChannel_Spec_Email_FieldMask{}

	if len(o.GetAddresses()) == len(other.GetAddresses()) {
		for i, lValue := range o.GetAddresses() {
			rValue := other.GetAddresses()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &NotificationChannelSpecEmail_FieldTerminalPath{selector: NotificationChannelSpecEmail_FieldPathSelectorAddresses})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &NotificationChannelSpecEmail_FieldTerminalPath{selector: NotificationChannelSpecEmail_FieldPathSelectorAddresses})
	}
	return res
}

func (o *NotificationChannel_Spec_Email) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannel_Spec_Email))
}

func (o *NotificationChannel_Spec_Email) Clone() *NotificationChannel_Spec_Email {
	if o == nil {
		return nil
	}
	result := &NotificationChannel_Spec_Email{}
	result.Addresses = make([]string, len(o.Addresses))
	for i, sourceValue := range o.Addresses {
		result.Addresses[i] = sourceValue
	}
	return result
}

func (o *NotificationChannel_Spec_Email) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannel_Spec_Email) Merge(source *NotificationChannel_Spec_Email) {
	for _, sourceValue := range source.GetAddresses() {
		exists := false
		for _, currentValue := range o.Addresses {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Addresses = append(o.Addresses, newDstElement)
		}
	}

}

func (o *NotificationChannel_Spec_Email) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannel_Spec_Email))
}

func (o *NotificationChannel_Spec_Slack) GotenObjectExt() {}

func (o *NotificationChannel_Spec_Slack) MakeFullFieldMask() *NotificationChannel_Spec_Slack_FieldMask {
	return FullNotificationChannel_Spec_Slack_FieldMask()
}

func (o *NotificationChannel_Spec_Slack) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannel_Spec_Slack_FieldMask()
}

func (o *NotificationChannel_Spec_Slack) MakeDiffFieldMask(other *NotificationChannel_Spec_Slack) *NotificationChannel_Spec_Slack_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannel_Spec_Slack_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannel_Spec_Slack_FieldMask()
	}

	res := &NotificationChannel_Spec_Slack_FieldMask{}
	if o.GetIncomingWebhook() != other.GetIncomingWebhook() {
		res.Paths = append(res.Paths, &NotificationChannelSpecSlack_FieldTerminalPath{selector: NotificationChannelSpecSlack_FieldPathSelectorIncomingWebhook})
	}
	return res
}

func (o *NotificationChannel_Spec_Slack) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannel_Spec_Slack))
}

func (o *NotificationChannel_Spec_Slack) Clone() *NotificationChannel_Spec_Slack {
	if o == nil {
		return nil
	}
	result := &NotificationChannel_Spec_Slack{}
	result.IncomingWebhook = o.IncomingWebhook
	return result
}

func (o *NotificationChannel_Spec_Slack) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannel_Spec_Slack) Merge(source *NotificationChannel_Spec_Slack) {
	o.IncomingWebhook = source.GetIncomingWebhook()
}

func (o *NotificationChannel_Spec_Slack) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannel_Spec_Slack))
}

func (o *NotificationChannel_Spec_PagerDuty) GotenObjectExt() {}

func (o *NotificationChannel_Spec_PagerDuty) MakeFullFieldMask() *NotificationChannel_Spec_PagerDuty_FieldMask {
	return FullNotificationChannel_Spec_PagerDuty_FieldMask()
}

func (o *NotificationChannel_Spec_PagerDuty) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannel_Spec_PagerDuty_FieldMask()
}

func (o *NotificationChannel_Spec_PagerDuty) MakeDiffFieldMask(other *NotificationChannel_Spec_PagerDuty) *NotificationChannel_Spec_PagerDuty_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannel_Spec_PagerDuty_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannel_Spec_PagerDuty_FieldMask()
	}

	res := &NotificationChannel_Spec_PagerDuty_FieldMask{}
	if o.GetServiceKey() != other.GetServiceKey() {
		res.Paths = append(res.Paths, &NotificationChannelSpecPagerDuty_FieldTerminalPath{selector: NotificationChannelSpecPagerDuty_FieldPathSelectorServiceKey})
	}
	return res
}

func (o *NotificationChannel_Spec_PagerDuty) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannel_Spec_PagerDuty))
}

func (o *NotificationChannel_Spec_PagerDuty) Clone() *NotificationChannel_Spec_PagerDuty {
	if o == nil {
		return nil
	}
	result := &NotificationChannel_Spec_PagerDuty{}
	result.ServiceKey = o.ServiceKey
	return result
}

func (o *NotificationChannel_Spec_PagerDuty) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannel_Spec_PagerDuty) Merge(source *NotificationChannel_Spec_PagerDuty) {
	o.ServiceKey = source.GetServiceKey()
}

func (o *NotificationChannel_Spec_PagerDuty) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannel_Spec_PagerDuty))
}

func (o *NotificationChannel_Spec_Webhook) GotenObjectExt() {}

func (o *NotificationChannel_Spec_Webhook) MakeFullFieldMask() *NotificationChannel_Spec_Webhook_FieldMask {
	return FullNotificationChannel_Spec_Webhook_FieldMask()
}

func (o *NotificationChannel_Spec_Webhook) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannel_Spec_Webhook_FieldMask()
}

func (o *NotificationChannel_Spec_Webhook) MakeDiffFieldMask(other *NotificationChannel_Spec_Webhook) *NotificationChannel_Spec_Webhook_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannel_Spec_Webhook_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannel_Spec_Webhook_FieldMask()
	}

	res := &NotificationChannel_Spec_Webhook_FieldMask{}
	if o.GetUrl() != other.GetUrl() {
		res.Paths = append(res.Paths, &NotificationChannelSpecWebhook_FieldTerminalPath{selector: NotificationChannelSpecWebhook_FieldPathSelectorUrl})
	}

	if len(o.GetHeaders()) == len(other.GetHeaders()) {
		for i, lValue := range o.GetHeaders() {
			rValue := other.GetHeaders()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &NotificationChannelSpecWebhook_FieldTerminalPath{selector: NotificationChannelSpecWebhook_FieldPathSelectorHeaders})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &NotificationChannelSpecWebhook_FieldTerminalPath{selector: NotificationChannelSpecWebhook_FieldPathSelectorHeaders})
	}
	return res
}

func (o *NotificationChannel_Spec_Webhook) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannel_Spec_Webhook))
}

func (o *NotificationChannel_Spec_Webhook) Clone() *NotificationChannel_Spec_Webhook {
	if o == nil {
		return nil
	}
	result := &NotificationChannel_Spec_Webhook{}
	result.Url = o.Url
	result.Headers = make([]*NotificationChannel_Spec_Webhook_Header, len(o.Headers))
	for i, sourceValue := range o.Headers {
		result.Headers[i] = sourceValue.Clone()
	}
	return result
}

func (o *NotificationChannel_Spec_Webhook) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannel_Spec_Webhook) Merge(source *NotificationChannel_Spec_Webhook) {
	o.Url = source.GetUrl()
	for _, sourceValue := range source.GetHeaders() {
		exists := false
		for _, currentValue := range o.Headers {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *NotificationChannel_Spec_Webhook_Header
			if sourceValue != nil {
				newDstElement = new(NotificationChannel_Spec_Webhook_Header)
				newDstElement.Merge(sourceValue)
			}
			o.Headers = append(o.Headers, newDstElement)
		}
	}

}

func (o *NotificationChannel_Spec_Webhook) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannel_Spec_Webhook))
}

func (o *NotificationChannel_Spec_Webhook_Header) GotenObjectExt() {}

func (o *NotificationChannel_Spec_Webhook_Header) MakeFullFieldMask() *NotificationChannel_Spec_Webhook_Header_FieldMask {
	return FullNotificationChannel_Spec_Webhook_Header_FieldMask()
}

func (o *NotificationChannel_Spec_Webhook_Header) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannel_Spec_Webhook_Header_FieldMask()
}

func (o *NotificationChannel_Spec_Webhook_Header) MakeDiffFieldMask(other *NotificationChannel_Spec_Webhook_Header) *NotificationChannel_Spec_Webhook_Header_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannel_Spec_Webhook_Header_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannel_Spec_Webhook_Header_FieldMask()
	}

	res := &NotificationChannel_Spec_Webhook_Header_FieldMask{}
	if o.GetKey() != other.GetKey() {
		res.Paths = append(res.Paths, &NotificationChannelSpecWebhookHeader_FieldTerminalPath{selector: NotificationChannelSpecWebhookHeader_FieldPathSelectorKey})
	}
	if o.GetValue() != other.GetValue() {
		res.Paths = append(res.Paths, &NotificationChannelSpecWebhookHeader_FieldTerminalPath{selector: NotificationChannelSpecWebhookHeader_FieldPathSelectorValue})
	}
	return res
}

func (o *NotificationChannel_Spec_Webhook_Header) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannel_Spec_Webhook_Header))
}

func (o *NotificationChannel_Spec_Webhook_Header) Clone() *NotificationChannel_Spec_Webhook_Header {
	if o == nil {
		return nil
	}
	result := &NotificationChannel_Spec_Webhook_Header{}
	result.Key = o.Key
	result.Value = o.Value
	return result
}

func (o *NotificationChannel_Spec_Webhook_Header) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannel_Spec_Webhook_Header) Merge(source *NotificationChannel_Spec_Webhook_Header) {
	o.Key = source.GetKey()
	o.Value = source.GetValue()
}

func (o *NotificationChannel_Spec_Webhook_Header) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannel_Spec_Webhook_Header))
}

func (o *NotificationChannel_State_Error) GotenObjectExt() {}

func (o *NotificationChannel_State_Error) MakeFullFieldMask() *NotificationChannel_State_Error_FieldMask {
	return FullNotificationChannel_State_Error_FieldMask()
}

func (o *NotificationChannel_State_Error) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullNotificationChannel_State_Error_FieldMask()
}

func (o *NotificationChannel_State_Error) MakeDiffFieldMask(other *NotificationChannel_State_Error) *NotificationChannel_State_Error_FieldMask {
	if o == nil && other == nil {
		return &NotificationChannel_State_Error_FieldMask{}
	}
	if o == nil || other == nil {
		return FullNotificationChannel_State_Error_FieldMask()
	}

	res := &NotificationChannel_State_Error_FieldMask{}
	if !proto.Equal(o.GetTime(), other.GetTime()) {
		res.Paths = append(res.Paths, &NotificationChannelStateError_FieldTerminalPath{selector: NotificationChannelStateError_FieldPathSelectorTime})
	}
	if o.GetMessage() != other.GetMessage() {
		res.Paths = append(res.Paths, &NotificationChannelStateError_FieldTerminalPath{selector: NotificationChannelStateError_FieldPathSelectorMessage})
	}
	return res
}

func (o *NotificationChannel_State_Error) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*NotificationChannel_State_Error))
}

func (o *NotificationChannel_State_Error) Clone() *NotificationChannel_State_Error {
	if o == nil {
		return nil
	}
	result := &NotificationChannel_State_Error{}
	result.Time = proto.Clone(o.Time).(*timestamp.Timestamp)
	result.Message = o.Message
	return result
}

func (o *NotificationChannel_State_Error) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *NotificationChannel_State_Error) Merge(source *NotificationChannel_State_Error) {
	if source.GetTime() != nil {
		if o.Time == nil {
			o.Time = new(timestamp.Timestamp)
		}
		proto.Merge(o.Time, source.GetTime())
	}
	o.Message = source.GetMessage()
}

func (o *NotificationChannel_State_Error) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*NotificationChannel_State_Error))
}
