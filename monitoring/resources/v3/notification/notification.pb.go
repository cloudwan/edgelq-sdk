// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v3/notification.proto
// DO NOT EDIT!!!

package notification

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/common/v3"
	alert "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alert"
	alerting_condition "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_condition"
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_policy"
	notification_channel "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/notification_channel"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &alert.Alert{}
	_ = &alerting_condition.AlertingCondition{}
	_ = &alerting_policy.AlertingPolicy{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &notification_channel.NotificationChannel{}
	_ = &project.Project{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Notification_State_NotificationState_Status int32

const (
	Notification_State_NotificationState_UNKNOWN    Notification_State_NotificationState_Status = 0
	Notification_State_NotificationState_PENDING    Notification_State_NotificationState_Status = 1
	Notification_State_NotificationState_FAILED     Notification_State_NotificationState_Status = 2
	Notification_State_NotificationState_SUPPRESSED Notification_State_NotificationState_Status = 3
	Notification_State_NotificationState_SENT       Notification_State_NotificationState_Status = 4
	// Status types that can be used by webhook integrated providers, like
	// PagerDuty.
	Notification_State_NotificationState_DELIVERED      Notification_State_NotificationState_Status = 5
	Notification_State_NotificationState_ACKNOWLEDGED   Notification_State_NotificationState_Status = 6
	Notification_State_NotificationState_UNACKNOWLEDGED Notification_State_NotificationState_Status = 7
)

var (
	Notification_State_NotificationState_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "PENDING",
		2: "FAILED",
		3: "SUPPRESSED",
		4: "SENT",
		5: "DELIVERED",
		6: "ACKNOWLEDGED",
		7: "UNACKNOWLEDGED",
	}

	Notification_State_NotificationState_Status_value = map[string]int32{
		"UNKNOWN":        0,
		"PENDING":        1,
		"FAILED":         2,
		"SUPPRESSED":     3,
		"SENT":           4,
		"DELIVERED":      5,
		"ACKNOWLEDGED":   6,
		"UNACKNOWLEDGED": 7,
	}
)

func (x Notification_State_NotificationState_Status) Enum() *Notification_State_NotificationState_Status {
	p := new(Notification_State_NotificationState_Status)
	*p = x
	return p
}

func (x Notification_State_NotificationState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Notification_State_NotificationState_Status) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v3_notification_proto_enumTypes[0].Descriptor()
}

func (Notification_State_NotificationState_Status) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v3_notification_proto_enumTypes[0]
}

func (x Notification_State_NotificationState_Status) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Notification_State_NotificationState_Status.ProtoReflect.Descriptor instead.
func (Notification_State_NotificationState_Status) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_notification_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

// Notification Resource
type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Notification
	Name     *Name          `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Metadata *ntt_meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// Reference to alerting policy that this notification is for
	AlertingPolicy *alerting_policy.Name `protobuf:"bytes,3,opt,customtype=Name,name=alerting_policy,json=alertingPolicy,proto3" json:"alerting_policy,omitempty" firestore:"alertingPolicy"`
	// References to alerts that are part of this notification
	Alerts []*alert.Name       `protobuf:"bytes,4,rep,customtype=Name,name=alerts,proto3" json:"alerts,omitempty" firestore:"alerts"`
	State  *Notification_State `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty" firestore:"state"`
}

func (m *Notification) Reset() {
	*m = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_notification_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Notification) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Notification) ProtoMessage() {}

func (m *Notification) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_notification_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Notification) GotenMessage() {}

// Deprecated, Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_notification_proto_rawDescGZIP(), []int{0}
}

func (m *Notification) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Notification) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Notification) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Notification) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Notification) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Notification) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Notification) GetAlertingPolicy() *alerting_policy.Name {
	if m != nil {
		return m.AlertingPolicy
	}
	return nil
}

func (m *Notification) GetAlerts() []*alert.Name {
	if m != nil {
		return m.Alerts
	}
	return nil
}

func (m *Notification) GetState() *Notification_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Notification) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Notification"))
	}
	m.Name = fv
}

func (m *Notification) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Notification"))
	}
	m.Metadata = fv
}

func (m *Notification) SetAlertingPolicy(fv *alerting_policy.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertingPolicy", "Notification"))
	}
	m.AlertingPolicy = fv
}

func (m *Notification) SetAlerts(fv []*alert.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Alerts", "Notification"))
	}
	m.Alerts = fv
}

func (m *Notification) SetState(fv *Notification_State) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "Notification"))
	}
	m.State = fv
}

type Notification_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	IsResolved    bool `protobuf:"varint,1,opt,name=is_resolved,json=isResolved,proto3" json:"is_resolved,omitempty" firestore:"isResolved"`
	// Notification state
	NotificationState []*Notification_State_NotificationState `protobuf:"bytes,2,rep,name=notification_state,json=notificationState,proto3" json:"notification_state,omitempty" firestore:"notificationState"`
	// Internal state to keep track of whether any notification sends needs to
	// be retried for new incident
	IncidentNotifyAttemptsDone bool `protobuf:"varint,3,opt,name=incident_notify_attempts_done,json=incidentNotifyAttemptsDone,proto3" json:"incident_notify_attempts_done,omitempty" firestore:"incidentNotifyAttemptsDone"`
	// Internal state to keep track of whether any notification sends needs to
	// be retried for resolution
	ResolutionNotifyAttemptsDone bool `protobuf:"varint,4,opt,name=resolution_notify_attempts_done,json=resolutionNotifyAttemptsDone,proto3" json:"resolution_notify_attempts_done,omitempty" firestore:"resolutionNotifyAttemptsDone"`
	// Time range for which alerts for the policy are clubbed together
	AlertsLifetime              *monitoring_common.TimeRange            `protobuf:"bytes,5,opt,name=alerts_lifetime,json=alertsLifetime,proto3" json:"alerts_lifetime,omitempty" firestore:"alertsLifetime"`
	ResolutionNotificationState []*Notification_State_NotificationState `protobuf:"bytes,6,rep,name=resolution_notification_state,json=resolutionNotificationState,proto3" json:"resolution_notification_state,omitempty" firestore:"resolutionNotificationState"`
	// Alert has ended and any needed notifications are processed
	LifecycleCompleted bool `protobuf:"varint,7,opt,name=lifecycle_completed,json=lifecycleCompleted,proto3" json:"lifecycle_completed,omitempty" firestore:"lifecycleCompleted"`
}

func (m *Notification_State) Reset() {
	*m = Notification_State{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_notification_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Notification_State) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Notification_State) ProtoMessage() {}

func (m *Notification_State) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_notification_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Notification_State) GotenMessage() {}

// Deprecated, Use Notification_State.ProtoReflect.Descriptor instead.
func (*Notification_State) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_notification_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Notification_State) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Notification_State) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Notification_State) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Notification_State) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Notification_State) GetIsResolved() bool {
	if m != nil {
		return m.IsResolved
	}
	return false
}

func (m *Notification_State) GetNotificationState() []*Notification_State_NotificationState {
	if m != nil {
		return m.NotificationState
	}
	return nil
}

func (m *Notification_State) GetIncidentNotifyAttemptsDone() bool {
	if m != nil {
		return m.IncidentNotifyAttemptsDone
	}
	return false
}

func (m *Notification_State) GetResolutionNotifyAttemptsDone() bool {
	if m != nil {
		return m.ResolutionNotifyAttemptsDone
	}
	return false
}

func (m *Notification_State) GetAlertsLifetime() *monitoring_common.TimeRange {
	if m != nil {
		return m.AlertsLifetime
	}
	return nil
}

func (m *Notification_State) GetResolutionNotificationState() []*Notification_State_NotificationState {
	if m != nil {
		return m.ResolutionNotificationState
	}
	return nil
}

func (m *Notification_State) GetLifecycleCompleted() bool {
	if m != nil {
		return m.LifecycleCompleted
	}
	return false
}

func (m *Notification_State) SetIsResolved(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsResolved", "Notification_State"))
	}
	m.IsResolved = fv
}

func (m *Notification_State) SetNotificationState(fv []*Notification_State_NotificationState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NotificationState", "Notification_State"))
	}
	m.NotificationState = fv
}

func (m *Notification_State) SetIncidentNotifyAttemptsDone(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncidentNotifyAttemptsDone", "Notification_State"))
	}
	m.IncidentNotifyAttemptsDone = fv
}

func (m *Notification_State) SetResolutionNotifyAttemptsDone(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResolutionNotifyAttemptsDone", "Notification_State"))
	}
	m.ResolutionNotifyAttemptsDone = fv
}

func (m *Notification_State) SetAlertsLifetime(fv *monitoring_common.TimeRange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlertsLifetime", "Notification_State"))
	}
	m.AlertsLifetime = fv
}

func (m *Notification_State) SetResolutionNotificationState(fv []*Notification_State_NotificationState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResolutionNotificationState", "Notification_State"))
	}
	m.ResolutionNotificationState = fv
}

func (m *Notification_State) SetLifecycleCompleted(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LifecycleCompleted", "Notification_State"))
	}
	m.LifecycleCompleted = fv
}

type Notification_State_NotificationState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Notification channel name
	NotificationChannel *notification_channel.Name                  `protobuf:"bytes,1,opt,customtype=Name,name=notification_channel,json=notificationChannel,proto3" json:"notification_channel,omitempty" firestore:"notificationChannel"`
	Status              Notification_State_NotificationState_Status `protobuf:"varint,2,opt,name=status,proto3,enum=ntt.monitoring.v3.Notification_State_NotificationState_Status" json:"status,omitempty" firestore:"status"`
	// Error message if status is FAILED
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty" firestore:"error"`
	// Provider specific data. Allows tracking ids of notifications sent to
	// specific channels.
	ProviderData   *Notification_State_NotificationState_ProviderData `protobuf:"bytes,4,opt,name=provider_data,json=providerData,proto3" json:"provider_data,omitempty" firestore:"providerData"`
	NotifyAttempts int64                                              `protobuf:"varint,5,opt,name=notify_attempts,json=notifyAttempts,proto3" json:"notify_attempts,omitempty" firestore:"notifyAttempts"`
}

func (m *Notification_State_NotificationState) Reset() {
	*m = Notification_State_NotificationState{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_notification_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Notification_State_NotificationState) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Notification_State_NotificationState) ProtoMessage() {}

func (m *Notification_State_NotificationState) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_notification_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Notification_State_NotificationState) GotenMessage() {}

// Deprecated, Use Notification_State_NotificationState.ProtoReflect.Descriptor instead.
func (*Notification_State_NotificationState) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_notification_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Notification_State_NotificationState) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Notification_State_NotificationState) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Notification_State_NotificationState) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Notification_State_NotificationState) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Notification_State_NotificationState) GetNotificationChannel() *notification_channel.Name {
	if m != nil {
		return m.NotificationChannel
	}
	return nil
}

func (m *Notification_State_NotificationState) GetStatus() Notification_State_NotificationState_Status {
	if m != nil {
		return m.Status
	}
	return Notification_State_NotificationState_UNKNOWN
}

func (m *Notification_State_NotificationState) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Notification_State_NotificationState) GetProviderData() *Notification_State_NotificationState_ProviderData {
	if m != nil {
		return m.ProviderData
	}
	return nil
}

func (m *Notification_State_NotificationState) GetNotifyAttempts() int64 {
	if m != nil {
		return m.NotifyAttempts
	}
	return int64(0)
}

func (m *Notification_State_NotificationState) SetNotificationChannel(fv *notification_channel.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NotificationChannel", "Notification_State_NotificationState"))
	}
	m.NotificationChannel = fv
}

func (m *Notification_State_NotificationState) SetStatus(fv Notification_State_NotificationState_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Notification_State_NotificationState"))
	}
	m.Status = fv
}

func (m *Notification_State_NotificationState) SetError(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Error", "Notification_State_NotificationState"))
	}
	m.Error = fv
}

func (m *Notification_State_NotificationState) SetProviderData(fv *Notification_State_NotificationState_ProviderData) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProviderData", "Notification_State_NotificationState"))
	}
	m.ProviderData = fv
}

func (m *Notification_State_NotificationState) SetNotifyAttempts(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NotifyAttempts", "Notification_State_NotificationState"))
	}
	m.NotifyAttempts = fv
}

// Provider specific data
type Notification_State_NotificationState_ProviderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Slack         *Notification_State_NotificationState_ProviderData_Slack     `protobuf:"bytes,3,opt,name=slack,proto3" json:"slack,omitempty" firestore:"slack"`
	PagerDuty     *Notification_State_NotificationState_ProviderData_PagerDuty `protobuf:"bytes,4,opt,name=pager_duty,json=pagerDuty,proto3" json:"pager_duty,omitempty" firestore:"pagerDuty"`
}

func (m *Notification_State_NotificationState_ProviderData) Reset() {
	*m = Notification_State_NotificationState_ProviderData{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_notification_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Notification_State_NotificationState_ProviderData) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Notification_State_NotificationState_ProviderData) ProtoMessage() {}

func (m *Notification_State_NotificationState_ProviderData) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_notification_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Notification_State_NotificationState_ProviderData) GotenMessage() {}

// Deprecated, Use Notification_State_NotificationState_ProviderData.ProtoReflect.Descriptor instead.
func (*Notification_State_NotificationState_ProviderData) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_notification_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (m *Notification_State_NotificationState_ProviderData) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Notification_State_NotificationState_ProviderData) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Notification_State_NotificationState_ProviderData) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Notification_State_NotificationState_ProviderData) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Notification_State_NotificationState_ProviderData) GetSlack() *Notification_State_NotificationState_ProviderData_Slack {
	if m != nil {
		return m.Slack
	}
	return nil
}

func (m *Notification_State_NotificationState_ProviderData) GetPagerDuty() *Notification_State_NotificationState_ProviderData_PagerDuty {
	if m != nil {
		return m.PagerDuty
	}
	return nil
}

func (m *Notification_State_NotificationState_ProviderData) SetSlack(fv *Notification_State_NotificationState_ProviderData_Slack) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Slack", "Notification_State_NotificationState_ProviderData"))
	}
	m.Slack = fv
}

func (m *Notification_State_NotificationState_ProviderData) SetPagerDuty(fv *Notification_State_NotificationState_ProviderData_PagerDuty) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PagerDuty", "Notification_State_NotificationState_ProviderData"))
	}
	m.PagerDuty = fv
}

// Slack
type Notification_State_NotificationState_ProviderData_Slack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Ts            string `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty" firestore:"ts"`
}

func (m *Notification_State_NotificationState_ProviderData_Slack) Reset() {
	*m = Notification_State_NotificationState_ProviderData_Slack{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_notification_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Notification_State_NotificationState_ProviderData_Slack) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Notification_State_NotificationState_ProviderData_Slack) ProtoMessage() {}

func (m *Notification_State_NotificationState_ProviderData_Slack) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_notification_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Notification_State_NotificationState_ProviderData_Slack) GotenMessage() {}

// Deprecated, Use Notification_State_NotificationState_ProviderData_Slack.ProtoReflect.Descriptor instead.
func (*Notification_State_NotificationState_ProviderData_Slack) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_notification_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (m *Notification_State_NotificationState_ProviderData_Slack) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Notification_State_NotificationState_ProviderData_Slack) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Notification_State_NotificationState_ProviderData_Slack) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Notification_State_NotificationState_ProviderData_Slack) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Notification_State_NotificationState_ProviderData_Slack) GetTs() string {
	if m != nil {
		return m.Ts
	}
	return ""
}

func (m *Notification_State_NotificationState_ProviderData_Slack) SetTs(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ts", "Notification_State_NotificationState_ProviderData_Slack"))
	}
	m.Ts = fv
}

// Pager Duty
type Notification_State_NotificationState_ProviderData_PagerDuty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	IncidentKey   string `protobuf:"bytes,1,opt,name=incident_key,json=incidentKey,proto3" json:"incident_key,omitempty" firestore:"incidentKey"`
}

func (m *Notification_State_NotificationState_ProviderData_PagerDuty) Reset() {
	*m = Notification_State_NotificationState_ProviderData_PagerDuty{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_notification_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Notification_State_NotificationState_ProviderData_PagerDuty) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Notification_State_NotificationState_ProviderData_PagerDuty) ProtoMessage() {}

func (m *Notification_State_NotificationState_ProviderData_PagerDuty) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_notification_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Notification_State_NotificationState_ProviderData_PagerDuty) GotenMessage() {}

// Deprecated, Use Notification_State_NotificationState_ProviderData_PagerDuty.ProtoReflect.Descriptor instead.
func (*Notification_State_NotificationState_ProviderData_PagerDuty) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_notification_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (m *Notification_State_NotificationState_ProviderData_PagerDuty) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Notification_State_NotificationState_ProviderData_PagerDuty) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Notification_State_NotificationState_ProviderData_PagerDuty) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Notification_State_NotificationState_ProviderData_PagerDuty) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Notification_State_NotificationState_ProviderData_PagerDuty) GetIncidentKey() string {
	if m != nil {
		return m.IncidentKey
	}
	return ""
}

func (m *Notification_State_NotificationState_ProviderData_PagerDuty) SetIncidentKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncidentKey", "Notification_State_NotificationState_ProviderData_PagerDuty"))
	}
	m.IncidentKey = fv
}

var edgelq_monitoring_proto_v3_notification_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v3_notification_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x33, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x11, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a, 0x0c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f,
	0x0a, 0x0f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x0a, 0x10, 0x0a,
	0x0e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x25, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0d, 0xb2, 0xda, 0x21, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x06,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xa1, 0x0a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x66,
	0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x45, 0x0a, 0x0f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x4c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x7b, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x33, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x1b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x1a, 0x8f, 0x06, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xb2, 0xda, 0x21, 0x17, 0x0a,
	0x15, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x69, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x1a, 0xa8, 0x02,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x60,
	0x0a, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x33, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b,
	0x12, 0x6d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72,
	0x44, 0x75, 0x74, 0x79, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79, 0x1a,
	0x17, 0x0a, 0x05, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x73, 0x1a, 0x2e, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65,
	0x72, 0x44, 0x75, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x7d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x50, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x54,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c,
	0x45, 0x44, 0x47, 0x45, 0x44, 0x10, 0x07, 0x3a, 0xf4, 0x04, 0xea, 0x41, 0x89, 0x01, 0x0a, 0x22,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x63, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x92, 0xd9, 0x21, 0xf6, 0x01, 0x0a, 0x0d, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0d, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x3a, 0x16, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x3a, 0x2d,
	0x5d, 0x7b, 0x31, 0x2c, 0x31, 0x32, 0x38, 0x7d, 0x4a, 0xa5, 0x01, 0x08, 0x02, 0x12, 0x0c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0f,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x3f, 0x0a, 0x25, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x05, 0xaa, 0xd9, 0x21, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x0a, 0x06, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x1a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xb2, 0xdf,
	0x21, 0x9f, 0x01, 0x0a, 0x87, 0x01, 0x0a, 0x0b, 0x62, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x56, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x12, 0x13, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0xfb,
	0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x51, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x18, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x62, 0x2e, 0x76, 0x33, 0x42, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x84, 0xd1, 0x02, 0x47, 0x0a, 0x0d, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x36, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x73, 0x2f, 0x76, 0x33, 0xa2, 0x80, 0xd1, 0x02, 0x53, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x33, 0x2f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v3_notification_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v3_notification_proto_rawDescData = edgelq_monitoring_proto_v3_notification_proto_rawDesc
)

func edgelq_monitoring_proto_v3_notification_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v3_notification_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v3_notification_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v3_notification_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v3_notification_proto_rawDescData
}

var edgelq_monitoring_proto_v3_notification_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_monitoring_proto_v3_notification_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var edgelq_monitoring_proto_v3_notification_proto_goTypes = []interface{}{
	(Notification_State_NotificationState_Status)(0),                    // 0: ntt.monitoring.v3.Notification_State_NotificationState_Status
	(*Notification)(nil),                                                // 1: ntt.monitoring.v3.Notification
	(*Notification_State)(nil),                                          // 2: ntt.monitoring.v3.Notification.State
	(*Notification_State_NotificationState)(nil),                        // 3: ntt.monitoring.v3.Notification.State.NotificationState
	(*Notification_State_NotificationState_ProviderData)(nil),           // 4: ntt.monitoring.v3.Notification.State.NotificationState.ProviderData
	(*Notification_State_NotificationState_ProviderData_Slack)(nil),     // 5: ntt.monitoring.v3.Notification.State.NotificationState.ProviderData.Slack
	(*Notification_State_NotificationState_ProviderData_PagerDuty)(nil), // 6: ntt.monitoring.v3.Notification.State.NotificationState.ProviderData.PagerDuty
	(*ntt_meta.Meta)(nil),                                               // 7: ntt.types.Meta
	(*monitoring_common.TimeRange)(nil),                                 // 8: ntt.monitoring.v3.TimeRange
}
var edgelq_monitoring_proto_v3_notification_proto_depIdxs = []int32{
	7, // 0: ntt.monitoring.v3.Notification.metadata:type_name -> ntt.types.Meta
	2, // 1: ntt.monitoring.v3.Notification.state:type_name -> ntt.monitoring.v3.Notification.State
	3, // 2: ntt.monitoring.v3.Notification.State.notification_state:type_name -> ntt.monitoring.v3.Notification.State.NotificationState
	8, // 3: ntt.monitoring.v3.Notification.State.alerts_lifetime:type_name -> ntt.monitoring.v3.TimeRange
	3, // 4: ntt.monitoring.v3.Notification.State.resolution_notification_state:type_name -> ntt.monitoring.v3.Notification.State.NotificationState
	0, // 5: ntt.monitoring.v3.Notification.State.NotificationState.status:type_name -> ntt.monitoring.v3.Notification_State_NotificationState_Status
	4, // 6: ntt.monitoring.v3.Notification.State.NotificationState.provider_data:type_name -> ntt.monitoring.v3.Notification.State.NotificationState.ProviderData
	5, // 7: ntt.monitoring.v3.Notification.State.NotificationState.ProviderData.slack:type_name -> ntt.monitoring.v3.Notification.State.NotificationState.ProviderData.Slack
	6, // 8: ntt.monitoring.v3.Notification.State.NotificationState.ProviderData.pager_duty:type_name -> ntt.monitoring.v3.Notification.State.NotificationState.ProviderData.PagerDuty
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v3_notification_proto_init() }
func edgelq_monitoring_proto_v3_notification_proto_init() {
	if edgelq_monitoring_proto_v3_notification_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v3_notification_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_notification_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_notification_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification_State_NotificationState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_notification_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification_State_NotificationState_ProviderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_notification_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification_State_NotificationState_ProviderData_Slack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_notification_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification_State_NotificationState_ProviderData_PagerDuty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v3_notification_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_monitoring_proto_v3_notification_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v3_notification_proto_depIdxs,
		EnumInfos:         edgelq_monitoring_proto_v3_notification_proto_enumTypes,
		MessageInfos:      edgelq_monitoring_proto_v3_notification_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v3_notification_proto = out.File
	edgelq_monitoring_proto_v3_notification_proto_rawDesc = nil
	edgelq_monitoring_proto_v3_notification_proto_goTypes = nil
	edgelq_monitoring_proto_v3_notification_proto_depIdxs = nil
}
