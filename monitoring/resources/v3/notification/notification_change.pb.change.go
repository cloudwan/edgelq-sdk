// Code generated by protoc-gen-goten-resource
// Resource change: NotificationChange
// DO NOT EDIT!!!

package notification

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_policy"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &alerting_policy.AlertingPolicy{}
	_ = &fieldmaskpb.FieldMask{}
)

func (c *NotificationChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*NotificationChange_Added_)
	return ok
}

func (c *NotificationChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*NotificationChange_Modified_)
	return ok
}

func (c *NotificationChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*NotificationChange_Current_)
	return ok
}

func (c *NotificationChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*NotificationChange_Removed_)
	return ok
}

func (c *NotificationChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *NotificationChange_Added_:
		return cType.Added.ViewIndex
	case *NotificationChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *NotificationChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *NotificationChange_Removed_:
		return cType.Removed.ViewIndex
	case *NotificationChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *NotificationChange) GetNotification() *Notification {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *NotificationChange_Added_:
		return cType.Added.Notification
	case *NotificationChange_Modified_:
		return cType.Modified.Notification
	case *NotificationChange_Current_:
		return cType.Current.Notification
	case *NotificationChange_Removed_:
		return nil
	}
	return nil
}

func (c *NotificationChange) GetRawResource() gotenresource.Resource {
	return c.GetNotification()
}

func (c *NotificationChange) GetNotificationName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *NotificationChange_Added_:
		return cType.Added.Notification.GetName()
	case *NotificationChange_Modified_:
		return cType.Modified.Name
	case *NotificationChange_Current_:
		return cType.Current.Notification.GetName()
	case *NotificationChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *NotificationChange) GetRawName() gotenresource.Name {
	return c.GetNotificationName()
}

func (c *NotificationChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &NotificationChange_Added_{
		Added: &NotificationChange_Added{
			Notification: snapshot.(*Notification),
			ViewIndex:    int32(idx),
		},
	}
}

func (c *NotificationChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &NotificationChange_Modified_{
		Modified: &NotificationChange_Modified{
			Name:              name.(*Name),
			Notification:      snapshot.(*Notification),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *NotificationChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &NotificationChange_Current_{
		Current: &NotificationChange_Current{
			Notification: snapshot.(*Notification),
		},
	}
}

func (c *NotificationChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &NotificationChange_Removed_{
		Removed: &NotificationChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
