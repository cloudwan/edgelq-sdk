// Code generated by protoc-gen-goten-resource
// Resource: RecoveryStoreShardingInfo
// DO NOT EDIT!!!

package recovery_store_sharding_info

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &duration.Duration{}
	_ = &timestamp.Timestamp{}
)

type RecoveryStoreShardingInfoList []*RecoveryStoreShardingInfo

func (l RecoveryStoreShardingInfoList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*RecoveryStoreShardingInfo))
}

func (l RecoveryStoreShardingInfoList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(RecoveryStoreShardingInfoList)...)
}

func (l RecoveryStoreShardingInfoList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l RecoveryStoreShardingInfoList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l RecoveryStoreShardingInfoList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*RecoveryStoreShardingInfo)
}

func (l RecoveryStoreShardingInfoList) Length() int {
	return len(l)
}

type RecoveryStoreShardingInfoChangeList []*RecoveryStoreShardingInfoChange

func (l RecoveryStoreShardingInfoChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*RecoveryStoreShardingInfoChange))
}

func (l RecoveryStoreShardingInfoChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(RecoveryStoreShardingInfoChangeList)...)
}

func (l RecoveryStoreShardingInfoChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l RecoveryStoreShardingInfoChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l RecoveryStoreShardingInfoChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*RecoveryStoreShardingInfoChange)
}

func (l RecoveryStoreShardingInfoChangeList) Length() int {
	return len(l)
}

type RecoveryStoreShardingInfoNameList []*Name

func (l RecoveryStoreShardingInfoNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l RecoveryStoreShardingInfoNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(RecoveryStoreShardingInfoNameList)...)
}

func (l RecoveryStoreShardingInfoNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l RecoveryStoreShardingInfoNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l RecoveryStoreShardingInfoNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l RecoveryStoreShardingInfoNameList) Length() int {
	return len(l)
}

type RecoveryStoreShardingInfoReferenceList []*Reference

func (l RecoveryStoreShardingInfoReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l RecoveryStoreShardingInfoReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(RecoveryStoreShardingInfoReferenceList)...)
}

func (l RecoveryStoreShardingInfoReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l RecoveryStoreShardingInfoReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l RecoveryStoreShardingInfoReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l RecoveryStoreShardingInfoReferenceList) Length() int {
	return len(l)
}

type RecoveryStoreShardingInfoParentNameList []*ParentName

func (l RecoveryStoreShardingInfoParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l RecoveryStoreShardingInfoParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(RecoveryStoreShardingInfoParentNameList)...)
}

func (l RecoveryStoreShardingInfoParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l RecoveryStoreShardingInfoParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l RecoveryStoreShardingInfoParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l RecoveryStoreShardingInfoParentNameList) Length() int {
	return len(l)
}

type RecoveryStoreShardingInfoParentReferenceList []*ParentReference

func (l RecoveryStoreShardingInfoParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l RecoveryStoreShardingInfoParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(RecoveryStoreShardingInfoParentReferenceList)...)
}

func (l RecoveryStoreShardingInfoParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l RecoveryStoreShardingInfoParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l RecoveryStoreShardingInfoParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l RecoveryStoreShardingInfoParentReferenceList) Length() int {
	return len(l)
}

type RecoveryStoreShardingInfoMap map[Name]*RecoveryStoreShardingInfo

func (m RecoveryStoreShardingInfoMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m RecoveryStoreShardingInfoMap) Set(res gotenresource.Resource) {
	tRes := res.(*RecoveryStoreShardingInfo)
	m[*tRes.Name] = tRes
}

func (m RecoveryStoreShardingInfoMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m RecoveryStoreShardingInfoMap) Length() int {
	return len(m)
}

func (m RecoveryStoreShardingInfoMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type RecoveryStoreShardingInfoChangeMap map[Name]*RecoveryStoreShardingInfoChange

func (m RecoveryStoreShardingInfoChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m RecoveryStoreShardingInfoChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*RecoveryStoreShardingInfoChange)
	m[*tChange.GetRecoveryStoreShardingInfoName()] = tChange
}

func (m RecoveryStoreShardingInfoChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m RecoveryStoreShardingInfoChangeMap) Length() int {
	return len(m)
}

func (m RecoveryStoreShardingInfoChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
