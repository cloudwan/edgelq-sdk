// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v3/recovery_store_sharding_info.proto
// DO NOT EDIT!!!

package recovery_store_sharding_info

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RecoveryStoreShardingInfo Resource
type RecoveryStoreShardingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of RecoveryStoreShardingInfo
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-zA-Z0-9_.-]{1,128}
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Period during which this sharding spec is valid.
	ValidityPeriod *RecoveryStoreShardingInfo_ValidityPeriod `protobuf:"bytes,2,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty" firestore:"validityPeriod"`
	// Sharding spec for given validity period.
	Spec *RecoveryStoreShardingInfo_ShardingSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	// metadata
	Metadata *meta.Meta `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
}

func (m *RecoveryStoreShardingInfo) Reset() {
	*m = RecoveryStoreShardingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *RecoveryStoreShardingInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*RecoveryStoreShardingInfo) ProtoMessage() {}

func (m *RecoveryStoreShardingInfo) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*RecoveryStoreShardingInfo) GotenMessage() {}

// Deprecated, Use RecoveryStoreShardingInfo.ProtoReflect.Descriptor instead.
func (*RecoveryStoreShardingInfo) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDescGZIP(), []int{0}
}

func (m *RecoveryStoreShardingInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *RecoveryStoreShardingInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *RecoveryStoreShardingInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *RecoveryStoreShardingInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *RecoveryStoreShardingInfo) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *RecoveryStoreShardingInfo) GetValidityPeriod() *RecoveryStoreShardingInfo_ValidityPeriod {
	if m != nil {
		return m.ValidityPeriod
	}
	return nil
}

func (m *RecoveryStoreShardingInfo) GetSpec() *RecoveryStoreShardingInfo_ShardingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *RecoveryStoreShardingInfo) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *RecoveryStoreShardingInfo) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "RecoveryStoreShardingInfo"))
	}
	m.Name = fv
}

func (m *RecoveryStoreShardingInfo) SetValidityPeriod(fv *RecoveryStoreShardingInfo_ValidityPeriod) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ValidityPeriod", "RecoveryStoreShardingInfo"))
	}
	m.ValidityPeriod = fv
}

func (m *RecoveryStoreShardingInfo) SetSpec(fv *RecoveryStoreShardingInfo_ShardingSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "RecoveryStoreShardingInfo"))
	}
	m.Spec = fv
}

func (m *RecoveryStoreShardingInfo) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "RecoveryStoreShardingInfo"))
	}
	m.Metadata = fv
}

// Validity period specifies for which period of time this sharding spec is
// valid.
type RecoveryStoreShardingInfo_ValidityPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Start time of validity period.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" firestore:"startTime"`
	// End time of validity period.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" firestore:"endTime"`
}

func (m *RecoveryStoreShardingInfo_ValidityPeriod) Reset() {
	*m = RecoveryStoreShardingInfo_ValidityPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *RecoveryStoreShardingInfo_ValidityPeriod) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*RecoveryStoreShardingInfo_ValidityPeriod) ProtoMessage() {}

func (m *RecoveryStoreShardingInfo_ValidityPeriod) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*RecoveryStoreShardingInfo_ValidityPeriod) GotenMessage() {}

// Deprecated, Use RecoveryStoreShardingInfo_ValidityPeriod.ProtoReflect.Descriptor instead.
func (*RecoveryStoreShardingInfo_ValidityPeriod) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDescGZIP(), []int{0, 0}
}

func (m *RecoveryStoreShardingInfo_ValidityPeriod) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *RecoveryStoreShardingInfo_ValidityPeriod) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *RecoveryStoreShardingInfo_ValidityPeriod) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *RecoveryStoreShardingInfo_ValidityPeriod) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *RecoveryStoreShardingInfo_ValidityPeriod) GetStartTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *RecoveryStoreShardingInfo_ValidityPeriod) GetEndTime() *timestamppb.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *RecoveryStoreShardingInfo_ValidityPeriod) SetStartTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartTime", "RecoveryStoreShardingInfo_ValidityPeriod"))
	}
	m.StartTime = fv
}

func (m *RecoveryStoreShardingInfo_ValidityPeriod) SetEndTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EndTime", "RecoveryStoreShardingInfo_ValidityPeriod"))
	}
	m.EndTime = fv
}

// Sharding spec defines how time series points is divided across two
// dimensions: key (shards_count) and time (ts_blob_period).
type RecoveryStoreShardingInfo_ShardingSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Defines period of time series points in a single blob.
	TsBlobPeriod *durationpb.Duration `protobuf:"bytes,1,opt,name=ts_blob_period,json=tsBlobPeriod,proto3" json:"ts_blob_period,omitempty" firestore:"tsBlobPeriod"`
	// Number of shards (by key) in given shard period
	ShardsCount uint32 `protobuf:"varint,2,opt,name=shards_count,json=shardsCount,proto3" json:"shards_count,omitempty" firestore:"shardsCount"`
}

func (m *RecoveryStoreShardingInfo_ShardingSpec) Reset() {
	*m = RecoveryStoreShardingInfo_ShardingSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *RecoveryStoreShardingInfo_ShardingSpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*RecoveryStoreShardingInfo_ShardingSpec) ProtoMessage() {}

func (m *RecoveryStoreShardingInfo_ShardingSpec) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*RecoveryStoreShardingInfo_ShardingSpec) GotenMessage() {}

// Deprecated, Use RecoveryStoreShardingInfo_ShardingSpec.ProtoReflect.Descriptor instead.
func (*RecoveryStoreShardingInfo_ShardingSpec) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDescGZIP(), []int{0, 1}
}

func (m *RecoveryStoreShardingInfo_ShardingSpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *RecoveryStoreShardingInfo_ShardingSpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *RecoveryStoreShardingInfo_ShardingSpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *RecoveryStoreShardingInfo_ShardingSpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *RecoveryStoreShardingInfo_ShardingSpec) GetTsBlobPeriod() *durationpb.Duration {
	if m != nil {
		return m.TsBlobPeriod
	}
	return nil
}

func (m *RecoveryStoreShardingInfo_ShardingSpec) GetShardsCount() uint32 {
	if m != nil {
		return m.ShardsCount
	}
	return uint32(0)
}

func (m *RecoveryStoreShardingInfo_ShardingSpec) SetTsBlobPeriod(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TsBlobPeriod", "RecoveryStoreShardingInfo_ShardingSpec"))
	}
	m.TsBlobPeriod = fv
}

func (m *RecoveryStoreShardingInfo_ShardingSpec) SetShardsCount(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ShardsCount", "RecoveryStoreShardingInfo_ShardingSpec"))
	}
	m.ShardsCount = fv
}

var edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x33, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x06, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xb2, 0xda, 0x21, 0x1d, 0x0a, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x0f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x4d, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x82, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x72, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x73, 0x42, 0x6c, 0x6f, 0x62,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0xff, 0x01, 0xea, 0x41, 0x7d, 0x0a,
	0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x7d, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x7d, 0x92, 0xd9, 0x21, 0x69,
	0x0a, 0x1a, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1a, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x18, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x2a, 0x15, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e,
	0x2d, 0x5d, 0x7b, 0x31, 0x2c, 0x31, 0x32, 0x38, 0x7d, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x02, 0x42, 0x9c, 0x03, 0xe8, 0xde,
	0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x71, 0x0a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x4b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0xa2, 0x80, 0xd1, 0x02, 0x73, 0x0a, 0x23, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x33, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x33, 0x42, 0x1e, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x33,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x3b, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDescData = edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDesc
)

func edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDescData
}

var edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_goTypes = []interface{}{
	(*RecoveryStoreShardingInfo)(nil),                // 0: ntt.monitoring.v3.RecoveryStoreShardingInfo
	(*RecoveryStoreShardingInfo_ValidityPeriod)(nil), // 1: ntt.monitoring.v3.RecoveryStoreShardingInfo.ValidityPeriod
	(*RecoveryStoreShardingInfo_ShardingSpec)(nil),   // 2: ntt.monitoring.v3.RecoveryStoreShardingInfo.ShardingSpec
	(*meta.Meta)(nil),                                // 3: goten.types.Meta
	(*timestamppb.Timestamp)(nil),                    // 4: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                      // 5: google.protobuf.Duration
}
var edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_depIdxs = []int32{
	1, // 0: ntt.monitoring.v3.RecoveryStoreShardingInfo.validity_period:type_name -> ntt.monitoring.v3.RecoveryStoreShardingInfo.ValidityPeriod
	2, // 1: ntt.monitoring.v3.RecoveryStoreShardingInfo.spec:type_name -> ntt.monitoring.v3.RecoveryStoreShardingInfo.ShardingSpec
	3, // 2: ntt.monitoring.v3.RecoveryStoreShardingInfo.metadata:type_name -> goten.types.Meta
	4, // 3: ntt.monitoring.v3.RecoveryStoreShardingInfo.ValidityPeriod.start_time:type_name -> google.protobuf.Timestamp
	4, // 4: ntt.monitoring.v3.RecoveryStoreShardingInfo.ValidityPeriod.end_time:type_name -> google.protobuf.Timestamp
	5, // 5: ntt.monitoring.v3.RecoveryStoreShardingInfo.ShardingSpec.ts_blob_period:type_name -> google.protobuf.Duration
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_init() }
func edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_init() {
	if edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryStoreShardingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryStoreShardingInfo_ValidityPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryStoreShardingInfo_ShardingSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_depIdxs,
		MessageInfos:      edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto = out.File
	edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_rawDesc = nil
	edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_goTypes = nil
	edgelq_monitoring_proto_v3_recovery_store_sharding_info_proto_depIdxs = nil
}
