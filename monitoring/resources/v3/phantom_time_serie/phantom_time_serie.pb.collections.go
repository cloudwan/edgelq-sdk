// Code generated by protoc-gen-goten-resource
// Resource: PhantomTimeSerie
// DO NOT EDIT!!!

package phantom_time_serie

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/common"
	metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/metric_descriptor"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &common.LabelDescriptor{}
	_ = &metric_descriptor.MetricDescriptor{}
	_ = &project.Project{}
	_ = &meta.Meta{}
)

type PhantomTimeSerieList []*PhantomTimeSerie

func (l PhantomTimeSerieList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*PhantomTimeSerie))
}

func (l PhantomTimeSerieList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(PhantomTimeSerieList)...)
}

func (l PhantomTimeSerieList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PhantomTimeSerieList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l PhantomTimeSerieList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*PhantomTimeSerie)
}

func (l PhantomTimeSerieList) Length() int {
	return len(l)
}

type PhantomTimeSerieChangeList []*PhantomTimeSerieChange

func (l PhantomTimeSerieChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*PhantomTimeSerieChange))
}

func (l PhantomTimeSerieChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(PhantomTimeSerieChangeList)...)
}

func (l PhantomTimeSerieChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PhantomTimeSerieChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l PhantomTimeSerieChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*PhantomTimeSerieChange)
}

func (l PhantomTimeSerieChangeList) Length() int {
	return len(l)
}

type PhantomTimeSerieNameList []*Name

func (l PhantomTimeSerieNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l PhantomTimeSerieNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(PhantomTimeSerieNameList)...)
}

func (l PhantomTimeSerieNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PhantomTimeSerieNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l PhantomTimeSerieNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l PhantomTimeSerieNameList) Length() int {
	return len(l)
}

type PhantomTimeSerieReferenceList []*Reference

func (l PhantomTimeSerieReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l PhantomTimeSerieReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(PhantomTimeSerieReferenceList)...)
}

func (l PhantomTimeSerieReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PhantomTimeSerieReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l PhantomTimeSerieReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l PhantomTimeSerieReferenceList) Length() int {
	return len(l)
}

type PhantomTimeSerieParentNameList []*ParentName

func (l PhantomTimeSerieParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l PhantomTimeSerieParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(PhantomTimeSerieParentNameList)...)
}

func (l PhantomTimeSerieParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PhantomTimeSerieParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l PhantomTimeSerieParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l PhantomTimeSerieParentNameList) Length() int {
	return len(l)
}

type PhantomTimeSerieParentReferenceList []*ParentReference

func (l PhantomTimeSerieParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l PhantomTimeSerieParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(PhantomTimeSerieParentReferenceList)...)
}

func (l PhantomTimeSerieParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PhantomTimeSerieParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l PhantomTimeSerieParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l PhantomTimeSerieParentReferenceList) Length() int {
	return len(l)
}

type PhantomTimeSerieMap map[Name]*PhantomTimeSerie

func (m PhantomTimeSerieMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m PhantomTimeSerieMap) Set(res gotenresource.Resource) {
	tRes := res.(*PhantomTimeSerie)
	m[*tRes.Name] = tRes
}

func (m PhantomTimeSerieMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m PhantomTimeSerieMap) Length() int {
	return len(m)
}

func (m PhantomTimeSerieMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type PhantomTimeSerieChangeMap map[Name]*PhantomTimeSerieChange

func (m PhantomTimeSerieChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m PhantomTimeSerieChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*PhantomTimeSerieChange)
	m[*tChange.GetPhantomTimeSerieName()] = tChange
}

func (m PhantomTimeSerieChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m PhantomTimeSerieChangeMap) Length() int {
	return len(m)
}

func (m PhantomTimeSerieChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
