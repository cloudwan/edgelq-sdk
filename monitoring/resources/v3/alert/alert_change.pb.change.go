// Code generated by protoc-gen-goten-resource
// Resource change: AlertChange
// DO NOT EDIT!!!

package alert

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	alerting_condition "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_condition"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &alerting_condition.AlertingCondition{}
	_ = &field_mask.FieldMask{}
)

func (c *AlertChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*AlertChange_Added_)
	return ok
}

func (c *AlertChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*AlertChange_Modified_)
	return ok
}

func (c *AlertChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*AlertChange_Current_)
	return ok
}

func (c *AlertChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*AlertChange_Removed_)
	return ok
}

func (c *AlertChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *AlertChange_Added_:
		return cType.Added.ViewIndex
	case *AlertChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *AlertChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *AlertChange_Removed_:
		return cType.Removed.ViewIndex
	case *AlertChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *AlertChange) GetAlert() *Alert {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *AlertChange_Added_:
		return cType.Added.Alert
	case *AlertChange_Modified_:
		return cType.Modified.Alert
	case *AlertChange_Current_:
		return cType.Current.Alert
	case *AlertChange_Removed_:
		return nil
	}
	return nil
}

func (c *AlertChange) GetResource() gotenresource.Resource {
	return c.GetAlert()
}

func (c *AlertChange) GetAlertName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *AlertChange_Added_:
		return cType.Added.Alert.GetName()
	case *AlertChange_Modified_:
		return cType.Modified.Name
	case *AlertChange_Current_:
		return cType.Current.Alert.GetName()
	case *AlertChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *AlertChange) GetRawName() gotenresource.Name {
	return c.GetAlertName()
}

func (c *AlertChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &AlertChange_Added_{
		Added: &AlertChange_Added{
			Alert:     snapshot.(*Alert),
			ViewIndex: int32(idx),
		},
	}
}

func (c *AlertChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &AlertChange_Modified_{
		Modified: &AlertChange_Modified{
			Name:              name.(*Name),
			Alert:             snapshot.(*Alert),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *AlertChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &AlertChange_Current_{
		Current: &AlertChange_Current{
			Alert: snapshot.(*Alert),
		},
	}
}

func (c *AlertChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &AlertChange_Removed_{
		Removed: &AlertChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
