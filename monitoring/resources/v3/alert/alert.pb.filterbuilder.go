// Code generated by protoc-gen-goten-resource
// Resource: Alert
// DO NOT EDIT!!!

package alert

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	multi_region_policy "github.com/cloudwan/edgelq-sdk/common/types/multi_region_policy"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/common/v3"
	alerting_condition "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_condition"
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_policy"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
	_ = &alerting_condition.AlertingCondition{}
	_ = &alerting_policy.AlertingPolicy{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &project.Project{}
	_ = &duration.Duration{}
	_ = &timestamp.Timestamp{}
)

type FilterBuilderOrCondition interface {
	_IsAlertFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsAlertFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp Alert_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      Alert_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Info() *filterCndBuilderInfo {
	return &filterCndBuilderInfo{builder: b.builder}
}

func (b *filterCndBuilder) State() *filterCndBuilderState {
	return &filterCndBuilderState{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) DeleteTime() *filterCndBuilderMetadataDeleteTime {
	return &filterCndBuilderMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Lifecycle() *filterCndBuilderMetadataLifecycle {
	return &filterCndBuilderMetadataLifecycle{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataDeleteTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewAlertFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewAlertFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewAlertFieldPathBuilder().Metadata().Tags()
	itemValues := make([]Alert_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewAlertFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewAlertFieldPathBuilder().Metadata().Tags()
	itemValues := make([]Alert_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewAlertFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewAlertFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewAlertFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]Alert_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewAlertFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]Alert_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Version() *filterCndBuilderMetadataOwnerReferencesVersion {
	return &filterCndBuilderMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Region() *filterCndBuilderMetadataOwnerReferencesRegion {
	return &filterCndBuilderMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) BlockOwnerDeletion() *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion {
	return &filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewAlertFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewAlertFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewAlertFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]Alert_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewAlertFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewAlertFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]Alert_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewAlertFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycle) Eq(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Neq(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gt(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gte(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lt(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lte(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycle) In(values []*ntt_meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) NotIn(values []*ntt_meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLifecycle) State() *filterCndBuilderMetadataLifecycleState {
	return &filterCndBuilderMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderMetadataLifecycle) BlockDeletion() *filterCndBuilderMetadataLifecycleBlockDeletion {
	return &filterCndBuilderMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleState) Eq(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Neq(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gt(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gte(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lt(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lte(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) In(values []ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) NotIn(values []ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderInfo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfo) Eq(value *Alert_Info) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfo) Neq(value *Alert_Info) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfo) Gt(value *Alert_Info) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfo) Gte(value *Alert_Info) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfo) Lt(value *Alert_Info) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfo) Lte(value *Alert_Info) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfo) In(values []*Alert_Info) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfo) NotIn(values []*Alert_Info) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().FieldPath(),
	})
}

func (b *filterCndBuilderInfo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().FieldPath(),
	})
}

func (b *filterCndBuilderInfo) compare(op gotenfilter.CompareOperator, value *Alert_Info) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().WithValue(value),
	})
}

func (b *filterCndBuilderInfo) TimeSerie() *filterCndBuilderInfoTimeSerie {
	return &filterCndBuilderInfoTimeSerie{builder: b.builder}
}

func (b *filterCndBuilderInfo) ObservedValues() *filterCndBuilderInfoObservedValues {
	return &filterCndBuilderInfoObservedValues{builder: b.builder}
}

type filterCndBuilderInfoTimeSerie struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoTimeSerie) Eq(value *Alert_Info_TimeSerie) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoTimeSerie) Neq(value *Alert_Info_TimeSerie) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoTimeSerie) Gt(value *Alert_Info_TimeSerie) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoTimeSerie) Gte(value *Alert_Info_TimeSerie) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoTimeSerie) Lt(value *Alert_Info_TimeSerie) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoTimeSerie) Lte(value *Alert_Info_TimeSerie) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoTimeSerie) In(values []*Alert_Info_TimeSerie) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerie) NotIn(values []*Alert_Info_TimeSerie) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerie) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerie) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerie) compare(op gotenfilter.CompareOperator, value *Alert_Info_TimeSerie) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().TimeSerie().WithValue(value),
	})
}

func (b *filterCndBuilderInfoTimeSerie) Key() *filterCndBuilderInfoTimeSerieKey {
	return &filterCndBuilderInfoTimeSerieKey{builder: b.builder}
}

func (b *filterCndBuilderInfoTimeSerie) Metric() *filterCndBuilderInfoTimeSerieMetric {
	return &filterCndBuilderInfoTimeSerieMetric{builder: b.builder}
}

func (b *filterCndBuilderInfoTimeSerie) MonitoredResource() *filterCndBuilderInfoTimeSerieMonitoredResource {
	return &filterCndBuilderInfoTimeSerieMonitoredResource{builder: b.builder}
}

type filterCndBuilderInfoTimeSerieKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoTimeSerieKey) Eq(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoTimeSerieKey) Neq(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoTimeSerieKey) Gt(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoTimeSerieKey) Gte(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoTimeSerieKey) Lt(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoTimeSerieKey) Lte(value []byte) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoTimeSerieKey) In(values [][]byte) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieKey) NotIn(values [][]byte) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Key().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Key().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieKey) compare(op gotenfilter.CompareOperator, value []byte) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().TimeSerie().Key().WithValue(value),
	})
}

type filterCndBuilderInfoTimeSerieMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoTimeSerieMetric) Eq(value *monitoring_common.Metric) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoTimeSerieMetric) Neq(value *monitoring_common.Metric) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoTimeSerieMetric) Gt(value *monitoring_common.Metric) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoTimeSerieMetric) Gte(value *monitoring_common.Metric) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoTimeSerieMetric) Lt(value *monitoring_common.Metric) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoTimeSerieMetric) Lte(value *monitoring_common.Metric) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoTimeSerieMetric) In(values []*monitoring_common.Metric) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetric) NotIn(values []*monitoring_common.Metric) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetric) compare(op gotenfilter.CompareOperator, value *monitoring_common.Metric) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().WithValue(value),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetric) Type() *filterCndBuilderInfoTimeSerieMetricType {
	return &filterCndBuilderInfoTimeSerieMetricType{builder: b.builder}
}

func (b *filterCndBuilderInfoTimeSerieMetric) Labels() *filterCndBuilderInfoTimeSerieMetricLabels {
	return &filterCndBuilderInfoTimeSerieMetricLabels{builder: b.builder}
}

func (b *filterCndBuilderInfoTimeSerieMetric) ReducedLabels() *filterCndBuilderInfoTimeSerieMetricReducedLabels {
	return &filterCndBuilderInfoTimeSerieMetricReducedLabels{builder: b.builder}
}

type filterCndBuilderInfoTimeSerieMetricType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoTimeSerieMetricType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Type().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Type().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Type().WithValue(value),
	})
}

type filterCndBuilderInfoTimeSerieMetricLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoTimeSerieMetricLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricLabels) WithKey(key string) *mapFilterCndBuilderInfoTimeSerieMetricLabels {
	return &mapFilterCndBuilderInfoTimeSerieMetricLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderInfoTimeSerieMetricLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderInfoTimeSerieMetricLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderInfoTimeSerieMetricLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderInfoTimeSerieMetricLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderInfoTimeSerieMetricLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderInfoTimeSerieMetricLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderInfoTimeSerieMetricLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderInfoTimeSerieMetricLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderInfoTimeSerieMetricLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderInfoTimeSerieMetricLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderInfoTimeSerieMetricLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderInfoTimeSerieMetricLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderInfoTimeSerieMetricReducedLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().ReducedLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().ReducedLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().ReducedLabels().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().ReducedLabels().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().ReducedLabels().FieldPath(),
		Value:     NewAlertFieldPathBuilder().Info().TimeSerie().Metric().ReducedLabels().WithItemValue(value),
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewAlertFieldPathBuilder().Info().TimeSerie().Metric().ReducedLabels()
	itemValues := make([]Alert_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().ReducedLabels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewAlertFieldPathBuilder().Info().TimeSerie().Metric().ReducedLabels()
	itemValues := make([]Alert_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().ReducedLabels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderInfoTimeSerieMetricReducedLabels) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().TimeSerie().Metric().ReducedLabels().WithValue(value),
	})
}

type filterCndBuilderInfoTimeSerieMonitoredResource struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) Eq(value *monitoring_common.MonitoredResource) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) Neq(value *monitoring_common.MonitoredResource) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) Gt(value *monitoring_common.MonitoredResource) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) Gte(value *monitoring_common.MonitoredResource) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) Lt(value *monitoring_common.MonitoredResource) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) Lte(value *monitoring_common.MonitoredResource) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) In(values []*monitoring_common.MonitoredResource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) NotIn(values []*monitoring_common.MonitoredResource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) compare(op gotenfilter.CompareOperator, value *monitoring_common.MonitoredResource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().WithValue(value),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) Type() *filterCndBuilderInfoTimeSerieMonitoredResourceType {
	return &filterCndBuilderInfoTimeSerieMonitoredResourceType{builder: b.builder}
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) Labels() *filterCndBuilderInfoTimeSerieMonitoredResourceLabels {
	return &filterCndBuilderInfoTimeSerieMonitoredResourceLabels{builder: b.builder}
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResource) ReducedLabels() *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels {
	return &filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels{builder: b.builder}
}

type filterCndBuilderInfoTimeSerieMonitoredResourceType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Type().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Type().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Type().WithValue(value),
	})
}

type filterCndBuilderInfoTimeSerieMonitoredResourceLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceLabels) WithKey(key string) *mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels {
	return &mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderInfoTimeSerieMonitoredResourceLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().ReducedLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().ReducedLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().ReducedLabels().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().ReducedLabels().FieldPath(),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().ReducedLabels().FieldPath(),
		Value:     NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().ReducedLabels().WithItemValue(value),
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().ReducedLabels()
	itemValues := make([]Alert_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().ReducedLabels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().ReducedLabels()
	itemValues := make([]Alert_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().ReducedLabels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderInfoTimeSerieMonitoredResourceReducedLabels) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().TimeSerie().MonitoredResource().ReducedLabels().WithValue(value),
	})
}

type filterCndBuilderInfoObservedValues struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoObservedValues) Eq(value *Alert_Info_ObservedValues) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoObservedValues) Neq(value *Alert_Info_ObservedValues) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoObservedValues) Gt(value *Alert_Info_ObservedValues) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoObservedValues) Gte(value *Alert_Info_ObservedValues) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoObservedValues) Lt(value *Alert_Info_ObservedValues) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoObservedValues) Lte(value *Alert_Info_ObservedValues) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoObservedValues) In(values []*Alert_Info_ObservedValues) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().ObservedValues().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoObservedValues) NotIn(values []*Alert_Info_ObservedValues) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().ObservedValues().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoObservedValues) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().ObservedValues().FieldPath(),
	})
}

func (b *filterCndBuilderInfoObservedValues) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().ObservedValues().FieldPath(),
	})
}

func (b *filterCndBuilderInfoObservedValues) compare(op gotenfilter.CompareOperator, value *Alert_Info_ObservedValues) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().ObservedValues().WithValue(value),
	})
}

func (b *filterCndBuilderInfoObservedValues) ExampleValue() *filterCndBuilderInfoObservedValuesExampleValue {
	return &filterCndBuilderInfoObservedValuesExampleValue{builder: b.builder}
}

func (b *filterCndBuilderInfoObservedValues) PerMetric() *filterCndBuilderInfoObservedValuesPerMetric {
	return &filterCndBuilderInfoObservedValuesPerMetric{builder: b.builder}
}

type filterCndBuilderInfoObservedValuesExampleValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoObservedValuesExampleValue) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoObservedValuesExampleValue) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoObservedValuesExampleValue) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoObservedValuesExampleValue) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoObservedValuesExampleValue) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoObservedValuesExampleValue) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoObservedValuesExampleValue) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().ObservedValues().ExampleValue().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoObservedValuesExampleValue) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().ObservedValues().ExampleValue().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoObservedValuesExampleValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().ObservedValues().ExampleValue().FieldPath(),
	})
}

func (b *filterCndBuilderInfoObservedValuesExampleValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().ObservedValues().ExampleValue().FieldPath(),
	})
}

func (b *filterCndBuilderInfoObservedValuesExampleValue) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().ObservedValues().ExampleValue().WithValue(value),
	})
}

type filterCndBuilderInfoObservedValuesPerMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderInfoObservedValuesPerMetric) Eq(value map[string]float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderInfoObservedValuesPerMetric) Neq(value map[string]float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderInfoObservedValuesPerMetric) Gt(value map[string]float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderInfoObservedValuesPerMetric) Gte(value map[string]float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderInfoObservedValuesPerMetric) Lt(value map[string]float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderInfoObservedValuesPerMetric) Lte(value map[string]float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderInfoObservedValuesPerMetric) In(values []map[string]float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().ObservedValues().PerMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoObservedValuesPerMetric) NotIn(values []map[string]float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().ObservedValues().PerMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderInfoObservedValuesPerMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().ObservedValues().PerMetric().FieldPath(),
	})
}

func (b *filterCndBuilderInfoObservedValuesPerMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().ObservedValues().PerMetric().FieldPath(),
	})
}

func (b *filterCndBuilderInfoObservedValuesPerMetric) compare(op gotenfilter.CompareOperator, value map[string]float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().ObservedValues().PerMetric().WithValue(value),
	})
}

func (b *filterCndBuilderInfoObservedValuesPerMetric) WithKey(key string) *mapFilterCndBuilderInfoObservedValuesPerMetric {
	return &mapFilterCndBuilderInfoObservedValuesPerMetric{builder: b.builder, key: key}
}

type mapFilterCndBuilderInfoObservedValuesPerMetric struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderInfoObservedValuesPerMetric) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderInfoObservedValuesPerMetric) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderInfoObservedValuesPerMetric) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderInfoObservedValuesPerMetric) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderInfoObservedValuesPerMetric) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderInfoObservedValuesPerMetric) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderInfoObservedValuesPerMetric) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().ObservedValues().PerMetric().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderInfoObservedValuesPerMetric) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().Info().ObservedValues().PerMetric().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderInfoObservedValuesPerMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().Info().ObservedValues().PerMetric().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderInfoObservedValuesPerMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().Info().ObservedValues().PerMetric().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderInfoObservedValuesPerMetric) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().Info().ObservedValues().PerMetric().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderState) Eq(value *Alert_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderState) Neq(value *Alert_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderState) Gt(value *Alert_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderState) Gte(value *Alert_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderState) Lt(value *Alert_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderState) Lte(value *Alert_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderState) In(values []*Alert_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderState) NotIn(values []*Alert_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().State().FieldPath(),
	})
}

func (b *filterCndBuilderState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().State().FieldPath(),
	})
}

func (b *filterCndBuilderState) compare(op gotenfilter.CompareOperator, value *Alert_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().State().WithValue(value),
	})
}

func (b *filterCndBuilderState) IsFiring() *filterCndBuilderStateIsFiring {
	return &filterCndBuilderStateIsFiring{builder: b.builder}
}

func (b *filterCndBuilderState) IsAcknowledged() *filterCndBuilderStateIsAcknowledged {
	return &filterCndBuilderStateIsAcknowledged{builder: b.builder}
}

func (b *filterCndBuilderState) IsSilenced() *filterCndBuilderStateIsSilenced {
	return &filterCndBuilderStateIsSilenced{builder: b.builder}
}

func (b *filterCndBuilderState) Lifetime() *filterCndBuilderStateLifetime {
	return &filterCndBuilderStateLifetime{builder: b.builder}
}

func (b *filterCndBuilderState) Notification() *filterCndBuilderStateNotification {
	return &filterCndBuilderStateNotification{builder: b.builder}
}

type filterCndBuilderStateIsFiring struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateIsFiring) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateIsFiring) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateIsFiring) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateIsFiring) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateIsFiring) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateIsFiring) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateIsFiring) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().IsFiring().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateIsFiring) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().IsFiring().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateIsFiring) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().State().IsFiring().FieldPath(),
	})
}

func (b *filterCndBuilderStateIsFiring) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().State().IsFiring().FieldPath(),
	})
}

func (b *filterCndBuilderStateIsFiring) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().State().IsFiring().WithValue(value),
	})
}

type filterCndBuilderStateIsAcknowledged struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateIsAcknowledged) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateIsAcknowledged) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateIsAcknowledged) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateIsAcknowledged) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateIsAcknowledged) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateIsAcknowledged) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateIsAcknowledged) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().IsAcknowledged().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateIsAcknowledged) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().IsAcknowledged().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateIsAcknowledged) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().State().IsAcknowledged().FieldPath(),
	})
}

func (b *filterCndBuilderStateIsAcknowledged) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().State().IsAcknowledged().FieldPath(),
	})
}

func (b *filterCndBuilderStateIsAcknowledged) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().State().IsAcknowledged().WithValue(value),
	})
}

type filterCndBuilderStateIsSilenced struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateIsSilenced) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateIsSilenced) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateIsSilenced) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateIsSilenced) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateIsSilenced) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateIsSilenced) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateIsSilenced) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().IsSilenced().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateIsSilenced) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().IsSilenced().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateIsSilenced) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().State().IsSilenced().FieldPath(),
	})
}

func (b *filterCndBuilderStateIsSilenced) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().State().IsSilenced().FieldPath(),
	})
}

func (b *filterCndBuilderStateIsSilenced) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().State().IsSilenced().WithValue(value),
	})
}

type filterCndBuilderStateLifetime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateLifetime) Eq(value *monitoring_common.TimeRange) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateLifetime) Neq(value *monitoring_common.TimeRange) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateLifetime) Gt(value *monitoring_common.TimeRange) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateLifetime) Gte(value *monitoring_common.TimeRange) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateLifetime) Lt(value *monitoring_common.TimeRange) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateLifetime) Lte(value *monitoring_common.TimeRange) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateLifetime) In(values []*monitoring_common.TimeRange) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Lifetime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateLifetime) NotIn(values []*monitoring_common.TimeRange) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Lifetime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateLifetime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().State().Lifetime().FieldPath(),
	})
}

func (b *filterCndBuilderStateLifetime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().State().Lifetime().FieldPath(),
	})
}

func (b *filterCndBuilderStateLifetime) compare(op gotenfilter.CompareOperator, value *monitoring_common.TimeRange) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().State().Lifetime().WithValue(value),
	})
}

func (b *filterCndBuilderStateLifetime) StartTime() *filterCndBuilderStateLifetimeStartTime {
	return &filterCndBuilderStateLifetimeStartTime{builder: b.builder}
}

func (b *filterCndBuilderStateLifetime) EndTime() *filterCndBuilderStateLifetimeEndTime {
	return &filterCndBuilderStateLifetimeEndTime{builder: b.builder}
}

type filterCndBuilderStateLifetimeStartTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateLifetimeStartTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateLifetimeStartTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateLifetimeStartTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateLifetimeStartTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateLifetimeStartTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateLifetimeStartTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateLifetimeStartTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Lifetime().StartTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateLifetimeStartTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Lifetime().StartTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateLifetimeStartTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().State().Lifetime().StartTime().FieldPath(),
	})
}

func (b *filterCndBuilderStateLifetimeStartTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().State().Lifetime().StartTime().FieldPath(),
	})
}

func (b *filterCndBuilderStateLifetimeStartTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().State().Lifetime().StartTime().WithValue(value),
	})
}

type filterCndBuilderStateLifetimeEndTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateLifetimeEndTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateLifetimeEndTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateLifetimeEndTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateLifetimeEndTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateLifetimeEndTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateLifetimeEndTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateLifetimeEndTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Lifetime().EndTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateLifetimeEndTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Lifetime().EndTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateLifetimeEndTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().State().Lifetime().EndTime().FieldPath(),
	})
}

func (b *filterCndBuilderStateLifetimeEndTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().State().Lifetime().EndTime().FieldPath(),
	})
}

func (b *filterCndBuilderStateLifetimeEndTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().State().Lifetime().EndTime().WithValue(value),
	})
}

type filterCndBuilderStateNotification struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotification) Eq(value *Alert_State_Notification) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotification) Neq(value *Alert_State_Notification) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotification) Gt(value *Alert_State_Notification) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotification) Gte(value *Alert_State_Notification) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotification) Lt(value *Alert_State_Notification) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotification) Lte(value *Alert_State_Notification) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotification) In(values []*Alert_State_Notification) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Notification().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotification) NotIn(values []*Alert_State_Notification) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Notification().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotification) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().State().Notification().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotification) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().State().Notification().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotification) compare(op gotenfilter.CompareOperator, value *Alert_State_Notification) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().State().Notification().WithValue(value),
	})
}

func (b *filterCndBuilderStateNotification) Slack() *filterCndBuilderStateNotificationSlack {
	return &filterCndBuilderStateNotificationSlack{builder: b.builder}
}

type filterCndBuilderStateNotificationSlack struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationSlack) Eq(value *Alert_State_Notification_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationSlack) Neq(value *Alert_State_Notification_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationSlack) Gt(value *Alert_State_Notification_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationSlack) Gte(value *Alert_State_Notification_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationSlack) Lt(value *Alert_State_Notification_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationSlack) Lte(value *Alert_State_Notification_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationSlack) In(values []*Alert_State_Notification_Slack) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Notification().Slack().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationSlack) NotIn(values []*Alert_State_Notification_Slack) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Notification().Slack().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationSlack) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().State().Notification().Slack().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationSlack) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().State().Notification().Slack().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationSlack) compare(op gotenfilter.CompareOperator, value *Alert_State_Notification_Slack) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().State().Notification().Slack().WithValue(value),
	})
}

func (b *filterCndBuilderStateNotificationSlack) Ts() *filterCndBuilderStateNotificationSlackTs {
	return &filterCndBuilderStateNotificationSlackTs{builder: b.builder}
}

func (b *filterCndBuilderStateNotificationSlack) DeliveryStatus() *filterCndBuilderStateNotificationSlackDeliveryStatus {
	return &filterCndBuilderStateNotificationSlackDeliveryStatus{builder: b.builder}
}

func (b *filterCndBuilderStateNotificationSlack) ErrorMessage() *filterCndBuilderStateNotificationSlackErrorMessage {
	return &filterCndBuilderStateNotificationSlackErrorMessage{builder: b.builder}
}

type filterCndBuilderStateNotificationSlackTs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationSlackTs) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationSlackTs) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationSlackTs) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationSlackTs) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationSlackTs) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationSlackTs) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationSlackTs) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Notification().Slack().Ts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationSlackTs) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Notification().Slack().Ts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationSlackTs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().State().Notification().Slack().Ts().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationSlackTs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().State().Notification().Slack().Ts().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationSlackTs) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().State().Notification().Slack().Ts().WithValue(value),
	})
}

type filterCndBuilderStateNotificationSlackDeliveryStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationSlackDeliveryStatus) Eq(value Alert_State_Notification_Slack_DeliveryStatus) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationSlackDeliveryStatus) Neq(value Alert_State_Notification_Slack_DeliveryStatus) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationSlackDeliveryStatus) Gt(value Alert_State_Notification_Slack_DeliveryStatus) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationSlackDeliveryStatus) Gte(value Alert_State_Notification_Slack_DeliveryStatus) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationSlackDeliveryStatus) Lt(value Alert_State_Notification_Slack_DeliveryStatus) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationSlackDeliveryStatus) Lte(value Alert_State_Notification_Slack_DeliveryStatus) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationSlackDeliveryStatus) In(values []Alert_State_Notification_Slack_DeliveryStatus) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Notification().Slack().DeliveryStatus().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationSlackDeliveryStatus) NotIn(values []Alert_State_Notification_Slack_DeliveryStatus) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Notification().Slack().DeliveryStatus().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationSlackDeliveryStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().State().Notification().Slack().DeliveryStatus().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationSlackDeliveryStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().State().Notification().Slack().DeliveryStatus().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationSlackDeliveryStatus) compare(op gotenfilter.CompareOperator, value Alert_State_Notification_Slack_DeliveryStatus) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().State().Notification().Slack().DeliveryStatus().WithValue(value),
	})
}

type filterCndBuilderStateNotificationSlackErrorMessage struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationSlackErrorMessage) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationSlackErrorMessage) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationSlackErrorMessage) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationSlackErrorMessage) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationSlackErrorMessage) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationSlackErrorMessage) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationSlackErrorMessage) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Notification().Slack().ErrorMessage().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationSlackErrorMessage) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Alert_FieldPathArrayOfValues: NewAlertFieldPathBuilder().State().Notification().Slack().ErrorMessage().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationSlackErrorMessage) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertFieldPathBuilder().State().Notification().Slack().ErrorMessage().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationSlackErrorMessage) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertFieldPathBuilder().State().Notification().Slack().ErrorMessage().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationSlackErrorMessage) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Alert_FieldPathValue: NewAlertFieldPathBuilder().State().Notification().Slack().ErrorMessage().WithValue(value),
	})
}
