// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v3/alert.proto
// DO NOT EDIT!!!

package alert

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/common/v3"
	alerting_condition "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_condition"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &alerting_condition.AlertingCondition{}
	_ = &monitoring_common.LabelDescriptor{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Alert_State_Notification_Slack_DeliveryStatus int32

const (
	Alert_State_Notification_Slack_DELIVERY_STATUS_UNSPECIFIED Alert_State_Notification_Slack_DeliveryStatus = 0
	Alert_State_Notification_Slack_PENDING                     Alert_State_Notification_Slack_DeliveryStatus = 1
	Alert_State_Notification_Slack_SUCCESS                     Alert_State_Notification_Slack_DeliveryStatus = 2
	Alert_State_Notification_Slack_ERROR                       Alert_State_Notification_Slack_DeliveryStatus = 3
)

var (
	Alert_State_Notification_Slack_DeliveryStatus_name = map[int32]string{
		0: "DELIVERY_STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "SUCCESS",
		3: "ERROR",
	}

	Alert_State_Notification_Slack_DeliveryStatus_value = map[string]int32{
		"DELIVERY_STATUS_UNSPECIFIED": 0,
		"PENDING":                     1,
		"SUCCESS":                     2,
		"ERROR":                       3,
	}
)

func (x Alert_State_Notification_Slack_DeliveryStatus) Enum() *Alert_State_Notification_Slack_DeliveryStatus {
	p := new(Alert_State_Notification_Slack_DeliveryStatus)
	*p = x
	return p
}

func (x Alert_State_Notification_Slack_DeliveryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Alert_State_Notification_Slack_DeliveryStatus) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v3_alert_proto_enumTypes[0].Descriptor()
}

func (Alert_State_Notification_Slack_DeliveryStatus) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v3_alert_proto_enumTypes[0]
}

func (x Alert_State_Notification_Slack_DeliveryStatus) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Alert_State_Notification_Slack_DeliveryStatus.ProtoReflect.Descriptor instead.
func (Alert_State_Notification_Slack_DeliveryStatus) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alert_proto_rawDescGZIP(), []int{0, 1, 2, 0, 0}
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Alert
	Name        *Name          `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Metadata    *ntt_meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	DisplayName string         `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	Info        *Alert_Info    `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty" firestore:"info"`
	// State of alert
	State *Alert_State `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty" firestore:"state"`
}

func (m *Alert) Reset() {
	*m = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert) ProtoMessage() {}

func (m *Alert) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert) GotenMessage() {}

// Deprecated, Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alert_proto_rawDescGZIP(), []int{0}
}

func (m *Alert) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Alert) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Alert) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Alert) GetInfo() *Alert_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Alert) GetState() *Alert_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Alert) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Alert"))
	}
	m.Name = fv
}

func (m *Alert) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Alert"))
	}
	m.Metadata = fv
}

func (m *Alert) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Alert"))
	}
	m.DisplayName = fv
}

func (m *Alert) SetInfo(fv *Alert_Info) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Info", "Alert"))
	}
	m.Info = fv
}

func (m *Alert) SetState(fv *Alert_State) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "Alert"))
	}
	m.State = fv
}

type Alert_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// TimeSerie labels that violated condition
	TimeSerie *Alert_Info_TimeSerie `protobuf:"bytes,1,opt,name=time_serie,json=timeSerie,proto3" json:"time_serie,omitempty" firestore:"timeSerie"`
	// observed time series values during alert creation
	ObservedValues *Alert_Info_ObservedValues `protobuf:"bytes,2,opt,name=observed_values,json=observedValues,proto3" json:"observed_values,omitempty" firestore:"observedValues"`
}

func (m *Alert_Info) Reset() {
	*m = Alert_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_Info) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_Info) ProtoMessage() {}

func (m *Alert_Info) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_Info) GotenMessage() {}

// Deprecated, Use Alert_Info.ProtoReflect.Descriptor instead.
func (*Alert_Info) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alert_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Alert_Info) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_Info) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_Info) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_Info) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_Info) GetTimeSerie() *Alert_Info_TimeSerie {
	if m != nil {
		return m.TimeSerie
	}
	return nil
}

func (m *Alert_Info) GetObservedValues() *Alert_Info_ObservedValues {
	if m != nil {
		return m.ObservedValues
	}
	return nil
}

func (m *Alert_Info) SetTimeSerie(fv *Alert_Info_TimeSerie) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSerie", "Alert_Info"))
	}
	m.TimeSerie = fv
}

func (m *Alert_Info) SetObservedValues(fv *Alert_Info_ObservedValues) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ObservedValues", "Alert_Info"))
	}
	m.ObservedValues = fv
}

type Alert_State struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	IsFiring       bool `protobuf:"varint,2,opt,name=is_firing,json=isFiring,proto3" json:"is_firing,omitempty" firestore:"isFiring"`
	IsAcknowledged bool `protobuf:"varint,3,opt,name=is_acknowledged,json=isAcknowledged,proto3" json:"is_acknowledged,omitempty" firestore:"isAcknowledged"`
	IsSilenced     bool `protobuf:"varint,4,opt,name=is_silenced,json=isSilenced,proto3" json:"is_silenced,omitempty" firestore:"isSilenced"`
	// describes in terms of time series when alert began and ended (resolved).
	// uses Time Series derived timestamps, rather than real-time.
	// use meta.create_time to get creation date.
	Lifetime *monitoring_common.TimeRange `protobuf:"bytes,7,opt,name=lifetime,proto3" json:"lifetime,omitempty" firestore:"lifetime"`
	// Notification state
	Notification *Alert_State_Notification `protobuf:"bytes,8,opt,name=notification,proto3" json:"notification,omitempty" firestore:"notification"`
}

func (m *Alert_State) Reset() {
	*m = Alert_State{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_State) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_State) ProtoMessage() {}

func (m *Alert_State) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_State) GotenMessage() {}

// Deprecated, Use Alert_State.ProtoReflect.Descriptor instead.
func (*Alert_State) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alert_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Alert_State) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_State) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_State) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_State) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_State) GetIsFiring() bool {
	if m != nil {
		return m.IsFiring
	}
	return false
}

func (m *Alert_State) GetIsAcknowledged() bool {
	if m != nil {
		return m.IsAcknowledged
	}
	return false
}

func (m *Alert_State) GetIsSilenced() bool {
	if m != nil {
		return m.IsSilenced
	}
	return false
}

func (m *Alert_State) GetLifetime() *monitoring_common.TimeRange {
	if m != nil {
		return m.Lifetime
	}
	return nil
}

func (m *Alert_State) GetNotification() *Alert_State_Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

func (m *Alert_State) SetIsFiring(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsFiring", "Alert_State"))
	}
	m.IsFiring = fv
}

func (m *Alert_State) SetIsAcknowledged(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsAcknowledged", "Alert_State"))
	}
	m.IsAcknowledged = fv
}

func (m *Alert_State) SetIsSilenced(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSilenced", "Alert_State"))
	}
	m.IsSilenced = fv
}

func (m *Alert_State) SetLifetime(fv *monitoring_common.TimeRange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Lifetime", "Alert_State"))
	}
	m.Lifetime = fv
}

func (m *Alert_State) SetNotification(fv *Alert_State_Notification) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Notification", "Alert_State"))
	}
	m.Notification = fv
}

type Alert_Info_TimeSerie struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	Key               []byte                               `protobuf:"bytes,101,opt,name=key,proto3" json:"key,omitempty" firestore:"key"`
	Metric            *monitoring_common.Metric            `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty" firestore:"metric"`
	MonitoredResource *monitoring_common.MonitoredResource `protobuf:"bytes,2,opt,name=monitored_resource,json=monitoredResource,proto3" json:"monitored_resource,omitempty" firestore:"monitoredResource"`
}

func (m *Alert_Info_TimeSerie) Reset() {
	*m = Alert_Info_TimeSerie{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_Info_TimeSerie) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_Info_TimeSerie) ProtoMessage() {}

func (m *Alert_Info_TimeSerie) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_Info_TimeSerie) GotenMessage() {}

// Deprecated, Use Alert_Info_TimeSerie.ProtoReflect.Descriptor instead.
func (*Alert_Info_TimeSerie) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alert_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Alert_Info_TimeSerie) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_Info_TimeSerie) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_Info_TimeSerie) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_Info_TimeSerie) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_Info_TimeSerie) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Alert_Info_TimeSerie) GetMetric() *monitoring_common.Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *Alert_Info_TimeSerie) GetMonitoredResource() *monitoring_common.MonitoredResource {
	if m != nil {
		return m.MonitoredResource
	}
	return nil
}

func (m *Alert_Info_TimeSerie) SetKey(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "Alert_Info_TimeSerie"))
	}
	m.Key = fv
}

func (m *Alert_Info_TimeSerie) SetMetric(fv *monitoring_common.Metric) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metric", "Alert_Info_TimeSerie"))
	}
	m.Metric = fv
}

func (m *Alert_Info_TimeSerie) SetMonitoredResource(fv *monitoring_common.MonitoredResource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MonitoredResource", "Alert_Info_TimeSerie"))
	}
	m.MonitoredResource = fv
}

type Alert_Info_ObservedValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// oneof
	ExampleValue float64            `protobuf:"fixed64,1,opt,name=example_value,json=exampleValue,proto3" json:"example_value,omitempty" firestore:"exampleValue"`
	PerMetric    map[string]float64 `protobuf:"bytes,2,rep,name=per_metric,json=perMetric,proto3" json:"per_metric,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3" firestore:"perMetric"`
}

func (m *Alert_Info_ObservedValues) Reset() {
	*m = Alert_Info_ObservedValues{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_Info_ObservedValues) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_Info_ObservedValues) ProtoMessage() {}

func (m *Alert_Info_ObservedValues) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_Info_ObservedValues) GotenMessage() {}

// Deprecated, Use Alert_Info_ObservedValues.ProtoReflect.Descriptor instead.
func (*Alert_Info_ObservedValues) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alert_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *Alert_Info_ObservedValues) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_Info_ObservedValues) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_Info_ObservedValues) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_Info_ObservedValues) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_Info_ObservedValues) GetExampleValue() float64 {
	if m != nil {
		return m.ExampleValue
	}
	return float64(0)
}

func (m *Alert_Info_ObservedValues) GetPerMetric() map[string]float64 {
	if m != nil {
		return m.PerMetric
	}
	return nil
}

func (m *Alert_Info_ObservedValues) SetExampleValue(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExampleValue", "Alert_Info_ObservedValues"))
	}
	m.ExampleValue = fv
}

func (m *Alert_Info_ObservedValues) SetPerMetric(fv map[string]float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PerMetric", "Alert_Info_ObservedValues"))
	}
	m.PerMetric = fv
}

// oneof:
type Alert_State_Threshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ObservedValue float64 `protobuf:"fixed64,1,opt,name=observed_value,json=observedValue,proto3" json:"observed_value,omitempty" firestore:"observedValue"`
}

func (m *Alert_State_Threshold) Reset() {
	*m = Alert_State_Threshold{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_State_Threshold) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_State_Threshold) ProtoMessage() {}

func (m *Alert_State_Threshold) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_State_Threshold) GotenMessage() {}

// Deprecated, Use Alert_State_Threshold.ProtoReflect.Descriptor instead.
func (*Alert_State_Threshold) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alert_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *Alert_State_Threshold) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_State_Threshold) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_State_Threshold) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_State_Threshold) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_State_Threshold) GetObservedValue() float64 {
	if m != nil {
		return m.ObservedValue
	}
	return float64(0)
}

func (m *Alert_State_Threshold) SetObservedValue(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ObservedValue", "Alert_State_Threshold"))
	}
	m.ObservedValue = fv
}

type Alert_State_CombineThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *Alert_State_CombineThreshold) Reset() {
	*m = Alert_State_CombineThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_State_CombineThreshold) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_State_CombineThreshold) ProtoMessage() {}

func (m *Alert_State_CombineThreshold) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_State_CombineThreshold) GotenMessage() {}

// Deprecated, Use Alert_State_CombineThreshold.ProtoReflect.Descriptor instead.
func (*Alert_State_CombineThreshold) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alert_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *Alert_State_CombineThreshold) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_State_CombineThreshold) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_State_CombineThreshold) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_State_CombineThreshold) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type Alert_State_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Slack         *Alert_State_Notification_Slack `protobuf:"bytes,1,opt,name=slack,proto3" json:"slack,omitempty" firestore:"slack"`
}

func (m *Alert_State_Notification) Reset() {
	*m = Alert_State_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_State_Notification) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_State_Notification) ProtoMessage() {}

func (m *Alert_State_Notification) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_State_Notification) GotenMessage() {}

// Deprecated, Use Alert_State_Notification.ProtoReflect.Descriptor instead.
func (*Alert_State_Notification) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alert_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (m *Alert_State_Notification) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_State_Notification) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_State_Notification) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_State_Notification) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_State_Notification) GetSlack() *Alert_State_Notification_Slack {
	if m != nil {
		return m.Slack
	}
	return nil
}

func (m *Alert_State_Notification) SetSlack(fv *Alert_State_Notification_Slack) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Slack", "Alert_State_Notification"))
	}
	m.Slack = fv
}

type Alert_State_CombineThreshold_PerMetric struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	ObservedValues map[string]float64 `protobuf:"bytes,2,rep,name=observed_values,json=observedValues,proto3" json:"observed_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3" firestore:"observedValues"`
}

func (m *Alert_State_CombineThreshold_PerMetric) Reset() {
	*m = Alert_State_CombineThreshold_PerMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_State_CombineThreshold_PerMetric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_State_CombineThreshold_PerMetric) ProtoMessage() {}

func (m *Alert_State_CombineThreshold_PerMetric) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_State_CombineThreshold_PerMetric) GotenMessage() {}

// Deprecated, Use Alert_State_CombineThreshold_PerMetric.ProtoReflect.Descriptor instead.
func (*Alert_State_CombineThreshold_PerMetric) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alert_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

func (m *Alert_State_CombineThreshold_PerMetric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_State_CombineThreshold_PerMetric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_State_CombineThreshold_PerMetric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_State_CombineThreshold_PerMetric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_State_CombineThreshold_PerMetric) GetObservedValues() map[string]float64 {
	if m != nil {
		return m.ObservedValues
	}
	return nil
}

func (m *Alert_State_CombineThreshold_PerMetric) SetObservedValues(fv map[string]float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ObservedValues", "Alert_State_CombineThreshold_PerMetric"))
	}
	m.ObservedValues = fv
}

type Alert_State_Notification_Slack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Slack message "ts" (timestamp) string field. Used to track message
	Ts string `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty" firestore:"ts"`
	// Delivery State
	DeliveryStatus Alert_State_Notification_Slack_DeliveryStatus `protobuf:"varint,2,opt,name=delivery_status,json=deliveryStatus,proto3,enum=ntt.monitoring.v3.Alert_State_Notification_Slack_DeliveryStatus" json:"delivery_status,omitempty" firestore:"deliveryStatus"`
	// Message explaining issue. Only present if delivery_state is ERROR
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty" firestore:"errorMessage"`
}

func (m *Alert_State_Notification_Slack) Reset() {
	*m = Alert_State_Notification_Slack{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Alert_State_Notification_Slack) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Alert_State_Notification_Slack) ProtoMessage() {}

func (m *Alert_State_Notification_Slack) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alert_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Alert_State_Notification_Slack) GotenMessage() {}

// Deprecated, Use Alert_State_Notification_Slack.ProtoReflect.Descriptor instead.
func (*Alert_State_Notification_Slack) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alert_proto_rawDescGZIP(), []int{0, 1, 2, 0}
}

func (m *Alert_State_Notification_Slack) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Alert_State_Notification_Slack) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Alert_State_Notification_Slack) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Alert_State_Notification_Slack) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Alert_State_Notification_Slack) GetTs() string {
	if m != nil {
		return m.Ts
	}
	return ""
}

func (m *Alert_State_Notification_Slack) GetDeliveryStatus() Alert_State_Notification_Slack_DeliveryStatus {
	if m != nil {
		return m.DeliveryStatus
	}
	return Alert_State_Notification_Slack_DELIVERY_STATUS_UNSPECIFIED
}

func (m *Alert_State_Notification_Slack) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *Alert_State_Notification_Slack) SetTs(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Ts", "Alert_State_Notification_Slack"))
	}
	m.Ts = fv
}

func (m *Alert_State_Notification_Slack) SetDeliveryStatus(fv Alert_State_Notification_Slack_DeliveryStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeliveryStatus", "Alert_State_Notification_Slack"))
	}
	m.DeliveryStatus = fv
}

func (m *Alert_State_Notification_Slack) SetErrorMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ErrorMessage", "Alert_State_Notification_Slack"))
	}
	m.ErrorMessage = fv
}

var edgelq_monitoring_proto_v3_alert_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v3_alert_proto_rawDesc = []byte{
	0x0a, 0x26, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x33, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81,
	0x11, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xb2, 0xda, 0x21, 0x09, 0x0a, 0x07, 0x0a, 0x05,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x34,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x9f, 0x04, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0e, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0xa5, 0x01, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x53, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x1a, 0xcf, 0x01, 0x0a, 0x0e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5a, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x50,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xe7, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x32, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xdb, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0xc6, 0x01, 0x0a, 0x09,
	0x50, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x76, 0x0a, 0x0f, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x2e, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x41, 0x0a, 0x13, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xd9, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x1a, 0xff,
	0x01, 0x0a, 0x05, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x40, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x6c, 0x61, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03,
	0x3a, 0x8f, 0x04, 0xea, 0x41, 0x9c, 0x01, 0x0a, 0x1b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x7d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x7d, 0x92, 0xd9, 0x21, 0xd8, 0x02, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x1a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x3a, 0x16, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2e, 0x3a,
	0x2d, 0x5d, 0x7b, 0x31, 0x2c, 0x31, 0x32, 0x38, 0x7d, 0x4a, 0x92, 0x02, 0x08, 0x02, 0x12, 0x0c,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x1b, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x20, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x09, 0x49, 0x73, 0x20, 0x46, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x0f, 0x49,
	0x73, 0x20, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x64, 0x12, 0x0b, 0x49, 0x73, 0x20, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0a, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x17, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x08, 0x45, 0x6e, 0x64, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x05,
	0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xe2, 0xde, 0x21, 0x02,
	0x08, 0x00, 0x42, 0x9a, 0x03, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x43, 0x0a, 0x0b,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x33, 0x42, 0x0a, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x3b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0xd2, 0x84, 0xd1, 0x02, 0x47, 0x0a, 0x0d,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x76, 0x33, 0xa2, 0x80, 0xd1, 0x02, 0x45, 0x0a, 0x0c, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0xf2,
	0x85, 0xd1, 0x02, 0x4b, 0x0a, 0x0f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x62, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x62, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v3_alert_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v3_alert_proto_rawDescData = edgelq_monitoring_proto_v3_alert_proto_rawDesc
)

func edgelq_monitoring_proto_v3_alert_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v3_alert_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v3_alert_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v3_alert_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v3_alert_proto_rawDescData
}

var edgelq_monitoring_proto_v3_alert_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_monitoring_proto_v3_alert_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var edgelq_monitoring_proto_v3_alert_proto_goTypes = []interface{}{
	(Alert_State_Notification_Slack_DeliveryStatus)(0), // 0: ntt.monitoring.v3.Alert_State_Notification_Slack_DeliveryStatus
	(*Alert)(nil),                                  // 1: ntt.monitoring.v3.Alert
	(*Alert_Info)(nil),                             // 2: ntt.monitoring.v3.Alert.Info
	(*Alert_State)(nil),                            // 3: ntt.monitoring.v3.Alert.State
	(*Alert_Info_TimeSerie)(nil),                   // 4: ntt.monitoring.v3.Alert.Info.TimeSerie
	(*Alert_Info_ObservedValues)(nil),              // 5: ntt.monitoring.v3.Alert.Info.ObservedValues
	nil,                                            // 6: ntt.monitoring.v3.Alert.Info.ObservedValues.PerMetricEntry
	(*Alert_State_Threshold)(nil),                  // 7: ntt.monitoring.v3.Alert.State.Threshold
	(*Alert_State_CombineThreshold)(nil),           // 8: ntt.monitoring.v3.Alert.State.CombineThreshold
	(*Alert_State_Notification)(nil),               // 9: ntt.monitoring.v3.Alert.State.Notification
	(*Alert_State_CombineThreshold_PerMetric)(nil), // 10: ntt.monitoring.v3.Alert.State.CombineThreshold.PerMetric
	nil,                                    // 11: ntt.monitoring.v3.Alert.State.CombineThreshold.PerMetric.ObservedValuesEntry
	(*Alert_State_Notification_Slack)(nil), // 12: ntt.monitoring.v3.Alert.State.Notification.Slack
	(*ntt_meta.Meta)(nil),                  // 13: ntt.types.Meta
	(*monitoring_common.Metric)(nil),       // 14: ntt.monitoring.v3.Metric
	(*monitoring_common.MonitoredResource)(nil), // 15: ntt.monitoring.v3.MonitoredResource
	(*monitoring_common.TimeRange)(nil),         // 16: ntt.monitoring.v3.TimeRange
}
var edgelq_monitoring_proto_v3_alert_proto_depIdxs = []int32{
	13, // 0: ntt.monitoring.v3.Alert.metadata:type_name -> ntt.types.Meta
	2,  // 1: ntt.monitoring.v3.Alert.info:type_name -> ntt.monitoring.v3.Alert.Info
	3,  // 2: ntt.monitoring.v3.Alert.state:type_name -> ntt.monitoring.v3.Alert.State
	4,  // 3: ntt.monitoring.v3.Alert.Info.time_serie:type_name -> ntt.monitoring.v3.Alert.Info.TimeSerie
	5,  // 4: ntt.monitoring.v3.Alert.Info.observed_values:type_name -> ntt.monitoring.v3.Alert.Info.ObservedValues
	16, // 5: ntt.monitoring.v3.Alert.State.lifetime:type_name -> ntt.monitoring.v3.TimeRange
	9,  // 6: ntt.monitoring.v3.Alert.State.notification:type_name -> ntt.monitoring.v3.Alert.State.Notification
	14, // 7: ntt.monitoring.v3.Alert.Info.TimeSerie.metric:type_name -> ntt.monitoring.v3.Metric
	15, // 8: ntt.monitoring.v3.Alert.Info.TimeSerie.monitored_resource:type_name -> ntt.monitoring.v3.MonitoredResource
	6,  // 9: ntt.monitoring.v3.Alert.Info.ObservedValues.per_metric:type_name -> ntt.monitoring.v3.Alert.Info.ObservedValues.PerMetricEntry
	12, // 10: ntt.monitoring.v3.Alert.State.Notification.slack:type_name -> ntt.monitoring.v3.Alert.State.Notification.Slack
	11, // 11: ntt.monitoring.v3.Alert.State.CombineThreshold.PerMetric.observed_values:type_name -> ntt.monitoring.v3.Alert.State.CombineThreshold.PerMetric.ObservedValuesEntry
	0,  // 12: ntt.monitoring.v3.Alert.State.Notification.Slack.delivery_status:type_name -> ntt.monitoring.v3.Alert_State_Notification_Slack_DeliveryStatus
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v3_alert_proto_init() }
func edgelq_monitoring_proto_v3_alert_proto_init() {
	if edgelq_monitoring_proto_v3_alert_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v3_alert_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_alert_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_alert_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_alert_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_Info_TimeSerie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_alert_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_Info_ObservedValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_alert_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_State_Threshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_alert_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_State_CombineThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_alert_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_State_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_alert_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_State_CombineThreshold_PerMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_alert_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert_State_Notification_Slack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v3_alert_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_monitoring_proto_v3_alert_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v3_alert_proto_depIdxs,
		EnumInfos:         edgelq_monitoring_proto_v3_alert_proto_enumTypes,
		MessageInfos:      edgelq_monitoring_proto_v3_alert_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v3_alert_proto = out.File
	edgelq_monitoring_proto_v3_alert_proto_rawDesc = nil
	edgelq_monitoring_proto_v3_alert_proto_goTypes = nil
	edgelq_monitoring_proto_v3_alert_proto_depIdxs = nil
}
