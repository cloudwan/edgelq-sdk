// Code generated by protoc-gen-goten-resource
// Resource change: MonitoredResourceDescriptorChange
// DO NOT EDIT!!!

package monitored_resource_descriptor

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &fieldmaskpb.FieldMask{}
)

func (c *MonitoredResourceDescriptorChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*MonitoredResourceDescriptorChange_Added_)
	return ok
}

func (c *MonitoredResourceDescriptorChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*MonitoredResourceDescriptorChange_Modified_)
	return ok
}

func (c *MonitoredResourceDescriptorChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*MonitoredResourceDescriptorChange_Current_)
	return ok
}

func (c *MonitoredResourceDescriptorChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*MonitoredResourceDescriptorChange_Removed_)
	return ok
}

func (c *MonitoredResourceDescriptorChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *MonitoredResourceDescriptorChange_Added_:
		return cType.Added.ViewIndex
	case *MonitoredResourceDescriptorChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *MonitoredResourceDescriptorChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *MonitoredResourceDescriptorChange_Removed_:
		return cType.Removed.ViewIndex
	case *MonitoredResourceDescriptorChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *MonitoredResourceDescriptorChange) GetMonitoredResourceDescriptor() *MonitoredResourceDescriptor {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *MonitoredResourceDescriptorChange_Added_:
		return cType.Added.MonitoredResourceDescriptor
	case *MonitoredResourceDescriptorChange_Modified_:
		return cType.Modified.MonitoredResourceDescriptor
	case *MonitoredResourceDescriptorChange_Current_:
		return cType.Current.MonitoredResourceDescriptor
	case *MonitoredResourceDescriptorChange_Removed_:
		return nil
	}
	return nil
}

func (c *MonitoredResourceDescriptorChange) GetRawResource() gotenresource.Resource {
	return c.GetMonitoredResourceDescriptor()
}

func (c *MonitoredResourceDescriptorChange) GetMonitoredResourceDescriptorName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *MonitoredResourceDescriptorChange_Added_:
		return cType.Added.MonitoredResourceDescriptor.GetName()
	case *MonitoredResourceDescriptorChange_Modified_:
		return cType.Modified.Name
	case *MonitoredResourceDescriptorChange_Current_:
		return cType.Current.MonitoredResourceDescriptor.GetName()
	case *MonitoredResourceDescriptorChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *MonitoredResourceDescriptorChange) GetRawName() gotenresource.Name {
	return c.GetMonitoredResourceDescriptorName()
}

func (c *MonitoredResourceDescriptorChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &MonitoredResourceDescriptorChange_Added_{
		Added: &MonitoredResourceDescriptorChange_Added{
			MonitoredResourceDescriptor: snapshot.(*MonitoredResourceDescriptor),
			ViewIndex:                   int32(idx),
		},
	}
}

func (c *MonitoredResourceDescriptorChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &MonitoredResourceDescriptorChange_Modified_{
		Modified: &MonitoredResourceDescriptorChange_Modified{
			Name:                        name.(*Name),
			MonitoredResourceDescriptor: snapshot.(*MonitoredResourceDescriptor),
			PreviousViewIndex:           int32(prevIdx),
			ViewIndex:                   int32(newIdx),
		},
	}
}

func (c *MonitoredResourceDescriptorChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &MonitoredResourceDescriptorChange_Current_{
		Current: &MonitoredResourceDescriptorChange_Current{
			MonitoredResourceDescriptor: snapshot.(*MonitoredResourceDescriptor),
		},
	}
}

func (c *MonitoredResourceDescriptorChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &MonitoredResourceDescriptorChange_Removed_{
		Removed: &MonitoredResourceDescriptorChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
