// Code generated by protoc-gen-goten-resource
// Resource: MonitoredResourceDescriptor
// DO NOT EDIT!!!

package monitored_resource_descriptor

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/common/v3"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &monitoring_common.LabelDescriptor{}
)

type MonitoredResourceDescriptorList []*MonitoredResourceDescriptor

func (l MonitoredResourceDescriptorList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*MonitoredResourceDescriptor))
}

func (l MonitoredResourceDescriptorList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(MonitoredResourceDescriptorList)...)
}

func (l MonitoredResourceDescriptorList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l MonitoredResourceDescriptorList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l MonitoredResourceDescriptorList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*MonitoredResourceDescriptor)
}

func (l MonitoredResourceDescriptorList) Length() int {
	return len(l)
}

type MonitoredResourceDescriptorChangeList []*MonitoredResourceDescriptorChange

func (l MonitoredResourceDescriptorChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*MonitoredResourceDescriptorChange))
}

func (l MonitoredResourceDescriptorChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(MonitoredResourceDescriptorChangeList)...)
}

func (l MonitoredResourceDescriptorChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l MonitoredResourceDescriptorChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l MonitoredResourceDescriptorChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*MonitoredResourceDescriptorChange)
}

func (l MonitoredResourceDescriptorChangeList) Length() int {
	return len(l)
}

type MonitoredResourceDescriptorNameList []*Name

func (l MonitoredResourceDescriptorNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l MonitoredResourceDescriptorNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(MonitoredResourceDescriptorNameList)...)
}

func (l MonitoredResourceDescriptorNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l MonitoredResourceDescriptorNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l MonitoredResourceDescriptorNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l MonitoredResourceDescriptorNameList) Length() int {
	return len(l)
}

type MonitoredResourceDescriptorReferenceList []*Reference

func (l MonitoredResourceDescriptorReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l MonitoredResourceDescriptorReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(MonitoredResourceDescriptorReferenceList)...)
}

func (l MonitoredResourceDescriptorReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l MonitoredResourceDescriptorReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l MonitoredResourceDescriptorReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l MonitoredResourceDescriptorReferenceList) Length() int {
	return len(l)
}

type MonitoredResourceDescriptorMap map[Name]*MonitoredResourceDescriptor

func (m MonitoredResourceDescriptorMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m MonitoredResourceDescriptorMap) Set(res gotenresource.Resource) {
	tRes := res.(*MonitoredResourceDescriptor)
	m[*tRes.Name] = tRes
}

func (m MonitoredResourceDescriptorMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m MonitoredResourceDescriptorMap) Length() int {
	return len(m)
}

func (m MonitoredResourceDescriptorMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type MonitoredResourceDescriptorChangeMap map[Name]*MonitoredResourceDescriptorChange

func (m MonitoredResourceDescriptorChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m MonitoredResourceDescriptorChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*MonitoredResourceDescriptorChange)
	m[*tChange.GetMonitoredResourceDescriptorName()] = tChange
}

func (m MonitoredResourceDescriptorChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m MonitoredResourceDescriptorChangeMap) Length() int {
	return len(m)
}

func (m MonitoredResourceDescriptorChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
