// Code generated by protoc-gen-goten-resource
// Resource: MetricDescriptor
// DO NOT EDIT!!!

package metric_descriptor

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/common"
	monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/monitored_resource_descriptor"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = api.LaunchStage(0)
	_ = &common.LabelDescriptor{}
	_ = &monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &project.Project{}
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

type FilterBuilderOrCondition interface {
	_IsMetricDescriptorFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsMetricDescriptorFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp MetricDescriptor_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      MetricDescriptor_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) Type() *filterCndBuilderType {
	return &filterCndBuilderType{builder: b.builder}
}

func (b *filterCndBuilder) ResourceTypes() *filterCndBuilderResourceTypes {
	return &filterCndBuilderResourceTypes{builder: b.builder}
}

func (b *filterCndBuilder) Labels() *filterCndBuilderLabels {
	return &filterCndBuilderLabels{builder: b.builder}
}

func (b *filterCndBuilder) MetricKind() *filterCndBuilderMetricKind {
	return &filterCndBuilderMetricKind{builder: b.builder}
}

func (b *filterCndBuilder) ValueType() *filterCndBuilderValueType {
	return &filterCndBuilderValueType{builder: b.builder}
}

func (b *filterCndBuilder) Unit() *filterCndBuilderUnit {
	return &filterCndBuilderUnit{builder: b.builder}
}

func (b *filterCndBuilder) Description() *filterCndBuilderDescription {
	return &filterCndBuilderDescription{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) MetricDescriptorMetadata() *filterCndBuilderMetricDescriptorMetadata {
	return &filterCndBuilderMetricDescriptorMetadata{builder: b.builder}
}

func (b *filterCndBuilder) DistributionBucketOptions() *filterCndBuilderDistributionBucketOptions {
	return &filterCndBuilderDistributionBucketOptions{builder: b.builder}
}

func (b *filterCndBuilder) PromotedLabelKeySets() *filterCndBuilderPromotedLabelKeySets {
	return &filterCndBuilderPromotedLabelKeySets{builder: b.builder}
}

func (b *filterCndBuilder) IndexSpec() *filterCndBuilderIndexSpec {
	return &filterCndBuilderIndexSpec{builder: b.builder}
}

func (b *filterCndBuilder) StorageConfig() *filterCndBuilderStorageConfig {
	return &filterCndBuilderStorageConfig{builder: b.builder}
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) DeleteTime() *filterCndBuilderMetadataDeleteTime {
	return &filterCndBuilderMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Lifecycle() *filterCndBuilderMetadataLifecycle {
	return &filterCndBuilderMetadataLifecycle{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Services() *filterCndBuilderMetadataServices {
	return &filterCndBuilderMetadataServices{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataDeleteTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewMetricDescriptorFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().Metadata().Tags()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().Metadata().Tags()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Version() *filterCndBuilderMetadataOwnerReferencesVersion {
	return &filterCndBuilderMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Region() *filterCndBuilderMetadataOwnerReferencesRegion {
	return &filterCndBuilderMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycle) Eq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Neq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycle) In(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) NotIn(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLifecycle) State() *filterCndBuilderMetadataLifecycleState {
	return &filterCndBuilderMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderMetadataLifecycle) BlockDeletion() *filterCndBuilderMetadataLifecycleBlockDeletion {
	return &filterCndBuilderMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleState) Eq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Neq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) In(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) NotIn(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServices) Eq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServices) Neq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServices) Gt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServices) Gte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServices) Lt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServices) Lte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServices) In(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) NotIn(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) compare(op gotenfilter.CompareOperator, value *meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Services().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataServices) OwningService() *filterCndBuilderMetadataServicesOwningService {
	return &filterCndBuilderMetadataServicesOwningService{builder: b.builder}
}

func (b *filterCndBuilderMetadataServices) AllowedServices() *filterCndBuilderMetadataServicesAllowedServices {
	return &filterCndBuilderMetadataServicesAllowedServices{builder: b.builder}
}

type filterCndBuilderMetadataServicesOwningService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesOwningService) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Services().OwningService().WithValue(value),
	})
}

type filterCndBuilderMetadataServicesAllowedServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Value:     NewMetricDescriptorFieldPathBuilder().Metadata().Services().AllowedServices().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Metadata().Services().AllowedServices().WithValue(value),
	})
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Type().FieldPath(),
	})
}

func (b *filterCndBuilderType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Type().FieldPath(),
	})
}

func (b *filterCndBuilderType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Type().WithValue(value),
	})
}

type filterCndBuilderResourceTypes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderResourceTypes) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderResourceTypes) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderResourceTypes) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderResourceTypes) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderResourceTypes) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderResourceTypes) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderResourceTypes) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().ResourceTypes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderResourceTypes) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().ResourceTypes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderResourceTypes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().ResourceTypes().FieldPath(),
	})
}

func (b *filterCndBuilderResourceTypes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().ResourceTypes().FieldPath(),
	})
}

func (b *filterCndBuilderResourceTypes) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewMetricDescriptorFieldPathBuilder().ResourceTypes().FieldPath(),
		Value:     NewMetricDescriptorFieldPathBuilder().ResourceTypes().WithItemValue(value),
	})
}

func (b *filterCndBuilderResourceTypes) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().ResourceTypes()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewMetricDescriptorFieldPathBuilder().ResourceTypes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderResourceTypes) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().ResourceTypes()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewMetricDescriptorFieldPathBuilder().ResourceTypes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderResourceTypes) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().ResourceTypes().WithValue(value),
	})
}

type filterCndBuilderLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLabels) Eq(value []*common.LabelDescriptor) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLabels) Neq(value []*common.LabelDescriptor) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLabels) Gt(value []*common.LabelDescriptor) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLabels) Gte(value []*common.LabelDescriptor) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLabels) Lt(value []*common.LabelDescriptor) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLabels) Lte(value []*common.LabelDescriptor) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLabels) In(values [][]*common.LabelDescriptor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLabels) NotIn(values [][]*common.LabelDescriptor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderLabels) Contains(value *common.LabelDescriptor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().FieldPath(),
		Value:     NewMetricDescriptorFieldPathBuilder().Labels().WithItemValue(value),
	})
}

func (b *filterCndBuilderLabels) ContainsAnyOf(values []*common.LabelDescriptor) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().Labels()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderLabels) ContainsAll(values []*common.LabelDescriptor) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().Labels()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderLabels) compare(op gotenfilter.CompareOperator, value []*common.LabelDescriptor) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderLabels) Key() *filterCndBuilderLabelsKey {
	return &filterCndBuilderLabelsKey{builder: b.builder}
}

func (b *filterCndBuilderLabels) ValueType() *filterCndBuilderLabelsValueType {
	return &filterCndBuilderLabelsValueType{builder: b.builder}
}

func (b *filterCndBuilderLabels) Description() *filterCndBuilderLabelsDescription {
	return &filterCndBuilderLabelsDescription{builder: b.builder}
}

func (b *filterCndBuilderLabels) DefaultValue() *filterCndBuilderLabelsDefaultValue {
	return &filterCndBuilderLabelsDefaultValue{builder: b.builder}
}

func (b *filterCndBuilderLabels) Disabled() *filterCndBuilderLabelsDisabled {
	return &filterCndBuilderLabelsDisabled{builder: b.builder}
}

type filterCndBuilderLabelsKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLabelsKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLabelsKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLabelsKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLabelsKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLabelsKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLabelsKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLabelsKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Labels().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLabelsKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Labels().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLabelsKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().Key().FieldPath(),
	})
}

func (b *filterCndBuilderLabelsKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().Key().FieldPath(),
	})
}

func (b *filterCndBuilderLabelsKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Labels().Key().WithValue(value),
	})
}

type filterCndBuilderLabelsValueType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLabelsValueType) Eq(value common.LabelDescriptor_ValueType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLabelsValueType) Neq(value common.LabelDescriptor_ValueType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLabelsValueType) Gt(value common.LabelDescriptor_ValueType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLabelsValueType) Gte(value common.LabelDescriptor_ValueType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLabelsValueType) Lt(value common.LabelDescriptor_ValueType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLabelsValueType) Lte(value common.LabelDescriptor_ValueType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLabelsValueType) In(values []common.LabelDescriptor_ValueType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Labels().ValueType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLabelsValueType) NotIn(values []common.LabelDescriptor_ValueType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Labels().ValueType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLabelsValueType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().ValueType().FieldPath(),
	})
}

func (b *filterCndBuilderLabelsValueType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().ValueType().FieldPath(),
	})
}

func (b *filterCndBuilderLabelsValueType) compare(op gotenfilter.CompareOperator, value common.LabelDescriptor_ValueType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Labels().ValueType().WithValue(value),
	})
}

type filterCndBuilderLabelsDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLabelsDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLabelsDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLabelsDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLabelsDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLabelsDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLabelsDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLabelsDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Labels().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLabelsDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Labels().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLabelsDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().Description().FieldPath(),
	})
}

func (b *filterCndBuilderLabelsDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().Description().FieldPath(),
	})
}

func (b *filterCndBuilderLabelsDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Labels().Description().WithValue(value),
	})
}

type filterCndBuilderLabelsDefaultValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLabelsDefaultValue) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLabelsDefaultValue) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLabelsDefaultValue) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLabelsDefaultValue) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLabelsDefaultValue) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLabelsDefaultValue) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLabelsDefaultValue) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Labels().DefaultValue().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLabelsDefaultValue) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Labels().DefaultValue().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLabelsDefaultValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().DefaultValue().FieldPath(),
	})
}

func (b *filterCndBuilderLabelsDefaultValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().DefaultValue().FieldPath(),
	})
}

func (b *filterCndBuilderLabelsDefaultValue) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Labels().DefaultValue().WithValue(value),
	})
}

type filterCndBuilderLabelsDisabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLabelsDisabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLabelsDisabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLabelsDisabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLabelsDisabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLabelsDisabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLabelsDisabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLabelsDisabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Labels().Disabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLabelsDisabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Labels().Disabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLabelsDisabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().Disabled().FieldPath(),
	})
}

func (b *filterCndBuilderLabelsDisabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Labels().Disabled().FieldPath(),
	})
}

func (b *filterCndBuilderLabelsDisabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Labels().Disabled().WithValue(value),
	})
}

type filterCndBuilderMetricKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetricKind) Eq(value MetricDescriptor_MetricKind) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetricKind) Neq(value MetricDescriptor_MetricKind) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetricKind) Gt(value MetricDescriptor_MetricKind) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetricKind) Gte(value MetricDescriptor_MetricKind) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetricKind) Lt(value MetricDescriptor_MetricKind) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetricKind) Lte(value MetricDescriptor_MetricKind) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetricKind) In(values []MetricDescriptor_MetricKind) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().MetricKind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetricKind) NotIn(values []MetricDescriptor_MetricKind) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().MetricKind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetricKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().MetricKind().FieldPath(),
	})
}

func (b *filterCndBuilderMetricKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().MetricKind().FieldPath(),
	})
}

func (b *filterCndBuilderMetricKind) compare(op gotenfilter.CompareOperator, value MetricDescriptor_MetricKind) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().MetricKind().WithValue(value),
	})
}

type filterCndBuilderValueType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderValueType) Eq(value MetricDescriptor_ValueType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderValueType) Neq(value MetricDescriptor_ValueType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderValueType) Gt(value MetricDescriptor_ValueType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderValueType) Gte(value MetricDescriptor_ValueType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderValueType) Lt(value MetricDescriptor_ValueType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderValueType) Lte(value MetricDescriptor_ValueType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderValueType) In(values []MetricDescriptor_ValueType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().ValueType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderValueType) NotIn(values []MetricDescriptor_ValueType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().ValueType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderValueType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().ValueType().FieldPath(),
	})
}

func (b *filterCndBuilderValueType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().ValueType().FieldPath(),
	})
}

func (b *filterCndBuilderValueType) compare(op gotenfilter.CompareOperator, value MetricDescriptor_ValueType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().ValueType().WithValue(value),
	})
}

type filterCndBuilderUnit struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderUnit) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderUnit) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderUnit) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderUnit) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderUnit) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderUnit) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderUnit) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Unit().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderUnit) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Unit().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderUnit) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Unit().FieldPath(),
	})
}

func (b *filterCndBuilderUnit) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Unit().FieldPath(),
	})
}

func (b *filterCndBuilderUnit) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Unit().WithValue(value),
	})
}

type filterCndBuilderDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Description().FieldPath(),
	})
}

func (b *filterCndBuilderDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().Description().FieldPath(),
	})
}

func (b *filterCndBuilderDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().Description().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderMetricDescriptorMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetricDescriptorMetadata) Eq(value *MetricDescriptor_MetricDescriptorMetadata) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetricDescriptorMetadata) Neq(value *MetricDescriptor_MetricDescriptorMetadata) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetricDescriptorMetadata) Gt(value *MetricDescriptor_MetricDescriptorMetadata) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetricDescriptorMetadata) Gte(value *MetricDescriptor_MetricDescriptorMetadata) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetricDescriptorMetadata) Lt(value *MetricDescriptor_MetricDescriptorMetadata) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetricDescriptorMetadata) Lte(value *MetricDescriptor_MetricDescriptorMetadata) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetricDescriptorMetadata) In(values []*MetricDescriptor_MetricDescriptorMetadata) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().MetricDescriptorMetadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetricDescriptorMetadata) NotIn(values []*MetricDescriptor_MetricDescriptorMetadata) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().MetricDescriptorMetadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetricDescriptorMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().MetricDescriptorMetadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetricDescriptorMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().MetricDescriptorMetadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetricDescriptorMetadata) compare(op gotenfilter.CompareOperator, value *MetricDescriptor_MetricDescriptorMetadata) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().MetricDescriptorMetadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetricDescriptorMetadata) LaunchStage() *filterCndBuilderMetricDescriptorMetadataLaunchStage {
	return &filterCndBuilderMetricDescriptorMetadataLaunchStage{builder: b.builder}
}

type filterCndBuilderMetricDescriptorMetadataLaunchStage struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetricDescriptorMetadataLaunchStage) Eq(value api.LaunchStage) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetricDescriptorMetadataLaunchStage) Neq(value api.LaunchStage) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetricDescriptorMetadataLaunchStage) Gt(value api.LaunchStage) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetricDescriptorMetadataLaunchStage) Gte(value api.LaunchStage) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetricDescriptorMetadataLaunchStage) Lt(value api.LaunchStage) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetricDescriptorMetadataLaunchStage) Lte(value api.LaunchStage) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetricDescriptorMetadataLaunchStage) In(values []api.LaunchStage) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().MetricDescriptorMetadata().LaunchStage().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetricDescriptorMetadataLaunchStage) NotIn(values []api.LaunchStage) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().MetricDescriptorMetadata().LaunchStage().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetricDescriptorMetadataLaunchStage) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().MetricDescriptorMetadata().LaunchStage().FieldPath(),
	})
}

func (b *filterCndBuilderMetricDescriptorMetadataLaunchStage) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().MetricDescriptorMetadata().LaunchStage().FieldPath(),
	})
}

func (b *filterCndBuilderMetricDescriptorMetadataLaunchStage) compare(op gotenfilter.CompareOperator, value api.LaunchStage) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().MetricDescriptorMetadata().LaunchStage().WithValue(value),
	})
}

type filterCndBuilderDistributionBucketOptions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptions) Eq(value *common.Distribution_BucketOptions) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptions) Neq(value *common.Distribution_BucketOptions) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptions) Gt(value *common.Distribution_BucketOptions) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptions) Gte(value *common.Distribution_BucketOptions) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptions) Lt(value *common.Distribution_BucketOptions) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptions) Lte(value *common.Distribution_BucketOptions) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptions) In(values []*common.Distribution_BucketOptions) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptions) NotIn(values []*common.Distribution_BucketOptions) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptions) compare(op gotenfilter.CompareOperator, value *common.Distribution_BucketOptions) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().WithValue(value),
	})
}

func (b *filterCndBuilderDistributionBucketOptions) LinearBuckets() *filterCndBuilderDistributionBucketOptionsLinearBuckets {
	return &filterCndBuilderDistributionBucketOptionsLinearBuckets{builder: b.builder}
}

func (b *filterCndBuilderDistributionBucketOptions) ExponentialBuckets() *filterCndBuilderDistributionBucketOptionsExponentialBuckets {
	return &filterCndBuilderDistributionBucketOptionsExponentialBuckets{builder: b.builder}
}

func (b *filterCndBuilderDistributionBucketOptions) ExplicitBuckets() *filterCndBuilderDistributionBucketOptionsExplicitBuckets {
	return &filterCndBuilderDistributionBucketOptionsExplicitBuckets{builder: b.builder}
}

func (b *filterCndBuilderDistributionBucketOptions) DynamicBuckets() *filterCndBuilderDistributionBucketOptionsDynamicBuckets {
	return &filterCndBuilderDistributionBucketOptionsDynamicBuckets{builder: b.builder}
}

type filterCndBuilderDistributionBucketOptionsLinearBuckets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) Eq(value *common.Distribution_BucketOptions_Linear) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) Neq(value *common.Distribution_BucketOptions_Linear) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) Gt(value *common.Distribution_BucketOptions_Linear) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) Gte(value *common.Distribution_BucketOptions_Linear) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) Lt(value *common.Distribution_BucketOptions_Linear) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) Lte(value *common.Distribution_BucketOptions_Linear) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) In(values []*common.Distribution_BucketOptions_Linear) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) NotIn(values []*common.Distribution_BucketOptions_Linear) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) compare(op gotenfilter.CompareOperator, value *common.Distribution_BucketOptions_Linear) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().WithValue(value),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) NumFiniteBuckets() *filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets {
	return &filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets{builder: b.builder}
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) Width() *filterCndBuilderDistributionBucketOptionsLinearBucketsWidth {
	return &filterCndBuilderDistributionBucketOptionsLinearBucketsWidth{builder: b.builder}
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBuckets) Offset() *filterCndBuilderDistributionBucketOptionsLinearBucketsOffset {
	return &filterCndBuilderDistributionBucketOptionsLinearBucketsOffset{builder: b.builder}
}

type filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().NumFiniteBuckets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().NumFiniteBuckets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().NumFiniteBuckets().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().NumFiniteBuckets().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsNumFiniteBuckets) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().NumFiniteBuckets().WithValue(value),
	})
}

type filterCndBuilderDistributionBucketOptionsLinearBucketsWidth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsWidth) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsWidth) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsWidth) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsWidth) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsWidth) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsWidth) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsWidth) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().Width().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsWidth) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().Width().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsWidth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().Width().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsWidth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().Width().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsWidth) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().Width().WithValue(value),
	})
}

type filterCndBuilderDistributionBucketOptionsLinearBucketsOffset struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsOffset) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsOffset) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsOffset) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsOffset) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsOffset) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsOffset) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsOffset) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().Offset().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsOffset) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().Offset().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsOffset) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().Offset().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsOffset) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().Offset().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsLinearBucketsOffset) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().LinearBuckets().Offset().WithValue(value),
	})
}

type filterCndBuilderDistributionBucketOptionsExponentialBuckets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) Eq(value *common.Distribution_BucketOptions_Exponential) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) Neq(value *common.Distribution_BucketOptions_Exponential) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) Gt(value *common.Distribution_BucketOptions_Exponential) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) Gte(value *common.Distribution_BucketOptions_Exponential) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) Lt(value *common.Distribution_BucketOptions_Exponential) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) Lte(value *common.Distribution_BucketOptions_Exponential) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) In(values []*common.Distribution_BucketOptions_Exponential) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) NotIn(values []*common.Distribution_BucketOptions_Exponential) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) compare(op gotenfilter.CompareOperator, value *common.Distribution_BucketOptions_Exponential) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().WithValue(value),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) NumFiniteBuckets() *filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets {
	return &filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets{builder: b.builder}
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) GrowthFactor() *filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor {
	return &filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor{builder: b.builder}
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBuckets) Scale() *filterCndBuilderDistributionBucketOptionsExponentialBucketsScale {
	return &filterCndBuilderDistributionBucketOptionsExponentialBucketsScale{builder: b.builder}
}

type filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().NumFiniteBuckets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().NumFiniteBuckets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().NumFiniteBuckets().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().NumFiniteBuckets().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsNumFiniteBuckets) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().NumFiniteBuckets().WithValue(value),
	})
}

type filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().GrowthFactor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().GrowthFactor().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().GrowthFactor().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().GrowthFactor().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsGrowthFactor) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().GrowthFactor().WithValue(value),
	})
}

type filterCndBuilderDistributionBucketOptionsExponentialBucketsScale struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsScale) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsScale) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsScale) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsScale) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsScale) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsScale) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsScale) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().Scale().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsScale) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().Scale().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsScale) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().Scale().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsScale) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().Scale().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExponentialBucketsScale) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExponentialBuckets().Scale().WithValue(value),
	})
}

type filterCndBuilderDistributionBucketOptionsExplicitBuckets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBuckets) Eq(value *common.Distribution_BucketOptions_Explicit) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBuckets) Neq(value *common.Distribution_BucketOptions_Explicit) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBuckets) Gt(value *common.Distribution_BucketOptions_Explicit) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBuckets) Gte(value *common.Distribution_BucketOptions_Explicit) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBuckets) Lt(value *common.Distribution_BucketOptions_Explicit) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBuckets) Lte(value *common.Distribution_BucketOptions_Explicit) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBuckets) In(values []*common.Distribution_BucketOptions_Explicit) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBuckets) NotIn(values []*common.Distribution_BucketOptions_Explicit) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBuckets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBuckets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBuckets) compare(op gotenfilter.CompareOperator, value *common.Distribution_BucketOptions_Explicit) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().WithValue(value),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBuckets) Bounds() *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds {
	return &filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds{builder: b.builder}
}

type filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) Eq(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) Neq(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) Gt(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) Gte(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) Lt(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) Lte(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) In(values [][]float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().Bounds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) NotIn(values [][]float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().Bounds().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().Bounds().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().Bounds().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) Contains(value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().Bounds().FieldPath(),
		Value:     NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().Bounds().WithItemValue(value),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) ContainsAnyOf(values []float64) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().Bounds()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().Bounds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) ContainsAll(values []float64) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().Bounds()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().Bounds().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderDistributionBucketOptionsExplicitBucketsBounds) compare(op gotenfilter.CompareOperator, value []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().ExplicitBuckets().Bounds().WithValue(value),
	})
}

type filterCndBuilderDistributionBucketOptionsDynamicBuckets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBuckets) Eq(value *common.Distribution_BucketOptions_Dynamic) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBuckets) Neq(value *common.Distribution_BucketOptions_Dynamic) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBuckets) Gt(value *common.Distribution_BucketOptions_Dynamic) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBuckets) Gte(value *common.Distribution_BucketOptions_Dynamic) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBuckets) Lt(value *common.Distribution_BucketOptions_Dynamic) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBuckets) Lte(value *common.Distribution_BucketOptions_Dynamic) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBuckets) In(values []*common.Distribution_BucketOptions_Dynamic) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBuckets) NotIn(values []*common.Distribution_BucketOptions_Dynamic) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBuckets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBuckets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBuckets) compare(op gotenfilter.CompareOperator, value *common.Distribution_BucketOptions_Dynamic) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().WithValue(value),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBuckets) Compression() *filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression {
	return &filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression{builder: b.builder}
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBuckets) Means() *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans {
	return &filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans{builder: b.builder}
}

type filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Compression().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Compression().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Compression().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Compression().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsCompression) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Compression().WithValue(value),
	})
}

type filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) Eq(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) Neq(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) Gt(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) Gte(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) Lt(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) Lte(value []float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) In(values [][]float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Means().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) NotIn(values [][]float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Means().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Means().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Means().FieldPath(),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) Contains(value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Means().FieldPath(),
		Value:     NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Means().WithItemValue(value),
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) ContainsAnyOf(values []float64) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Means()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Means().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) ContainsAll(values []float64) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Means()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Means().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderDistributionBucketOptionsDynamicBucketsMeans) compare(op gotenfilter.CompareOperator, value []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().DistributionBucketOptions().DynamicBuckets().Means().WithValue(value),
	})
}

type filterCndBuilderPromotedLabelKeySets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderPromotedLabelKeySets) Eq(value []*common.LabelKeySet) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderPromotedLabelKeySets) Neq(value []*common.LabelKeySet) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderPromotedLabelKeySets) Gt(value []*common.LabelKeySet) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderPromotedLabelKeySets) Gte(value []*common.LabelKeySet) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderPromotedLabelKeySets) Lt(value []*common.LabelKeySet) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderPromotedLabelKeySets) Lte(value []*common.LabelKeySet) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderPromotedLabelKeySets) In(values [][]*common.LabelKeySet) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderPromotedLabelKeySets) NotIn(values [][]*common.LabelKeySet) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderPromotedLabelKeySets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().FieldPath(),
	})
}

func (b *filterCndBuilderPromotedLabelKeySets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().FieldPath(),
	})
}

func (b *filterCndBuilderPromotedLabelKeySets) Contains(value *common.LabelKeySet) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().FieldPath(),
		Value:     NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().WithItemValue(value),
	})
}

func (b *filterCndBuilderPromotedLabelKeySets) ContainsAnyOf(values []*common.LabelKeySet) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderPromotedLabelKeySets) ContainsAll(values []*common.LabelKeySet) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderPromotedLabelKeySets) compare(op gotenfilter.CompareOperator, value []*common.LabelKeySet) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().WithValue(value),
	})
}

func (b *filterCndBuilderPromotedLabelKeySets) LabelKeys() *filterCndBuilderPromotedLabelKeySetsLabelKeys {
	return &filterCndBuilderPromotedLabelKeySetsLabelKeys{builder: b.builder}
}

func (b *filterCndBuilderPromotedLabelKeySets) WriteOnly() *filterCndBuilderPromotedLabelKeySetsWriteOnly {
	return &filterCndBuilderPromotedLabelKeySetsWriteOnly{builder: b.builder}
}

type filterCndBuilderPromotedLabelKeySetsLabelKeys struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().LabelKeys().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().LabelKeys().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().LabelKeys().FieldPath(),
	})
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().LabelKeys().FieldPath(),
	})
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().LabelKeys().FieldPath(),
		Value:     NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().LabelKeys().WithItemValue(value),
	})
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().LabelKeys()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().LabelKeys().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().LabelKeys()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().LabelKeys().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderPromotedLabelKeySetsLabelKeys) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().LabelKeys().WithValue(value),
	})
}

type filterCndBuilderPromotedLabelKeySetsWriteOnly struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderPromotedLabelKeySetsWriteOnly) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderPromotedLabelKeySetsWriteOnly) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderPromotedLabelKeySetsWriteOnly) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderPromotedLabelKeySetsWriteOnly) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderPromotedLabelKeySetsWriteOnly) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderPromotedLabelKeySetsWriteOnly) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderPromotedLabelKeySetsWriteOnly) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().WriteOnly().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderPromotedLabelKeySetsWriteOnly) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().WriteOnly().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderPromotedLabelKeySetsWriteOnly) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().WriteOnly().FieldPath(),
	})
}

func (b *filterCndBuilderPromotedLabelKeySetsWriteOnly) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().WriteOnly().FieldPath(),
	})
}

func (b *filterCndBuilderPromotedLabelKeySetsWriteOnly) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().PromotedLabelKeySets().WriteOnly().WithValue(value),
	})
}

type filterCndBuilderIndexSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderIndexSpec) Eq(value *MetricDescriptor_IndexSpec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderIndexSpec) Neq(value *MetricDescriptor_IndexSpec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderIndexSpec) Gt(value *MetricDescriptor_IndexSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderIndexSpec) Gte(value *MetricDescriptor_IndexSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderIndexSpec) Lt(value *MetricDescriptor_IndexSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderIndexSpec) Lte(value *MetricDescriptor_IndexSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderIndexSpec) In(values []*MetricDescriptor_IndexSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().IndexSpec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIndexSpec) NotIn(values []*MetricDescriptor_IndexSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().IndexSpec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIndexSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().FieldPath(),
	})
}

func (b *filterCndBuilderIndexSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().FieldPath(),
	})
}

func (b *filterCndBuilderIndexSpec) compare(op gotenfilter.CompareOperator, value *MetricDescriptor_IndexSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().IndexSpec().WithValue(value),
	})
}

func (b *filterCndBuilderIndexSpec) PerResource() *filterCndBuilderIndexSpecPerResource {
	return &filterCndBuilderIndexSpecPerResource{builder: b.builder}
}

type filterCndBuilderIndexSpecPerResource struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderIndexSpecPerResource) Eq(value []*MetricDescriptor_IndexSpec_PerMonitoredResource) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderIndexSpecPerResource) Neq(value []*MetricDescriptor_IndexSpec_PerMonitoredResource) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderIndexSpecPerResource) Gt(value []*MetricDescriptor_IndexSpec_PerMonitoredResource) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderIndexSpecPerResource) Gte(value []*MetricDescriptor_IndexSpec_PerMonitoredResource) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderIndexSpecPerResource) Lt(value []*MetricDescriptor_IndexSpec_PerMonitoredResource) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderIndexSpecPerResource) Lte(value []*MetricDescriptor_IndexSpec_PerMonitoredResource) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderIndexSpecPerResource) In(values [][]*MetricDescriptor_IndexSpec_PerMonitoredResource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIndexSpecPerResource) NotIn(values [][]*MetricDescriptor_IndexSpec_PerMonitoredResource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIndexSpecPerResource) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().FieldPath(),
	})
}

func (b *filterCndBuilderIndexSpecPerResource) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().FieldPath(),
	})
}

func (b *filterCndBuilderIndexSpecPerResource) Contains(value *MetricDescriptor_IndexSpec_PerMonitoredResource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().FieldPath(),
		Value:     NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().WithItemValue(value),
	})
}

func (b *filterCndBuilderIndexSpecPerResource) ContainsAnyOf(values []*MetricDescriptor_IndexSpec_PerMonitoredResource) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderIndexSpecPerResource) ContainsAll(values []*MetricDescriptor_IndexSpec_PerMonitoredResource) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderIndexSpecPerResource) compare(op gotenfilter.CompareOperator, value []*MetricDescriptor_IndexSpec_PerMonitoredResource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().WithValue(value),
	})
}

func (b *filterCndBuilderIndexSpecPerResource) Resource() *filterCndBuilderIndexSpecPerResourceResource {
	return &filterCndBuilderIndexSpecPerResourceResource{builder: b.builder}
}

func (b *filterCndBuilderIndexSpecPerResource) Indices() *filterCndBuilderIndexSpecPerResourceIndices {
	return &filterCndBuilderIndexSpecPerResourceIndices{builder: b.builder}
}

type filterCndBuilderIndexSpecPerResourceResource struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderIndexSpecPerResourceResource) Eq(value *monitored_resource_descriptor.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderIndexSpecPerResourceResource) Neq(value *monitored_resource_descriptor.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderIndexSpecPerResourceResource) Gt(value *monitored_resource_descriptor.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderIndexSpecPerResourceResource) Gte(value *monitored_resource_descriptor.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderIndexSpecPerResourceResource) Lt(value *monitored_resource_descriptor.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderIndexSpecPerResourceResource) Lte(value *monitored_resource_descriptor.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderIndexSpecPerResourceResource) In(values []*monitored_resource_descriptor.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Resource().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceResource) NotIn(values []*monitored_resource_descriptor.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Resource().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceResource) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Resource().FieldPath(),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceResource) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Resource().FieldPath(),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceResource) compare(op gotenfilter.CompareOperator, value *monitored_resource_descriptor.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Resource().WithValue(value),
	})
}

type filterCndBuilderIndexSpecPerResourceIndices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) Eq(value []*MetricDescriptor_IndexSpec_Index) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) Neq(value []*MetricDescriptor_IndexSpec_Index) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) Gt(value []*MetricDescriptor_IndexSpec_Index) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) Gte(value []*MetricDescriptor_IndexSpec_Index) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) Lt(value []*MetricDescriptor_IndexSpec_Index) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) Lte(value []*MetricDescriptor_IndexSpec_Index) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) In(values [][]*MetricDescriptor_IndexSpec_Index) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) NotIn(values [][]*MetricDescriptor_IndexSpec_Index) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().FieldPath(),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().FieldPath(),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) Contains(value *MetricDescriptor_IndexSpec_Index) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().FieldPath(),
		Value:     NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().WithItemValue(value),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) ContainsAnyOf(values []*MetricDescriptor_IndexSpec_Index) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) ContainsAll(values []*MetricDescriptor_IndexSpec_Index) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) compare(op gotenfilter.CompareOperator, value []*MetricDescriptor_IndexSpec_Index) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().WithValue(value),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) PromotedLabels() *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels {
	return &filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels{builder: b.builder}
}

func (b *filterCndBuilderIndexSpecPerResourceIndices) WriteOnly() *filterCndBuilderIndexSpecPerResourceIndicesWriteOnly {
	return &filterCndBuilderIndexSpecPerResourceIndicesWriteOnly{builder: b.builder}
}

type filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().PromotedLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().PromotedLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().PromotedLabels().FieldPath(),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().PromotedLabels().FieldPath(),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().PromotedLabels().FieldPath(),
		Value:     NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().PromotedLabels().WithItemValue(value),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().PromotedLabels()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().PromotedLabels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().PromotedLabels()
	itemValues := make([]MetricDescriptor_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().PromotedLabels().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesPromotedLabels) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().PromotedLabels().WithValue(value),
	})
}

type filterCndBuilderIndexSpecPerResourceIndicesWriteOnly struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesWriteOnly) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesWriteOnly) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesWriteOnly) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesWriteOnly) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesWriteOnly) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesWriteOnly) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesWriteOnly) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().WriteOnly().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesWriteOnly) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().WriteOnly().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesWriteOnly) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().WriteOnly().FieldPath(),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesWriteOnly) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().WriteOnly().FieldPath(),
	})
}

func (b *filterCndBuilderIndexSpecPerResourceIndicesWriteOnly) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().IndexSpec().PerResource().Indices().WriteOnly().WithValue(value),
	})
}

type filterCndBuilderStorageConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStorageConfig) Eq(value *MetricDescriptor_StorageConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStorageConfig) Neq(value *MetricDescriptor_StorageConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStorageConfig) Gt(value *MetricDescriptor_StorageConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStorageConfig) Gte(value *MetricDescriptor_StorageConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStorageConfig) Lt(value *MetricDescriptor_StorageConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStorageConfig) Lte(value *MetricDescriptor_StorageConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStorageConfig) In(values []*MetricDescriptor_StorageConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().StorageConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStorageConfig) NotIn(values []*MetricDescriptor_StorageConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().StorageConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStorageConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().StorageConfig().FieldPath(),
	})
}

func (b *filterCndBuilderStorageConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().StorageConfig().FieldPath(),
	})
}

func (b *filterCndBuilderStorageConfig) compare(op gotenfilter.CompareOperator, value *MetricDescriptor_StorageConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().StorageConfig().WithValue(value),
	})
}

func (b *filterCndBuilderStorageConfig) StoreRawPoints() *filterCndBuilderStorageConfigStoreRawPoints {
	return &filterCndBuilderStorageConfigStoreRawPoints{builder: b.builder}
}

type filterCndBuilderStorageConfigStoreRawPoints struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStorageConfigStoreRawPoints) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStorageConfigStoreRawPoints) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStorageConfigStoreRawPoints) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStorageConfigStoreRawPoints) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStorageConfigStoreRawPoints) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStorageConfigStoreRawPoints) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStorageConfigStoreRawPoints) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().StorageConfig().StoreRawPoints().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStorageConfigStoreRawPoints) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		MetricDescriptor_FieldPathArrayOfValues: NewMetricDescriptorFieldPathBuilder().StorageConfig().StoreRawPoints().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStorageConfigStoreRawPoints) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewMetricDescriptorFieldPathBuilder().StorageConfig().StoreRawPoints().FieldPath(),
	})
}

func (b *filterCndBuilderStorageConfigStoreRawPoints) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewMetricDescriptorFieldPathBuilder().StorageConfig().StoreRawPoints().FieldPath(),
	})
}

func (b *filterCndBuilderStorageConfigStoreRawPoints) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                        op,
		MetricDescriptor_FieldPathValue: NewMetricDescriptorFieldPathBuilder().StorageConfig().StoreRawPoints().WithValue(value),
	})
}
