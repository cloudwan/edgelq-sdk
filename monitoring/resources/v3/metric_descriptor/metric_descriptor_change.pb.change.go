// Code generated by protoc-gen-goten-resource
// Resource change: MetricDescriptorChange
// DO NOT EDIT!!!

package metric_descriptor

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &field_mask.FieldMask{}
)

func (c *MetricDescriptorChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*MetricDescriptorChange_Added_)
	return ok
}

func (c *MetricDescriptorChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*MetricDescriptorChange_Modified_)
	return ok
}

func (c *MetricDescriptorChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*MetricDescriptorChange_Current_)
	return ok
}

func (c *MetricDescriptorChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*MetricDescriptorChange_Removed_)
	return ok
}

func (c *MetricDescriptorChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *MetricDescriptorChange_Added_:
		return cType.Added.ViewIndex
	case *MetricDescriptorChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *MetricDescriptorChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *MetricDescriptorChange_Removed_:
		return cType.Removed.ViewIndex
	case *MetricDescriptorChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *MetricDescriptorChange) GetMetricDescriptor() *MetricDescriptor {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *MetricDescriptorChange_Added_:
		return cType.Added.MetricDescriptor
	case *MetricDescriptorChange_Modified_:
		return cType.Modified.MetricDescriptor
	case *MetricDescriptorChange_Current_:
		return cType.Current.MetricDescriptor
	case *MetricDescriptorChange_Removed_:
		return nil
	}
	return nil
}

func (c *MetricDescriptorChange) GetResource() gotenresource.Resource {
	return c.GetMetricDescriptor()
}

func (c *MetricDescriptorChange) GetMetricDescriptorName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *MetricDescriptorChange_Added_:
		return cType.Added.MetricDescriptor.GetName()
	case *MetricDescriptorChange_Modified_:
		return cType.Modified.Name
	case *MetricDescriptorChange_Current_:
		return cType.Current.MetricDescriptor.GetName()
	case *MetricDescriptorChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *MetricDescriptorChange) GetRawName() gotenresource.Name {
	return c.GetMetricDescriptorName()
}

func (c *MetricDescriptorChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &MetricDescriptorChange_Added_{
		Added: &MetricDescriptorChange_Added{
			MetricDescriptor: snapshot.(*MetricDescriptor),
			ViewIndex:        int32(idx),
		},
	}
}

func (c *MetricDescriptorChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &MetricDescriptorChange_Modified_{
		Modified: &MetricDescriptorChange_Modified{
			Name:              name.(*Name),
			MetricDescriptor:  snapshot.(*MetricDescriptor),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *MetricDescriptorChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &MetricDescriptorChange_Current_{
		Current: &MetricDescriptorChange_Current{
			MetricDescriptor: snapshot.(*MetricDescriptor),
		},
	}
}

func (c *MetricDescriptorChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &MetricDescriptorChange_Removed_{
		Removed: &MetricDescriptorChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
