// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/metric_descriptor.proto
// DO NOT EDIT!!!

package metric_descriptor

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/common/v3"
	monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/monitored_resource_descriptor"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = api.LaunchStage(0)
	_ = &ntt_meta.Meta{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &project.Project{}
)

type MetricDescriptor_FieldMask struct {
	Paths []MetricDescriptor_FieldPath
}

func FullMetricDescriptor_FieldMask() *MetricDescriptor_FieldMask {
	res := &MetricDescriptor_FieldMask{}
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorName})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorType})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorResourceTypes})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorLabels})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorMetricKind})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorValueType})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorUnit})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorMetricDescriptorMetadata})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorDistributionBucketOptions})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorPromotedLabelKeySets})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorIndexSpec})
	res.Paths = append(res.Paths, &MetricDescriptor_FieldTerminalPath{selector: MetricDescriptor_FieldPathSelectorStorageConfig})
	return res
}

func (fieldMask *MetricDescriptor_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *MetricDescriptor_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *MetricDescriptor_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseMetricDescriptor_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *MetricDescriptor_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 15)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*MetricDescriptor_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *MetricDescriptor_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseMetricDescriptor_FieldPath(raw)
	})
}

func (fieldMask *MetricDescriptor_FieldMask) ProtoMessage() {}

func (fieldMask *MetricDescriptor_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *MetricDescriptor_FieldMask) Subtract(other *MetricDescriptor_FieldMask) *MetricDescriptor_FieldMask {
	result := &MetricDescriptor_FieldMask{}
	removedSelectors := make([]bool, 15)
	otherSubMasks := map[MetricDescriptor_FieldPathSelector]gotenobject.FieldMask{
		MetricDescriptor_FieldPathSelectorMetadata:                  &ntt_meta.Meta_FieldMask{},
		MetricDescriptor_FieldPathSelectorLabels:                    &monitoring_common.LabelDescriptor_FieldMask{},
		MetricDescriptor_FieldPathSelectorMetricDescriptorMetadata:  &MetricDescriptor_MetricDescriptorMetadata_FieldMask{},
		MetricDescriptor_FieldPathSelectorDistributionBucketOptions: &monitoring_common.Distribution_BucketOptions_FieldMask{},
		MetricDescriptor_FieldPathSelectorPromotedLabelKeySets:      &monitoring_common.LabelKeySet_FieldMask{},
		MetricDescriptor_FieldPathSelectorIndexSpec:                 &MetricDescriptor_IndexSpec_FieldMask{},
		MetricDescriptor_FieldPathSelectorStorageConfig:             &MetricDescriptor_StorageConfig_FieldMask{},
	}
	mySubMasks := map[MetricDescriptor_FieldPathSelector]gotenobject.FieldMask{
		MetricDescriptor_FieldPathSelectorMetadata:                  &ntt_meta.Meta_FieldMask{},
		MetricDescriptor_FieldPathSelectorLabels:                    &monitoring_common.LabelDescriptor_FieldMask{},
		MetricDescriptor_FieldPathSelectorMetricDescriptorMetadata:  &MetricDescriptor_MetricDescriptorMetadata_FieldMask{},
		MetricDescriptor_FieldPathSelectorDistributionBucketOptions: &monitoring_common.Distribution_BucketOptions_FieldMask{},
		MetricDescriptor_FieldPathSelectorPromotedLabelKeySets:      &monitoring_common.LabelKeySet_FieldMask{},
		MetricDescriptor_FieldPathSelectorIndexSpec:                 &MetricDescriptor_IndexSpec_FieldMask{},
		MetricDescriptor_FieldPathSelectorStorageConfig:             &MetricDescriptor_StorageConfig_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *MetricDescriptor_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *MetricDescriptor_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*MetricDescriptor_FieldTerminalPath); ok {
					switch tp.selector {
					case MetricDescriptor_FieldPathSelectorMetadata:
						mySubMasks[MetricDescriptor_FieldPathSelectorMetadata] = ntt_meta.FullMeta_FieldMask()
					case MetricDescriptor_FieldPathSelectorLabels:
						mySubMasks[MetricDescriptor_FieldPathSelectorLabels] = monitoring_common.FullLabelDescriptor_FieldMask()
					case MetricDescriptor_FieldPathSelectorMetricDescriptorMetadata:
						mySubMasks[MetricDescriptor_FieldPathSelectorMetricDescriptorMetadata] = FullMetricDescriptor_MetricDescriptorMetadata_FieldMask()
					case MetricDescriptor_FieldPathSelectorDistributionBucketOptions:
						mySubMasks[MetricDescriptor_FieldPathSelectorDistributionBucketOptions] = monitoring_common.FullDistribution_BucketOptions_FieldMask()
					case MetricDescriptor_FieldPathSelectorPromotedLabelKeySets:
						mySubMasks[MetricDescriptor_FieldPathSelectorPromotedLabelKeySets] = monitoring_common.FullLabelKeySet_FieldMask()
					case MetricDescriptor_FieldPathSelectorIndexSpec:
						mySubMasks[MetricDescriptor_FieldPathSelectorIndexSpec] = FullMetricDescriptor_IndexSpec_FieldMask()
					case MetricDescriptor_FieldPathSelectorStorageConfig:
						mySubMasks[MetricDescriptor_FieldPathSelectorStorageConfig] = FullMetricDescriptor_StorageConfig_FieldMask()
					}
				} else if tp, ok := path.(*MetricDescriptor_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &MetricDescriptor_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *MetricDescriptor_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*MetricDescriptor_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *MetricDescriptor_FieldMask) FilterInputFields() *MetricDescriptor_FieldMask {
	result := &MetricDescriptor_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case MetricDescriptor_FieldPathSelectorMetadata:
			if _, ok := path.(*MetricDescriptor_FieldTerminalPath); ok {
				for _, subpath := range ntt_meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &MetricDescriptor_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*MetricDescriptor_FieldSubPath); ok {
				selectedMask := &ntt_meta.Meta_FieldMask{
					Paths: []ntt_meta.Meta_FieldPath{sub.subPath.(ntt_meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &MetricDescriptor_FieldSubPath{selector: MetricDescriptor_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *MetricDescriptor_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *MetricDescriptor_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]MetricDescriptor_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseMetricDescriptor_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask MetricDescriptor_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *MetricDescriptor_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MetricDescriptor_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask MetricDescriptor_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *MetricDescriptor_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MetricDescriptor_FieldMask) AppendPath(path MetricDescriptor_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *MetricDescriptor_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(MetricDescriptor_FieldPath))
}

func (fieldMask *MetricDescriptor_FieldMask) GetPaths() []MetricDescriptor_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *MetricDescriptor_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *MetricDescriptor_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseMetricDescriptor_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *MetricDescriptor_FieldMask) Set(target, source *MetricDescriptor) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *MetricDescriptor_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*MetricDescriptor), source.(*MetricDescriptor))
}

func (fieldMask *MetricDescriptor_FieldMask) Project(source *MetricDescriptor) *MetricDescriptor {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &MetricDescriptor{}
	metadataMask := &ntt_meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	labelsMask := &monitoring_common.LabelDescriptor_FieldMask{}
	wholeLabelsAccepted := false
	metricDescriptorMetadataMask := &MetricDescriptor_MetricDescriptorMetadata_FieldMask{}
	wholeMetricDescriptorMetadataAccepted := false
	distributionBucketOptionsMask := &monitoring_common.Distribution_BucketOptions_FieldMask{}
	wholeDistributionBucketOptionsAccepted := false
	promotedLabelKeySetsMask := &monitoring_common.LabelKeySet_FieldMask{}
	wholePromotedLabelKeySetsAccepted := false
	indexSpecMask := &MetricDescriptor_IndexSpec_FieldMask{}
	wholeIndexSpecAccepted := false
	storageConfigMask := &MetricDescriptor_StorageConfig_FieldMask{}
	wholeStorageConfigAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *MetricDescriptor_FieldTerminalPath:
			switch tp.selector {
			case MetricDescriptor_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case MetricDescriptor_FieldPathSelectorName:
				result.Name = source.Name
			case MetricDescriptor_FieldPathSelectorType:
				result.Type = source.Type
			case MetricDescriptor_FieldPathSelectorResourceTypes:
				result.ResourceTypes = source.ResourceTypes
			case MetricDescriptor_FieldPathSelectorLabels:
				result.Labels = source.Labels
				wholeLabelsAccepted = true
			case MetricDescriptor_FieldPathSelectorMetricKind:
				result.MetricKind = source.MetricKind
			case MetricDescriptor_FieldPathSelectorValueType:
				result.ValueType = source.ValueType
			case MetricDescriptor_FieldPathSelectorUnit:
				result.Unit = source.Unit
			case MetricDescriptor_FieldPathSelectorDescription:
				result.Description = source.Description
			case MetricDescriptor_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case MetricDescriptor_FieldPathSelectorMetricDescriptorMetadata:
				result.MetricDescriptorMetadata = source.MetricDescriptorMetadata
				wholeMetricDescriptorMetadataAccepted = true
			case MetricDescriptor_FieldPathSelectorDistributionBucketOptions:
				result.DistributionBucketOptions = source.DistributionBucketOptions
				wholeDistributionBucketOptionsAccepted = true
			case MetricDescriptor_FieldPathSelectorPromotedLabelKeySets:
				result.PromotedLabelKeySets = source.PromotedLabelKeySets
				wholePromotedLabelKeySetsAccepted = true
			case MetricDescriptor_FieldPathSelectorIndexSpec:
				result.IndexSpec = source.IndexSpec
				wholeIndexSpecAccepted = true
			case MetricDescriptor_FieldPathSelectorStorageConfig:
				result.StorageConfig = source.StorageConfig
				wholeStorageConfigAccepted = true
			}
		case *MetricDescriptor_FieldSubPath:
			switch tp.selector {
			case MetricDescriptor_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(ntt_meta.Meta_FieldPath))
			case MetricDescriptor_FieldPathSelectorLabels:
				labelsMask.AppendPath(tp.subPath.(monitoring_common.LabelDescriptor_FieldPath))
			case MetricDescriptor_FieldPathSelectorMetricDescriptorMetadata:
				metricDescriptorMetadataMask.AppendPath(tp.subPath.(MetricDescriptorMetricDescriptorMetadata_FieldPath))
			case MetricDescriptor_FieldPathSelectorDistributionBucketOptions:
				distributionBucketOptionsMask.AppendPath(tp.subPath.(monitoring_common.DistributionBucketOptions_FieldPath))
			case MetricDescriptor_FieldPathSelectorPromotedLabelKeySets:
				promotedLabelKeySetsMask.AppendPath(tp.subPath.(monitoring_common.LabelKeySet_FieldPath))
			case MetricDescriptor_FieldPathSelectorIndexSpec:
				indexSpecMask.AppendPath(tp.subPath.(MetricDescriptorIndexSpec_FieldPath))
			case MetricDescriptor_FieldPathSelectorStorageConfig:
				storageConfigMask.AppendPath(tp.subPath.(MetricDescriptorStorageConfig_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeLabelsAccepted == false && len(labelsMask.Paths) > 0 {
		for _, sourceItem := range source.GetLabels() {
			result.Labels = append(result.Labels, labelsMask.Project(sourceItem))
		}
	}
	if wholeMetricDescriptorMetadataAccepted == false && len(metricDescriptorMetadataMask.Paths) > 0 {
		result.MetricDescriptorMetadata = metricDescriptorMetadataMask.Project(source.GetMetricDescriptorMetadata())
	}
	if wholeDistributionBucketOptionsAccepted == false && len(distributionBucketOptionsMask.Paths) > 0 {
		result.DistributionBucketOptions = distributionBucketOptionsMask.Project(source.GetDistributionBucketOptions())
	}
	if wholePromotedLabelKeySetsAccepted == false && len(promotedLabelKeySetsMask.Paths) > 0 {
		for _, sourceItem := range source.GetPromotedLabelKeySets() {
			result.PromotedLabelKeySets = append(result.PromotedLabelKeySets, promotedLabelKeySetsMask.Project(sourceItem))
		}
	}
	if wholeIndexSpecAccepted == false && len(indexSpecMask.Paths) > 0 {
		result.IndexSpec = indexSpecMask.Project(source.GetIndexSpec())
	}
	if wholeStorageConfigAccepted == false && len(storageConfigMask.Paths) > 0 {
		result.StorageConfig = storageConfigMask.Project(source.GetStorageConfig())
	}
	return result
}

func (fieldMask *MetricDescriptor_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*MetricDescriptor))
}

func (fieldMask *MetricDescriptor_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type MetricDescriptor_MetricDescriptorMetadata_FieldMask struct {
	Paths []MetricDescriptorMetricDescriptorMetadata_FieldPath
}

func FullMetricDescriptor_MetricDescriptorMetadata_FieldMask() *MetricDescriptor_MetricDescriptorMetadata_FieldMask {
	res := &MetricDescriptor_MetricDescriptorMetadata_FieldMask{}
	res.Paths = append(res.Paths, &MetricDescriptorMetricDescriptorMetadata_FieldTerminalPath{selector: MetricDescriptorMetricDescriptorMetadata_FieldPathSelectorLaunchStage})
	return res
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseMetricDescriptorMetricDescriptorMetadata_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*MetricDescriptorMetricDescriptorMetadata_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseMetricDescriptorMetricDescriptorMetadata_FieldPath(raw)
	})
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) ProtoMessage() {}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) Subtract(other *MetricDescriptor_MetricDescriptorMetadata_FieldMask) *MetricDescriptor_MetricDescriptorMetadata_FieldMask {
	result := &MetricDescriptor_MetricDescriptorMetadata_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *MetricDescriptorMetricDescriptorMetadata_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*MetricDescriptor_MetricDescriptorMetadata_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) FilterInputFields() *MetricDescriptor_MetricDescriptorMetadata_FieldMask {
	result := &MetricDescriptor_MetricDescriptorMetadata_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]MetricDescriptorMetricDescriptorMetadata_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseMetricDescriptorMetricDescriptorMetadata_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask MetricDescriptor_MetricDescriptorMetadata_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask MetricDescriptor_MetricDescriptorMetadata_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) AppendPath(path MetricDescriptorMetricDescriptorMetadata_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(MetricDescriptorMetricDescriptorMetadata_FieldPath))
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) GetPaths() []MetricDescriptorMetricDescriptorMetadata_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseMetricDescriptorMetricDescriptorMetadata_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) Set(target, source *MetricDescriptor_MetricDescriptorMetadata) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*MetricDescriptor_MetricDescriptorMetadata), source.(*MetricDescriptor_MetricDescriptorMetadata))
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) Project(source *MetricDescriptor_MetricDescriptorMetadata) *MetricDescriptor_MetricDescriptorMetadata {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &MetricDescriptor_MetricDescriptorMetadata{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *MetricDescriptorMetricDescriptorMetadata_FieldTerminalPath:
			switch tp.selector {
			case MetricDescriptorMetricDescriptorMetadata_FieldPathSelectorLaunchStage:
				result.LaunchStage = source.LaunchStage
			}
		}
	}
	return result
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*MetricDescriptor_MetricDescriptorMetadata))
}

func (fieldMask *MetricDescriptor_MetricDescriptorMetadata_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type MetricDescriptor_IndexSpec_FieldMask struct {
	Paths []MetricDescriptorIndexSpec_FieldPath
}

func FullMetricDescriptor_IndexSpec_FieldMask() *MetricDescriptor_IndexSpec_FieldMask {
	res := &MetricDescriptor_IndexSpec_FieldMask{}
	res.Paths = append(res.Paths, &MetricDescriptorIndexSpec_FieldTerminalPath{selector: MetricDescriptorIndexSpec_FieldPathSelectorPerResource})
	return res
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseMetricDescriptorIndexSpec_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*MetricDescriptorIndexSpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseMetricDescriptorIndexSpec_FieldPath(raw)
	})
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) ProtoMessage() {}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) Subtract(other *MetricDescriptor_IndexSpec_FieldMask) *MetricDescriptor_IndexSpec_FieldMask {
	result := &MetricDescriptor_IndexSpec_FieldMask{}
	removedSelectors := make([]bool, 1)
	otherSubMasks := map[MetricDescriptorIndexSpec_FieldPathSelector]gotenobject.FieldMask{
		MetricDescriptorIndexSpec_FieldPathSelectorPerResource: &MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask{},
	}
	mySubMasks := map[MetricDescriptorIndexSpec_FieldPathSelector]gotenobject.FieldMask{
		MetricDescriptorIndexSpec_FieldPathSelectorPerResource: &MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *MetricDescriptorIndexSpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *MetricDescriptorIndexSpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*MetricDescriptorIndexSpec_FieldTerminalPath); ok {
					switch tp.selector {
					case MetricDescriptorIndexSpec_FieldPathSelectorPerResource:
						mySubMasks[MetricDescriptorIndexSpec_FieldPathSelectorPerResource] = FullMetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask()
					}
				} else if tp, ok := path.(*MetricDescriptorIndexSpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &MetricDescriptorIndexSpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*MetricDescriptor_IndexSpec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) FilterInputFields() *MetricDescriptor_IndexSpec_FieldMask {
	result := &MetricDescriptor_IndexSpec_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]MetricDescriptorIndexSpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseMetricDescriptorIndexSpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask MetricDescriptor_IndexSpec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask MetricDescriptor_IndexSpec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) AppendPath(path MetricDescriptorIndexSpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(MetricDescriptorIndexSpec_FieldPath))
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) GetPaths() []MetricDescriptorIndexSpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseMetricDescriptorIndexSpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) Set(target, source *MetricDescriptor_IndexSpec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*MetricDescriptor_IndexSpec), source.(*MetricDescriptor_IndexSpec))
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) Project(source *MetricDescriptor_IndexSpec) *MetricDescriptor_IndexSpec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &MetricDescriptor_IndexSpec{}
	perResourceMask := &MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask{}
	wholePerResourceAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *MetricDescriptorIndexSpec_FieldTerminalPath:
			switch tp.selector {
			case MetricDescriptorIndexSpec_FieldPathSelectorPerResource:
				result.PerResource = source.PerResource
				wholePerResourceAccepted = true
			}
		case *MetricDescriptorIndexSpec_FieldSubPath:
			switch tp.selector {
			case MetricDescriptorIndexSpec_FieldPathSelectorPerResource:
				perResourceMask.AppendPath(tp.subPath.(MetricDescriptorIndexSpecPerMonitoredResource_FieldPath))
			}
		}
	}
	if wholePerResourceAccepted == false && len(perResourceMask.Paths) > 0 {
		for _, sourceItem := range source.GetPerResource() {
			result.PerResource = append(result.PerResource, perResourceMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*MetricDescriptor_IndexSpec))
}

func (fieldMask *MetricDescriptor_IndexSpec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type MetricDescriptor_StorageConfig_FieldMask struct {
	Paths []MetricDescriptorStorageConfig_FieldPath
}

func FullMetricDescriptor_StorageConfig_FieldMask() *MetricDescriptor_StorageConfig_FieldMask {
	res := &MetricDescriptor_StorageConfig_FieldMask{}
	res.Paths = append(res.Paths, &MetricDescriptorStorageConfig_FieldTerminalPath{selector: MetricDescriptorStorageConfig_FieldPathSelectorStoreRawPoints})
	return res
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseMetricDescriptorStorageConfig_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*MetricDescriptorStorageConfig_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseMetricDescriptorStorageConfig_FieldPath(raw)
	})
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) ProtoMessage() {}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) Subtract(other *MetricDescriptor_StorageConfig_FieldMask) *MetricDescriptor_StorageConfig_FieldMask {
	result := &MetricDescriptor_StorageConfig_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *MetricDescriptorStorageConfig_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*MetricDescriptor_StorageConfig_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) FilterInputFields() *MetricDescriptor_StorageConfig_FieldMask {
	result := &MetricDescriptor_StorageConfig_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]MetricDescriptorStorageConfig_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseMetricDescriptorStorageConfig_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask MetricDescriptor_StorageConfig_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask MetricDescriptor_StorageConfig_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) AppendPath(path MetricDescriptorStorageConfig_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(MetricDescriptorStorageConfig_FieldPath))
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) GetPaths() []MetricDescriptorStorageConfig_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseMetricDescriptorStorageConfig_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) Set(target, source *MetricDescriptor_StorageConfig) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*MetricDescriptor_StorageConfig), source.(*MetricDescriptor_StorageConfig))
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) Project(source *MetricDescriptor_StorageConfig) *MetricDescriptor_StorageConfig {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &MetricDescriptor_StorageConfig{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *MetricDescriptorStorageConfig_FieldTerminalPath:
			switch tp.selector {
			case MetricDescriptorStorageConfig_FieldPathSelectorStoreRawPoints:
				result.StoreRawPoints = source.StoreRawPoints
			}
		}
	}
	return result
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*MetricDescriptor_StorageConfig))
}

func (fieldMask *MetricDescriptor_StorageConfig_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type MetricDescriptor_IndexSpec_Index_FieldMask struct {
	Paths []MetricDescriptorIndexSpecIndex_FieldPath
}

func FullMetricDescriptor_IndexSpec_Index_FieldMask() *MetricDescriptor_IndexSpec_Index_FieldMask {
	res := &MetricDescriptor_IndexSpec_Index_FieldMask{}
	res.Paths = append(res.Paths, &MetricDescriptorIndexSpecIndex_FieldTerminalPath{selector: MetricDescriptorIndexSpecIndex_FieldPathSelectorPromotedLabels})
	res.Paths = append(res.Paths, &MetricDescriptorIndexSpecIndex_FieldTerminalPath{selector: MetricDescriptorIndexSpecIndex_FieldPathSelectorWriteOnly})
	return res
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseMetricDescriptorIndexSpecIndex_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*MetricDescriptorIndexSpecIndex_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseMetricDescriptorIndexSpecIndex_FieldPath(raw)
	})
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) ProtoMessage() {}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) Subtract(other *MetricDescriptor_IndexSpec_Index_FieldMask) *MetricDescriptor_IndexSpec_Index_FieldMask {
	result := &MetricDescriptor_IndexSpec_Index_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *MetricDescriptorIndexSpecIndex_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*MetricDescriptor_IndexSpec_Index_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) FilterInputFields() *MetricDescriptor_IndexSpec_Index_FieldMask {
	result := &MetricDescriptor_IndexSpec_Index_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]MetricDescriptorIndexSpecIndex_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseMetricDescriptorIndexSpecIndex_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask MetricDescriptor_IndexSpec_Index_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask MetricDescriptor_IndexSpec_Index_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) AppendPath(path MetricDescriptorIndexSpecIndex_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(MetricDescriptorIndexSpecIndex_FieldPath))
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) GetPaths() []MetricDescriptorIndexSpecIndex_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseMetricDescriptorIndexSpecIndex_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) Set(target, source *MetricDescriptor_IndexSpec_Index) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*MetricDescriptor_IndexSpec_Index), source.(*MetricDescriptor_IndexSpec_Index))
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) Project(source *MetricDescriptor_IndexSpec_Index) *MetricDescriptor_IndexSpec_Index {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &MetricDescriptor_IndexSpec_Index{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *MetricDescriptorIndexSpecIndex_FieldTerminalPath:
			switch tp.selector {
			case MetricDescriptorIndexSpecIndex_FieldPathSelectorPromotedLabels:
				result.PromotedLabels = source.PromotedLabels
			case MetricDescriptorIndexSpecIndex_FieldPathSelectorWriteOnly:
				result.WriteOnly = source.WriteOnly
			}
		}
	}
	return result
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*MetricDescriptor_IndexSpec_Index))
}

func (fieldMask *MetricDescriptor_IndexSpec_Index_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask struct {
	Paths []MetricDescriptorIndexSpecPerMonitoredResource_FieldPath
}

func FullMetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask() *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask {
	res := &MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask{}
	res.Paths = append(res.Paths, &MetricDescriptorIndexSpecPerMonitoredResource_FieldTerminalPath{selector: MetricDescriptorIndexSpecPerMonitoredResource_FieldPathSelectorResource})
	res.Paths = append(res.Paths, &MetricDescriptorIndexSpecPerMonitoredResource_FieldTerminalPath{selector: MetricDescriptorIndexSpecPerMonitoredResource_FieldPathSelectorIndices})
	return res
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseMetricDescriptorIndexSpecPerMonitoredResource_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*MetricDescriptorIndexSpecPerMonitoredResource_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseMetricDescriptorIndexSpecPerMonitoredResource_FieldPath(raw)
	})
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) ProtoMessage() {}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) Subtract(other *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask {
	result := &MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[MetricDescriptorIndexSpecPerMonitoredResource_FieldPathSelector]gotenobject.FieldMask{
		MetricDescriptorIndexSpecPerMonitoredResource_FieldPathSelectorIndices: &MetricDescriptor_IndexSpec_Index_FieldMask{},
	}
	mySubMasks := map[MetricDescriptorIndexSpecPerMonitoredResource_FieldPathSelector]gotenobject.FieldMask{
		MetricDescriptorIndexSpecPerMonitoredResource_FieldPathSelectorIndices: &MetricDescriptor_IndexSpec_Index_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *MetricDescriptorIndexSpecPerMonitoredResource_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *MetricDescriptorIndexSpecPerMonitoredResource_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*MetricDescriptorIndexSpecPerMonitoredResource_FieldTerminalPath); ok {
					switch tp.selector {
					case MetricDescriptorIndexSpecPerMonitoredResource_FieldPathSelectorIndices:
						mySubMasks[MetricDescriptorIndexSpecPerMonitoredResource_FieldPathSelectorIndices] = FullMetricDescriptor_IndexSpec_Index_FieldMask()
					}
				} else if tp, ok := path.(*MetricDescriptorIndexSpecPerMonitoredResource_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &MetricDescriptorIndexSpecPerMonitoredResource_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) FilterInputFields() *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask {
	result := &MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]MetricDescriptorIndexSpecPerMonitoredResource_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseMetricDescriptorIndexSpecPerMonitoredResource_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) AppendPath(path MetricDescriptorIndexSpecPerMonitoredResource_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(MetricDescriptorIndexSpecPerMonitoredResource_FieldPath))
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) GetPaths() []MetricDescriptorIndexSpecPerMonitoredResource_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseMetricDescriptorIndexSpecPerMonitoredResource_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) Set(target, source *MetricDescriptor_IndexSpec_PerMonitoredResource) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*MetricDescriptor_IndexSpec_PerMonitoredResource), source.(*MetricDescriptor_IndexSpec_PerMonitoredResource))
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) Project(source *MetricDescriptor_IndexSpec_PerMonitoredResource) *MetricDescriptor_IndexSpec_PerMonitoredResource {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &MetricDescriptor_IndexSpec_PerMonitoredResource{}
	indicesMask := &MetricDescriptor_IndexSpec_Index_FieldMask{}
	wholeIndicesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *MetricDescriptorIndexSpecPerMonitoredResource_FieldTerminalPath:
			switch tp.selector {
			case MetricDescriptorIndexSpecPerMonitoredResource_FieldPathSelectorResource:
				result.Resource = source.Resource
			case MetricDescriptorIndexSpecPerMonitoredResource_FieldPathSelectorIndices:
				result.Indices = source.Indices
				wholeIndicesAccepted = true
			}
		case *MetricDescriptorIndexSpecPerMonitoredResource_FieldSubPath:
			switch tp.selector {
			case MetricDescriptorIndexSpecPerMonitoredResource_FieldPathSelectorIndices:
				indicesMask.AppendPath(tp.subPath.(MetricDescriptorIndexSpecIndex_FieldPath))
			}
		}
	}
	if wholeIndicesAccepted == false && len(indicesMask.Paths) > 0 {
		for _, sourceItem := range source.GetIndices() {
			result.Indices = append(result.Indices, indicesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*MetricDescriptor_IndexSpec_PerMonitoredResource))
}

func (fieldMask *MetricDescriptor_IndexSpec_PerMonitoredResource_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
