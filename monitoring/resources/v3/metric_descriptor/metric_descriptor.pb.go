// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v3/metric_descriptor.proto
// DO NOT EDIT!!!

package metric_descriptor

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/common"
	monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/monitored_resource_descriptor"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = api.LaunchStage(0)
	_ = &common.LabelDescriptor{}
	_ = &monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &project.Project{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The kind of measurement. It describes how the data is reported.
type MetricDescriptor_MetricKind int32

const (
	// Do not use this default value.
	MetricDescriptor_METRIC_KIND_UNSPECIFIED MetricDescriptor_MetricKind = 0
	// An instantaneous measurement of a value.
	MetricDescriptor_GAUGE MetricDescriptor_MetricKind = 1
	// The change in a value during a time interval.
	MetricDescriptor_DELTA MetricDescriptor_MetricKind = 2
	// A value accumulated over a time interval.  Cumulative
	// measurements in a time series should have the same start time
	// and increasing end times, until an event resets the cumulative
	// value to zero and sets a new start time for the following
	// points.
	MetricDescriptor_CUMULATIVE MetricDescriptor_MetricKind = 3
)

var (
	MetricDescriptor_MetricKind_name = map[int32]string{
		0: "METRIC_KIND_UNSPECIFIED",
		1: "GAUGE",
		2: "DELTA",
		3: "CUMULATIVE",
	}

	MetricDescriptor_MetricKind_value = map[string]int32{
		"METRIC_KIND_UNSPECIFIED": 0,
		"GAUGE":                   1,
		"DELTA":                   2,
		"CUMULATIVE":              3,
	}
)

func (x MetricDescriptor_MetricKind) Enum() *MetricDescriptor_MetricKind {
	p := new(MetricDescriptor_MetricKind)
	*p = x
	return p
}

func (x MetricDescriptor_MetricKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (MetricDescriptor_MetricKind) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v3_metric_descriptor_proto_enumTypes[0].Descriptor()
}

func (MetricDescriptor_MetricKind) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v3_metric_descriptor_proto_enumTypes[0]
}

func (x MetricDescriptor_MetricKind) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use MetricDescriptor_MetricKind.ProtoReflect.Descriptor instead.
func (MetricDescriptor_MetricKind) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescGZIP(), []int{0, 0}
}

// The value type of a metric.
type MetricDescriptor_ValueType int32

const (
	// Do not use this default value.
	MetricDescriptor_VALUE_TYPE_UNSPECIFIED MetricDescriptor_ValueType = 0
	// The value is a boolean.
	// This value type can be used only if the metric kind is `GAUGE`.
	MetricDescriptor_BOOL MetricDescriptor_ValueType = 1
	// The value is a signed 64-bit integer.
	MetricDescriptor_INT64 MetricDescriptor_ValueType = 2
	// The value is a double precision floating point number.
	MetricDescriptor_DOUBLE MetricDescriptor_ValueType = 3
	// The value is a text string.
	// This value type can be used only if the metric kind is `GAUGE`.
	MetricDescriptor_STRING MetricDescriptor_ValueType = 4
	// The value is a [`Distribution`][google.api.Distribution].
	MetricDescriptor_DISTRIBUTION MetricDescriptor_ValueType = 5
	// The value is money.
	MetricDescriptor_MONEY MetricDescriptor_ValueType = 6
)

var (
	MetricDescriptor_ValueType_name = map[int32]string{
		0: "VALUE_TYPE_UNSPECIFIED",
		1: "BOOL",
		2: "INT64",
		3: "DOUBLE",
		4: "STRING",
		5: "DISTRIBUTION",
		6: "MONEY",
	}

	MetricDescriptor_ValueType_value = map[string]int32{
		"VALUE_TYPE_UNSPECIFIED": 0,
		"BOOL":                   1,
		"INT64":                  2,
		"DOUBLE":                 3,
		"STRING":                 4,
		"DISTRIBUTION":           5,
		"MONEY":                  6,
	}
)

func (x MetricDescriptor_ValueType) Enum() *MetricDescriptor_ValueType {
	p := new(MetricDescriptor_ValueType)
	*p = x
	return p
}

func (x MetricDescriptor_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (MetricDescriptor_ValueType) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v3_metric_descriptor_proto_enumTypes[1].Descriptor()
}

func (MetricDescriptor_ValueType) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v3_metric_descriptor_proto_enumTypes[1]
}

func (x MetricDescriptor_ValueType) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use MetricDescriptor_ValueType.ProtoReflect.Descriptor instead.
func (MetricDescriptor_ValueType) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescGZIP(), []int{0, 1}
}

// Defines a metric type and its schema. Once a metric descriptor is created,
// deleting or altering it stops data collection and makes the metric type's
// existing data unusable.
type MetricDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Metadata
	Metadata *meta.Meta `protobuf:"bytes,35,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// The resource name of the metric descriptor.
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [\\w./-]{4,128}
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// The metric type, including its DNS name prefix. The type is not
	// URL-encoded.  All user-defined metric types have the DNS name
	// `custom.googleapis.com` or `external.googleapis.com`.  Metric types should
	// use a natural hierarchical grouping. For example:
	//
	//     "custom.googleapis.com/invoice/paid/amount"
	//     "external.googleapis.com/prometheus/up"
	//     "appengine.googleapis.com/http/server/response_latencies"
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	// associated resource_types (also used to infer defaults)
	// examples, devices.edgelq.com/Device, watchdog.edgelq.com/Agent
	// if not set, defaults to "global" resource type.
	ResourceTypes []string `protobuf:"bytes,34,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty" firestore:"resourceTypes"`
	// The set of labels that can be used to describe a specific
	// instance of this metric type. For example, the
	// `appengine.googleapis.com/http/server/response_latencies` metric
	// type has a label for the HTTP response code, `response_code`, so
	// you can look at latencies for successful responses or just
	// for responses that failed.
	Labels []*common.LabelDescriptor `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" firestore:"labels"`
	// Whether the metric records instantaneous values, changes to a value, etc.
	// Some combinations of `metric_kind` and `value_type` might not be supported.
	MetricKind MetricDescriptor_MetricKind `protobuf:"varint,3,opt,name=metric_kind,json=metricKind,proto3,enum=ntt.monitoring.v3.MetricDescriptor_MetricKind" json:"metric_kind,omitempty" firestore:"metricKind"`
	// Whether the measurement is an integer, a floating-point number, etc.
	// Some combinations of `metric_kind` and `value_type` might not be supported.
	ValueType MetricDescriptor_ValueType `protobuf:"varint,4,opt,name=value_type,json=valueType,proto3,enum=ntt.monitoring.v3.MetricDescriptor_ValueType" json:"value_type,omitempty" firestore:"valueType"`
	// The unit in which the metric value is reported. It is only applicable
	// if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
	// supported units are a subset of [The Unified Code for Units of
	// Measure](http://unitsofmeasure.org/ucum.html) standard:
	//
	// **Basic units (UNIT)**
	//
	// * `bit`   bit
	// * `By`    byte
	// * `s`     second
	// * `min`   minute
	// * `h`     hour
	// * `d`     day
	//
	// **Prefixes (PREFIX)**
	//
	// * `k`     kilo    (10**3)
	// * `M`     mega    (10**6)
	// * `G`     giga    (10**9)
	// * `T`     tera    (10**12)
	// * `P`     peta    (10**15)
	// * `E`     exa     (10**18)
	// * `Z`     zetta   (10**21)
	// * `Y`     yotta   (10**24)
	// * `m`     milli   (10**-3)
	// * `u`     micro   (10**-6)
	// * `n`     nano    (10**-9)
	// * `p`     pico    (10**-12)
	// * `f`     femto   (10**-15)
	// * `a`     atto    (10**-18)
	// * `z`     zepto   (10**-21)
	// * `y`     yocto   (10**-24)
	// * `Ki`    kibi    (2**10)
	// * `Mi`    mebi    (2**20)
	// * `Gi`    gibi    (2**30)
	// * `Ti`    tebi    (2**40)
	//
	// **Grammar**
	//
	// The grammar also includes these connectors:
	//
	// * `/`    division (as an infix operator, e.g. `1/s`).
	// * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
	//
	// The grammar for a unit is as follows:
	//
	//     Expression = Component { "." Component } { "/" Component } ;
	//
	//     Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ]
	//               | Annotation
	//               | "1"
	//               ;
	//
	//     Annotation = "{" NAME "}" ;
	//
	// Notes:
	//
	// * `Annotation` is just a comment if it follows a `UNIT` and is
	//    equivalent to `1` if it is used alone. For examples,
	//    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
	// * `NAME` is a sequence of non-blank printable ASCII characters not
	//    containing '{' or '}'.
	// * `1` represents dimensionless value 1, such as in `1/s`.
	// * `%` represents dimensionless value 1/100, and annotates values giving
	//    a percentage.
	Unit string `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty" firestore:"unit"`
	// A detailed description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	// A concise name for the metric, which can be displayed in user interfaces.
	// Use sentence case without an ending period, for example "Request count".
	// This field is optional but it is recommended to be set for any metrics
	// associated with user-visible concepts, such as Quota.
	DisplayName string `protobuf:"bytes,7,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// Optional. Metadata which can be used to guide usage of the metric.
	MetricDescriptorMetadata *MetricDescriptor_MetricDescriptorMetadata `protobuf:"bytes,10,opt,name=metric_descriptor_metadata,json=metricDescriptorMetadata,proto3" json:"metric_descriptor_metadata,omitempty" firestore:"metricDescriptorMetadata"`
	// Distribution bucketing options - define only when ValueType is
	// Distribution. Used for validating input.
	DistributionBucketOptions *common.Distribution_BucketOptions `protobuf:"bytes,31,opt,name=distribution_bucket_options,json=distributionBucketOptions,proto3" json:"distribution_bucket_options,omitempty" firestore:"distributionBucketOptions"`
	// Promoted Label Key Sets allow defining multiple indexing rules for
	// underlying backend enabling query optimizations. Metric promoted label sets
	// are combined with MonitoredResource promoted label sets and result in
	// PromotedKeySet.
	PromotedLabelKeySets []*common.LabelKeySet `protobuf:"bytes,32,rep,name=promoted_label_key_sets,json=promotedLabelKeySets,proto3" json:"promoted_label_key_sets,omitempty" firestore:"promotedLabelKeySets"`
	// Indexing allows tweaking storage usage by tweaking amount of "duplicate"
	// data with different promotion criteria. It's important consideration for
	// balancing time series query performance and storage cost.
	IndexSpec *MetricDescriptor_IndexSpec `protobuf:"bytes,36,opt,name=index_spec,json=indexSpec,proto3" json:"index_spec,omitempty" firestore:"indexSpec"`
	// Storage settings
	StorageConfig *MetricDescriptor_StorageConfig `protobuf:"bytes,33,opt,name=storage_config,json=storageConfig,proto3" json:"storage_config,omitempty" firestore:"storageConfig"`
}

func (m *MetricDescriptor) Reset() {
	*m = MetricDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor) ProtoMessage() {}

func (m *MetricDescriptor) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor) GotenMessage() {}

// Deprecated, Use MetricDescriptor.ProtoReflect.Descriptor instead.
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescGZIP(), []int{0}
}

func (m *MetricDescriptor) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *MetricDescriptor) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *MetricDescriptor) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MetricDescriptor) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *MetricDescriptor) GetLabels() []*common.LabelDescriptor {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricDescriptor) GetMetricKind() MetricDescriptor_MetricKind {
	if m != nil {
		return m.MetricKind
	}
	return MetricDescriptor_METRIC_KIND_UNSPECIFIED
}

func (m *MetricDescriptor) GetValueType() MetricDescriptor_ValueType {
	if m != nil {
		return m.ValueType
	}
	return MetricDescriptor_VALUE_TYPE_UNSPECIFIED
}

func (m *MetricDescriptor) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *MetricDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDescriptor) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *MetricDescriptor) GetMetricDescriptorMetadata() *MetricDescriptor_MetricDescriptorMetadata {
	if m != nil {
		return m.MetricDescriptorMetadata
	}
	return nil
}

func (m *MetricDescriptor) GetDistributionBucketOptions() *common.Distribution_BucketOptions {
	if m != nil {
		return m.DistributionBucketOptions
	}
	return nil
}

func (m *MetricDescriptor) GetPromotedLabelKeySets() []*common.LabelKeySet {
	if m != nil {
		return m.PromotedLabelKeySets
	}
	return nil
}

func (m *MetricDescriptor) GetIndexSpec() *MetricDescriptor_IndexSpec {
	if m != nil {
		return m.IndexSpec
	}
	return nil
}

func (m *MetricDescriptor) GetStorageConfig() *MetricDescriptor_StorageConfig {
	if m != nil {
		return m.StorageConfig
	}
	return nil
}

func (m *MetricDescriptor) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "MetricDescriptor"))
	}
	m.Metadata = fv
}

func (m *MetricDescriptor) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "MetricDescriptor"))
	}
	m.Name = fv
}

func (m *MetricDescriptor) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "MetricDescriptor"))
	}
	m.Type = fv
}

func (m *MetricDescriptor) SetResourceTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceTypes", "MetricDescriptor"))
	}
	m.ResourceTypes = fv
}

func (m *MetricDescriptor) SetLabels(fv []*common.LabelDescriptor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Labels", "MetricDescriptor"))
	}
	m.Labels = fv
}

func (m *MetricDescriptor) SetMetricKind(fv MetricDescriptor_MetricKind) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricKind", "MetricDescriptor"))
	}
	m.MetricKind = fv
}

func (m *MetricDescriptor) SetValueType(fv MetricDescriptor_ValueType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ValueType", "MetricDescriptor"))
	}
	m.ValueType = fv
}

func (m *MetricDescriptor) SetUnit(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Unit", "MetricDescriptor"))
	}
	m.Unit = fv
}

func (m *MetricDescriptor) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "MetricDescriptor"))
	}
	m.Description = fv
}

func (m *MetricDescriptor) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "MetricDescriptor"))
	}
	m.DisplayName = fv
}

func (m *MetricDescriptor) SetMetricDescriptorMetadata(fv *MetricDescriptor_MetricDescriptorMetadata) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricDescriptorMetadata", "MetricDescriptor"))
	}
	m.MetricDescriptorMetadata = fv
}

func (m *MetricDescriptor) SetDistributionBucketOptions(fv *common.Distribution_BucketOptions) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DistributionBucketOptions", "MetricDescriptor"))
	}
	m.DistributionBucketOptions = fv
}

func (m *MetricDescriptor) SetPromotedLabelKeySets(fv []*common.LabelKeySet) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PromotedLabelKeySets", "MetricDescriptor"))
	}
	m.PromotedLabelKeySets = fv
}

func (m *MetricDescriptor) SetIndexSpec(fv *MetricDescriptor_IndexSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IndexSpec", "MetricDescriptor"))
	}
	m.IndexSpec = fv
}

func (m *MetricDescriptor) SetStorageConfig(fv *MetricDescriptor_StorageConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StorageConfig", "MetricDescriptor"))
	}
	m.StorageConfig = fv
}

// Additional annotations that can be used to guide the usage of a metric.
type MetricDescriptor_MetricDescriptorMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The launch stage of the metric definition.
	LaunchStage api.LaunchStage `protobuf:"varint,1,opt,name=launch_stage,json=launchStage,proto3,enum=ntt.api.LaunchStage" json:"launch_stage,omitempty" firestore:"launchStage"`
}

func (m *MetricDescriptor_MetricDescriptorMetadata) Reset() {
	*m = MetricDescriptor_MetricDescriptorMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_MetricDescriptorMetadata) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_MetricDescriptorMetadata) ProtoMessage() {}

func (m *MetricDescriptor_MetricDescriptorMetadata) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_MetricDescriptorMetadata) GotenMessage() {}

// Deprecated, Use MetricDescriptor_MetricDescriptorMetadata.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_MetricDescriptorMetadata) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescGZIP(), []int{0, 0}
}

func (m *MetricDescriptor_MetricDescriptorMetadata) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_MetricDescriptorMetadata) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_MetricDescriptorMetadata) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_MetricDescriptorMetadata) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_MetricDescriptorMetadata) GetLaunchStage() api.LaunchStage {
	if m != nil {
		return m.LaunchStage
	}
	return api.LaunchStage_LAUNCH_STAGE_UNSPECIFIED
}

func (m *MetricDescriptor_MetricDescriptorMetadata) SetLaunchStage(fv api.LaunchStage) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LaunchStage", "MetricDescriptor_MetricDescriptorMetadata"))
	}
	m.LaunchStage = fv
}

type MetricDescriptor_IndexSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// PerResource index
	PerResource []*MetricDescriptor_IndexSpec_PerMonitoredResource `protobuf:"bytes,1,rep,name=per_resource,json=perResource,proto3" json:"per_resource,omitempty" firestore:"perResource"`
}

func (m *MetricDescriptor_IndexSpec) Reset() {
	*m = MetricDescriptor_IndexSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_IndexSpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_IndexSpec) ProtoMessage() {}

func (m *MetricDescriptor_IndexSpec) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_IndexSpec) GotenMessage() {}

// Deprecated, Use MetricDescriptor_IndexSpec.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_IndexSpec) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescGZIP(), []int{0, 1}
}

func (m *MetricDescriptor_IndexSpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_IndexSpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_IndexSpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_IndexSpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_IndexSpec) GetPerResource() []*MetricDescriptor_IndexSpec_PerMonitoredResource {
	if m != nil {
		return m.PerResource
	}
	return nil
}

func (m *MetricDescriptor_IndexSpec) SetPerResource(fv []*MetricDescriptor_IndexSpec_PerMonitoredResource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PerResource", "MetricDescriptor_IndexSpec"))
	}
	m.PerResource = fv
}

// Backend storage config
type MetricDescriptor_StorageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// whether to store raw points
	StoreRawPoints bool `protobuf:"varint,1,opt,name=store_raw_points,json=storeRawPoints,proto3" json:"store_raw_points,omitempty" firestore:"storeRawPoints"`
}

func (m *MetricDescriptor_StorageConfig) Reset() {
	*m = MetricDescriptor_StorageConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_StorageConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_StorageConfig) ProtoMessage() {}

func (m *MetricDescriptor_StorageConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_StorageConfig) GotenMessage() {}

// Deprecated, Use MetricDescriptor_StorageConfig.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_StorageConfig) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescGZIP(), []int{0, 2}
}

func (m *MetricDescriptor_StorageConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_StorageConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_StorageConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_StorageConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_StorageConfig) GetStoreRawPoints() bool {
	if m != nil {
		return m.StoreRawPoints
	}
	return false
}

func (m *MetricDescriptor_StorageConfig) SetStoreRawPoints(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StoreRawPoints", "MetricDescriptor_StorageConfig"))
	}
	m.StoreRawPoints = fv
}

type MetricDescriptor_IndexSpec_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// each label is of format: `{metric,resource}.labels.<label-key>`.
	// since resource and metric labels are mixed. Full path is required.
	PromotedLabels []string `protobuf:"bytes,2,rep,name=promoted_labels,json=promotedLabels,proto3" json:"promoted_labels,omitempty" firestore:"promotedLabels"`
	// whether this index is write-only and not usable for querying
	WriteOnly bool `protobuf:"varint,3,opt,name=write_only,json=writeOnly,proto3" json:"write_only,omitempty" firestore:"writeOnly"`
}

func (m *MetricDescriptor_IndexSpec_Index) Reset() {
	*m = MetricDescriptor_IndexSpec_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_IndexSpec_Index) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_IndexSpec_Index) ProtoMessage() {}

func (m *MetricDescriptor_IndexSpec_Index) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_IndexSpec_Index) GotenMessage() {}

// Deprecated, Use MetricDescriptor_IndexSpec_Index.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_IndexSpec_Index) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *MetricDescriptor_IndexSpec_Index) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_IndexSpec_Index) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_IndexSpec_Index) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_IndexSpec_Index) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_IndexSpec_Index) GetPromotedLabels() []string {
	if m != nil {
		return m.PromotedLabels
	}
	return nil
}

func (m *MetricDescriptor_IndexSpec_Index) GetWriteOnly() bool {
	if m != nil {
		return m.WriteOnly
	}
	return false
}

func (m *MetricDescriptor_IndexSpec_Index) SetPromotedLabels(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PromotedLabels", "MetricDescriptor_IndexSpec_Index"))
	}
	m.PromotedLabels = fv
}

func (m *MetricDescriptor_IndexSpec_Index) SetWriteOnly(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "WriteOnly", "MetricDescriptor_IndexSpec_Index"))
	}
	m.WriteOnly = fv
}

type MetricDescriptor_IndexSpec_PerMonitoredResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Resource      *monitored_resource_descriptor.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=resource,proto3" json:"resource,omitempty" firestore:"resource"`
	// List of indices for given metric and resource pair
	Indices []*MetricDescriptor_IndexSpec_Index `protobuf:"bytes,2,rep,name=indices,proto3" json:"indices,omitempty" firestore:"indices"`
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) Reset() {
	*m = MetricDescriptor_IndexSpec_PerMonitoredResource{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_IndexSpec_PerMonitoredResource) ProtoMessage() {}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_IndexSpec_PerMonitoredResource) GotenMessage() {}

// Deprecated, Use MetricDescriptor_IndexSpec_PerMonitoredResource.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_IndexSpec_PerMonitoredResource) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) GetResource() *monitored_resource_descriptor.Reference {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) GetIndices() []*MetricDescriptor_IndexSpec_Index {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) SetResource(fv *monitored_resource_descriptor.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resource", "MetricDescriptor_IndexSpec_PerMonitoredResource"))
	}
	m.Resource = fv
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) SetIndices(fv []*MetricDescriptor_IndexSpec_Index) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Indices", "MetricDescriptor_IndexSpec_PerMonitoredResource"))
	}
	m.Indices = fv
}

var edgelq_monitoring_proto_v3_metric_descriptor_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDesc = []byte{
	0x0a, 0x32, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf1, 0x11, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x0a, 0x12, 0x0a, 0x10, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0xca,
	0xc6, 0x27, 0x06, 0x42, 0x04, 0x12, 0x02, 0x08, 0x0d, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x1a, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x33, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x18, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x19, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x74, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x70, 0x65, 0x63, 0x12, 0x58, 0x0a, 0x0e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x53, 0x0a, 0x18, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x37, 0x0a, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x1a, 0xee, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x53, 0x70, 0x65, 0x63, 0x12, 0x65, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x4f, 0x0a,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x1a, 0xa8,
	0x01, 0x0a, 0x14, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xb2, 0xda, 0x21, 0x21, 0x12,
	0x1f, 0x0a, 0x1b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x10, 0x06,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0d, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x77, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x47, 0x41, 0x55, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45,
	0x4c, 0x54, 0x41, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x03, 0x22, 0x71, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36,
	0x34, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x06, 0x3a, 0xcb, 0x04, 0xea, 0x41, 0x62, 0x0a, 0x26,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x7d,
	0x92, 0xd9, 0x21, 0xb5, 0x01, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x07, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2a, 0x0e, 0x5b, 0x5c, 0x77, 0x2e, 0x2f, 0x2d, 0x5d, 0x7b, 0x34, 0x2c,
	0x31, 0x32, 0x38, 0x7d, 0x38, 0x05, 0x42, 0x72, 0x08, 0x02, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x0c, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x29, 0x0a, 0x27, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0xb2, 0xdf, 0x21, 0x41, 0x0a, 0x3f,
	0x0a, 0x3d, 0x0a, 0x06, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0x26, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x2d, 0x2a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0xda,
	0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c, 0xd6, 0x01,
	0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x22, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x22, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x22, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1b,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x17, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x73, 0x65, 0x74, 0x73, 0x22, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x22, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x1a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0xd1, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0,
	0x02, 0x5b, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x40, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0xa2, 0x80, 0xd1,
	0x02, 0x5d, 0x0a, 0x18, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x0a,
	0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x33, 0x42, 0x15, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x3b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescData = edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDesc
)

func edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDescData
}

var edgelq_monitoring_proto_v3_metric_descriptor_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var edgelq_monitoring_proto_v3_metric_descriptor_proto_goTypes = []interface{}{
	(MetricDescriptor_MetricKind)(0),                        // 0: ntt.monitoring.v3.MetricDescriptor_MetricKind
	(MetricDescriptor_ValueType)(0),                         // 1: ntt.monitoring.v3.MetricDescriptor_ValueType
	(*MetricDescriptor)(nil),                                // 2: ntt.monitoring.v3.MetricDescriptor
	(*MetricDescriptor_MetricDescriptorMetadata)(nil),       // 3: ntt.monitoring.v3.MetricDescriptor.MetricDescriptorMetadata
	(*MetricDescriptor_IndexSpec)(nil),                      // 4: ntt.monitoring.v3.MetricDescriptor.IndexSpec
	(*MetricDescriptor_StorageConfig)(nil),                  // 5: ntt.monitoring.v3.MetricDescriptor.StorageConfig
	(*MetricDescriptor_IndexSpec_Index)(nil),                // 6: ntt.monitoring.v3.MetricDescriptor.IndexSpec.Index
	(*MetricDescriptor_IndexSpec_PerMonitoredResource)(nil), // 7: ntt.monitoring.v3.MetricDescriptor.IndexSpec.PerMonitoredResource
	(*meta.Meta)(nil),                                       // 8: goten.types.Meta
	(*common.LabelDescriptor)(nil),                          // 9: ntt.monitoring.v3.LabelDescriptor
	(*common.Distribution_BucketOptions)(nil),               // 10: ntt.monitoring.v3.Distribution.BucketOptions
	(*common.LabelKeySet)(nil),                              // 11: ntt.monitoring.v3.LabelKeySet
	(api.LaunchStage)(0),                                    // 12: ntt.api.LaunchStage
}
var edgelq_monitoring_proto_v3_metric_descriptor_proto_depIdxs = []int32{
	8,  // 0: ntt.monitoring.v3.MetricDescriptor.metadata:type_name -> goten.types.Meta
	9,  // 1: ntt.monitoring.v3.MetricDescriptor.labels:type_name -> ntt.monitoring.v3.LabelDescriptor
	0,  // 2: ntt.monitoring.v3.MetricDescriptor.metric_kind:type_name -> ntt.monitoring.v3.MetricDescriptor_MetricKind
	1,  // 3: ntt.monitoring.v3.MetricDescriptor.value_type:type_name -> ntt.monitoring.v3.MetricDescriptor_ValueType
	3,  // 4: ntt.monitoring.v3.MetricDescriptor.metric_descriptor_metadata:type_name -> ntt.monitoring.v3.MetricDescriptor.MetricDescriptorMetadata
	10, // 5: ntt.monitoring.v3.MetricDescriptor.distribution_bucket_options:type_name -> ntt.monitoring.v3.Distribution.BucketOptions
	11, // 6: ntt.monitoring.v3.MetricDescriptor.promoted_label_key_sets:type_name -> ntt.monitoring.v3.LabelKeySet
	4,  // 7: ntt.monitoring.v3.MetricDescriptor.index_spec:type_name -> ntt.monitoring.v3.MetricDescriptor.IndexSpec
	5,  // 8: ntt.monitoring.v3.MetricDescriptor.storage_config:type_name -> ntt.monitoring.v3.MetricDescriptor.StorageConfig
	12, // 9: ntt.monitoring.v3.MetricDescriptor.MetricDescriptorMetadata.launch_stage:type_name -> ntt.api.LaunchStage
	7,  // 10: ntt.monitoring.v3.MetricDescriptor.IndexSpec.per_resource:type_name -> ntt.monitoring.v3.MetricDescriptor.IndexSpec.PerMonitoredResource
	6,  // 11: ntt.monitoring.v3.MetricDescriptor.IndexSpec.PerMonitoredResource.indices:type_name -> ntt.monitoring.v3.MetricDescriptor.IndexSpec.Index
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v3_metric_descriptor_proto_init() }
func edgelq_monitoring_proto_v3_metric_descriptor_proto_init() {
	if edgelq_monitoring_proto_v3_metric_descriptor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_MetricDescriptorMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_IndexSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_StorageConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_IndexSpec_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_IndexSpec_PerMonitoredResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_monitoring_proto_v3_metric_descriptor_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v3_metric_descriptor_proto_depIdxs,
		EnumInfos:         edgelq_monitoring_proto_v3_metric_descriptor_proto_enumTypes,
		MessageInfos:      edgelq_monitoring_proto_v3_metric_descriptor_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v3_metric_descriptor_proto = out.File
	edgelq_monitoring_proto_v3_metric_descriptor_proto_rawDesc = nil
	edgelq_monitoring_proto_v3_metric_descriptor_proto_goTypes = nil
	edgelq_monitoring_proto_v3_metric_descriptor_proto_depIdxs = nil
}
