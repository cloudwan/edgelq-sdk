// Code generated by protoc-gen-goten-resource
// Resource: AlertingCondition
// DO NOT EDIT!!!

package alerting_condition

import (
	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/common/v3"
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_policy"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = gotenobject.FieldPath(nil)
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &alerting_policy.AlertingPolicy{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &duration.Duration{}
)

var (
	descriptor = &Descriptor{
		typeName: gotenresource.NewTypeName(
			"AlertingCondition", "AlertingConditions", "monitoring.edgelq.com"),
		nameDescriptor: gotenresource.NewNameDescriptor(
			&AlertingCondition_FieldTerminalPath{selector: AlertingCondition_FieldPathSelectorName},
			"pattern", "alertingConditionId",
			[]string{"projectId", "regionId", "alertingPolicyId"},
			[]gotenresource.NamePattern{NamePattern_Project_Region_AlertingPolicy}),
	}
)

type Descriptor struct {
	nameDescriptor *gotenresource.NameDescriptor
	typeName       *gotenresource.TypeName
}

func GetDescriptor() *Descriptor {
	return descriptor
}

func (d *Descriptor) NewAlertingCondition() *AlertingCondition {
	return &AlertingCondition{}
}

func (d *Descriptor) NewResource() gotenresource.Resource {
	return d.NewAlertingCondition()
}

func (d *Descriptor) NewResourceName() gotenresource.Name {
	return NewNameBuilder().Name()
}

func (d *Descriptor) NewAlertingConditionName() *Name {
	return NewNameBuilder().Name()
}

func (d *Descriptor) NewGetQuery() gotenresource.GetQuery {
	return &GetQuery{}
}

func (d *Descriptor) NewListQuery() gotenresource.ListQuery {
	return &ListQuery{}
}

func (d *Descriptor) NewSearchQuery() gotenresource.SearchQuery {
	return nil
}

func (d *Descriptor) NewWatchQuery() gotenresource.WatchQuery {
	return &WatchQuery{}
}
func (d *Descriptor) NewAlertingConditionCursor() *PagerCursor {
	return &PagerCursor{}
}

func (d *Descriptor) NewResourceCursor() gotenresource.Cursor {
	return d.NewAlertingConditionCursor()
}
func (d *Descriptor) NewAlertingConditionChange() *AlertingConditionChange {
	return &AlertingConditionChange{}
}

func (d *Descriptor) NewResourceChange() gotenresource.ResourceChange {
	return d.NewAlertingConditionChange()
}

func (d *Descriptor) NewAlertingConditionQueryResultSnapshot() *QueryResultSnapshot {
	return &QueryResultSnapshot{}
}

func (d *Descriptor) NewQueryResultSnapshot() gotenresource.QueryResultSnapshot {
	return d.NewAlertingConditionQueryResultSnapshot()
}
func (d *Descriptor) NewAlertingConditionQueryResultChange() *QueryResultChange {
	return &QueryResultChange{}
}

func (d *Descriptor) NewSearchQueryResultSnapshot() gotenresource.SearchQueryResultSnapshot {
	return nil
}

func (d *Descriptor) NewQueryResultChange() gotenresource.QueryResultChange {
	return d.NewAlertingConditionQueryResultChange()
}

func (d *Descriptor) NewAlertingConditionList(size, reserved int) AlertingConditionList {
	return make(AlertingConditionList, size, reserved)
}

func (d *Descriptor) NewResourceList(size, reserved int) gotenresource.ResourceList {
	return make(AlertingConditionList, size, reserved)
}
func (d *Descriptor) NewAlertingConditionChangeList(size, reserved int) AlertingConditionChangeList {
	return make(AlertingConditionChangeList, size, reserved)
}

func (d *Descriptor) NewResourceChangeList(size, reserved int) gotenresource.ResourceChangeList {
	return make(AlertingConditionChangeList, size, reserved)
}

func (d *Descriptor) NewAlertingConditionNameList(size, reserved int) AlertingConditionNameList {
	return make(AlertingConditionNameList, size, reserved)
}

func (d *Descriptor) NewNameList(size, reserved int) gotenresource.NameList {
	return make(AlertingConditionNameList, size, reserved)
}

func (d *Descriptor) NewAlertingConditionReferenceList(size, reserved int) AlertingConditionReferenceList {
	return make(AlertingConditionReferenceList, size, reserved)
}

func (d *Descriptor) NewReferenceList(size, reserved int) gotenresource.ReferenceList {
	return make(AlertingConditionReferenceList, size, reserved)
}
func (d *Descriptor) NewAlertingConditionParentNameList(size, reserved int) AlertingConditionParentNameList {
	return make(AlertingConditionParentNameList, size, reserved)
}

func (d *Descriptor) NewParentNameList(size, reserved int) gotenresource.ParentNameList {
	return make(AlertingConditionParentNameList, size, reserved)
}
func (d *Descriptor) NewAlertingConditionParentReferenceList(size, reserved int) AlertingConditionParentReferenceList {
	return make(AlertingConditionParentReferenceList, size, reserved)
}

func (d *Descriptor) NewParentReferenceList(size, reserved int) gotenresource.ParentReferenceList {
	return make(AlertingConditionParentReferenceList, size, reserved)
}

func (d *Descriptor) NewAlertingConditionMap(reserved int) AlertingConditionMap {
	return make(AlertingConditionMap, reserved)
}

func (d *Descriptor) NewResourceMap(reserved int) gotenresource.ResourceMap {
	return make(AlertingConditionMap, reserved)
}
func (d *Descriptor) NewAlertingConditionChangeMap(reserved int) AlertingConditionChangeMap {
	return make(AlertingConditionChangeMap, reserved)
}

func (d *Descriptor) NewResourceChangeMap(reserved int) gotenresource.ResourceChangeMap {
	return make(AlertingConditionChangeMap, reserved)
}

func (d *Descriptor) GetResourceTypeName() *gotenresource.TypeName {
	return d.typeName
}

func (d *Descriptor) GetNameDescriptor() *gotenresource.NameDescriptor {
	return d.nameDescriptor
}

func (d *Descriptor) ParseFieldPath(raw string) (gotenobject.FieldPath, error) {
	return ParseAlertingCondition_FieldPath(raw)
}

func (d *Descriptor) ParseAlertingConditionName(nameStr string) (*Name, error) {
	return ParseName(nameStr)
}

func (d *Descriptor) ParseResourceName(nameStr string) (gotenresource.Name, error) {
	return ParseName(nameStr)
}
