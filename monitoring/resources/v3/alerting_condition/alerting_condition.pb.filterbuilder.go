// Code generated by protoc-gen-goten-resource
// Resource: AlertingCondition
// DO NOT EDIT!!!

package alerting_condition

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	multi_region_policy "github.com/cloudwan/edgelq-sdk/common/types/multi_region_policy"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/common/v3"
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/alerting_policy"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
	_ = &alerting_policy.AlertingPolicy{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &project.Project{}
	_ = &duration.Duration{}
	_ = &timestamp.Timestamp{}
)

type FilterBuilderOrCondition interface {
	_IsAlertingConditionFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsAlertingConditionFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp AlertingCondition_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      AlertingCondition_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Description() *filterCndBuilderDescription {
	return &filterCndBuilderDescription{builder: b.builder}
}

func (b *filterCndBuilder) Spec() *filterCndBuilderSpec {
	return &filterCndBuilderSpec{builder: b.builder}
}

func (b *filterCndBuilder) State() *filterCndBuilderState {
	return &filterCndBuilderState{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewAlertingConditionFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewAlertingConditionFieldPathBuilder().Metadata().Tags()
	itemValues := make([]AlertingCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewAlertingConditionFieldPathBuilder().Metadata().Tags()
	itemValues := make([]AlertingCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]AlertingCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]AlertingCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ApiVersion() *filterCndBuilderMetadataOwnerReferencesApiVersion {
	return &filterCndBuilderMetadataOwnerReferencesApiVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Uid() *filterCndBuilderMetadataOwnerReferencesUid {
	return &filterCndBuilderMetadataOwnerReferencesUid{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) BlockOwnerDeletion() *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion {
	return &filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesApiVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Uid().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewAlertingConditionFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewAlertingConditionFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]AlertingCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewAlertingConditionFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]AlertingCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderDescription struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDescription) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDescription) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDescription) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDescription) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDescription) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDescription) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDescription) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDescription) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Description().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDescription) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Description().FieldPath(),
	})
}

func (b *filterCndBuilderDescription) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Description().FieldPath(),
	})
}

func (b *filterCndBuilderDescription) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Description().WithValue(value),
	})
}

type filterCndBuilderSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpec) Eq(value *AlertingCondition_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpec) Neq(value *AlertingCondition_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpec) Gt(value *AlertingCondition_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpec) Gte(value *AlertingCondition_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpec) Lt(value *AlertingCondition_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpec) Lte(value *AlertingCondition_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpec) In(values []*AlertingCondition_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) NotIn(values []*AlertingCondition_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) compare(op gotenfilter.CompareOperator, value *AlertingCondition_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpec) TimeSeries() *filterCndBuilderSpecTimeSeries {
	return &filterCndBuilderSpecTimeSeries{builder: b.builder}
}

func (b *filterCndBuilderSpec) Trigger() *filterCndBuilderSpecTrigger {
	return &filterCndBuilderSpecTrigger{builder: b.builder}
}

type filterCndBuilderSpecTimeSeries struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeries) Eq(value *AlertingCondition_Spec_TimeSeries) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeries) Neq(value *AlertingCondition_Spec_TimeSeries) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeries) Gt(value *AlertingCondition_Spec_TimeSeries) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeries) Gte(value *AlertingCondition_Spec_TimeSeries) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeries) Lt(value *AlertingCondition_Spec_TimeSeries) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeries) Lte(value *AlertingCondition_Spec_TimeSeries) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeries) In(values []*AlertingCondition_Spec_TimeSeries) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeries) NotIn(values []*AlertingCondition_Spec_TimeSeries) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeries) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeries) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeries) compare(op gotenfilter.CompareOperator, value *AlertingCondition_Spec_TimeSeries) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeries) Query() *filterCndBuilderSpecTimeSeriesQuery {
	return &filterCndBuilderSpecTimeSeriesQuery{builder: b.builder}
}

func (b *filterCndBuilderSpecTimeSeries) Threshold() *filterCndBuilderSpecTimeSeriesThreshold {
	return &filterCndBuilderSpecTimeSeriesThreshold{builder: b.builder}
}

func (b *filterCndBuilderSpecTimeSeries) CombineThreshold() *filterCndBuilderSpecTimeSeriesCombineThreshold {
	return &filterCndBuilderSpecTimeSeriesCombineThreshold{builder: b.builder}
}

func (b *filterCndBuilderSpecTimeSeries) Duration() *filterCndBuilderSpecTimeSeriesDuration {
	return &filterCndBuilderSpecTimeSeriesDuration{builder: b.builder}
}

type filterCndBuilderSpecTimeSeriesQuery struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesQuery) Eq(value *AlertingCondition_Spec_TimeSeries_Query) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuery) Neq(value *AlertingCondition_Spec_TimeSeries_Query) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuery) Gt(value *AlertingCondition_Spec_TimeSeries_Query) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuery) Gte(value *AlertingCondition_Spec_TimeSeries_Query) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuery) Lt(value *AlertingCondition_Spec_TimeSeries_Query) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuery) Lte(value *AlertingCondition_Spec_TimeSeries_Query) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuery) In(values []*AlertingCondition_Spec_TimeSeries_Query) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuery) NotIn(values []*AlertingCondition_Spec_TimeSeries_Query) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuery) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuery) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuery) compare(op gotenfilter.CompareOperator, value *AlertingCondition_Spec_TimeSeries_Query) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuery) Selector() *filterCndBuilderSpecTimeSeriesQuerySelector {
	return &filterCndBuilderSpecTimeSeriesQuerySelector{builder: b.builder}
}

func (b *filterCndBuilderSpecTimeSeriesQuery) Aggregation() *filterCndBuilderSpecTimeSeriesQueryAggregation {
	return &filterCndBuilderSpecTimeSeriesQueryAggregation{builder: b.builder}
}

type filterCndBuilderSpecTimeSeriesQuerySelector struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelector) Eq(value *monitoring_common.TimeSeriesSelector) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelector) Neq(value *monitoring_common.TimeSeriesSelector) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelector) Gt(value *monitoring_common.TimeSeriesSelector) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelector) Gte(value *monitoring_common.TimeSeriesSelector) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelector) Lt(value *monitoring_common.TimeSeriesSelector) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelector) Lte(value *monitoring_common.TimeSeriesSelector) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelector) In(values []*monitoring_common.TimeSeriesSelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelector) NotIn(values []*monitoring_common.TimeSeriesSelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelector) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelector) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelector) compare(op gotenfilter.CompareOperator, value *monitoring_common.TimeSeriesSelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelector) Metric() *filterCndBuilderSpecTimeSeriesQuerySelectorMetric {
	return &filterCndBuilderSpecTimeSeriesQuerySelectorMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelector) Resource() *filterCndBuilderSpecTimeSeriesQuerySelectorResource {
	return &filterCndBuilderSpecTimeSeriesQuerySelectorResource{builder: b.builder}
}

type filterCndBuilderSpecTimeSeriesQuerySelectorMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetric) Eq(value *monitoring_common.MetricSelector) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetric) Neq(value *monitoring_common.MetricSelector) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetric) Gt(value *monitoring_common.MetricSelector) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetric) Gte(value *monitoring_common.MetricSelector) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetric) Lt(value *monitoring_common.MetricSelector) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetric) Lte(value *monitoring_common.MetricSelector) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetric) In(values []*monitoring_common.MetricSelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetric) NotIn(values []*monitoring_common.MetricSelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetric) compare(op gotenfilter.CompareOperator, value *monitoring_common.MetricSelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetric) Types() *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes {
	return &filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes{builder: b.builder}
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetric) Labels() *filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels {
	return &filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels{builder: b.builder}
}

type filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Types().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Types().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Types().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Types().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Types().FieldPath(),
		Value:     NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Types().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Types()
	itemValues := make([]AlertingCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Types().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Types()
	itemValues := make([]AlertingCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Types().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricTypes) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Types().WithValue(value),
	})
}

type filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) Eq(value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) Neq(value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) Gt(value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) Gte(value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) Lt(value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) Lte(value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) In(values []map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) NotIn(values []map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) compare(op gotenfilter.CompareOperator, value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) WithKey(key string) *mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels {
	return &mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) Eq(value *monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) Neq(value *monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) Gt(value *monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) Gte(value *monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) Lt(value *monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) Lte(value *monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) In(values []*monitoring_common.Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) NotIn(values []*monitoring_common.Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorMetricLabels) compare(op gotenfilter.CompareOperator, value *monitoring_common.Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Metric().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTimeSeriesQuerySelectorResource struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResource) Eq(value *monitoring_common.MonitoredResourceSelector) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResource) Neq(value *monitoring_common.MonitoredResourceSelector) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResource) Gt(value *monitoring_common.MonitoredResourceSelector) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResource) Gte(value *monitoring_common.MonitoredResourceSelector) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResource) Lt(value *monitoring_common.MonitoredResourceSelector) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResource) Lte(value *monitoring_common.MonitoredResourceSelector) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResource) In(values []*monitoring_common.MonitoredResourceSelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResource) NotIn(values []*monitoring_common.MonitoredResourceSelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResource) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResource) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResource) compare(op gotenfilter.CompareOperator, value *monitoring_common.MonitoredResourceSelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResource) Types() *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes {
	return &filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes{builder: b.builder}
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResource) Labels() *filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels {
	return &filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels{builder: b.builder}
}

type filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Types().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Types().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Types().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Types().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Types().FieldPath(),
		Value:     NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Types().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Types()
	itemValues := make([]AlertingCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Types().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Types()
	itemValues := make([]AlertingCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Types().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceTypes) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Types().WithValue(value),
	})
}

type filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) Eq(value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) Neq(value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) Gt(value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) Gte(value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) Lt(value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) Lte(value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) In(values []map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) NotIn(values []map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) compare(op gotenfilter.CompareOperator, value map[string]*monitoring_common.Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) WithKey(key string) *mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels {
	return &mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) Eq(value *monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) Neq(value *monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) Gt(value *monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) Gte(value *monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) Lt(value *monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) Lte(value *monitoring_common.Strings) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) In(values []*monitoring_common.Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) NotIn(values []*monitoring_common.Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTimeSeriesQuerySelectorResourceLabels) compare(op gotenfilter.CompareOperator, value *monitoring_common.Strings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Selector().Resource().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTimeSeriesQueryAggregation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) Eq(value *monitoring_common.Aggregation) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) Neq(value *monitoring_common.Aggregation) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) Gt(value *monitoring_common.Aggregation) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) Gte(value *monitoring_common.Aggregation) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) Lt(value *monitoring_common.Aggregation) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) Lte(value *monitoring_common.Aggregation) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) In(values []*monitoring_common.Aggregation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) NotIn(values []*monitoring_common.Aggregation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) compare(op gotenfilter.CompareOperator, value *monitoring_common.Aggregation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) AlignmentPeriod() *filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod {
	return &filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod{builder: b.builder}
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) PerSeriesAligner() *filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner {
	return &filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner{builder: b.builder}
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) CrossSeriesReducer() *filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer {
	return &filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer{builder: b.builder}
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregation) GroupByFields() *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields {
	return &filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields{builder: b.builder}
}

type filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().AlignmentPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().AlignmentPeriod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().AlignmentPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().AlignmentPeriod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationAlignmentPeriod) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().AlignmentPeriod().WithValue(value),
	})
}

type filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner) Eq(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner) Neq(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner) Gt(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner) Gte(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner) Lt(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner) Lte(value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner) In(values []monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().PerSeriesAligner().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner) NotIn(values []monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().PerSeriesAligner().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().PerSeriesAligner().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().PerSeriesAligner().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationPerSeriesAligner) compare(op gotenfilter.CompareOperator, value monitoring_common.Aggregation_Aligner) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().PerSeriesAligner().WithValue(value),
	})
}

type filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer) Eq(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer) Neq(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer) Gt(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer) Gte(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer) Lt(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer) Lte(value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer) In(values []monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().CrossSeriesReducer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer) NotIn(values []monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().CrossSeriesReducer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().CrossSeriesReducer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().CrossSeriesReducer().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationCrossSeriesReducer) compare(op gotenfilter.CompareOperator, value monitoring_common.Aggregation_Reducer) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().CrossSeriesReducer().WithValue(value),
	})
}

type filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().GroupByFields().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().GroupByFields().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().GroupByFields().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().GroupByFields().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().GroupByFields().FieldPath(),
		Value:     NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().GroupByFields().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().GroupByFields()
	itemValues := make([]AlertingCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().GroupByFields().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().GroupByFields()
	itemValues := make([]AlertingCondition_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().GroupByFields().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTimeSeriesQueryAggregationGroupByFields) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Query().Aggregation().GroupByFields().WithValue(value),
	})
}

type filterCndBuilderSpecTimeSeriesThreshold struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesThreshold) Eq(value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesThreshold) Neq(value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesThreshold) Gt(value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesThreshold) Gte(value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesThreshold) Lt(value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesThreshold) Lte(value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesThreshold) In(values []*AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesThreshold) NotIn(values []*AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesThreshold) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesThreshold) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesThreshold) compare(op gotenfilter.CompareOperator, value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeriesThreshold) Compare() *filterCndBuilderSpecTimeSeriesThresholdCompare {
	return &filterCndBuilderSpecTimeSeriesThresholdCompare{builder: b.builder}
}

func (b *filterCndBuilderSpecTimeSeriesThreshold) Value() *filterCndBuilderSpecTimeSeriesThresholdValue {
	return &filterCndBuilderSpecTimeSeriesThresholdValue{builder: b.builder}
}

type filterCndBuilderSpecTimeSeriesThresholdCompare struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesThresholdCompare) Eq(value AlertingCondition_Spec_TimeSeries_Threshold_Compare) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesThresholdCompare) Neq(value AlertingCondition_Spec_TimeSeries_Threshold_Compare) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesThresholdCompare) Gt(value AlertingCondition_Spec_TimeSeries_Threshold_Compare) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesThresholdCompare) Gte(value AlertingCondition_Spec_TimeSeries_Threshold_Compare) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesThresholdCompare) Lt(value AlertingCondition_Spec_TimeSeries_Threshold_Compare) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesThresholdCompare) Lte(value AlertingCondition_Spec_TimeSeries_Threshold_Compare) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesThresholdCompare) In(values []AlertingCondition_Spec_TimeSeries_Threshold_Compare) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().Compare().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesThresholdCompare) NotIn(values []AlertingCondition_Spec_TimeSeries_Threshold_Compare) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().Compare().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesThresholdCompare) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().Compare().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesThresholdCompare) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().Compare().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesThresholdCompare) compare(op gotenfilter.CompareOperator, value AlertingCondition_Spec_TimeSeries_Threshold_Compare) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().Compare().WithValue(value),
	})
}

type filterCndBuilderSpecTimeSeriesThresholdValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesThresholdValue) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesThresholdValue) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesThresholdValue) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesThresholdValue) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesThresholdValue) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesThresholdValue) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesThresholdValue) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesThresholdValue) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesThresholdValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesThresholdValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesThresholdValue) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Threshold().Value().WithValue(value),
	})
}

type filterCndBuilderSpecTimeSeriesCombineThreshold struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesCombineThreshold) Eq(value *AlertingCondition_Spec_TimeSeries_CombineThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThreshold) Neq(value *AlertingCondition_Spec_TimeSeries_CombineThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThreshold) Gt(value *AlertingCondition_Spec_TimeSeries_CombineThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThreshold) Gte(value *AlertingCondition_Spec_TimeSeries_CombineThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThreshold) Lt(value *AlertingCondition_Spec_TimeSeries_CombineThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThreshold) Lte(value *AlertingCondition_Spec_TimeSeries_CombineThreshold) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThreshold) In(values []*AlertingCondition_Spec_TimeSeries_CombineThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThreshold) NotIn(values []*AlertingCondition_Spec_TimeSeries_CombineThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThreshold) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThreshold) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThreshold) compare(op gotenfilter.CompareOperator, value *AlertingCondition_Spec_TimeSeries_CombineThreshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThreshold) PerMetric() *filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric {
	return &filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric{builder: b.builder}
}

func (b *filterCndBuilderSpecTimeSeriesCombineThreshold) Combine() *filterCndBuilderSpecTimeSeriesCombineThresholdCombine {
	return &filterCndBuilderSpecTimeSeriesCombineThresholdCombine{builder: b.builder}
}

type filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) Eq(value map[string]*AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) Neq(value map[string]*AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) Gt(value map[string]*AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) Gte(value map[string]*AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) Lt(value map[string]*AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) Lte(value map[string]*AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) In(values []map[string]*AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().PerMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) NotIn(values []map[string]*AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().PerMetric().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().PerMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().PerMetric().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) compare(op gotenfilter.CompareOperator, value map[string]*AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().PerMetric().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) WithKey(key string) *mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric {
	return &mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) Eq(value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) Neq(value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) Gt(value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) Gte(value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) Lt(value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) Lte(value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) In(values []*AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().PerMetric().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) NotIn(values []*AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().PerMetric().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().PerMetric().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().PerMetric().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTimeSeriesCombineThresholdPerMetric) compare(op gotenfilter.CompareOperator, value *AlertingCondition_Spec_TimeSeries_Threshold) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().PerMetric().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTimeSeriesCombineThresholdCombine struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdCombine) Eq(value AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdCombine) Neq(value AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdCombine) Gt(value AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdCombine) Gte(value AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdCombine) Lt(value AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdCombine) Lte(value AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdCombine) In(values []AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().Combine().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdCombine) NotIn(values []AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().Combine().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdCombine) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().Combine().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdCombine) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().Combine().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesCombineThresholdCombine) compare(op gotenfilter.CompareOperator, value AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().CombineThreshold().Combine().WithValue(value),
	})
}

type filterCndBuilderSpecTimeSeriesDuration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTimeSeriesDuration) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTimeSeriesDuration) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTimeSeriesDuration) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTimeSeriesDuration) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTimeSeriesDuration) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTimeSeriesDuration) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTimeSeriesDuration) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Duration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesDuration) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Duration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTimeSeriesDuration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Duration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesDuration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Duration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTimeSeriesDuration) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().TimeSeries().Duration().WithValue(value),
	})
}

type filterCndBuilderSpecTrigger struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTrigger) Eq(value *AlertingCondition_Spec_Trigger) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTrigger) Neq(value *AlertingCondition_Spec_Trigger) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTrigger) Gt(value *AlertingCondition_Spec_Trigger) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTrigger) Gte(value *AlertingCondition_Spec_Trigger) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTrigger) Lt(value *AlertingCondition_Spec_Trigger) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTrigger) Lte(value *AlertingCondition_Spec_Trigger) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTrigger) In(values []*AlertingCondition_Spec_Trigger) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().Trigger().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTrigger) NotIn(values []*AlertingCondition_Spec_Trigger) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().Trigger().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTrigger) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().Trigger().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTrigger) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().Trigger().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTrigger) compare(op gotenfilter.CompareOperator, value *AlertingCondition_Spec_Trigger) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().Trigger().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTrigger) Type() *filterCndBuilderSpecTriggerType {
	return &filterCndBuilderSpecTriggerType{builder: b.builder}
}

type filterCndBuilderSpecTriggerType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTriggerType) Eq(value AlertingCondition_Spec_Trigger_Type) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTriggerType) Neq(value AlertingCondition_Spec_Trigger_Type) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTriggerType) Gt(value AlertingCondition_Spec_Trigger_Type) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTriggerType) Gte(value AlertingCondition_Spec_Trigger_Type) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTriggerType) Lt(value AlertingCondition_Spec_Trigger_Type) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTriggerType) Lte(value AlertingCondition_Spec_Trigger_Type) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTriggerType) In(values []AlertingCondition_Spec_Trigger_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().Trigger().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTriggerType) NotIn(values []AlertingCondition_Spec_Trigger_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().Spec().Trigger().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTriggerType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().Trigger().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTriggerType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().Spec().Trigger().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTriggerType) compare(op gotenfilter.CompareOperator, value AlertingCondition_Spec_Trigger_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().Spec().Trigger().Type().WithValue(value),
	})
}

type filterCndBuilderState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderState) Eq(value *AlertingCondition_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderState) Neq(value *AlertingCondition_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderState) Gt(value *AlertingCondition_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderState) Gte(value *AlertingCondition_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderState) Lt(value *AlertingCondition_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderState) Lte(value *AlertingCondition_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderState) In(values []*AlertingCondition_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderState) NotIn(values []*AlertingCondition_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().State().FieldPath(),
	})
}

func (b *filterCndBuilderState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().State().FieldPath(),
	})
}

func (b *filterCndBuilderState) compare(op gotenfilter.CompareOperator, value *AlertingCondition_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().State().WithValue(value),
	})
}

func (b *filterCndBuilderState) FiringAlertsCount() *filterCndBuilderStateFiringAlertsCount {
	return &filterCndBuilderStateFiringAlertsCount{builder: b.builder}
}

type filterCndBuilderStateFiringAlertsCount struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateFiringAlertsCount) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateFiringAlertsCount) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateFiringAlertsCount) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateFiringAlertsCount) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateFiringAlertsCount) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateFiringAlertsCount) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateFiringAlertsCount) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().State().FiringAlertsCount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateFiringAlertsCount) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AlertingCondition_FieldPathArrayOfValues: NewAlertingConditionFieldPathBuilder().State().FiringAlertsCount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateFiringAlertsCount) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAlertingConditionFieldPathBuilder().State().FiringAlertsCount().FieldPath(),
	})
}

func (b *filterCndBuilderStateFiringAlertsCount) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAlertingConditionFieldPathBuilder().State().FiringAlertsCount().FieldPath(),
	})
}

func (b *filterCndBuilderStateFiringAlertsCount) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                         op,
		AlertingCondition_FieldPathValue: NewAlertingConditionFieldPathBuilder().State().FiringAlertsCount().WithValue(value),
	})
}
