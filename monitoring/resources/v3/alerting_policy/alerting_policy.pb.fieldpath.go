// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v3/alerting_policy.proto
// DO NOT EDIT!!!

package alerting_policy

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AlertingPolicy_FieldPath interface {
	gotenobject.FieldPath
	Selector() AlertingPolicy_FieldPathSelector
	Get(source *AlertingPolicy) []interface{}
	GetSingle(source *AlertingPolicy) (interface{}, bool)
	ClearValue(item *AlertingPolicy)

	// Those methods build corresponding AlertingPolicy_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AlertingPolicy_FieldPathValue
	WithIArrayOfValues(values interface{}) AlertingPolicy_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AlertingPolicy_FieldPathArrayItemValue
}

type AlertingPolicy_FieldPathSelector int32

const (
	AlertingPolicy_FieldPathSelectorName          AlertingPolicy_FieldPathSelector = 0
	AlertingPolicy_FieldPathSelectorMetadata      AlertingPolicy_FieldPathSelector = 1
	AlertingPolicy_FieldPathSelectorDisplayName   AlertingPolicy_FieldPathSelector = 2
	AlertingPolicy_FieldPathSelectorDescription   AlertingPolicy_FieldPathSelector = 3
	AlertingPolicy_FieldPathSelectorDocumentation AlertingPolicy_FieldPathSelector = 4
	AlertingPolicy_FieldPathSelectorSpec          AlertingPolicy_FieldPathSelector = 5
)

func (s AlertingPolicy_FieldPathSelector) String() string {
	switch s {
	case AlertingPolicy_FieldPathSelectorName:
		return "name"
	case AlertingPolicy_FieldPathSelectorMetadata:
		return "metadata"
	case AlertingPolicy_FieldPathSelectorDisplayName:
		return "display_name"
	case AlertingPolicy_FieldPathSelectorDescription:
		return "description"
	case AlertingPolicy_FieldPathSelectorDocumentation:
		return "documentation"
	case AlertingPolicy_FieldPathSelectorSpec:
		return "spec"
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", s))
	}
}

func BuildAlertingPolicy_FieldPath(fp gotenobject.RawFieldPath) (AlertingPolicy_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AlertingPolicy")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &AlertingPolicy_FieldTerminalPath{selector: AlertingPolicy_FieldPathSelectorName}, nil
		case "metadata":
			return &AlertingPolicy_FieldTerminalPath{selector: AlertingPolicy_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &AlertingPolicy_FieldTerminalPath{selector: AlertingPolicy_FieldPathSelectorDisplayName}, nil
		case "description":
			return &AlertingPolicy_FieldTerminalPath{selector: AlertingPolicy_FieldPathSelectorDescription}, nil
		case "documentation":
			return &AlertingPolicy_FieldTerminalPath{selector: AlertingPolicy_FieldPathSelectorDocumentation}, nil
		case "spec":
			return &AlertingPolicy_FieldTerminalPath{selector: AlertingPolicy_FieldPathSelectorSpec}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AlertingPolicy_FieldSubPath{selector: AlertingPolicy_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "documentation":
			if subpath, err := BuildAlertingPolicyDocumentation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AlertingPolicy_FieldSubPath{selector: AlertingPolicy_FieldPathSelectorDocumentation, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildAlertingPolicySpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AlertingPolicy_FieldSubPath{selector: AlertingPolicy_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AlertingPolicy", fp)
}

func ParseAlertingPolicy_FieldPath(rawField string) (AlertingPolicy_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAlertingPolicy_FieldPath(fp)
}

func MustParseAlertingPolicy_FieldPath(rawField string) AlertingPolicy_FieldPath {
	fp, err := ParseAlertingPolicy_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AlertingPolicy_FieldTerminalPath struct {
	selector AlertingPolicy_FieldPathSelector
}

var _ AlertingPolicy_FieldPath = (*AlertingPolicy_FieldTerminalPath)(nil)

func (fp *AlertingPolicy_FieldTerminalPath) Selector() AlertingPolicy_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AlertingPolicy_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AlertingPolicy_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AlertingPolicy
func (fp *AlertingPolicy_FieldTerminalPath) Get(source *AlertingPolicy) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AlertingPolicy_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case AlertingPolicy_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case AlertingPolicy_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case AlertingPolicy_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case AlertingPolicy_FieldPathSelectorDocumentation:
			if source.Documentation != nil {
				values = append(values, source.Documentation)
			}
		case AlertingPolicy_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fp.selector))
		}
	}
	return
}

func (fp *AlertingPolicy_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AlertingPolicy))
}

// GetSingle returns value pointed by specific field of from source AlertingPolicy
func (fp *AlertingPolicy_FieldTerminalPath) GetSingle(source *AlertingPolicy) (interface{}, bool) {
	switch fp.selector {
	case AlertingPolicy_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case AlertingPolicy_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case AlertingPolicy_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case AlertingPolicy_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case AlertingPolicy_FieldPathSelectorDocumentation:
		res := source.GetDocumentation()
		return res, res != nil
	case AlertingPolicy_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fp.selector))
	}
}

func (fp *AlertingPolicy_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AlertingPolicy))
}

// GetDefault returns a default value of the field type
func (fp *AlertingPolicy_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AlertingPolicy_FieldPathSelectorName:
		return (*Name)(nil)
	case AlertingPolicy_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case AlertingPolicy_FieldPathSelectorDisplayName:
		return ""
	case AlertingPolicy_FieldPathSelectorDescription:
		return ""
	case AlertingPolicy_FieldPathSelectorDocumentation:
		return (*AlertingPolicy_Documentation)(nil)
	case AlertingPolicy_FieldPathSelectorSpec:
		return (*AlertingPolicy_Spec)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fp.selector))
	}
}

func (fp *AlertingPolicy_FieldTerminalPath) ClearValue(item *AlertingPolicy) {
	if item != nil {
		switch fp.selector {
		case AlertingPolicy_FieldPathSelectorName:
			item.Name = nil
		case AlertingPolicy_FieldPathSelectorMetadata:
			item.Metadata = nil
		case AlertingPolicy_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case AlertingPolicy_FieldPathSelectorDescription:
			item.Description = ""
		case AlertingPolicy_FieldPathSelectorDocumentation:
			item.Documentation = nil
		case AlertingPolicy_FieldPathSelectorSpec:
			item.Spec = nil
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fp.selector))
		}
	}
}

func (fp *AlertingPolicy_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AlertingPolicy))
}

// IsLeaf - whether field path is holds simple value
func (fp *AlertingPolicy_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AlertingPolicy_FieldPathSelectorName ||
		fp.selector == AlertingPolicy_FieldPathSelectorDisplayName ||
		fp.selector == AlertingPolicy_FieldPathSelectorDescription
}

func (fp *AlertingPolicy_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AlertingPolicy_FieldTerminalPath) WithIValue(value interface{}) AlertingPolicy_FieldPathValue {
	switch fp.selector {
	case AlertingPolicy_FieldPathSelectorName:
		return &AlertingPolicy_FieldTerminalPathValue{AlertingPolicy_FieldTerminalPath: *fp, value: value.(*Name)}
	case AlertingPolicy_FieldPathSelectorMetadata:
		return &AlertingPolicy_FieldTerminalPathValue{AlertingPolicy_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case AlertingPolicy_FieldPathSelectorDisplayName:
		return &AlertingPolicy_FieldTerminalPathValue{AlertingPolicy_FieldTerminalPath: *fp, value: value.(string)}
	case AlertingPolicy_FieldPathSelectorDescription:
		return &AlertingPolicy_FieldTerminalPathValue{AlertingPolicy_FieldTerminalPath: *fp, value: value.(string)}
	case AlertingPolicy_FieldPathSelectorDocumentation:
		return &AlertingPolicy_FieldTerminalPathValue{AlertingPolicy_FieldTerminalPath: *fp, value: value.(*AlertingPolicy_Documentation)}
	case AlertingPolicy_FieldPathSelectorSpec:
		return &AlertingPolicy_FieldTerminalPathValue{AlertingPolicy_FieldTerminalPath: *fp, value: value.(*AlertingPolicy_Spec)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fp.selector))
	}
}

func (fp *AlertingPolicy_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AlertingPolicy_FieldTerminalPath) WithIArrayOfValues(values interface{}) AlertingPolicy_FieldPathArrayOfValues {
	fpaov := &AlertingPolicy_FieldTerminalPathArrayOfValues{AlertingPolicy_FieldTerminalPath: *fp}
	switch fp.selector {
	case AlertingPolicy_FieldPathSelectorName:
		return &AlertingPolicy_FieldTerminalPathArrayOfValues{AlertingPolicy_FieldTerminalPath: *fp, values: values.([]*Name)}
	case AlertingPolicy_FieldPathSelectorMetadata:
		return &AlertingPolicy_FieldTerminalPathArrayOfValues{AlertingPolicy_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case AlertingPolicy_FieldPathSelectorDisplayName:
		return &AlertingPolicy_FieldTerminalPathArrayOfValues{AlertingPolicy_FieldTerminalPath: *fp, values: values.([]string)}
	case AlertingPolicy_FieldPathSelectorDescription:
		return &AlertingPolicy_FieldTerminalPathArrayOfValues{AlertingPolicy_FieldTerminalPath: *fp, values: values.([]string)}
	case AlertingPolicy_FieldPathSelectorDocumentation:
		return &AlertingPolicy_FieldTerminalPathArrayOfValues{AlertingPolicy_FieldTerminalPath: *fp, values: values.([]*AlertingPolicy_Documentation)}
	case AlertingPolicy_FieldPathSelectorSpec:
		return &AlertingPolicy_FieldTerminalPathArrayOfValues{AlertingPolicy_FieldTerminalPath: *fp, values: values.([]*AlertingPolicy_Spec)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fp.selector))
	}
	return fpaov
}

func (fp *AlertingPolicy_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AlertingPolicy_FieldTerminalPath) WithIArrayItemValue(value interface{}) AlertingPolicy_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fp.selector))
	}
}

func (fp *AlertingPolicy_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type AlertingPolicy_FieldSubPath struct {
	selector AlertingPolicy_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AlertingPolicy_FieldPath = (*AlertingPolicy_FieldSubPath)(nil)

func (fps *AlertingPolicy_FieldSubPath) Selector() AlertingPolicy_FieldPathSelector {
	return fps.selector
}
func (fps *AlertingPolicy_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}
func (fps *AlertingPolicy_FieldSubPath) AsDocumentationSubPath() (AlertingPolicyDocumentation_FieldPath, bool) {
	res, ok := fps.subPath.(AlertingPolicyDocumentation_FieldPath)
	return res, ok
}
func (fps *AlertingPolicy_FieldSubPath) AsSpecSubPath() (AlertingPolicySpec_FieldPath, bool) {
	res, ok := fps.subPath.(AlertingPolicySpec_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AlertingPolicy_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AlertingPolicy_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source AlertingPolicy
func (fps *AlertingPolicy_FieldSubPath) Get(source *AlertingPolicy) (values []interface{}) {
	switch fps.selector {
	case AlertingPolicy_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case AlertingPolicy_FieldPathSelectorDocumentation:
		values = append(values, fps.subPath.GetRaw(source.GetDocumentation())...)
	case AlertingPolicy_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fps.selector))
	}
	return
}

func (fps *AlertingPolicy_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*AlertingPolicy))
}

// GetSingle returns value of selected field from source AlertingPolicy
func (fps *AlertingPolicy_FieldSubPath) GetSingle(source *AlertingPolicy) (interface{}, bool) {
	switch fps.selector {
	case AlertingPolicy_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case AlertingPolicy_FieldPathSelectorDocumentation:
		if source.GetDocumentation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDocumentation())
	case AlertingPolicy_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fps.selector))
	}
}

func (fps *AlertingPolicy_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*AlertingPolicy))
}

// GetDefault returns a default value of the field type
func (fps *AlertingPolicy_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AlertingPolicy_FieldSubPath) ClearValue(item *AlertingPolicy) {
	if item != nil {
		switch fps.selector {
		case AlertingPolicy_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case AlertingPolicy_FieldPathSelectorDocumentation:
			fps.subPath.ClearValueRaw(item.Documentation)
		case AlertingPolicy_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fps.selector))
		}
	}
}

func (fps *AlertingPolicy_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*AlertingPolicy))
}

// IsLeaf - whether field path is holds simple value
func (fps *AlertingPolicy_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AlertingPolicy_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&AlertingPolicy_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *AlertingPolicy_FieldSubPath) WithIValue(value interface{}) AlertingPolicy_FieldPathValue {
	return &AlertingPolicy_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AlertingPolicy_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AlertingPolicy_FieldSubPath) WithIArrayOfValues(values interface{}) AlertingPolicy_FieldPathArrayOfValues {
	return &AlertingPolicy_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AlertingPolicy_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AlertingPolicy_FieldSubPath) WithIArrayItemValue(value interface{}) AlertingPolicy_FieldPathArrayItemValue {
	return &AlertingPolicy_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AlertingPolicy_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AlertingPolicy_FieldPathValue allows storing values for AlertingPolicy fields according to their type
type AlertingPolicy_FieldPathValue interface {
	AlertingPolicy_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AlertingPolicy)
	CompareWith(*AlertingPolicy) (cmp int, comparable bool)
}

func ParseAlertingPolicy_FieldPathValue(pathStr, valueStr string) (AlertingPolicy_FieldPathValue, error) {
	fp, err := ParseAlertingPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AlertingPolicy field path value from %s: %v", valueStr, err)
	}
	return fpv.(AlertingPolicy_FieldPathValue), nil
}

func MustParseAlertingPolicy_FieldPathValue(pathStr, valueStr string) AlertingPolicy_FieldPathValue {
	fpv, err := ParseAlertingPolicy_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AlertingPolicy_FieldTerminalPathValue struct {
	AlertingPolicy_FieldTerminalPath
	value interface{}
}

var _ AlertingPolicy_FieldPathValue = (*AlertingPolicy_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AlertingPolicy' as interface{}
func (fpv *AlertingPolicy_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AlertingPolicy_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *AlertingPolicy_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *AlertingPolicy_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AlertingPolicy_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AlertingPolicy_FieldTerminalPathValue) AsDocumentationValue() (*AlertingPolicy_Documentation, bool) {
	res, ok := fpv.value.(*AlertingPolicy_Documentation)
	return res, ok
}
func (fpv *AlertingPolicy_FieldTerminalPathValue) AsSpecValue() (*AlertingPolicy_Spec, bool) {
	res, ok := fpv.value.(*AlertingPolicy_Spec)
	return res, ok
}

// SetTo stores value for selected field for object AlertingPolicy
func (fpv *AlertingPolicy_FieldTerminalPathValue) SetTo(target **AlertingPolicy) {
	if *target == nil {
		*target = new(AlertingPolicy)
	}
	switch fpv.selector {
	case AlertingPolicy_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case AlertingPolicy_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case AlertingPolicy_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case AlertingPolicy_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case AlertingPolicy_FieldPathSelectorDocumentation:
		(*target).Documentation = fpv.value.(*AlertingPolicy_Documentation)
	case AlertingPolicy_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*AlertingPolicy_Spec)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fpv.selector))
	}
}

func (fpv *AlertingPolicy_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AlertingPolicy)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AlertingPolicy_FieldTerminalPathValue' with the value under path in 'AlertingPolicy'.
func (fpv *AlertingPolicy_FieldTerminalPathValue) CompareWith(source *AlertingPolicy) (int, bool) {
	switch fpv.selector {
	case AlertingPolicy_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case AlertingPolicy_FieldPathSelectorMetadata:
		return 0, false
	case AlertingPolicy_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AlertingPolicy_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AlertingPolicy_FieldPathSelectorDocumentation:
		return 0, false
	case AlertingPolicy_FieldPathSelectorSpec:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fpv.selector))
	}
}

func (fpv *AlertingPolicy_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AlertingPolicy))
}

type AlertingPolicy_FieldSubPathValue struct {
	AlertingPolicy_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AlertingPolicy_FieldPathValue = (*AlertingPolicy_FieldSubPathValue)(nil)

func (fpvs *AlertingPolicy_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *AlertingPolicy_FieldSubPathValue) AsDocumentationPathValue() (AlertingPolicyDocumentation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AlertingPolicyDocumentation_FieldPathValue)
	return res, ok
}
func (fpvs *AlertingPolicy_FieldSubPathValue) AsSpecPathValue() (AlertingPolicySpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AlertingPolicySpec_FieldPathValue)
	return res, ok
}

func (fpvs *AlertingPolicy_FieldSubPathValue) SetTo(target **AlertingPolicy) {
	if *target == nil {
		*target = new(AlertingPolicy)
	}
	switch fpvs.Selector() {
	case AlertingPolicy_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case AlertingPolicy_FieldPathSelectorDocumentation:
		fpvs.subPathValue.(AlertingPolicyDocumentation_FieldPathValue).SetTo(&(*target).Documentation)
	case AlertingPolicy_FieldPathSelectorSpec:
		fpvs.subPathValue.(AlertingPolicySpec_FieldPathValue).SetTo(&(*target).Spec)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fpvs.Selector()))
	}
}

func (fpvs *AlertingPolicy_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AlertingPolicy)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AlertingPolicy_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AlertingPolicy_FieldSubPathValue) CompareWith(source *AlertingPolicy) (int, bool) {
	switch fpvs.Selector() {
	case AlertingPolicy_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case AlertingPolicy_FieldPathSelectorDocumentation:
		return fpvs.subPathValue.(AlertingPolicyDocumentation_FieldPathValue).CompareWith(source.GetDocumentation())
	case AlertingPolicy_FieldPathSelectorSpec:
		return fpvs.subPathValue.(AlertingPolicySpec_FieldPathValue).CompareWith(source.GetSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fpvs.Selector()))
	}
}

func (fpvs *AlertingPolicy_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*AlertingPolicy))
}

// AlertingPolicy_FieldPathArrayItemValue allows storing single item in Path-specific values for AlertingPolicy according to their type
// Present only for array (repeated) types.
type AlertingPolicy_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AlertingPolicy_FieldPath
	ContainsValue(*AlertingPolicy) bool
}

// ParseAlertingPolicy_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAlertingPolicy_FieldPathArrayItemValue(pathStr, valueStr string) (AlertingPolicy_FieldPathArrayItemValue, error) {
	fp, err := ParseAlertingPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AlertingPolicy field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AlertingPolicy_FieldPathArrayItemValue), nil
}

func MustParseAlertingPolicy_FieldPathArrayItemValue(pathStr, valueStr string) AlertingPolicy_FieldPathArrayItemValue {
	fpaiv, err := ParseAlertingPolicy_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AlertingPolicy_FieldTerminalPathArrayItemValue struct {
	AlertingPolicy_FieldTerminalPath
	value interface{}
}

var _ AlertingPolicy_FieldPathArrayItemValue = (*AlertingPolicy_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AlertingPolicy as interface{}
func (fpaiv *AlertingPolicy_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AlertingPolicy_FieldTerminalPathArrayItemValue) GetSingle(source *AlertingPolicy) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AlertingPolicy_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AlertingPolicy))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AlertingPolicy'
func (fpaiv *AlertingPolicy_FieldTerminalPathArrayItemValue) ContainsValue(source *AlertingPolicy) bool {
	slice := fpaiv.AlertingPolicy_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AlertingPolicy_FieldSubPathArrayItemValue struct {
	AlertingPolicy_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AlertingPolicy_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AlertingPolicy_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AlertingPolicy_FieldSubPathArrayItemValue) AsDocumentationPathItemValue() (AlertingPolicyDocumentation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AlertingPolicyDocumentation_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AlertingPolicy_FieldSubPathArrayItemValue) AsSpecPathItemValue() (AlertingPolicySpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AlertingPolicySpec_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'AlertingPolicy'
func (fpaivs *AlertingPolicy_FieldSubPathArrayItemValue) ContainsValue(source *AlertingPolicy) bool {
	switch fpaivs.Selector() {
	case AlertingPolicy_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case AlertingPolicy_FieldPathSelectorDocumentation:
		return fpaivs.subPathItemValue.(AlertingPolicyDocumentation_FieldPathArrayItemValue).ContainsValue(source.GetDocumentation())
	case AlertingPolicy_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(AlertingPolicySpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy: %d", fpaivs.Selector()))
	}
}

// AlertingPolicy_FieldPathArrayOfValues allows storing slice of values for AlertingPolicy fields according to their type
type AlertingPolicy_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AlertingPolicy_FieldPath
}

func ParseAlertingPolicy_FieldPathArrayOfValues(pathStr, valuesStr string) (AlertingPolicy_FieldPathArrayOfValues, error) {
	fp, err := ParseAlertingPolicy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AlertingPolicy field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AlertingPolicy_FieldPathArrayOfValues), nil
}

func MustParseAlertingPolicy_FieldPathArrayOfValues(pathStr, valuesStr string) AlertingPolicy_FieldPathArrayOfValues {
	fpaov, err := ParseAlertingPolicy_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AlertingPolicy_FieldTerminalPathArrayOfValues struct {
	AlertingPolicy_FieldTerminalPath
	values interface{}
}

var _ AlertingPolicy_FieldPathArrayOfValues = (*AlertingPolicy_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AlertingPolicy_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AlertingPolicy_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case AlertingPolicy_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case AlertingPolicy_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AlertingPolicy_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AlertingPolicy_FieldPathSelectorDocumentation:
		for _, v := range fpaov.values.([]*AlertingPolicy_Documentation) {
			values = append(values, v)
		}
	case AlertingPolicy_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*AlertingPolicy_Spec) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AlertingPolicy_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *AlertingPolicy_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *AlertingPolicy_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AlertingPolicy_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AlertingPolicy_FieldTerminalPathArrayOfValues) AsDocumentationArrayOfValues() ([]*AlertingPolicy_Documentation, bool) {
	res, ok := fpaov.values.([]*AlertingPolicy_Documentation)
	return res, ok
}
func (fpaov *AlertingPolicy_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*AlertingPolicy_Spec, bool) {
	res, ok := fpaov.values.([]*AlertingPolicy_Spec)
	return res, ok
}

type AlertingPolicy_FieldSubPathArrayOfValues struct {
	AlertingPolicy_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AlertingPolicy_FieldPathArrayOfValues = (*AlertingPolicy_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AlertingPolicy_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AlertingPolicy_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AlertingPolicy_FieldSubPathArrayOfValues) AsDocumentationPathArrayOfValues() (AlertingPolicyDocumentation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AlertingPolicyDocumentation_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AlertingPolicy_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (AlertingPolicySpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AlertingPolicySpec_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AlertingPolicyDocumentation_FieldPath interface {
	gotenobject.FieldPath
	Selector() AlertingPolicyDocumentation_FieldPathSelector
	Get(source *AlertingPolicy_Documentation) []interface{}
	GetSingle(source *AlertingPolicy_Documentation) (interface{}, bool)
	ClearValue(item *AlertingPolicy_Documentation)

	// Those methods build corresponding AlertingPolicyDocumentation_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AlertingPolicyDocumentation_FieldPathValue
	WithIArrayOfValues(values interface{}) AlertingPolicyDocumentation_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AlertingPolicyDocumentation_FieldPathArrayItemValue
}

type AlertingPolicyDocumentation_FieldPathSelector int32

const (
	AlertingPolicyDocumentation_FieldPathSelectorContent  AlertingPolicyDocumentation_FieldPathSelector = 0
	AlertingPolicyDocumentation_FieldPathSelectorMimeType AlertingPolicyDocumentation_FieldPathSelector = 1
)

func (s AlertingPolicyDocumentation_FieldPathSelector) String() string {
	switch s {
	case AlertingPolicyDocumentation_FieldPathSelectorContent:
		return "content"
	case AlertingPolicyDocumentation_FieldPathSelectorMimeType:
		return "mime_type"
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Documentation: %d", s))
	}
}

func BuildAlertingPolicyDocumentation_FieldPath(fp gotenobject.RawFieldPath) (AlertingPolicyDocumentation_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AlertingPolicy_Documentation")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "content":
			return &AlertingPolicyDocumentation_FieldTerminalPath{selector: AlertingPolicyDocumentation_FieldPathSelectorContent}, nil
		case "mime_type", "mimeType", "mime-type":
			return &AlertingPolicyDocumentation_FieldTerminalPath{selector: AlertingPolicyDocumentation_FieldPathSelectorMimeType}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AlertingPolicy_Documentation", fp)
}

func ParseAlertingPolicyDocumentation_FieldPath(rawField string) (AlertingPolicyDocumentation_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAlertingPolicyDocumentation_FieldPath(fp)
}

func MustParseAlertingPolicyDocumentation_FieldPath(rawField string) AlertingPolicyDocumentation_FieldPath {
	fp, err := ParseAlertingPolicyDocumentation_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AlertingPolicyDocumentation_FieldTerminalPath struct {
	selector AlertingPolicyDocumentation_FieldPathSelector
}

var _ AlertingPolicyDocumentation_FieldPath = (*AlertingPolicyDocumentation_FieldTerminalPath)(nil)

func (fp *AlertingPolicyDocumentation_FieldTerminalPath) Selector() AlertingPolicyDocumentation_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AlertingPolicyDocumentation_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AlertingPolicyDocumentation_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AlertingPolicy_Documentation
func (fp *AlertingPolicyDocumentation_FieldTerminalPath) Get(source *AlertingPolicy_Documentation) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AlertingPolicyDocumentation_FieldPathSelectorContent:
			values = append(values, source.Content)
		case AlertingPolicyDocumentation_FieldPathSelectorMimeType:
			values = append(values, source.MimeType)
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Documentation: %d", fp.selector))
		}
	}
	return
}

func (fp *AlertingPolicyDocumentation_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AlertingPolicy_Documentation))
}

// GetSingle returns value pointed by specific field of from source AlertingPolicy_Documentation
func (fp *AlertingPolicyDocumentation_FieldTerminalPath) GetSingle(source *AlertingPolicy_Documentation) (interface{}, bool) {
	switch fp.selector {
	case AlertingPolicyDocumentation_FieldPathSelectorContent:
		return source.GetContent(), source != nil
	case AlertingPolicyDocumentation_FieldPathSelectorMimeType:
		return source.GetMimeType(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Documentation: %d", fp.selector))
	}
}

func (fp *AlertingPolicyDocumentation_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AlertingPolicy_Documentation))
}

// GetDefault returns a default value of the field type
func (fp *AlertingPolicyDocumentation_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AlertingPolicyDocumentation_FieldPathSelectorContent:
		return ""
	case AlertingPolicyDocumentation_FieldPathSelectorMimeType:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Documentation: %d", fp.selector))
	}
}

func (fp *AlertingPolicyDocumentation_FieldTerminalPath) ClearValue(item *AlertingPolicy_Documentation) {
	if item != nil {
		switch fp.selector {
		case AlertingPolicyDocumentation_FieldPathSelectorContent:
			item.Content = ""
		case AlertingPolicyDocumentation_FieldPathSelectorMimeType:
			item.MimeType = ""
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Documentation: %d", fp.selector))
		}
	}
}

func (fp *AlertingPolicyDocumentation_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AlertingPolicy_Documentation))
}

// IsLeaf - whether field path is holds simple value
func (fp *AlertingPolicyDocumentation_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AlertingPolicyDocumentation_FieldPathSelectorContent ||
		fp.selector == AlertingPolicyDocumentation_FieldPathSelectorMimeType
}

func (fp *AlertingPolicyDocumentation_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AlertingPolicyDocumentation_FieldTerminalPath) WithIValue(value interface{}) AlertingPolicyDocumentation_FieldPathValue {
	switch fp.selector {
	case AlertingPolicyDocumentation_FieldPathSelectorContent:
		return &AlertingPolicyDocumentation_FieldTerminalPathValue{AlertingPolicyDocumentation_FieldTerminalPath: *fp, value: value.(string)}
	case AlertingPolicyDocumentation_FieldPathSelectorMimeType:
		return &AlertingPolicyDocumentation_FieldTerminalPathValue{AlertingPolicyDocumentation_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Documentation: %d", fp.selector))
	}
}

func (fp *AlertingPolicyDocumentation_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AlertingPolicyDocumentation_FieldTerminalPath) WithIArrayOfValues(values interface{}) AlertingPolicyDocumentation_FieldPathArrayOfValues {
	fpaov := &AlertingPolicyDocumentation_FieldTerminalPathArrayOfValues{AlertingPolicyDocumentation_FieldTerminalPath: *fp}
	switch fp.selector {
	case AlertingPolicyDocumentation_FieldPathSelectorContent:
		return &AlertingPolicyDocumentation_FieldTerminalPathArrayOfValues{AlertingPolicyDocumentation_FieldTerminalPath: *fp, values: values.([]string)}
	case AlertingPolicyDocumentation_FieldPathSelectorMimeType:
		return &AlertingPolicyDocumentation_FieldTerminalPathArrayOfValues{AlertingPolicyDocumentation_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Documentation: %d", fp.selector))
	}
	return fpaov
}

func (fp *AlertingPolicyDocumentation_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AlertingPolicyDocumentation_FieldTerminalPath) WithIArrayItemValue(value interface{}) AlertingPolicyDocumentation_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Documentation: %d", fp.selector))
	}
}

func (fp *AlertingPolicyDocumentation_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AlertingPolicyDocumentation_FieldPathValue allows storing values for Documentation fields according to their type
type AlertingPolicyDocumentation_FieldPathValue interface {
	AlertingPolicyDocumentation_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AlertingPolicy_Documentation)
	CompareWith(*AlertingPolicy_Documentation) (cmp int, comparable bool)
}

func ParseAlertingPolicyDocumentation_FieldPathValue(pathStr, valueStr string) (AlertingPolicyDocumentation_FieldPathValue, error) {
	fp, err := ParseAlertingPolicyDocumentation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Documentation field path value from %s: %v", valueStr, err)
	}
	return fpv.(AlertingPolicyDocumentation_FieldPathValue), nil
}

func MustParseAlertingPolicyDocumentation_FieldPathValue(pathStr, valueStr string) AlertingPolicyDocumentation_FieldPathValue {
	fpv, err := ParseAlertingPolicyDocumentation_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AlertingPolicyDocumentation_FieldTerminalPathValue struct {
	AlertingPolicyDocumentation_FieldTerminalPath
	value interface{}
}

var _ AlertingPolicyDocumentation_FieldPathValue = (*AlertingPolicyDocumentation_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Documentation' as interface{}
func (fpv *AlertingPolicyDocumentation_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AlertingPolicyDocumentation_FieldTerminalPathValue) AsContentValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AlertingPolicyDocumentation_FieldTerminalPathValue) AsMimeTypeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Documentation
func (fpv *AlertingPolicyDocumentation_FieldTerminalPathValue) SetTo(target **AlertingPolicy_Documentation) {
	if *target == nil {
		*target = new(AlertingPolicy_Documentation)
	}
	switch fpv.selector {
	case AlertingPolicyDocumentation_FieldPathSelectorContent:
		(*target).Content = fpv.value.(string)
	case AlertingPolicyDocumentation_FieldPathSelectorMimeType:
		(*target).MimeType = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Documentation: %d", fpv.selector))
	}
}

func (fpv *AlertingPolicyDocumentation_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AlertingPolicy_Documentation)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AlertingPolicyDocumentation_FieldTerminalPathValue' with the value under path in 'AlertingPolicy_Documentation'.
func (fpv *AlertingPolicyDocumentation_FieldTerminalPathValue) CompareWith(source *AlertingPolicy_Documentation) (int, bool) {
	switch fpv.selector {
	case AlertingPolicyDocumentation_FieldPathSelectorContent:
		leftValue := fpv.value.(string)
		rightValue := source.GetContent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AlertingPolicyDocumentation_FieldPathSelectorMimeType:
		leftValue := fpv.value.(string)
		rightValue := source.GetMimeType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Documentation: %d", fpv.selector))
	}
}

func (fpv *AlertingPolicyDocumentation_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AlertingPolicy_Documentation))
}

// AlertingPolicyDocumentation_FieldPathArrayItemValue allows storing single item in Path-specific values for Documentation according to their type
// Present only for array (repeated) types.
type AlertingPolicyDocumentation_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AlertingPolicyDocumentation_FieldPath
	ContainsValue(*AlertingPolicy_Documentation) bool
}

// ParseAlertingPolicyDocumentation_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAlertingPolicyDocumentation_FieldPathArrayItemValue(pathStr, valueStr string) (AlertingPolicyDocumentation_FieldPathArrayItemValue, error) {
	fp, err := ParseAlertingPolicyDocumentation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Documentation field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AlertingPolicyDocumentation_FieldPathArrayItemValue), nil
}

func MustParseAlertingPolicyDocumentation_FieldPathArrayItemValue(pathStr, valueStr string) AlertingPolicyDocumentation_FieldPathArrayItemValue {
	fpaiv, err := ParseAlertingPolicyDocumentation_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AlertingPolicyDocumentation_FieldTerminalPathArrayItemValue struct {
	AlertingPolicyDocumentation_FieldTerminalPath
	value interface{}
}

var _ AlertingPolicyDocumentation_FieldPathArrayItemValue = (*AlertingPolicyDocumentation_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AlertingPolicy_Documentation as interface{}
func (fpaiv *AlertingPolicyDocumentation_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AlertingPolicyDocumentation_FieldTerminalPathArrayItemValue) GetSingle(source *AlertingPolicy_Documentation) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AlertingPolicyDocumentation_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AlertingPolicy_Documentation))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Documentation'
func (fpaiv *AlertingPolicyDocumentation_FieldTerminalPathArrayItemValue) ContainsValue(source *AlertingPolicy_Documentation) bool {
	slice := fpaiv.AlertingPolicyDocumentation_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AlertingPolicyDocumentation_FieldPathArrayOfValues allows storing slice of values for Documentation fields according to their type
type AlertingPolicyDocumentation_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AlertingPolicyDocumentation_FieldPath
}

func ParseAlertingPolicyDocumentation_FieldPathArrayOfValues(pathStr, valuesStr string) (AlertingPolicyDocumentation_FieldPathArrayOfValues, error) {
	fp, err := ParseAlertingPolicyDocumentation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Documentation field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AlertingPolicyDocumentation_FieldPathArrayOfValues), nil
}

func MustParseAlertingPolicyDocumentation_FieldPathArrayOfValues(pathStr, valuesStr string) AlertingPolicyDocumentation_FieldPathArrayOfValues {
	fpaov, err := ParseAlertingPolicyDocumentation_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AlertingPolicyDocumentation_FieldTerminalPathArrayOfValues struct {
	AlertingPolicyDocumentation_FieldTerminalPath
	values interface{}
}

var _ AlertingPolicyDocumentation_FieldPathArrayOfValues = (*AlertingPolicyDocumentation_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AlertingPolicyDocumentation_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AlertingPolicyDocumentation_FieldPathSelectorContent:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AlertingPolicyDocumentation_FieldPathSelectorMimeType:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AlertingPolicyDocumentation_FieldTerminalPathArrayOfValues) AsContentArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AlertingPolicyDocumentation_FieldTerminalPathArrayOfValues) AsMimeTypeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AlertingPolicySpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() AlertingPolicySpec_FieldPathSelector
	Get(source *AlertingPolicy_Spec) []interface{}
	GetSingle(source *AlertingPolicy_Spec) (interface{}, bool)
	ClearValue(item *AlertingPolicy_Spec)

	// Those methods build corresponding AlertingPolicySpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AlertingPolicySpec_FieldPathValue
	WithIArrayOfValues(values interface{}) AlertingPolicySpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AlertingPolicySpec_FieldPathArrayItemValue
}

type AlertingPolicySpec_FieldPathSelector int32

const (
	AlertingPolicySpec_FieldPathSelectorEnabled           AlertingPolicySpec_FieldPathSelector = 0
	AlertingPolicySpec_FieldPathSelectorConditionCombiner AlertingPolicySpec_FieldPathSelector = 1
	AlertingPolicySpec_FieldPathSelectorNotification      AlertingPolicySpec_FieldPathSelector = 2
)

func (s AlertingPolicySpec_FieldPathSelector) String() string {
	switch s {
	case AlertingPolicySpec_FieldPathSelectorEnabled:
		return "enabled"
	case AlertingPolicySpec_FieldPathSelectorConditionCombiner:
		return "condition_combiner"
	case AlertingPolicySpec_FieldPathSelectorNotification:
		return "notification"
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", s))
	}
}

func BuildAlertingPolicySpec_FieldPath(fp gotenobject.RawFieldPath) (AlertingPolicySpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AlertingPolicy_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "enabled":
			return &AlertingPolicySpec_FieldTerminalPath{selector: AlertingPolicySpec_FieldPathSelectorEnabled}, nil
		case "condition_combiner", "conditionCombiner", "condition-combiner":
			return &AlertingPolicySpec_FieldTerminalPath{selector: AlertingPolicySpec_FieldPathSelectorConditionCombiner}, nil
		case "notification":
			return &AlertingPolicySpec_FieldTerminalPath{selector: AlertingPolicySpec_FieldPathSelectorNotification}, nil
		}
	} else {
		switch fp[0] {
		case "notification":
			if subpath, err := BuildAlertingPolicySpecNotification_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AlertingPolicySpec_FieldSubPath{selector: AlertingPolicySpec_FieldPathSelectorNotification, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AlertingPolicy_Spec", fp)
}

func ParseAlertingPolicySpec_FieldPath(rawField string) (AlertingPolicySpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAlertingPolicySpec_FieldPath(fp)
}

func MustParseAlertingPolicySpec_FieldPath(rawField string) AlertingPolicySpec_FieldPath {
	fp, err := ParseAlertingPolicySpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AlertingPolicySpec_FieldTerminalPath struct {
	selector AlertingPolicySpec_FieldPathSelector
}

var _ AlertingPolicySpec_FieldPath = (*AlertingPolicySpec_FieldTerminalPath)(nil)

func (fp *AlertingPolicySpec_FieldTerminalPath) Selector() AlertingPolicySpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AlertingPolicySpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AlertingPolicySpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AlertingPolicy_Spec
func (fp *AlertingPolicySpec_FieldTerminalPath) Get(source *AlertingPolicy_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AlertingPolicySpec_FieldPathSelectorEnabled:
			values = append(values, source.Enabled)
		case AlertingPolicySpec_FieldPathSelectorConditionCombiner:
			values = append(values, source.ConditionCombiner)
		case AlertingPolicySpec_FieldPathSelectorNotification:
			if source.Notification != nil {
				values = append(values, source.Notification)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *AlertingPolicySpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AlertingPolicy_Spec))
}

// GetSingle returns value pointed by specific field of from source AlertingPolicy_Spec
func (fp *AlertingPolicySpec_FieldTerminalPath) GetSingle(source *AlertingPolicy_Spec) (interface{}, bool) {
	switch fp.selector {
	case AlertingPolicySpec_FieldPathSelectorEnabled:
		return source.GetEnabled(), source != nil
	case AlertingPolicySpec_FieldPathSelectorConditionCombiner:
		return source.GetConditionCombiner(), source != nil
	case AlertingPolicySpec_FieldPathSelectorNotification:
		res := source.GetNotification()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AlertingPolicy_Spec))
}

// GetDefault returns a default value of the field type
func (fp *AlertingPolicySpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AlertingPolicySpec_FieldPathSelectorEnabled:
		return false
	case AlertingPolicySpec_FieldPathSelectorConditionCombiner:
		return AlertingPolicy_Spec_OR
	case AlertingPolicySpec_FieldPathSelectorNotification:
		return (*AlertingPolicy_Spec_Notification)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpec_FieldTerminalPath) ClearValue(item *AlertingPolicy_Spec) {
	if item != nil {
		switch fp.selector {
		case AlertingPolicySpec_FieldPathSelectorEnabled:
			item.Enabled = false
		case AlertingPolicySpec_FieldPathSelectorConditionCombiner:
			item.ConditionCombiner = AlertingPolicy_Spec_OR
		case AlertingPolicySpec_FieldPathSelectorNotification:
			item.Notification = nil
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fp.selector))
		}
	}
}

func (fp *AlertingPolicySpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AlertingPolicy_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *AlertingPolicySpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AlertingPolicySpec_FieldPathSelectorEnabled ||
		fp.selector == AlertingPolicySpec_FieldPathSelectorConditionCombiner
}

func (fp *AlertingPolicySpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AlertingPolicySpec_FieldTerminalPath) WithIValue(value interface{}) AlertingPolicySpec_FieldPathValue {
	switch fp.selector {
	case AlertingPolicySpec_FieldPathSelectorEnabled:
		return &AlertingPolicySpec_FieldTerminalPathValue{AlertingPolicySpec_FieldTerminalPath: *fp, value: value.(bool)}
	case AlertingPolicySpec_FieldPathSelectorConditionCombiner:
		return &AlertingPolicySpec_FieldTerminalPathValue{AlertingPolicySpec_FieldTerminalPath: *fp, value: value.(AlertingPolicy_Spec_ConditionsCombiner)}
	case AlertingPolicySpec_FieldPathSelectorNotification:
		return &AlertingPolicySpec_FieldTerminalPathValue{AlertingPolicySpec_FieldTerminalPath: *fp, value: value.(*AlertingPolicy_Spec_Notification)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AlertingPolicySpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) AlertingPolicySpec_FieldPathArrayOfValues {
	fpaov := &AlertingPolicySpec_FieldTerminalPathArrayOfValues{AlertingPolicySpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case AlertingPolicySpec_FieldPathSelectorEnabled:
		return &AlertingPolicySpec_FieldTerminalPathArrayOfValues{AlertingPolicySpec_FieldTerminalPath: *fp, values: values.([]bool)}
	case AlertingPolicySpec_FieldPathSelectorConditionCombiner:
		return &AlertingPolicySpec_FieldTerminalPathArrayOfValues{AlertingPolicySpec_FieldTerminalPath: *fp, values: values.([]AlertingPolicy_Spec_ConditionsCombiner)}
	case AlertingPolicySpec_FieldPathSelectorNotification:
		return &AlertingPolicySpec_FieldTerminalPathArrayOfValues{AlertingPolicySpec_FieldTerminalPath: *fp, values: values.([]*AlertingPolicy_Spec_Notification)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *AlertingPolicySpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AlertingPolicySpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) AlertingPolicySpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type AlertingPolicySpec_FieldSubPath struct {
	selector AlertingPolicySpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AlertingPolicySpec_FieldPath = (*AlertingPolicySpec_FieldSubPath)(nil)

func (fps *AlertingPolicySpec_FieldSubPath) Selector() AlertingPolicySpec_FieldPathSelector {
	return fps.selector
}
func (fps *AlertingPolicySpec_FieldSubPath) AsNotificationSubPath() (AlertingPolicySpecNotification_FieldPath, bool) {
	res, ok := fps.subPath.(AlertingPolicySpecNotification_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AlertingPolicySpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AlertingPolicySpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source AlertingPolicy_Spec
func (fps *AlertingPolicySpec_FieldSubPath) Get(source *AlertingPolicy_Spec) (values []interface{}) {
	switch fps.selector {
	case AlertingPolicySpec_FieldPathSelectorNotification:
		values = append(values, fps.subPath.GetRaw(source.GetNotification())...)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fps.selector))
	}
	return
}

func (fps *AlertingPolicySpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*AlertingPolicy_Spec))
}

// GetSingle returns value of selected field from source AlertingPolicy_Spec
func (fps *AlertingPolicySpec_FieldSubPath) GetSingle(source *AlertingPolicy_Spec) (interface{}, bool) {
	switch fps.selector {
	case AlertingPolicySpec_FieldPathSelectorNotification:
		if source.GetNotification() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetNotification())
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fps.selector))
	}
}

func (fps *AlertingPolicySpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*AlertingPolicy_Spec))
}

// GetDefault returns a default value of the field type
func (fps *AlertingPolicySpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AlertingPolicySpec_FieldSubPath) ClearValue(item *AlertingPolicy_Spec) {
	if item != nil {
		switch fps.selector {
		case AlertingPolicySpec_FieldPathSelectorNotification:
			fps.subPath.ClearValueRaw(item.Notification)
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fps.selector))
		}
	}
}

func (fps *AlertingPolicySpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*AlertingPolicy_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fps *AlertingPolicySpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AlertingPolicySpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&AlertingPolicySpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *AlertingPolicySpec_FieldSubPath) WithIValue(value interface{}) AlertingPolicySpec_FieldPathValue {
	return &AlertingPolicySpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AlertingPolicySpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AlertingPolicySpec_FieldSubPath) WithIArrayOfValues(values interface{}) AlertingPolicySpec_FieldPathArrayOfValues {
	return &AlertingPolicySpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AlertingPolicySpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AlertingPolicySpec_FieldSubPath) WithIArrayItemValue(value interface{}) AlertingPolicySpec_FieldPathArrayItemValue {
	return &AlertingPolicySpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AlertingPolicySpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AlertingPolicySpec_FieldPathValue allows storing values for Spec fields according to their type
type AlertingPolicySpec_FieldPathValue interface {
	AlertingPolicySpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AlertingPolicy_Spec)
	CompareWith(*AlertingPolicy_Spec) (cmp int, comparable bool)
}

func ParseAlertingPolicySpec_FieldPathValue(pathStr, valueStr string) (AlertingPolicySpec_FieldPathValue, error) {
	fp, err := ParseAlertingPolicySpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(AlertingPolicySpec_FieldPathValue), nil
}

func MustParseAlertingPolicySpec_FieldPathValue(pathStr, valueStr string) AlertingPolicySpec_FieldPathValue {
	fpv, err := ParseAlertingPolicySpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AlertingPolicySpec_FieldTerminalPathValue struct {
	AlertingPolicySpec_FieldTerminalPath
	value interface{}
}

var _ AlertingPolicySpec_FieldPathValue = (*AlertingPolicySpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *AlertingPolicySpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AlertingPolicySpec_FieldTerminalPathValue) AsEnabledValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *AlertingPolicySpec_FieldTerminalPathValue) AsConditionCombinerValue() (AlertingPolicy_Spec_ConditionsCombiner, bool) {
	res, ok := fpv.value.(AlertingPolicy_Spec_ConditionsCombiner)
	return res, ok
}
func (fpv *AlertingPolicySpec_FieldTerminalPathValue) AsNotificationValue() (*AlertingPolicy_Spec_Notification, bool) {
	res, ok := fpv.value.(*AlertingPolicy_Spec_Notification)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *AlertingPolicySpec_FieldTerminalPathValue) SetTo(target **AlertingPolicy_Spec) {
	if *target == nil {
		*target = new(AlertingPolicy_Spec)
	}
	switch fpv.selector {
	case AlertingPolicySpec_FieldPathSelectorEnabled:
		(*target).Enabled = fpv.value.(bool)
	case AlertingPolicySpec_FieldPathSelectorConditionCombiner:
		(*target).ConditionCombiner = fpv.value.(AlertingPolicy_Spec_ConditionsCombiner)
	case AlertingPolicySpec_FieldPathSelectorNotification:
		(*target).Notification = fpv.value.(*AlertingPolicy_Spec_Notification)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fpv.selector))
	}
}

func (fpv *AlertingPolicySpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AlertingPolicy_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AlertingPolicySpec_FieldTerminalPathValue' with the value under path in 'AlertingPolicy_Spec'.
func (fpv *AlertingPolicySpec_FieldTerminalPathValue) CompareWith(source *AlertingPolicy_Spec) (int, bool) {
	switch fpv.selector {
	case AlertingPolicySpec_FieldPathSelectorEnabled:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEnabled()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AlertingPolicySpec_FieldPathSelectorConditionCombiner:
		leftValue := fpv.value.(AlertingPolicy_Spec_ConditionsCombiner)
		rightValue := source.GetConditionCombiner()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AlertingPolicySpec_FieldPathSelectorNotification:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fpv.selector))
	}
}

func (fpv *AlertingPolicySpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AlertingPolicy_Spec))
}

type AlertingPolicySpec_FieldSubPathValue struct {
	AlertingPolicySpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AlertingPolicySpec_FieldPathValue = (*AlertingPolicySpec_FieldSubPathValue)(nil)

func (fpvs *AlertingPolicySpec_FieldSubPathValue) AsNotificationPathValue() (AlertingPolicySpecNotification_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AlertingPolicySpecNotification_FieldPathValue)
	return res, ok
}

func (fpvs *AlertingPolicySpec_FieldSubPathValue) SetTo(target **AlertingPolicy_Spec) {
	if *target == nil {
		*target = new(AlertingPolicy_Spec)
	}
	switch fpvs.Selector() {
	case AlertingPolicySpec_FieldPathSelectorNotification:
		fpvs.subPathValue.(AlertingPolicySpecNotification_FieldPathValue).SetTo(&(*target).Notification)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *AlertingPolicySpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AlertingPolicy_Spec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AlertingPolicySpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AlertingPolicySpec_FieldSubPathValue) CompareWith(source *AlertingPolicy_Spec) (int, bool) {
	switch fpvs.Selector() {
	case AlertingPolicySpec_FieldPathSelectorNotification:
		return fpvs.subPathValue.(AlertingPolicySpecNotification_FieldPathValue).CompareWith(source.GetNotification())
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *AlertingPolicySpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*AlertingPolicy_Spec))
}

// AlertingPolicySpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type AlertingPolicySpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AlertingPolicySpec_FieldPath
	ContainsValue(*AlertingPolicy_Spec) bool
}

// ParseAlertingPolicySpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAlertingPolicySpec_FieldPathArrayItemValue(pathStr, valueStr string) (AlertingPolicySpec_FieldPathArrayItemValue, error) {
	fp, err := ParseAlertingPolicySpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AlertingPolicySpec_FieldPathArrayItemValue), nil
}

func MustParseAlertingPolicySpec_FieldPathArrayItemValue(pathStr, valueStr string) AlertingPolicySpec_FieldPathArrayItemValue {
	fpaiv, err := ParseAlertingPolicySpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AlertingPolicySpec_FieldTerminalPathArrayItemValue struct {
	AlertingPolicySpec_FieldTerminalPath
	value interface{}
}

var _ AlertingPolicySpec_FieldPathArrayItemValue = (*AlertingPolicySpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AlertingPolicy_Spec as interface{}
func (fpaiv *AlertingPolicySpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AlertingPolicySpec_FieldTerminalPathArrayItemValue) GetSingle(source *AlertingPolicy_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AlertingPolicySpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AlertingPolicy_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *AlertingPolicySpec_FieldTerminalPathArrayItemValue) ContainsValue(source *AlertingPolicy_Spec) bool {
	slice := fpaiv.AlertingPolicySpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AlertingPolicySpec_FieldSubPathArrayItemValue struct {
	AlertingPolicySpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AlertingPolicySpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AlertingPolicySpec_FieldSubPathArrayItemValue) AsNotificationPathItemValue() (AlertingPolicySpecNotification_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AlertingPolicySpecNotification_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaivs *AlertingPolicySpec_FieldSubPathArrayItemValue) ContainsValue(source *AlertingPolicy_Spec) bool {
	switch fpaivs.Selector() {
	case AlertingPolicySpec_FieldPathSelectorNotification:
		return fpaivs.subPathItemValue.(AlertingPolicySpecNotification_FieldPathArrayItemValue).ContainsValue(source.GetNotification())
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec: %d", fpaivs.Selector()))
	}
}

// AlertingPolicySpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type AlertingPolicySpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AlertingPolicySpec_FieldPath
}

func ParseAlertingPolicySpec_FieldPathArrayOfValues(pathStr, valuesStr string) (AlertingPolicySpec_FieldPathArrayOfValues, error) {
	fp, err := ParseAlertingPolicySpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AlertingPolicySpec_FieldPathArrayOfValues), nil
}

func MustParseAlertingPolicySpec_FieldPathArrayOfValues(pathStr, valuesStr string) AlertingPolicySpec_FieldPathArrayOfValues {
	fpaov, err := ParseAlertingPolicySpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AlertingPolicySpec_FieldTerminalPathArrayOfValues struct {
	AlertingPolicySpec_FieldTerminalPath
	values interface{}
}

var _ AlertingPolicySpec_FieldPathArrayOfValues = (*AlertingPolicySpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AlertingPolicySpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AlertingPolicySpec_FieldPathSelectorEnabled:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case AlertingPolicySpec_FieldPathSelectorConditionCombiner:
		for _, v := range fpaov.values.([]AlertingPolicy_Spec_ConditionsCombiner) {
			values = append(values, v)
		}
	case AlertingPolicySpec_FieldPathSelectorNotification:
		for _, v := range fpaov.values.([]*AlertingPolicy_Spec_Notification) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AlertingPolicySpec_FieldTerminalPathArrayOfValues) AsEnabledArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *AlertingPolicySpec_FieldTerminalPathArrayOfValues) AsConditionCombinerArrayOfValues() ([]AlertingPolicy_Spec_ConditionsCombiner, bool) {
	res, ok := fpaov.values.([]AlertingPolicy_Spec_ConditionsCombiner)
	return res, ok
}
func (fpaov *AlertingPolicySpec_FieldTerminalPathArrayOfValues) AsNotificationArrayOfValues() ([]*AlertingPolicy_Spec_Notification, bool) {
	res, ok := fpaov.values.([]*AlertingPolicy_Spec_Notification)
	return res, ok
}

type AlertingPolicySpec_FieldSubPathArrayOfValues struct {
	AlertingPolicySpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AlertingPolicySpec_FieldPathArrayOfValues = (*AlertingPolicySpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AlertingPolicySpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AlertingPolicySpec_FieldSubPathArrayOfValues) AsNotificationPathArrayOfValues() (AlertingPolicySpecNotification_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AlertingPolicySpecNotification_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AlertingPolicySpecNotification_FieldPath interface {
	gotenobject.FieldPath
	Selector() AlertingPolicySpecNotification_FieldPathSelector
	Get(source *AlertingPolicy_Spec_Notification) []interface{}
	GetSingle(source *AlertingPolicy_Spec_Notification) (interface{}, bool)
	ClearValue(item *AlertingPolicy_Spec_Notification)

	// Those methods build corresponding AlertingPolicySpecNotification_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AlertingPolicySpecNotification_FieldPathValue
	WithIArrayOfValues(values interface{}) AlertingPolicySpecNotification_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AlertingPolicySpecNotification_FieldPathArrayItemValue
}

type AlertingPolicySpecNotification_FieldPathSelector int32

const (
	AlertingPolicySpecNotification_FieldPathSelectorSlack AlertingPolicySpecNotification_FieldPathSelector = 0
)

func (s AlertingPolicySpecNotification_FieldPathSelector) String() string {
	switch s {
	case AlertingPolicySpecNotification_FieldPathSelectorSlack:
		return "slack"
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", s))
	}
}

func BuildAlertingPolicySpecNotification_FieldPath(fp gotenobject.RawFieldPath) (AlertingPolicySpecNotification_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AlertingPolicy_Spec_Notification")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "slack":
			return &AlertingPolicySpecNotification_FieldTerminalPath{selector: AlertingPolicySpecNotification_FieldPathSelectorSlack}, nil
		}
	} else {
		switch fp[0] {
		case "slack":
			if subpath, err := BuildAlertingPolicySpecNotificationSlack_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AlertingPolicySpecNotification_FieldSubPath{selector: AlertingPolicySpecNotification_FieldPathSelectorSlack, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AlertingPolicy_Spec_Notification", fp)
}

func ParseAlertingPolicySpecNotification_FieldPath(rawField string) (AlertingPolicySpecNotification_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAlertingPolicySpecNotification_FieldPath(fp)
}

func MustParseAlertingPolicySpecNotification_FieldPath(rawField string) AlertingPolicySpecNotification_FieldPath {
	fp, err := ParseAlertingPolicySpecNotification_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AlertingPolicySpecNotification_FieldTerminalPath struct {
	selector AlertingPolicySpecNotification_FieldPathSelector
}

var _ AlertingPolicySpecNotification_FieldPath = (*AlertingPolicySpecNotification_FieldTerminalPath)(nil)

func (fp *AlertingPolicySpecNotification_FieldTerminalPath) Selector() AlertingPolicySpecNotification_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AlertingPolicySpecNotification_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AlertingPolicySpecNotification_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AlertingPolicy_Spec_Notification
func (fp *AlertingPolicySpecNotification_FieldTerminalPath) Get(source *AlertingPolicy_Spec_Notification) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AlertingPolicySpecNotification_FieldPathSelectorSlack:
			if source.Slack != nil {
				values = append(values, source.Slack)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fp.selector))
		}
	}
	return
}

func (fp *AlertingPolicySpecNotification_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AlertingPolicy_Spec_Notification))
}

// GetSingle returns value pointed by specific field of from source AlertingPolicy_Spec_Notification
func (fp *AlertingPolicySpecNotification_FieldTerminalPath) GetSingle(source *AlertingPolicy_Spec_Notification) (interface{}, bool) {
	switch fp.selector {
	case AlertingPolicySpecNotification_FieldPathSelectorSlack:
		res := source.GetSlack()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpecNotification_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AlertingPolicy_Spec_Notification))
}

// GetDefault returns a default value of the field type
func (fp *AlertingPolicySpecNotification_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AlertingPolicySpecNotification_FieldPathSelectorSlack:
		return (*AlertingPolicy_Spec_Notification_Slack)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpecNotification_FieldTerminalPath) ClearValue(item *AlertingPolicy_Spec_Notification) {
	if item != nil {
		switch fp.selector {
		case AlertingPolicySpecNotification_FieldPathSelectorSlack:
			item.Slack = nil
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fp.selector))
		}
	}
}

func (fp *AlertingPolicySpecNotification_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AlertingPolicy_Spec_Notification))
}

// IsLeaf - whether field path is holds simple value
func (fp *AlertingPolicySpecNotification_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *AlertingPolicySpecNotification_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AlertingPolicySpecNotification_FieldTerminalPath) WithIValue(value interface{}) AlertingPolicySpecNotification_FieldPathValue {
	switch fp.selector {
	case AlertingPolicySpecNotification_FieldPathSelectorSlack:
		return &AlertingPolicySpecNotification_FieldTerminalPathValue{AlertingPolicySpecNotification_FieldTerminalPath: *fp, value: value.(*AlertingPolicy_Spec_Notification_Slack)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpecNotification_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AlertingPolicySpecNotification_FieldTerminalPath) WithIArrayOfValues(values interface{}) AlertingPolicySpecNotification_FieldPathArrayOfValues {
	fpaov := &AlertingPolicySpecNotification_FieldTerminalPathArrayOfValues{AlertingPolicySpecNotification_FieldTerminalPath: *fp}
	switch fp.selector {
	case AlertingPolicySpecNotification_FieldPathSelectorSlack:
		return &AlertingPolicySpecNotification_FieldTerminalPathArrayOfValues{AlertingPolicySpecNotification_FieldTerminalPath: *fp, values: values.([]*AlertingPolicy_Spec_Notification_Slack)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fp.selector))
	}
	return fpaov
}

func (fp *AlertingPolicySpecNotification_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AlertingPolicySpecNotification_FieldTerminalPath) WithIArrayItemValue(value interface{}) AlertingPolicySpecNotification_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpecNotification_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type AlertingPolicySpecNotification_FieldSubPath struct {
	selector AlertingPolicySpecNotification_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AlertingPolicySpecNotification_FieldPath = (*AlertingPolicySpecNotification_FieldSubPath)(nil)

func (fps *AlertingPolicySpecNotification_FieldSubPath) Selector() AlertingPolicySpecNotification_FieldPathSelector {
	return fps.selector
}
func (fps *AlertingPolicySpecNotification_FieldSubPath) AsSlackSubPath() (AlertingPolicySpecNotificationSlack_FieldPath, bool) {
	res, ok := fps.subPath.(AlertingPolicySpecNotificationSlack_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AlertingPolicySpecNotification_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AlertingPolicySpecNotification_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source AlertingPolicy_Spec_Notification
func (fps *AlertingPolicySpecNotification_FieldSubPath) Get(source *AlertingPolicy_Spec_Notification) (values []interface{}) {
	switch fps.selector {
	case AlertingPolicySpecNotification_FieldPathSelectorSlack:
		values = append(values, fps.subPath.GetRaw(source.GetSlack())...)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fps.selector))
	}
	return
}

func (fps *AlertingPolicySpecNotification_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*AlertingPolicy_Spec_Notification))
}

// GetSingle returns value of selected field from source AlertingPolicy_Spec_Notification
func (fps *AlertingPolicySpecNotification_FieldSubPath) GetSingle(source *AlertingPolicy_Spec_Notification) (interface{}, bool) {
	switch fps.selector {
	case AlertingPolicySpecNotification_FieldPathSelectorSlack:
		if source.GetSlack() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSlack())
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fps.selector))
	}
}

func (fps *AlertingPolicySpecNotification_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*AlertingPolicy_Spec_Notification))
}

// GetDefault returns a default value of the field type
func (fps *AlertingPolicySpecNotification_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AlertingPolicySpecNotification_FieldSubPath) ClearValue(item *AlertingPolicy_Spec_Notification) {
	if item != nil {
		switch fps.selector {
		case AlertingPolicySpecNotification_FieldPathSelectorSlack:
			fps.subPath.ClearValueRaw(item.Slack)
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fps.selector))
		}
	}
}

func (fps *AlertingPolicySpecNotification_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*AlertingPolicy_Spec_Notification))
}

// IsLeaf - whether field path is holds simple value
func (fps *AlertingPolicySpecNotification_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AlertingPolicySpecNotification_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&AlertingPolicySpecNotification_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *AlertingPolicySpecNotification_FieldSubPath) WithIValue(value interface{}) AlertingPolicySpecNotification_FieldPathValue {
	return &AlertingPolicySpecNotification_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AlertingPolicySpecNotification_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AlertingPolicySpecNotification_FieldSubPath) WithIArrayOfValues(values interface{}) AlertingPolicySpecNotification_FieldPathArrayOfValues {
	return &AlertingPolicySpecNotification_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AlertingPolicySpecNotification_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AlertingPolicySpecNotification_FieldSubPath) WithIArrayItemValue(value interface{}) AlertingPolicySpecNotification_FieldPathArrayItemValue {
	return &AlertingPolicySpecNotification_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AlertingPolicySpecNotification_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AlertingPolicySpecNotification_FieldPathValue allows storing values for Notification fields according to their type
type AlertingPolicySpecNotification_FieldPathValue interface {
	AlertingPolicySpecNotification_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AlertingPolicy_Spec_Notification)
	CompareWith(*AlertingPolicy_Spec_Notification) (cmp int, comparable bool)
}

func ParseAlertingPolicySpecNotification_FieldPathValue(pathStr, valueStr string) (AlertingPolicySpecNotification_FieldPathValue, error) {
	fp, err := ParseAlertingPolicySpecNotification_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Notification field path value from %s: %v", valueStr, err)
	}
	return fpv.(AlertingPolicySpecNotification_FieldPathValue), nil
}

func MustParseAlertingPolicySpecNotification_FieldPathValue(pathStr, valueStr string) AlertingPolicySpecNotification_FieldPathValue {
	fpv, err := ParseAlertingPolicySpecNotification_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AlertingPolicySpecNotification_FieldTerminalPathValue struct {
	AlertingPolicySpecNotification_FieldTerminalPath
	value interface{}
}

var _ AlertingPolicySpecNotification_FieldPathValue = (*AlertingPolicySpecNotification_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Notification' as interface{}
func (fpv *AlertingPolicySpecNotification_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AlertingPolicySpecNotification_FieldTerminalPathValue) AsSlackValue() (*AlertingPolicy_Spec_Notification_Slack, bool) {
	res, ok := fpv.value.(*AlertingPolicy_Spec_Notification_Slack)
	return res, ok
}

// SetTo stores value for selected field for object Notification
func (fpv *AlertingPolicySpecNotification_FieldTerminalPathValue) SetTo(target **AlertingPolicy_Spec_Notification) {
	if *target == nil {
		*target = new(AlertingPolicy_Spec_Notification)
	}
	switch fpv.selector {
	case AlertingPolicySpecNotification_FieldPathSelectorSlack:
		(*target).Slack = fpv.value.(*AlertingPolicy_Spec_Notification_Slack)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fpv.selector))
	}
}

func (fpv *AlertingPolicySpecNotification_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AlertingPolicy_Spec_Notification)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AlertingPolicySpecNotification_FieldTerminalPathValue' with the value under path in 'AlertingPolicy_Spec_Notification'.
func (fpv *AlertingPolicySpecNotification_FieldTerminalPathValue) CompareWith(source *AlertingPolicy_Spec_Notification) (int, bool) {
	switch fpv.selector {
	case AlertingPolicySpecNotification_FieldPathSelectorSlack:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fpv.selector))
	}
}

func (fpv *AlertingPolicySpecNotification_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AlertingPolicy_Spec_Notification))
}

type AlertingPolicySpecNotification_FieldSubPathValue struct {
	AlertingPolicySpecNotification_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AlertingPolicySpecNotification_FieldPathValue = (*AlertingPolicySpecNotification_FieldSubPathValue)(nil)

func (fpvs *AlertingPolicySpecNotification_FieldSubPathValue) AsSlackPathValue() (AlertingPolicySpecNotificationSlack_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AlertingPolicySpecNotificationSlack_FieldPathValue)
	return res, ok
}

func (fpvs *AlertingPolicySpecNotification_FieldSubPathValue) SetTo(target **AlertingPolicy_Spec_Notification) {
	if *target == nil {
		*target = new(AlertingPolicy_Spec_Notification)
	}
	switch fpvs.Selector() {
	case AlertingPolicySpecNotification_FieldPathSelectorSlack:
		fpvs.subPathValue.(AlertingPolicySpecNotificationSlack_FieldPathValue).SetTo(&(*target).Slack)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fpvs.Selector()))
	}
}

func (fpvs *AlertingPolicySpecNotification_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AlertingPolicy_Spec_Notification)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AlertingPolicySpecNotification_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AlertingPolicySpecNotification_FieldSubPathValue) CompareWith(source *AlertingPolicy_Spec_Notification) (int, bool) {
	switch fpvs.Selector() {
	case AlertingPolicySpecNotification_FieldPathSelectorSlack:
		return fpvs.subPathValue.(AlertingPolicySpecNotificationSlack_FieldPathValue).CompareWith(source.GetSlack())
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fpvs.Selector()))
	}
}

func (fpvs *AlertingPolicySpecNotification_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*AlertingPolicy_Spec_Notification))
}

// AlertingPolicySpecNotification_FieldPathArrayItemValue allows storing single item in Path-specific values for Notification according to their type
// Present only for array (repeated) types.
type AlertingPolicySpecNotification_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AlertingPolicySpecNotification_FieldPath
	ContainsValue(*AlertingPolicy_Spec_Notification) bool
}

// ParseAlertingPolicySpecNotification_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAlertingPolicySpecNotification_FieldPathArrayItemValue(pathStr, valueStr string) (AlertingPolicySpecNotification_FieldPathArrayItemValue, error) {
	fp, err := ParseAlertingPolicySpecNotification_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Notification field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AlertingPolicySpecNotification_FieldPathArrayItemValue), nil
}

func MustParseAlertingPolicySpecNotification_FieldPathArrayItemValue(pathStr, valueStr string) AlertingPolicySpecNotification_FieldPathArrayItemValue {
	fpaiv, err := ParseAlertingPolicySpecNotification_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AlertingPolicySpecNotification_FieldTerminalPathArrayItemValue struct {
	AlertingPolicySpecNotification_FieldTerminalPath
	value interface{}
}

var _ AlertingPolicySpecNotification_FieldPathArrayItemValue = (*AlertingPolicySpecNotification_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AlertingPolicy_Spec_Notification as interface{}
func (fpaiv *AlertingPolicySpecNotification_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AlertingPolicySpecNotification_FieldTerminalPathArrayItemValue) GetSingle(source *AlertingPolicy_Spec_Notification) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AlertingPolicySpecNotification_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AlertingPolicy_Spec_Notification))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Notification'
func (fpaiv *AlertingPolicySpecNotification_FieldTerminalPathArrayItemValue) ContainsValue(source *AlertingPolicy_Spec_Notification) bool {
	slice := fpaiv.AlertingPolicySpecNotification_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AlertingPolicySpecNotification_FieldSubPathArrayItemValue struct {
	AlertingPolicySpecNotification_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AlertingPolicySpecNotification_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AlertingPolicySpecNotification_FieldSubPathArrayItemValue) AsSlackPathItemValue() (AlertingPolicySpecNotificationSlack_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AlertingPolicySpecNotificationSlack_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Notification'
func (fpaivs *AlertingPolicySpecNotification_FieldSubPathArrayItemValue) ContainsValue(source *AlertingPolicy_Spec_Notification) bool {
	switch fpaivs.Selector() {
	case AlertingPolicySpecNotification_FieldPathSelectorSlack:
		return fpaivs.subPathItemValue.(AlertingPolicySpecNotificationSlack_FieldPathArrayItemValue).ContainsValue(source.GetSlack())
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification: %d", fpaivs.Selector()))
	}
}

// AlertingPolicySpecNotification_FieldPathArrayOfValues allows storing slice of values for Notification fields according to their type
type AlertingPolicySpecNotification_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AlertingPolicySpecNotification_FieldPath
}

func ParseAlertingPolicySpecNotification_FieldPathArrayOfValues(pathStr, valuesStr string) (AlertingPolicySpecNotification_FieldPathArrayOfValues, error) {
	fp, err := ParseAlertingPolicySpecNotification_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Notification field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AlertingPolicySpecNotification_FieldPathArrayOfValues), nil
}

func MustParseAlertingPolicySpecNotification_FieldPathArrayOfValues(pathStr, valuesStr string) AlertingPolicySpecNotification_FieldPathArrayOfValues {
	fpaov, err := ParseAlertingPolicySpecNotification_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AlertingPolicySpecNotification_FieldTerminalPathArrayOfValues struct {
	AlertingPolicySpecNotification_FieldTerminalPath
	values interface{}
}

var _ AlertingPolicySpecNotification_FieldPathArrayOfValues = (*AlertingPolicySpecNotification_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AlertingPolicySpecNotification_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AlertingPolicySpecNotification_FieldPathSelectorSlack:
		for _, v := range fpaov.values.([]*AlertingPolicy_Spec_Notification_Slack) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AlertingPolicySpecNotification_FieldTerminalPathArrayOfValues) AsSlackArrayOfValues() ([]*AlertingPolicy_Spec_Notification_Slack, bool) {
	res, ok := fpaov.values.([]*AlertingPolicy_Spec_Notification_Slack)
	return res, ok
}

type AlertingPolicySpecNotification_FieldSubPathArrayOfValues struct {
	AlertingPolicySpecNotification_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AlertingPolicySpecNotification_FieldPathArrayOfValues = (*AlertingPolicySpecNotification_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AlertingPolicySpecNotification_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AlertingPolicySpecNotification_FieldSubPathArrayOfValues) AsSlackPathArrayOfValues() (AlertingPolicySpecNotificationSlack_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AlertingPolicySpecNotificationSlack_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AlertingPolicySpecNotificationSlack_FieldPath interface {
	gotenobject.FieldPath
	Selector() AlertingPolicySpecNotificationSlack_FieldPathSelector
	Get(source *AlertingPolicy_Spec_Notification_Slack) []interface{}
	GetSingle(source *AlertingPolicy_Spec_Notification_Slack) (interface{}, bool)
	ClearValue(item *AlertingPolicy_Spec_Notification_Slack)

	// Those methods build corresponding AlertingPolicySpecNotificationSlack_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AlertingPolicySpecNotificationSlack_FieldPathValue
	WithIArrayOfValues(values interface{}) AlertingPolicySpecNotificationSlack_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AlertingPolicySpecNotificationSlack_FieldPathArrayItemValue
}

type AlertingPolicySpecNotificationSlack_FieldPathSelector int32

const (
	AlertingPolicySpecNotificationSlack_FieldPathSelectorApp             AlertingPolicySpecNotificationSlack_FieldPathSelector = 0
	AlertingPolicySpecNotificationSlack_FieldPathSelectorIncomingWebhook AlertingPolicySpecNotificationSlack_FieldPathSelector = 1
)

func (s AlertingPolicySpecNotificationSlack_FieldPathSelector) String() string {
	switch s {
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
		return "app"
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorIncomingWebhook:
		return "incoming_webhook"
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", s))
	}
}

func BuildAlertingPolicySpecNotificationSlack_FieldPath(fp gotenobject.RawFieldPath) (AlertingPolicySpecNotificationSlack_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AlertingPolicy_Spec_Notification_Slack")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "app":
			return &AlertingPolicySpecNotificationSlack_FieldTerminalPath{selector: AlertingPolicySpecNotificationSlack_FieldPathSelectorApp}, nil
		case "incoming_webhook", "incomingWebhook", "incoming-webhook":
			return &AlertingPolicySpecNotificationSlack_FieldTerminalPath{selector: AlertingPolicySpecNotificationSlack_FieldPathSelectorIncomingWebhook}, nil
		}
	} else {
		switch fp[0] {
		case "app":
			if subpath, err := BuildAlertingPolicySpecNotificationSlackApp_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AlertingPolicySpecNotificationSlack_FieldSubPath{selector: AlertingPolicySpecNotificationSlack_FieldPathSelectorApp, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AlertingPolicy_Spec_Notification_Slack", fp)
}

func ParseAlertingPolicySpecNotificationSlack_FieldPath(rawField string) (AlertingPolicySpecNotificationSlack_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAlertingPolicySpecNotificationSlack_FieldPath(fp)
}

func MustParseAlertingPolicySpecNotificationSlack_FieldPath(rawField string) AlertingPolicySpecNotificationSlack_FieldPath {
	fp, err := ParseAlertingPolicySpecNotificationSlack_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AlertingPolicySpecNotificationSlack_FieldTerminalPath struct {
	selector AlertingPolicySpecNotificationSlack_FieldPathSelector
}

var _ AlertingPolicySpecNotificationSlack_FieldPath = (*AlertingPolicySpecNotificationSlack_FieldTerminalPath)(nil)

func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) Selector() AlertingPolicySpecNotificationSlack_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AlertingPolicy_Spec_Notification_Slack
func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) Get(source *AlertingPolicy_Spec_Notification_Slack) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
			if source.App != nil {
				values = append(values, source.App)
			}
		case AlertingPolicySpecNotificationSlack_FieldPathSelectorIncomingWebhook:
			values = append(values, source.IncomingWebhook)
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fp.selector))
		}
	}
	return
}

func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AlertingPolicy_Spec_Notification_Slack))
}

// GetSingle returns value pointed by specific field of from source AlertingPolicy_Spec_Notification_Slack
func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) GetSingle(source *AlertingPolicy_Spec_Notification_Slack) (interface{}, bool) {
	switch fp.selector {
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
		res := source.GetApp()
		return res, res != nil
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorIncomingWebhook:
		return source.GetIncomingWebhook(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AlertingPolicy_Spec_Notification_Slack))
}

// GetDefault returns a default value of the field type
func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
		return (*AlertingPolicy_Spec_Notification_Slack_App)(nil)
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorIncomingWebhook:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) ClearValue(item *AlertingPolicy_Spec_Notification_Slack) {
	if item != nil {
		switch fp.selector {
		case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
			item.App = nil
		case AlertingPolicySpecNotificationSlack_FieldPathSelectorIncomingWebhook:
			item.IncomingWebhook = ""
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fp.selector))
		}
	}
}

func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AlertingPolicy_Spec_Notification_Slack))
}

// IsLeaf - whether field path is holds simple value
func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AlertingPolicySpecNotificationSlack_FieldPathSelectorIncomingWebhook
}

func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) WithIValue(value interface{}) AlertingPolicySpecNotificationSlack_FieldPathValue {
	switch fp.selector {
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
		return &AlertingPolicySpecNotificationSlack_FieldTerminalPathValue{AlertingPolicySpecNotificationSlack_FieldTerminalPath: *fp, value: value.(*AlertingPolicy_Spec_Notification_Slack_App)}
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorIncomingWebhook:
		return &AlertingPolicySpecNotificationSlack_FieldTerminalPathValue{AlertingPolicySpecNotificationSlack_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) WithIArrayOfValues(values interface{}) AlertingPolicySpecNotificationSlack_FieldPathArrayOfValues {
	fpaov := &AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayOfValues{AlertingPolicySpecNotificationSlack_FieldTerminalPath: *fp}
	switch fp.selector {
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
		return &AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayOfValues{AlertingPolicySpecNotificationSlack_FieldTerminalPath: *fp, values: values.([]*AlertingPolicy_Spec_Notification_Slack_App)}
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorIncomingWebhook:
		return &AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayOfValues{AlertingPolicySpecNotificationSlack_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fp.selector))
	}
	return fpaov
}

func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) WithIArrayItemValue(value interface{}) AlertingPolicySpecNotificationSlack_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpecNotificationSlack_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type AlertingPolicySpecNotificationSlack_FieldSubPath struct {
	selector AlertingPolicySpecNotificationSlack_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AlertingPolicySpecNotificationSlack_FieldPath = (*AlertingPolicySpecNotificationSlack_FieldSubPath)(nil)

func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) Selector() AlertingPolicySpecNotificationSlack_FieldPathSelector {
	return fps.selector
}
func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) AsAppSubPath() (AlertingPolicySpecNotificationSlackApp_FieldPath, bool) {
	res, ok := fps.subPath.(AlertingPolicySpecNotificationSlackApp_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source AlertingPolicy_Spec_Notification_Slack
func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) Get(source *AlertingPolicy_Spec_Notification_Slack) (values []interface{}) {
	switch fps.selector {
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
		values = append(values, fps.subPath.GetRaw(source.GetApp())...)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fps.selector))
	}
	return
}

func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*AlertingPolicy_Spec_Notification_Slack))
}

// GetSingle returns value of selected field from source AlertingPolicy_Spec_Notification_Slack
func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) GetSingle(source *AlertingPolicy_Spec_Notification_Slack) (interface{}, bool) {
	switch fps.selector {
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
		if source.GetApp() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetApp())
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fps.selector))
	}
}

func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*AlertingPolicy_Spec_Notification_Slack))
}

// GetDefault returns a default value of the field type
func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) ClearValue(item *AlertingPolicy_Spec_Notification_Slack) {
	if item != nil {
		switch fps.selector {
		case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
			fps.subPath.ClearValueRaw(item.App)
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fps.selector))
		}
	}
}

func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*AlertingPolicy_Spec_Notification_Slack))
}

// IsLeaf - whether field path is holds simple value
func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&AlertingPolicySpecNotificationSlack_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) WithIValue(value interface{}) AlertingPolicySpecNotificationSlack_FieldPathValue {
	return &AlertingPolicySpecNotificationSlack_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) WithIArrayOfValues(values interface{}) AlertingPolicySpecNotificationSlack_FieldPathArrayOfValues {
	return &AlertingPolicySpecNotificationSlack_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) WithIArrayItemValue(value interface{}) AlertingPolicySpecNotificationSlack_FieldPathArrayItemValue {
	return &AlertingPolicySpecNotificationSlack_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AlertingPolicySpecNotificationSlack_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AlertingPolicySpecNotificationSlack_FieldPathValue allows storing values for Slack fields according to their type
type AlertingPolicySpecNotificationSlack_FieldPathValue interface {
	AlertingPolicySpecNotificationSlack_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AlertingPolicy_Spec_Notification_Slack)
	CompareWith(*AlertingPolicy_Spec_Notification_Slack) (cmp int, comparable bool)
}

func ParseAlertingPolicySpecNotificationSlack_FieldPathValue(pathStr, valueStr string) (AlertingPolicySpecNotificationSlack_FieldPathValue, error) {
	fp, err := ParseAlertingPolicySpecNotificationSlack_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Slack field path value from %s: %v", valueStr, err)
	}
	return fpv.(AlertingPolicySpecNotificationSlack_FieldPathValue), nil
}

func MustParseAlertingPolicySpecNotificationSlack_FieldPathValue(pathStr, valueStr string) AlertingPolicySpecNotificationSlack_FieldPathValue {
	fpv, err := ParseAlertingPolicySpecNotificationSlack_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AlertingPolicySpecNotificationSlack_FieldTerminalPathValue struct {
	AlertingPolicySpecNotificationSlack_FieldTerminalPath
	value interface{}
}

var _ AlertingPolicySpecNotificationSlack_FieldPathValue = (*AlertingPolicySpecNotificationSlack_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Slack' as interface{}
func (fpv *AlertingPolicySpecNotificationSlack_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AlertingPolicySpecNotificationSlack_FieldTerminalPathValue) AsAppValue() (*AlertingPolicy_Spec_Notification_Slack_App, bool) {
	res, ok := fpv.value.(*AlertingPolicy_Spec_Notification_Slack_App)
	return res, ok
}
func (fpv *AlertingPolicySpecNotificationSlack_FieldTerminalPathValue) AsIncomingWebhookValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Slack
func (fpv *AlertingPolicySpecNotificationSlack_FieldTerminalPathValue) SetTo(target **AlertingPolicy_Spec_Notification_Slack) {
	if *target == nil {
		*target = new(AlertingPolicy_Spec_Notification_Slack)
	}
	switch fpv.selector {
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
		(*target).App = fpv.value.(*AlertingPolicy_Spec_Notification_Slack_App)
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorIncomingWebhook:
		(*target).IncomingWebhook = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fpv.selector))
	}
}

func (fpv *AlertingPolicySpecNotificationSlack_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AlertingPolicy_Spec_Notification_Slack)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AlertingPolicySpecNotificationSlack_FieldTerminalPathValue' with the value under path in 'AlertingPolicy_Spec_Notification_Slack'.
func (fpv *AlertingPolicySpecNotificationSlack_FieldTerminalPathValue) CompareWith(source *AlertingPolicy_Spec_Notification_Slack) (int, bool) {
	switch fpv.selector {
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
		return 0, false
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorIncomingWebhook:
		leftValue := fpv.value.(string)
		rightValue := source.GetIncomingWebhook()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fpv.selector))
	}
}

func (fpv *AlertingPolicySpecNotificationSlack_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AlertingPolicy_Spec_Notification_Slack))
}

type AlertingPolicySpecNotificationSlack_FieldSubPathValue struct {
	AlertingPolicySpecNotificationSlack_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AlertingPolicySpecNotificationSlack_FieldPathValue = (*AlertingPolicySpecNotificationSlack_FieldSubPathValue)(nil)

func (fpvs *AlertingPolicySpecNotificationSlack_FieldSubPathValue) AsAppPathValue() (AlertingPolicySpecNotificationSlackApp_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AlertingPolicySpecNotificationSlackApp_FieldPathValue)
	return res, ok
}

func (fpvs *AlertingPolicySpecNotificationSlack_FieldSubPathValue) SetTo(target **AlertingPolicy_Spec_Notification_Slack) {
	if *target == nil {
		*target = new(AlertingPolicy_Spec_Notification_Slack)
	}
	switch fpvs.Selector() {
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
		fpvs.subPathValue.(AlertingPolicySpecNotificationSlackApp_FieldPathValue).SetTo(&(*target).App)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fpvs.Selector()))
	}
}

func (fpvs *AlertingPolicySpecNotificationSlack_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AlertingPolicy_Spec_Notification_Slack)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AlertingPolicySpecNotificationSlack_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AlertingPolicySpecNotificationSlack_FieldSubPathValue) CompareWith(source *AlertingPolicy_Spec_Notification_Slack) (int, bool) {
	switch fpvs.Selector() {
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
		return fpvs.subPathValue.(AlertingPolicySpecNotificationSlackApp_FieldPathValue).CompareWith(source.GetApp())
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fpvs.Selector()))
	}
}

func (fpvs *AlertingPolicySpecNotificationSlack_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*AlertingPolicy_Spec_Notification_Slack))
}

// AlertingPolicySpecNotificationSlack_FieldPathArrayItemValue allows storing single item in Path-specific values for Slack according to their type
// Present only for array (repeated) types.
type AlertingPolicySpecNotificationSlack_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AlertingPolicySpecNotificationSlack_FieldPath
	ContainsValue(*AlertingPolicy_Spec_Notification_Slack) bool
}

// ParseAlertingPolicySpecNotificationSlack_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAlertingPolicySpecNotificationSlack_FieldPathArrayItemValue(pathStr, valueStr string) (AlertingPolicySpecNotificationSlack_FieldPathArrayItemValue, error) {
	fp, err := ParseAlertingPolicySpecNotificationSlack_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Slack field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AlertingPolicySpecNotificationSlack_FieldPathArrayItemValue), nil
}

func MustParseAlertingPolicySpecNotificationSlack_FieldPathArrayItemValue(pathStr, valueStr string) AlertingPolicySpecNotificationSlack_FieldPathArrayItemValue {
	fpaiv, err := ParseAlertingPolicySpecNotificationSlack_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayItemValue struct {
	AlertingPolicySpecNotificationSlack_FieldTerminalPath
	value interface{}
}

var _ AlertingPolicySpecNotificationSlack_FieldPathArrayItemValue = (*AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AlertingPolicy_Spec_Notification_Slack as interface{}
func (fpaiv *AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayItemValue) GetSingle(source *AlertingPolicy_Spec_Notification_Slack) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AlertingPolicy_Spec_Notification_Slack))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Slack'
func (fpaiv *AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayItemValue) ContainsValue(source *AlertingPolicy_Spec_Notification_Slack) bool {
	slice := fpaiv.AlertingPolicySpecNotificationSlack_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AlertingPolicySpecNotificationSlack_FieldSubPathArrayItemValue struct {
	AlertingPolicySpecNotificationSlack_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AlertingPolicySpecNotificationSlack_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AlertingPolicySpecNotificationSlack_FieldSubPathArrayItemValue) AsAppPathItemValue() (AlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Slack'
func (fpaivs *AlertingPolicySpecNotificationSlack_FieldSubPathArrayItemValue) ContainsValue(source *AlertingPolicy_Spec_Notification_Slack) bool {
	switch fpaivs.Selector() {
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
		return fpaivs.subPathItemValue.(AlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue).ContainsValue(source.GetApp())
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack: %d", fpaivs.Selector()))
	}
}

// AlertingPolicySpecNotificationSlack_FieldPathArrayOfValues allows storing slice of values for Slack fields according to their type
type AlertingPolicySpecNotificationSlack_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AlertingPolicySpecNotificationSlack_FieldPath
}

func ParseAlertingPolicySpecNotificationSlack_FieldPathArrayOfValues(pathStr, valuesStr string) (AlertingPolicySpecNotificationSlack_FieldPathArrayOfValues, error) {
	fp, err := ParseAlertingPolicySpecNotificationSlack_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Slack field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AlertingPolicySpecNotificationSlack_FieldPathArrayOfValues), nil
}

func MustParseAlertingPolicySpecNotificationSlack_FieldPathArrayOfValues(pathStr, valuesStr string) AlertingPolicySpecNotificationSlack_FieldPathArrayOfValues {
	fpaov, err := ParseAlertingPolicySpecNotificationSlack_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayOfValues struct {
	AlertingPolicySpecNotificationSlack_FieldTerminalPath
	values interface{}
}

var _ AlertingPolicySpecNotificationSlack_FieldPathArrayOfValues = (*AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorApp:
		for _, v := range fpaov.values.([]*AlertingPolicy_Spec_Notification_Slack_App) {
			values = append(values, v)
		}
	case AlertingPolicySpecNotificationSlack_FieldPathSelectorIncomingWebhook:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayOfValues) AsAppArrayOfValues() ([]*AlertingPolicy_Spec_Notification_Slack_App, bool) {
	res, ok := fpaov.values.([]*AlertingPolicy_Spec_Notification_Slack_App)
	return res, ok
}
func (fpaov *AlertingPolicySpecNotificationSlack_FieldTerminalPathArrayOfValues) AsIncomingWebhookArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type AlertingPolicySpecNotificationSlack_FieldSubPathArrayOfValues struct {
	AlertingPolicySpecNotificationSlack_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AlertingPolicySpecNotificationSlack_FieldPathArrayOfValues = (*AlertingPolicySpecNotificationSlack_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AlertingPolicySpecNotificationSlack_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AlertingPolicySpecNotificationSlack_FieldSubPathArrayOfValues) AsAppPathArrayOfValues() (AlertingPolicySpecNotificationSlackApp_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AlertingPolicySpecNotificationSlackApp_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AlertingPolicySpecNotificationSlackApp_FieldPath interface {
	gotenobject.FieldPath
	Selector() AlertingPolicySpecNotificationSlackApp_FieldPathSelector
	Get(source *AlertingPolicy_Spec_Notification_Slack_App) []interface{}
	GetSingle(source *AlertingPolicy_Spec_Notification_Slack_App) (interface{}, bool)
	ClearValue(item *AlertingPolicy_Spec_Notification_Slack_App)

	// Those methods build corresponding AlertingPolicySpecNotificationSlackApp_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AlertingPolicySpecNotificationSlackApp_FieldPathValue
	WithIArrayOfValues(values interface{}) AlertingPolicySpecNotificationSlackApp_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue
}

type AlertingPolicySpecNotificationSlackApp_FieldPathSelector int32

const (
	AlertingPolicySpecNotificationSlackApp_FieldPathSelectorAuthToken AlertingPolicySpecNotificationSlackApp_FieldPathSelector = 0
	AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel   AlertingPolicySpecNotificationSlackApp_FieldPathSelector = 1
)

func (s AlertingPolicySpecNotificationSlackApp_FieldPathSelector) String() string {
	switch s {
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorAuthToken:
		return "auth_token"
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel:
		return "channel"
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack_App: %d", s))
	}
}

func BuildAlertingPolicySpecNotificationSlackApp_FieldPath(fp gotenobject.RawFieldPath) (AlertingPolicySpecNotificationSlackApp_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AlertingPolicy_Spec_Notification_Slack_App")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "auth_token", "authToken", "auth-token":
			return &AlertingPolicySpecNotificationSlackApp_FieldTerminalPath{selector: AlertingPolicySpecNotificationSlackApp_FieldPathSelectorAuthToken}, nil
		case "channel":
			return &AlertingPolicySpecNotificationSlackApp_FieldTerminalPath{selector: AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AlertingPolicy_Spec_Notification_Slack_App", fp)
}

func ParseAlertingPolicySpecNotificationSlackApp_FieldPath(rawField string) (AlertingPolicySpecNotificationSlackApp_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAlertingPolicySpecNotificationSlackApp_FieldPath(fp)
}

func MustParseAlertingPolicySpecNotificationSlackApp_FieldPath(rawField string) AlertingPolicySpecNotificationSlackApp_FieldPath {
	fp, err := ParseAlertingPolicySpecNotificationSlackApp_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AlertingPolicySpecNotificationSlackApp_FieldTerminalPath struct {
	selector AlertingPolicySpecNotificationSlackApp_FieldPathSelector
}

var _ AlertingPolicySpecNotificationSlackApp_FieldPath = (*AlertingPolicySpecNotificationSlackApp_FieldTerminalPath)(nil)

func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) Selector() AlertingPolicySpecNotificationSlackApp_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AlertingPolicy_Spec_Notification_Slack_App
func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) Get(source *AlertingPolicy_Spec_Notification_Slack_App) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorAuthToken:
			values = append(values, source.AuthToken)
		case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel:
			for _, value := range source.GetChannel() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack_App: %d", fp.selector))
		}
	}
	return
}

func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AlertingPolicy_Spec_Notification_Slack_App))
}

// GetSingle returns value pointed by specific field of from source AlertingPolicy_Spec_Notification_Slack_App
func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) GetSingle(source *AlertingPolicy_Spec_Notification_Slack_App) (interface{}, bool) {
	switch fp.selector {
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorAuthToken:
		return source.GetAuthToken(), source != nil
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel:
		res := source.GetChannel()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack_App: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AlertingPolicy_Spec_Notification_Slack_App))
}

// GetDefault returns a default value of the field type
func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorAuthToken:
		return ""
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack_App: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) ClearValue(item *AlertingPolicy_Spec_Notification_Slack_App) {
	if item != nil {
		switch fp.selector {
		case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorAuthToken:
			item.AuthToken = ""
		case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel:
			item.Channel = nil
		default:
			panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack_App: %d", fp.selector))
		}
	}
}

func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AlertingPolicy_Spec_Notification_Slack_App))
}

// IsLeaf - whether field path is holds simple value
func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AlertingPolicySpecNotificationSlackApp_FieldPathSelectorAuthToken ||
		fp.selector == AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel
}

func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) WithIValue(value interface{}) AlertingPolicySpecNotificationSlackApp_FieldPathValue {
	switch fp.selector {
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorAuthToken:
		return &AlertingPolicySpecNotificationSlackApp_FieldTerminalPathValue{AlertingPolicySpecNotificationSlackApp_FieldTerminalPath: *fp, value: value.(string)}
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel:
		return &AlertingPolicySpecNotificationSlackApp_FieldTerminalPathValue{AlertingPolicySpecNotificationSlackApp_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack_App: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) WithIArrayOfValues(values interface{}) AlertingPolicySpecNotificationSlackApp_FieldPathArrayOfValues {
	fpaov := &AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayOfValues{AlertingPolicySpecNotificationSlackApp_FieldTerminalPath: *fp}
	switch fp.selector {
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorAuthToken:
		return &AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayOfValues{AlertingPolicySpecNotificationSlackApp_FieldTerminalPath: *fp, values: values.([]string)}
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel:
		return &AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayOfValues{AlertingPolicySpecNotificationSlackApp_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack_App: %d", fp.selector))
	}
	return fpaov
}

func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) WithIArrayItemValue(value interface{}) AlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue {
	switch fp.selector {
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel:
		return &AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayItemValue{AlertingPolicySpecNotificationSlackApp_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack_App: %d", fp.selector))
	}
}

func (fp *AlertingPolicySpecNotificationSlackApp_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AlertingPolicySpecNotificationSlackApp_FieldPathValue allows storing values for App fields according to their type
type AlertingPolicySpecNotificationSlackApp_FieldPathValue interface {
	AlertingPolicySpecNotificationSlackApp_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AlertingPolicy_Spec_Notification_Slack_App)
	CompareWith(*AlertingPolicy_Spec_Notification_Slack_App) (cmp int, comparable bool)
}

func ParseAlertingPolicySpecNotificationSlackApp_FieldPathValue(pathStr, valueStr string) (AlertingPolicySpecNotificationSlackApp_FieldPathValue, error) {
	fp, err := ParseAlertingPolicySpecNotificationSlackApp_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing App field path value from %s: %v", valueStr, err)
	}
	return fpv.(AlertingPolicySpecNotificationSlackApp_FieldPathValue), nil
}

func MustParseAlertingPolicySpecNotificationSlackApp_FieldPathValue(pathStr, valueStr string) AlertingPolicySpecNotificationSlackApp_FieldPathValue {
	fpv, err := ParseAlertingPolicySpecNotificationSlackApp_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AlertingPolicySpecNotificationSlackApp_FieldTerminalPathValue struct {
	AlertingPolicySpecNotificationSlackApp_FieldTerminalPath
	value interface{}
}

var _ AlertingPolicySpecNotificationSlackApp_FieldPathValue = (*AlertingPolicySpecNotificationSlackApp_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'App' as interface{}
func (fpv *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathValue) AsAuthTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathValue) AsChannelValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object App
func (fpv *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathValue) SetTo(target **AlertingPolicy_Spec_Notification_Slack_App) {
	if *target == nil {
		*target = new(AlertingPolicy_Spec_Notification_Slack_App)
	}
	switch fpv.selector {
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorAuthToken:
		(*target).AuthToken = fpv.value.(string)
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel:
		(*target).Channel = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack_App: %d", fpv.selector))
	}
}

func (fpv *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AlertingPolicy_Spec_Notification_Slack_App)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AlertingPolicySpecNotificationSlackApp_FieldTerminalPathValue' with the value under path in 'AlertingPolicy_Spec_Notification_Slack_App'.
func (fpv *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathValue) CompareWith(source *AlertingPolicy_Spec_Notification_Slack_App) (int, bool) {
	switch fpv.selector {
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorAuthToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetAuthToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for AlertingPolicy_Spec_Notification_Slack_App: %d", fpv.selector))
	}
}

func (fpv *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AlertingPolicy_Spec_Notification_Slack_App))
}

// AlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue allows storing single item in Path-specific values for App according to their type
// Present only for array (repeated) types.
type AlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AlertingPolicySpecNotificationSlackApp_FieldPath
	ContainsValue(*AlertingPolicy_Spec_Notification_Slack_App) bool
}

// ParseAlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue(pathStr, valueStr string) (AlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue, error) {
	fp, err := ParseAlertingPolicySpecNotificationSlackApp_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing App field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue), nil
}

func MustParseAlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue(pathStr, valueStr string) AlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue {
	fpaiv, err := ParseAlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayItemValue struct {
	AlertingPolicySpecNotificationSlackApp_FieldTerminalPath
	value interface{}
}

var _ AlertingPolicySpecNotificationSlackApp_FieldPathArrayItemValue = (*AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AlertingPolicy_Spec_Notification_Slack_App as interface{}
func (fpaiv *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayItemValue) AsChannelItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayItemValue) GetSingle(source *AlertingPolicy_Spec_Notification_Slack_App) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AlertingPolicy_Spec_Notification_Slack_App))
}

// Contains returns a boolean indicating if value that is being held is present in given 'App'
func (fpaiv *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayItemValue) ContainsValue(source *AlertingPolicy_Spec_Notification_Slack_App) bool {
	slice := fpaiv.AlertingPolicySpecNotificationSlackApp_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AlertingPolicySpecNotificationSlackApp_FieldPathArrayOfValues allows storing slice of values for App fields according to their type
type AlertingPolicySpecNotificationSlackApp_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AlertingPolicySpecNotificationSlackApp_FieldPath
}

func ParseAlertingPolicySpecNotificationSlackApp_FieldPathArrayOfValues(pathStr, valuesStr string) (AlertingPolicySpecNotificationSlackApp_FieldPathArrayOfValues, error) {
	fp, err := ParseAlertingPolicySpecNotificationSlackApp_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing App field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AlertingPolicySpecNotificationSlackApp_FieldPathArrayOfValues), nil
}

func MustParseAlertingPolicySpecNotificationSlackApp_FieldPathArrayOfValues(pathStr, valuesStr string) AlertingPolicySpecNotificationSlackApp_FieldPathArrayOfValues {
	fpaov, err := ParseAlertingPolicySpecNotificationSlackApp_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayOfValues struct {
	AlertingPolicySpecNotificationSlackApp_FieldTerminalPath
	values interface{}
}

var _ AlertingPolicySpecNotificationSlackApp_FieldPathArrayOfValues = (*AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorAuthToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AlertingPolicySpecNotificationSlackApp_FieldPathSelectorChannel:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayOfValues) AsAuthTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AlertingPolicySpecNotificationSlackApp_FieldTerminalPathArrayOfValues) AsChannelArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
