// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v3/alerting_policy.proto
// DO NOT EDIT!!!

package alerting_policy

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &project.Project{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AlertingPolicy_Spec_ConditionsCombiner int32

const (
	AlertingPolicy_Spec_OR  AlertingPolicy_Spec_ConditionsCombiner = 0
	AlertingPolicy_Spec_AND AlertingPolicy_Spec_ConditionsCombiner = 1
)

var (
	AlertingPolicy_Spec_ConditionsCombiner_name = map[int32]string{
		0: "OR",
		1: "AND",
	}

	AlertingPolicy_Spec_ConditionsCombiner_value = map[string]int32{
		"OR":  0,
		"AND": 1,
	}
)

func (x AlertingPolicy_Spec_ConditionsCombiner) Enum() *AlertingPolicy_Spec_ConditionsCombiner {
	p := new(AlertingPolicy_Spec_ConditionsCombiner)
	*p = x
	return p
}

func (x AlertingPolicy_Spec_ConditionsCombiner) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (AlertingPolicy_Spec_ConditionsCombiner) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v3_alerting_policy_proto_enumTypes[0].Descriptor()
}

func (AlertingPolicy_Spec_ConditionsCombiner) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v3_alerting_policy_proto_enumTypes[0]
}

func (x AlertingPolicy_Spec_ConditionsCombiner) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use AlertingPolicy_Spec_ConditionsCombiner.ProtoReflect.Descriptor instead.
func (AlertingPolicy_Spec_ConditionsCombiner) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alerting_policy_proto_rawDescGZIP(), []int{0, 1, 0}
}

// AlertingPolicy Resource
type AlertingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of AlertingPolicy
	Name     *Name          `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Metadata *ntt_meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// display name
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// Long description
	Description   string                        `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	Documentation *AlertingPolicy_Documentation `protobuf:"bytes,5,opt,name=documentation,proto3" json:"documentation,omitempty" firestore:"documentation"`
	// Spec
	Spec  *AlertingPolicy_Spec  `protobuf:"bytes,6,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	State *AlertingPolicy_State `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty" firestore:"state"`
}

func (m *AlertingPolicy) Reset() {
	*m = AlertingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingPolicy) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingPolicy) ProtoMessage() {}

func (m *AlertingPolicy) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingPolicy) GotenMessage() {}

// Deprecated, Use AlertingPolicy.ProtoReflect.Descriptor instead.
func (*AlertingPolicy) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alerting_policy_proto_rawDescGZIP(), []int{0}
}

func (m *AlertingPolicy) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingPolicy) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingPolicy) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingPolicy) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingPolicy) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *AlertingPolicy) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *AlertingPolicy) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *AlertingPolicy) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AlertingPolicy) GetDocumentation() *AlertingPolicy_Documentation {
	if m != nil {
		return m.Documentation
	}
	return nil
}

func (m *AlertingPolicy) GetSpec() *AlertingPolicy_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *AlertingPolicy) GetState() *AlertingPolicy_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *AlertingPolicy) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "AlertingPolicy"))
	}
	m.Name = fv
}

func (m *AlertingPolicy) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "AlertingPolicy"))
	}
	m.Metadata = fv
}

func (m *AlertingPolicy) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "AlertingPolicy"))
	}
	m.DisplayName = fv
}

func (m *AlertingPolicy) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "AlertingPolicy"))
	}
	m.Description = fv
}

func (m *AlertingPolicy) SetDocumentation(fv *AlertingPolicy_Documentation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Documentation", "AlertingPolicy"))
	}
	m.Documentation = fv
}

func (m *AlertingPolicy) SetSpec(fv *AlertingPolicy_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "AlertingPolicy"))
	}
	m.Spec = fv
}

func (m *AlertingPolicy) SetState(fv *AlertingPolicy_State) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "AlertingPolicy"))
	}
	m.State = fv
}

// Documentation
type AlertingPolicy_Documentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Documentation content
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty" firestore:"content"`
	// documentation mime type. Only `"text/markdown"` is supported.
	MimeType string `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty" firestore:"mimeType"`
}

func (m *AlertingPolicy_Documentation) Reset() {
	*m = AlertingPolicy_Documentation{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingPolicy_Documentation) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingPolicy_Documentation) ProtoMessage() {}

func (m *AlertingPolicy_Documentation) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingPolicy_Documentation) GotenMessage() {}

// Deprecated, Use AlertingPolicy_Documentation.ProtoReflect.Descriptor instead.
func (*AlertingPolicy_Documentation) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alerting_policy_proto_rawDescGZIP(), []int{0, 0}
}

func (m *AlertingPolicy_Documentation) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingPolicy_Documentation) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingPolicy_Documentation) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingPolicy_Documentation) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingPolicy_Documentation) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *AlertingPolicy_Documentation) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *AlertingPolicy_Documentation) SetContent(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Content", "AlertingPolicy_Documentation"))
	}
	m.Content = fv
}

func (m *AlertingPolicy_Documentation) SetMimeType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MimeType", "AlertingPolicy_Documentation"))
	}
	m.MimeType = fv
}

type AlertingPolicy_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Whether policy is enabled and will evaluate any conditions
	// Note: If any existing fired alerts are present,
	// they will not be resolved automatically
	// TODO: consider if they should?
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" firestore:"enabled"`
	// Condition Combiner when deciding if ANY (OR) or ALL (AND) conditions for
	// given subset of resource labels must fire in order to trigger an alert
	// TODO: Add support to AND
	ConditionCombiner AlertingPolicy_Spec_ConditionsCombiner `protobuf:"varint,2,opt,name=condition_combiner,json=conditionCombiner,proto3,enum=ntt.monitoring.v3.AlertingPolicy_Spec_ConditionsCombiner" json:"condition_combiner,omitempty" firestore:"conditionCombiner"`
	// Notification specification
	Notification *AlertingPolicy_Spec_Notification `protobuf:"bytes,4,opt,name=notification,proto3" json:"notification,omitempty" firestore:"notification"`
}

func (m *AlertingPolicy_Spec) Reset() {
	*m = AlertingPolicy_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingPolicy_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingPolicy_Spec) ProtoMessage() {}

func (m *AlertingPolicy_Spec) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingPolicy_Spec) GotenMessage() {}

// Deprecated, Use AlertingPolicy_Spec.ProtoReflect.Descriptor instead.
func (*AlertingPolicy_Spec) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alerting_policy_proto_rawDescGZIP(), []int{0, 1}
}

func (m *AlertingPolicy_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingPolicy_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingPolicy_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingPolicy_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingPolicy_Spec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *AlertingPolicy_Spec) GetConditionCombiner() AlertingPolicy_Spec_ConditionsCombiner {
	if m != nil {
		return m.ConditionCombiner
	}
	return AlertingPolicy_Spec_OR
}

func (m *AlertingPolicy_Spec) GetNotification() *AlertingPolicy_Spec_Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

func (m *AlertingPolicy_Spec) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "AlertingPolicy_Spec"))
	}
	m.Enabled = fv
}

func (m *AlertingPolicy_Spec) SetConditionCombiner(fv AlertingPolicy_Spec_ConditionsCombiner) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionCombiner", "AlertingPolicy_Spec"))
	}
	m.ConditionCombiner = fv
}

func (m *AlertingPolicy_Spec) SetNotification(fv *AlertingPolicy_Spec_Notification) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Notification", "AlertingPolicy_Spec"))
	}
	m.Notification = fv
}

type AlertingPolicy_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Number of ongoing alerts (incident has not ended)
	ActiveAlertsCount int64 `protobuf:"varint,1,opt,name=active_alerts_count,json=activeAlertsCount,proto3" json:"active_alerts_count,omitempty" firestore:"activeAlertsCount"`
}

func (m *AlertingPolicy_State) Reset() {
	*m = AlertingPolicy_State{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingPolicy_State) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingPolicy_State) ProtoMessage() {}

func (m *AlertingPolicy_State) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingPolicy_State) GotenMessage() {}

// Deprecated, Use AlertingPolicy_State.ProtoReflect.Descriptor instead.
func (*AlertingPolicy_State) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alerting_policy_proto_rawDescGZIP(), []int{0, 2}
}

func (m *AlertingPolicy_State) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingPolicy_State) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingPolicy_State) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingPolicy_State) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingPolicy_State) GetActiveAlertsCount() int64 {
	if m != nil {
		return m.ActiveAlertsCount
	}
	return int64(0)
}

func (m *AlertingPolicy_State) SetActiveAlertsCount(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActiveAlertsCount", "AlertingPolicy_State"))
	}
	m.ActiveAlertsCount = fv
}

// Notification specification for a given Policy
type AlertingPolicy_Spec_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Enabled flag determines whether any notifications will be sent
	Enabled  bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" firestore:"enabled"`
	Channels []string `protobuf:"bytes,3,rep,name=channels,proto3" json:"channels,omitempty" firestore:"channels"`
}

func (m *AlertingPolicy_Spec_Notification) Reset() {
	*m = AlertingPolicy_Spec_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingPolicy_Spec_Notification) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingPolicy_Spec_Notification) ProtoMessage() {}

func (m *AlertingPolicy_Spec_Notification) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingPolicy_Spec_Notification) GotenMessage() {}

// Deprecated, Use AlertingPolicy_Spec_Notification.ProtoReflect.Descriptor instead.
func (*AlertingPolicy_Spec_Notification) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v3_alerting_policy_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *AlertingPolicy_Spec_Notification) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingPolicy_Spec_Notification) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingPolicy_Spec_Notification) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingPolicy_Spec_Notification) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingPolicy_Spec_Notification) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *AlertingPolicy_Spec_Notification) GetChannels() []string {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *AlertingPolicy_Spec_Notification) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "AlertingPolicy_Spec_Notification"))
	}
	m.Enabled = fv
}

func (m *AlertingPolicy_Spec_Notification) SetChannels(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Channels", "AlertingPolicy_Spec_Notification"))
	}
	m.Channels = fv
}

var edgelq_monitoring_proto_v3_alerting_policy_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v3_alerting_policy_proto_rawDesc = []byte{
	0x0a, 0x30, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x33, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac,
	0x0b, 0x0a, 0x0e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0xb2, 0xda, 0x21, 0x12, 0x0a, 0x10, 0x0a, 0x0e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x5d, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x09,
	0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0xca, 0xc6, 0x27, 0x11, 0x2a, 0x0f, 0x5a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0xe0, 0x02, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x72, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04,
	0x3a, 0x02, 0x18, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x4a, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x25, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e,
	0x44, 0x10, 0x01, 0x1a, 0x37, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0xae, 0x04, 0xea,
	0x41, 0x6e, 0x0a, 0x24, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x46, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d,
	0x92, 0xd9, 0x21, 0x9c, 0x01, 0x0a, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x47, 0x08, 0x02, 0x12, 0x0c, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x50, 0x05, 0x6a, 0x1c, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0xaa, 0xd9, 0x21, 0x74, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x73, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x0a, 0x15, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0c, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xb2, 0xdf, 0x21, 0x93, 0x01, 0x0a, 0x90,
	0x01, 0x0a, 0x8d, 0x01, 0x0a, 0x0d, 0x62, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x2d, 0x1a, 0x36, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2d, 0x2a, 0x05, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x8f, 0x03,
	0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x57, 0x0a, 0x15, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33,
	0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x33, 0x42, 0x13, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0xd2, 0x84, 0xd1, 0x02, 0x47, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76,
	0x33, 0xa2, 0x80, 0xd1, 0x02, 0x59, 0x0a, 0x16, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x33, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v3_alerting_policy_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v3_alerting_policy_proto_rawDescData = edgelq_monitoring_proto_v3_alerting_policy_proto_rawDesc
)

func edgelq_monitoring_proto_v3_alerting_policy_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v3_alerting_policy_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v3_alerting_policy_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v3_alerting_policy_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v3_alerting_policy_proto_rawDescData
}

var edgelq_monitoring_proto_v3_alerting_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var edgelq_monitoring_proto_v3_alerting_policy_proto_goTypes = []interface{}{
	(AlertingPolicy_Spec_ConditionsCombiner)(0), // 0: ntt.monitoring.v3.AlertingPolicy_Spec_ConditionsCombiner
	(*AlertingPolicy)(nil),                      // 1: ntt.monitoring.v3.AlertingPolicy
	(*AlertingPolicy_Documentation)(nil),        // 2: ntt.monitoring.v3.AlertingPolicy.Documentation
	(*AlertingPolicy_Spec)(nil),                 // 3: ntt.monitoring.v3.AlertingPolicy.Spec
	(*AlertingPolicy_State)(nil),                // 4: ntt.monitoring.v3.AlertingPolicy.State
	(*AlertingPolicy_Spec_Notification)(nil),    // 5: ntt.monitoring.v3.AlertingPolicy.Spec.Notification
	(*ntt_meta.Meta)(nil),                       // 6: ntt.types.Meta
}
var edgelq_monitoring_proto_v3_alerting_policy_proto_depIdxs = []int32{
	6, // 0: ntt.monitoring.v3.AlertingPolicy.metadata:type_name -> ntt.types.Meta
	2, // 1: ntt.monitoring.v3.AlertingPolicy.documentation:type_name -> ntt.monitoring.v3.AlertingPolicy.Documentation
	3, // 2: ntt.monitoring.v3.AlertingPolicy.spec:type_name -> ntt.monitoring.v3.AlertingPolicy.Spec
	4, // 3: ntt.monitoring.v3.AlertingPolicy.state:type_name -> ntt.monitoring.v3.AlertingPolicy.State
	0, // 4: ntt.monitoring.v3.AlertingPolicy.Spec.condition_combiner:type_name -> ntt.monitoring.v3.AlertingPolicy_Spec_ConditionsCombiner
	5, // 5: ntt.monitoring.v3.AlertingPolicy.Spec.notification:type_name -> ntt.monitoring.v3.AlertingPolicy.Spec.Notification
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v3_alerting_policy_proto_init() }
func edgelq_monitoring_proto_v3_alerting_policy_proto_init() {
	if edgelq_monitoring_proto_v3_alerting_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingPolicy_Documentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingPolicy_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingPolicy_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingPolicy_Spec_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v3_alerting_policy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_monitoring_proto_v3_alerting_policy_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v3_alerting_policy_proto_depIdxs,
		EnumInfos:         edgelq_monitoring_proto_v3_alerting_policy_proto_enumTypes,
		MessageInfos:      edgelq_monitoring_proto_v3_alerting_policy_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v3_alerting_policy_proto = out.File
	edgelq_monitoring_proto_v3_alerting_policy_proto_rawDesc = nil
	edgelq_monitoring_proto_v3_alerting_policy_proto_goTypes = nil
	edgelq_monitoring_proto_v3_alerting_policy_proto_depIdxs = nil
}
