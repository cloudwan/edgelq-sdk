// Code generated by protoc-gen-goten-resource
// Resource: AlertingPolicy
// DO NOT EDIT!!!

package alerting_policy

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	notification_channel "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/notification_channel"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v3/project"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &notification_channel.NotificationChannel{}
	_ = &project.Project{}
)

type AlertingPolicyList []*AlertingPolicy

func (l AlertingPolicyList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*AlertingPolicy))
}

func (l AlertingPolicyList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(AlertingPolicyList)...)
}

func (l AlertingPolicyList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AlertingPolicyList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l AlertingPolicyList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*AlertingPolicy)
}

func (l AlertingPolicyList) Length() int {
	return len(l)
}

type AlertingPolicyChangeList []*AlertingPolicyChange

func (l AlertingPolicyChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*AlertingPolicyChange))
}

func (l AlertingPolicyChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(AlertingPolicyChangeList)...)
}

func (l AlertingPolicyChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AlertingPolicyChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l AlertingPolicyChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*AlertingPolicyChange)
}

func (l AlertingPolicyChangeList) Length() int {
	return len(l)
}

type AlertingPolicyNameList []*Name

func (l AlertingPolicyNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l AlertingPolicyNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(AlertingPolicyNameList)...)
}

func (l AlertingPolicyNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AlertingPolicyNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l AlertingPolicyNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l AlertingPolicyNameList) Length() int {
	return len(l)
}

type AlertingPolicyReferenceList []*Reference

func (l AlertingPolicyReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l AlertingPolicyReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(AlertingPolicyReferenceList)...)
}

func (l AlertingPolicyReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AlertingPolicyReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l AlertingPolicyReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l AlertingPolicyReferenceList) Length() int {
	return len(l)
}

type AlertingPolicyParentNameList []*ParentName

func (l AlertingPolicyParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l AlertingPolicyParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(AlertingPolicyParentNameList)...)
}

func (l AlertingPolicyParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AlertingPolicyParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l AlertingPolicyParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l AlertingPolicyParentNameList) Length() int {
	return len(l)
}

type AlertingPolicyParentReferenceList []*ParentReference

func (l AlertingPolicyParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l AlertingPolicyParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(AlertingPolicyParentReferenceList)...)
}

func (l AlertingPolicyParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AlertingPolicyParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l AlertingPolicyParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l AlertingPolicyParentReferenceList) Length() int {
	return len(l)
}

type AlertingPolicyMap map[Name]*AlertingPolicy

func (m AlertingPolicyMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m AlertingPolicyMap) Set(res gotenresource.Resource) {
	tRes := res.(*AlertingPolicy)
	m[*tRes.Name] = tRes
}

func (m AlertingPolicyMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m AlertingPolicyMap) Length() int {
	return len(m)
}

func (m AlertingPolicyMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type AlertingPolicyChangeMap map[Name]*AlertingPolicyChange

func (m AlertingPolicyChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m AlertingPolicyChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*AlertingPolicyChange)
	m[*tChange.GetAlertingPolicyName()] = tChange
}

func (m AlertingPolicyChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m AlertingPolicyChangeMap) Length() int {
	return len(m)
}

func (m AlertingPolicyChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
