// Code generated by protoc-gen-goten-validate
// File: edgelq/monitoring/proto/v4/alerting_policy.proto
// DO NOT EDIT!!!

package alerting_policy

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	notification_channel "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/notification_channel"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &notification_channel.NotificationChannel{}
	_ = &project.Project{}
	_ = &meta.Meta{}
)

func (obj *AlertingPolicy) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Metadata).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("AlertingPolicy", "metadata", obj.Metadata, "nested object validation failed", err)
		}
	}
	{
		rlen := utf8.RuneCountInString(obj.Description)
		if rlen > 256 {
			return gotenvalidate.NewValidationError("AlertingPolicy", "description", obj.Description, "field must contain at most 256 characters", nil)
		}
	}
	if subobj, ok := interface{}(obj.Documentation).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("AlertingPolicy", "documentation", obj.Documentation, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Spec).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("AlertingPolicy", "spec", obj.Spec, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.State).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("AlertingPolicy", "state", obj.State, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AlertingPolicy_Documentation) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.MimeType != "text/markdown" {
		return gotenvalidate.NewValidationError("Documentation", "mimeType", obj.MimeType, "field must be equal to exactly one of the following values: text/markdown", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AlertingPolicy_Spec) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.ConditionCombiner != 0 {
		return gotenvalidate.NewValidationError("Spec", "conditionCombiner", obj.ConditionCombiner, "field must be equal to exactly one of the following values: 0", nil)
	}
	if subobj, ok := interface{}(obj.Notification).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Spec", "notification", obj.Notification, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AlertingPolicy_State) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *AlertingPolicy_Spec_Notification) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
