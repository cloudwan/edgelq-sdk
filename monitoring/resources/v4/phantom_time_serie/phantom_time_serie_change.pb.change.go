// Code generated by protoc-gen-goten-resource
// Resource change: PhantomTimeSerieChange
// DO NOT EDIT!!!

package phantom_time_serie

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &fieldmaskpb.FieldMask{}
)

func (c *PhantomTimeSerieChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PhantomTimeSerieChange_Added_)
	return ok
}

func (c *PhantomTimeSerieChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PhantomTimeSerieChange_Modified_)
	return ok
}

func (c *PhantomTimeSerieChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PhantomTimeSerieChange_Current_)
	return ok
}

func (c *PhantomTimeSerieChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*PhantomTimeSerieChange_Removed_)
	return ok
}

func (c *PhantomTimeSerieChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *PhantomTimeSerieChange_Added_:
		return cType.Added.ViewIndex
	case *PhantomTimeSerieChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *PhantomTimeSerieChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *PhantomTimeSerieChange_Removed_:
		return cType.Removed.ViewIndex
	case *PhantomTimeSerieChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *PhantomTimeSerieChange) GetPhantomTimeSerie() *PhantomTimeSerie {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *PhantomTimeSerieChange_Added_:
		return cType.Added.PhantomTimeSerie
	case *PhantomTimeSerieChange_Modified_:
		return cType.Modified.PhantomTimeSerie
	case *PhantomTimeSerieChange_Current_:
		return cType.Current.PhantomTimeSerie
	case *PhantomTimeSerieChange_Removed_:
		return nil
	}
	return nil
}

func (c *PhantomTimeSerieChange) GetRawResource() gotenresource.Resource {
	return c.GetPhantomTimeSerie()
}

func (c *PhantomTimeSerieChange) GetPhantomTimeSerieName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *PhantomTimeSerieChange_Added_:
		return cType.Added.PhantomTimeSerie.GetName()
	case *PhantomTimeSerieChange_Modified_:
		return cType.Modified.Name
	case *PhantomTimeSerieChange_Current_:
		return cType.Current.PhantomTimeSerie.GetName()
	case *PhantomTimeSerieChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *PhantomTimeSerieChange) GetRawName() gotenresource.Name {
	return c.GetPhantomTimeSerieName()
}

func (c *PhantomTimeSerieChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &PhantomTimeSerieChange_Added_{
		Added: &PhantomTimeSerieChange_Added{
			PhantomTimeSerie: snapshot.(*PhantomTimeSerie),
			ViewIndex:        int32(idx),
		},
	}
}

func (c *PhantomTimeSerieChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &PhantomTimeSerieChange_Modified_{
		Modified: &PhantomTimeSerieChange_Modified{
			Name:              name.(*Name),
			PhantomTimeSerie:  snapshot.(*PhantomTimeSerie),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *PhantomTimeSerieChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &PhantomTimeSerieChange_Current_{
		Current: &PhantomTimeSerieChange_Current{
			PhantomTimeSerie: snapshot.(*PhantomTimeSerie),
		},
	}
}

func (c *PhantomTimeSerieChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &PhantomTimeSerieChange_Removed_{
		Removed: &PhantomTimeSerieChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
