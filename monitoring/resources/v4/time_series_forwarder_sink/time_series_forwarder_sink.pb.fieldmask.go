// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v4/time_series_forwarder_sink.proto
// DO NOT EDIT!!!

package time_series_forwarder_sink

import (
	"encoding/json"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &meta.Meta{}
)

type TimeSeriesForwarderSink_FieldMask struct {
	Paths []TimeSeriesForwarderSink_FieldPath
}

func FullTimeSeriesForwarderSink_FieldMask() *TimeSeriesForwarderSink_FieldMask {
	res := &TimeSeriesForwarderSink_FieldMask{}
	res.Paths = append(res.Paths, &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorName})
	res.Paths = append(res.Paths, &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorSpec})
	res.Paths = append(res.Paths, &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorStatus})
	return res
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TimeSeriesForwarderSink_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTimeSeriesForwarderSink_FieldPath(raw)
	})
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) ProtoMessage() {}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) Subtract(other *TimeSeriesForwarderSink_FieldMask) *TimeSeriesForwarderSink_FieldMask {
	result := &TimeSeriesForwarderSink_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[TimeSeriesForwarderSink_FieldPathSelector]gotenobject.FieldMask{
		TimeSeriesForwarderSink_FieldPathSelectorMetadata: &meta.Meta_FieldMask{},
		TimeSeriesForwarderSink_FieldPathSelectorSpec:     &TimeSeriesForwarderSink_Spec_FieldMask{},
		TimeSeriesForwarderSink_FieldPathSelectorStatus:   &TimeSeriesForwarderSink_Status_FieldMask{},
	}
	mySubMasks := map[TimeSeriesForwarderSink_FieldPathSelector]gotenobject.FieldMask{
		TimeSeriesForwarderSink_FieldPathSelectorMetadata: &meta.Meta_FieldMask{},
		TimeSeriesForwarderSink_FieldPathSelectorSpec:     &TimeSeriesForwarderSink_Spec_FieldMask{},
		TimeSeriesForwarderSink_FieldPathSelectorStatus:   &TimeSeriesForwarderSink_Status_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TimeSeriesForwarderSink_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *TimeSeriesForwarderSink_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*TimeSeriesForwarderSink_FieldTerminalPath); ok {
					switch tp.selector {
					case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
						mySubMasks[TimeSeriesForwarderSink_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case TimeSeriesForwarderSink_FieldPathSelectorSpec:
						mySubMasks[TimeSeriesForwarderSink_FieldPathSelectorSpec] = FullTimeSeriesForwarderSink_Spec_FieldMask()
					case TimeSeriesForwarderSink_FieldPathSelectorStatus:
						mySubMasks[TimeSeriesForwarderSink_FieldPathSelectorStatus] = FullTimeSeriesForwarderSink_Status_FieldMask()
					}
				} else if tp, ok := path.(*TimeSeriesForwarderSink_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &TimeSeriesForwarderSink_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TimeSeriesForwarderSink_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TimeSeriesForwarderSink_FieldMask) FilterInputFields() *TimeSeriesForwarderSink_FieldMask {
	result := &TimeSeriesForwarderSink_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
			if _, ok := path.(*TimeSeriesForwarderSink_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &TimeSeriesForwarderSink_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*TimeSeriesForwarderSink_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &TimeSeriesForwarderSink_FieldSubPath{selector: TimeSeriesForwarderSink_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TimeSeriesForwarderSink_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TimeSeriesForwarderSink_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTimeSeriesForwarderSink_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TimeSeriesForwarderSink_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TimeSeriesForwarderSink_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) AppendPath(path TimeSeriesForwarderSink_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TimeSeriesForwarderSink_FieldPath))
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) GetPaths() []TimeSeriesForwarderSink_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTimeSeriesForwarderSink_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) Set(target, source *TimeSeriesForwarderSink) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TimeSeriesForwarderSink), source.(*TimeSeriesForwarderSink))
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) Project(source *TimeSeriesForwarderSink) *TimeSeriesForwarderSink {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TimeSeriesForwarderSink{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	specMask := &TimeSeriesForwarderSink_Spec_FieldMask{}
	wholeSpecAccepted := false
	statusMask := &TimeSeriesForwarderSink_Status_FieldMask{}
	wholeStatusAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TimeSeriesForwarderSink_FieldTerminalPath:
			switch tp.selector {
			case TimeSeriesForwarderSink_FieldPathSelectorName:
				result.Name = source.Name
			case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case TimeSeriesForwarderSink_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case TimeSeriesForwarderSink_FieldPathSelectorSpec:
				result.Spec = source.Spec
				wholeSpecAccepted = true
			case TimeSeriesForwarderSink_FieldPathSelectorStatus:
				result.Status = source.Status
				wholeStatusAccepted = true
			}
		case *TimeSeriesForwarderSink_FieldSubPath:
			switch tp.selector {
			case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case TimeSeriesForwarderSink_FieldPathSelectorSpec:
				specMask.AppendPath(tp.subPath.(TimeSeriesForwarderSinkSpec_FieldPath))
			case TimeSeriesForwarderSink_FieldPathSelectorStatus:
				statusMask.AppendPath(tp.subPath.(TimeSeriesForwarderSinkStatus_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeSpecAccepted == false && len(specMask.Paths) > 0 {
		result.Spec = specMask.Project(source.GetSpec())
	}
	if wholeStatusAccepted == false && len(statusMask.Paths) > 0 {
		result.Status = statusMask.Project(source.GetStatus())
	}
	return result
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TimeSeriesForwarderSink))
}

func (fieldMask *TimeSeriesForwarderSink_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TimeSeriesForwarderSink_Spec_FieldMask struct {
	Paths []TimeSeriesForwarderSinkSpec_FieldPath
}

func FullTimeSeriesForwarderSink_Spec_FieldMask() *TimeSeriesForwarderSink_Spec_FieldMask {
	res := &TimeSeriesForwarderSink_Spec_FieldMask{}
	res.Paths = append(res.Paths, &TimeSeriesForwarderSinkSpec_FieldTerminalPath{selector: TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression})
	res.Paths = append(res.Paths, &TimeSeriesForwarderSinkSpec_FieldTerminalPath{selector: TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub})
	return res
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TimeSeriesForwarderSinkSpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTimeSeriesForwarderSinkSpec_FieldPath(raw)
	})
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) ProtoMessage() {}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) Subtract(other *TimeSeriesForwarderSink_Spec_FieldMask) *TimeSeriesForwarderSink_Spec_FieldMask {
	result := &TimeSeriesForwarderSink_Spec_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[TimeSeriesForwarderSinkSpec_FieldPathSelector]gotenobject.FieldMask{
		TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub: &TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask{},
	}
	mySubMasks := map[TimeSeriesForwarderSinkSpec_FieldPathSelector]gotenobject.FieldMask{
		TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub: &TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TimeSeriesForwarderSinkSpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *TimeSeriesForwarderSinkSpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*TimeSeriesForwarderSinkSpec_FieldTerminalPath); ok {
					switch tp.selector {
					case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
						mySubMasks[TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub] = FullTimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask()
					}
				} else if tp, ok := path.(*TimeSeriesForwarderSinkSpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &TimeSeriesForwarderSinkSpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TimeSeriesForwarderSink_Spec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) FilterInputFields() *TimeSeriesForwarderSink_Spec_FieldMask {
	result := &TimeSeriesForwarderSink_Spec_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TimeSeriesForwarderSinkSpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTimeSeriesForwarderSinkSpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TimeSeriesForwarderSink_Spec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TimeSeriesForwarderSink_Spec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) AppendPath(path TimeSeriesForwarderSinkSpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TimeSeriesForwarderSinkSpec_FieldPath))
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) GetPaths() []TimeSeriesForwarderSinkSpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTimeSeriesForwarderSinkSpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) Set(target, source *TimeSeriesForwarderSink_Spec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TimeSeriesForwarderSink_Spec), source.(*TimeSeriesForwarderSink_Spec))
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) Project(source *TimeSeriesForwarderSink_Spec) *TimeSeriesForwarderSink_Spec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TimeSeriesForwarderSink_Spec{}
	azureEventHubMask := &TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask{}
	wholeAzureEventHubAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TimeSeriesForwarderSinkSpec_FieldTerminalPath:
			switch tp.selector {
			case TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression:
				result.Compression = source.Compression
			case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
				if source, ok := source.Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub); ok {
					result.Sink = &TimeSeriesForwarderSink_Spec_AzureEventHub{
						AzureEventHub: source.AzureEventHub,
					}
				}
				wholeAzureEventHubAccepted = true
			}
		case *TimeSeriesForwarderSinkSpec_FieldSubPath:
			switch tp.selector {
			case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
				azureEventHubMask.AppendPath(tp.subPath.(TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath))
			}
		}
	}
	if wholeAzureEventHubAccepted == false && len(azureEventHubMask.Paths) > 0 {
		if asOneOf, ok := source.Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub); ok {
			result.Sink = (*TimeSeriesForwarderSink_Spec_AzureEventHub)(nil)
			if asOneOf != nil {
				oneOfRes := &TimeSeriesForwarderSink_Spec_AzureEventHub{}
				oneOfRes.AzureEventHub = azureEventHubMask.Project(asOneOf.AzureEventHub)
				result.Sink = oneOfRes
			}
		}
	}
	return result
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TimeSeriesForwarderSink_Spec))
}

func (fieldMask *TimeSeriesForwarderSink_Spec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TimeSeriesForwarderSink_Status_FieldMask struct {
	Paths []TimeSeriesForwarderSinkStatus_FieldPath
}

func FullTimeSeriesForwarderSink_Status_FieldMask() *TimeSeriesForwarderSink_Status_FieldMask {
	res := &TimeSeriesForwarderSink_Status_FieldMask{}
	res.Paths = append(res.Paths, &TimeSeriesForwarderSinkStatus_FieldTerminalPath{selector: TimeSeriesForwarderSinkStatus_FieldPathSelectorError})
	return res
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TimeSeriesForwarderSinkStatus_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTimeSeriesForwarderSinkStatus_FieldPath(raw)
	})
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) ProtoMessage() {}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) Subtract(other *TimeSeriesForwarderSink_Status_FieldMask) *TimeSeriesForwarderSink_Status_FieldMask {
	result := &TimeSeriesForwarderSink_Status_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TimeSeriesForwarderSinkStatus_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TimeSeriesForwarderSink_Status_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) FilterInputFields() *TimeSeriesForwarderSink_Status_FieldMask {
	result := &TimeSeriesForwarderSink_Status_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TimeSeriesForwarderSinkStatus_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTimeSeriesForwarderSinkStatus_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TimeSeriesForwarderSink_Status_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TimeSeriesForwarderSink_Status_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) AppendPath(path TimeSeriesForwarderSinkStatus_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TimeSeriesForwarderSinkStatus_FieldPath))
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) GetPaths() []TimeSeriesForwarderSinkStatus_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTimeSeriesForwarderSinkStatus_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) Set(target, source *TimeSeriesForwarderSink_Status) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TimeSeriesForwarderSink_Status), source.(*TimeSeriesForwarderSink_Status))
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) Project(source *TimeSeriesForwarderSink_Status) *TimeSeriesForwarderSink_Status {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TimeSeriesForwarderSink_Status{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TimeSeriesForwarderSinkStatus_FieldTerminalPath:
			switch tp.selector {
			case TimeSeriesForwarderSinkStatus_FieldPathSelectorError:
				result.Error = source.Error
			}
		}
	}
	return result
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TimeSeriesForwarderSink_Status))
}

func (fieldMask *TimeSeriesForwarderSink_Status_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask struct {
	Paths []TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath
}

func FullTimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask() *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask {
	res := &TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask{}
	res.Paths = append(res.Paths, &TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath{selector: TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint})
	return res
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath(raw)
	})
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) ProtoMessage() {}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) Subtract(other *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask {
	result := &TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) FilterInputFields() *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask {
	result := &TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) AppendPath(path TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath))
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) GetPaths() []TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) Set(target, source *TimeSeriesForwarderSink_Spec_AzureEventHubSink) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink), source.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink))
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) Project(source *TimeSeriesForwarderSink_Spec_AzureEventHubSink) *TimeSeriesForwarderSink_Spec_AzureEventHubSink {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &TimeSeriesForwarderSink_Spec_AzureEventHubSink{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath:
			switch tp.selector {
			case TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint:
				result.Endpoint = source.Endpoint
			}
		}
	}
	return result
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink))
}

func (fieldMask *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
