// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v4/time_series_forwarder_sink.proto
// DO NOT EDIT!!!

package time_series_forwarder_sink

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &meta.Meta{}
)

func (o *TimeSeriesForwarderSink) GotenObjectExt() {}

func (o *TimeSeriesForwarderSink) MakeFullFieldMask() *TimeSeriesForwarderSink_FieldMask {
	return FullTimeSeriesForwarderSink_FieldMask()
}

func (o *TimeSeriesForwarderSink) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTimeSeriesForwarderSink_FieldMask()
}

func (o *TimeSeriesForwarderSink) MakeDiffFieldMask(other *TimeSeriesForwarderSink) *TimeSeriesForwarderSink_FieldMask {
	if o == nil && other == nil {
		return &TimeSeriesForwarderSink_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTimeSeriesForwarderSink_FieldMask()
	}

	res := &TimeSeriesForwarderSink_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TimeSeriesForwarderSink_FieldSubPath{selector: TimeSeriesForwarderSink_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorDisplayName})
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TimeSeriesForwarderSink_FieldSubPath{selector: TimeSeriesForwarderSink_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetStatus().MakeDiffFieldMask(other.GetStatus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorStatus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &TimeSeriesForwarderSink_FieldSubPath{selector: TimeSeriesForwarderSink_FieldPathSelectorStatus, subPath: subpath})
			}
		}
	}
	return res
}

func (o *TimeSeriesForwarderSink) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TimeSeriesForwarderSink))
}

func (o *TimeSeriesForwarderSink) Clone() *TimeSeriesForwarderSink {
	if o == nil {
		return nil
	}
	result := &TimeSeriesForwarderSink{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	result.Spec = o.Spec.Clone()
	result.Status = o.Status.Clone()
	return result
}

func (o *TimeSeriesForwarderSink) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TimeSeriesForwarderSink) Merge(source *TimeSeriesForwarderSink) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(TimeSeriesForwarderSink_Spec)
		}
		o.Spec.Merge(source.GetSpec())
	}
	if source.GetStatus() != nil {
		if o.Status == nil {
			o.Status = new(TimeSeriesForwarderSink_Status)
		}
		o.Status.Merge(source.GetStatus())
	}
}

func (o *TimeSeriesForwarderSink) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TimeSeriesForwarderSink))
}

func (o *TimeSeriesForwarderSink_Spec) GotenObjectExt() {}

func (o *TimeSeriesForwarderSink_Spec) MakeFullFieldMask() *TimeSeriesForwarderSink_Spec_FieldMask {
	return FullTimeSeriesForwarderSink_Spec_FieldMask()
}

func (o *TimeSeriesForwarderSink_Spec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTimeSeriesForwarderSink_Spec_FieldMask()
}

func (o *TimeSeriesForwarderSink_Spec) MakeDiffFieldMask(other *TimeSeriesForwarderSink_Spec) *TimeSeriesForwarderSink_Spec_FieldMask {
	if o == nil && other == nil {
		return &TimeSeriesForwarderSink_Spec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTimeSeriesForwarderSink_Spec_FieldMask()
	}

	res := &TimeSeriesForwarderSink_Spec_FieldMask{}
	if o.GetCompression() != other.GetCompression() {
		res.Paths = append(res.Paths, &TimeSeriesForwarderSinkSpec_FieldTerminalPath{selector: TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression})
	}
	{
		_, leftSelected := o.Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub)
		_, rightSelected := other.Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub)
		if leftSelected == rightSelected {
			subMask := o.GetAzureEventHub().MakeDiffFieldMask(other.GetAzureEventHub())
			if subMask.IsFull() {
				res.Paths = append(res.Paths, &TimeSeriesForwarderSinkSpec_FieldTerminalPath{selector: TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub})
			} else {
				for _, subpath := range subMask.Paths {
					res.Paths = append(res.Paths, &TimeSeriesForwarderSinkSpec_FieldSubPath{selector: TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub, subPath: subpath})
				}
			}
		} else {
			res.Paths = append(res.Paths, &TimeSeriesForwarderSinkSpec_FieldTerminalPath{selector: TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub})
		}
	}
	return res
}

func (o *TimeSeriesForwarderSink_Spec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TimeSeriesForwarderSink_Spec))
}

func (o *TimeSeriesForwarderSink_Spec) Clone() *TimeSeriesForwarderSink_Spec {
	if o == nil {
		return nil
	}
	result := &TimeSeriesForwarderSink_Spec{}
	result.Compression = o.Compression
	if o, ok := o.Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub); ok {
		result.Sink = (*TimeSeriesForwarderSink_Spec_AzureEventHub)(nil)
		if o != nil {
			result.Sink = &TimeSeriesForwarderSink_Spec_AzureEventHub{}
			result := result.Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub)
			result.AzureEventHub = o.AzureEventHub.Clone()
		}
	}
	return result
}

func (o *TimeSeriesForwarderSink_Spec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TimeSeriesForwarderSink_Spec) Merge(source *TimeSeriesForwarderSink_Spec) {
	o.Compression = source.GetCompression()
	if source, ok := source.GetSink().(*TimeSeriesForwarderSink_Spec_AzureEventHub); ok {
		if dstOneOf, ok := o.Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub); !ok || dstOneOf == nil {
			o.Sink = &TimeSeriesForwarderSink_Spec_AzureEventHub{}
		}
		if source != nil {
			o := o.Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub)
			if source.AzureEventHub != nil {
				if o.AzureEventHub == nil {
					o.AzureEventHub = new(TimeSeriesForwarderSink_Spec_AzureEventHubSink)
				}
				o.AzureEventHub.Merge(source.AzureEventHub)
			}
		}
	}
}

func (o *TimeSeriesForwarderSink_Spec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TimeSeriesForwarderSink_Spec))
}

func (o *TimeSeriesForwarderSink_Status) GotenObjectExt() {}

func (o *TimeSeriesForwarderSink_Status) MakeFullFieldMask() *TimeSeriesForwarderSink_Status_FieldMask {
	return FullTimeSeriesForwarderSink_Status_FieldMask()
}

func (o *TimeSeriesForwarderSink_Status) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTimeSeriesForwarderSink_Status_FieldMask()
}

func (o *TimeSeriesForwarderSink_Status) MakeDiffFieldMask(other *TimeSeriesForwarderSink_Status) *TimeSeriesForwarderSink_Status_FieldMask {
	if o == nil && other == nil {
		return &TimeSeriesForwarderSink_Status_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTimeSeriesForwarderSink_Status_FieldMask()
	}

	res := &TimeSeriesForwarderSink_Status_FieldMask{}
	if o.GetError() != other.GetError() {
		res.Paths = append(res.Paths, &TimeSeriesForwarderSinkStatus_FieldTerminalPath{selector: TimeSeriesForwarderSinkStatus_FieldPathSelectorError})
	}
	return res
}

func (o *TimeSeriesForwarderSink_Status) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TimeSeriesForwarderSink_Status))
}

func (o *TimeSeriesForwarderSink_Status) Clone() *TimeSeriesForwarderSink_Status {
	if o == nil {
		return nil
	}
	result := &TimeSeriesForwarderSink_Status{}
	result.Error = o.Error
	return result
}

func (o *TimeSeriesForwarderSink_Status) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TimeSeriesForwarderSink_Status) Merge(source *TimeSeriesForwarderSink_Status) {
	o.Error = source.GetError()
}

func (o *TimeSeriesForwarderSink_Status) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TimeSeriesForwarderSink_Status))
}

func (o *TimeSeriesForwarderSink_Spec_AzureEventHubSink) GotenObjectExt() {}

func (o *TimeSeriesForwarderSink_Spec_AzureEventHubSink) MakeFullFieldMask() *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask {
	return FullTimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask()
}

func (o *TimeSeriesForwarderSink_Spec_AzureEventHubSink) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask()
}

func (o *TimeSeriesForwarderSink_Spec_AzureEventHubSink) MakeDiffFieldMask(other *TimeSeriesForwarderSink_Spec_AzureEventHubSink) *TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask {
	if o == nil && other == nil {
		return &TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask()
	}

	res := &TimeSeriesForwarderSink_Spec_AzureEventHubSink_FieldMask{}
	if o.GetEndpoint().String() != other.GetEndpoint().String() {
		res.Paths = append(res.Paths, &TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath{selector: TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint})
	}
	return res
}

func (o *TimeSeriesForwarderSink_Spec_AzureEventHubSink) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink))
}

func (o *TimeSeriesForwarderSink_Spec_AzureEventHubSink) Clone() *TimeSeriesForwarderSink_Spec_AzureEventHubSink {
	if o == nil {
		return nil
	}
	result := &TimeSeriesForwarderSink_Spec_AzureEventHubSink{}
	if o.Endpoint == nil {
		result.Endpoint = nil
	} else if data, err := o.Endpoint.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Endpoint = &secrets_secret.Reference{}
		if err := result.Endpoint.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *TimeSeriesForwarderSink_Spec_AzureEventHubSink) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *TimeSeriesForwarderSink_Spec_AzureEventHubSink) Merge(source *TimeSeriesForwarderSink_Spec_AzureEventHubSink) {
	if source.GetEndpoint() != nil {
		if data, err := source.GetEndpoint().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Endpoint = &secrets_secret.Reference{}
			if err := o.Endpoint.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Endpoint = nil
	}
}

func (o *TimeSeriesForwarderSink_Spec_AzureEventHubSink) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink))
}
