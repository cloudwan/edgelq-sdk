// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v4/time_series_forwarder_sink.proto
// DO NOT EDIT!!!

package time_series_forwarder_sink

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimeSeriesForwarderSink_Spec_Compression int32

const (
	TimeSeriesForwarderSink_Spec_NO_COMPRESSION TimeSeriesForwarderSink_Spec_Compression = 0
	TimeSeriesForwarderSink_Spec_SNAPPY         TimeSeriesForwarderSink_Spec_Compression = 1
)

var (
	TimeSeriesForwarderSink_Spec_Compression_name = map[int32]string{
		0: "NO_COMPRESSION",
		1: "SNAPPY",
	}

	TimeSeriesForwarderSink_Spec_Compression_value = map[string]int32{
		"NO_COMPRESSION": 0,
		"SNAPPY":         1,
	}
)

func (x TimeSeriesForwarderSink_Spec_Compression) Enum() *TimeSeriesForwarderSink_Spec_Compression {
	p := new(TimeSeriesForwarderSink_Spec_Compression)
	*p = x
	return p
}

func (x TimeSeriesForwarderSink_Spec_Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (TimeSeriesForwarderSink_Spec_Compression) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_enumTypes[0].Descriptor()
}

func (TimeSeriesForwarderSink_Spec_Compression) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_enumTypes[0]
}

func (x TimeSeriesForwarderSink_Spec_Compression) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use TimeSeriesForwarderSink_Spec_Compression.ProtoReflect.Descriptor instead.
func (TimeSeriesForwarderSink_Spec_Compression) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDescGZIP(), []int{0, 0, 0}
}

// TimeSeriesForwarderSink Resource describes destination of TimeSeries data.
// Sink can be connected to TimeSeriesCollectionRule.
// TimeSeriesForwarderSink does not need to be in the same project as collection
// rule. Each item published on the sink will be a protobuf message of
// ntt.monitoring.v4.BulkTimeSeries.
type TimeSeriesForwarderSink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of TimeSeriesForwarderSink
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Optional display name
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Current spec
	Spec *TimeSeriesForwarderSink_Spec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// Current status
	Status *TimeSeriesForwarderSink_Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *TimeSeriesForwarderSink) Reset() {
	*m = TimeSeriesForwarderSink{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TimeSeriesForwarderSink) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TimeSeriesForwarderSink) ProtoMessage() {}

func (m *TimeSeriesForwarderSink) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TimeSeriesForwarderSink) GotenMessage() {}

// Deprecated, Use TimeSeriesForwarderSink.ProtoReflect.Descriptor instead.
func (*TimeSeriesForwarderSink) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDescGZIP(), []int{0}
}

func (m *TimeSeriesForwarderSink) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TimeSeriesForwarderSink) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TimeSeriesForwarderSink) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TimeSeriesForwarderSink) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TimeSeriesForwarderSink) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *TimeSeriesForwarderSink) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TimeSeriesForwarderSink) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *TimeSeriesForwarderSink) GetSpec() *TimeSeriesForwarderSink_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TimeSeriesForwarderSink) GetStatus() *TimeSeriesForwarderSink_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TimeSeriesForwarderSink) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "TimeSeriesForwarderSink"))
	}
	m.Name = fv
}

func (m *TimeSeriesForwarderSink) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "TimeSeriesForwarderSink"))
	}
	m.Metadata = fv
}

func (m *TimeSeriesForwarderSink) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "TimeSeriesForwarderSink"))
	}
	m.DisplayName = fv
}

func (m *TimeSeriesForwarderSink) SetSpec(fv *TimeSeriesForwarderSink_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "TimeSeriesForwarderSink"))
	}
	m.Spec = fv
}

func (m *TimeSeriesForwarderSink) SetStatus(fv *TimeSeriesForwarderSink_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "TimeSeriesForwarderSink"))
	}
	m.Status = fv
}

// Sink specification, instructing where data must go.
// It must specify one valid sink spec inside.
type TimeSeriesForwarderSink_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Optional data compression.
	Compression TimeSeriesForwarderSink_Spec_Compression `protobuf:"varint,1,opt,name=compression,proto3,enum=ntt.monitoring.v4.TimeSeriesForwarderSink_Spec_Compression" json:"compression,omitempty"`
	// Types that are valid to be assigned to Sink:
	//	*TimeSeriesForwarderSink_Spec_AzureEventHub
	Sink isTimeSeriesForwarderSink_Spec_Sink `protobuf_oneof:"sink"`
}

func (m *TimeSeriesForwarderSink_Spec) Reset() {
	*m = TimeSeriesForwarderSink_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TimeSeriesForwarderSink_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TimeSeriesForwarderSink_Spec) ProtoMessage() {}

func (m *TimeSeriesForwarderSink_Spec) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TimeSeriesForwarderSink_Spec) GotenMessage() {}

// Deprecated, Use TimeSeriesForwarderSink_Spec.ProtoReflect.Descriptor instead.
func (*TimeSeriesForwarderSink_Spec) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDescGZIP(), []int{0, 0}
}

func (m *TimeSeriesForwarderSink_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TimeSeriesForwarderSink_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TimeSeriesForwarderSink_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TimeSeriesForwarderSink_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isTimeSeriesForwarderSink_Spec_Sink interface {
	isTimeSeriesForwarderSink_Spec_Sink()
}

type TimeSeriesForwarderSink_Spec_AzureEventHub struct {
	AzureEventHub *TimeSeriesForwarderSink_Spec_AzureEventHubSink `protobuf:"bytes,2,opt,name=azure_event_hub,json=azureEventHub,proto3,oneof"`
}

func (*TimeSeriesForwarderSink_Spec_AzureEventHub) isTimeSeriesForwarderSink_Spec_Sink() {}
func (m *TimeSeriesForwarderSink_Spec) GetCompression() TimeSeriesForwarderSink_Spec_Compression {
	if m != nil {
		return m.Compression
	}
	return TimeSeriesForwarderSink_Spec_NO_COMPRESSION
}

func (m *TimeSeriesForwarderSink_Spec) GetSink() isTimeSeriesForwarderSink_Spec_Sink {
	if m != nil {
		return m.Sink
	}
	return nil
}
func (m *TimeSeriesForwarderSink_Spec) GetAzureEventHub() *TimeSeriesForwarderSink_Spec_AzureEventHubSink {
	if x, ok := m.GetSink().(*TimeSeriesForwarderSink_Spec_AzureEventHub); ok {
		return x.AzureEventHub
	}
	return nil
}
func (m *TimeSeriesForwarderSink_Spec) SetCompression(fv TimeSeriesForwarderSink_Spec_Compression) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Compression", "TimeSeriesForwarderSink_Spec"))
	}
	m.Compression = fv
}

func (m *TimeSeriesForwarderSink_Spec) SetSink(ofv isTimeSeriesForwarderSink_Spec_Sink) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isTimeSeriesForwarderSink_Spec_Sink", "TimeSeriesForwarderSink_Spec"))
	}
	m.Sink = ofv
}
func (m *TimeSeriesForwarderSink_Spec) SetAzureEventHub(fv *TimeSeriesForwarderSink_Spec_AzureEventHubSink) {
	m.SetSink(&TimeSeriesForwarderSink_Spec_AzureEventHub{AzureEventHub: fv})
}

// Status describes status of TimeSeriesForwarderSink.
type TimeSeriesForwarderSink_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// If there is some persisting error on the sink, it will be reported here.
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *TimeSeriesForwarderSink_Status) Reset() {
	*m = TimeSeriesForwarderSink_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TimeSeriesForwarderSink_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TimeSeriesForwarderSink_Status) ProtoMessage() {}

func (m *TimeSeriesForwarderSink_Status) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TimeSeriesForwarderSink_Status) GotenMessage() {}

// Deprecated, Use TimeSeriesForwarderSink_Status.ProtoReflect.Descriptor instead.
func (*TimeSeriesForwarderSink_Status) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDescGZIP(), []int{0, 1}
}

func (m *TimeSeriesForwarderSink_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TimeSeriesForwarderSink_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TimeSeriesForwarderSink_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TimeSeriesForwarderSink_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TimeSeriesForwarderSink_Status) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TimeSeriesForwarderSink_Status) SetError(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Error", "TimeSeriesForwarderSink_Status"))
	}
	m.Error = fv
}

// AzureEventHubSink describes sink for Azure Event Hub.
type TimeSeriesForwarderSink_Spec_AzureEventHubSink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Endpoint must contain secret value for authentication purposes,
	// therefore it is packed as a Secret resource. Secret resource itself
	// must contain following data field:
	// {
	//  "data": {
	//    "EndpointString":
	//    "Endpoint=sb://<name>.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=<SECRET>;EntityPath=<topicName>"
	//   }
	// }
	// Replace <> elements with appropiate values.
	Endpoint *secrets_secret.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (m *TimeSeriesForwarderSink_Spec_AzureEventHubSink) Reset() {
	*m = TimeSeriesForwarderSink_Spec_AzureEventHubSink{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TimeSeriesForwarderSink_Spec_AzureEventHubSink) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TimeSeriesForwarderSink_Spec_AzureEventHubSink) ProtoMessage() {}

func (m *TimeSeriesForwarderSink_Spec_AzureEventHubSink) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TimeSeriesForwarderSink_Spec_AzureEventHubSink) GotenMessage() {}

// Deprecated, Use TimeSeriesForwarderSink_Spec_AzureEventHubSink.ProtoReflect.Descriptor instead.
func (*TimeSeriesForwarderSink_Spec_AzureEventHubSink) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *TimeSeriesForwarderSink_Spec_AzureEventHubSink) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TimeSeriesForwarderSink_Spec_AzureEventHubSink) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TimeSeriesForwarderSink_Spec_AzureEventHubSink) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TimeSeriesForwarderSink_Spec_AzureEventHubSink) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TimeSeriesForwarderSink_Spec_AzureEventHubSink) GetEndpoint() *secrets_secret.Reference {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *TimeSeriesForwarderSink_Spec_AzureEventHubSink) SetEndpoint(fv *secrets_secret.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Endpoint", "TimeSeriesForwarderSink_Spec_AzureEventHubSink"))
	}
	m.Endpoint = fv
}

var edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x07,
	0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xb2, 0xda, 0x21, 0x1b, 0x0a, 0x19, 0x0a,
	0x17, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x2a, 0x04, 0x22, 0x02, 0x08, 0x40, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xdf, 0x02, 0x0a,
	0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x53, 0x69, 0x6e, 0x6b,
	0x48, 0x00, 0x52, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75,
	0x62, 0x1a, 0x54, 0x0a, 0x11, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x75, 0x62, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x3f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f, 0x12, 0x1d,
	0x0a, 0x19, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x01, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4e,
	0x41, 0x50, 0x50, 0x59, 0x10, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x1a, 0x1e,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0xd1,
	0x01, 0xea, 0x41, 0x79, 0x0a, 0x2d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x6e, 0x6b, 0x12, 0x48, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73,
	0x2f, 0x7b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x7d, 0x92, 0xd9, 0x21,
	0x3f, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x38, 0x05,
	0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xe2, 0xde, 0x21, 0x02,
	0x08, 0x01, 0x42, 0x8e, 0x03, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x6d, 0x0a, 0x20,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x34,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0xa2, 0x80, 0xd1, 0x02, 0x6f,
	0x0a, 0x21, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x0a,
	0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x34, 0x42, 0x1c, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x68, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x3b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x6e, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDescData = edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDesc
)

func edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDescData
}

var edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_goTypes = []interface{}{
	(TimeSeriesForwarderSink_Spec_Compression)(0),          // 0: ntt.monitoring.v4.TimeSeriesForwarderSink_Spec_Compression
	(*TimeSeriesForwarderSink)(nil),                        // 1: ntt.monitoring.v4.TimeSeriesForwarderSink
	(*TimeSeriesForwarderSink_Spec)(nil),                   // 2: ntt.monitoring.v4.TimeSeriesForwarderSink.Spec
	(*TimeSeriesForwarderSink_Status)(nil),                 // 3: ntt.monitoring.v4.TimeSeriesForwarderSink.Status
	(*TimeSeriesForwarderSink_Spec_AzureEventHubSink)(nil), // 4: ntt.monitoring.v4.TimeSeriesForwarderSink.Spec.AzureEventHubSink
	(*meta.Meta)(nil),                                      // 5: goten.types.Meta
}
var edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_depIdxs = []int32{
	5, // 0: ntt.monitoring.v4.TimeSeriesForwarderSink.metadata:type_name -> goten.types.Meta
	2, // 1: ntt.monitoring.v4.TimeSeriesForwarderSink.spec:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink.Spec
	3, // 2: ntt.monitoring.v4.TimeSeriesForwarderSink.status:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink.Status
	0, // 3: ntt.monitoring.v4.TimeSeriesForwarderSink.Spec.compression:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink_Spec_Compression
	4, // 4: ntt.monitoring.v4.TimeSeriesForwarderSink.Spec.azure_event_hub:type_name -> ntt.monitoring.v4.TimeSeriesForwarderSink.Spec.AzureEventHubSink
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_init() }
func edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_init() {
	if edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeriesForwarderSink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeriesForwarderSink_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeriesForwarderSink_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TimeSeriesForwarderSink_Spec_AzureEventHub)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_depIdxs,
		EnumInfos:         edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_enumTypes,
		MessageInfos:      edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto = out.File
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_rawDesc = nil
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_goTypes = nil
	edgelq_monitoring_proto_v4_time_series_forwarder_sink_proto_depIdxs = nil
}
