// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v4/time_series_forwarder_sink.proto
// DO NOT EDIT!!!

package time_series_forwarder_sink

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TimeSeriesForwarderSink_FieldPath interface {
	gotenobject.FieldPath
	Selector() TimeSeriesForwarderSink_FieldPathSelector
	Get(source *TimeSeriesForwarderSink) []interface{}
	GetSingle(source *TimeSeriesForwarderSink) (interface{}, bool)
	ClearValue(item *TimeSeriesForwarderSink)

	// Those methods build corresponding TimeSeriesForwarderSink_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TimeSeriesForwarderSink_FieldPathValue
	WithIArrayOfValues(values interface{}) TimeSeriesForwarderSink_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TimeSeriesForwarderSink_FieldPathArrayItemValue
}

type TimeSeriesForwarderSink_FieldPathSelector int32

const (
	TimeSeriesForwarderSink_FieldPathSelectorName        TimeSeriesForwarderSink_FieldPathSelector = 0
	TimeSeriesForwarderSink_FieldPathSelectorMetadata    TimeSeriesForwarderSink_FieldPathSelector = 1
	TimeSeriesForwarderSink_FieldPathSelectorDisplayName TimeSeriesForwarderSink_FieldPathSelector = 2
	TimeSeriesForwarderSink_FieldPathSelectorSpec        TimeSeriesForwarderSink_FieldPathSelector = 3
	TimeSeriesForwarderSink_FieldPathSelectorStatus      TimeSeriesForwarderSink_FieldPathSelector = 4
)

func (s TimeSeriesForwarderSink_FieldPathSelector) String() string {
	switch s {
	case TimeSeriesForwarderSink_FieldPathSelectorName:
		return "name"
	case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
		return "metadata"
	case TimeSeriesForwarderSink_FieldPathSelectorDisplayName:
		return "display_name"
	case TimeSeriesForwarderSink_FieldPathSelectorSpec:
		return "spec"
	case TimeSeriesForwarderSink_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", s))
	}
}

func BuildTimeSeriesForwarderSink_FieldPath(fp gotenobject.RawFieldPath) (TimeSeriesForwarderSink_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TimeSeriesForwarderSink")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorName}, nil
		case "metadata":
			return &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorDisplayName}, nil
		case "spec":
			return &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorSpec}, nil
		case "status":
			return &TimeSeriesForwarderSink_FieldTerminalPath{selector: TimeSeriesForwarderSink_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TimeSeriesForwarderSink_FieldSubPath{selector: TimeSeriesForwarderSink_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildTimeSeriesForwarderSinkSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TimeSeriesForwarderSink_FieldSubPath{selector: TimeSeriesForwarderSink_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildTimeSeriesForwarderSinkStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TimeSeriesForwarderSink_FieldSubPath{selector: TimeSeriesForwarderSink_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TimeSeriesForwarderSink", fp)
}

func ParseTimeSeriesForwarderSink_FieldPath(rawField string) (TimeSeriesForwarderSink_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTimeSeriesForwarderSink_FieldPath(fp)
}

func MustParseTimeSeriesForwarderSink_FieldPath(rawField string) TimeSeriesForwarderSink_FieldPath {
	fp, err := ParseTimeSeriesForwarderSink_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TimeSeriesForwarderSink_FieldTerminalPath struct {
	selector TimeSeriesForwarderSink_FieldPathSelector
}

var _ TimeSeriesForwarderSink_FieldPath = (*TimeSeriesForwarderSink_FieldTerminalPath)(nil)

func (fp *TimeSeriesForwarderSink_FieldTerminalPath) Selector() TimeSeriesForwarderSink_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TimeSeriesForwarderSink_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TimeSeriesForwarderSink_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TimeSeriesForwarderSink
func (fp *TimeSeriesForwarderSink_FieldTerminalPath) Get(source *TimeSeriesForwarderSink) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TimeSeriesForwarderSink_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case TimeSeriesForwarderSink_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case TimeSeriesForwarderSink_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case TimeSeriesForwarderSink_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fp.selector))
		}
	}
	return
}

func (fp *TimeSeriesForwarderSink_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TimeSeriesForwarderSink))
}

// GetSingle returns value pointed by specific field of from source TimeSeriesForwarderSink
func (fp *TimeSeriesForwarderSink_FieldTerminalPath) GetSingle(source *TimeSeriesForwarderSink) (interface{}, bool) {
	switch fp.selector {
	case TimeSeriesForwarderSink_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case TimeSeriesForwarderSink_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case TimeSeriesForwarderSink_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case TimeSeriesForwarderSink_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSink_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TimeSeriesForwarderSink))
}

// GetDefault returns a default value of the field type
func (fp *TimeSeriesForwarderSink_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TimeSeriesForwarderSink_FieldPathSelectorName:
		return (*Name)(nil)
	case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case TimeSeriesForwarderSink_FieldPathSelectorDisplayName:
		return ""
	case TimeSeriesForwarderSink_FieldPathSelectorSpec:
		return (*TimeSeriesForwarderSink_Spec)(nil)
	case TimeSeriesForwarderSink_FieldPathSelectorStatus:
		return (*TimeSeriesForwarderSink_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSink_FieldTerminalPath) ClearValue(item *TimeSeriesForwarderSink) {
	if item != nil {
		switch fp.selector {
		case TimeSeriesForwarderSink_FieldPathSelectorName:
			item.Name = nil
		case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
			item.Metadata = nil
		case TimeSeriesForwarderSink_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case TimeSeriesForwarderSink_FieldPathSelectorSpec:
			item.Spec = nil
		case TimeSeriesForwarderSink_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fp.selector))
		}
	}
}

func (fp *TimeSeriesForwarderSink_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TimeSeriesForwarderSink))
}

// IsLeaf - whether field path is holds simple value
func (fp *TimeSeriesForwarderSink_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TimeSeriesForwarderSink_FieldPathSelectorName ||
		fp.selector == TimeSeriesForwarderSink_FieldPathSelectorDisplayName
}

func (fp *TimeSeriesForwarderSink_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TimeSeriesForwarderSink_FieldTerminalPath) WithIValue(value interface{}) TimeSeriesForwarderSink_FieldPathValue {
	switch fp.selector {
	case TimeSeriesForwarderSink_FieldPathSelectorName:
		return &TimeSeriesForwarderSink_FieldTerminalPathValue{TimeSeriesForwarderSink_FieldTerminalPath: *fp, value: value.(*Name)}
	case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
		return &TimeSeriesForwarderSink_FieldTerminalPathValue{TimeSeriesForwarderSink_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case TimeSeriesForwarderSink_FieldPathSelectorDisplayName:
		return &TimeSeriesForwarderSink_FieldTerminalPathValue{TimeSeriesForwarderSink_FieldTerminalPath: *fp, value: value.(string)}
	case TimeSeriesForwarderSink_FieldPathSelectorSpec:
		return &TimeSeriesForwarderSink_FieldTerminalPathValue{TimeSeriesForwarderSink_FieldTerminalPath: *fp, value: value.(*TimeSeriesForwarderSink_Spec)}
	case TimeSeriesForwarderSink_FieldPathSelectorStatus:
		return &TimeSeriesForwarderSink_FieldTerminalPathValue{TimeSeriesForwarderSink_FieldTerminalPath: *fp, value: value.(*TimeSeriesForwarderSink_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSink_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TimeSeriesForwarderSink_FieldTerminalPath) WithIArrayOfValues(values interface{}) TimeSeriesForwarderSink_FieldPathArrayOfValues {
	fpaov := &TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues{TimeSeriesForwarderSink_FieldTerminalPath: *fp}
	switch fp.selector {
	case TimeSeriesForwarderSink_FieldPathSelectorName:
		return &TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues{TimeSeriesForwarderSink_FieldTerminalPath: *fp, values: values.([]*Name)}
	case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
		return &TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues{TimeSeriesForwarderSink_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case TimeSeriesForwarderSink_FieldPathSelectorDisplayName:
		return &TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues{TimeSeriesForwarderSink_FieldTerminalPath: *fp, values: values.([]string)}
	case TimeSeriesForwarderSink_FieldPathSelectorSpec:
		return &TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues{TimeSeriesForwarderSink_FieldTerminalPath: *fp, values: values.([]*TimeSeriesForwarderSink_Spec)}
	case TimeSeriesForwarderSink_FieldPathSelectorStatus:
		return &TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues{TimeSeriesForwarderSink_FieldTerminalPath: *fp, values: values.([]*TimeSeriesForwarderSink_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fp.selector))
	}
	return fpaov
}

func (fp *TimeSeriesForwarderSink_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TimeSeriesForwarderSink_FieldTerminalPath) WithIArrayItemValue(value interface{}) TimeSeriesForwarderSink_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSink_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type TimeSeriesForwarderSink_FieldSubPath struct {
	selector TimeSeriesForwarderSink_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ TimeSeriesForwarderSink_FieldPath = (*TimeSeriesForwarderSink_FieldSubPath)(nil)

func (fps *TimeSeriesForwarderSink_FieldSubPath) Selector() TimeSeriesForwarderSink_FieldPathSelector {
	return fps.selector
}
func (fps *TimeSeriesForwarderSink_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *TimeSeriesForwarderSink_FieldSubPath) AsSpecSubPath() (TimeSeriesForwarderSinkSpec_FieldPath, bool) {
	res, ok := fps.subPath.(TimeSeriesForwarderSinkSpec_FieldPath)
	return res, ok
}
func (fps *TimeSeriesForwarderSink_FieldSubPath) AsStatusSubPath() (TimeSeriesForwarderSinkStatus_FieldPath, bool) {
	res, ok := fps.subPath.(TimeSeriesForwarderSinkStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *TimeSeriesForwarderSink_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *TimeSeriesForwarderSink_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source TimeSeriesForwarderSink
func (fps *TimeSeriesForwarderSink_FieldSubPath) Get(source *TimeSeriesForwarderSink) (values []interface{}) {
	switch fps.selector {
	case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case TimeSeriesForwarderSink_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	case TimeSeriesForwarderSink_FieldPathSelectorStatus:
		values = append(values, fps.subPath.GetRaw(source.GetStatus())...)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fps.selector))
	}
	return
}

func (fps *TimeSeriesForwarderSink_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*TimeSeriesForwarderSink))
}

// GetSingle returns value of selected field from source TimeSeriesForwarderSink
func (fps *TimeSeriesForwarderSink_FieldSubPath) GetSingle(source *TimeSeriesForwarderSink) (interface{}, bool) {
	switch fps.selector {
	case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case TimeSeriesForwarderSink_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case TimeSeriesForwarderSink_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fps.selector))
	}
}

func (fps *TimeSeriesForwarderSink_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*TimeSeriesForwarderSink))
}

// GetDefault returns a default value of the field type
func (fps *TimeSeriesForwarderSink_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *TimeSeriesForwarderSink_FieldSubPath) ClearValue(item *TimeSeriesForwarderSink) {
	if item != nil {
		switch fps.selector {
		case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case TimeSeriesForwarderSink_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case TimeSeriesForwarderSink_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fps.selector))
		}
	}
}

func (fps *TimeSeriesForwarderSink_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*TimeSeriesForwarderSink))
}

// IsLeaf - whether field path is holds simple value
func (fps *TimeSeriesForwarderSink_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *TimeSeriesForwarderSink_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&TimeSeriesForwarderSink_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *TimeSeriesForwarderSink_FieldSubPath) WithIValue(value interface{}) TimeSeriesForwarderSink_FieldPathValue {
	return &TimeSeriesForwarderSink_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *TimeSeriesForwarderSink_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *TimeSeriesForwarderSink_FieldSubPath) WithIArrayOfValues(values interface{}) TimeSeriesForwarderSink_FieldPathArrayOfValues {
	return &TimeSeriesForwarderSink_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *TimeSeriesForwarderSink_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *TimeSeriesForwarderSink_FieldSubPath) WithIArrayItemValue(value interface{}) TimeSeriesForwarderSink_FieldPathArrayItemValue {
	return &TimeSeriesForwarderSink_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *TimeSeriesForwarderSink_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// TimeSeriesForwarderSink_FieldPathValue allows storing values for TimeSeriesForwarderSink fields according to their type
type TimeSeriesForwarderSink_FieldPathValue interface {
	TimeSeriesForwarderSink_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TimeSeriesForwarderSink)
	CompareWith(*TimeSeriesForwarderSink) (cmp int, comparable bool)
}

func ParseTimeSeriesForwarderSink_FieldPathValue(pathStr, valueStr string) (TimeSeriesForwarderSink_FieldPathValue, error) {
	fp, err := ParseTimeSeriesForwarderSink_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TimeSeriesForwarderSink field path value from %s: %v", valueStr, err)
	}
	return fpv.(TimeSeriesForwarderSink_FieldPathValue), nil
}

func MustParseTimeSeriesForwarderSink_FieldPathValue(pathStr, valueStr string) TimeSeriesForwarderSink_FieldPathValue {
	fpv, err := ParseTimeSeriesForwarderSink_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TimeSeriesForwarderSink_FieldTerminalPathValue struct {
	TimeSeriesForwarderSink_FieldTerminalPath
	value interface{}
}

var _ TimeSeriesForwarderSink_FieldPathValue = (*TimeSeriesForwarderSink_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'TimeSeriesForwarderSink' as interface{}
func (fpv *TimeSeriesForwarderSink_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TimeSeriesForwarderSink_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *TimeSeriesForwarderSink_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *TimeSeriesForwarderSink_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *TimeSeriesForwarderSink_FieldTerminalPathValue) AsSpecValue() (*TimeSeriesForwarderSink_Spec, bool) {
	res, ok := fpv.value.(*TimeSeriesForwarderSink_Spec)
	return res, ok
}
func (fpv *TimeSeriesForwarderSink_FieldTerminalPathValue) AsStatusValue() (*TimeSeriesForwarderSink_Status, bool) {
	res, ok := fpv.value.(*TimeSeriesForwarderSink_Status)
	return res, ok
}

// SetTo stores value for selected field for object TimeSeriesForwarderSink
func (fpv *TimeSeriesForwarderSink_FieldTerminalPathValue) SetTo(target **TimeSeriesForwarderSink) {
	if *target == nil {
		*target = new(TimeSeriesForwarderSink)
	}
	switch fpv.selector {
	case TimeSeriesForwarderSink_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case TimeSeriesForwarderSink_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case TimeSeriesForwarderSink_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*TimeSeriesForwarderSink_Spec)
	case TimeSeriesForwarderSink_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*TimeSeriesForwarderSink_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fpv.selector))
	}
}

func (fpv *TimeSeriesForwarderSink_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TimeSeriesForwarderSink)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TimeSeriesForwarderSink_FieldTerminalPathValue' with the value under path in 'TimeSeriesForwarderSink'.
func (fpv *TimeSeriesForwarderSink_FieldTerminalPathValue) CompareWith(source *TimeSeriesForwarderSink) (int, bool) {
	switch fpv.selector {
	case TimeSeriesForwarderSink_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
		return 0, false
	case TimeSeriesForwarderSink_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TimeSeriesForwarderSink_FieldPathSelectorSpec:
		return 0, false
	case TimeSeriesForwarderSink_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fpv.selector))
	}
}

func (fpv *TimeSeriesForwarderSink_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TimeSeriesForwarderSink))
}

type TimeSeriesForwarderSink_FieldSubPathValue struct {
	TimeSeriesForwarderSink_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ TimeSeriesForwarderSink_FieldPathValue = (*TimeSeriesForwarderSink_FieldSubPathValue)(nil)

func (fpvs *TimeSeriesForwarderSink_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *TimeSeriesForwarderSink_FieldSubPathValue) AsSpecPathValue() (TimeSeriesForwarderSinkSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TimeSeriesForwarderSinkSpec_FieldPathValue)
	return res, ok
}
func (fpvs *TimeSeriesForwarderSink_FieldSubPathValue) AsStatusPathValue() (TimeSeriesForwarderSinkStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TimeSeriesForwarderSinkStatus_FieldPathValue)
	return res, ok
}

func (fpvs *TimeSeriesForwarderSink_FieldSubPathValue) SetTo(target **TimeSeriesForwarderSink) {
	if *target == nil {
		*target = new(TimeSeriesForwarderSink)
	}
	switch fpvs.Selector() {
	case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case TimeSeriesForwarderSink_FieldPathSelectorSpec:
		fpvs.subPathValue.(TimeSeriesForwarderSinkSpec_FieldPathValue).SetTo(&(*target).Spec)
	case TimeSeriesForwarderSink_FieldPathSelectorStatus:
		fpvs.subPathValue.(TimeSeriesForwarderSinkStatus_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fpvs.Selector()))
	}
}

func (fpvs *TimeSeriesForwarderSink_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TimeSeriesForwarderSink)
	fpvs.SetTo(&typedObject)
}

func (fpvs *TimeSeriesForwarderSink_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *TimeSeriesForwarderSink_FieldSubPathValue) CompareWith(source *TimeSeriesForwarderSink) (int, bool) {
	switch fpvs.Selector() {
	case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case TimeSeriesForwarderSink_FieldPathSelectorSpec:
		return fpvs.subPathValue.(TimeSeriesForwarderSinkSpec_FieldPathValue).CompareWith(source.GetSpec())
	case TimeSeriesForwarderSink_FieldPathSelectorStatus:
		return fpvs.subPathValue.(TimeSeriesForwarderSinkStatus_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fpvs.Selector()))
	}
}

func (fpvs *TimeSeriesForwarderSink_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*TimeSeriesForwarderSink))
}

// TimeSeriesForwarderSink_FieldPathArrayItemValue allows storing single item in Path-specific values for TimeSeriesForwarderSink according to their type
// Present only for array (repeated) types.
type TimeSeriesForwarderSink_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TimeSeriesForwarderSink_FieldPath
	ContainsValue(*TimeSeriesForwarderSink) bool
}

// ParseTimeSeriesForwarderSink_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTimeSeriesForwarderSink_FieldPathArrayItemValue(pathStr, valueStr string) (TimeSeriesForwarderSink_FieldPathArrayItemValue, error) {
	fp, err := ParseTimeSeriesForwarderSink_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TimeSeriesForwarderSink field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TimeSeriesForwarderSink_FieldPathArrayItemValue), nil
}

func MustParseTimeSeriesForwarderSink_FieldPathArrayItemValue(pathStr, valueStr string) TimeSeriesForwarderSink_FieldPathArrayItemValue {
	fpaiv, err := ParseTimeSeriesForwarderSink_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TimeSeriesForwarderSink_FieldTerminalPathArrayItemValue struct {
	TimeSeriesForwarderSink_FieldTerminalPath
	value interface{}
}

var _ TimeSeriesForwarderSink_FieldPathArrayItemValue = (*TimeSeriesForwarderSink_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TimeSeriesForwarderSink as interface{}
func (fpaiv *TimeSeriesForwarderSink_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *TimeSeriesForwarderSink_FieldTerminalPathArrayItemValue) GetSingle(source *TimeSeriesForwarderSink) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TimeSeriesForwarderSink_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TimeSeriesForwarderSink))
}

// Contains returns a boolean indicating if value that is being held is present in given 'TimeSeriesForwarderSink'
func (fpaiv *TimeSeriesForwarderSink_FieldTerminalPathArrayItemValue) ContainsValue(source *TimeSeriesForwarderSink) bool {
	slice := fpaiv.TimeSeriesForwarderSink_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type TimeSeriesForwarderSink_FieldSubPathArrayItemValue struct {
	TimeSeriesForwarderSink_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *TimeSeriesForwarderSink_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *TimeSeriesForwarderSink_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TimeSeriesForwarderSink_FieldSubPathArrayItemValue) AsSpecPathItemValue() (TimeSeriesForwarderSinkSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TimeSeriesForwarderSinkSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TimeSeriesForwarderSink_FieldSubPathArrayItemValue) AsStatusPathItemValue() (TimeSeriesForwarderSinkStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TimeSeriesForwarderSinkStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'TimeSeriesForwarderSink'
func (fpaivs *TimeSeriesForwarderSink_FieldSubPathArrayItemValue) ContainsValue(source *TimeSeriesForwarderSink) bool {
	switch fpaivs.Selector() {
	case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case TimeSeriesForwarderSink_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(TimeSeriesForwarderSinkSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case TimeSeriesForwarderSink_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(TimeSeriesForwarderSinkStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink: %d", fpaivs.Selector()))
	}
}

// TimeSeriesForwarderSink_FieldPathArrayOfValues allows storing slice of values for TimeSeriesForwarderSink fields according to their type
type TimeSeriesForwarderSink_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TimeSeriesForwarderSink_FieldPath
}

func ParseTimeSeriesForwarderSink_FieldPathArrayOfValues(pathStr, valuesStr string) (TimeSeriesForwarderSink_FieldPathArrayOfValues, error) {
	fp, err := ParseTimeSeriesForwarderSink_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TimeSeriesForwarderSink field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TimeSeriesForwarderSink_FieldPathArrayOfValues), nil
}

func MustParseTimeSeriesForwarderSink_FieldPathArrayOfValues(pathStr, valuesStr string) TimeSeriesForwarderSink_FieldPathArrayOfValues {
	fpaov, err := ParseTimeSeriesForwarderSink_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues struct {
	TimeSeriesForwarderSink_FieldTerminalPath
	values interface{}
}

var _ TimeSeriesForwarderSink_FieldPathArrayOfValues = (*TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TimeSeriesForwarderSink_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case TimeSeriesForwarderSink_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case TimeSeriesForwarderSink_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case TimeSeriesForwarderSink_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*TimeSeriesForwarderSink_Spec) {
			values = append(values, v)
		}
	case TimeSeriesForwarderSink_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*TimeSeriesForwarderSink_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*TimeSeriesForwarderSink_Spec, bool) {
	res, ok := fpaov.values.([]*TimeSeriesForwarderSink_Spec)
	return res, ok
}
func (fpaov *TimeSeriesForwarderSink_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*TimeSeriesForwarderSink_Status, bool) {
	res, ok := fpaov.values.([]*TimeSeriesForwarderSink_Status)
	return res, ok
}

type TimeSeriesForwarderSink_FieldSubPathArrayOfValues struct {
	TimeSeriesForwarderSink_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ TimeSeriesForwarderSink_FieldPathArrayOfValues = (*TimeSeriesForwarderSink_FieldSubPathArrayOfValues)(nil)

func (fpsaov *TimeSeriesForwarderSink_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *TimeSeriesForwarderSink_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TimeSeriesForwarderSink_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (TimeSeriesForwarderSinkSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TimeSeriesForwarderSinkSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TimeSeriesForwarderSink_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (TimeSeriesForwarderSinkStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TimeSeriesForwarderSinkStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TimeSeriesForwarderSinkSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() TimeSeriesForwarderSinkSpec_FieldPathSelector
	Get(source *TimeSeriesForwarderSink_Spec) []interface{}
	GetSingle(source *TimeSeriesForwarderSink_Spec) (interface{}, bool)
	ClearValue(item *TimeSeriesForwarderSink_Spec)

	// Those methods build corresponding TimeSeriesForwarderSinkSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TimeSeriesForwarderSinkSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) TimeSeriesForwarderSinkSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TimeSeriesForwarderSinkSpec_FieldPathArrayItemValue
}

type TimeSeriesForwarderSinkSpec_FieldPathSelector int32

const (
	TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression   TimeSeriesForwarderSinkSpec_FieldPathSelector = 0
	TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub TimeSeriesForwarderSinkSpec_FieldPathSelector = 1
)

func (s TimeSeriesForwarderSinkSpec_FieldPathSelector) String() string {
	switch s {
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression:
		return "compression"
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
		return "azure_event_hub"
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", s))
	}
}

func BuildTimeSeriesForwarderSinkSpec_FieldPath(fp gotenobject.RawFieldPath) (TimeSeriesForwarderSinkSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TimeSeriesForwarderSink_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "compression":
			return &TimeSeriesForwarderSinkSpec_FieldTerminalPath{selector: TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression}, nil
		case "azure_event_hub", "azureEventHub", "azure-event-hub":
			return &TimeSeriesForwarderSinkSpec_FieldTerminalPath{selector: TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub}, nil
		}
	} else {
		switch fp[0] {
		case "azure_event_hub", "azureEventHub", "azure-event-hub":
			if subpath, err := BuildTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TimeSeriesForwarderSinkSpec_FieldSubPath{selector: TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TimeSeriesForwarderSink_Spec", fp)
}

func ParseTimeSeriesForwarderSinkSpec_FieldPath(rawField string) (TimeSeriesForwarderSinkSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTimeSeriesForwarderSinkSpec_FieldPath(fp)
}

func MustParseTimeSeriesForwarderSinkSpec_FieldPath(rawField string) TimeSeriesForwarderSinkSpec_FieldPath {
	fp, err := ParseTimeSeriesForwarderSinkSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TimeSeriesForwarderSinkSpec_FieldTerminalPath struct {
	selector TimeSeriesForwarderSinkSpec_FieldPathSelector
}

var _ TimeSeriesForwarderSinkSpec_FieldPath = (*TimeSeriesForwarderSinkSpec_FieldTerminalPath)(nil)

func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) Selector() TimeSeriesForwarderSinkSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TimeSeriesForwarderSink_Spec
func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) Get(source *TimeSeriesForwarderSink_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression:
			values = append(values, source.Compression)
		case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
			if source, ok := source.Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub); ok && source != nil {
				if source.AzureEventHub != nil {
					values = append(values, source.AzureEventHub)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TimeSeriesForwarderSink_Spec))
}

// GetSingle returns value pointed by specific field of from source TimeSeriesForwarderSink_Spec
func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) GetSingle(source *TimeSeriesForwarderSink_Spec) (interface{}, bool) {
	switch fp.selector {
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression:
		return source.GetCompression(), source != nil
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
		// if object nil or oneof not active, return "default" type with false flag.
		if source == nil {
			return source.GetAzureEventHub(), false
		}
		_, oneOfSelected := source.Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub)
		if !oneOfSelected {
			return source.GetAzureEventHub(), false // to return "type" information
		}
		res := source.GetAzureEventHub()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TimeSeriesForwarderSink_Spec))
}

// GetDefault returns a default value of the field type
func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression:
		return TimeSeriesForwarderSink_Spec_NO_COMPRESSION
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
		return (*TimeSeriesForwarderSink_Spec_AzureEventHubSink)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) ClearValue(item *TimeSeriesForwarderSink_Spec) {
	if item != nil {
		switch fp.selector {
		case TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression:
			item.Compression = TimeSeriesForwarderSink_Spec_NO_COMPRESSION
		case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
			if item, ok := item.Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub); ok {
				item.AzureEventHub = nil
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fp.selector))
		}
	}
}

func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TimeSeriesForwarderSink_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression
}

func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) WithIValue(value interface{}) TimeSeriesForwarderSinkSpec_FieldPathValue {
	switch fp.selector {
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression:
		return &TimeSeriesForwarderSinkSpec_FieldTerminalPathValue{TimeSeriesForwarderSinkSpec_FieldTerminalPath: *fp, value: value.(TimeSeriesForwarderSink_Spec_Compression)}
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
		return &TimeSeriesForwarderSinkSpec_FieldTerminalPathValue{TimeSeriesForwarderSinkSpec_FieldTerminalPath: *fp, value: value.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) TimeSeriesForwarderSinkSpec_FieldPathArrayOfValues {
	fpaov := &TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayOfValues{TimeSeriesForwarderSinkSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression:
		return &TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayOfValues{TimeSeriesForwarderSinkSpec_FieldTerminalPath: *fp, values: values.([]TimeSeriesForwarderSink_Spec_Compression)}
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
		return &TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayOfValues{TimeSeriesForwarderSinkSpec_FieldTerminalPath: *fp, values: values.([]*TimeSeriesForwarderSink_Spec_AzureEventHubSink)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) TimeSeriesForwarderSinkSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSinkSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type TimeSeriesForwarderSinkSpec_FieldSubPath struct {
	selector TimeSeriesForwarderSinkSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ TimeSeriesForwarderSinkSpec_FieldPath = (*TimeSeriesForwarderSinkSpec_FieldSubPath)(nil)

func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) Selector() TimeSeriesForwarderSinkSpec_FieldPathSelector {
	return fps.selector
}
func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) AsAzureEventHubSubPath() (TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath, bool) {
	res, ok := fps.subPath.(TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source TimeSeriesForwarderSink_Spec
func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) Get(source *TimeSeriesForwarderSink_Spec) (values []interface{}) {
	switch fps.selector {
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
		values = append(values, fps.subPath.GetRaw(source.GetAzureEventHub())...)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fps.selector))
	}
	return
}

func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*TimeSeriesForwarderSink_Spec))
}

// GetSingle returns value of selected field from source TimeSeriesForwarderSink_Spec
func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) GetSingle(source *TimeSeriesForwarderSink_Spec) (interface{}, bool) {
	switch fps.selector {
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
		if source.GetAzureEventHub() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAzureEventHub())
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fps.selector))
	}
}

func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*TimeSeriesForwarderSink_Spec))
}

// GetDefault returns a default value of the field type
func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) ClearValue(item *TimeSeriesForwarderSink_Spec) {
	if item != nil {
		switch fps.selector {
		case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
			if item.Sink != nil {
				if item, ok := item.Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub); ok {
					fps.subPath.ClearValueRaw(item.AzureEventHub)
				}
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fps.selector))
		}
	}
}

func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*TimeSeriesForwarderSink_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&TimeSeriesForwarderSinkSpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) WithIValue(value interface{}) TimeSeriesForwarderSinkSpec_FieldPathValue {
	return &TimeSeriesForwarderSinkSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) WithIArrayOfValues(values interface{}) TimeSeriesForwarderSinkSpec_FieldPathArrayOfValues {
	return &TimeSeriesForwarderSinkSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) WithIArrayItemValue(value interface{}) TimeSeriesForwarderSinkSpec_FieldPathArrayItemValue {
	return &TimeSeriesForwarderSinkSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *TimeSeriesForwarderSinkSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// TimeSeriesForwarderSinkSpec_FieldPathValue allows storing values for Spec fields according to their type
type TimeSeriesForwarderSinkSpec_FieldPathValue interface {
	TimeSeriesForwarderSinkSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TimeSeriesForwarderSink_Spec)
	CompareWith(*TimeSeriesForwarderSink_Spec) (cmp int, comparable bool)
}

func ParseTimeSeriesForwarderSinkSpec_FieldPathValue(pathStr, valueStr string) (TimeSeriesForwarderSinkSpec_FieldPathValue, error) {
	fp, err := ParseTimeSeriesForwarderSinkSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(TimeSeriesForwarderSinkSpec_FieldPathValue), nil
}

func MustParseTimeSeriesForwarderSinkSpec_FieldPathValue(pathStr, valueStr string) TimeSeriesForwarderSinkSpec_FieldPathValue {
	fpv, err := ParseTimeSeriesForwarderSinkSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TimeSeriesForwarderSinkSpec_FieldTerminalPathValue struct {
	TimeSeriesForwarderSinkSpec_FieldTerminalPath
	value interface{}
}

var _ TimeSeriesForwarderSinkSpec_FieldPathValue = (*TimeSeriesForwarderSinkSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *TimeSeriesForwarderSinkSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TimeSeriesForwarderSinkSpec_FieldTerminalPathValue) AsCompressionValue() (TimeSeriesForwarderSink_Spec_Compression, bool) {
	res, ok := fpv.value.(TimeSeriesForwarderSink_Spec_Compression)
	return res, ok
}
func (fpv *TimeSeriesForwarderSinkSpec_FieldTerminalPathValue) AsAzureEventHubValue() (*TimeSeriesForwarderSink_Spec_AzureEventHubSink, bool) {
	res, ok := fpv.value.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *TimeSeriesForwarderSinkSpec_FieldTerminalPathValue) SetTo(target **TimeSeriesForwarderSink_Spec) {
	if *target == nil {
		*target = new(TimeSeriesForwarderSink_Spec)
	}
	switch fpv.selector {
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression:
		(*target).Compression = fpv.value.(TimeSeriesForwarderSink_Spec_Compression)
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
		if _, ok := (*target).Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub); !ok {
			(*target).Sink = &TimeSeriesForwarderSink_Spec_AzureEventHub{}
		}
		(*target).Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub).AzureEventHub = fpv.value.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fpv.selector))
	}
}

func (fpv *TimeSeriesForwarderSinkSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TimeSeriesForwarderSink_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TimeSeriesForwarderSinkSpec_FieldTerminalPathValue' with the value under path in 'TimeSeriesForwarderSink_Spec'.
func (fpv *TimeSeriesForwarderSinkSpec_FieldTerminalPathValue) CompareWith(source *TimeSeriesForwarderSink_Spec) (int, bool) {
	switch fpv.selector {
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression:
		leftValue := fpv.value.(TimeSeriesForwarderSink_Spec_Compression)
		rightValue := source.GetCompression()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fpv.selector))
	}
}

func (fpv *TimeSeriesForwarderSinkSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TimeSeriesForwarderSink_Spec))
}

type TimeSeriesForwarderSinkSpec_FieldSubPathValue struct {
	TimeSeriesForwarderSinkSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ TimeSeriesForwarderSinkSpec_FieldPathValue = (*TimeSeriesForwarderSinkSpec_FieldSubPathValue)(nil)

func (fpvs *TimeSeriesForwarderSinkSpec_FieldSubPathValue) AsAzureEventHubPathValue() (TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue)
	return res, ok
}

func (fpvs *TimeSeriesForwarderSinkSpec_FieldSubPathValue) SetTo(target **TimeSeriesForwarderSink_Spec) {
	if *target == nil {
		*target = new(TimeSeriesForwarderSink_Spec)
	}
	switch fpvs.Selector() {
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
		if _, ok := (*target).Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub); !ok {
			(*target).Sink = &TimeSeriesForwarderSink_Spec_AzureEventHub{}
		}
		fpvs.subPathValue.(TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue).SetTo(&(*target).Sink.(*TimeSeriesForwarderSink_Spec_AzureEventHub).AzureEventHub)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *TimeSeriesForwarderSinkSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TimeSeriesForwarderSink_Spec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *TimeSeriesForwarderSinkSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *TimeSeriesForwarderSinkSpec_FieldSubPathValue) CompareWith(source *TimeSeriesForwarderSink_Spec) (int, bool) {
	switch fpvs.Selector() {
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
		return fpvs.subPathValue.(TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue).CompareWith(source.GetAzureEventHub())
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *TimeSeriesForwarderSinkSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*TimeSeriesForwarderSink_Spec))
}

// TimeSeriesForwarderSinkSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type TimeSeriesForwarderSinkSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TimeSeriesForwarderSinkSpec_FieldPath
	ContainsValue(*TimeSeriesForwarderSink_Spec) bool
}

// ParseTimeSeriesForwarderSinkSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTimeSeriesForwarderSinkSpec_FieldPathArrayItemValue(pathStr, valueStr string) (TimeSeriesForwarderSinkSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseTimeSeriesForwarderSinkSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TimeSeriesForwarderSinkSpec_FieldPathArrayItemValue), nil
}

func MustParseTimeSeriesForwarderSinkSpec_FieldPathArrayItemValue(pathStr, valueStr string) TimeSeriesForwarderSinkSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseTimeSeriesForwarderSinkSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayItemValue struct {
	TimeSeriesForwarderSinkSpec_FieldTerminalPath
	value interface{}
}

var _ TimeSeriesForwarderSinkSpec_FieldPathArrayItemValue = (*TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TimeSeriesForwarderSink_Spec as interface{}
func (fpaiv *TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayItemValue) GetSingle(source *TimeSeriesForwarderSink_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TimeSeriesForwarderSink_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *TimeSeriesForwarderSink_Spec) bool {
	slice := fpaiv.TimeSeriesForwarderSinkSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type TimeSeriesForwarderSinkSpec_FieldSubPathArrayItemValue struct {
	TimeSeriesForwarderSinkSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *TimeSeriesForwarderSinkSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *TimeSeriesForwarderSinkSpec_FieldSubPathArrayItemValue) AsAzureEventHubPathItemValue() (TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaivs *TimeSeriesForwarderSinkSpec_FieldSubPathArrayItemValue) ContainsValue(source *TimeSeriesForwarderSink_Spec) bool {
	switch fpaivs.Selector() {
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
		return fpaivs.subPathItemValue.(TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue).ContainsValue(source.GetAzureEventHub())
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec: %d", fpaivs.Selector()))
	}
}

// TimeSeriesForwarderSinkSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type TimeSeriesForwarderSinkSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TimeSeriesForwarderSinkSpec_FieldPath
}

func ParseTimeSeriesForwarderSinkSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (TimeSeriesForwarderSinkSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseTimeSeriesForwarderSinkSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TimeSeriesForwarderSinkSpec_FieldPathArrayOfValues), nil
}

func MustParseTimeSeriesForwarderSinkSpec_FieldPathArrayOfValues(pathStr, valuesStr string) TimeSeriesForwarderSinkSpec_FieldPathArrayOfValues {
	fpaov, err := ParseTimeSeriesForwarderSinkSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayOfValues struct {
	TimeSeriesForwarderSinkSpec_FieldTerminalPath
	values interface{}
}

var _ TimeSeriesForwarderSinkSpec_FieldPathArrayOfValues = (*TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorCompression:
		for _, v := range fpaov.values.([]TimeSeriesForwarderSink_Spec_Compression) {
			values = append(values, v)
		}
	case TimeSeriesForwarderSinkSpec_FieldPathSelectorAzureEventHub:
		for _, v := range fpaov.values.([]*TimeSeriesForwarderSink_Spec_AzureEventHubSink) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayOfValues) AsCompressionArrayOfValues() ([]TimeSeriesForwarderSink_Spec_Compression, bool) {
	res, ok := fpaov.values.([]TimeSeriesForwarderSink_Spec_Compression)
	return res, ok
}
func (fpaov *TimeSeriesForwarderSinkSpec_FieldTerminalPathArrayOfValues) AsAzureEventHubArrayOfValues() ([]*TimeSeriesForwarderSink_Spec_AzureEventHubSink, bool) {
	res, ok := fpaov.values.([]*TimeSeriesForwarderSink_Spec_AzureEventHubSink)
	return res, ok
}

type TimeSeriesForwarderSinkSpec_FieldSubPathArrayOfValues struct {
	TimeSeriesForwarderSinkSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ TimeSeriesForwarderSinkSpec_FieldPathArrayOfValues = (*TimeSeriesForwarderSinkSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *TimeSeriesForwarderSinkSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *TimeSeriesForwarderSinkSpec_FieldSubPathArrayOfValues) AsAzureEventHubPathArrayOfValues() (TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TimeSeriesForwarderSinkStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() TimeSeriesForwarderSinkStatus_FieldPathSelector
	Get(source *TimeSeriesForwarderSink_Status) []interface{}
	GetSingle(source *TimeSeriesForwarderSink_Status) (interface{}, bool)
	ClearValue(item *TimeSeriesForwarderSink_Status)

	// Those methods build corresponding TimeSeriesForwarderSinkStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TimeSeriesForwarderSinkStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) TimeSeriesForwarderSinkStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TimeSeriesForwarderSinkStatus_FieldPathArrayItemValue
}

type TimeSeriesForwarderSinkStatus_FieldPathSelector int32

const (
	TimeSeriesForwarderSinkStatus_FieldPathSelectorError TimeSeriesForwarderSinkStatus_FieldPathSelector = 0
)

func (s TimeSeriesForwarderSinkStatus_FieldPathSelector) String() string {
	switch s {
	case TimeSeriesForwarderSinkStatus_FieldPathSelectorError:
		return "error"
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Status: %d", s))
	}
}

func BuildTimeSeriesForwarderSinkStatus_FieldPath(fp gotenobject.RawFieldPath) (TimeSeriesForwarderSinkStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TimeSeriesForwarderSink_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "error":
			return &TimeSeriesForwarderSinkStatus_FieldTerminalPath{selector: TimeSeriesForwarderSinkStatus_FieldPathSelectorError}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TimeSeriesForwarderSink_Status", fp)
}

func ParseTimeSeriesForwarderSinkStatus_FieldPath(rawField string) (TimeSeriesForwarderSinkStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTimeSeriesForwarderSinkStatus_FieldPath(fp)
}

func MustParseTimeSeriesForwarderSinkStatus_FieldPath(rawField string) TimeSeriesForwarderSinkStatus_FieldPath {
	fp, err := ParseTimeSeriesForwarderSinkStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TimeSeriesForwarderSinkStatus_FieldTerminalPath struct {
	selector TimeSeriesForwarderSinkStatus_FieldPathSelector
}

var _ TimeSeriesForwarderSinkStatus_FieldPath = (*TimeSeriesForwarderSinkStatus_FieldTerminalPath)(nil)

func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) Selector() TimeSeriesForwarderSinkStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TimeSeriesForwarderSink_Status
func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) Get(source *TimeSeriesForwarderSink_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TimeSeriesForwarderSinkStatus_FieldPathSelectorError:
			values = append(values, source.Error)
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TimeSeriesForwarderSink_Status))
}

// GetSingle returns value pointed by specific field of from source TimeSeriesForwarderSink_Status
func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) GetSingle(source *TimeSeriesForwarderSink_Status) (interface{}, bool) {
	switch fp.selector {
	case TimeSeriesForwarderSinkStatus_FieldPathSelectorError:
		return source.GetError(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Status: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TimeSeriesForwarderSink_Status))
}

// GetDefault returns a default value of the field type
func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TimeSeriesForwarderSinkStatus_FieldPathSelectorError:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Status: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) ClearValue(item *TimeSeriesForwarderSink_Status) {
	if item != nil {
		switch fp.selector {
		case TimeSeriesForwarderSinkStatus_FieldPathSelectorError:
			item.Error = ""
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Status: %d", fp.selector))
		}
	}
}

func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TimeSeriesForwarderSink_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TimeSeriesForwarderSinkStatus_FieldPathSelectorError
}

func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) WithIValue(value interface{}) TimeSeriesForwarderSinkStatus_FieldPathValue {
	switch fp.selector {
	case TimeSeriesForwarderSinkStatus_FieldPathSelectorError:
		return &TimeSeriesForwarderSinkStatus_FieldTerminalPathValue{TimeSeriesForwarderSinkStatus_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Status: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) TimeSeriesForwarderSinkStatus_FieldPathArrayOfValues {
	fpaov := &TimeSeriesForwarderSinkStatus_FieldTerminalPathArrayOfValues{TimeSeriesForwarderSinkStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	case TimeSeriesForwarderSinkStatus_FieldPathSelectorError:
		return &TimeSeriesForwarderSinkStatus_FieldTerminalPathArrayOfValues{TimeSeriesForwarderSinkStatus_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) TimeSeriesForwarderSinkStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Status: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSinkStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// TimeSeriesForwarderSinkStatus_FieldPathValue allows storing values for Status fields according to their type
type TimeSeriesForwarderSinkStatus_FieldPathValue interface {
	TimeSeriesForwarderSinkStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TimeSeriesForwarderSink_Status)
	CompareWith(*TimeSeriesForwarderSink_Status) (cmp int, comparable bool)
}

func ParseTimeSeriesForwarderSinkStatus_FieldPathValue(pathStr, valueStr string) (TimeSeriesForwarderSinkStatus_FieldPathValue, error) {
	fp, err := ParseTimeSeriesForwarderSinkStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(TimeSeriesForwarderSinkStatus_FieldPathValue), nil
}

func MustParseTimeSeriesForwarderSinkStatus_FieldPathValue(pathStr, valueStr string) TimeSeriesForwarderSinkStatus_FieldPathValue {
	fpv, err := ParseTimeSeriesForwarderSinkStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TimeSeriesForwarderSinkStatus_FieldTerminalPathValue struct {
	TimeSeriesForwarderSinkStatus_FieldTerminalPath
	value interface{}
}

var _ TimeSeriesForwarderSinkStatus_FieldPathValue = (*TimeSeriesForwarderSinkStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *TimeSeriesForwarderSinkStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TimeSeriesForwarderSinkStatus_FieldTerminalPathValue) AsErrorValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Status
func (fpv *TimeSeriesForwarderSinkStatus_FieldTerminalPathValue) SetTo(target **TimeSeriesForwarderSink_Status) {
	if *target == nil {
		*target = new(TimeSeriesForwarderSink_Status)
	}
	switch fpv.selector {
	case TimeSeriesForwarderSinkStatus_FieldPathSelectorError:
		(*target).Error = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Status: %d", fpv.selector))
	}
}

func (fpv *TimeSeriesForwarderSinkStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TimeSeriesForwarderSink_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TimeSeriesForwarderSinkStatus_FieldTerminalPathValue' with the value under path in 'TimeSeriesForwarderSink_Status'.
func (fpv *TimeSeriesForwarderSinkStatus_FieldTerminalPathValue) CompareWith(source *TimeSeriesForwarderSink_Status) (int, bool) {
	switch fpv.selector {
	case TimeSeriesForwarderSinkStatus_FieldPathSelectorError:
		leftValue := fpv.value.(string)
		rightValue := source.GetError()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Status: %d", fpv.selector))
	}
}

func (fpv *TimeSeriesForwarderSinkStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TimeSeriesForwarderSink_Status))
}

// TimeSeriesForwarderSinkStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type TimeSeriesForwarderSinkStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TimeSeriesForwarderSinkStatus_FieldPath
	ContainsValue(*TimeSeriesForwarderSink_Status) bool
}

// ParseTimeSeriesForwarderSinkStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTimeSeriesForwarderSinkStatus_FieldPathArrayItemValue(pathStr, valueStr string) (TimeSeriesForwarderSinkStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseTimeSeriesForwarderSinkStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TimeSeriesForwarderSinkStatus_FieldPathArrayItemValue), nil
}

func MustParseTimeSeriesForwarderSinkStatus_FieldPathArrayItemValue(pathStr, valueStr string) TimeSeriesForwarderSinkStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseTimeSeriesForwarderSinkStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TimeSeriesForwarderSinkStatus_FieldTerminalPathArrayItemValue struct {
	TimeSeriesForwarderSinkStatus_FieldTerminalPath
	value interface{}
}

var _ TimeSeriesForwarderSinkStatus_FieldPathArrayItemValue = (*TimeSeriesForwarderSinkStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TimeSeriesForwarderSink_Status as interface{}
func (fpaiv *TimeSeriesForwarderSinkStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *TimeSeriesForwarderSinkStatus_FieldTerminalPathArrayItemValue) GetSingle(source *TimeSeriesForwarderSink_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TimeSeriesForwarderSinkStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TimeSeriesForwarderSink_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *TimeSeriesForwarderSinkStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *TimeSeriesForwarderSink_Status) bool {
	slice := fpaiv.TimeSeriesForwarderSinkStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// TimeSeriesForwarderSinkStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type TimeSeriesForwarderSinkStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TimeSeriesForwarderSinkStatus_FieldPath
}

func ParseTimeSeriesForwarderSinkStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (TimeSeriesForwarderSinkStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseTimeSeriesForwarderSinkStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TimeSeriesForwarderSinkStatus_FieldPathArrayOfValues), nil
}

func MustParseTimeSeriesForwarderSinkStatus_FieldPathArrayOfValues(pathStr, valuesStr string) TimeSeriesForwarderSinkStatus_FieldPathArrayOfValues {
	fpaov, err := ParseTimeSeriesForwarderSinkStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TimeSeriesForwarderSinkStatus_FieldTerminalPathArrayOfValues struct {
	TimeSeriesForwarderSinkStatus_FieldTerminalPath
	values interface{}
}

var _ TimeSeriesForwarderSinkStatus_FieldPathArrayOfValues = (*TimeSeriesForwarderSinkStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TimeSeriesForwarderSinkStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TimeSeriesForwarderSinkStatus_FieldPathSelectorError:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TimeSeriesForwarderSinkStatus_FieldTerminalPathArrayOfValues) AsErrorArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath interface {
	gotenobject.FieldPath
	Selector() TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelector
	Get(source *TimeSeriesForwarderSink_Spec_AzureEventHubSink) []interface{}
	GetSingle(source *TimeSeriesForwarderSink_Spec_AzureEventHubSink) (interface{}, bool)
	ClearValue(item *TimeSeriesForwarderSink_Spec_AzureEventHubSink)

	// Those methods build corresponding TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue
	WithIArrayOfValues(values interface{}) TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue
}

type TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelector int32

const (
	TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelector = 0
)

func (s TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelector) String() string {
	switch s {
	case TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint:
		return "endpoint"
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec_AzureEventHubSink: %d", s))
	}
}

func BuildTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath(fp gotenobject.RawFieldPath) (TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TimeSeriesForwarderSink_Spec_AzureEventHubSink")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "endpoint":
			return &TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath{selector: TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TimeSeriesForwarderSink_Spec_AzureEventHubSink", fp)
}

func ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath(rawField string) (TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath(fp)
}

func MustParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath(rawField string) TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath {
	fp, err := ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath struct {
	selector TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelector
}

var _ TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath = (*TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath)(nil)

func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) Selector() TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TimeSeriesForwarderSink_Spec_AzureEventHubSink
func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) Get(source *TimeSeriesForwarderSink_Spec_AzureEventHubSink) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint:
			if source.Endpoint != nil {
				values = append(values, source.Endpoint)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec_AzureEventHubSink: %d", fp.selector))
		}
	}
	return
}

func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink))
}

// GetSingle returns value pointed by specific field of from source TimeSeriesForwarderSink_Spec_AzureEventHubSink
func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) GetSingle(source *TimeSeriesForwarderSink_Spec_AzureEventHubSink) (interface{}, bool) {
	switch fp.selector {
	case TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint:
		res := source.GetEndpoint()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec_AzureEventHubSink: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink))
}

// GetDefault returns a default value of the field type
func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint:
		return (*secrets_secret.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec_AzureEventHubSink: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) ClearValue(item *TimeSeriesForwarderSink_Spec_AzureEventHubSink) {
	if item != nil {
		switch fp.selector {
		case TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint:
			item.Endpoint = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec_AzureEventHubSink: %d", fp.selector))
		}
	}
}

func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink))
}

// IsLeaf - whether field path is holds simple value
func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint
}

func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) WithIValue(value interface{}) TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue {
	switch fp.selector {
	case TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint:
		return &TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathValue{TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath: *fp, value: value.(*secrets_secret.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec_AzureEventHubSink: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) WithIArrayOfValues(values interface{}) TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayOfValues {
	fpaov := &TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathArrayOfValues{TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath: *fp}
	switch fp.selector {
	case TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint:
		return &TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathArrayOfValues{TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath: *fp, values: values.([]*secrets_secret.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec_AzureEventHubSink: %d", fp.selector))
	}
	return fpaov
}

func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) WithIArrayItemValue(value interface{}) TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec_AzureEventHubSink: %d", fp.selector))
	}
}

func (fp *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue allows storing values for AzureEventHubSink fields according to their type
type TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue interface {
	TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TimeSeriesForwarderSink_Spec_AzureEventHubSink)
	CompareWith(*TimeSeriesForwarderSink_Spec_AzureEventHubSink) (cmp int, comparable bool)
}

func ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue(pathStr, valueStr string) (TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue, error) {
	fp, err := ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureEventHubSink field path value from %s: %v", valueStr, err)
	}
	return fpv.(TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue), nil
}

func MustParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue(pathStr, valueStr string) TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue {
	fpv, err := ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathValue struct {
	TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath
	value interface{}
}

var _ TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathValue = (*TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AzureEventHubSink' as interface{}
func (fpv *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathValue) AsEndpointValue() (*secrets_secret.Reference, bool) {
	res, ok := fpv.value.(*secrets_secret.Reference)
	return res, ok
}

// SetTo stores value for selected field for object AzureEventHubSink
func (fpv *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathValue) SetTo(target **TimeSeriesForwarderSink_Spec_AzureEventHubSink) {
	if *target == nil {
		*target = new(TimeSeriesForwarderSink_Spec_AzureEventHubSink)
	}
	switch fpv.selector {
	case TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint:
		(*target).Endpoint = fpv.value.(*secrets_secret.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec_AzureEventHubSink: %d", fpv.selector))
	}
}

func (fpv *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathValue' with the value under path in 'TimeSeriesForwarderSink_Spec_AzureEventHubSink'.
func (fpv *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathValue) CompareWith(source *TimeSeriesForwarderSink_Spec_AzureEventHubSink) (int, bool) {
	switch fpv.selector {
	case TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint:
		leftValue := fpv.value.(*secrets_secret.Reference)
		rightValue := source.GetEndpoint()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesForwarderSink_Spec_AzureEventHubSink: %d", fpv.selector))
	}
}

func (fpv *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink))
}

// TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue allows storing single item in Path-specific values for AzureEventHubSink according to their type
// Present only for array (repeated) types.
type TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath
	ContainsValue(*TimeSeriesForwarderSink_Spec_AzureEventHubSink) bool
}

// ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue(pathStr, valueStr string) (TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue, error) {
	fp, err := ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureEventHubSink field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue), nil
}

func MustParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue(pathStr, valueStr string) TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue {
	fpaiv, err := ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathArrayItemValue struct {
	TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath
	value interface{}
}

var _ TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayItemValue = (*TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TimeSeriesForwarderSink_Spec_AzureEventHubSink as interface{}
func (fpaiv *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathArrayItemValue) GetSingle(source *TimeSeriesForwarderSink_Spec_AzureEventHubSink) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TimeSeriesForwarderSink_Spec_AzureEventHubSink))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AzureEventHubSink'
func (fpaiv *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathArrayItemValue) ContainsValue(source *TimeSeriesForwarderSink_Spec_AzureEventHubSink) bool {
	slice := fpaiv.TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayOfValues allows storing slice of values for AzureEventHubSink fields according to their type
type TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath
}

func ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayOfValues(pathStr, valuesStr string) (TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayOfValues, error) {
	fp, err := ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AzureEventHubSink field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayOfValues), nil
}

func MustParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayOfValues(pathStr, valuesStr string) TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayOfValues {
	fpaov, err := ParseTimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathArrayOfValues struct {
	TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPath
	values interface{}
}

var _ TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathArrayOfValues = (*TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldPathSelectorEndpoint:
		for _, v := range fpaov.values.([]*secrets_secret.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TimeSeriesForwarderSinkSpecAzureEventHubSink_FieldTerminalPathArrayOfValues) AsEndpointArrayOfValues() ([]*secrets_secret.Reference, bool) {
	res, ok := fpaov.values.([]*secrets_secret.Reference)
	return res, ok
}
