// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v4/common.proto
// DO NOT EDIT!!!

package common

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Controls which fields are returned by `ListTimeSeries`.
type TimeSeriesView int32

const (
	// Returns the identity of the metric(s), the time series,
	// and the time series data.
	TimeSeriesView_FULL TimeSeriesView = 0
	// Returns the identity of the metric and the time series resource,
	// but not the time series data.
	TimeSeriesView_HEADERS TimeSeriesView = 1
)

var (
	TimeSeriesView_name = map[int32]string{
		0: "FULL",
		1: "HEADERS",
	}

	TimeSeriesView_value = map[string]int32{
		"FULL":    0,
		"HEADERS": 1,
	}
)

func (x TimeSeriesView) Enum() *TimeSeriesView {
	p := new(TimeSeriesView)
	*p = x
	return p
}

func (x TimeSeriesView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (TimeSeriesView) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_common_proto_enumTypes[0].Descriptor()
}

func (TimeSeriesView) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_common_proto_enumTypes[0]
}

func (x TimeSeriesView) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use TimeSeriesView.ProtoReflect.Descriptor instead.
func (TimeSeriesView) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{0}
}

// Value types that can be used as label values.
type LabelDescriptor_ValueType int32

const (
	// A variable-length string. This is the default.
	LabelDescriptor_STRING LabelDescriptor_ValueType = 0
	// Boolean; true or false.
	LabelDescriptor_BOOL LabelDescriptor_ValueType = 1
	// A 64-bit signed integer.
	LabelDescriptor_INT64 LabelDescriptor_ValueType = 2
)

var (
	LabelDescriptor_ValueType_name = map[int32]string{
		0: "STRING",
		1: "BOOL",
		2: "INT64",
	}

	LabelDescriptor_ValueType_value = map[string]int32{
		"STRING": 0,
		"BOOL":   1,
		"INT64":  2,
	}
)

func (x LabelDescriptor_ValueType) Enum() *LabelDescriptor_ValueType {
	p := new(LabelDescriptor_ValueType)
	*p = x
	return p
}

func (x LabelDescriptor_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (LabelDescriptor_ValueType) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_common_proto_enumTypes[1].Descriptor()
}

func (LabelDescriptor_ValueType) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_common_proto_enumTypes[1]
}

func (x LabelDescriptor_ValueType) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use LabelDescriptor_ValueType.ProtoReflect.Descriptor instead.
func (LabelDescriptor_ValueType) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{0, 0}
}

// The Aligner describes how to bring the data points in a single
// time series into temporal alignment.
type Aggregation_Aligner int32

const (
	// No alignment. Raw data is returned. Not valid if cross-time
	// series reduction is requested. The value type of the result is
	// the same as the value type of the input.
	Aggregation_ALIGN_NONE Aggregation_Aligner = 0
	// Align and convert to delta metric type. This alignment is valid
	// for cumulative metrics and delta metrics. Aligning an existing
	// delta metric to a delta metric requires that the alignment
	// period be increased. The value type of the result is the same
	// as the value type of the input.
	//
	// One can think of this aligner as a rate but without time units; that
	// is, the output is conceptually (second_point - first_point).
	Aggregation_ALIGN_DELTA Aggregation_Aligner = 1
	// Align and convert to a rate. This alignment is valid for
	// cumulative metrics and delta metrics with numeric values. The output is a
	// gauge metric with value type
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].
	//
	// One can think of this aligner as conceptually providing the slope of
	// the line that passes through the value at the start and end of the
	// window. In other words, this is conceptually ((y1 - y0)/(t1 - t0)),
	// and the output unit is one that has a "/time" dimension.
	//
	// If, by rate, you are looking for percentage change, see the
	// `ALIGN_PERCENT_CHANGE` aligner option.
	Aggregation_ALIGN_RATE Aggregation_Aligner = 2
	// Align by interpolating between adjacent points around the
	// period boundary. This alignment is valid for gauge
	// metrics with numeric values. The value type of the result is the same
	// as the value type of the input.
	Aggregation_ALIGN_INTERPOLATE Aggregation_Aligner = 3
	// Align by shifting the oldest data point before the period
	// boundary to the boundary. This alignment is valid for gauge
	// metrics. The value type of the result is the same as the
	// value type of the input.
	Aggregation_ALIGN_NEXT_OLDER Aggregation_Aligner = 4
	// Align time series via aggregation. The resulting data point in
	// the alignment period is the minimum of all data points in the
	// period. This alignment is valid for gauge and delta metrics with numeric
	// values. The value type of the result is the same as the value
	// type of the input.
	Aggregation_ALIGN_MIN Aggregation_Aligner = 10
	// Align time series via aggregation. The resulting data point in
	// the alignment period is the maximum of all data points in the
	// period. This alignment is valid for gauge and delta metrics with numeric
	// values. The value type of the result is the same as the value
	// type of the input.
	Aggregation_ALIGN_MAX Aggregation_Aligner = 11
	// Align time series via aggregation. The resulting data point in
	// the alignment period is the average or arithmetic mean of all
	// data points in the period. This alignment is valid for gauge and delta
	// metrics with numeric values. The value type of the output is
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].
	Aggregation_ALIGN_MEAN Aggregation_Aligner = 12
	// Align time series via aggregation. The resulting data point in
	// the alignment period is the count of all data points in the
	// period. This alignment is valid for gauge and delta metrics with numeric
	// or Boolean values. The value type of the output is
	// [INT64][google.api.MetricDescriptor.ValueType.INT64].
	Aggregation_ALIGN_COUNT Aggregation_Aligner = 13
	// Align time series via aggregation. The resulting data point in
	// the alignment period is the sum of all data points in the
	// period. This alignment is valid for gauge and delta metrics with numeric
	// and distribution values. The value type of the output is the
	// same as the value type of the input.
	Aggregation_ALIGN_SUM Aggregation_Aligner = 14
	// Align time series via aggregation. The resulting data point in
	// the alignment period is the standard deviation of all data
	// points in the period. This alignment is valid for gauge and delta metrics
	// with numeric values. The value type of the output is
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].
	Aggregation_ALIGN_STDDEV Aggregation_Aligner = 15
	// Align time series via aggregation. The resulting data point in
	// the alignment period is the count of True-valued data points in the
	// period. This alignment is valid for gauge metrics with
	// Boolean values. The value type of the output is
	// [INT64][google.api.MetricDescriptor.ValueType.INT64].
	Aggregation_ALIGN_COUNT_TRUE Aggregation_Aligner = 16
	// Align time series via aggregation. The resulting data point in
	// the alignment period is the count of False-valued data points in the
	// period. This alignment is valid for gauge metrics with
	// Boolean values. The value type of the output is
	// [INT64][google.api.MetricDescriptor.ValueType.INT64].
	Aggregation_ALIGN_COUNT_FALSE Aggregation_Aligner = 24
	// Align time series via aggregation. The resulting data point in
	// the alignment period is the fraction of True-valued data points in the
	// period. This alignment is valid for gauge metrics with Boolean values.
	// The output value is in the range [0, 1] and has value type
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].
	Aggregation_ALIGN_FRACTION_TRUE Aggregation_Aligner = 17
	// Align time series via aggregation. The resulting data point in
	// the alignment period is the 99th percentile of all data
	// points in the period. This alignment is valid for gauge and delta metrics
	// with distribution values. The output is a gauge metric with value type
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].
	Aggregation_ALIGN_PERCENTILE_99 Aggregation_Aligner = 18
	// Align time series via aggregation. The resulting data point in
	// the alignment period is the 95th percentile of all data
	// points in the period. This alignment is valid for gauge and delta metrics
	// with distribution values. The output is a gauge metric with value type
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].
	Aggregation_ALIGN_PERCENTILE_95 Aggregation_Aligner = 19
	// Align time series via aggregation. The resulting data point in
	// the alignment period is the 50th percentile of all data
	// points in the period. This alignment is valid for gauge and delta metrics
	// with distribution values. The output is a gauge metric with value type
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].
	Aggregation_ALIGN_PERCENTILE_50 Aggregation_Aligner = 20
	// Align time series via aggregation. The resulting data point in
	// the alignment period is the 5th percentile of all data
	// points in the period. This alignment is valid for gauge and delta metrics
	// with distribution values. The output is a gauge metric with value type
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].
	Aggregation_ALIGN_PERCENTILE_05 Aggregation_Aligner = 21
	// Align and convert to a percentage change. This alignment is valid for
	// gauge and delta metrics with numeric values. This alignment conceptually
	// computes the equivalent of "((current - previous)/previous)*100"
	// where previous value is determined based on the alignmentPeriod.
	// In the event that previous is 0 the calculated value is infinity with the
	// exception that if both (current - previous) and previous are 0 the
	// calculated value is 0.
	// A 10 minute moving mean is computed at each point of the time window
	// prior to the above calculation to smooth the metric and prevent false
	// positives from very short lived spikes.
	// Only applicable for data that is >= 0. Any values < 0 are treated as
	// no data. While delta metrics are accepted by this alignment special care
	// should be taken that the values for the metric will always be positive.
	// The output is a gauge metric with value type
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].
	Aggregation_ALIGN_PERCENT_CHANGE Aggregation_Aligner = 23
	// Outputs Distribution without bucketing with stats like: Min, Max, Count,
	// Mean, SumOfSquaredDeviations valid only for LONG, DOUBLE and DISTRIBUTION
	// value types
	Aggregation_ALIGN_SUMMARY Aggregation_Aligner = 45
	// TDigest Summary allows for calculation (and further aggregation) of
	// percentiles
	Aggregation_ALIGN_TDIGEST_SUMMARY Aggregation_Aligner = 46
)

var (
	Aggregation_Aligner_name = map[int32]string{
		0:  "ALIGN_NONE",
		1:  "ALIGN_DELTA",
		2:  "ALIGN_RATE",
		3:  "ALIGN_INTERPOLATE",
		4:  "ALIGN_NEXT_OLDER",
		10: "ALIGN_MIN",
		11: "ALIGN_MAX",
		12: "ALIGN_MEAN",
		13: "ALIGN_COUNT",
		14: "ALIGN_SUM",
		15: "ALIGN_STDDEV",
		16: "ALIGN_COUNT_TRUE",
		24: "ALIGN_COUNT_FALSE",
		17: "ALIGN_FRACTION_TRUE",
		18: "ALIGN_PERCENTILE_99",
		19: "ALIGN_PERCENTILE_95",
		20: "ALIGN_PERCENTILE_50",
		21: "ALIGN_PERCENTILE_05",
		23: "ALIGN_PERCENT_CHANGE",
		45: "ALIGN_SUMMARY",
		46: "ALIGN_TDIGEST_SUMMARY",
	}

	Aggregation_Aligner_value = map[string]int32{
		"ALIGN_NONE":            0,
		"ALIGN_DELTA":           1,
		"ALIGN_RATE":            2,
		"ALIGN_INTERPOLATE":     3,
		"ALIGN_NEXT_OLDER":      4,
		"ALIGN_MIN":             10,
		"ALIGN_MAX":             11,
		"ALIGN_MEAN":            12,
		"ALIGN_COUNT":           13,
		"ALIGN_SUM":             14,
		"ALIGN_STDDEV":          15,
		"ALIGN_COUNT_TRUE":      16,
		"ALIGN_COUNT_FALSE":     24,
		"ALIGN_FRACTION_TRUE":   17,
		"ALIGN_PERCENTILE_99":   18,
		"ALIGN_PERCENTILE_95":   19,
		"ALIGN_PERCENTILE_50":   20,
		"ALIGN_PERCENTILE_05":   21,
		"ALIGN_PERCENT_CHANGE":  23,
		"ALIGN_SUMMARY":         45,
		"ALIGN_TDIGEST_SUMMARY": 46,
	}
)

func (x Aggregation_Aligner) Enum() *Aggregation_Aligner {
	p := new(Aggregation_Aligner)
	*p = x
	return p
}

func (x Aggregation_Aligner) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Aggregation_Aligner) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_common_proto_enumTypes[2].Descriptor()
}

func (Aggregation_Aligner) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_common_proto_enumTypes[2]
}

func (x Aggregation_Aligner) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Aggregation_Aligner.ProtoReflect.Descriptor instead.
func (Aggregation_Aligner) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{6, 0}
}

// A Reducer describes how to aggregate data points from multiple
// time series into a single time series.
type Aggregation_Reducer int32

const (
	// No cross-time series reduction. The output of the aligner is
	// returned.
	Aggregation_REDUCE_NONE Aggregation_Reducer = 0
	// Reduce by computing the mean across time series for each
	// alignment period. This reducer is valid for delta and
	// gauge metrics with numeric or distribution values. The value type of the
	// output is [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].
	Aggregation_REDUCE_MEAN Aggregation_Reducer = 1
	// Reduce by computing the minimum across time series for each
	// alignment period. This reducer is valid for delta and
	// gauge metrics with numeric values. The value type of the output
	// is the same as the value type of the input.
	Aggregation_REDUCE_MIN Aggregation_Reducer = 2
	// Reduce by computing the maximum across time series for each
	// alignment period. This reducer is valid for delta and
	// gauge metrics with numeric values. The value type of the output
	// is the same as the value type of the input.
	Aggregation_REDUCE_MAX Aggregation_Reducer = 3
	// Reduce by computing the sum across time series for each
	// alignment period. This reducer is valid for delta and
	// gauge metrics with numeric and distribution values. The value type of
	// the output is the same as the value type of the input.
	Aggregation_REDUCE_SUM Aggregation_Reducer = 4
	// Reduce by computing the standard deviation across time series
	// for each alignment period. This reducer is valid for delta
	// and gauge metrics with numeric or distribution values. The value type of
	// the output is [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].
	Aggregation_REDUCE_STDDEV Aggregation_Reducer = 5
	// Reduce by computing the count of data points across time series
	// for each alignment period. This reducer is valid for delta
	// and gauge metrics of numeric, Boolean, distribution, and string value
	// type. The value type of the output is
	// [INT64][google.api.MetricDescriptor.ValueType.INT64].
	Aggregation_REDUCE_COUNT Aggregation_Reducer = 6
	// Reduce by computing the count of True-valued data points across time
	// series for each alignment period. This reducer is valid for delta
	// and gauge metrics of Boolean value type. The value type of
	// the output is [INT64][google.api.MetricDescriptor.ValueType.INT64].
	Aggregation_REDUCE_COUNT_TRUE Aggregation_Reducer = 7
	// Reduce by computing the count of False-valued data points across time
	// series for each alignment period. This reducer is valid for delta
	// and gauge metrics of Boolean value type. The value type of
	// the output is [INT64][google.api.MetricDescriptor.ValueType.INT64].
	Aggregation_REDUCE_COUNT_FALSE Aggregation_Reducer = 15
	// Reduce by computing the fraction of True-valued data points across time
	// series for each alignment period. This reducer is valid for delta
	// and gauge metrics of Boolean value type. The output value is in the
	// range [0, 1] and has value type
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE].
	Aggregation_REDUCE_FRACTION_TRUE Aggregation_Reducer = 8
	// Reduce by computing 99th percentile of data points across time series
	// for each alignment period. This reducer is valid for gauge and delta
	// metrics of numeric and distribution type. The value of the output is
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE]
	Aggregation_REDUCE_PERCENTILE_99 Aggregation_Reducer = 9
	// Reduce by computing 95th percentile of data points across time series
	// for each alignment period. This reducer is valid for gauge and delta
	// metrics of numeric and distribution type. The value of the output is
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE]
	Aggregation_REDUCE_PERCENTILE_95 Aggregation_Reducer = 10
	// Reduce by computing 50th percentile of data points across time series
	// for each alignment period. This reducer is valid for gauge and delta
	// metrics of numeric and distribution type. The value of the output is
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE]
	Aggregation_REDUCE_PERCENTILE_50 Aggregation_Reducer = 11
	// Reduce by computing 5th percentile of data points across time series
	// for each alignment period. This reducer is valid for gauge and delta
	// metrics of numeric and distribution type. The value of the output is
	// [DOUBLE][google.api.MetricDescriptor.ValueType.DOUBLE]
	Aggregation_REDUCE_PERCENTILE_05 Aggregation_Reducer = 12
	// Reduce with Distribution with stats like: Min, Max, Count, Mean,
	// SumOfSquaredDeviations, histogram. This reducer is valid for gauge and
	// delta metrics of numeric and distribution type. The value of the output
	// is [DISTRIBUTION][google.api.MetricDescriptor.ValueType.DISTRIBUTION]
	Aggregation_REDUCE_SUMMARY Aggregation_Reducer = 13
)

var (
	Aggregation_Reducer_name = map[int32]string{
		0:  "REDUCE_NONE",
		1:  "REDUCE_MEAN",
		2:  "REDUCE_MIN",
		3:  "REDUCE_MAX",
		4:  "REDUCE_SUM",
		5:  "REDUCE_STDDEV",
		6:  "REDUCE_COUNT",
		7:  "REDUCE_COUNT_TRUE",
		15: "REDUCE_COUNT_FALSE",
		8:  "REDUCE_FRACTION_TRUE",
		9:  "REDUCE_PERCENTILE_99",
		10: "REDUCE_PERCENTILE_95",
		11: "REDUCE_PERCENTILE_50",
		12: "REDUCE_PERCENTILE_05",
		13: "REDUCE_SUMMARY",
	}

	Aggregation_Reducer_value = map[string]int32{
		"REDUCE_NONE":          0,
		"REDUCE_MEAN":          1,
		"REDUCE_MIN":           2,
		"REDUCE_MAX":           3,
		"REDUCE_SUM":           4,
		"REDUCE_STDDEV":        5,
		"REDUCE_COUNT":         6,
		"REDUCE_COUNT_TRUE":    7,
		"REDUCE_COUNT_FALSE":   15,
		"REDUCE_FRACTION_TRUE": 8,
		"REDUCE_PERCENTILE_99": 9,
		"REDUCE_PERCENTILE_95": 10,
		"REDUCE_PERCENTILE_50": 11,
		"REDUCE_PERCENTILE_05": 12,
		"REDUCE_SUMMARY":       13,
	}
)

func (x Aggregation_Reducer) Enum() *Aggregation_Reducer {
	p := new(Aggregation_Reducer)
	*p = x
	return p
}

func (x Aggregation_Reducer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Aggregation_Reducer) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_common_proto_enumTypes[3].Descriptor()
}

func (Aggregation_Reducer) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_common_proto_enumTypes[3]
}

func (x Aggregation_Reducer) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Aggregation_Reducer.ProtoReflect.Descriptor instead.
func (Aggregation_Reducer) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{6, 1}
}

// A description of a label.
type LabelDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The label key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" firestore:"key"`
	// The type of data that can be assigned to the label.
	ValueType LabelDescriptor_ValueType `protobuf:"varint,2,opt,name=value_type,json=valueType,proto3,enum=ntt.monitoring.v4.LabelDescriptor_ValueType" json:"value_type,omitempty" firestore:"valueType"`
	// A human-readable description for the label.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	// Default value for string label - this value is used in two cases:
	// 1. to populate missing labels while creating TimeSeries
	// 2. to populate missing remaining kvs while querying TimeSeries - usually
	// applies to old data
	DefaultValue string `protobuf:"bytes,12,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty" firestore:"defaultValue"`
	// disabled flag communicates that this label is ignored by the backend. It's
	// used for backward compatibility.
	Disabled bool `protobuf:"varint,13,opt,name=disabled,proto3" json:"disabled,omitempty" firestore:"disabled"`
}

func (m *LabelDescriptor) Reset() {
	*m = LabelDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LabelDescriptor) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LabelDescriptor) ProtoMessage() {}

func (m *LabelDescriptor) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LabelDescriptor) GotenMessage() {}

// Deprecated, Use LabelDescriptor.ProtoReflect.Descriptor instead.
func (*LabelDescriptor) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{0}
}

func (m *LabelDescriptor) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LabelDescriptor) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LabelDescriptor) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LabelDescriptor) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LabelDescriptor) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LabelDescriptor) GetValueType() LabelDescriptor_ValueType {
	if m != nil {
		return m.ValueType
	}
	return LabelDescriptor_STRING
}

func (m *LabelDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *LabelDescriptor) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *LabelDescriptor) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *LabelDescriptor) SetKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "LabelDescriptor"))
	}
	m.Key = fv
}

func (m *LabelDescriptor) SetValueType(fv LabelDescriptor_ValueType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ValueType", "LabelDescriptor"))
	}
	m.ValueType = fv
}

func (m *LabelDescriptor) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "LabelDescriptor"))
	}
	m.Description = fv
}

func (m *LabelDescriptor) SetDefaultValue(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DefaultValue", "LabelDescriptor"))
	}
	m.DefaultValue = fv
}

func (m *LabelDescriptor) SetDisabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Disabled", "LabelDescriptor"))
	}
	m.Disabled = fv
}

// LabelKeySet is used for defining PromotedLabelKeySets on Metric descriptors
type LabelKeySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	LabelKeys     []string `protobuf:"bytes,1,rep,name=label_keys,json=labelKeys,proto3" json:"label_keys,omitempty" firestore:"labelKeys"`
	// if set, index will not be considered for queries, but will be written to.
	// useful for transition periods.
	WriteOnly bool `protobuf:"varint,2,opt,name=write_only,json=writeOnly,proto3" json:"write_only,omitempty" firestore:"writeOnly"`
}

func (m *LabelKeySet) Reset() {
	*m = LabelKeySet{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LabelKeySet) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LabelKeySet) ProtoMessage() {}

func (m *LabelKeySet) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LabelKeySet) GotenMessage() {}

// Deprecated, Use LabelKeySet.ProtoReflect.Descriptor instead.
func (*LabelKeySet) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{1}
}

func (m *LabelKeySet) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LabelKeySet) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LabelKeySet) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LabelKeySet) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LabelKeySet) GetLabelKeys() []string {
	if m != nil {
		return m.LabelKeys
	}
	return nil
}

func (m *LabelKeySet) GetWriteOnly() bool {
	if m != nil {
		return m.WriteOnly
	}
	return false
}

func (m *LabelKeySet) SetLabelKeys(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LabelKeys", "LabelKeySet"))
	}
	m.LabelKeys = fv
}

func (m *LabelKeySet) SetWriteOnly(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "WriteOnly", "LabelKeySet"))
	}
	m.WriteOnly = fv
}

// Distribution contains summary statistics for a population of values and,
// optionally, a histogram representing the distribution of those values across
// a specified set of histogram buckets.
//
// The summary statistics are the count, mean, sum of the squared deviation from
// the mean, the minimum, and the maximum of the set of population of values.
//
// The histogram is based on a sequence of buckets and gives a count of values
// that fall into each bucket.  The boundaries of the buckets are given either
// explicitly or by specifying parameters for a method of computing them
// (buckets of fixed width or buckets of exponentially increasing width).
//
// Although it is not forbidden, it is generally a bad idea to include
// non-finite values (infinities or NaNs) in the population of values, as this
// will render the `mean` and `sum_of_squared_deviation` fields meaningless.
type Distribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The number of values in the population. Must be non-negative.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty" firestore:"count"`
	// The arithmetic mean of the values in the population. If `count` is zero
	// then this field must be zero.
	Mean float64 `protobuf:"fixed64,2,opt,name=mean,proto3" json:"mean,omitempty" firestore:"mean"`
	// The sum of squared deviations from the mean of the values in the
	// population.  For values x_i this is:
	//
	//     Sum[i=1..n]((x_i - mean)^2)
	//
	// Knuth, "The Art of Computer Programming", Vol. 2, page 323, 3rd edition
	// describes Welford's method for accumulating this sum in one pass.
	//
	// If `count` is zero then this field must be zero.
	SumOfSquaredDeviation float64 `protobuf:"fixed64,3,opt,name=sum_of_squared_deviation,json=sumOfSquaredDeviation,proto3" json:"sum_of_squared_deviation,omitempty" firestore:"sumOfSquaredDeviation"`
	// If specified, contains the range of the population values. The field
	// must not be present if the `count` is zero.
	Range *Distribution_Range `protobuf:"bytes,4,opt,name=range,proto3" json:"range,omitempty" firestore:"range"`
	// Defines the histogram bucket boundaries.
	BucketOptions *Distribution_BucketOptions `protobuf:"bytes,6,opt,name=bucket_options,json=bucketOptions,proto3" json:"bucket_options,omitempty" firestore:"bucketOptions"`
	// If `bucket_options` is given, then the sum of the values in `bucket_counts`
	// must equal the value in `count`.  If `bucket_options` is not given, no
	// `bucket_counts` fields may be given.
	//
	// Bucket counts are given in order under the numbering scheme described
	// above (the underflow bucket has number 0; the finite buckets, if any,
	// have numbers 1 through N-2; the overflow bucket has number N-1).
	//
	// The size of `bucket_counts` must be no greater than N as defined in
	// `bucket_options`.
	//
	// Any suffix of trailing zero bucket_count fields may be omitted.
	BucketCounts []int64 `protobuf:"varint,7,rep,packed,name=bucket_counts,json=bucketCounts,proto3" json:"bucket_counts,omitempty" firestore:"bucketCounts"`
}

func (m *Distribution) Reset() {
	*m = Distribution{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Distribution) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Distribution) ProtoMessage() {}

func (m *Distribution) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Distribution) GotenMessage() {}

// Deprecated, Use Distribution.ProtoReflect.Descriptor instead.
func (*Distribution) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{2}
}

func (m *Distribution) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Distribution) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Distribution) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Distribution) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Distribution) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return int64(0)
}

func (m *Distribution) GetMean() float64 {
	if m != nil {
		return m.Mean
	}
	return float64(0)
}

func (m *Distribution) GetSumOfSquaredDeviation() float64 {
	if m != nil {
		return m.SumOfSquaredDeviation
	}
	return float64(0)
}

func (m *Distribution) GetRange() *Distribution_Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *Distribution) GetBucketOptions() *Distribution_BucketOptions {
	if m != nil {
		return m.BucketOptions
	}
	return nil
}

func (m *Distribution) GetBucketCounts() []int64 {
	if m != nil {
		return m.BucketCounts
	}
	return nil
}

func (m *Distribution) SetCount(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Count", "Distribution"))
	}
	m.Count = fv
}

func (m *Distribution) SetMean(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mean", "Distribution"))
	}
	m.Mean = fv
}

func (m *Distribution) SetSumOfSquaredDeviation(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SumOfSquaredDeviation", "Distribution"))
	}
	m.SumOfSquaredDeviation = fv
}

func (m *Distribution) SetRange(fv *Distribution_Range) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Range", "Distribution"))
	}
	m.Range = fv
}

func (m *Distribution) SetBucketOptions(fv *Distribution_BucketOptions) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BucketOptions", "Distribution"))
	}
	m.BucketOptions = fv
}

func (m *Distribution) SetBucketCounts(fv []int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BucketCounts", "Distribution"))
	}
	m.BucketCounts = fv
}

// A single strongly-typed value.
type TypedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The typed value field.
	//
	// Types that are valid to be assigned to Value:
	//	*TypedValue_BoolValue
	//	*TypedValue_Int64Value
	//	*TypedValue_DoubleValue
	//	*TypedValue_StringValue
	//	*TypedValue_DistributionValue
	Value isTypedValue_Value `protobuf_oneof:"value"`
}

func (m *TypedValue) Reset() {
	*m = TypedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TypedValue) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TypedValue) ProtoMessage() {}

func (m *TypedValue) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TypedValue) GotenMessage() {}

// Deprecated, Use TypedValue.ProtoReflect.Descriptor instead.
func (*TypedValue) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{3}
}

func (m *TypedValue) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TypedValue) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TypedValue) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TypedValue) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isTypedValue_Value interface {
	isTypedValue_Value()
}

type TypedValue_BoolValue struct {
	// A Boolean value: `true` or `false`.
	BoolValue bool `protobuf:"varint,1,opt,name=bool_value,json=boolValue,proto3,oneof" firestore:"boolValue"`
}
type TypedValue_Int64Value struct {
	// A 64-bit integer. Its range is approximately &plusmn;9.2x10<sup>18</sup>.
	Int64Value int64 `protobuf:"varint,2,opt,name=int64_value,json=int64Value,proto3,oneof" firestore:"int64Value"`
}
type TypedValue_DoubleValue struct {
	// A 64-bit double-precision floating-point number. Its magnitude
	// is approximately &plusmn;10<sup>&plusmn;300</sup> and it has 16
	// significant digits of precision.
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,proto3,oneof" firestore:"doubleValue"`
}
type TypedValue_StringValue struct {
	// A variable-length string value.
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3,oneof" firestore:"stringValue"`
}
type TypedValue_DistributionValue struct {
	// A distribution value.
	DistributionValue *Distribution `protobuf:"bytes,5,opt,name=distribution_value,json=distributionValue,proto3,oneof" firestore:"distributionValue"`
}

func (*TypedValue_BoolValue) isTypedValue_Value()         {}
func (*TypedValue_Int64Value) isTypedValue_Value()        {}
func (*TypedValue_DoubleValue) isTypedValue_Value()       {}
func (*TypedValue_StringValue) isTypedValue_Value()       {}
func (*TypedValue_DistributionValue) isTypedValue_Value() {}
func (m *TypedValue) GetValue() isTypedValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}
func (m *TypedValue) GetBoolValue() bool {
	if x, ok := m.GetValue().(*TypedValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}
func (m *TypedValue) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*TypedValue_Int64Value); ok {
		return x.Int64Value
	}
	return int64(0)
}
func (m *TypedValue) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*TypedValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return float64(0)
}
func (m *TypedValue) GetStringValue() string {
	if x, ok := m.GetValue().(*TypedValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}
func (m *TypedValue) GetDistributionValue() *Distribution {
	if x, ok := m.GetValue().(*TypedValue_DistributionValue); ok {
		return x.DistributionValue
	}
	return nil
}
func (m *TypedValue) SetValue(ofv isTypedValue_Value) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isTypedValue_Value", "TypedValue"))
	}
	m.Value = ofv
}
func (m *TypedValue) SetBoolValue(fv bool) {
	m.SetValue(&TypedValue_BoolValue{BoolValue: fv})
}
func (m *TypedValue) SetInt64Value(fv int64) {
	m.SetValue(&TypedValue_Int64Value{Int64Value: fv})
}
func (m *TypedValue) SetDoubleValue(fv float64) {
	m.SetValue(&TypedValue_DoubleValue{DoubleValue: fv})
}
func (m *TypedValue) SetStringValue(fv string) {
	m.SetValue(&TypedValue_StringValue{StringValue: fv})
}
func (m *TypedValue) SetDistributionValue(fv *Distribution) {
	m.SetValue(&TypedValue_DistributionValue{DistributionValue: fv})
}

// A time interval extending just after a start time through an end time.
// If the start time is the same as the end time, then the interval
// represents a single point in time.
type TimeInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Required. The end of the time interval.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" firestore:"endTime"`
	// Optional. The beginning of the time interval.  The default value
	// for the start time is the end time. The start time must not be
	// later than the end time.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" firestore:"startTime"`
}

func (m *TimeInterval) Reset() {
	*m = TimeInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TimeInterval) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TimeInterval) ProtoMessage() {}

func (m *TimeInterval) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TimeInterval) GotenMessage() {}

// Deprecated, Use TimeInterval.ProtoReflect.Descriptor instead.
func (*TimeInterval) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{4}
}

func (m *TimeInterval) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TimeInterval) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TimeInterval) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TimeInterval) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TimeInterval) GetEndTime() *timestamppb.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *TimeInterval) GetStartTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TimeInterval) SetEndTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EndTime", "TimeInterval"))
	}
	m.EndTime = fv
}

func (m *TimeInterval) SetStartTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartTime", "TimeInterval"))
	}
	m.StartTime = fv
}

// Time Range represents time between two points in time. Any of those can
// be missing, which means it's open-ended.
type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Optional. Start of time range
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" firestore:"startTime"`
	// Optional. End of time range
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" firestore:"endTime"`
}

func (m *TimeRange) Reset() {
	*m = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TimeRange) ProtoMessage() {}

func (m *TimeRange) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TimeRange) GotenMessage() {}

// Deprecated, Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{5}
}

func (m *TimeRange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TimeRange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TimeRange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TimeRange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TimeRange) GetStartTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TimeRange) GetEndTime() *timestamppb.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *TimeRange) SetStartTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartTime", "TimeRange"))
	}
	m.StartTime = fv
}

func (m *TimeRange) SetEndTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EndTime", "TimeRange"))
	}
	m.EndTime = fv
}

// Describes how to combine multiple time series to provide different views of
// the data.  Aggregation consists of an alignment step on individual time
// series (`alignment_period` and `per_series_aligner`) followed by an optional
// reduction step of the data across the aligned time series
// (`cross_series_reducer` and `group_by_fields`).  For more details, see
// [Aggregation](/monitoring/api/learn_more#aggregation).
type Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The alignment period for per-[time series][ntt.monitoring.v3.TimeSeries]
	// alignment. If present, `alignmentPeriod` must be at least 60
	// seconds.  After per-time series alignment, each time series will
	// contain data points only on the period boundaries. If
	// `perSeriesAligner` is not specified or equals `ALIGN_NONE`, then
	// this field is ignored. If `perSeriesAligner` is specified and
	// does not equal `ALIGN_NONE`, then this field must be defined;
	// otherwise an error is returned.
	AlignmentPeriod *durationpb.Duration `protobuf:"bytes,1,opt,name=alignment_period,json=alignmentPeriod,proto3" json:"alignment_period,omitempty" firestore:"alignmentPeriod"`
	// The approach to be used to align individual time series. Not all
	// alignment functions may be applied to all time series, depending
	// on the metric type and value type of the original time
	// series. Alignment may change the metric type or the value type of
	// the time series.
	//
	// Time series data must be aligned in order to perform cross-time
	// series reduction. If `crossSeriesReducer` is specified, then
	// `perSeriesAligner` must be specified and not equal `ALIGN_NONE`
	// and `alignmentPeriod` must be specified; otherwise, an error is
	// returned.
	PerSeriesAligner Aggregation_Aligner `protobuf:"varint,2,opt,name=per_series_aligner,json=perSeriesAligner,proto3,enum=ntt.monitoring.v4.Aggregation_Aligner" json:"per_series_aligner,omitempty" firestore:"perSeriesAligner"`
	// The approach to be used to combine time series. Not all reducer
	// functions may be applied to all time series, depending on the
	// metric type and the value type of the original time
	// series. Reduction may change the metric type of value type of the
	// time series.
	//
	// Time series data must be aligned in order to perform cross-time
	// series reduction. If `crossSeriesReducer` is specified, then
	// `perSeriesAligner` must be specified and not equal `ALIGN_NONE`
	// and `alignmentPeriod` must be specified; otherwise, an error is
	// returned.
	CrossSeriesReducer Aggregation_Reducer `protobuf:"varint,4,opt,name=cross_series_reducer,json=crossSeriesReducer,proto3,enum=ntt.monitoring.v4.Aggregation_Reducer" json:"cross_series_reducer,omitempty" firestore:"crossSeriesReducer"`
	// The set of fields to preserve when `crossSeriesReducer` is
	// specified. The `groupByFields` determine how the time series are
	// partitioned into subsets prior to applying the aggregation
	// function. Each subset contains time series that have the same
	// value for each of the grouping fields. Each individual time
	// series is a member of exactly one subset. The
	// `crossSeriesReducer` is applied to each subset of time series.
	// It is not possible to reduce across different resource types, so
	// this field implicitly contains `resource.type`.  Fields not
	// specified in `groupByFields` are aggregated away.  If
	// `groupByFields` is not specified and all the time series have
	// the same resource type, then the time series are aggregated into
	// a single output time series. If `crossSeriesReducer` is not
	// defined, this field is ignored.
	GroupByFields []string `protobuf:"bytes,5,rep,name=group_by_fields,json=groupByFields,proto3" json:"group_by_fields,omitempty" firestore:"groupByFields"`
}

func (m *Aggregation) Reset() {
	*m = Aggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Aggregation) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Aggregation) ProtoMessage() {}

func (m *Aggregation) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Aggregation) GotenMessage() {}

// Deprecated, Use Aggregation.ProtoReflect.Descriptor instead.
func (*Aggregation) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{6}
}

func (m *Aggregation) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Aggregation) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Aggregation) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Aggregation) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Aggregation) GetAlignmentPeriod() *durationpb.Duration {
	if m != nil {
		return m.AlignmentPeriod
	}
	return nil
}

func (m *Aggregation) GetPerSeriesAligner() Aggregation_Aligner {
	if m != nil {
		return m.PerSeriesAligner
	}
	return Aggregation_ALIGN_NONE
}

func (m *Aggregation) GetCrossSeriesReducer() Aggregation_Reducer {
	if m != nil {
		return m.CrossSeriesReducer
	}
	return Aggregation_REDUCE_NONE
}

func (m *Aggregation) GetGroupByFields() []string {
	if m != nil {
		return m.GroupByFields
	}
	return nil
}

func (m *Aggregation) SetAlignmentPeriod(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AlignmentPeriod", "Aggregation"))
	}
	m.AlignmentPeriod = fv
}

func (m *Aggregation) SetPerSeriesAligner(fv Aggregation_Aligner) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PerSeriesAligner", "Aggregation"))
	}
	m.PerSeriesAligner = fv
}

func (m *Aggregation) SetCrossSeriesReducer(fv Aggregation_Reducer) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CrossSeriesReducer", "Aggregation"))
	}
	m.CrossSeriesReducer = fv
}

func (m *Aggregation) SetGroupByFields(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupByFields", "Aggregation"))
	}
	m.GroupByFields = fv
}

// A specific metric, identified by specifying values for all of the
// labels of a [`MetricDescriptor`][google.api.MetricDescriptor].
type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// An existing metric type, see
	// [google.api.MetricDescriptor][google.api.MetricDescriptor]. For example,
	// `custom.googleapis.com/invoice/paid/amount`.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	// The set of label values that uniquely identify this metric. All
	// labels listed in the `MetricDescriptor` must be assigned values.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"labels"`
	// reduced labels in aggregations
	ReducedLabels []string `protobuf:"bytes,11,rep,name=reduced_labels,json=reducedLabels,proto3" json:"reduced_labels,omitempty" firestore:"reducedLabels"`
}

func (m *Metric) Reset() {
	*m = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Metric) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Metric) ProtoMessage() {}

func (m *Metric) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Metric) GotenMessage() {}

// Deprecated, Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{7}
}

func (m *Metric) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Metric) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Metric) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Metric) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Metric) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Metric) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Metric) GetReducedLabels() []string {
	if m != nil {
		return m.ReducedLabels
	}
	return nil
}

func (m *Metric) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Metric"))
	}
	m.Type = fv
}

func (m *Metric) SetLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Labels", "Metric"))
	}
	m.Labels = fv
}

func (m *Metric) SetReducedLabels(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReducedLabels", "Metric"))
	}
	m.ReducedLabels = fv
}

// An object representing a resource that can be used for monitoring, logging,
// billing, or other purposes. Examples include virtual machine instances,
// databases, and storage devices such as disks. The `type` field identifies a
// [MonitoredResourceDescriptor][google.api.MonitoredResourceDescriptor] object
// that describes the resource's schema. Information in the `labels` field
// identifies the actual resource and its attributes according to the schema.
// For example, a particular Compute Engine VM instance could be represented by
// the following object, because the
// [MonitoredResourceDescriptor][google.api.MonitoredResourceDescriptor] for
// `"gce_instance"` has labels
// `"instance_id"` and `"zone"`:
//
//     { "type": "gce_instance",
//       "labels": { "instance_id": "12345678901234",
//                   "zone": "us-central1-a" }}
type MonitoredResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Required. The monitored resource type. This field must match
	// the `type` field of a
	// [MonitoredResourceDescriptor][google.api.MonitoredResourceDescriptor]
	// object. For example, the type of a Compute Engine VM instance is
	// `gce_instance`.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	// Required. Values for all of the labels listed in the associated monitored
	// resource descriptor. For example, Compute Engine VM instances use the
	// labels `"project_id"`, `"instance_id"`, and `"zone"`.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"labels"`
	// reduced labels in aggregations
	ReducedLabels []string `protobuf:"bytes,11,rep,name=reduced_labels,json=reducedLabels,proto3" json:"reduced_labels,omitempty" firestore:"reducedLabels"`
}

func (m *MonitoredResource) Reset() {
	*m = MonitoredResource{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MonitoredResource) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MonitoredResource) ProtoMessage() {}

func (m *MonitoredResource) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MonitoredResource) GotenMessage() {}

// Deprecated, Use MonitoredResource.ProtoReflect.Descriptor instead.
func (*MonitoredResource) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{8}
}

func (m *MonitoredResource) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MonitoredResource) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MonitoredResource) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MonitoredResource) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MonitoredResource) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MonitoredResource) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MonitoredResource) GetReducedLabels() []string {
	if m != nil {
		return m.ReducedLabels
	}
	return nil
}

func (m *MonitoredResource) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "MonitoredResource"))
	}
	m.Type = fv
}

func (m *MonitoredResource) SetLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Labels", "MonitoredResource"))
	}
	m.Labels = fv
}

func (m *MonitoredResource) SetReducedLabels(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReducedLabels", "MonitoredResource"))
	}
	m.ReducedLabels = fv
}

// Represents wrapped list of strings.
type Strings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Values        []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" firestore:"values"`
}

func (m *Strings) Reset() {
	*m = Strings{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Strings) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Strings) ProtoMessage() {}

func (m *Strings) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Strings) GotenMessage() {}

// Deprecated, Use Strings.ProtoReflect.Descriptor instead.
func (*Strings) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{9}
}

func (m *Strings) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Strings) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Strings) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Strings) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Strings) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Strings) SetValues(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Values", "Strings"))
	}
	m.Values = fv
}

// MonitoredResourceSelector selects `resource.type` and list of labels used to
// build query, like:
//
// ```
// resource.type IN ("type0", "type1", ...) AND
// resource.labels.<key0> IN (label0_0, label0_1, ...) AND
// resource.labels.<key1> IN (label1_0, label1_1, ...) AND ...
// ```
//
// Note: Only one resource.type per query is currently allowed
type MonitoredResourceSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Types         []string `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty" firestore:"types"`
	// label key, e.g. "project_id", "target_id", etc
	// Note the missing "resource.labels." prefix.
	Labels map[string]*Strings `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"labels"`
}

func (m *MonitoredResourceSelector) Reset() {
	*m = MonitoredResourceSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MonitoredResourceSelector) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MonitoredResourceSelector) ProtoMessage() {}

func (m *MonitoredResourceSelector) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MonitoredResourceSelector) GotenMessage() {}

// Deprecated, Use MonitoredResourceSelector.ProtoReflect.Descriptor instead.
func (*MonitoredResourceSelector) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{10}
}

func (m *MonitoredResourceSelector) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MonitoredResourceSelector) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MonitoredResourceSelector) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MonitoredResourceSelector) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MonitoredResourceSelector) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *MonitoredResourceSelector) GetLabels() map[string]*Strings {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MonitoredResourceSelector) SetTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Types", "MonitoredResourceSelector"))
	}
	m.Types = fv
}

func (m *MonitoredResourceSelector) SetLabels(fv map[string]*Strings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Labels", "MonitoredResourceSelector"))
	}
	m.Labels = fv
}

// Metric selects `metric.type` and list of labels used to
// build query, like:
//
// ```
// metric.type IN ("type0", "type1", ...) AND
// metric.labels.<key0> IN (label0_0, label0_1, ...) AND
// metric.labels.<key1> IN (label1_0, label1_1, ...) AND ...
// ```
type MetricSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Types         []string `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty" firestore:"types"`
	// label key, e.g. "project_id", "target_id", etc
	// Note the missing "metric.labels." prefix.
	Labels map[string]*Strings `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"labels"`
}

func (m *MetricSelector) Reset() {
	*m = MetricSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricSelector) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricSelector) ProtoMessage() {}

func (m *MetricSelector) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricSelector) GotenMessage() {}

// Deprecated, Use MetricSelector.ProtoReflect.Descriptor instead.
func (*MetricSelector) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{11}
}

func (m *MetricSelector) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricSelector) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricSelector) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricSelector) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricSelector) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *MetricSelector) GetLabels() map[string]*Strings {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricSelector) SetTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Types", "MetricSelector"))
	}
	m.Types = fv
}

func (m *MetricSelector) SetLabels(fv map[string]*Strings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Labels", "MetricSelector"))
	}
	m.Labels = fv
}

type TimeSeriesSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Metric Selector used to specify filtered Metric types and labels
	Metric *MetricSelector `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty" firestore:"metric"`
	// Resource Selector used to specify filtered Monitored Resource
	// types and labels
	Resource *MonitoredResourceSelector `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty" firestore:"resource"`
}

func (m *TimeSeriesSelector) Reset() {
	*m = TimeSeriesSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *TimeSeriesSelector) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*TimeSeriesSelector) ProtoMessage() {}

func (m *TimeSeriesSelector) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*TimeSeriesSelector) GotenMessage() {}

// Deprecated, Use TimeSeriesSelector.ProtoReflect.Descriptor instead.
func (*TimeSeriesSelector) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{12}
}

func (m *TimeSeriesSelector) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *TimeSeriesSelector) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *TimeSeriesSelector) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *TimeSeriesSelector) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *TimeSeriesSelector) GetMetric() *MetricSelector {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *TimeSeriesSelector) GetResource() *MonitoredResourceSelector {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *TimeSeriesSelector) SetMetric(fv *MetricSelector) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metric", "TimeSeriesSelector"))
	}
	m.Metric = fv
}

func (m *TimeSeriesSelector) SetResource(fv *MonitoredResourceSelector) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resource", "TimeSeriesSelector"))
	}
	m.Resource = fv
}

// The range of the population values.
type Distribution_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The minimum of the population values.
	Min float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty" firestore:"min"`
	// The maximum of the population values.
	Max float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty" firestore:"max"`
}

func (m *Distribution_Range) Reset() {
	*m = Distribution_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Distribution_Range) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Distribution_Range) ProtoMessage() {}

func (m *Distribution_Range) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Distribution_Range) GotenMessage() {}

// Deprecated, Use Distribution_Range.ProtoReflect.Descriptor instead.
func (*Distribution_Range) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{2, 0}
}

func (m *Distribution_Range) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Distribution_Range) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Distribution_Range) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Distribution_Range) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Distribution_Range) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return float64(0)
}

func (m *Distribution_Range) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return float64(0)
}

func (m *Distribution_Range) SetMin(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Min", "Distribution_Range"))
	}
	m.Min = fv
}

func (m *Distribution_Range) SetMax(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Max", "Distribution_Range"))
	}
	m.Max = fv
}

// A Distribution may optionally contain a histogram of the values in the
// population.  The histogram is given in `bucket_counts` as counts of values
// that fall into one of a sequence of non-overlapping buckets.  The sequence
// of buckets is described by `bucket_options`.
//
// A bucket specifies an inclusive lower bound and exclusive upper bound for
// the values that are counted for that bucket.  The upper bound of a bucket
// is strictly greater than the lower bound.
//
// The sequence of N buckets for a Distribution consists of an underflow
// bucket (number 0), zero or more finite buckets (number 1 through N - 2) and
// an overflow bucket (number N - 1).  The buckets are contiguous:  the lower
// bound of bucket i (i > 0) is the same as the upper bound of bucket i - 1.
// The buckets span the whole range of finite values: lower bound of the
// underflow bucket is -infinity and the upper bound of the overflow bucket is
// +infinity.  The finite buckets are so-called because both bounds are
// finite.
//
// `BucketOptions` describes bucket boundaries in one of three ways.  Two
// describe the boundaries by giving parameters for a formula to generate
// boundaries and one gives the bucket boundaries explicitly.
//
// If `bucket_boundaries` is not given, then no `bucket_counts` may be given.
type Distribution_BucketOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Exactly one of these three fields must be set.
	//
	// Types that are valid to be assigned to Options:
	//	*Distribution_BucketOptions_LinearBuckets
	//	*Distribution_BucketOptions_ExponentialBuckets
	//	*Distribution_BucketOptions_ExplicitBuckets
	//	*Distribution_BucketOptions_DynamicBuckets
	Options isDistribution_BucketOptions_Options `protobuf_oneof:"options"`
}

func (m *Distribution_BucketOptions) Reset() {
	*m = Distribution_BucketOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Distribution_BucketOptions) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Distribution_BucketOptions) ProtoMessage() {}

func (m *Distribution_BucketOptions) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Distribution_BucketOptions) GotenMessage() {}

// Deprecated, Use Distribution_BucketOptions.ProtoReflect.Descriptor instead.
func (*Distribution_BucketOptions) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{2, 1}
}

func (m *Distribution_BucketOptions) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Distribution_BucketOptions) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Distribution_BucketOptions) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Distribution_BucketOptions) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isDistribution_BucketOptions_Options interface {
	isDistribution_BucketOptions_Options()
}

type Distribution_BucketOptions_LinearBuckets struct {
	// The linear bucket.
	LinearBuckets *Distribution_BucketOptions_Linear `protobuf:"bytes,1,opt,name=linear_buckets,json=linearBuckets,proto3,oneof" firestore:"linearBuckets"`
}
type Distribution_BucketOptions_ExponentialBuckets struct {
	// The exponential buckets.
	ExponentialBuckets *Distribution_BucketOptions_Exponential `protobuf:"bytes,2,opt,name=exponential_buckets,json=exponentialBuckets,proto3,oneof" firestore:"exponentialBuckets"`
}
type Distribution_BucketOptions_ExplicitBuckets struct {
	// The explicit buckets.
	ExplicitBuckets *Distribution_BucketOptions_Explicit `protobuf:"bytes,3,opt,name=explicit_buckets,json=explicitBuckets,proto3,oneof" firestore:"explicitBuckets"`
}
type Distribution_BucketOptions_DynamicBuckets struct {
	// TDigest dynamic bucketing
	DynamicBuckets *Distribution_BucketOptions_Dynamic `protobuf:"bytes,9,opt,name=dynamic_buckets,json=dynamicBuckets,proto3,oneof" firestore:"dynamicBuckets"`
}

func (*Distribution_BucketOptions_LinearBuckets) isDistribution_BucketOptions_Options()      {}
func (*Distribution_BucketOptions_ExponentialBuckets) isDistribution_BucketOptions_Options() {}
func (*Distribution_BucketOptions_ExplicitBuckets) isDistribution_BucketOptions_Options()    {}
func (*Distribution_BucketOptions_DynamicBuckets) isDistribution_BucketOptions_Options()     {}
func (m *Distribution_BucketOptions) GetOptions() isDistribution_BucketOptions_Options {
	if m != nil {
		return m.Options
	}
	return nil
}
func (m *Distribution_BucketOptions) GetLinearBuckets() *Distribution_BucketOptions_Linear {
	if x, ok := m.GetOptions().(*Distribution_BucketOptions_LinearBuckets); ok {
		return x.LinearBuckets
	}
	return nil
}
func (m *Distribution_BucketOptions) GetExponentialBuckets() *Distribution_BucketOptions_Exponential {
	if x, ok := m.GetOptions().(*Distribution_BucketOptions_ExponentialBuckets); ok {
		return x.ExponentialBuckets
	}
	return nil
}
func (m *Distribution_BucketOptions) GetExplicitBuckets() *Distribution_BucketOptions_Explicit {
	if x, ok := m.GetOptions().(*Distribution_BucketOptions_ExplicitBuckets); ok {
		return x.ExplicitBuckets
	}
	return nil
}
func (m *Distribution_BucketOptions) GetDynamicBuckets() *Distribution_BucketOptions_Dynamic {
	if x, ok := m.GetOptions().(*Distribution_BucketOptions_DynamicBuckets); ok {
		return x.DynamicBuckets
	}
	return nil
}
func (m *Distribution_BucketOptions) SetOptions(ofv isDistribution_BucketOptions_Options) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isDistribution_BucketOptions_Options", "Distribution_BucketOptions"))
	}
	m.Options = ofv
}
func (m *Distribution_BucketOptions) SetLinearBuckets(fv *Distribution_BucketOptions_Linear) {
	m.SetOptions(&Distribution_BucketOptions_LinearBuckets{LinearBuckets: fv})
}
func (m *Distribution_BucketOptions) SetExponentialBuckets(fv *Distribution_BucketOptions_Exponential) {
	m.SetOptions(&Distribution_BucketOptions_ExponentialBuckets{ExponentialBuckets: fv})
}
func (m *Distribution_BucketOptions) SetExplicitBuckets(fv *Distribution_BucketOptions_Explicit) {
	m.SetOptions(&Distribution_BucketOptions_ExplicitBuckets{ExplicitBuckets: fv})
}
func (m *Distribution_BucketOptions) SetDynamicBuckets(fv *Distribution_BucketOptions_Dynamic) {
	m.SetOptions(&Distribution_BucketOptions_DynamicBuckets{DynamicBuckets: fv})
}

// Specify a sequence of buckets that all have the same width (except
// overflow and underflow).  Each bucket represents a constant absolute
// uncertainty on the specific value in the bucket.
//
// Defines `num_finite_buckets + 2` (= N) buckets with these boundaries for
// bucket `i`:
//
//    Upper bound (0 <= i < N-1):     offset + (width * i).
//    Lower bound (1 <= i < N):       offset + (width * (i - 1)).
type Distribution_BucketOptions_Linear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Must be greater than 0.
	NumFiniteBuckets int32 `protobuf:"varint,1,opt,name=num_finite_buckets,json=numFiniteBuckets,proto3" json:"num_finite_buckets,omitempty" firestore:"numFiniteBuckets"`
	// Must be greater than 0.
	Width float64 `protobuf:"fixed64,2,opt,name=width,proto3" json:"width,omitempty" firestore:"width"`
	// Lower bound of the first bucket.
	Offset float64 `protobuf:"fixed64,3,opt,name=offset,proto3" json:"offset,omitempty" firestore:"offset"`
}

func (m *Distribution_BucketOptions_Linear) Reset() {
	*m = Distribution_BucketOptions_Linear{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Distribution_BucketOptions_Linear) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Distribution_BucketOptions_Linear) ProtoMessage() {}

func (m *Distribution_BucketOptions_Linear) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Distribution_BucketOptions_Linear) GotenMessage() {}

// Deprecated, Use Distribution_BucketOptions_Linear.ProtoReflect.Descriptor instead.
func (*Distribution_BucketOptions_Linear) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (m *Distribution_BucketOptions_Linear) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Distribution_BucketOptions_Linear) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Distribution_BucketOptions_Linear) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Distribution_BucketOptions_Linear) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Distribution_BucketOptions_Linear) GetNumFiniteBuckets() int32 {
	if m != nil {
		return m.NumFiniteBuckets
	}
	return int32(0)
}

func (m *Distribution_BucketOptions_Linear) GetWidth() float64 {
	if m != nil {
		return m.Width
	}
	return float64(0)
}

func (m *Distribution_BucketOptions_Linear) GetOffset() float64 {
	if m != nil {
		return m.Offset
	}
	return float64(0)
}

func (m *Distribution_BucketOptions_Linear) SetNumFiniteBuckets(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NumFiniteBuckets", "Distribution_BucketOptions_Linear"))
	}
	m.NumFiniteBuckets = fv
}

func (m *Distribution_BucketOptions_Linear) SetWidth(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Width", "Distribution_BucketOptions_Linear"))
	}
	m.Width = fv
}

func (m *Distribution_BucketOptions_Linear) SetOffset(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Offset", "Distribution_BucketOptions_Linear"))
	}
	m.Offset = fv
}

// Specify a sequence of buckets that have a width that is proportional to
// the value of the lower bound.  Each bucket represents a constant relative
// uncertainty on a specific value in the bucket.
//
// Defines `num_finite_buckets + 2` (= N) buckets with these boundaries for
// bucket i:
//
//    Upper bound (0 <= i < N-1):     scale * (growth_factor ^ i).
//    Lower bound (1 <= i < N):       scale * (growth_factor ^ (i - 1)).
type Distribution_BucketOptions_Exponential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Must be greater than 0.
	NumFiniteBuckets int32 `protobuf:"varint,1,opt,name=num_finite_buckets,json=numFiniteBuckets,proto3" json:"num_finite_buckets,omitempty" firestore:"numFiniteBuckets"`
	// Must be greater than 1.
	GrowthFactor float64 `protobuf:"fixed64,2,opt,name=growth_factor,json=growthFactor,proto3" json:"growth_factor,omitempty" firestore:"growthFactor"`
	// Must be greater than 0.
	Scale float64 `protobuf:"fixed64,3,opt,name=scale,proto3" json:"scale,omitempty" firestore:"scale"`
}

func (m *Distribution_BucketOptions_Exponential) Reset() {
	*m = Distribution_BucketOptions_Exponential{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Distribution_BucketOptions_Exponential) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Distribution_BucketOptions_Exponential) ProtoMessage() {}

func (m *Distribution_BucketOptions_Exponential) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Distribution_BucketOptions_Exponential) GotenMessage() {}

// Deprecated, Use Distribution_BucketOptions_Exponential.ProtoReflect.Descriptor instead.
func (*Distribution_BucketOptions_Exponential) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (m *Distribution_BucketOptions_Exponential) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Distribution_BucketOptions_Exponential) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Distribution_BucketOptions_Exponential) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Distribution_BucketOptions_Exponential) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Distribution_BucketOptions_Exponential) GetNumFiniteBuckets() int32 {
	if m != nil {
		return m.NumFiniteBuckets
	}
	return int32(0)
}

func (m *Distribution_BucketOptions_Exponential) GetGrowthFactor() float64 {
	if m != nil {
		return m.GrowthFactor
	}
	return float64(0)
}

func (m *Distribution_BucketOptions_Exponential) GetScale() float64 {
	if m != nil {
		return m.Scale
	}
	return float64(0)
}

func (m *Distribution_BucketOptions_Exponential) SetNumFiniteBuckets(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NumFiniteBuckets", "Distribution_BucketOptions_Exponential"))
	}
	m.NumFiniteBuckets = fv
}

func (m *Distribution_BucketOptions_Exponential) SetGrowthFactor(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GrowthFactor", "Distribution_BucketOptions_Exponential"))
	}
	m.GrowthFactor = fv
}

func (m *Distribution_BucketOptions_Exponential) SetScale(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Scale", "Distribution_BucketOptions_Exponential"))
	}
	m.Scale = fv
}

// A set of buckets with arbitrary widths.
//
// Defines `size(bounds) + 1` (= N) buckets with these boundaries for
// bucket i:
//
//    Upper bound (0 <= i < N-1):     bounds[i]
//    Lower bound (1 <= i < N);       bounds[i - 1]
//
// There must be at least one element in `bounds`.  If `bounds` has only one
// element, there are no finite buckets, and that single element is the
// common boundary of the overflow and underflow buckets.
type Distribution_BucketOptions_Explicit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The values must be monotonically increasing.
	Bounds []float64 `protobuf:"fixed64,1,rep,packed,name=bounds,proto3" json:"bounds,omitempty" firestore:"bounds"`
}

func (m *Distribution_BucketOptions_Explicit) Reset() {
	*m = Distribution_BucketOptions_Explicit{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Distribution_BucketOptions_Explicit) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Distribution_BucketOptions_Explicit) ProtoMessage() {}

func (m *Distribution_BucketOptions_Explicit) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Distribution_BucketOptions_Explicit) GotenMessage() {}

// Deprecated, Use Distribution_BucketOptions_Explicit.ProtoReflect.Descriptor instead.
func (*Distribution_BucketOptions_Explicit) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{2, 1, 2}
}

func (m *Distribution_BucketOptions_Explicit) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Distribution_BucketOptions_Explicit) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Distribution_BucketOptions_Explicit) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Distribution_BucketOptions_Explicit) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Distribution_BucketOptions_Explicit) GetBounds() []float64 {
	if m != nil {
		return m.Bounds
	}
	return nil
}

func (m *Distribution_BucketOptions_Explicit) SetBounds(fv []float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bounds", "Distribution_BucketOptions_Explicit"))
	}
	m.Bounds = fv
}

// Dynamic buckets centroid based. TDigest implementation.
type Distribution_BucketOptions_Dynamic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// TDigest compression rate
	Compression float64 `protobuf:"fixed64,1,opt,name=compression,proto3" json:"compression,omitempty" firestore:"compression"`
	// Centroid means. Must be the same length as bucket counts.
	// Each mean, count represents a weighed centroid.
	Means []float64 `protobuf:"fixed64,2,rep,packed,name=means,proto3" json:"means,omitempty" firestore:"means"`
}

func (m *Distribution_BucketOptions_Dynamic) Reset() {
	*m = Distribution_BucketOptions_Dynamic{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Distribution_BucketOptions_Dynamic) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Distribution_BucketOptions_Dynamic) ProtoMessage() {}

func (m *Distribution_BucketOptions_Dynamic) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Distribution_BucketOptions_Dynamic) GotenMessage() {}

// Deprecated, Use Distribution_BucketOptions_Dynamic.ProtoReflect.Descriptor instead.
func (*Distribution_BucketOptions_Dynamic) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_common_proto_rawDescGZIP(), []int{2, 1, 3}
}

func (m *Distribution_BucketOptions_Dynamic) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Distribution_BucketOptions_Dynamic) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Distribution_BucketOptions_Dynamic) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Distribution_BucketOptions_Dynamic) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Distribution_BucketOptions_Dynamic) GetCompression() float64 {
	if m != nil {
		return m.Compression
	}
	return float64(0)
}

func (m *Distribution_BucketOptions_Dynamic) GetMeans() []float64 {
	if m != nil {
		return m.Means
	}
	return nil
}

func (m *Distribution_BucketOptions_Dynamic) SetCompression(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Compression", "Distribution_BucketOptions_Dynamic"))
	}
	m.Compression = fv
}

func (m *Distribution_BucketOptions_Dynamic) SetMeans(fv []float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Means", "Distribution_BucketOptions_Dynamic"))
	}
	m.Means = fv
}

var edgelq_monitoring_proto_v4_common_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v4_common_proto_rawDesc = []byte{
	0x0a, 0x27, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4,
	0x02, 0x0a, 0x0f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x39, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x27, 0xca, 0xc6, 0x27, 0x23, 0x2a, 0x21, 0x52, 0x1f, 0x42, 0x1d, 0x5e, 0x5b, 0x5f, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x30, 0x2c, 0x33, 0x31, 0x7d, 0x24, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x55, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x08, 0xca, 0xc6, 0x27, 0x04, 0x3a, 0x02, 0x0a, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2c, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e,
	0x54, 0x36, 0x34, 0x10, 0x02, 0x22, 0x4b, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x6e,
	0x6c, 0x79, 0x22, 0xcc, 0x08, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x37, 0x0a,
	0x18, 0x73, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x15, 0x73, 0x75, 0x6d, 0x4f, 0x66, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x2b,
	0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x1a, 0xf3, 0x05, 0x0a, 0x0d,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a,
	0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x6c, 0x0a, 0x13,
	0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x10, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x60, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x48,
	0x00, 0x52, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x1a, 0x64, 0x0a, 0x06, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6e,
	0x75, 0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6e, 0x69,
	0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x76, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x67, 0x72, 0x6f,
	0x77, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x1a,
	0x22, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x1a, 0x41, 0x0a, 0x07, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x05, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xf5, 0x01, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50,
	0x0a, 0x12, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02,
	0x08, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfb, 0x08, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x10, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x49, 0xca, 0xc6, 0x27,
	0x45, 0x5a, 0x43, 0x3a, 0x00, 0x3a, 0x02, 0x08, 0x3c, 0x3a, 0x03, 0x08, 0xb4, 0x01, 0x3a, 0x03,
	0x08, 0xac, 0x02, 0x3a, 0x03, 0x08, 0x84, 0x07, 0x3a, 0x03, 0x08, 0x88, 0x0e, 0x3a, 0x03, 0x08,
	0x90, 0x1c, 0x3a, 0x03, 0x08, 0xb0, 0x54, 0x3a, 0x04, 0x08, 0xe0, 0xa8, 0x01, 0x3a, 0x04, 0x08,
	0xc0, 0xd1, 0x02, 0x3a, 0x04, 0x08, 0x80, 0xa3, 0x05, 0x3a, 0x04, 0x08, 0x80, 0xf5, 0x24, 0x3a,
	0x05, 0x08, 0x80, 0xd4, 0x93, 0x01, 0x52, 0x0f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x54, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x10, 0x70, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x58, 0x0a,
	0x14, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x52, 0x12, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0xb9, 0x03, 0x0a, 0x07, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x4f, 0x4c, 0x41, 0x54,
	0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x49,
	0x47, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x49, 0x47,
	0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x49, 0x47, 0x4e,
	0x5f, 0x4d, 0x45, 0x41, 0x4e, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x49, 0x47, 0x4e,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x49, 0x47,
	0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x49, 0x47, 0x4e,
	0x5f, 0x53, 0x54, 0x44, 0x44, 0x45, 0x56, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x49,
	0x47, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x10, 0x12,
	0x15, 0x0a, 0x11, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46,
	0x41, 0x4c, 0x53, 0x45, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f,
	0x46, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x11, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54,
	0x49, 0x4c, 0x45, 0x5f, 0x39, 0x39, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x49, 0x47,
	0x4e, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x39, 0x35, 0x10,
	0x13, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x35, 0x30, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c,
	0x49, 0x47, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x30,
	0x35, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x17, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x2d,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x54, 0x44, 0x49, 0x47, 0x45, 0x53,
	0x54, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x2e, 0x22, 0xc5, 0x02, 0x0a, 0x07,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x44, 0x55, 0x43,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x44, 0x55,
	0x43, 0x45, 0x5f, 0x4d, 0x45, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x44,
	0x55, 0x43, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x44,
	0x55, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x44,
	0x55, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x44,
	0x55, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x44, 0x44, 0x45, 0x56, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x52, 0x55, 0x45, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x0f, 0x12, 0x18, 0x0a,
	0x14, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x44, 0x55, 0x43,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x39, 0x39, 0x10,
	0x09, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x39, 0x35, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x45, 0x44, 0x55, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45,
	0x5f, 0x35, 0x30, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x30, 0x35, 0x10, 0x0c, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52,
	0x59, 0x10, 0x0d, 0x22, 0xfc, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x40,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xca, 0xc6,
	0x27, 0x28, 0x2a, 0x26, 0x52, 0x24, 0x42, 0x22, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5f, 0x5c, 0x2d, 0x2e, 0x2c, 0x2b, 0x21, 0x2a, 0x28, 0x29, 0x25, 0x5c, 0x5c,
	0x2f, 0x5d, 0x7b, 0x31, 0x2c, 0x32, 0x35, 0x36, 0x7d, 0x24, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0f, 0xca, 0xc6, 0x27, 0x0b, 0x4a, 0x09, 0x22,
	0x07, 0x2a, 0x05, 0x22, 0x03, 0x08, 0x80, 0x08, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd3, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x21, 0x0a, 0x07, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x19,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x42, 0x08,
	0x0a, 0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x01, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x50, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x55, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06,
	0x42, 0x04, 0x0a, 0x02, 0x08, 0x01, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x1a, 0x55, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x12,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x43, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x52, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08,
	0x01, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2a, 0x27, 0x0a, 0x0e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x53, 0x10, 0x01, 0x42, 0x6f, 0xe8, 0xde, 0x21, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x62, 0x2e, 0x76, 0x34, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x00, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3b, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v4_common_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v4_common_proto_rawDescData = edgelq_monitoring_proto_v4_common_proto_rawDesc
)

func edgelq_monitoring_proto_v4_common_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v4_common_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v4_common_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v4_common_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v4_common_proto_rawDescData
}

var edgelq_monitoring_proto_v4_common_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var edgelq_monitoring_proto_v4_common_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var edgelq_monitoring_proto_v4_common_proto_goTypes = []interface{}{
	(TimeSeriesView)(0),                            // 0: ntt.monitoring.v4.TimeSeriesView
	(LabelDescriptor_ValueType)(0),                 // 1: ntt.monitoring.v4.LabelDescriptor_ValueType
	(Aggregation_Aligner)(0),                       // 2: ntt.monitoring.v4.Aggregation_Aligner
	(Aggregation_Reducer)(0),                       // 3: ntt.monitoring.v4.Aggregation_Reducer
	(*LabelDescriptor)(nil),                        // 4: ntt.monitoring.v4.LabelDescriptor
	(*LabelKeySet)(nil),                            // 5: ntt.monitoring.v4.LabelKeySet
	(*Distribution)(nil),                           // 6: ntt.monitoring.v4.Distribution
	(*TypedValue)(nil),                             // 7: ntt.monitoring.v4.TypedValue
	(*TimeInterval)(nil),                           // 8: ntt.monitoring.v4.TimeInterval
	(*TimeRange)(nil),                              // 9: ntt.monitoring.v4.TimeRange
	(*Aggregation)(nil),                            // 10: ntt.monitoring.v4.Aggregation
	(*Metric)(nil),                                 // 11: ntt.monitoring.v4.Metric
	(*MonitoredResource)(nil),                      // 12: ntt.monitoring.v4.MonitoredResource
	(*Strings)(nil),                                // 13: ntt.monitoring.v4.Strings
	(*MonitoredResourceSelector)(nil),              // 14: ntt.monitoring.v4.MonitoredResourceSelector
	(*MetricSelector)(nil),                         // 15: ntt.monitoring.v4.MetricSelector
	(*TimeSeriesSelector)(nil),                     // 16: ntt.monitoring.v4.TimeSeriesSelector
	(*Distribution_Range)(nil),                     // 17: ntt.monitoring.v4.Distribution.Range
	(*Distribution_BucketOptions)(nil),             // 18: ntt.monitoring.v4.Distribution.BucketOptions
	(*Distribution_BucketOptions_Linear)(nil),      // 19: ntt.monitoring.v4.Distribution.BucketOptions.Linear
	(*Distribution_BucketOptions_Exponential)(nil), // 20: ntt.monitoring.v4.Distribution.BucketOptions.Exponential
	(*Distribution_BucketOptions_Explicit)(nil),    // 21: ntt.monitoring.v4.Distribution.BucketOptions.Explicit
	(*Distribution_BucketOptions_Dynamic)(nil),     // 22: ntt.monitoring.v4.Distribution.BucketOptions.Dynamic
	nil,                           // 23: ntt.monitoring.v4.Metric.LabelsEntry
	nil,                           // 24: ntt.monitoring.v4.MonitoredResource.LabelsEntry
	nil,                           // 25: ntt.monitoring.v4.MonitoredResourceSelector.LabelsEntry
	nil,                           // 26: ntt.monitoring.v4.MetricSelector.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 27: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 28: google.protobuf.Duration
}
var edgelq_monitoring_proto_v4_common_proto_depIdxs = []int32{
	1,  // 0: ntt.monitoring.v4.LabelDescriptor.value_type:type_name -> ntt.monitoring.v4.LabelDescriptor_ValueType
	17, // 1: ntt.monitoring.v4.Distribution.range:type_name -> ntt.monitoring.v4.Distribution.Range
	18, // 2: ntt.monitoring.v4.Distribution.bucket_options:type_name -> ntt.monitoring.v4.Distribution.BucketOptions
	6,  // 3: ntt.monitoring.v4.TypedValue.distribution_value:type_name -> ntt.monitoring.v4.Distribution
	27, // 4: ntt.monitoring.v4.TimeInterval.end_time:type_name -> google.protobuf.Timestamp
	27, // 5: ntt.monitoring.v4.TimeInterval.start_time:type_name -> google.protobuf.Timestamp
	27, // 6: ntt.monitoring.v4.TimeRange.start_time:type_name -> google.protobuf.Timestamp
	27, // 7: ntt.monitoring.v4.TimeRange.end_time:type_name -> google.protobuf.Timestamp
	28, // 8: ntt.monitoring.v4.Aggregation.alignment_period:type_name -> google.protobuf.Duration
	2,  // 9: ntt.monitoring.v4.Aggregation.per_series_aligner:type_name -> ntt.monitoring.v4.Aggregation_Aligner
	3,  // 10: ntt.monitoring.v4.Aggregation.cross_series_reducer:type_name -> ntt.monitoring.v4.Aggregation_Reducer
	23, // 11: ntt.monitoring.v4.Metric.labels:type_name -> ntt.monitoring.v4.Metric.LabelsEntry
	24, // 12: ntt.monitoring.v4.MonitoredResource.labels:type_name -> ntt.monitoring.v4.MonitoredResource.LabelsEntry
	25, // 13: ntt.monitoring.v4.MonitoredResourceSelector.labels:type_name -> ntt.monitoring.v4.MonitoredResourceSelector.LabelsEntry
	26, // 14: ntt.monitoring.v4.MetricSelector.labels:type_name -> ntt.monitoring.v4.MetricSelector.LabelsEntry
	15, // 15: ntt.monitoring.v4.TimeSeriesSelector.metric:type_name -> ntt.monitoring.v4.MetricSelector
	14, // 16: ntt.monitoring.v4.TimeSeriesSelector.resource:type_name -> ntt.monitoring.v4.MonitoredResourceSelector
	19, // 17: ntt.monitoring.v4.Distribution.BucketOptions.linear_buckets:type_name -> ntt.monitoring.v4.Distribution.BucketOptions.Linear
	20, // 18: ntt.monitoring.v4.Distribution.BucketOptions.exponential_buckets:type_name -> ntt.monitoring.v4.Distribution.BucketOptions.Exponential
	21, // 19: ntt.monitoring.v4.Distribution.BucketOptions.explicit_buckets:type_name -> ntt.monitoring.v4.Distribution.BucketOptions.Explicit
	22, // 20: ntt.monitoring.v4.Distribution.BucketOptions.dynamic_buckets:type_name -> ntt.monitoring.v4.Distribution.BucketOptions.Dynamic
	13, // 21: ntt.monitoring.v4.MonitoredResourceSelector.LabelsEntry.value:type_name -> ntt.monitoring.v4.Strings
	13, // 22: ntt.monitoring.v4.MetricSelector.LabelsEntry.value:type_name -> ntt.monitoring.v4.Strings
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v4_common_proto_init() }
func edgelq_monitoring_proto_v4_common_proto_init() {
	if edgelq_monitoring_proto_v4_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v4_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelKeySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoredResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Strings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoredResourceSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSeriesSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distribution_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distribution_BucketOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distribution_BucketOptions_Linear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distribution_BucketOptions_Exponential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distribution_BucketOptions_Explicit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distribution_BucketOptions_Dynamic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_monitoring_proto_v4_common_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TypedValue_BoolValue)(nil),
		(*TypedValue_Int64Value)(nil),
		(*TypedValue_DoubleValue)(nil),
		(*TypedValue_StringValue)(nil),
		(*TypedValue_DistributionValue)(nil),
	}
	edgelq_monitoring_proto_v4_common_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Distribution_BucketOptions_LinearBuckets)(nil),
		(*Distribution_BucketOptions_ExponentialBuckets)(nil),
		(*Distribution_BucketOptions_ExplicitBuckets)(nil),
		(*Distribution_BucketOptions_DynamicBuckets)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v4_common_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_monitoring_proto_v4_common_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v4_common_proto_depIdxs,
		EnumInfos:         edgelq_monitoring_proto_v4_common_proto_enumTypes,
		MessageInfos:      edgelq_monitoring_proto_v4_common_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v4_common_proto = out.File
	edgelq_monitoring_proto_v4_common_proto_rawDesc = nil
	edgelq_monitoring_proto_v4_common_proto_goTypes = nil
	edgelq_monitoring_proto_v4_common_proto_depIdxs = nil
}
