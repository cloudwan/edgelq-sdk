// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v4/bucket.proto
// DO NOT EDIT!!!

package bucket

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Bucket Resource restricts create/list time series requests to
// the specified metric/resource types.
type Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Bucket
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [\\w./-]{2,128}
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Allowed metric combinations (OR). If empty, all metric types are allowed.
	Metrics []*Bucket_RequiredTypedLabels `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Allowed resource combinations (OR).If empty, all resource types are
	// allowed.
	Resources []*Bucket_RequiredTypedLabels `protobuf:"bytes,4,rep,name=resources,proto3" json:"resources,omitempty"`
	// All combinations of key-values (in integer forms) - one of them must be
	// passed by every TimeSerie object for given bucket. Its computed by server
	// side and for internal use.
	RequiredAltKvs []*Bucket_ResolvedKeysWithValues `protobuf:"bytes,5,rep,name=required_alt_kvs,json=requiredAltKvs,proto3" json:"required_alt_kvs,omitempty"`
}

func (m *Bucket) Reset() {
	*m = Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_bucket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Bucket) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Bucket) ProtoMessage() {}

func (m *Bucket) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_bucket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Bucket) GotenMessage() {}

// Deprecated, Use Bucket.ProtoReflect.Descriptor instead.
func (*Bucket) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_bucket_proto_rawDescGZIP(), []int{0}
}

func (m *Bucket) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Bucket) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Bucket) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Bucket) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Bucket) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Bucket) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Bucket) GetMetrics() []*Bucket_RequiredTypedLabels {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *Bucket) GetResources() []*Bucket_RequiredTypedLabels {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Bucket) GetRequiredAltKvs() []*Bucket_ResolvedKeysWithValues {
	if m != nil {
		return m.RequiredAltKvs
	}
	return nil
}

func (m *Bucket) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Bucket"))
	}
	m.Name = fv
}

func (m *Bucket) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Bucket"))
	}
	m.Metadata = fv
}

func (m *Bucket) SetMetrics(fv []*Bucket_RequiredTypedLabels) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metrics", "Bucket"))
	}
	m.Metrics = fv
}

func (m *Bucket) SetResources(fv []*Bucket_RequiredTypedLabels) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resources", "Bucket"))
	}
	m.Resources = fv
}

func (m *Bucket) SetRequiredAltKvs(fv []*Bucket_ResolvedKeysWithValues) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequiredAltKvs", "Bucket"))
	}
	m.RequiredAltKvs = fv
}

// ResolvedValues contains binary representation of types and labels and
// possible values. Due to limitations in some db backends (looking at
// firestore), we use int64 instead of uint64.
type Bucket_ResolvedValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Key           int64   `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Values        []int64 `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (m *Bucket_ResolvedValues) Reset() {
	*m = Bucket_ResolvedValues{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_bucket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Bucket_ResolvedValues) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Bucket_ResolvedValues) ProtoMessage() {}

func (m *Bucket_ResolvedValues) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_bucket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Bucket_ResolvedValues) GotenMessage() {}

// Deprecated, Use Bucket_ResolvedValues.ProtoReflect.Descriptor instead.
func (*Bucket_ResolvedValues) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_bucket_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Bucket_ResolvedValues) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Bucket_ResolvedValues) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Bucket_ResolvedValues) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Bucket_ResolvedValues) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Bucket_ResolvedValues) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return int64(0)
}

func (m *Bucket_ResolvedValues) GetValues() []int64 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Bucket_ResolvedValues) SetKey(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "Bucket_ResolvedValues"))
	}
	m.Key = fv
}

func (m *Bucket_ResolvedValues) SetValues(fv []int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Values", "Bucket_ResolvedValues"))
	}
	m.Values = fv
}

// ResolvedKeysWithValues binds multiple keys with possible values.
type Bucket_ResolvedKeysWithValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ResolvedKvs   []*Bucket_ResolvedValues `protobuf:"bytes,1,rep,name=resolved_kvs,json=resolvedKvs,proto3" json:"resolved_kvs,omitempty"`
}

func (m *Bucket_ResolvedKeysWithValues) Reset() {
	*m = Bucket_ResolvedKeysWithValues{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_bucket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Bucket_ResolvedKeysWithValues) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Bucket_ResolvedKeysWithValues) ProtoMessage() {}

func (m *Bucket_ResolvedKeysWithValues) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_bucket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Bucket_ResolvedKeysWithValues) GotenMessage() {}

// Deprecated, Use Bucket_ResolvedKeysWithValues.ProtoReflect.Descriptor instead.
func (*Bucket_ResolvedKeysWithValues) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_bucket_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Bucket_ResolvedKeysWithValues) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Bucket_ResolvedKeysWithValues) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Bucket_ResolvedKeysWithValues) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Bucket_ResolvedKeysWithValues) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Bucket_ResolvedKeysWithValues) GetResolvedKvs() []*Bucket_ResolvedValues {
	if m != nil {
		return m.ResolvedKvs
	}
	return nil
}

func (m *Bucket_ResolvedKeysWithValues) SetResolvedKvs(fv []*Bucket_ResolvedValues) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResolvedKvs", "Bucket_ResolvedKeysWithValues"))
	}
	m.ResolvedKvs = fv
}

// RequiredTypedLabels describes required label values for specified
// metric and resource types. All time series in Create operation
// must contain at least one allowed type and then labels must match
// all the labels. For list queries, filter must contain at least one
// type and all labels must be present in condition containing all
// or subset of allowed label values.
type Bucket_RequiredTypedLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Types         []string                                       `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	Labels        map[string]*Bucket_RequiredTypedLabels_Strings `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Bucket_RequiredTypedLabels) Reset() {
	*m = Bucket_RequiredTypedLabels{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_bucket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Bucket_RequiredTypedLabels) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Bucket_RequiredTypedLabels) ProtoMessage() {}

func (m *Bucket_RequiredTypedLabels) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_bucket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Bucket_RequiredTypedLabels) GotenMessage() {}

// Deprecated, Use Bucket_RequiredTypedLabels.ProtoReflect.Descriptor instead.
func (*Bucket_RequiredTypedLabels) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_bucket_proto_rawDescGZIP(), []int{0, 2}
}

func (m *Bucket_RequiredTypedLabels) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Bucket_RequiredTypedLabels) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Bucket_RequiredTypedLabels) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Bucket_RequiredTypedLabels) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Bucket_RequiredTypedLabels) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *Bucket_RequiredTypedLabels) GetLabels() map[string]*Bucket_RequiredTypedLabels_Strings {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Bucket_RequiredTypedLabels) SetTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Types", "Bucket_RequiredTypedLabels"))
	}
	m.Types = fv
}

func (m *Bucket_RequiredTypedLabels) SetLabels(fv map[string]*Bucket_RequiredTypedLabels_Strings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Labels", "Bucket_RequiredTypedLabels"))
	}
	m.Labels = fv
}

type Bucket_RequiredTypedLabels_Strings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Strings       []string `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
}

func (m *Bucket_RequiredTypedLabels_Strings) Reset() {
	*m = Bucket_RequiredTypedLabels_Strings{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_bucket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Bucket_RequiredTypedLabels_Strings) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Bucket_RequiredTypedLabels_Strings) ProtoMessage() {}

func (m *Bucket_RequiredTypedLabels_Strings) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_bucket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Bucket_RequiredTypedLabels_Strings) GotenMessage() {}

// Deprecated, Use Bucket_RequiredTypedLabels_Strings.ProtoReflect.Descriptor instead.
func (*Bucket_RequiredTypedLabels_Strings) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_bucket_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (m *Bucket_RequiredTypedLabels_Strings) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Bucket_RequiredTypedLabels_Strings) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Bucket_RequiredTypedLabels_Strings) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Bucket_RequiredTypedLabels_Strings) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Bucket_RequiredTypedLabels_Strings) GetStrings() []string {
	if m != nil {
		return m.Strings
	}
	return nil
}

func (m *Bucket_RequiredTypedLabels_Strings) SetStrings(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Strings", "Bucket_RequiredTypedLabels_Strings"))
	}
	m.Strings = fv
}

var edgelq_monitoring_proto_v4_bucket_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v4_bucket_proto_rawDesc = []byte{
	0x0a, 0x27, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95,
	0x08, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x0a, 0x08, 0x0a,
	0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x34, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x60, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61,
	0x6c, 0x74, 0x5f, 0x6b, 0x76, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x73, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x04,
	0xf0, 0xd9, 0x21, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x6c,
	0x74, 0x4b, 0x76, 0x73, 0x1a, 0x3a, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x1a, 0x65, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x6b, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x4b, 0x76, 0x73, 0x1a, 0xb1, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x22, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c,
	0xca, 0xc6, 0x27, 0x08, 0x42, 0x06, 0x0a, 0x02, 0x08, 0x01, 0x18, 0x01, 0x52, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x31, 0x0a, 0x07, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x26, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x42, 0x06, 0x0a, 0x02, 0x08, 0x01, 0x18, 0x01,
	0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x70, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xe8, 0x01, 0xea, 0x41,
	0x54, 0x0a, 0x1c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x34, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x7d, 0x92, 0xd9, 0x21, 0x47, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x07, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x18, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2a, 0x0e,
	0x5b, 0x5c, 0x77, 0x2e, 0x2f, 0x2d, 0x5d, 0x7b, 0x32, 0x2c, 0x31, 0x32, 0x38, 0x7d, 0x38, 0x05,
	0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x36,
	0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x10, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x6b, 0x76, 0x73, 0x42, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x85, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0,
	0x02, 0x45, 0x0a, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x34,
	0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0xa2, 0x80, 0xd1, 0x02, 0x47, 0x0a, 0x0d, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x34, 0x2f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x34, 0x42, 0x0b, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x34,
	0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x3b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v4_bucket_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v4_bucket_proto_rawDescData = edgelq_monitoring_proto_v4_bucket_proto_rawDesc
)

func edgelq_monitoring_proto_v4_bucket_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v4_bucket_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v4_bucket_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v4_bucket_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v4_bucket_proto_rawDescData
}

var edgelq_monitoring_proto_v4_bucket_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var edgelq_monitoring_proto_v4_bucket_proto_goTypes = []interface{}{
	(*Bucket)(nil),                             // 0: ntt.monitoring.v4.Bucket
	(*Bucket_ResolvedValues)(nil),              // 1: ntt.monitoring.v4.Bucket.ResolvedValues
	(*Bucket_ResolvedKeysWithValues)(nil),      // 2: ntt.monitoring.v4.Bucket.ResolvedKeysWithValues
	(*Bucket_RequiredTypedLabels)(nil),         // 3: ntt.monitoring.v4.Bucket.RequiredTypedLabels
	(*Bucket_RequiredTypedLabels_Strings)(nil), // 4: ntt.monitoring.v4.Bucket.RequiredTypedLabels.Strings
	nil,               // 5: ntt.monitoring.v4.Bucket.RequiredTypedLabels.LabelsEntry
	(*meta.Meta)(nil), // 6: goten.types.Meta
}
var edgelq_monitoring_proto_v4_bucket_proto_depIdxs = []int32{
	6, // 0: ntt.monitoring.v4.Bucket.metadata:type_name -> goten.types.Meta
	3, // 1: ntt.monitoring.v4.Bucket.metrics:type_name -> ntt.monitoring.v4.Bucket.RequiredTypedLabels
	3, // 2: ntt.monitoring.v4.Bucket.resources:type_name -> ntt.monitoring.v4.Bucket.RequiredTypedLabels
	2, // 3: ntt.monitoring.v4.Bucket.required_alt_kvs:type_name -> ntt.monitoring.v4.Bucket.ResolvedKeysWithValues
	1, // 4: ntt.monitoring.v4.Bucket.ResolvedKeysWithValues.resolved_kvs:type_name -> ntt.monitoring.v4.Bucket.ResolvedValues
	5, // 5: ntt.monitoring.v4.Bucket.RequiredTypedLabels.labels:type_name -> ntt.monitoring.v4.Bucket.RequiredTypedLabels.LabelsEntry
	4, // 6: ntt.monitoring.v4.Bucket.RequiredTypedLabels.LabelsEntry.value:type_name -> ntt.monitoring.v4.Bucket.RequiredTypedLabels.Strings
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v4_bucket_proto_init() }
func edgelq_monitoring_proto_v4_bucket_proto_init() {
	if edgelq_monitoring_proto_v4_bucket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v4_bucket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_bucket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket_ResolvedValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_bucket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket_ResolvedKeysWithValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_bucket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket_RequiredTypedLabels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_bucket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket_RequiredTypedLabels_Strings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v4_bucket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_monitoring_proto_v4_bucket_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v4_bucket_proto_depIdxs,
		MessageInfos:      edgelq_monitoring_proto_v4_bucket_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v4_bucket_proto = out.File
	edgelq_monitoring_proto_v4_bucket_proto_rawDesc = nil
	edgelq_monitoring_proto_v4_bucket_proto_goTypes = nil
	edgelq_monitoring_proto_v4_bucket_proto_depIdxs = nil
}
