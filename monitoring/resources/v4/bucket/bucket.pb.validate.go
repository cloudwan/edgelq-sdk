// Code generated by protoc-gen-goten-validate
// File: edgelq/monitoring/proto/v4/bucket.proto
// DO NOT EDIT!!!

package bucket

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &meta.Meta{}
)

func (obj *Bucket) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Metadata).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Bucket", "metadata", obj.Metadata, "nested object validation failed", err)
		}
	}
	for idx, elem := range obj.Metrics {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Bucket", "metrics", obj.Metrics[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.Resources {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Bucket", "resources", obj.Resources[idx], "nested object validation failed", err)
			}
		}
	}
	for idx, elem := range obj.RequiredAltKvs {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Bucket", "requiredAltKvs", obj.RequiredAltKvs[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Bucket_ResolvedValues) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Bucket_ResolvedKeysWithValues) GotenValidate() error {
	if obj == nil {
		return nil
	}
	for idx, elem := range obj.ResolvedKvs {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ResolvedKeysWithValues", "resolvedKvs", obj.ResolvedKvs[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Bucket_RequiredTypedLabels) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.Types) < 1 {
		return gotenvalidate.NewValidationError("RequiredTypedLabels", "types", obj.Types, "field must have at least 1 items", nil)
	}
	if len(obj.Types) > 1 {
		values := make(map[string]struct{})
		for _, v := range obj.Types {
			if _, ok := values[v]; ok {
				return gotenvalidate.NewValidationError("RequiredTypedLabels", "types", obj.Types, "field must contain unique items", nil)
			}
			values[v] = struct{}{}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Bucket_RequiredTypedLabels_Strings) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.Strings) < 1 {
		return gotenvalidate.NewValidationError("Strings", "strings", obj.Strings, "field must have at least 1 items", nil)
	}
	if len(obj.Strings) > 1 {
		values := make(map[string]struct{})
		for _, v := range obj.Strings {
			if _, ok := values[v]; ok {
				return gotenvalidate.NewValidationError("Strings", "strings", obj.Strings, "field must contain unique items", nil)
			}
			values[v] = struct{}{}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
