// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v4/time_series_collection_rule.proto
// DO NOT EDIT!!!

package time_series_collection_rule

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	time_series_forwarder_sink "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_series_forwarder_sink"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &common.LabelDescriptor{}
	_ = &project.Project{}
	_ = &time_serie.Point{}
	_ = &time_series_forwarder_sink.TimeSeriesForwarderSink{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TimeSeriesCollectionRule_FieldPath interface {
	gotenobject.FieldPath
	Selector() TimeSeriesCollectionRule_FieldPathSelector
	Get(source *TimeSeriesCollectionRule) []interface{}
	GetSingle(source *TimeSeriesCollectionRule) (interface{}, bool)
	ClearValue(item *TimeSeriesCollectionRule)

	// Those methods build corresponding TimeSeriesCollectionRule_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TimeSeriesCollectionRule_FieldPathValue
	WithIArrayOfValues(values interface{}) TimeSeriesCollectionRule_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TimeSeriesCollectionRule_FieldPathArrayItemValue
}

type TimeSeriesCollectionRule_FieldPathSelector int32

const (
	TimeSeriesCollectionRule_FieldPathSelectorName        TimeSeriesCollectionRule_FieldPathSelector = 0
	TimeSeriesCollectionRule_FieldPathSelectorMetadata    TimeSeriesCollectionRule_FieldPathSelector = 1
	TimeSeriesCollectionRule_FieldPathSelectorDisplayName TimeSeriesCollectionRule_FieldPathSelector = 2
	TimeSeriesCollectionRule_FieldPathSelectorFilter      TimeSeriesCollectionRule_FieldPathSelector = 3
	TimeSeriesCollectionRule_FieldPathSelectorAggregation TimeSeriesCollectionRule_FieldPathSelector = 4
	TimeSeriesCollectionRule_FieldPathSelectorRuleIds     TimeSeriesCollectionRule_FieldPathSelector = 5
	TimeSeriesCollectionRule_FieldPathSelectorSink        TimeSeriesCollectionRule_FieldPathSelector = 6
)

func (s TimeSeriesCollectionRule_FieldPathSelector) String() string {
	switch s {
	case TimeSeriesCollectionRule_FieldPathSelectorName:
		return "name"
	case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
		return "metadata"
	case TimeSeriesCollectionRule_FieldPathSelectorDisplayName:
		return "display_name"
	case TimeSeriesCollectionRule_FieldPathSelectorFilter:
		return "filter"
	case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
		return "aggregation"
	case TimeSeriesCollectionRule_FieldPathSelectorRuleIds:
		return "rule_ids"
	case TimeSeriesCollectionRule_FieldPathSelectorSink:
		return "sink"
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", s))
	}
}

func BuildTimeSeriesCollectionRule_FieldPath(fp gotenobject.RawFieldPath) (TimeSeriesCollectionRule_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TimeSeriesCollectionRule")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &TimeSeriesCollectionRule_FieldTerminalPath{selector: TimeSeriesCollectionRule_FieldPathSelectorName}, nil
		case "metadata":
			return &TimeSeriesCollectionRule_FieldTerminalPath{selector: TimeSeriesCollectionRule_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &TimeSeriesCollectionRule_FieldTerminalPath{selector: TimeSeriesCollectionRule_FieldPathSelectorDisplayName}, nil
		case "filter":
			return &TimeSeriesCollectionRule_FieldTerminalPath{selector: TimeSeriesCollectionRule_FieldPathSelectorFilter}, nil
		case "aggregation":
			return &TimeSeriesCollectionRule_FieldTerminalPath{selector: TimeSeriesCollectionRule_FieldPathSelectorAggregation}, nil
		case "rule_ids", "ruleIds", "rule-ids":
			return &TimeSeriesCollectionRule_FieldTerminalPath{selector: TimeSeriesCollectionRule_FieldPathSelectorRuleIds}, nil
		case "sink":
			return &TimeSeriesCollectionRule_FieldTerminalPath{selector: TimeSeriesCollectionRule_FieldPathSelectorSink}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TimeSeriesCollectionRule_FieldSubPath{selector: TimeSeriesCollectionRule_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "aggregation":
			if subpath, err := common.BuildAggregation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TimeSeriesCollectionRule_FieldSubPath{selector: TimeSeriesCollectionRule_FieldPathSelectorAggregation, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TimeSeriesCollectionRule", fp)
}

func ParseTimeSeriesCollectionRule_FieldPath(rawField string) (TimeSeriesCollectionRule_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTimeSeriesCollectionRule_FieldPath(fp)
}

func MustParseTimeSeriesCollectionRule_FieldPath(rawField string) TimeSeriesCollectionRule_FieldPath {
	fp, err := ParseTimeSeriesCollectionRule_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TimeSeriesCollectionRule_FieldTerminalPath struct {
	selector TimeSeriesCollectionRule_FieldPathSelector
}

var _ TimeSeriesCollectionRule_FieldPath = (*TimeSeriesCollectionRule_FieldTerminalPath)(nil)

func (fp *TimeSeriesCollectionRule_FieldTerminalPath) Selector() TimeSeriesCollectionRule_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TimeSeriesCollectionRule_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TimeSeriesCollectionRule_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TimeSeriesCollectionRule
func (fp *TimeSeriesCollectionRule_FieldTerminalPath) Get(source *TimeSeriesCollectionRule) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TimeSeriesCollectionRule_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case TimeSeriesCollectionRule_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case TimeSeriesCollectionRule_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
			if source.Aggregation != nil {
				values = append(values, source.Aggregation)
			}
		case TimeSeriesCollectionRule_FieldPathSelectorRuleIds:
			for _, value := range source.GetRuleIds() {
				values = append(values, value)
			}
		case TimeSeriesCollectionRule_FieldPathSelectorSink:
			if source.Sink != nil {
				values = append(values, source.Sink)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fp.selector))
		}
	}
	return
}

func (fp *TimeSeriesCollectionRule_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TimeSeriesCollectionRule))
}

// GetSingle returns value pointed by specific field of from source TimeSeriesCollectionRule
func (fp *TimeSeriesCollectionRule_FieldTerminalPath) GetSingle(source *TimeSeriesCollectionRule) (interface{}, bool) {
	switch fp.selector {
	case TimeSeriesCollectionRule_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case TimeSeriesCollectionRule_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case TimeSeriesCollectionRule_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
		res := source.GetAggregation()
		return res, res != nil
	case TimeSeriesCollectionRule_FieldPathSelectorRuleIds:
		res := source.GetRuleIds()
		return res, res != nil
	case TimeSeriesCollectionRule_FieldPathSelectorSink:
		res := source.GetSink()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fp.selector))
	}
}

func (fp *TimeSeriesCollectionRule_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TimeSeriesCollectionRule))
}

// GetDefault returns a default value of the field type
func (fp *TimeSeriesCollectionRule_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TimeSeriesCollectionRule_FieldPathSelectorName:
		return (*Name)(nil)
	case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case TimeSeriesCollectionRule_FieldPathSelectorDisplayName:
		return ""
	case TimeSeriesCollectionRule_FieldPathSelectorFilter:
		return (*time_serie.Filter)(nil)
	case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
		return (*common.Aggregation)(nil)
	case TimeSeriesCollectionRule_FieldPathSelectorRuleIds:
		return ([]string)(nil)
	case TimeSeriesCollectionRule_FieldPathSelectorSink:
		return (*time_series_forwarder_sink.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fp.selector))
	}
}

func (fp *TimeSeriesCollectionRule_FieldTerminalPath) ClearValue(item *TimeSeriesCollectionRule) {
	if item != nil {
		switch fp.selector {
		case TimeSeriesCollectionRule_FieldPathSelectorName:
			item.Name = nil
		case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
			item.Metadata = nil
		case TimeSeriesCollectionRule_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case TimeSeriesCollectionRule_FieldPathSelectorFilter:
			item.Filter = nil
		case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
			item.Aggregation = nil
		case TimeSeriesCollectionRule_FieldPathSelectorRuleIds:
			item.RuleIds = nil
		case TimeSeriesCollectionRule_FieldPathSelectorSink:
			item.Sink = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fp.selector))
		}
	}
}

func (fp *TimeSeriesCollectionRule_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TimeSeriesCollectionRule))
}

// IsLeaf - whether field path is holds simple value
func (fp *TimeSeriesCollectionRule_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TimeSeriesCollectionRule_FieldPathSelectorName ||
		fp.selector == TimeSeriesCollectionRule_FieldPathSelectorDisplayName ||
		fp.selector == TimeSeriesCollectionRule_FieldPathSelectorFilter ||
		fp.selector == TimeSeriesCollectionRule_FieldPathSelectorRuleIds ||
		fp.selector == TimeSeriesCollectionRule_FieldPathSelectorSink
}

func (fp *TimeSeriesCollectionRule_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TimeSeriesCollectionRule_FieldTerminalPath) WithIValue(value interface{}) TimeSeriesCollectionRule_FieldPathValue {
	switch fp.selector {
	case TimeSeriesCollectionRule_FieldPathSelectorName:
		return &TimeSeriesCollectionRule_FieldTerminalPathValue{TimeSeriesCollectionRule_FieldTerminalPath: *fp, value: value.(*Name)}
	case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
		return &TimeSeriesCollectionRule_FieldTerminalPathValue{TimeSeriesCollectionRule_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case TimeSeriesCollectionRule_FieldPathSelectorDisplayName:
		return &TimeSeriesCollectionRule_FieldTerminalPathValue{TimeSeriesCollectionRule_FieldTerminalPath: *fp, value: value.(string)}
	case TimeSeriesCollectionRule_FieldPathSelectorFilter:
		return &TimeSeriesCollectionRule_FieldTerminalPathValue{TimeSeriesCollectionRule_FieldTerminalPath: *fp, value: value.(*time_serie.Filter)}
	case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
		return &TimeSeriesCollectionRule_FieldTerminalPathValue{TimeSeriesCollectionRule_FieldTerminalPath: *fp, value: value.(*common.Aggregation)}
	case TimeSeriesCollectionRule_FieldPathSelectorRuleIds:
		return &TimeSeriesCollectionRule_FieldTerminalPathValue{TimeSeriesCollectionRule_FieldTerminalPath: *fp, value: value.([]string)}
	case TimeSeriesCollectionRule_FieldPathSelectorSink:
		return &TimeSeriesCollectionRule_FieldTerminalPathValue{TimeSeriesCollectionRule_FieldTerminalPath: *fp, value: value.(*time_series_forwarder_sink.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fp.selector))
	}
}

func (fp *TimeSeriesCollectionRule_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TimeSeriesCollectionRule_FieldTerminalPath) WithIArrayOfValues(values interface{}) TimeSeriesCollectionRule_FieldPathArrayOfValues {
	fpaov := &TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues{TimeSeriesCollectionRule_FieldTerminalPath: *fp}
	switch fp.selector {
	case TimeSeriesCollectionRule_FieldPathSelectorName:
		return &TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues{TimeSeriesCollectionRule_FieldTerminalPath: *fp, values: values.([]*Name)}
	case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
		return &TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues{TimeSeriesCollectionRule_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case TimeSeriesCollectionRule_FieldPathSelectorDisplayName:
		return &TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues{TimeSeriesCollectionRule_FieldTerminalPath: *fp, values: values.([]string)}
	case TimeSeriesCollectionRule_FieldPathSelectorFilter:
		return &TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues{TimeSeriesCollectionRule_FieldTerminalPath: *fp, values: values.([]*time_serie.Filter)}
	case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
		return &TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues{TimeSeriesCollectionRule_FieldTerminalPath: *fp, values: values.([]*common.Aggregation)}
	case TimeSeriesCollectionRule_FieldPathSelectorRuleIds:
		return &TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues{TimeSeriesCollectionRule_FieldTerminalPath: *fp, values: values.([][]string)}
	case TimeSeriesCollectionRule_FieldPathSelectorSink:
		return &TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues{TimeSeriesCollectionRule_FieldTerminalPath: *fp, values: values.([]*time_series_forwarder_sink.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fp.selector))
	}
	return fpaov
}

func (fp *TimeSeriesCollectionRule_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TimeSeriesCollectionRule_FieldTerminalPath) WithIArrayItemValue(value interface{}) TimeSeriesCollectionRule_FieldPathArrayItemValue {
	switch fp.selector {
	case TimeSeriesCollectionRule_FieldPathSelectorRuleIds:
		return &TimeSeriesCollectionRule_FieldTerminalPathArrayItemValue{TimeSeriesCollectionRule_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fp.selector))
	}
}

func (fp *TimeSeriesCollectionRule_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type TimeSeriesCollectionRule_FieldSubPath struct {
	selector TimeSeriesCollectionRule_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ TimeSeriesCollectionRule_FieldPath = (*TimeSeriesCollectionRule_FieldSubPath)(nil)

func (fps *TimeSeriesCollectionRule_FieldSubPath) Selector() TimeSeriesCollectionRule_FieldPathSelector {
	return fps.selector
}
func (fps *TimeSeriesCollectionRule_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *TimeSeriesCollectionRule_FieldSubPath) AsAggregationSubPath() (common.Aggregation_FieldPath, bool) {
	res, ok := fps.subPath.(common.Aggregation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *TimeSeriesCollectionRule_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *TimeSeriesCollectionRule_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source TimeSeriesCollectionRule
func (fps *TimeSeriesCollectionRule_FieldSubPath) Get(source *TimeSeriesCollectionRule) (values []interface{}) {
	switch fps.selector {
	case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
		values = append(values, fps.subPath.GetRaw(source.GetAggregation())...)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fps.selector))
	}
	return
}

func (fps *TimeSeriesCollectionRule_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*TimeSeriesCollectionRule))
}

// GetSingle returns value of selected field from source TimeSeriesCollectionRule
func (fps *TimeSeriesCollectionRule_FieldSubPath) GetSingle(source *TimeSeriesCollectionRule) (interface{}, bool) {
	switch fps.selector {
	case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
		if source.GetAggregation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAggregation())
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fps.selector))
	}
}

func (fps *TimeSeriesCollectionRule_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*TimeSeriesCollectionRule))
}

// GetDefault returns a default value of the field type
func (fps *TimeSeriesCollectionRule_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *TimeSeriesCollectionRule_FieldSubPath) ClearValue(item *TimeSeriesCollectionRule) {
	if item != nil {
		switch fps.selector {
		case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
			fps.subPath.ClearValueRaw(item.Aggregation)
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fps.selector))
		}
	}
}

func (fps *TimeSeriesCollectionRule_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*TimeSeriesCollectionRule))
}

// IsLeaf - whether field path is holds simple value
func (fps *TimeSeriesCollectionRule_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *TimeSeriesCollectionRule_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&TimeSeriesCollectionRule_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *TimeSeriesCollectionRule_FieldSubPath) WithIValue(value interface{}) TimeSeriesCollectionRule_FieldPathValue {
	return &TimeSeriesCollectionRule_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *TimeSeriesCollectionRule_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *TimeSeriesCollectionRule_FieldSubPath) WithIArrayOfValues(values interface{}) TimeSeriesCollectionRule_FieldPathArrayOfValues {
	return &TimeSeriesCollectionRule_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *TimeSeriesCollectionRule_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *TimeSeriesCollectionRule_FieldSubPath) WithIArrayItemValue(value interface{}) TimeSeriesCollectionRule_FieldPathArrayItemValue {
	return &TimeSeriesCollectionRule_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *TimeSeriesCollectionRule_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// TimeSeriesCollectionRule_FieldPathValue allows storing values for TimeSeriesCollectionRule fields according to their type
type TimeSeriesCollectionRule_FieldPathValue interface {
	TimeSeriesCollectionRule_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TimeSeriesCollectionRule)
	CompareWith(*TimeSeriesCollectionRule) (cmp int, comparable bool)
}

func ParseTimeSeriesCollectionRule_FieldPathValue(pathStr, valueStr string) (TimeSeriesCollectionRule_FieldPathValue, error) {
	fp, err := ParseTimeSeriesCollectionRule_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TimeSeriesCollectionRule field path value from %s: %v", valueStr, err)
	}
	return fpv.(TimeSeriesCollectionRule_FieldPathValue), nil
}

func MustParseTimeSeriesCollectionRule_FieldPathValue(pathStr, valueStr string) TimeSeriesCollectionRule_FieldPathValue {
	fpv, err := ParseTimeSeriesCollectionRule_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TimeSeriesCollectionRule_FieldTerminalPathValue struct {
	TimeSeriesCollectionRule_FieldTerminalPath
	value interface{}
}

var _ TimeSeriesCollectionRule_FieldPathValue = (*TimeSeriesCollectionRule_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'TimeSeriesCollectionRule' as interface{}
func (fpv *TimeSeriesCollectionRule_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TimeSeriesCollectionRule_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *TimeSeriesCollectionRule_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *TimeSeriesCollectionRule_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *TimeSeriesCollectionRule_FieldTerminalPathValue) AsFilterValue() (*time_serie.Filter, bool) {
	res, ok := fpv.value.(*time_serie.Filter)
	return res, ok
}
func (fpv *TimeSeriesCollectionRule_FieldTerminalPathValue) AsAggregationValue() (*common.Aggregation, bool) {
	res, ok := fpv.value.(*common.Aggregation)
	return res, ok
}
func (fpv *TimeSeriesCollectionRule_FieldTerminalPathValue) AsRuleIdsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *TimeSeriesCollectionRule_FieldTerminalPathValue) AsSinkValue() (*time_series_forwarder_sink.Reference, bool) {
	res, ok := fpv.value.(*time_series_forwarder_sink.Reference)
	return res, ok
}

// SetTo stores value for selected field for object TimeSeriesCollectionRule
func (fpv *TimeSeriesCollectionRule_FieldTerminalPathValue) SetTo(target **TimeSeriesCollectionRule) {
	if *target == nil {
		*target = new(TimeSeriesCollectionRule)
	}
	switch fpv.selector {
	case TimeSeriesCollectionRule_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case TimeSeriesCollectionRule_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case TimeSeriesCollectionRule_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*time_serie.Filter)
	case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
		(*target).Aggregation = fpv.value.(*common.Aggregation)
	case TimeSeriesCollectionRule_FieldPathSelectorRuleIds:
		(*target).RuleIds = fpv.value.([]string)
	case TimeSeriesCollectionRule_FieldPathSelectorSink:
		(*target).Sink = fpv.value.(*time_series_forwarder_sink.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fpv.selector))
	}
}

func (fpv *TimeSeriesCollectionRule_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TimeSeriesCollectionRule)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TimeSeriesCollectionRule_FieldTerminalPathValue' with the value under path in 'TimeSeriesCollectionRule'.
func (fpv *TimeSeriesCollectionRule_FieldTerminalPathValue) CompareWith(source *TimeSeriesCollectionRule) (int, bool) {
	switch fpv.selector {
	case TimeSeriesCollectionRule_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
		return 0, false
	case TimeSeriesCollectionRule_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TimeSeriesCollectionRule_FieldPathSelectorFilter:
		return 0, false
	case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
		return 0, false
	case TimeSeriesCollectionRule_FieldPathSelectorRuleIds:
		return 0, false
	case TimeSeriesCollectionRule_FieldPathSelectorSink:
		leftValue := fpv.value.(*time_series_forwarder_sink.Reference)
		rightValue := source.GetSink()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fpv.selector))
	}
}

func (fpv *TimeSeriesCollectionRule_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TimeSeriesCollectionRule))
}

type TimeSeriesCollectionRule_FieldSubPathValue struct {
	TimeSeriesCollectionRule_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ TimeSeriesCollectionRule_FieldPathValue = (*TimeSeriesCollectionRule_FieldSubPathValue)(nil)

func (fpvs *TimeSeriesCollectionRule_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *TimeSeriesCollectionRule_FieldSubPathValue) AsAggregationPathValue() (common.Aggregation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Aggregation_FieldPathValue)
	return res, ok
}

func (fpvs *TimeSeriesCollectionRule_FieldSubPathValue) SetTo(target **TimeSeriesCollectionRule) {
	if *target == nil {
		*target = new(TimeSeriesCollectionRule)
	}
	switch fpvs.Selector() {
	case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
		fpvs.subPathValue.(common.Aggregation_FieldPathValue).SetTo(&(*target).Aggregation)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fpvs.Selector()))
	}
}

func (fpvs *TimeSeriesCollectionRule_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TimeSeriesCollectionRule)
	fpvs.SetTo(&typedObject)
}

func (fpvs *TimeSeriesCollectionRule_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *TimeSeriesCollectionRule_FieldSubPathValue) CompareWith(source *TimeSeriesCollectionRule) (int, bool) {
	switch fpvs.Selector() {
	case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
		return fpvs.subPathValue.(common.Aggregation_FieldPathValue).CompareWith(source.GetAggregation())
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fpvs.Selector()))
	}
}

func (fpvs *TimeSeriesCollectionRule_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*TimeSeriesCollectionRule))
}

// TimeSeriesCollectionRule_FieldPathArrayItemValue allows storing single item in Path-specific values for TimeSeriesCollectionRule according to their type
// Present only for array (repeated) types.
type TimeSeriesCollectionRule_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TimeSeriesCollectionRule_FieldPath
	ContainsValue(*TimeSeriesCollectionRule) bool
}

// ParseTimeSeriesCollectionRule_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTimeSeriesCollectionRule_FieldPathArrayItemValue(pathStr, valueStr string) (TimeSeriesCollectionRule_FieldPathArrayItemValue, error) {
	fp, err := ParseTimeSeriesCollectionRule_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TimeSeriesCollectionRule field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TimeSeriesCollectionRule_FieldPathArrayItemValue), nil
}

func MustParseTimeSeriesCollectionRule_FieldPathArrayItemValue(pathStr, valueStr string) TimeSeriesCollectionRule_FieldPathArrayItemValue {
	fpaiv, err := ParseTimeSeriesCollectionRule_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TimeSeriesCollectionRule_FieldTerminalPathArrayItemValue struct {
	TimeSeriesCollectionRule_FieldTerminalPath
	value interface{}
}

var _ TimeSeriesCollectionRule_FieldPathArrayItemValue = (*TimeSeriesCollectionRule_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TimeSeriesCollectionRule as interface{}
func (fpaiv *TimeSeriesCollectionRule_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *TimeSeriesCollectionRule_FieldTerminalPathArrayItemValue) AsRuleIdsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *TimeSeriesCollectionRule_FieldTerminalPathArrayItemValue) GetSingle(source *TimeSeriesCollectionRule) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TimeSeriesCollectionRule_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TimeSeriesCollectionRule))
}

// Contains returns a boolean indicating if value that is being held is present in given 'TimeSeriesCollectionRule'
func (fpaiv *TimeSeriesCollectionRule_FieldTerminalPathArrayItemValue) ContainsValue(source *TimeSeriesCollectionRule) bool {
	slice := fpaiv.TimeSeriesCollectionRule_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type TimeSeriesCollectionRule_FieldSubPathArrayItemValue struct {
	TimeSeriesCollectionRule_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *TimeSeriesCollectionRule_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *TimeSeriesCollectionRule_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TimeSeriesCollectionRule_FieldSubPathArrayItemValue) AsAggregationPathItemValue() (common.Aggregation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Aggregation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'TimeSeriesCollectionRule'
func (fpaivs *TimeSeriesCollectionRule_FieldSubPathArrayItemValue) ContainsValue(source *TimeSeriesCollectionRule) bool {
	switch fpaivs.Selector() {
	case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
		return fpaivs.subPathItemValue.(common.Aggregation_FieldPathArrayItemValue).ContainsValue(source.GetAggregation())
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSeriesCollectionRule: %d", fpaivs.Selector()))
	}
}

// TimeSeriesCollectionRule_FieldPathArrayOfValues allows storing slice of values for TimeSeriesCollectionRule fields according to their type
type TimeSeriesCollectionRule_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TimeSeriesCollectionRule_FieldPath
}

func ParseTimeSeriesCollectionRule_FieldPathArrayOfValues(pathStr, valuesStr string) (TimeSeriesCollectionRule_FieldPathArrayOfValues, error) {
	fp, err := ParseTimeSeriesCollectionRule_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TimeSeriesCollectionRule field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TimeSeriesCollectionRule_FieldPathArrayOfValues), nil
}

func MustParseTimeSeriesCollectionRule_FieldPathArrayOfValues(pathStr, valuesStr string) TimeSeriesCollectionRule_FieldPathArrayOfValues {
	fpaov, err := ParseTimeSeriesCollectionRule_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues struct {
	TimeSeriesCollectionRule_FieldTerminalPath
	values interface{}
}

var _ TimeSeriesCollectionRule_FieldPathArrayOfValues = (*TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TimeSeriesCollectionRule_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case TimeSeriesCollectionRule_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case TimeSeriesCollectionRule_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case TimeSeriesCollectionRule_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*time_serie.Filter) {
			values = append(values, v)
		}
	case TimeSeriesCollectionRule_FieldPathSelectorAggregation:
		for _, v := range fpaov.values.([]*common.Aggregation) {
			values = append(values, v)
		}
	case TimeSeriesCollectionRule_FieldPathSelectorRuleIds:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case TimeSeriesCollectionRule_FieldPathSelectorSink:
		for _, v := range fpaov.values.([]*time_series_forwarder_sink.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*time_serie.Filter, bool) {
	res, ok := fpaov.values.([]*time_serie.Filter)
	return res, ok
}
func (fpaov *TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues) AsAggregationArrayOfValues() ([]*common.Aggregation, bool) {
	res, ok := fpaov.values.([]*common.Aggregation)
	return res, ok
}
func (fpaov *TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues) AsRuleIdsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *TimeSeriesCollectionRule_FieldTerminalPathArrayOfValues) AsSinkArrayOfValues() ([]*time_series_forwarder_sink.Reference, bool) {
	res, ok := fpaov.values.([]*time_series_forwarder_sink.Reference)
	return res, ok
}

type TimeSeriesCollectionRule_FieldSubPathArrayOfValues struct {
	TimeSeriesCollectionRule_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ TimeSeriesCollectionRule_FieldPathArrayOfValues = (*TimeSeriesCollectionRule_FieldSubPathArrayOfValues)(nil)

func (fpsaov *TimeSeriesCollectionRule_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *TimeSeriesCollectionRule_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TimeSeriesCollectionRule_FieldSubPathArrayOfValues) AsAggregationPathArrayOfValues() (common.Aggregation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Aggregation_FieldPathArrayOfValues)
	return res, ok
}
