// Code generated by protoc-gen-goten-resource
// Resource: TimeSeriesCollectionRule
// DO NOT EDIT!!!

package time_series_collection_rule

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	time_series_forwarder_sink "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_series_forwarder_sink"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &common.LabelDescriptor{}
	_ = &project.Project{}
	_ = &time_serie.Point{}
	_ = &time_series_forwarder_sink.TimeSeriesForwarderSink{}
	_ = &meta.Meta{}
)

type TimeSeriesCollectionRuleList []*TimeSeriesCollectionRule

func (l TimeSeriesCollectionRuleList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*TimeSeriesCollectionRule))
}

func (l TimeSeriesCollectionRuleList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(TimeSeriesCollectionRuleList)...)
}

func (l TimeSeriesCollectionRuleList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TimeSeriesCollectionRuleList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l TimeSeriesCollectionRuleList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*TimeSeriesCollectionRule)
}

func (l TimeSeriesCollectionRuleList) Length() int {
	return len(l)
}

type TimeSeriesCollectionRuleChangeList []*TimeSeriesCollectionRuleChange

func (l TimeSeriesCollectionRuleChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*TimeSeriesCollectionRuleChange))
}

func (l TimeSeriesCollectionRuleChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(TimeSeriesCollectionRuleChangeList)...)
}

func (l TimeSeriesCollectionRuleChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TimeSeriesCollectionRuleChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l TimeSeriesCollectionRuleChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*TimeSeriesCollectionRuleChange)
}

func (l TimeSeriesCollectionRuleChangeList) Length() int {
	return len(l)
}

type TimeSeriesCollectionRuleNameList []*Name

func (l TimeSeriesCollectionRuleNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l TimeSeriesCollectionRuleNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(TimeSeriesCollectionRuleNameList)...)
}

func (l TimeSeriesCollectionRuleNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TimeSeriesCollectionRuleNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l TimeSeriesCollectionRuleNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l TimeSeriesCollectionRuleNameList) Length() int {
	return len(l)
}

type TimeSeriesCollectionRuleReferenceList []*Reference

func (l TimeSeriesCollectionRuleReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l TimeSeriesCollectionRuleReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(TimeSeriesCollectionRuleReferenceList)...)
}

func (l TimeSeriesCollectionRuleReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TimeSeriesCollectionRuleReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l TimeSeriesCollectionRuleReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l TimeSeriesCollectionRuleReferenceList) Length() int {
	return len(l)
}

type TimeSeriesCollectionRuleParentNameList []*ParentName

func (l TimeSeriesCollectionRuleParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l TimeSeriesCollectionRuleParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(TimeSeriesCollectionRuleParentNameList)...)
}

func (l TimeSeriesCollectionRuleParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TimeSeriesCollectionRuleParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l TimeSeriesCollectionRuleParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l TimeSeriesCollectionRuleParentNameList) Length() int {
	return len(l)
}

type TimeSeriesCollectionRuleParentReferenceList []*ParentReference

func (l TimeSeriesCollectionRuleParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l TimeSeriesCollectionRuleParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(TimeSeriesCollectionRuleParentReferenceList)...)
}

func (l TimeSeriesCollectionRuleParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TimeSeriesCollectionRuleParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l TimeSeriesCollectionRuleParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l TimeSeriesCollectionRuleParentReferenceList) Length() int {
	return len(l)
}

type TimeSeriesCollectionRuleMap map[Name]*TimeSeriesCollectionRule

func (m TimeSeriesCollectionRuleMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m TimeSeriesCollectionRuleMap) Set(res gotenresource.Resource) {
	tRes := res.(*TimeSeriesCollectionRule)
	m[*tRes.Name] = tRes
}

func (m TimeSeriesCollectionRuleMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m TimeSeriesCollectionRuleMap) Length() int {
	return len(m)
}

func (m TimeSeriesCollectionRuleMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type TimeSeriesCollectionRuleChangeMap map[Name]*TimeSeriesCollectionRuleChange

func (m TimeSeriesCollectionRuleChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m TimeSeriesCollectionRuleChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*TimeSeriesCollectionRuleChange)
	m[*tChange.GetTimeSeriesCollectionRuleName()] = tChange
}

func (m TimeSeriesCollectionRuleChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m TimeSeriesCollectionRuleChangeMap) Length() int {
	return len(m)
}

func (m TimeSeriesCollectionRuleChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
