// Code generated by protoc-gen-goten-resource
// Resource: Notification
// DO NOT EDIT!!!

package notification

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	alert "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alert"
	alerting_condition "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alerting_condition"
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alerting_policy"
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/metric_descriptor"
	monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/monitored_resource_descriptor"
	notification_channel "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/notification_channel"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta_common "github.com/cloudwan/goten-sdk/meta-service/resources/v1/common"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = api.LaunchStage(0)
	_ = &alert.Alert{}
	_ = &alerting_condition.AlertingCondition{}
	_ = &alerting_policy.AlertingPolicy{}
	_ = &common.LabelDescriptor{}
	_ = &metric_descriptor.MetricDescriptor{}
	_ = &monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &notification_channel.NotificationChannel{}
	_ = &project.Project{}
	_ = &time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = &meta_common.LabelledDomain{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

type FilterBuilderOrCondition interface {
	_IsNotificationFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsNotificationFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp Notification_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      Notification_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) Contains(value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: b.fp,
		Value:     b.fp.WithIArrayItemValue(value),
	})
}

func (b *filterCndBuilderAnyPath) ContainsAnyOf(values []interface{}) *FilterBuilder {
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) ContainsAll(values []interface{}) *FilterBuilder {
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) Alerts() *filterCndBuilderAlerts {
	return &filterCndBuilderAlerts{builder: b.builder}
}

func (b *filterCndBuilder) AlertSets() *filterCndBuilderAlertSets {
	return &filterCndBuilderAlertSets{builder: b.builder}
}

func (b *filterCndBuilder) State() *filterCndBuilderState {
	return &filterCndBuilderState{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) DeleteTime() *filterCndBuilderMetadataDeleteTime {
	return &filterCndBuilderMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Lifecycle() *filterCndBuilderMetadataLifecycle {
	return &filterCndBuilderMetadataLifecycle{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Services() *filterCndBuilderMetadataServices {
	return &filterCndBuilderMetadataServices{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataDeleteTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewNotificationFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().Metadata().Tags()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().Metadata().Tags()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewNotificationFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Version() *filterCndBuilderMetadataOwnerReferencesVersion {
	return &filterCndBuilderMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Region() *filterCndBuilderMetadataOwnerReferencesRegion {
	return &filterCndBuilderMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) UnsetOnDelete() *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete {
	return &filterCndBuilderMetadataOwnerReferencesUnsetOnDelete{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUnsetOnDelete struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewNotificationFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycle) Eq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Neq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycle) In(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) NotIn(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLifecycle) State() *filterCndBuilderMetadataLifecycleState {
	return &filterCndBuilderMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderMetadataLifecycle) BlockDeletion() *filterCndBuilderMetadataLifecycleBlockDeletion {
	return &filterCndBuilderMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleState) Eq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Neq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) In(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) NotIn(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServices) Eq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServices) Neq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServices) Gt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServices) Gte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServices) Lt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServices) Lte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServices) In(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) NotIn(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) compare(op gotenfilter.CompareOperator, value *meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Services().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataServices) OwningService() *filterCndBuilderMetadataServicesOwningService {
	return &filterCndBuilderMetadataServicesOwningService{builder: b.builder}
}

func (b *filterCndBuilderMetadataServices) AllowedServices() *filterCndBuilderMetadataServicesAllowedServices {
	return &filterCndBuilderMetadataServicesAllowedServices{builder: b.builder}
}

type filterCndBuilderMetadataServicesOwningService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesOwningService) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Services().OwningService().WithValue(value),
	})
}

type filterCndBuilderMetadataServicesAllowedServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Value:     NewNotificationFieldPathBuilder().Metadata().Services().AllowedServices().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewNotificationFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Metadata().Services().AllowedServices().WithValue(value),
	})
}

type filterCndBuilderAlerts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderAlerts) Eq(value []*alert.Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAlerts) Neq(value []*alert.Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAlerts) Gt(value []*alert.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAlerts) Gte(value []*alert.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAlerts) Lt(value []*alert.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAlerts) Lte(value []*alert.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAlerts) In(values [][]*alert.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Alerts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAlerts) NotIn(values [][]*alert.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().Alerts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAlerts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().Alerts().FieldPath(),
	})
}

func (b *filterCndBuilderAlerts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().Alerts().FieldPath(),
	})
}

func (b *filterCndBuilderAlerts) Contains(value *alert.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewNotificationFieldPathBuilder().Alerts().FieldPath(),
		Value:     NewNotificationFieldPathBuilder().Alerts().WithItemValue(value),
	})
}

func (b *filterCndBuilderAlerts) ContainsAnyOf(values []*alert.Name) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().Alerts()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewNotificationFieldPathBuilder().Alerts().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAlerts) ContainsAll(values []*alert.Name) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().Alerts()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewNotificationFieldPathBuilder().Alerts().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAlerts) compare(op gotenfilter.CompareOperator, value []*alert.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().Alerts().WithValue(value),
	})
}

type filterCndBuilderAlertSets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderAlertSets) Eq(value []*Notification_AlertsSet) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAlertSets) Neq(value []*Notification_AlertsSet) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAlertSets) Gt(value []*Notification_AlertsSet) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAlertSets) Gte(value []*Notification_AlertsSet) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAlertSets) Lt(value []*Notification_AlertsSet) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAlertSets) Lte(value []*Notification_AlertsSet) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAlertSets) In(values [][]*Notification_AlertsSet) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().AlertSets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAlertSets) NotIn(values [][]*Notification_AlertsSet) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().AlertSets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAlertSets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().AlertSets().FieldPath(),
	})
}

func (b *filterCndBuilderAlertSets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().AlertSets().FieldPath(),
	})
}

func (b *filterCndBuilderAlertSets) Contains(value *Notification_AlertsSet) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewNotificationFieldPathBuilder().AlertSets().FieldPath(),
		Value:     NewNotificationFieldPathBuilder().AlertSets().WithItemValue(value),
	})
}

func (b *filterCndBuilderAlertSets) ContainsAnyOf(values []*Notification_AlertsSet) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().AlertSets()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewNotificationFieldPathBuilder().AlertSets().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAlertSets) ContainsAll(values []*Notification_AlertsSet) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().AlertSets()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewNotificationFieldPathBuilder().AlertSets().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAlertSets) compare(op gotenfilter.CompareOperator, value []*Notification_AlertsSet) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().AlertSets().WithValue(value),
	})
}

func (b *filterCndBuilderAlertSets) Condition() *filterCndBuilderAlertSetsCondition {
	return &filterCndBuilderAlertSetsCondition{builder: b.builder}
}

func (b *filterCndBuilderAlertSets) Ids() *filterCndBuilderAlertSetsIds {
	return &filterCndBuilderAlertSetsIds{builder: b.builder}
}

type filterCndBuilderAlertSetsCondition struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderAlertSetsCondition) Eq(value *alerting_condition.Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAlertSetsCondition) Neq(value *alerting_condition.Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAlertSetsCondition) Gt(value *alerting_condition.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAlertSetsCondition) Gte(value *alerting_condition.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAlertSetsCondition) Lt(value *alerting_condition.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAlertSetsCondition) Lte(value *alerting_condition.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAlertSetsCondition) In(values []*alerting_condition.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().AlertSets().Condition().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAlertSetsCondition) NotIn(values []*alerting_condition.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().AlertSets().Condition().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAlertSetsCondition) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().AlertSets().Condition().FieldPath(),
	})
}

func (b *filterCndBuilderAlertSetsCondition) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().AlertSets().Condition().FieldPath(),
	})
}

func (b *filterCndBuilderAlertSetsCondition) compare(op gotenfilter.CompareOperator, value *alerting_condition.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().AlertSets().Condition().WithValue(value),
	})
}

type filterCndBuilderAlertSetsIds struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderAlertSetsIds) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAlertSetsIds) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAlertSetsIds) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAlertSetsIds) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAlertSetsIds) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAlertSetsIds) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAlertSetsIds) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().AlertSets().Ids().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAlertSetsIds) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().AlertSets().Ids().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAlertSetsIds) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().AlertSets().Ids().FieldPath(),
	})
}

func (b *filterCndBuilderAlertSetsIds) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().AlertSets().Ids().FieldPath(),
	})
}

func (b *filterCndBuilderAlertSetsIds) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewNotificationFieldPathBuilder().AlertSets().Ids().FieldPath(),
		Value:     NewNotificationFieldPathBuilder().AlertSets().Ids().WithItemValue(value),
	})
}

func (b *filterCndBuilderAlertSetsIds) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().AlertSets().Ids()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewNotificationFieldPathBuilder().AlertSets().Ids().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAlertSetsIds) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().AlertSets().Ids()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewNotificationFieldPathBuilder().AlertSets().Ids().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAlertSetsIds) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().AlertSets().Ids().WithValue(value),
	})
}

type filterCndBuilderState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderState) Eq(value *Notification_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderState) Neq(value *Notification_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderState) Gt(value *Notification_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderState) Gte(value *Notification_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderState) Lt(value *Notification_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderState) Lte(value *Notification_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderState) In(values []*Notification_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderState) NotIn(values []*Notification_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().FieldPath(),
	})
}

func (b *filterCndBuilderState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().FieldPath(),
	})
}

func (b *filterCndBuilderState) compare(op gotenfilter.CompareOperator, value *Notification_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().WithValue(value),
	})
}

func (b *filterCndBuilderState) IsResolved() *filterCndBuilderStateIsResolved {
	return &filterCndBuilderStateIsResolved{builder: b.builder}
}

func (b *filterCndBuilderState) NotificationState() *filterCndBuilderStateNotificationState {
	return &filterCndBuilderStateNotificationState{builder: b.builder}
}

func (b *filterCndBuilderState) IncidentNotifyAttemptsDone() *filterCndBuilderStateIncidentNotifyAttemptsDone {
	return &filterCndBuilderStateIncidentNotifyAttemptsDone{builder: b.builder}
}

func (b *filterCndBuilderState) ResolutionNotifyAttemptsDone() *filterCndBuilderStateResolutionNotifyAttemptsDone {
	return &filterCndBuilderStateResolutionNotifyAttemptsDone{builder: b.builder}
}

func (b *filterCndBuilderState) AlertsLifetime() *filterCndBuilderStateAlertsLifetime {
	return &filterCndBuilderStateAlertsLifetime{builder: b.builder}
}

func (b *filterCndBuilderState) ResolutionNotificationState() *filterCndBuilderStateResolutionNotificationState {
	return &filterCndBuilderStateResolutionNotificationState{builder: b.builder}
}

func (b *filterCndBuilderState) LifecycleCompleted() *filterCndBuilderStateLifecycleCompleted {
	return &filterCndBuilderStateLifecycleCompleted{builder: b.builder}
}

type filterCndBuilderStateIsResolved struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateIsResolved) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateIsResolved) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateIsResolved) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateIsResolved) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateIsResolved) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateIsResolved) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateIsResolved) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().IsResolved().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateIsResolved) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().IsResolved().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateIsResolved) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().IsResolved().FieldPath(),
	})
}

func (b *filterCndBuilderStateIsResolved) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().IsResolved().FieldPath(),
	})
}

func (b *filterCndBuilderStateIsResolved) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().IsResolved().WithValue(value),
	})
}

type filterCndBuilderStateNotificationState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationState) Eq(value []*Notification_State_NotificationState) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationState) Neq(value []*Notification_State_NotificationState) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationState) Gt(value []*Notification_State_NotificationState) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationState) Gte(value []*Notification_State_NotificationState) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationState) Lt(value []*Notification_State_NotificationState) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationState) Lte(value []*Notification_State_NotificationState) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationState) In(values [][]*Notification_State_NotificationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationState) NotIn(values [][]*Notification_State_NotificationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationState) Contains(value *Notification_State_NotificationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().FieldPath(),
		Value:     NewNotificationFieldPathBuilder().State().NotificationState().WithItemValue(value),
	})
}

func (b *filterCndBuilderStateNotificationState) ContainsAnyOf(values []*Notification_State_NotificationState) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().State().NotificationState()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateNotificationState) ContainsAll(values []*Notification_State_NotificationState) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().State().NotificationState()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateNotificationState) compare(op gotenfilter.CompareOperator, value []*Notification_State_NotificationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().WithValue(value),
	})
}

func (b *filterCndBuilderStateNotificationState) NotificationChannel() *filterCndBuilderStateNotificationStateNotificationChannel {
	return &filterCndBuilderStateNotificationStateNotificationChannel{builder: b.builder}
}

func (b *filterCndBuilderStateNotificationState) Status() *filterCndBuilderStateNotificationStateStatus {
	return &filterCndBuilderStateNotificationStateStatus{builder: b.builder}
}

func (b *filterCndBuilderStateNotificationState) Error() *filterCndBuilderStateNotificationStateError {
	return &filterCndBuilderStateNotificationStateError{builder: b.builder}
}

func (b *filterCndBuilderStateNotificationState) ProviderData() *filterCndBuilderStateNotificationStateProviderData {
	return &filterCndBuilderStateNotificationStateProviderData{builder: b.builder}
}

func (b *filterCndBuilderStateNotificationState) NotifyAttempts() *filterCndBuilderStateNotificationStateNotifyAttempts {
	return &filterCndBuilderStateNotificationStateNotifyAttempts{builder: b.builder}
}

type filterCndBuilderStateNotificationStateNotificationChannel struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateNotificationChannel) Eq(value *notification_channel.Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateNotificationChannel) Neq(value *notification_channel.Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateNotificationChannel) Gt(value *notification_channel.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateNotificationChannel) Gte(value *notification_channel.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateNotificationChannel) Lt(value *notification_channel.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateNotificationChannel) Lte(value *notification_channel.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateNotificationChannel) In(values []*notification_channel.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().NotificationChannel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateNotificationChannel) NotIn(values []*notification_channel.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().NotificationChannel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateNotificationChannel) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().NotificationChannel().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateNotificationChannel) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().NotificationChannel().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateNotificationChannel) compare(op gotenfilter.CompareOperator, value *notification_channel.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().NotificationChannel().WithValue(value),
	})
}

type filterCndBuilderStateNotificationStateStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateStatus) Eq(value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateStatus) Neq(value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateStatus) Gt(value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateStatus) Gte(value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateStatus) Lt(value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateStatus) Lte(value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateStatus) In(values []Notification_State_NotificationState_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateStatus) NotIn(values []Notification_State_NotificationState_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateStatus) compare(op gotenfilter.CompareOperator, value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().Status().WithValue(value),
	})
}

type filterCndBuilderStateNotificationStateError struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateError) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateError) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateError) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateError) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateError) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateError) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateError) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().Error().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateError) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().Error().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateError) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().Error().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateError) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().Error().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateError) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().Error().WithValue(value),
	})
}

type filterCndBuilderStateNotificationStateProviderData struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateProviderData) Eq(value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderData) Neq(value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderData) Gt(value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderData) Gte(value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderData) Lt(value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderData) Lte(value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderData) In(values []*Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderData) NotIn(values []*Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderData) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderData) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderData) compare(op gotenfilter.CompareOperator, value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().WithValue(value),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderData) Slack() *filterCndBuilderStateNotificationStateProviderDataSlack {
	return &filterCndBuilderStateNotificationStateProviderDataSlack{builder: b.builder}
}

func (b *filterCndBuilderStateNotificationStateProviderData) PagerDuty() *filterCndBuilderStateNotificationStateProviderDataPagerDuty {
	return &filterCndBuilderStateNotificationStateProviderDataPagerDuty{builder: b.builder}
}

func (b *filterCndBuilderStateNotificationStateProviderData) Webhook() *filterCndBuilderStateNotificationStateProviderDataWebhook {
	return &filterCndBuilderStateNotificationStateProviderDataWebhook{builder: b.builder}
}

type filterCndBuilderStateNotificationStateProviderDataSlack struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlack) Eq(value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlack) Neq(value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlack) Gt(value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlack) Gte(value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlack) Lt(value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlack) Lte(value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlack) In(values []*Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Slack().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlack) NotIn(values []*Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Slack().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlack) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Slack().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlack) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Slack().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlack) compare(op gotenfilter.CompareOperator, value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Slack().WithValue(value),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlack) Ts() *filterCndBuilderStateNotificationStateProviderDataSlackTs {
	return &filterCndBuilderStateNotificationStateProviderDataSlackTs{builder: b.builder}
}

type filterCndBuilderStateNotificationStateProviderDataSlackTs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlackTs) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlackTs) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlackTs) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlackTs) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlackTs) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlackTs) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlackTs) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Slack().Ts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlackTs) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Slack().Ts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlackTs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Slack().Ts().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlackTs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Slack().Ts().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataSlackTs) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Slack().Ts().WithValue(value),
	})
}

type filterCndBuilderStateNotificationStateProviderDataPagerDuty struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDuty) Eq(value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDuty) Neq(value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDuty) Gt(value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDuty) Gte(value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDuty) Lt(value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDuty) Lte(value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDuty) In(values []*Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().PagerDuty().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDuty) NotIn(values []*Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().PagerDuty().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDuty) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().PagerDuty().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDuty) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().PagerDuty().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDuty) compare(op gotenfilter.CompareOperator, value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().PagerDuty().WithValue(value),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDuty) IncidentKey() *filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey {
	return &filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey{builder: b.builder}
}

type filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().PagerDuty().IncidentKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().PagerDuty().IncidentKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().PagerDuty().IncidentKey().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().PagerDuty().IncidentKey().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataPagerDutyIncidentKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().PagerDuty().IncidentKey().WithValue(value),
	})
}

type filterCndBuilderStateNotificationStateProviderDataWebhook struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhook) Eq(value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhook) Neq(value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhook) Gt(value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhook) Gte(value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhook) Lt(value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhook) Lte(value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhook) In(values []*Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhook) NotIn(values []*Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhook) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhook) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhook) compare(op gotenfilter.CompareOperator, value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().WithValue(value),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhook) TotalChunks() *filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks {
	return &filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks{builder: b.builder}
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhook) FailedChunks() *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks {
	return &filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks{builder: b.builder}
}

type filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().TotalChunks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().TotalChunks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().TotalChunks().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().TotalChunks().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookTotalChunks) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().TotalChunks().WithValue(value),
	})
}

type filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) Eq(value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) Neq(value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) Gt(value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) Gte(value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) Lt(value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) Lte(value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) In(values [][]*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) NotIn(values [][]*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) Contains(value *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().FieldPath(),
		Value:     NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().WithItemValue(value),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) ContainsAnyOf(values []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) ContainsAll(values []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) compare(op gotenfilter.CompareOperator, value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().WithValue(value),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) AlertOffset() *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset {
	return &filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset{builder: b.builder}
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunks) Error() *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError {
	return &filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError{builder: b.builder}
}

type filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().AlertOffset().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().AlertOffset().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().AlertOffset().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().AlertOffset().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksAlertOffset) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().AlertOffset().WithValue(value),
	})
}

type filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().Error().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().Error().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().Error().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().Error().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateProviderDataWebhookFailedChunksError) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().ProviderData().Webhook().FailedChunks().Error().WithValue(value),
	})
}

type filterCndBuilderStateNotificationStateNotifyAttempts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateNotificationStateNotifyAttempts) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateNotificationStateNotifyAttempts) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateNotificationStateNotifyAttempts) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateNotificationStateNotifyAttempts) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateNotificationStateNotifyAttempts) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateNotificationStateNotifyAttempts) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateNotificationStateNotifyAttempts) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().NotifyAttempts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateNotifyAttempts) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().NotificationState().NotifyAttempts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateNotificationStateNotifyAttempts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().NotifyAttempts().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateNotifyAttempts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().NotificationState().NotifyAttempts().FieldPath(),
	})
}

func (b *filterCndBuilderStateNotificationStateNotifyAttempts) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().NotificationState().NotifyAttempts().WithValue(value),
	})
}

type filterCndBuilderStateIncidentNotifyAttemptsDone struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateIncidentNotifyAttemptsDone) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateIncidentNotifyAttemptsDone) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateIncidentNotifyAttemptsDone) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateIncidentNotifyAttemptsDone) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateIncidentNotifyAttemptsDone) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateIncidentNotifyAttemptsDone) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateIncidentNotifyAttemptsDone) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().IncidentNotifyAttemptsDone().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateIncidentNotifyAttemptsDone) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().IncidentNotifyAttemptsDone().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateIncidentNotifyAttemptsDone) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().IncidentNotifyAttemptsDone().FieldPath(),
	})
}

func (b *filterCndBuilderStateIncidentNotifyAttemptsDone) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().IncidentNotifyAttemptsDone().FieldPath(),
	})
}

func (b *filterCndBuilderStateIncidentNotifyAttemptsDone) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().IncidentNotifyAttemptsDone().WithValue(value),
	})
}

type filterCndBuilderStateResolutionNotifyAttemptsDone struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotifyAttemptsDone) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotifyAttemptsDone) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotifyAttemptsDone) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotifyAttemptsDone) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotifyAttemptsDone) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotifyAttemptsDone) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotifyAttemptsDone) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotifyAttemptsDone().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotifyAttemptsDone) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotifyAttemptsDone().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotifyAttemptsDone) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotifyAttemptsDone().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotifyAttemptsDone) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotifyAttemptsDone().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotifyAttemptsDone) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotifyAttemptsDone().WithValue(value),
	})
}

type filterCndBuilderStateAlertsLifetime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateAlertsLifetime) Eq(value *common.TimeRange) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateAlertsLifetime) Neq(value *common.TimeRange) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateAlertsLifetime) Gt(value *common.TimeRange) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateAlertsLifetime) Gte(value *common.TimeRange) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateAlertsLifetime) Lt(value *common.TimeRange) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateAlertsLifetime) Lte(value *common.TimeRange) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateAlertsLifetime) In(values []*common.TimeRange) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().AlertsLifetime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateAlertsLifetime) NotIn(values []*common.TimeRange) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().AlertsLifetime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateAlertsLifetime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().AlertsLifetime().FieldPath(),
	})
}

func (b *filterCndBuilderStateAlertsLifetime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().AlertsLifetime().FieldPath(),
	})
}

func (b *filterCndBuilderStateAlertsLifetime) compare(op gotenfilter.CompareOperator, value *common.TimeRange) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().AlertsLifetime().WithValue(value),
	})
}

func (b *filterCndBuilderStateAlertsLifetime) StartTime() *filterCndBuilderStateAlertsLifetimeStartTime {
	return &filterCndBuilderStateAlertsLifetimeStartTime{builder: b.builder}
}

func (b *filterCndBuilderStateAlertsLifetime) EndTime() *filterCndBuilderStateAlertsLifetimeEndTime {
	return &filterCndBuilderStateAlertsLifetimeEndTime{builder: b.builder}
}

type filterCndBuilderStateAlertsLifetimeStartTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateAlertsLifetimeStartTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateAlertsLifetimeStartTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateAlertsLifetimeStartTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateAlertsLifetimeStartTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateAlertsLifetimeStartTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateAlertsLifetimeStartTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateAlertsLifetimeStartTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().AlertsLifetime().StartTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateAlertsLifetimeStartTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().AlertsLifetime().StartTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateAlertsLifetimeStartTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().AlertsLifetime().StartTime().FieldPath(),
	})
}

func (b *filterCndBuilderStateAlertsLifetimeStartTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().AlertsLifetime().StartTime().FieldPath(),
	})
}

func (b *filterCndBuilderStateAlertsLifetimeStartTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().AlertsLifetime().StartTime().WithValue(value),
	})
}

type filterCndBuilderStateAlertsLifetimeEndTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateAlertsLifetimeEndTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateAlertsLifetimeEndTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateAlertsLifetimeEndTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateAlertsLifetimeEndTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateAlertsLifetimeEndTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateAlertsLifetimeEndTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateAlertsLifetimeEndTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().AlertsLifetime().EndTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateAlertsLifetimeEndTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().AlertsLifetime().EndTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateAlertsLifetimeEndTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().AlertsLifetime().EndTime().FieldPath(),
	})
}

func (b *filterCndBuilderStateAlertsLifetimeEndTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().AlertsLifetime().EndTime().FieldPath(),
	})
}

func (b *filterCndBuilderStateAlertsLifetimeEndTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().AlertsLifetime().EndTime().WithValue(value),
	})
}

type filterCndBuilderStateResolutionNotificationState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationState) Eq(value []*Notification_State_NotificationState) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationState) Neq(value []*Notification_State_NotificationState) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationState) Gt(value []*Notification_State_NotificationState) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationState) Gte(value []*Notification_State_NotificationState) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationState) Lt(value []*Notification_State_NotificationState) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationState) Lte(value []*Notification_State_NotificationState) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationState) In(values [][]*Notification_State_NotificationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationState) NotIn(values [][]*Notification_State_NotificationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationState) Contains(value *Notification_State_NotificationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().FieldPath(),
		Value:     NewNotificationFieldPathBuilder().State().ResolutionNotificationState().WithItemValue(value),
	})
}

func (b *filterCndBuilderStateResolutionNotificationState) ContainsAnyOf(values []*Notification_State_NotificationState) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().State().ResolutionNotificationState()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateResolutionNotificationState) ContainsAll(values []*Notification_State_NotificationState) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().State().ResolutionNotificationState()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateResolutionNotificationState) compare(op gotenfilter.CompareOperator, value []*Notification_State_NotificationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().WithValue(value),
	})
}

func (b *filterCndBuilderStateResolutionNotificationState) NotificationChannel() *filterCndBuilderStateResolutionNotificationStateNotificationChannel {
	return &filterCndBuilderStateResolutionNotificationStateNotificationChannel{builder: b.builder}
}

func (b *filterCndBuilderStateResolutionNotificationState) Status() *filterCndBuilderStateResolutionNotificationStateStatus {
	return &filterCndBuilderStateResolutionNotificationStateStatus{builder: b.builder}
}

func (b *filterCndBuilderStateResolutionNotificationState) Error() *filterCndBuilderStateResolutionNotificationStateError {
	return &filterCndBuilderStateResolutionNotificationStateError{builder: b.builder}
}

func (b *filterCndBuilderStateResolutionNotificationState) ProviderData() *filterCndBuilderStateResolutionNotificationStateProviderData {
	return &filterCndBuilderStateResolutionNotificationStateProviderData{builder: b.builder}
}

func (b *filterCndBuilderStateResolutionNotificationState) NotifyAttempts() *filterCndBuilderStateResolutionNotificationStateNotifyAttempts {
	return &filterCndBuilderStateResolutionNotificationStateNotifyAttempts{builder: b.builder}
}

type filterCndBuilderStateResolutionNotificationStateNotificationChannel struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateNotificationChannel) Eq(value *notification_channel.Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateNotificationChannel) Neq(value *notification_channel.Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateNotificationChannel) Gt(value *notification_channel.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateNotificationChannel) Gte(value *notification_channel.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateNotificationChannel) Lt(value *notification_channel.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateNotificationChannel) Lte(value *notification_channel.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateNotificationChannel) In(values []*notification_channel.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().NotificationChannel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateNotificationChannel) NotIn(values []*notification_channel.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().NotificationChannel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateNotificationChannel) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().NotificationChannel().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateNotificationChannel) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().NotificationChannel().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateNotificationChannel) compare(op gotenfilter.CompareOperator, value *notification_channel.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().NotificationChannel().WithValue(value),
	})
}

type filterCndBuilderStateResolutionNotificationStateStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateStatus) Eq(value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateStatus) Neq(value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateStatus) Gt(value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateStatus) Gte(value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateStatus) Lt(value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateStatus) Lte(value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateStatus) In(values []Notification_State_NotificationState_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateStatus) NotIn(values []Notification_State_NotificationState_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateStatus) compare(op gotenfilter.CompareOperator, value Notification_State_NotificationState_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().Status().WithValue(value),
	})
}

type filterCndBuilderStateResolutionNotificationStateError struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateError) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateError) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateError) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateError) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateError) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateError) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateError) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().Error().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateError) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().Error().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateError) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().Error().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateError) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().Error().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateError) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().Error().WithValue(value),
	})
}

type filterCndBuilderStateResolutionNotificationStateProviderData struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) Eq(value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) Neq(value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) Gt(value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) Gte(value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) Lt(value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) Lte(value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) In(values []*Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) NotIn(values []*Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) compare(op gotenfilter.CompareOperator, value *Notification_State_NotificationState_ProviderData) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().WithValue(value),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) Slack() *filterCndBuilderStateResolutionNotificationStateProviderDataSlack {
	return &filterCndBuilderStateResolutionNotificationStateProviderDataSlack{builder: b.builder}
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) PagerDuty() *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty {
	return &filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty{builder: b.builder}
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderData) Webhook() *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook {
	return &filterCndBuilderStateResolutionNotificationStateProviderDataWebhook{builder: b.builder}
}

type filterCndBuilderStateResolutionNotificationStateProviderDataSlack struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlack) Eq(value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlack) Neq(value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlack) Gt(value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlack) Gte(value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlack) Lt(value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlack) Lte(value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlack) In(values []*Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Slack().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlack) NotIn(values []*Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Slack().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlack) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Slack().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlack) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Slack().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlack) compare(op gotenfilter.CompareOperator, value *Notification_State_NotificationState_ProviderData_Slack) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Slack().WithValue(value),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlack) Ts() *filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs {
	return &filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs{builder: b.builder}
}

type filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Slack().Ts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Slack().Ts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Slack().Ts().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Slack().Ts().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataSlackTs) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Slack().Ts().WithValue(value),
	})
}

type filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty) Eq(value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty) Neq(value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty) Gt(value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty) Gte(value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty) Lt(value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty) Lte(value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty) In(values []*Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().PagerDuty().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty) NotIn(values []*Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().PagerDuty().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().PagerDuty().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().PagerDuty().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty) compare(op gotenfilter.CompareOperator, value *Notification_State_NotificationState_ProviderData_PagerDuty) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().PagerDuty().WithValue(value),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDuty) IncidentKey() *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey {
	return &filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey{builder: b.builder}
}

type filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().PagerDuty().IncidentKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().PagerDuty().IncidentKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().PagerDuty().IncidentKey().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().PagerDuty().IncidentKey().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataPagerDutyIncidentKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().PagerDuty().IncidentKey().WithValue(value),
	})
}

type filterCndBuilderStateResolutionNotificationStateProviderDataWebhook struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook) Eq(value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook) Neq(value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook) Gt(value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook) Gte(value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook) Lt(value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook) Lte(value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook) In(values []*Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook) NotIn(values []*Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook) compare(op gotenfilter.CompareOperator, value *Notification_State_NotificationState_ProviderData_WebHook) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().WithValue(value),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook) TotalChunks() *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks {
	return &filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks{builder: b.builder}
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhook) FailedChunks() *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks {
	return &filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks{builder: b.builder}
}

type filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().TotalChunks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().TotalChunks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().TotalChunks().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().TotalChunks().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookTotalChunks) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().TotalChunks().WithValue(value),
	})
}

type filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) Eq(value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) Neq(value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) Gt(value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) Gte(value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) Lt(value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) Lte(value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) In(values [][]*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) NotIn(values [][]*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) Contains(value *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().FieldPath(),
		Value:     NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().WithItemValue(value),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) ContainsAnyOf(values []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) ContainsAll(values []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	pathSelector := NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks()
	itemValues := make([]Notification_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) compare(op gotenfilter.CompareOperator, value []*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().WithValue(value),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) AlertOffset() *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset {
	return &filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset{builder: b.builder}
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunks) Error() *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError {
	return &filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError{builder: b.builder}
}

type filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().AlertOffset().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().AlertOffset().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().AlertOffset().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().AlertOffset().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksAlertOffset) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().AlertOffset().WithValue(value),
	})
}

type filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().Error().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().Error().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().Error().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().Error().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateProviderDataWebhookFailedChunksError) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().ProviderData().Webhook().FailedChunks().Error().WithValue(value),
	})
}

type filterCndBuilderStateResolutionNotificationStateNotifyAttempts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateResolutionNotificationStateNotifyAttempts) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateNotifyAttempts) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateNotifyAttempts) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateNotifyAttempts) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateNotifyAttempts) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateNotifyAttempts) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateResolutionNotificationStateNotifyAttempts) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().NotifyAttempts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateNotifyAttempts) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().NotifyAttempts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateNotifyAttempts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().NotifyAttempts().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateNotifyAttempts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().NotifyAttempts().FieldPath(),
	})
}

func (b *filterCndBuilderStateResolutionNotificationStateNotifyAttempts) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().ResolutionNotificationState().NotifyAttempts().WithValue(value),
	})
}

type filterCndBuilderStateLifecycleCompleted struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStateLifecycleCompleted) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStateLifecycleCompleted) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStateLifecycleCompleted) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStateLifecycleCompleted) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStateLifecycleCompleted) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStateLifecycleCompleted) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStateLifecycleCompleted) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().LifecycleCompleted().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateLifecycleCompleted) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Notification_FieldPathArrayOfValues: NewNotificationFieldPathBuilder().State().LifecycleCompleted().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStateLifecycleCompleted) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewNotificationFieldPathBuilder().State().LifecycleCompleted().FieldPath(),
	})
}

func (b *filterCndBuilderStateLifecycleCompleted) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewNotificationFieldPathBuilder().State().LifecycleCompleted().FieldPath(),
	})
}

func (b *filterCndBuilderStateLifecycleCompleted) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Notification_FieldPathValue: NewNotificationFieldPathBuilder().State().LifecycleCompleted().WithValue(value),
	})
}
