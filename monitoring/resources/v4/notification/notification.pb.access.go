// Code generated by protoc-gen-goten-resource
// Resource: Notification
// DO NOT EDIT!!!

package notification

import (
	"context"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	"github.com/cloudwan/goten-sdk/types/watch_type"
)

// proto imports
import (
	alert "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alert"
	alerting_condition "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alerting_condition"
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alerting_policy"
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	notification_channel "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/notification_channel"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(context.Context)

	_ = codes.Internal
	_ = status.Status{}

	_ = watch_type.WatchType_STATEFUL
	_ = new(gotenobject.FieldPath)
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &alert.Alert{}
	_ = &alerting_condition.AlertingCondition{}
	_ = &alerting_policy.AlertingPolicy{}
	_ = &common.LabelDescriptor{}
	_ = &notification_channel.NotificationChannel{}
	_ = &project.Project{}
	_ = &meta.Meta{}
)

type NotificationAccess interface {
	GetNotification(context.Context, *GetQuery) (*Notification, error)
	BatchGetNotifications(context.Context, []*Reference, ...gotenresource.BatchGetOption) error
	QueryNotifications(context.Context, *ListQuery) (*QueryResultSnapshot, error)
	SearchNotifications(context.Context, *SearchQuery) (*QueryResultSnapshot, error)
	WatchNotification(context.Context, *GetQuery, func(*NotificationChange) error) error
	WatchNotifications(context.Context, *WatchQuery, func(*QueryResultChange) error) error
	SaveNotification(context.Context, *Notification, ...gotenresource.SaveOption) error
	DeleteNotification(context.Context, *Reference, ...gotenresource.DeleteOption) error
}

type anyCastAccess struct {
	NotificationAccess
}

func AsAnyCastAccess(access NotificationAccess) gotenresource.Access {
	return &anyCastAccess{NotificationAccess: access}
}

func (a *anyCastAccess) Get(ctx context.Context, q gotenresource.GetQuery) (gotenresource.Resource, error) {
	if asNotificationQuery, ok := q.(*GetQuery); ok {
		return a.GetNotification(ctx, asNotificationQuery)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected Notification, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Query(ctx context.Context, q gotenresource.ListQuery) (gotenresource.QueryResultSnapshot, error) {
	if asNotificationQuery, ok := q.(*ListQuery); ok {
		return a.QueryNotifications(ctx, asNotificationQuery)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected Notification, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Search(ctx context.Context, q gotenresource.SearchQuery) (gotenresource.QueryResultSnapshot, error) {
	if asNotificationQuery, ok := q.(*SearchQuery); ok {
		return a.SearchNotifications(ctx, asNotificationQuery)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected Notification, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Watch(ctx context.Context, q gotenresource.GetQuery, cb func(ch gotenresource.ResourceChange) error) error {
	if asNotificationQuery, ok := q.(*GetQuery); ok {
		return a.WatchNotification(ctx, asNotificationQuery, func(change *NotificationChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected Notification, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) WatchQuery(ctx context.Context, q gotenresource.WatchQuery, cb func(ch gotenresource.QueryResultChange) error) error {
	if asNotificationQuery, ok := q.(*WatchQuery); ok {
		return a.WatchNotifications(ctx, asNotificationQuery, func(change *QueryResultChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected Notification, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Save(ctx context.Context, res gotenresource.Resource, opts ...gotenresource.SaveOption) error {
	if asNotificationRes, ok := res.(*Notification); ok {
		return a.SaveNotification(ctx, asNotificationRes, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected Notification, got: %s",
		res.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Delete(ctx context.Context, ref gotenresource.Reference, opts ...gotenresource.DeleteOption) error {
	if asNotificationRef, ok := ref.(*Reference); ok {
		return a.DeleteNotification(ctx, asNotificationRef, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected Notification, got: %s",
		ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) BatchGet(ctx context.Context, toGet []gotenresource.Reference, opts ...gotenresource.BatchGetOption) error {
	notificationRefs := make([]*Reference, 0, len(toGet))
	for _, ref := range toGet {
		if asNotificationRef, ok := ref.(*Reference); !ok {
			return status.Errorf(codes.Internal,
				"Unrecognized descriptor, expected Notification, got: %s",
				ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
		} else {
			notificationRefs = append(notificationRefs, asNotificationRef)
		}
	}
	return a.BatchGetNotifications(ctx, notificationRefs, opts...)
}

func (a *anyCastAccess) GetResourceDescriptors() []gotenresource.Descriptor {
	return []gotenresource.Descriptor{
		GetDescriptor(),
	}
}
