// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v4/notification.proto
// DO NOT EDIT!!!

package notification

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	alert "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alert"
	alerting_condition "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alerting_condition"
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alerting_policy"
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	notification_channel "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/notification_channel"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &alert.Alert{}
	_ = &alerting_condition.AlertingCondition{}
	_ = &alerting_policy.AlertingPolicy{}
	_ = &common.LabelDescriptor{}
	_ = &notification_channel.NotificationChannel{}
	_ = &project.Project{}
	_ = &meta.Meta{}
)

type Notification_FieldMask struct {
	Paths []Notification_FieldPath
}

func FullNotification_FieldMask() *Notification_FieldMask {
	res := &Notification_FieldMask{}
	res.Paths = append(res.Paths, &Notification_FieldTerminalPath{selector: Notification_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Notification_FieldTerminalPath{selector: Notification_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &Notification_FieldTerminalPath{selector: Notification_FieldPathSelectorAlerts})
	res.Paths = append(res.Paths, &Notification_FieldTerminalPath{selector: Notification_FieldPathSelectorAlertSets})
	res.Paths = append(res.Paths, &Notification_FieldTerminalPath{selector: Notification_FieldPathSelectorState})
	return res
}

func (fieldMask *Notification_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Notification_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Notification_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseNotification_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Notification_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Notification_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Notification_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseNotification_FieldPath(raw)
	})
}

func (fieldMask *Notification_FieldMask) ProtoMessage() {}

func (fieldMask *Notification_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Notification_FieldMask) Subtract(other *Notification_FieldMask) *Notification_FieldMask {
	result := &Notification_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[Notification_FieldPathSelector]gotenobject.FieldMask{
		Notification_FieldPathSelectorMetadata:  &meta.Meta_FieldMask{},
		Notification_FieldPathSelectorAlertSets: &Notification_AlertsSet_FieldMask{},
		Notification_FieldPathSelectorState:     &Notification_State_FieldMask{},
	}
	mySubMasks := map[Notification_FieldPathSelector]gotenobject.FieldMask{
		Notification_FieldPathSelectorMetadata:  &meta.Meta_FieldMask{},
		Notification_FieldPathSelectorAlertSets: &Notification_AlertsSet_FieldMask{},
		Notification_FieldPathSelectorState:     &Notification_State_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Notification_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Notification_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Notification_FieldTerminalPath); ok {
					switch tp.selector {
					case Notification_FieldPathSelectorMetadata:
						mySubMasks[Notification_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case Notification_FieldPathSelectorAlertSets:
						mySubMasks[Notification_FieldPathSelectorAlertSets] = FullNotification_AlertsSet_FieldMask()
					case Notification_FieldPathSelectorState:
						mySubMasks[Notification_FieldPathSelectorState] = FullNotification_State_FieldMask()
					}
				} else if tp, ok := path.(*Notification_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Notification_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Notification_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Notification_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Notification_FieldMask) FilterInputFields() *Notification_FieldMask {
	result := &Notification_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Notification_FieldPathSelectorMetadata:
			if _, ok := path.(*Notification_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Notification_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Notification_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Notification_FieldSubPath{selector: Notification_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Notification_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Notification_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Notification_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseNotification_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Notification_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Notification_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Notification_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Notification_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_FieldMask) AppendPath(path Notification_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Notification_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Notification_FieldPath))
}

func (fieldMask *Notification_FieldMask) GetPaths() []Notification_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Notification_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Notification_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseNotification_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Notification_FieldMask) Set(target, source *Notification) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Notification_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Notification), source.(*Notification))
}

func (fieldMask *Notification_FieldMask) Project(source *Notification) *Notification {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Notification{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	alertSetsMask := &Notification_AlertsSet_FieldMask{}
	wholeAlertSetsAccepted := false
	stateMask := &Notification_State_FieldMask{}
	wholeStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Notification_FieldTerminalPath:
			switch tp.selector {
			case Notification_FieldPathSelectorName:
				result.Name = source.Name
			case Notification_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case Notification_FieldPathSelectorAlerts:
				result.Alerts = source.Alerts
			case Notification_FieldPathSelectorAlertSets:
				result.AlertSets = source.AlertSets
				wholeAlertSetsAccepted = true
			case Notification_FieldPathSelectorState:
				result.State = source.State
				wholeStateAccepted = true
			}
		case *Notification_FieldSubPath:
			switch tp.selector {
			case Notification_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case Notification_FieldPathSelectorAlertSets:
				alertSetsMask.AppendPath(tp.subPath.(NotificationAlertsSet_FieldPath))
			case Notification_FieldPathSelectorState:
				stateMask.AppendPath(tp.subPath.(NotificationState_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeAlertSetsAccepted == false && len(alertSetsMask.Paths) > 0 {
		for _, sourceItem := range source.GetAlertSets() {
			result.AlertSets = append(result.AlertSets, alertSetsMask.Project(sourceItem))
		}
	}
	if wholeStateAccepted == false && len(stateMask.Paths) > 0 {
		result.State = stateMask.Project(source.GetState())
	}
	return result
}

func (fieldMask *Notification_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Notification))
}

func (fieldMask *Notification_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Notification_AlertsSet_FieldMask struct {
	Paths []NotificationAlertsSet_FieldPath
}

func FullNotification_AlertsSet_FieldMask() *Notification_AlertsSet_FieldMask {
	res := &Notification_AlertsSet_FieldMask{}
	res.Paths = append(res.Paths, &NotificationAlertsSet_FieldTerminalPath{selector: NotificationAlertsSet_FieldPathSelectorCondition})
	res.Paths = append(res.Paths, &NotificationAlertsSet_FieldTerminalPath{selector: NotificationAlertsSet_FieldPathSelectorIds})
	return res
}

func (fieldMask *Notification_AlertsSet_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Notification_AlertsSet_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Notification_AlertsSet_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseNotificationAlertsSet_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Notification_AlertsSet_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*NotificationAlertsSet_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Notification_AlertsSet_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseNotificationAlertsSet_FieldPath(raw)
	})
}

func (fieldMask *Notification_AlertsSet_FieldMask) ProtoMessage() {}

func (fieldMask *Notification_AlertsSet_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Notification_AlertsSet_FieldMask) Subtract(other *Notification_AlertsSet_FieldMask) *Notification_AlertsSet_FieldMask {
	result := &Notification_AlertsSet_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *NotificationAlertsSet_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Notification_AlertsSet_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Notification_AlertsSet_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Notification_AlertsSet_FieldMask) FilterInputFields() *Notification_AlertsSet_FieldMask {
	result := &Notification_AlertsSet_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Notification_AlertsSet_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Notification_AlertsSet_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]NotificationAlertsSet_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseNotificationAlertsSet_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Notification_AlertsSet_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Notification_AlertsSet_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_AlertsSet_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Notification_AlertsSet_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Notification_AlertsSet_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_AlertsSet_FieldMask) AppendPath(path NotificationAlertsSet_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Notification_AlertsSet_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(NotificationAlertsSet_FieldPath))
}

func (fieldMask *Notification_AlertsSet_FieldMask) GetPaths() []NotificationAlertsSet_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Notification_AlertsSet_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Notification_AlertsSet_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseNotificationAlertsSet_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Notification_AlertsSet_FieldMask) Set(target, source *Notification_AlertsSet) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Notification_AlertsSet_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Notification_AlertsSet), source.(*Notification_AlertsSet))
}

func (fieldMask *Notification_AlertsSet_FieldMask) Project(source *Notification_AlertsSet) *Notification_AlertsSet {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Notification_AlertsSet{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *NotificationAlertsSet_FieldTerminalPath:
			switch tp.selector {
			case NotificationAlertsSet_FieldPathSelectorCondition:
				result.Condition = source.Condition
			case NotificationAlertsSet_FieldPathSelectorIds:
				result.Ids = source.Ids
			}
		}
	}
	return result
}

func (fieldMask *Notification_AlertsSet_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Notification_AlertsSet))
}

func (fieldMask *Notification_AlertsSet_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Notification_State_FieldMask struct {
	Paths []NotificationState_FieldPath
}

func FullNotification_State_FieldMask() *Notification_State_FieldMask {
	res := &Notification_State_FieldMask{}
	res.Paths = append(res.Paths, &NotificationState_FieldTerminalPath{selector: NotificationState_FieldPathSelectorIsResolved})
	res.Paths = append(res.Paths, &NotificationState_FieldTerminalPath{selector: NotificationState_FieldPathSelectorNotificationState})
	res.Paths = append(res.Paths, &NotificationState_FieldTerminalPath{selector: NotificationState_FieldPathSelectorIncidentNotifyAttemptsDone})
	res.Paths = append(res.Paths, &NotificationState_FieldTerminalPath{selector: NotificationState_FieldPathSelectorResolutionNotifyAttemptsDone})
	res.Paths = append(res.Paths, &NotificationState_FieldTerminalPath{selector: NotificationState_FieldPathSelectorAlertsLifetime})
	res.Paths = append(res.Paths, &NotificationState_FieldTerminalPath{selector: NotificationState_FieldPathSelectorResolutionNotificationState})
	res.Paths = append(res.Paths, &NotificationState_FieldTerminalPath{selector: NotificationState_FieldPathSelectorLifecycleCompleted})
	return res
}

func (fieldMask *Notification_State_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Notification_State_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Notification_State_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseNotificationState_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Notification_State_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*NotificationState_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Notification_State_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseNotificationState_FieldPath(raw)
	})
}

func (fieldMask *Notification_State_FieldMask) ProtoMessage() {}

func (fieldMask *Notification_State_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Notification_State_FieldMask) Subtract(other *Notification_State_FieldMask) *Notification_State_FieldMask {
	result := &Notification_State_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[NotificationState_FieldPathSelector]gotenobject.FieldMask{
		NotificationState_FieldPathSelectorNotificationState:           &Notification_State_NotificationState_FieldMask{},
		NotificationState_FieldPathSelectorAlertsLifetime:              &common.TimeRange_FieldMask{},
		NotificationState_FieldPathSelectorResolutionNotificationState: &Notification_State_NotificationState_FieldMask{},
	}
	mySubMasks := map[NotificationState_FieldPathSelector]gotenobject.FieldMask{
		NotificationState_FieldPathSelectorNotificationState:           &Notification_State_NotificationState_FieldMask{},
		NotificationState_FieldPathSelectorAlertsLifetime:              &common.TimeRange_FieldMask{},
		NotificationState_FieldPathSelectorResolutionNotificationState: &Notification_State_NotificationState_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *NotificationState_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *NotificationState_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*NotificationState_FieldTerminalPath); ok {
					switch tp.selector {
					case NotificationState_FieldPathSelectorNotificationState:
						mySubMasks[NotificationState_FieldPathSelectorNotificationState] = FullNotification_State_NotificationState_FieldMask()
					case NotificationState_FieldPathSelectorAlertsLifetime:
						mySubMasks[NotificationState_FieldPathSelectorAlertsLifetime] = common.FullTimeRange_FieldMask()
					case NotificationState_FieldPathSelectorResolutionNotificationState:
						mySubMasks[NotificationState_FieldPathSelectorResolutionNotificationState] = FullNotification_State_NotificationState_FieldMask()
					}
				} else if tp, ok := path.(*NotificationState_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &NotificationState_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Notification_State_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Notification_State_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Notification_State_FieldMask) FilterInputFields() *Notification_State_FieldMask {
	result := &Notification_State_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Notification_State_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Notification_State_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]NotificationState_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseNotificationState_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Notification_State_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Notification_State_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Notification_State_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Notification_State_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_FieldMask) AppendPath(path NotificationState_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Notification_State_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(NotificationState_FieldPath))
}

func (fieldMask *Notification_State_FieldMask) GetPaths() []NotificationState_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Notification_State_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Notification_State_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseNotificationState_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Notification_State_FieldMask) Set(target, source *Notification_State) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Notification_State_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Notification_State), source.(*Notification_State))
}

func (fieldMask *Notification_State_FieldMask) Project(source *Notification_State) *Notification_State {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Notification_State{}
	notificationStateMask := &Notification_State_NotificationState_FieldMask{}
	wholeNotificationStateAccepted := false
	alertsLifetimeMask := &common.TimeRange_FieldMask{}
	wholeAlertsLifetimeAccepted := false
	resolutionNotificationStateMask := &Notification_State_NotificationState_FieldMask{}
	wholeResolutionNotificationStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *NotificationState_FieldTerminalPath:
			switch tp.selector {
			case NotificationState_FieldPathSelectorIsResolved:
				result.IsResolved = source.IsResolved
			case NotificationState_FieldPathSelectorNotificationState:
				result.NotificationState = source.NotificationState
				wholeNotificationStateAccepted = true
			case NotificationState_FieldPathSelectorIncidentNotifyAttemptsDone:
				result.IncidentNotifyAttemptsDone = source.IncidentNotifyAttemptsDone
			case NotificationState_FieldPathSelectorResolutionNotifyAttemptsDone:
				result.ResolutionNotifyAttemptsDone = source.ResolutionNotifyAttemptsDone
			case NotificationState_FieldPathSelectorAlertsLifetime:
				result.AlertsLifetime = source.AlertsLifetime
				wholeAlertsLifetimeAccepted = true
			case NotificationState_FieldPathSelectorResolutionNotificationState:
				result.ResolutionNotificationState = source.ResolutionNotificationState
				wholeResolutionNotificationStateAccepted = true
			case NotificationState_FieldPathSelectorLifecycleCompleted:
				result.LifecycleCompleted = source.LifecycleCompleted
			}
		case *NotificationState_FieldSubPath:
			switch tp.selector {
			case NotificationState_FieldPathSelectorNotificationState:
				notificationStateMask.AppendPath(tp.subPath.(NotificationStateNotificationState_FieldPath))
			case NotificationState_FieldPathSelectorAlertsLifetime:
				alertsLifetimeMask.AppendPath(tp.subPath.(common.TimeRange_FieldPath))
			case NotificationState_FieldPathSelectorResolutionNotificationState:
				resolutionNotificationStateMask.AppendPath(tp.subPath.(NotificationStateNotificationState_FieldPath))
			}
		}
	}
	if wholeNotificationStateAccepted == false && len(notificationStateMask.Paths) > 0 {
		for _, sourceItem := range source.GetNotificationState() {
			result.NotificationState = append(result.NotificationState, notificationStateMask.Project(sourceItem))
		}
	}
	if wholeAlertsLifetimeAccepted == false && len(alertsLifetimeMask.Paths) > 0 {
		result.AlertsLifetime = alertsLifetimeMask.Project(source.GetAlertsLifetime())
	}
	if wholeResolutionNotificationStateAccepted == false && len(resolutionNotificationStateMask.Paths) > 0 {
		for _, sourceItem := range source.GetResolutionNotificationState() {
			result.ResolutionNotificationState = append(result.ResolutionNotificationState, resolutionNotificationStateMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Notification_State_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Notification_State))
}

func (fieldMask *Notification_State_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Notification_State_NotificationState_FieldMask struct {
	Paths []NotificationStateNotificationState_FieldPath
}

func FullNotification_State_NotificationState_FieldMask() *Notification_State_NotificationState_FieldMask {
	res := &Notification_State_NotificationState_FieldMask{}
	res.Paths = append(res.Paths, &NotificationStateNotificationState_FieldTerminalPath{selector: NotificationStateNotificationState_FieldPathSelectorNotificationChannel})
	res.Paths = append(res.Paths, &NotificationStateNotificationState_FieldTerminalPath{selector: NotificationStateNotificationState_FieldPathSelectorStatus})
	res.Paths = append(res.Paths, &NotificationStateNotificationState_FieldTerminalPath{selector: NotificationStateNotificationState_FieldPathSelectorError})
	res.Paths = append(res.Paths, &NotificationStateNotificationState_FieldTerminalPath{selector: NotificationStateNotificationState_FieldPathSelectorProviderData})
	res.Paths = append(res.Paths, &NotificationStateNotificationState_FieldTerminalPath{selector: NotificationStateNotificationState_FieldPathSelectorNotifyAttempts})
	return res
}

func (fieldMask *Notification_State_NotificationState_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Notification_State_NotificationState_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Notification_State_NotificationState_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseNotificationStateNotificationState_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*NotificationStateNotificationState_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Notification_State_NotificationState_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseNotificationStateNotificationState_FieldPath(raw)
	})
}

func (fieldMask *Notification_State_NotificationState_FieldMask) ProtoMessage() {}

func (fieldMask *Notification_State_NotificationState_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Notification_State_NotificationState_FieldMask) Subtract(other *Notification_State_NotificationState_FieldMask) *Notification_State_NotificationState_FieldMask {
	result := &Notification_State_NotificationState_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[NotificationStateNotificationState_FieldPathSelector]gotenobject.FieldMask{
		NotificationStateNotificationState_FieldPathSelectorProviderData: &Notification_State_NotificationState_ProviderData_FieldMask{},
	}
	mySubMasks := map[NotificationStateNotificationState_FieldPathSelector]gotenobject.FieldMask{
		NotificationStateNotificationState_FieldPathSelectorProviderData: &Notification_State_NotificationState_ProviderData_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *NotificationStateNotificationState_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *NotificationStateNotificationState_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*NotificationStateNotificationState_FieldTerminalPath); ok {
					switch tp.selector {
					case NotificationStateNotificationState_FieldPathSelectorProviderData:
						mySubMasks[NotificationStateNotificationState_FieldPathSelectorProviderData] = FullNotification_State_NotificationState_ProviderData_FieldMask()
					}
				} else if tp, ok := path.(*NotificationStateNotificationState_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &NotificationStateNotificationState_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Notification_State_NotificationState_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Notification_State_NotificationState_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Notification_State_NotificationState_FieldMask) FilterInputFields() *Notification_State_NotificationState_FieldMask {
	result := &Notification_State_NotificationState_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Notification_State_NotificationState_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Notification_State_NotificationState_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]NotificationStateNotificationState_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseNotificationStateNotificationState_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Notification_State_NotificationState_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Notification_State_NotificationState_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Notification_State_NotificationState_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Notification_State_NotificationState_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_FieldMask) AppendPath(path NotificationStateNotificationState_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Notification_State_NotificationState_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(NotificationStateNotificationState_FieldPath))
}

func (fieldMask *Notification_State_NotificationState_FieldMask) GetPaths() []NotificationStateNotificationState_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Notification_State_NotificationState_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Notification_State_NotificationState_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseNotificationStateNotificationState_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Notification_State_NotificationState_FieldMask) Set(target, source *Notification_State_NotificationState) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Notification_State_NotificationState_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Notification_State_NotificationState), source.(*Notification_State_NotificationState))
}

func (fieldMask *Notification_State_NotificationState_FieldMask) Project(source *Notification_State_NotificationState) *Notification_State_NotificationState {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Notification_State_NotificationState{}
	providerDataMask := &Notification_State_NotificationState_ProviderData_FieldMask{}
	wholeProviderDataAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *NotificationStateNotificationState_FieldTerminalPath:
			switch tp.selector {
			case NotificationStateNotificationState_FieldPathSelectorNotificationChannel:
				result.NotificationChannel = source.NotificationChannel
			case NotificationStateNotificationState_FieldPathSelectorStatus:
				result.Status = source.Status
			case NotificationStateNotificationState_FieldPathSelectorError:
				result.Error = source.Error
			case NotificationStateNotificationState_FieldPathSelectorProviderData:
				result.ProviderData = source.ProviderData
				wholeProviderDataAccepted = true
			case NotificationStateNotificationState_FieldPathSelectorNotifyAttempts:
				result.NotifyAttempts = source.NotifyAttempts
			}
		case *NotificationStateNotificationState_FieldSubPath:
			switch tp.selector {
			case NotificationStateNotificationState_FieldPathSelectorProviderData:
				providerDataMask.AppendPath(tp.subPath.(NotificationStateNotificationStateProviderData_FieldPath))
			}
		}
	}
	if wholeProviderDataAccepted == false && len(providerDataMask.Paths) > 0 {
		result.ProviderData = providerDataMask.Project(source.GetProviderData())
	}
	return result
}

func (fieldMask *Notification_State_NotificationState_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Notification_State_NotificationState))
}

func (fieldMask *Notification_State_NotificationState_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Notification_State_NotificationState_ProviderData_FieldMask struct {
	Paths []NotificationStateNotificationStateProviderData_FieldPath
}

func FullNotification_State_NotificationState_ProviderData_FieldMask() *Notification_State_NotificationState_ProviderData_FieldMask {
	res := &Notification_State_NotificationState_ProviderData_FieldMask{}
	res.Paths = append(res.Paths, &NotificationStateNotificationStateProviderData_FieldTerminalPath{selector: NotificationStateNotificationStateProviderData_FieldPathSelectorSlack})
	res.Paths = append(res.Paths, &NotificationStateNotificationStateProviderData_FieldTerminalPath{selector: NotificationStateNotificationStateProviderData_FieldPathSelectorPagerDuty})
	res.Paths = append(res.Paths, &NotificationStateNotificationStateProviderData_FieldTerminalPath{selector: NotificationStateNotificationStateProviderData_FieldPathSelectorWebhook})
	return res
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseNotificationStateNotificationStateProviderData_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*NotificationStateNotificationStateProviderData_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseNotificationStateNotificationStateProviderData_FieldPath(raw)
	})
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) ProtoMessage() {}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) Subtract(other *Notification_State_NotificationState_ProviderData_FieldMask) *Notification_State_NotificationState_ProviderData_FieldMask {
	result := &Notification_State_NotificationState_ProviderData_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[NotificationStateNotificationStateProviderData_FieldPathSelector]gotenobject.FieldMask{
		NotificationStateNotificationStateProviderData_FieldPathSelectorSlack:     &Notification_State_NotificationState_ProviderData_Slack_FieldMask{},
		NotificationStateNotificationStateProviderData_FieldPathSelectorPagerDuty: &Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask{},
		NotificationStateNotificationStateProviderData_FieldPathSelectorWebhook:   &Notification_State_NotificationState_ProviderData_WebHook_FieldMask{},
	}
	mySubMasks := map[NotificationStateNotificationStateProviderData_FieldPathSelector]gotenobject.FieldMask{
		NotificationStateNotificationStateProviderData_FieldPathSelectorSlack:     &Notification_State_NotificationState_ProviderData_Slack_FieldMask{},
		NotificationStateNotificationStateProviderData_FieldPathSelectorPagerDuty: &Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask{},
		NotificationStateNotificationStateProviderData_FieldPathSelectorWebhook:   &Notification_State_NotificationState_ProviderData_WebHook_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *NotificationStateNotificationStateProviderData_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *NotificationStateNotificationStateProviderData_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*NotificationStateNotificationStateProviderData_FieldTerminalPath); ok {
					switch tp.selector {
					case NotificationStateNotificationStateProviderData_FieldPathSelectorSlack:
						mySubMasks[NotificationStateNotificationStateProviderData_FieldPathSelectorSlack] = FullNotification_State_NotificationState_ProviderData_Slack_FieldMask()
					case NotificationStateNotificationStateProviderData_FieldPathSelectorPagerDuty:
						mySubMasks[NotificationStateNotificationStateProviderData_FieldPathSelectorPagerDuty] = FullNotification_State_NotificationState_ProviderData_PagerDuty_FieldMask()
					case NotificationStateNotificationStateProviderData_FieldPathSelectorWebhook:
						mySubMasks[NotificationStateNotificationStateProviderData_FieldPathSelectorWebhook] = FullNotification_State_NotificationState_ProviderData_WebHook_FieldMask()
					}
				} else if tp, ok := path.(*NotificationStateNotificationStateProviderData_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &NotificationStateNotificationStateProviderData_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Notification_State_NotificationState_ProviderData_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) FilterInputFields() *Notification_State_NotificationState_ProviderData_FieldMask {
	result := &Notification_State_NotificationState_ProviderData_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]NotificationStateNotificationStateProviderData_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseNotificationStateNotificationStateProviderData_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Notification_State_NotificationState_ProviderData_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Notification_State_NotificationState_ProviderData_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) AppendPath(path NotificationStateNotificationStateProviderData_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(NotificationStateNotificationStateProviderData_FieldPath))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) GetPaths() []NotificationStateNotificationStateProviderData_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseNotificationStateNotificationStateProviderData_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) Set(target, source *Notification_State_NotificationState_ProviderData) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Notification_State_NotificationState_ProviderData), source.(*Notification_State_NotificationState_ProviderData))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) Project(source *Notification_State_NotificationState_ProviderData) *Notification_State_NotificationState_ProviderData {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Notification_State_NotificationState_ProviderData{}
	slackMask := &Notification_State_NotificationState_ProviderData_Slack_FieldMask{}
	wholeSlackAccepted := false
	pagerDutyMask := &Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask{}
	wholePagerDutyAccepted := false
	webhookMask := &Notification_State_NotificationState_ProviderData_WebHook_FieldMask{}
	wholeWebhookAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *NotificationStateNotificationStateProviderData_FieldTerminalPath:
			switch tp.selector {
			case NotificationStateNotificationStateProviderData_FieldPathSelectorSlack:
				result.Slack = source.Slack
				wholeSlackAccepted = true
			case NotificationStateNotificationStateProviderData_FieldPathSelectorPagerDuty:
				result.PagerDuty = source.PagerDuty
				wholePagerDutyAccepted = true
			case NotificationStateNotificationStateProviderData_FieldPathSelectorWebhook:
				result.Webhook = source.Webhook
				wholeWebhookAccepted = true
			}
		case *NotificationStateNotificationStateProviderData_FieldSubPath:
			switch tp.selector {
			case NotificationStateNotificationStateProviderData_FieldPathSelectorSlack:
				slackMask.AppendPath(tp.subPath.(NotificationStateNotificationStateProviderDataSlack_FieldPath))
			case NotificationStateNotificationStateProviderData_FieldPathSelectorPagerDuty:
				pagerDutyMask.AppendPath(tp.subPath.(NotificationStateNotificationStateProviderDataPagerDuty_FieldPath))
			case NotificationStateNotificationStateProviderData_FieldPathSelectorWebhook:
				webhookMask.AppendPath(tp.subPath.(NotificationStateNotificationStateProviderDataWebHook_FieldPath))
			}
		}
	}
	if wholeSlackAccepted == false && len(slackMask.Paths) > 0 {
		result.Slack = slackMask.Project(source.GetSlack())
	}
	if wholePagerDutyAccepted == false && len(pagerDutyMask.Paths) > 0 {
		result.PagerDuty = pagerDutyMask.Project(source.GetPagerDuty())
	}
	if wholeWebhookAccepted == false && len(webhookMask.Paths) > 0 {
		result.Webhook = webhookMask.Project(source.GetWebhook())
	}
	return result
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Notification_State_NotificationState_ProviderData))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Notification_State_NotificationState_ProviderData_Slack_FieldMask struct {
	Paths []NotificationStateNotificationStateProviderDataSlack_FieldPath
}

func FullNotification_State_NotificationState_ProviderData_Slack_FieldMask() *Notification_State_NotificationState_ProviderData_Slack_FieldMask {
	res := &Notification_State_NotificationState_ProviderData_Slack_FieldMask{}
	res.Paths = append(res.Paths, &NotificationStateNotificationStateProviderDataSlack_FieldTerminalPath{selector: NotificationStateNotificationStateProviderDataSlack_FieldPathSelectorTs})
	return res
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseNotificationStateNotificationStateProviderDataSlack_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*NotificationStateNotificationStateProviderDataSlack_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseNotificationStateNotificationStateProviderDataSlack_FieldPath(raw)
	})
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) ProtoMessage() {}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) Subtract(other *Notification_State_NotificationState_ProviderData_Slack_FieldMask) *Notification_State_NotificationState_ProviderData_Slack_FieldMask {
	result := &Notification_State_NotificationState_ProviderData_Slack_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *NotificationStateNotificationStateProviderDataSlack_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Notification_State_NotificationState_ProviderData_Slack_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) FilterInputFields() *Notification_State_NotificationState_ProviderData_Slack_FieldMask {
	result := &Notification_State_NotificationState_ProviderData_Slack_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]NotificationStateNotificationStateProviderDataSlack_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseNotificationStateNotificationStateProviderDataSlack_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Notification_State_NotificationState_ProviderData_Slack_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Notification_State_NotificationState_ProviderData_Slack_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) AppendPath(path NotificationStateNotificationStateProviderDataSlack_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(NotificationStateNotificationStateProviderDataSlack_FieldPath))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) GetPaths() []NotificationStateNotificationStateProviderDataSlack_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseNotificationStateNotificationStateProviderDataSlack_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) Set(target, source *Notification_State_NotificationState_ProviderData_Slack) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Notification_State_NotificationState_ProviderData_Slack), source.(*Notification_State_NotificationState_ProviderData_Slack))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) Project(source *Notification_State_NotificationState_ProviderData_Slack) *Notification_State_NotificationState_ProviderData_Slack {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Notification_State_NotificationState_ProviderData_Slack{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *NotificationStateNotificationStateProviderDataSlack_FieldTerminalPath:
			switch tp.selector {
			case NotificationStateNotificationStateProviderDataSlack_FieldPathSelectorTs:
				result.Ts = source.Ts
			}
		}
	}
	return result
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Notification_State_NotificationState_ProviderData_Slack))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_Slack_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask struct {
	Paths []NotificationStateNotificationStateProviderDataPagerDuty_FieldPath
}

func FullNotification_State_NotificationState_ProviderData_PagerDuty_FieldMask() *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask {
	res := &Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask{}
	res.Paths = append(res.Paths, &NotificationStateNotificationStateProviderDataPagerDuty_FieldTerminalPath{selector: NotificationStateNotificationStateProviderDataPagerDuty_FieldPathSelectorIncidentKey})
	return res
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseNotificationStateNotificationStateProviderDataPagerDuty_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*NotificationStateNotificationStateProviderDataPagerDuty_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseNotificationStateNotificationStateProviderDataPagerDuty_FieldPath(raw)
	})
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) ProtoMessage() {
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) Subtract(other *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask {
	result := &Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *NotificationStateNotificationStateProviderDataPagerDuty_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) FilterInputFields() *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask {
	result := &Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]NotificationStateNotificationStateProviderDataPagerDuty_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseNotificationStateNotificationStateProviderDataPagerDuty_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) AppendPath(path NotificationStateNotificationStateProviderDataPagerDuty_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(NotificationStateNotificationStateProviderDataPagerDuty_FieldPath))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) GetPaths() []NotificationStateNotificationStateProviderDataPagerDuty_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseNotificationStateNotificationStateProviderDataPagerDuty_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) Set(target, source *Notification_State_NotificationState_ProviderData_PagerDuty) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Notification_State_NotificationState_ProviderData_PagerDuty), source.(*Notification_State_NotificationState_ProviderData_PagerDuty))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) Project(source *Notification_State_NotificationState_ProviderData_PagerDuty) *Notification_State_NotificationState_ProviderData_PagerDuty {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Notification_State_NotificationState_ProviderData_PagerDuty{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *NotificationStateNotificationStateProviderDataPagerDuty_FieldTerminalPath:
			switch tp.selector {
			case NotificationStateNotificationStateProviderDataPagerDuty_FieldPathSelectorIncidentKey:
				result.IncidentKey = source.IncidentKey
			}
		}
	}
	return result
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Notification_State_NotificationState_ProviderData_PagerDuty))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_PagerDuty_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Notification_State_NotificationState_ProviderData_WebHook_FieldMask struct {
	Paths []NotificationStateNotificationStateProviderDataWebHook_FieldPath
}

func FullNotification_State_NotificationState_ProviderData_WebHook_FieldMask() *Notification_State_NotificationState_ProviderData_WebHook_FieldMask {
	res := &Notification_State_NotificationState_ProviderData_WebHook_FieldMask{}
	res.Paths = append(res.Paths, &NotificationStateNotificationStateProviderDataWebHook_FieldTerminalPath{selector: NotificationStateNotificationStateProviderDataWebHook_FieldPathSelectorTotalChunks})
	res.Paths = append(res.Paths, &NotificationStateNotificationStateProviderDataWebHook_FieldTerminalPath{selector: NotificationStateNotificationStateProviderDataWebHook_FieldPathSelectorFailedChunks})
	return res
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseNotificationStateNotificationStateProviderDataWebHook_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*NotificationStateNotificationStateProviderDataWebHook_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseNotificationStateNotificationStateProviderDataWebHook_FieldPath(raw)
	})
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) ProtoMessage() {
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) Subtract(other *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) *Notification_State_NotificationState_ProviderData_WebHook_FieldMask {
	result := &Notification_State_NotificationState_ProviderData_WebHook_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[NotificationStateNotificationStateProviderDataWebHook_FieldPathSelector]gotenobject.FieldMask{
		NotificationStateNotificationStateProviderDataWebHook_FieldPathSelectorFailedChunks: &Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask{},
	}
	mySubMasks := map[NotificationStateNotificationStateProviderDataWebHook_FieldPathSelector]gotenobject.FieldMask{
		NotificationStateNotificationStateProviderDataWebHook_FieldPathSelectorFailedChunks: &Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *NotificationStateNotificationStateProviderDataWebHook_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *NotificationStateNotificationStateProviderDataWebHook_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*NotificationStateNotificationStateProviderDataWebHook_FieldTerminalPath); ok {
					switch tp.selector {
					case NotificationStateNotificationStateProviderDataWebHook_FieldPathSelectorFailedChunks:
						mySubMasks[NotificationStateNotificationStateProviderDataWebHook_FieldPathSelectorFailedChunks] = FullNotification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask()
					}
				} else if tp, ok := path.(*NotificationStateNotificationStateProviderDataWebHook_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &NotificationStateNotificationStateProviderDataWebHook_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Notification_State_NotificationState_ProviderData_WebHook_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) FilterInputFields() *Notification_State_NotificationState_ProviderData_WebHook_FieldMask {
	result := &Notification_State_NotificationState_ProviderData_WebHook_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]NotificationStateNotificationStateProviderDataWebHook_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseNotificationStateNotificationStateProviderDataWebHook_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Notification_State_NotificationState_ProviderData_WebHook_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Notification_State_NotificationState_ProviderData_WebHook_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) AppendPath(path NotificationStateNotificationStateProviderDataWebHook_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(NotificationStateNotificationStateProviderDataWebHook_FieldPath))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) GetPaths() []NotificationStateNotificationStateProviderDataWebHook_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseNotificationStateNotificationStateProviderDataWebHook_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) Set(target, source *Notification_State_NotificationState_ProviderData_WebHook) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Notification_State_NotificationState_ProviderData_WebHook), source.(*Notification_State_NotificationState_ProviderData_WebHook))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) Project(source *Notification_State_NotificationState_ProviderData_WebHook) *Notification_State_NotificationState_ProviderData_WebHook {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Notification_State_NotificationState_ProviderData_WebHook{}
	failedChunksMask := &Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask{}
	wholeFailedChunksAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *NotificationStateNotificationStateProviderDataWebHook_FieldTerminalPath:
			switch tp.selector {
			case NotificationStateNotificationStateProviderDataWebHook_FieldPathSelectorTotalChunks:
				result.TotalChunks = source.TotalChunks
			case NotificationStateNotificationStateProviderDataWebHook_FieldPathSelectorFailedChunks:
				result.FailedChunks = source.FailedChunks
				wholeFailedChunksAccepted = true
			}
		case *NotificationStateNotificationStateProviderDataWebHook_FieldSubPath:
			switch tp.selector {
			case NotificationStateNotificationStateProviderDataWebHook_FieldPathSelectorFailedChunks:
				failedChunksMask.AppendPath(tp.subPath.(NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPath))
			}
		}
	}
	if wholeFailedChunksAccepted == false && len(failedChunksMask.Paths) > 0 {
		for _, sourceItem := range source.GetFailedChunks() {
			result.FailedChunks = append(result.FailedChunks, failedChunksMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Notification_State_NotificationState_ProviderData_WebHook))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask struct {
	Paths []NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPath
}

func FullNotification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask() *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask {
	res := &Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask{}
	res.Paths = append(res.Paths, &NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldTerminalPath{selector: NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPathSelectorAlertOffset})
	res.Paths = append(res.Paths, &NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldTerminalPath{selector: NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPathSelectorError})
	return res
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseNotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseNotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPath(raw)
	})
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) ProtoMessage() {
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) Subtract(other *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask {
	result := &Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) FilterInputFields() *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask {
	result := &Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseNotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) AppendPath(path NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPath))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) GetPaths() []NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseNotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) Set(target, source *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks), source.(*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) Project(source *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks) *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Notification_State_NotificationState_ProviderData_WebHook_FailedChunks{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldTerminalPath:
			switch tp.selector {
			case NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPathSelectorAlertOffset:
				result.AlertOffset = source.AlertOffset
			case NotificationStateNotificationStateProviderDataWebHookFailedChunks_FieldPathSelectorError:
				result.Error = source.Error
			}
		}
	}
	return result
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Notification_State_NotificationState_ProviderData_WebHook_FailedChunks))
}

func (fieldMask *Notification_State_NotificationState_ProviderData_WebHook_FailedChunks_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
