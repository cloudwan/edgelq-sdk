// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v4/time_serie.proto
// DO NOT EDIT!!!

package time_serie

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	metric_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/metric_descriptor"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &common.LabelDescriptor{}
	_ = &metric_descriptor.MetricDescriptor{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Point_FieldPath interface {
	gotenobject.FieldPath
	Selector() Point_FieldPathSelector
	Get(source *Point) []interface{}
	GetSingle(source *Point) (interface{}, bool)
	ClearValue(item *Point)

	// Those methods build corresponding Point_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Point_FieldPathValue
	WithIArrayOfValues(values interface{}) Point_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Point_FieldPathArrayItemValue
}

type Point_FieldPathSelector int32

const (
	Point_FieldPathSelectorInterval    Point_FieldPathSelector = 0
	Point_FieldPathSelectorValue       Point_FieldPathSelector = 1
	Point_FieldPathSelectorAggregation Point_FieldPathSelector = 2
)

func (s Point_FieldPathSelector) String() string {
	switch s {
	case Point_FieldPathSelectorInterval:
		return "interval"
	case Point_FieldPathSelectorValue:
		return "value"
	case Point_FieldPathSelectorAggregation:
		return "aggregation"
	default:
		panic(fmt.Sprintf("Invalid selector for Point: %d", s))
	}
}

func BuildPoint_FieldPath(fp gotenobject.RawFieldPath) (Point_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Point")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "interval":
			return &Point_FieldTerminalPath{selector: Point_FieldPathSelectorInterval}, nil
		case "value":
			return &Point_FieldTerminalPath{selector: Point_FieldPathSelectorValue}, nil
		case "aggregation":
			return &Point_FieldTerminalPath{selector: Point_FieldPathSelectorAggregation}, nil
		}
	} else {
		switch fp[0] {
		case "interval":
			if subpath, err := common.BuildTimeInterval_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Point_FieldSubPath{selector: Point_FieldPathSelectorInterval, subPath: subpath}, nil
			}
		case "value":
			if subpath, err := common.BuildTypedValue_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Point_FieldSubPath{selector: Point_FieldPathSelectorValue, subPath: subpath}, nil
			}
		case "aggregation":
			if subpath, err := common.BuildAggregation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Point_FieldSubPath{selector: Point_FieldPathSelectorAggregation, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Point", fp)
}

func ParsePoint_FieldPath(rawField string) (Point_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPoint_FieldPath(fp)
}

func MustParsePoint_FieldPath(rawField string) Point_FieldPath {
	fp, err := ParsePoint_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Point_FieldTerminalPath struct {
	selector Point_FieldPathSelector
}

var _ Point_FieldPath = (*Point_FieldTerminalPath)(nil)

func (fp *Point_FieldTerminalPath) Selector() Point_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Point_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Point_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Point
func (fp *Point_FieldTerminalPath) Get(source *Point) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Point_FieldPathSelectorInterval:
			if source.Interval != nil {
				values = append(values, source.Interval)
			}
		case Point_FieldPathSelectorValue:
			if source.Value != nil {
				values = append(values, source.Value)
			}
		case Point_FieldPathSelectorAggregation:
			if source.Aggregation != nil {
				values = append(values, source.Aggregation)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Point: %d", fp.selector))
		}
	}
	return
}

func (fp *Point_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Point))
}

// GetSingle returns value pointed by specific field of from source Point
func (fp *Point_FieldTerminalPath) GetSingle(source *Point) (interface{}, bool) {
	switch fp.selector {
	case Point_FieldPathSelectorInterval:
		res := source.GetInterval()
		return res, res != nil
	case Point_FieldPathSelectorValue:
		res := source.GetValue()
		return res, res != nil
	case Point_FieldPathSelectorAggregation:
		res := source.GetAggregation()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Point: %d", fp.selector))
	}
}

func (fp *Point_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Point))
}

// GetDefault returns a default value of the field type
func (fp *Point_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Point_FieldPathSelectorInterval:
		return (*common.TimeInterval)(nil)
	case Point_FieldPathSelectorValue:
		return (*common.TypedValue)(nil)
	case Point_FieldPathSelectorAggregation:
		return (*common.Aggregation)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Point: %d", fp.selector))
	}
}

func (fp *Point_FieldTerminalPath) ClearValue(item *Point) {
	if item != nil {
		switch fp.selector {
		case Point_FieldPathSelectorInterval:
			item.Interval = nil
		case Point_FieldPathSelectorValue:
			item.Value = nil
		case Point_FieldPathSelectorAggregation:
			item.Aggregation = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Point: %d", fp.selector))
		}
	}
}

func (fp *Point_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Point))
}

// IsLeaf - whether field path is holds simple value
func (fp *Point_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *Point_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Point_FieldTerminalPath) WithIValue(value interface{}) Point_FieldPathValue {
	switch fp.selector {
	case Point_FieldPathSelectorInterval:
		return &Point_FieldTerminalPathValue{Point_FieldTerminalPath: *fp, value: value.(*common.TimeInterval)}
	case Point_FieldPathSelectorValue:
		return &Point_FieldTerminalPathValue{Point_FieldTerminalPath: *fp, value: value.(*common.TypedValue)}
	case Point_FieldPathSelectorAggregation:
		return &Point_FieldTerminalPathValue{Point_FieldTerminalPath: *fp, value: value.(*common.Aggregation)}
	default:
		panic(fmt.Sprintf("Invalid selector for Point: %d", fp.selector))
	}
}

func (fp *Point_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Point_FieldTerminalPath) WithIArrayOfValues(values interface{}) Point_FieldPathArrayOfValues {
	fpaov := &Point_FieldTerminalPathArrayOfValues{Point_FieldTerminalPath: *fp}
	switch fp.selector {
	case Point_FieldPathSelectorInterval:
		return &Point_FieldTerminalPathArrayOfValues{Point_FieldTerminalPath: *fp, values: values.([]*common.TimeInterval)}
	case Point_FieldPathSelectorValue:
		return &Point_FieldTerminalPathArrayOfValues{Point_FieldTerminalPath: *fp, values: values.([]*common.TypedValue)}
	case Point_FieldPathSelectorAggregation:
		return &Point_FieldTerminalPathArrayOfValues{Point_FieldTerminalPath: *fp, values: values.([]*common.Aggregation)}
	default:
		panic(fmt.Sprintf("Invalid selector for Point: %d", fp.selector))
	}
	return fpaov
}

func (fp *Point_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Point_FieldTerminalPath) WithIArrayItemValue(value interface{}) Point_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Point: %d", fp.selector))
	}
}

func (fp *Point_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Point_FieldSubPath struct {
	selector Point_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Point_FieldPath = (*Point_FieldSubPath)(nil)

func (fps *Point_FieldSubPath) Selector() Point_FieldPathSelector {
	return fps.selector
}
func (fps *Point_FieldSubPath) AsIntervalSubPath() (common.TimeInterval_FieldPath, bool) {
	res, ok := fps.subPath.(common.TimeInterval_FieldPath)
	return res, ok
}
func (fps *Point_FieldSubPath) AsValueSubPath() (common.TypedValue_FieldPath, bool) {
	res, ok := fps.subPath.(common.TypedValue_FieldPath)
	return res, ok
}
func (fps *Point_FieldSubPath) AsAggregationSubPath() (common.Aggregation_FieldPath, bool) {
	res, ok := fps.subPath.(common.Aggregation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Point_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Point_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Point
func (fps *Point_FieldSubPath) Get(source *Point) (values []interface{}) {
	switch fps.selector {
	case Point_FieldPathSelectorInterval:
		values = append(values, fps.subPath.GetRaw(source.GetInterval())...)
	case Point_FieldPathSelectorValue:
		values = append(values, fps.subPath.GetRaw(source.GetValue())...)
	case Point_FieldPathSelectorAggregation:
		values = append(values, fps.subPath.GetRaw(source.GetAggregation())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Point: %d", fps.selector))
	}
	return
}

func (fps *Point_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Point))
}

// GetSingle returns value of selected field from source Point
func (fps *Point_FieldSubPath) GetSingle(source *Point) (interface{}, bool) {
	switch fps.selector {
	case Point_FieldPathSelectorInterval:
		if source.GetInterval() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetInterval())
	case Point_FieldPathSelectorValue:
		if source.GetValue() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetValue())
	case Point_FieldPathSelectorAggregation:
		if source.GetAggregation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAggregation())
	default:
		panic(fmt.Sprintf("Invalid selector for Point: %d", fps.selector))
	}
}

func (fps *Point_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Point))
}

// GetDefault returns a default value of the field type
func (fps *Point_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Point_FieldSubPath) ClearValue(item *Point) {
	if item != nil {
		switch fps.selector {
		case Point_FieldPathSelectorInterval:
			fps.subPath.ClearValueRaw(item.Interval)
		case Point_FieldPathSelectorValue:
			fps.subPath.ClearValueRaw(item.Value)
		case Point_FieldPathSelectorAggregation:
			fps.subPath.ClearValueRaw(item.Aggregation)
		default:
			panic(fmt.Sprintf("Invalid selector for Point: %d", fps.selector))
		}
	}
}

func (fps *Point_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Point))
}

// IsLeaf - whether field path is holds simple value
func (fps *Point_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Point_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Point_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Point_FieldSubPath) WithIValue(value interface{}) Point_FieldPathValue {
	return &Point_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Point_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Point_FieldSubPath) WithIArrayOfValues(values interface{}) Point_FieldPathArrayOfValues {
	return &Point_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Point_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Point_FieldSubPath) WithIArrayItemValue(value interface{}) Point_FieldPathArrayItemValue {
	return &Point_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Point_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Point_FieldPathValue allows storing values for Point fields according to their type
type Point_FieldPathValue interface {
	Point_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Point)
	CompareWith(*Point) (cmp int, comparable bool)
}

func ParsePoint_FieldPathValue(pathStr, valueStr string) (Point_FieldPathValue, error) {
	fp, err := ParsePoint_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Point field path value from %s: %v", valueStr, err)
	}
	return fpv.(Point_FieldPathValue), nil
}

func MustParsePoint_FieldPathValue(pathStr, valueStr string) Point_FieldPathValue {
	fpv, err := ParsePoint_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Point_FieldTerminalPathValue struct {
	Point_FieldTerminalPath
	value interface{}
}

var _ Point_FieldPathValue = (*Point_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Point' as interface{}
func (fpv *Point_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Point_FieldTerminalPathValue) AsIntervalValue() (*common.TimeInterval, bool) {
	res, ok := fpv.value.(*common.TimeInterval)
	return res, ok
}
func (fpv *Point_FieldTerminalPathValue) AsValueValue() (*common.TypedValue, bool) {
	res, ok := fpv.value.(*common.TypedValue)
	return res, ok
}
func (fpv *Point_FieldTerminalPathValue) AsAggregationValue() (*common.Aggregation, bool) {
	res, ok := fpv.value.(*common.Aggregation)
	return res, ok
}

// SetTo stores value for selected field for object Point
func (fpv *Point_FieldTerminalPathValue) SetTo(target **Point) {
	if *target == nil {
		*target = new(Point)
	}
	switch fpv.selector {
	case Point_FieldPathSelectorInterval:
		(*target).Interval = fpv.value.(*common.TimeInterval)
	case Point_FieldPathSelectorValue:
		(*target).Value = fpv.value.(*common.TypedValue)
	case Point_FieldPathSelectorAggregation:
		(*target).Aggregation = fpv.value.(*common.Aggregation)
	default:
		panic(fmt.Sprintf("Invalid selector for Point: %d", fpv.selector))
	}
}

func (fpv *Point_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Point)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Point_FieldTerminalPathValue' with the value under path in 'Point'.
func (fpv *Point_FieldTerminalPathValue) CompareWith(source *Point) (int, bool) {
	switch fpv.selector {
	case Point_FieldPathSelectorInterval:
		return 0, false
	case Point_FieldPathSelectorValue:
		return 0, false
	case Point_FieldPathSelectorAggregation:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Point: %d", fpv.selector))
	}
}

func (fpv *Point_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Point))
}

type Point_FieldSubPathValue struct {
	Point_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Point_FieldPathValue = (*Point_FieldSubPathValue)(nil)

func (fpvs *Point_FieldSubPathValue) AsIntervalPathValue() (common.TimeInterval_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.TimeInterval_FieldPathValue)
	return res, ok
}
func (fpvs *Point_FieldSubPathValue) AsValuePathValue() (common.TypedValue_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.TypedValue_FieldPathValue)
	return res, ok
}
func (fpvs *Point_FieldSubPathValue) AsAggregationPathValue() (common.Aggregation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Aggregation_FieldPathValue)
	return res, ok
}

func (fpvs *Point_FieldSubPathValue) SetTo(target **Point) {
	if *target == nil {
		*target = new(Point)
	}
	switch fpvs.Selector() {
	case Point_FieldPathSelectorInterval:
		fpvs.subPathValue.(common.TimeInterval_FieldPathValue).SetTo(&(*target).Interval)
	case Point_FieldPathSelectorValue:
		fpvs.subPathValue.(common.TypedValue_FieldPathValue).SetTo(&(*target).Value)
	case Point_FieldPathSelectorAggregation:
		fpvs.subPathValue.(common.Aggregation_FieldPathValue).SetTo(&(*target).Aggregation)
	default:
		panic(fmt.Sprintf("Invalid selector for Point: %d", fpvs.Selector()))
	}
}

func (fpvs *Point_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Point)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Point_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Point_FieldSubPathValue) CompareWith(source *Point) (int, bool) {
	switch fpvs.Selector() {
	case Point_FieldPathSelectorInterval:
		return fpvs.subPathValue.(common.TimeInterval_FieldPathValue).CompareWith(source.GetInterval())
	case Point_FieldPathSelectorValue:
		return fpvs.subPathValue.(common.TypedValue_FieldPathValue).CompareWith(source.GetValue())
	case Point_FieldPathSelectorAggregation:
		return fpvs.subPathValue.(common.Aggregation_FieldPathValue).CompareWith(source.GetAggregation())
	default:
		panic(fmt.Sprintf("Invalid selector for Point: %d", fpvs.Selector()))
	}
}

func (fpvs *Point_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Point))
}

// Point_FieldPathArrayItemValue allows storing single item in Path-specific values for Point according to their type
// Present only for array (repeated) types.
type Point_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Point_FieldPath
	ContainsValue(*Point) bool
}

// ParsePoint_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePoint_FieldPathArrayItemValue(pathStr, valueStr string) (Point_FieldPathArrayItemValue, error) {
	fp, err := ParsePoint_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Point field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Point_FieldPathArrayItemValue), nil
}

func MustParsePoint_FieldPathArrayItemValue(pathStr, valueStr string) Point_FieldPathArrayItemValue {
	fpaiv, err := ParsePoint_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Point_FieldTerminalPathArrayItemValue struct {
	Point_FieldTerminalPath
	value interface{}
}

var _ Point_FieldPathArrayItemValue = (*Point_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Point as interface{}
func (fpaiv *Point_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Point_FieldTerminalPathArrayItemValue) GetSingle(source *Point) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Point_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Point))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Point'
func (fpaiv *Point_FieldTerminalPathArrayItemValue) ContainsValue(source *Point) bool {
	slice := fpaiv.Point_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Point_FieldSubPathArrayItemValue struct {
	Point_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Point_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Point_FieldSubPathArrayItemValue) AsIntervalPathItemValue() (common.TimeInterval_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.TimeInterval_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Point_FieldSubPathArrayItemValue) AsValuePathItemValue() (common.TypedValue_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.TypedValue_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Point_FieldSubPathArrayItemValue) AsAggregationPathItemValue() (common.Aggregation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Aggregation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Point'
func (fpaivs *Point_FieldSubPathArrayItemValue) ContainsValue(source *Point) bool {
	switch fpaivs.Selector() {
	case Point_FieldPathSelectorInterval:
		return fpaivs.subPathItemValue.(common.TimeInterval_FieldPathArrayItemValue).ContainsValue(source.GetInterval())
	case Point_FieldPathSelectorValue:
		return fpaivs.subPathItemValue.(common.TypedValue_FieldPathArrayItemValue).ContainsValue(source.GetValue())
	case Point_FieldPathSelectorAggregation:
		return fpaivs.subPathItemValue.(common.Aggregation_FieldPathArrayItemValue).ContainsValue(source.GetAggregation())
	default:
		panic(fmt.Sprintf("Invalid selector for Point: %d", fpaivs.Selector()))
	}
}

// Point_FieldPathArrayOfValues allows storing slice of values for Point fields according to their type
type Point_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Point_FieldPath
}

func ParsePoint_FieldPathArrayOfValues(pathStr, valuesStr string) (Point_FieldPathArrayOfValues, error) {
	fp, err := ParsePoint_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Point field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Point_FieldPathArrayOfValues), nil
}

func MustParsePoint_FieldPathArrayOfValues(pathStr, valuesStr string) Point_FieldPathArrayOfValues {
	fpaov, err := ParsePoint_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Point_FieldTerminalPathArrayOfValues struct {
	Point_FieldTerminalPath
	values interface{}
}

var _ Point_FieldPathArrayOfValues = (*Point_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Point_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Point_FieldPathSelectorInterval:
		for _, v := range fpaov.values.([]*common.TimeInterval) {
			values = append(values, v)
		}
	case Point_FieldPathSelectorValue:
		for _, v := range fpaov.values.([]*common.TypedValue) {
			values = append(values, v)
		}
	case Point_FieldPathSelectorAggregation:
		for _, v := range fpaov.values.([]*common.Aggregation) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Point_FieldTerminalPathArrayOfValues) AsIntervalArrayOfValues() ([]*common.TimeInterval, bool) {
	res, ok := fpaov.values.([]*common.TimeInterval)
	return res, ok
}
func (fpaov *Point_FieldTerminalPathArrayOfValues) AsValueArrayOfValues() ([]*common.TypedValue, bool) {
	res, ok := fpaov.values.([]*common.TypedValue)
	return res, ok
}
func (fpaov *Point_FieldTerminalPathArrayOfValues) AsAggregationArrayOfValues() ([]*common.Aggregation, bool) {
	res, ok := fpaov.values.([]*common.Aggregation)
	return res, ok
}

type Point_FieldSubPathArrayOfValues struct {
	Point_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Point_FieldPathArrayOfValues = (*Point_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Point_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Point_FieldSubPathArrayOfValues) AsIntervalPathArrayOfValues() (common.TimeInterval_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.TimeInterval_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Point_FieldSubPathArrayOfValues) AsValuePathArrayOfValues() (common.TypedValue_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.TypedValue_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Point_FieldSubPathArrayOfValues) AsAggregationPathArrayOfValues() (common.Aggregation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Aggregation_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TimeSerie_FieldPath interface {
	gotenobject.FieldPath
	Selector() TimeSerie_FieldPathSelector
	Get(source *TimeSerie) []interface{}
	GetSingle(source *TimeSerie) (interface{}, bool)
	ClearValue(item *TimeSerie)

	// Those methods build corresponding TimeSerie_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TimeSerie_FieldPathValue
	WithIArrayOfValues(values interface{}) TimeSerie_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TimeSerie_FieldPathArrayItemValue
}

type TimeSerie_FieldPathSelector int32

const (
	TimeSerie_FieldPathSelectorKey        TimeSerie_FieldPathSelector = 0
	TimeSerie_FieldPathSelectorProject    TimeSerie_FieldPathSelector = 1
	TimeSerie_FieldPathSelectorRegion     TimeSerie_FieldPathSelector = 2
	TimeSerie_FieldPathSelectorUnit       TimeSerie_FieldPathSelector = 3
	TimeSerie_FieldPathSelectorMetric     TimeSerie_FieldPathSelector = 4
	TimeSerie_FieldPathSelectorResource   TimeSerie_FieldPathSelector = 5
	TimeSerie_FieldPathSelectorMetricKind TimeSerie_FieldPathSelector = 6
	TimeSerie_FieldPathSelectorValueType  TimeSerie_FieldPathSelector = 7
	TimeSerie_FieldPathSelectorPoints     TimeSerie_FieldPathSelector = 8
)

func (s TimeSerie_FieldPathSelector) String() string {
	switch s {
	case TimeSerie_FieldPathSelectorKey:
		return "key"
	case TimeSerie_FieldPathSelectorProject:
		return "project"
	case TimeSerie_FieldPathSelectorRegion:
		return "region"
	case TimeSerie_FieldPathSelectorUnit:
		return "unit"
	case TimeSerie_FieldPathSelectorMetric:
		return "metric"
	case TimeSerie_FieldPathSelectorResource:
		return "resource"
	case TimeSerie_FieldPathSelectorMetricKind:
		return "metric_kind"
	case TimeSerie_FieldPathSelectorValueType:
		return "value_type"
	case TimeSerie_FieldPathSelectorPoints:
		return "points"
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", s))
	}
}

func BuildTimeSerie_FieldPath(fp gotenobject.RawFieldPath) (TimeSerie_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object TimeSerie")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "key":
			return &TimeSerie_FieldTerminalPath{selector: TimeSerie_FieldPathSelectorKey}, nil
		case "project":
			return &TimeSerie_FieldTerminalPath{selector: TimeSerie_FieldPathSelectorProject}, nil
		case "region":
			return &TimeSerie_FieldTerminalPath{selector: TimeSerie_FieldPathSelectorRegion}, nil
		case "unit":
			return &TimeSerie_FieldTerminalPath{selector: TimeSerie_FieldPathSelectorUnit}, nil
		case "metric":
			return &TimeSerie_FieldTerminalPath{selector: TimeSerie_FieldPathSelectorMetric}, nil
		case "resource":
			return &TimeSerie_FieldTerminalPath{selector: TimeSerie_FieldPathSelectorResource}, nil
		case "metric_kind", "metricKind", "metric-kind":
			return &TimeSerie_FieldTerminalPath{selector: TimeSerie_FieldPathSelectorMetricKind}, nil
		case "value_type", "valueType", "value-type":
			return &TimeSerie_FieldTerminalPath{selector: TimeSerie_FieldPathSelectorValueType}, nil
		case "points":
			return &TimeSerie_FieldTerminalPath{selector: TimeSerie_FieldPathSelectorPoints}, nil
		}
	} else {
		switch fp[0] {
		case "metric":
			if subpath, err := common.BuildMetric_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TimeSerie_FieldSubPath{selector: TimeSerie_FieldPathSelectorMetric, subPath: subpath}, nil
			}
		case "resource":
			if subpath, err := common.BuildMonitoredResource_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TimeSerie_FieldSubPath{selector: TimeSerie_FieldPathSelectorResource, subPath: subpath}, nil
			}
		case "points":
			if subpath, err := BuildPoint_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &TimeSerie_FieldSubPath{selector: TimeSerie_FieldPathSelectorPoints, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object TimeSerie", fp)
}

func ParseTimeSerie_FieldPath(rawField string) (TimeSerie_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTimeSerie_FieldPath(fp)
}

func MustParseTimeSerie_FieldPath(rawField string) TimeSerie_FieldPath {
	fp, err := ParseTimeSerie_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TimeSerie_FieldTerminalPath struct {
	selector TimeSerie_FieldPathSelector
}

var _ TimeSerie_FieldPath = (*TimeSerie_FieldTerminalPath)(nil)

func (fp *TimeSerie_FieldTerminalPath) Selector() TimeSerie_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TimeSerie_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TimeSerie_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source TimeSerie
func (fp *TimeSerie_FieldTerminalPath) Get(source *TimeSerie) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TimeSerie_FieldPathSelectorKey:
			values = append(values, source.Key)
		case TimeSerie_FieldPathSelectorProject:
			values = append(values, source.Project)
		case TimeSerie_FieldPathSelectorRegion:
			values = append(values, source.Region)
		case TimeSerie_FieldPathSelectorUnit:
			values = append(values, source.Unit)
		case TimeSerie_FieldPathSelectorMetric:
			if source.Metric != nil {
				values = append(values, source.Metric)
			}
		case TimeSerie_FieldPathSelectorResource:
			if source.Resource != nil {
				values = append(values, source.Resource)
			}
		case TimeSerie_FieldPathSelectorMetricKind:
			values = append(values, source.MetricKind)
		case TimeSerie_FieldPathSelectorValueType:
			values = append(values, source.ValueType)
		case TimeSerie_FieldPathSelectorPoints:
			for _, value := range source.GetPoints() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fp.selector))
		}
	}
	return
}

func (fp *TimeSerie_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*TimeSerie))
}

// GetSingle returns value pointed by specific field of from source TimeSerie
func (fp *TimeSerie_FieldTerminalPath) GetSingle(source *TimeSerie) (interface{}, bool) {
	switch fp.selector {
	case TimeSerie_FieldPathSelectorKey:
		res := source.GetKey()
		return res, res != nil
	case TimeSerie_FieldPathSelectorProject:
		return source.GetProject(), source != nil
	case TimeSerie_FieldPathSelectorRegion:
		return source.GetRegion(), source != nil
	case TimeSerie_FieldPathSelectorUnit:
		return source.GetUnit(), source != nil
	case TimeSerie_FieldPathSelectorMetric:
		res := source.GetMetric()
		return res, res != nil
	case TimeSerie_FieldPathSelectorResource:
		res := source.GetResource()
		return res, res != nil
	case TimeSerie_FieldPathSelectorMetricKind:
		return source.GetMetricKind(), source != nil
	case TimeSerie_FieldPathSelectorValueType:
		return source.GetValueType(), source != nil
	case TimeSerie_FieldPathSelectorPoints:
		res := source.GetPoints()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fp.selector))
	}
}

func (fp *TimeSerie_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*TimeSerie))
}

// GetDefault returns a default value of the field type
func (fp *TimeSerie_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TimeSerie_FieldPathSelectorKey:
		return ([]byte)(nil)
	case TimeSerie_FieldPathSelectorProject:
		return ""
	case TimeSerie_FieldPathSelectorRegion:
		return ""
	case TimeSerie_FieldPathSelectorUnit:
		return ""
	case TimeSerie_FieldPathSelectorMetric:
		return (*common.Metric)(nil)
	case TimeSerie_FieldPathSelectorResource:
		return (*common.MonitoredResource)(nil)
	case TimeSerie_FieldPathSelectorMetricKind:
		return metric_descriptor.MetricDescriptor_METRIC_KIND_UNSPECIFIED
	case TimeSerie_FieldPathSelectorValueType:
		return metric_descriptor.MetricDescriptor_VALUE_TYPE_UNSPECIFIED
	case TimeSerie_FieldPathSelectorPoints:
		return ([]*Point)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fp.selector))
	}
}

func (fp *TimeSerie_FieldTerminalPath) ClearValue(item *TimeSerie) {
	if item != nil {
		switch fp.selector {
		case TimeSerie_FieldPathSelectorKey:
			item.Key = nil
		case TimeSerie_FieldPathSelectorProject:
			item.Project = ""
		case TimeSerie_FieldPathSelectorRegion:
			item.Region = ""
		case TimeSerie_FieldPathSelectorUnit:
			item.Unit = ""
		case TimeSerie_FieldPathSelectorMetric:
			item.Metric = nil
		case TimeSerie_FieldPathSelectorResource:
			item.Resource = nil
		case TimeSerie_FieldPathSelectorMetricKind:
			item.MetricKind = metric_descriptor.MetricDescriptor_METRIC_KIND_UNSPECIFIED
		case TimeSerie_FieldPathSelectorValueType:
			item.ValueType = metric_descriptor.MetricDescriptor_VALUE_TYPE_UNSPECIFIED
		case TimeSerie_FieldPathSelectorPoints:
			item.Points = nil
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fp.selector))
		}
	}
}

func (fp *TimeSerie_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*TimeSerie))
}

// IsLeaf - whether field path is holds simple value
func (fp *TimeSerie_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TimeSerie_FieldPathSelectorKey ||
		fp.selector == TimeSerie_FieldPathSelectorProject ||
		fp.selector == TimeSerie_FieldPathSelectorRegion ||
		fp.selector == TimeSerie_FieldPathSelectorUnit ||
		fp.selector == TimeSerie_FieldPathSelectorMetricKind ||
		fp.selector == TimeSerie_FieldPathSelectorValueType
}

func (fp *TimeSerie_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *TimeSerie_FieldTerminalPath) WithIValue(value interface{}) TimeSerie_FieldPathValue {
	switch fp.selector {
	case TimeSerie_FieldPathSelectorKey:
		return &TimeSerie_FieldTerminalPathValue{TimeSerie_FieldTerminalPath: *fp, value: value.([]byte)}
	case TimeSerie_FieldPathSelectorProject:
		return &TimeSerie_FieldTerminalPathValue{TimeSerie_FieldTerminalPath: *fp, value: value.(string)}
	case TimeSerie_FieldPathSelectorRegion:
		return &TimeSerie_FieldTerminalPathValue{TimeSerie_FieldTerminalPath: *fp, value: value.(string)}
	case TimeSerie_FieldPathSelectorUnit:
		return &TimeSerie_FieldTerminalPathValue{TimeSerie_FieldTerminalPath: *fp, value: value.(string)}
	case TimeSerie_FieldPathSelectorMetric:
		return &TimeSerie_FieldTerminalPathValue{TimeSerie_FieldTerminalPath: *fp, value: value.(*common.Metric)}
	case TimeSerie_FieldPathSelectorResource:
		return &TimeSerie_FieldTerminalPathValue{TimeSerie_FieldTerminalPath: *fp, value: value.(*common.MonitoredResource)}
	case TimeSerie_FieldPathSelectorMetricKind:
		return &TimeSerie_FieldTerminalPathValue{TimeSerie_FieldTerminalPath: *fp, value: value.(metric_descriptor.MetricDescriptor_MetricKind)}
	case TimeSerie_FieldPathSelectorValueType:
		return &TimeSerie_FieldTerminalPathValue{TimeSerie_FieldTerminalPath: *fp, value: value.(metric_descriptor.MetricDescriptor_ValueType)}
	case TimeSerie_FieldPathSelectorPoints:
		return &TimeSerie_FieldTerminalPathValue{TimeSerie_FieldTerminalPath: *fp, value: value.([]*Point)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fp.selector))
	}
}

func (fp *TimeSerie_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TimeSerie_FieldTerminalPath) WithIArrayOfValues(values interface{}) TimeSerie_FieldPathArrayOfValues {
	fpaov := &TimeSerie_FieldTerminalPathArrayOfValues{TimeSerie_FieldTerminalPath: *fp}
	switch fp.selector {
	case TimeSerie_FieldPathSelectorKey:
		return &TimeSerie_FieldTerminalPathArrayOfValues{TimeSerie_FieldTerminalPath: *fp, values: values.([][]byte)}
	case TimeSerie_FieldPathSelectorProject:
		return &TimeSerie_FieldTerminalPathArrayOfValues{TimeSerie_FieldTerminalPath: *fp, values: values.([]string)}
	case TimeSerie_FieldPathSelectorRegion:
		return &TimeSerie_FieldTerminalPathArrayOfValues{TimeSerie_FieldTerminalPath: *fp, values: values.([]string)}
	case TimeSerie_FieldPathSelectorUnit:
		return &TimeSerie_FieldTerminalPathArrayOfValues{TimeSerie_FieldTerminalPath: *fp, values: values.([]string)}
	case TimeSerie_FieldPathSelectorMetric:
		return &TimeSerie_FieldTerminalPathArrayOfValues{TimeSerie_FieldTerminalPath: *fp, values: values.([]*common.Metric)}
	case TimeSerie_FieldPathSelectorResource:
		return &TimeSerie_FieldTerminalPathArrayOfValues{TimeSerie_FieldTerminalPath: *fp, values: values.([]*common.MonitoredResource)}
	case TimeSerie_FieldPathSelectorMetricKind:
		return &TimeSerie_FieldTerminalPathArrayOfValues{TimeSerie_FieldTerminalPath: *fp, values: values.([]metric_descriptor.MetricDescriptor_MetricKind)}
	case TimeSerie_FieldPathSelectorValueType:
		return &TimeSerie_FieldTerminalPathArrayOfValues{TimeSerie_FieldTerminalPath: *fp, values: values.([]metric_descriptor.MetricDescriptor_ValueType)}
	case TimeSerie_FieldPathSelectorPoints:
		return &TimeSerie_FieldTerminalPathArrayOfValues{TimeSerie_FieldTerminalPath: *fp, values: values.([][]*Point)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fp.selector))
	}
	return fpaov
}

func (fp *TimeSerie_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TimeSerie_FieldTerminalPath) WithIArrayItemValue(value interface{}) TimeSerie_FieldPathArrayItemValue {
	switch fp.selector {
	case TimeSerie_FieldPathSelectorPoints:
		return &TimeSerie_FieldTerminalPathArrayItemValue{TimeSerie_FieldTerminalPath: *fp, value: value.(*Point)}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fp.selector))
	}
}

func (fp *TimeSerie_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type TimeSerie_FieldSubPath struct {
	selector TimeSerie_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ TimeSerie_FieldPath = (*TimeSerie_FieldSubPath)(nil)

func (fps *TimeSerie_FieldSubPath) Selector() TimeSerie_FieldPathSelector {
	return fps.selector
}
func (fps *TimeSerie_FieldSubPath) AsMetricSubPath() (common.Metric_FieldPath, bool) {
	res, ok := fps.subPath.(common.Metric_FieldPath)
	return res, ok
}
func (fps *TimeSerie_FieldSubPath) AsResourceSubPath() (common.MonitoredResource_FieldPath, bool) {
	res, ok := fps.subPath.(common.MonitoredResource_FieldPath)
	return res, ok
}
func (fps *TimeSerie_FieldSubPath) AsPointsSubPath() (Point_FieldPath, bool) {
	res, ok := fps.subPath.(Point_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *TimeSerie_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *TimeSerie_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source TimeSerie
func (fps *TimeSerie_FieldSubPath) Get(source *TimeSerie) (values []interface{}) {
	switch fps.selector {
	case TimeSerie_FieldPathSelectorMetric:
		values = append(values, fps.subPath.GetRaw(source.GetMetric())...)
	case TimeSerie_FieldPathSelectorResource:
		values = append(values, fps.subPath.GetRaw(source.GetResource())...)
	case TimeSerie_FieldPathSelectorPoints:
		for _, item := range source.GetPoints() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fps.selector))
	}
	return
}

func (fps *TimeSerie_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*TimeSerie))
}

// GetSingle returns value of selected field from source TimeSerie
func (fps *TimeSerie_FieldSubPath) GetSingle(source *TimeSerie) (interface{}, bool) {
	switch fps.selector {
	case TimeSerie_FieldPathSelectorMetric:
		if source.GetMetric() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetric())
	case TimeSerie_FieldPathSelectorResource:
		if source.GetResource() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResource())
	case TimeSerie_FieldPathSelectorPoints:
		if len(source.GetPoints()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPoints()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fps.selector))
	}
}

func (fps *TimeSerie_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*TimeSerie))
}

// GetDefault returns a default value of the field type
func (fps *TimeSerie_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *TimeSerie_FieldSubPath) ClearValue(item *TimeSerie) {
	if item != nil {
		switch fps.selector {
		case TimeSerie_FieldPathSelectorMetric:
			fps.subPath.ClearValueRaw(item.Metric)
		case TimeSerie_FieldPathSelectorResource:
			fps.subPath.ClearValueRaw(item.Resource)
		case TimeSerie_FieldPathSelectorPoints:
			for _, subItem := range item.Points {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fps.selector))
		}
	}
}

func (fps *TimeSerie_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*TimeSerie))
}

// IsLeaf - whether field path is holds simple value
func (fps *TimeSerie_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *TimeSerie_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&TimeSerie_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *TimeSerie_FieldSubPath) WithIValue(value interface{}) TimeSerie_FieldPathValue {
	return &TimeSerie_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *TimeSerie_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *TimeSerie_FieldSubPath) WithIArrayOfValues(values interface{}) TimeSerie_FieldPathArrayOfValues {
	return &TimeSerie_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *TimeSerie_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *TimeSerie_FieldSubPath) WithIArrayItemValue(value interface{}) TimeSerie_FieldPathArrayItemValue {
	return &TimeSerie_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *TimeSerie_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// TimeSerie_FieldPathValue allows storing values for TimeSerie fields according to their type
type TimeSerie_FieldPathValue interface {
	TimeSerie_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **TimeSerie)
	CompareWith(*TimeSerie) (cmp int, comparable bool)
}

func ParseTimeSerie_FieldPathValue(pathStr, valueStr string) (TimeSerie_FieldPathValue, error) {
	fp, err := ParseTimeSerie_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TimeSerie field path value from %s: %v", valueStr, err)
	}
	return fpv.(TimeSerie_FieldPathValue), nil
}

func MustParseTimeSerie_FieldPathValue(pathStr, valueStr string) TimeSerie_FieldPathValue {
	fpv, err := ParseTimeSerie_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TimeSerie_FieldTerminalPathValue struct {
	TimeSerie_FieldTerminalPath
	value interface{}
}

var _ TimeSerie_FieldPathValue = (*TimeSerie_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'TimeSerie' as interface{}
func (fpv *TimeSerie_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TimeSerie_FieldTerminalPathValue) AsKeyValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}
func (fpv *TimeSerie_FieldTerminalPathValue) AsProjectValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *TimeSerie_FieldTerminalPathValue) AsRegionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *TimeSerie_FieldTerminalPathValue) AsUnitValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *TimeSerie_FieldTerminalPathValue) AsMetricValue() (*common.Metric, bool) {
	res, ok := fpv.value.(*common.Metric)
	return res, ok
}
func (fpv *TimeSerie_FieldTerminalPathValue) AsResourceValue() (*common.MonitoredResource, bool) {
	res, ok := fpv.value.(*common.MonitoredResource)
	return res, ok
}
func (fpv *TimeSerie_FieldTerminalPathValue) AsMetricKindValue() (metric_descriptor.MetricDescriptor_MetricKind, bool) {
	res, ok := fpv.value.(metric_descriptor.MetricDescriptor_MetricKind)
	return res, ok
}
func (fpv *TimeSerie_FieldTerminalPathValue) AsValueTypeValue() (metric_descriptor.MetricDescriptor_ValueType, bool) {
	res, ok := fpv.value.(metric_descriptor.MetricDescriptor_ValueType)
	return res, ok
}
func (fpv *TimeSerie_FieldTerminalPathValue) AsPointsValue() ([]*Point, bool) {
	res, ok := fpv.value.([]*Point)
	return res, ok
}

// SetTo stores value for selected field for object TimeSerie
func (fpv *TimeSerie_FieldTerminalPathValue) SetTo(target **TimeSerie) {
	if *target == nil {
		*target = new(TimeSerie)
	}
	switch fpv.selector {
	case TimeSerie_FieldPathSelectorKey:
		(*target).Key = fpv.value.([]byte)
	case TimeSerie_FieldPathSelectorProject:
		(*target).Project = fpv.value.(string)
	case TimeSerie_FieldPathSelectorRegion:
		(*target).Region = fpv.value.(string)
	case TimeSerie_FieldPathSelectorUnit:
		(*target).Unit = fpv.value.(string)
	case TimeSerie_FieldPathSelectorMetric:
		(*target).Metric = fpv.value.(*common.Metric)
	case TimeSerie_FieldPathSelectorResource:
		(*target).Resource = fpv.value.(*common.MonitoredResource)
	case TimeSerie_FieldPathSelectorMetricKind:
		(*target).MetricKind = fpv.value.(metric_descriptor.MetricDescriptor_MetricKind)
	case TimeSerie_FieldPathSelectorValueType:
		(*target).ValueType = fpv.value.(metric_descriptor.MetricDescriptor_ValueType)
	case TimeSerie_FieldPathSelectorPoints:
		(*target).Points = fpv.value.([]*Point)
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fpv.selector))
	}
}

func (fpv *TimeSerie_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TimeSerie)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TimeSerie_FieldTerminalPathValue' with the value under path in 'TimeSerie'.
func (fpv *TimeSerie_FieldTerminalPathValue) CompareWith(source *TimeSerie) (int, bool) {
	switch fpv.selector {
	case TimeSerie_FieldPathSelectorKey:
		return 0, false
	case TimeSerie_FieldPathSelectorProject:
		leftValue := fpv.value.(string)
		rightValue := source.GetProject()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TimeSerie_FieldPathSelectorRegion:
		leftValue := fpv.value.(string)
		rightValue := source.GetRegion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TimeSerie_FieldPathSelectorUnit:
		leftValue := fpv.value.(string)
		rightValue := source.GetUnit()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TimeSerie_FieldPathSelectorMetric:
		return 0, false
	case TimeSerie_FieldPathSelectorResource:
		return 0, false
	case TimeSerie_FieldPathSelectorMetricKind:
		leftValue := fpv.value.(metric_descriptor.MetricDescriptor_MetricKind)
		rightValue := source.GetMetricKind()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TimeSerie_FieldPathSelectorValueType:
		leftValue := fpv.value.(metric_descriptor.MetricDescriptor_ValueType)
		rightValue := source.GetValueType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case TimeSerie_FieldPathSelectorPoints:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fpv.selector))
	}
}

func (fpv *TimeSerie_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*TimeSerie))
}

type TimeSerie_FieldSubPathValue struct {
	TimeSerie_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ TimeSerie_FieldPathValue = (*TimeSerie_FieldSubPathValue)(nil)

func (fpvs *TimeSerie_FieldSubPathValue) AsMetricPathValue() (common.Metric_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Metric_FieldPathValue)
	return res, ok
}
func (fpvs *TimeSerie_FieldSubPathValue) AsResourcePathValue() (common.MonitoredResource_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.MonitoredResource_FieldPathValue)
	return res, ok
}
func (fpvs *TimeSerie_FieldSubPathValue) AsPointsPathValue() (Point_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Point_FieldPathValue)
	return res, ok
}

func (fpvs *TimeSerie_FieldSubPathValue) SetTo(target **TimeSerie) {
	if *target == nil {
		*target = new(TimeSerie)
	}
	switch fpvs.Selector() {
	case TimeSerie_FieldPathSelectorMetric:
		fpvs.subPathValue.(common.Metric_FieldPathValue).SetTo(&(*target).Metric)
	case TimeSerie_FieldPathSelectorResource:
		fpvs.subPathValue.(common.MonitoredResource_FieldPathValue).SetTo(&(*target).Resource)
	case TimeSerie_FieldPathSelectorPoints:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fpvs.Selector()))
	}
}

func (fpvs *TimeSerie_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*TimeSerie)
	fpvs.SetTo(&typedObject)
}

func (fpvs *TimeSerie_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *TimeSerie_FieldSubPathValue) CompareWith(source *TimeSerie) (int, bool) {
	switch fpvs.Selector() {
	case TimeSerie_FieldPathSelectorMetric:
		return fpvs.subPathValue.(common.Metric_FieldPathValue).CompareWith(source.GetMetric())
	case TimeSerie_FieldPathSelectorResource:
		return fpvs.subPathValue.(common.MonitoredResource_FieldPathValue).CompareWith(source.GetResource())
	case TimeSerie_FieldPathSelectorPoints:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fpvs.Selector()))
	}
}

func (fpvs *TimeSerie_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*TimeSerie))
}

// TimeSerie_FieldPathArrayItemValue allows storing single item in Path-specific values for TimeSerie according to their type
// Present only for array (repeated) types.
type TimeSerie_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TimeSerie_FieldPath
	ContainsValue(*TimeSerie) bool
}

// ParseTimeSerie_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTimeSerie_FieldPathArrayItemValue(pathStr, valueStr string) (TimeSerie_FieldPathArrayItemValue, error) {
	fp, err := ParseTimeSerie_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TimeSerie field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TimeSerie_FieldPathArrayItemValue), nil
}

func MustParseTimeSerie_FieldPathArrayItemValue(pathStr, valueStr string) TimeSerie_FieldPathArrayItemValue {
	fpaiv, err := ParseTimeSerie_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TimeSerie_FieldTerminalPathArrayItemValue struct {
	TimeSerie_FieldTerminalPath
	value interface{}
}

var _ TimeSerie_FieldPathArrayItemValue = (*TimeSerie_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object TimeSerie as interface{}
func (fpaiv *TimeSerie_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *TimeSerie_FieldTerminalPathArrayItemValue) AsPointsItemValue() (*Point, bool) {
	res, ok := fpaiv.value.(*Point)
	return res, ok
}

func (fpaiv *TimeSerie_FieldTerminalPathArrayItemValue) GetSingle(source *TimeSerie) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TimeSerie_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*TimeSerie))
}

// Contains returns a boolean indicating if value that is being held is present in given 'TimeSerie'
func (fpaiv *TimeSerie_FieldTerminalPathArrayItemValue) ContainsValue(source *TimeSerie) bool {
	slice := fpaiv.TimeSerie_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type TimeSerie_FieldSubPathArrayItemValue struct {
	TimeSerie_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *TimeSerie_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *TimeSerie_FieldSubPathArrayItemValue) AsMetricPathItemValue() (common.Metric_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Metric_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TimeSerie_FieldSubPathArrayItemValue) AsResourcePathItemValue() (common.MonitoredResource_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.MonitoredResource_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *TimeSerie_FieldSubPathArrayItemValue) AsPointsPathItemValue() (Point_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Point_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'TimeSerie'
func (fpaivs *TimeSerie_FieldSubPathArrayItemValue) ContainsValue(source *TimeSerie) bool {
	switch fpaivs.Selector() {
	case TimeSerie_FieldPathSelectorMetric:
		return fpaivs.subPathItemValue.(common.Metric_FieldPathArrayItemValue).ContainsValue(source.GetMetric())
	case TimeSerie_FieldPathSelectorResource:
		return fpaivs.subPathItemValue.(common.MonitoredResource_FieldPathArrayItemValue).ContainsValue(source.GetResource())
	case TimeSerie_FieldPathSelectorPoints:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for TimeSerie: %d", fpaivs.Selector()))
	}
}

// TimeSerie_FieldPathArrayOfValues allows storing slice of values for TimeSerie fields according to their type
type TimeSerie_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TimeSerie_FieldPath
}

func ParseTimeSerie_FieldPathArrayOfValues(pathStr, valuesStr string) (TimeSerie_FieldPathArrayOfValues, error) {
	fp, err := ParseTimeSerie_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TimeSerie field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TimeSerie_FieldPathArrayOfValues), nil
}

func MustParseTimeSerie_FieldPathArrayOfValues(pathStr, valuesStr string) TimeSerie_FieldPathArrayOfValues {
	fpaov, err := ParseTimeSerie_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TimeSerie_FieldTerminalPathArrayOfValues struct {
	TimeSerie_FieldTerminalPath
	values interface{}
}

var _ TimeSerie_FieldPathArrayOfValues = (*TimeSerie_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TimeSerie_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TimeSerie_FieldPathSelectorKey:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	case TimeSerie_FieldPathSelectorProject:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case TimeSerie_FieldPathSelectorRegion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case TimeSerie_FieldPathSelectorUnit:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case TimeSerie_FieldPathSelectorMetric:
		for _, v := range fpaov.values.([]*common.Metric) {
			values = append(values, v)
		}
	case TimeSerie_FieldPathSelectorResource:
		for _, v := range fpaov.values.([]*common.MonitoredResource) {
			values = append(values, v)
		}
	case TimeSerie_FieldPathSelectorMetricKind:
		for _, v := range fpaov.values.([]metric_descriptor.MetricDescriptor_MetricKind) {
			values = append(values, v)
		}
	case TimeSerie_FieldPathSelectorValueType:
		for _, v := range fpaov.values.([]metric_descriptor.MetricDescriptor_ValueType) {
			values = append(values, v)
		}
	case TimeSerie_FieldPathSelectorPoints:
		for _, v := range fpaov.values.([][]*Point) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TimeSerie_FieldTerminalPathArrayOfValues) AsKeyArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
func (fpaov *TimeSerie_FieldTerminalPathArrayOfValues) AsProjectArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *TimeSerie_FieldTerminalPathArrayOfValues) AsRegionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *TimeSerie_FieldTerminalPathArrayOfValues) AsUnitArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *TimeSerie_FieldTerminalPathArrayOfValues) AsMetricArrayOfValues() ([]*common.Metric, bool) {
	res, ok := fpaov.values.([]*common.Metric)
	return res, ok
}
func (fpaov *TimeSerie_FieldTerminalPathArrayOfValues) AsResourceArrayOfValues() ([]*common.MonitoredResource, bool) {
	res, ok := fpaov.values.([]*common.MonitoredResource)
	return res, ok
}
func (fpaov *TimeSerie_FieldTerminalPathArrayOfValues) AsMetricKindArrayOfValues() ([]metric_descriptor.MetricDescriptor_MetricKind, bool) {
	res, ok := fpaov.values.([]metric_descriptor.MetricDescriptor_MetricKind)
	return res, ok
}
func (fpaov *TimeSerie_FieldTerminalPathArrayOfValues) AsValueTypeArrayOfValues() ([]metric_descriptor.MetricDescriptor_ValueType, bool) {
	res, ok := fpaov.values.([]metric_descriptor.MetricDescriptor_ValueType)
	return res, ok
}
func (fpaov *TimeSerie_FieldTerminalPathArrayOfValues) AsPointsArrayOfValues() ([][]*Point, bool) {
	res, ok := fpaov.values.([][]*Point)
	return res, ok
}

type TimeSerie_FieldSubPathArrayOfValues struct {
	TimeSerie_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ TimeSerie_FieldPathArrayOfValues = (*TimeSerie_FieldSubPathArrayOfValues)(nil)

func (fpsaov *TimeSerie_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *TimeSerie_FieldSubPathArrayOfValues) AsMetricPathArrayOfValues() (common.Metric_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Metric_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TimeSerie_FieldSubPathArrayOfValues) AsResourcePathArrayOfValues() (common.MonitoredResource_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.MonitoredResource_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *TimeSerie_FieldSubPathArrayOfValues) AsPointsPathArrayOfValues() (Point_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Point_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BulkTimeSeries_FieldPath interface {
	gotenobject.FieldPath
	Selector() BulkTimeSeries_FieldPathSelector
	Get(source *BulkTimeSeries) []interface{}
	GetSingle(source *BulkTimeSeries) (interface{}, bool)
	ClearValue(item *BulkTimeSeries)

	// Those methods build corresponding BulkTimeSeries_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BulkTimeSeries_FieldPathValue
	WithIArrayOfValues(values interface{}) BulkTimeSeries_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BulkTimeSeries_FieldPathArrayItemValue
}

type BulkTimeSeries_FieldPathSelector int32

const (
	BulkTimeSeries_FieldPathSelectorTimeSeries  BulkTimeSeries_FieldPathSelector = 0
	BulkTimeSeries_FieldPathSelectorPhantomFlag BulkTimeSeries_FieldPathSelector = 1
)

func (s BulkTimeSeries_FieldPathSelector) String() string {
	switch s {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		return "time_series"
	case BulkTimeSeries_FieldPathSelectorPhantomFlag:
		return "phantom_flag"
	default:
		panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", s))
	}
}

func BuildBulkTimeSeries_FieldPath(fp gotenobject.RawFieldPath) (BulkTimeSeries_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BulkTimeSeries")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "time_series", "timeSeries", "time-series":
			return &BulkTimeSeries_FieldTerminalPath{selector: BulkTimeSeries_FieldPathSelectorTimeSeries}, nil
		case "phantom_flag", "phantomFlag", "phantom-flag":
			return &BulkTimeSeries_FieldTerminalPath{selector: BulkTimeSeries_FieldPathSelectorPhantomFlag}, nil
		}
	} else {
		switch fp[0] {
		case "time_series", "timeSeries", "time-series":
			if subpath, err := BuildTimeSerie_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BulkTimeSeries_FieldSubPath{selector: BulkTimeSeries_FieldPathSelectorTimeSeries, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BulkTimeSeries", fp)
}

func ParseBulkTimeSeries_FieldPath(rawField string) (BulkTimeSeries_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBulkTimeSeries_FieldPath(fp)
}

func MustParseBulkTimeSeries_FieldPath(rawField string) BulkTimeSeries_FieldPath {
	fp, err := ParseBulkTimeSeries_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BulkTimeSeries_FieldTerminalPath struct {
	selector BulkTimeSeries_FieldPathSelector
}

var _ BulkTimeSeries_FieldPath = (*BulkTimeSeries_FieldTerminalPath)(nil)

func (fp *BulkTimeSeries_FieldTerminalPath) Selector() BulkTimeSeries_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BulkTimeSeries_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BulkTimeSeries_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BulkTimeSeries
func (fp *BulkTimeSeries_FieldTerminalPath) Get(source *BulkTimeSeries) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BulkTimeSeries_FieldPathSelectorTimeSeries:
			for _, value := range source.GetTimeSeries() {
				values = append(values, value)
			}
		case BulkTimeSeries_FieldPathSelectorPhantomFlag:
			values = append(values, source.PhantomFlag)
		default:
			panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fp.selector))
		}
	}
	return
}

func (fp *BulkTimeSeries_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BulkTimeSeries))
}

// GetSingle returns value pointed by specific field of from source BulkTimeSeries
func (fp *BulkTimeSeries_FieldTerminalPath) GetSingle(source *BulkTimeSeries) (interface{}, bool) {
	switch fp.selector {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		res := source.GetTimeSeries()
		return res, res != nil
	case BulkTimeSeries_FieldPathSelectorPhantomFlag:
		return source.GetPhantomFlag(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fp.selector))
	}
}

func (fp *BulkTimeSeries_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BulkTimeSeries))
}

// GetDefault returns a default value of the field type
func (fp *BulkTimeSeries_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		return ([]*TimeSerie)(nil)
	case BulkTimeSeries_FieldPathSelectorPhantomFlag:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fp.selector))
	}
}

func (fp *BulkTimeSeries_FieldTerminalPath) ClearValue(item *BulkTimeSeries) {
	if item != nil {
		switch fp.selector {
		case BulkTimeSeries_FieldPathSelectorTimeSeries:
			item.TimeSeries = nil
		case BulkTimeSeries_FieldPathSelectorPhantomFlag:
			item.PhantomFlag = false
		default:
			panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fp.selector))
		}
	}
}

func (fp *BulkTimeSeries_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BulkTimeSeries))
}

// IsLeaf - whether field path is holds simple value
func (fp *BulkTimeSeries_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BulkTimeSeries_FieldPathSelectorPhantomFlag
}

func (fp *BulkTimeSeries_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BulkTimeSeries_FieldTerminalPath) WithIValue(value interface{}) BulkTimeSeries_FieldPathValue {
	switch fp.selector {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		return &BulkTimeSeries_FieldTerminalPathValue{BulkTimeSeries_FieldTerminalPath: *fp, value: value.([]*TimeSerie)}
	case BulkTimeSeries_FieldPathSelectorPhantomFlag:
		return &BulkTimeSeries_FieldTerminalPathValue{BulkTimeSeries_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fp.selector))
	}
}

func (fp *BulkTimeSeries_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BulkTimeSeries_FieldTerminalPath) WithIArrayOfValues(values interface{}) BulkTimeSeries_FieldPathArrayOfValues {
	fpaov := &BulkTimeSeries_FieldTerminalPathArrayOfValues{BulkTimeSeries_FieldTerminalPath: *fp}
	switch fp.selector {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		return &BulkTimeSeries_FieldTerminalPathArrayOfValues{BulkTimeSeries_FieldTerminalPath: *fp, values: values.([][]*TimeSerie)}
	case BulkTimeSeries_FieldPathSelectorPhantomFlag:
		return &BulkTimeSeries_FieldTerminalPathArrayOfValues{BulkTimeSeries_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fp.selector))
	}
	return fpaov
}

func (fp *BulkTimeSeries_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BulkTimeSeries_FieldTerminalPath) WithIArrayItemValue(value interface{}) BulkTimeSeries_FieldPathArrayItemValue {
	switch fp.selector {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		return &BulkTimeSeries_FieldTerminalPathArrayItemValue{BulkTimeSeries_FieldTerminalPath: *fp, value: value.(*TimeSerie)}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fp.selector))
	}
}

func (fp *BulkTimeSeries_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BulkTimeSeries_FieldSubPath struct {
	selector BulkTimeSeries_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BulkTimeSeries_FieldPath = (*BulkTimeSeries_FieldSubPath)(nil)

func (fps *BulkTimeSeries_FieldSubPath) Selector() BulkTimeSeries_FieldPathSelector {
	return fps.selector
}
func (fps *BulkTimeSeries_FieldSubPath) AsTimeSeriesSubPath() (TimeSerie_FieldPath, bool) {
	res, ok := fps.subPath.(TimeSerie_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BulkTimeSeries_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BulkTimeSeries_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BulkTimeSeries
func (fps *BulkTimeSeries_FieldSubPath) Get(source *BulkTimeSeries) (values []interface{}) {
	switch fps.selector {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		for _, item := range source.GetTimeSeries() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fps.selector))
	}
	return
}

func (fps *BulkTimeSeries_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BulkTimeSeries))
}

// GetSingle returns value of selected field from source BulkTimeSeries
func (fps *BulkTimeSeries_FieldSubPath) GetSingle(source *BulkTimeSeries) (interface{}, bool) {
	switch fps.selector {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		if len(source.GetTimeSeries()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTimeSeries()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fps.selector))
	}
}

func (fps *BulkTimeSeries_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BulkTimeSeries))
}

// GetDefault returns a default value of the field type
func (fps *BulkTimeSeries_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BulkTimeSeries_FieldSubPath) ClearValue(item *BulkTimeSeries) {
	if item != nil {
		switch fps.selector {
		case BulkTimeSeries_FieldPathSelectorTimeSeries:
			for _, subItem := range item.TimeSeries {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fps.selector))
		}
	}
}

func (fps *BulkTimeSeries_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BulkTimeSeries))
}

// IsLeaf - whether field path is holds simple value
func (fps *BulkTimeSeries_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BulkTimeSeries_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BulkTimeSeries_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BulkTimeSeries_FieldSubPath) WithIValue(value interface{}) BulkTimeSeries_FieldPathValue {
	return &BulkTimeSeries_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BulkTimeSeries_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BulkTimeSeries_FieldSubPath) WithIArrayOfValues(values interface{}) BulkTimeSeries_FieldPathArrayOfValues {
	return &BulkTimeSeries_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BulkTimeSeries_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BulkTimeSeries_FieldSubPath) WithIArrayItemValue(value interface{}) BulkTimeSeries_FieldPathArrayItemValue {
	return &BulkTimeSeries_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BulkTimeSeries_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BulkTimeSeries_FieldPathValue allows storing values for BulkTimeSeries fields according to their type
type BulkTimeSeries_FieldPathValue interface {
	BulkTimeSeries_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BulkTimeSeries)
	CompareWith(*BulkTimeSeries) (cmp int, comparable bool)
}

func ParseBulkTimeSeries_FieldPathValue(pathStr, valueStr string) (BulkTimeSeries_FieldPathValue, error) {
	fp, err := ParseBulkTimeSeries_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BulkTimeSeries field path value from %s: %v", valueStr, err)
	}
	return fpv.(BulkTimeSeries_FieldPathValue), nil
}

func MustParseBulkTimeSeries_FieldPathValue(pathStr, valueStr string) BulkTimeSeries_FieldPathValue {
	fpv, err := ParseBulkTimeSeries_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BulkTimeSeries_FieldTerminalPathValue struct {
	BulkTimeSeries_FieldTerminalPath
	value interface{}
}

var _ BulkTimeSeries_FieldPathValue = (*BulkTimeSeries_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BulkTimeSeries' as interface{}
func (fpv *BulkTimeSeries_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BulkTimeSeries_FieldTerminalPathValue) AsTimeSeriesValue() ([]*TimeSerie, bool) {
	res, ok := fpv.value.([]*TimeSerie)
	return res, ok
}
func (fpv *BulkTimeSeries_FieldTerminalPathValue) AsPhantomFlagValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object BulkTimeSeries
func (fpv *BulkTimeSeries_FieldTerminalPathValue) SetTo(target **BulkTimeSeries) {
	if *target == nil {
		*target = new(BulkTimeSeries)
	}
	switch fpv.selector {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		(*target).TimeSeries = fpv.value.([]*TimeSerie)
	case BulkTimeSeries_FieldPathSelectorPhantomFlag:
		(*target).PhantomFlag = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fpv.selector))
	}
}

func (fpv *BulkTimeSeries_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BulkTimeSeries)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BulkTimeSeries_FieldTerminalPathValue' with the value under path in 'BulkTimeSeries'.
func (fpv *BulkTimeSeries_FieldTerminalPathValue) CompareWith(source *BulkTimeSeries) (int, bool) {
	switch fpv.selector {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		return 0, false
	case BulkTimeSeries_FieldPathSelectorPhantomFlag:
		leftValue := fpv.value.(bool)
		rightValue := source.GetPhantomFlag()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fpv.selector))
	}
}

func (fpv *BulkTimeSeries_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BulkTimeSeries))
}

type BulkTimeSeries_FieldSubPathValue struct {
	BulkTimeSeries_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BulkTimeSeries_FieldPathValue = (*BulkTimeSeries_FieldSubPathValue)(nil)

func (fpvs *BulkTimeSeries_FieldSubPathValue) AsTimeSeriesPathValue() (TimeSerie_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TimeSerie_FieldPathValue)
	return res, ok
}

func (fpvs *BulkTimeSeries_FieldSubPathValue) SetTo(target **BulkTimeSeries) {
	if *target == nil {
		*target = new(BulkTimeSeries)
	}
	switch fpvs.Selector() {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fpvs.Selector()))
	}
}

func (fpvs *BulkTimeSeries_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BulkTimeSeries)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BulkTimeSeries_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BulkTimeSeries_FieldSubPathValue) CompareWith(source *BulkTimeSeries) (int, bool) {
	switch fpvs.Selector() {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fpvs.Selector()))
	}
}

func (fpvs *BulkTimeSeries_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BulkTimeSeries))
}

// BulkTimeSeries_FieldPathArrayItemValue allows storing single item in Path-specific values for BulkTimeSeries according to their type
// Present only for array (repeated) types.
type BulkTimeSeries_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BulkTimeSeries_FieldPath
	ContainsValue(*BulkTimeSeries) bool
}

// ParseBulkTimeSeries_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBulkTimeSeries_FieldPathArrayItemValue(pathStr, valueStr string) (BulkTimeSeries_FieldPathArrayItemValue, error) {
	fp, err := ParseBulkTimeSeries_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BulkTimeSeries field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BulkTimeSeries_FieldPathArrayItemValue), nil
}

func MustParseBulkTimeSeries_FieldPathArrayItemValue(pathStr, valueStr string) BulkTimeSeries_FieldPathArrayItemValue {
	fpaiv, err := ParseBulkTimeSeries_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BulkTimeSeries_FieldTerminalPathArrayItemValue struct {
	BulkTimeSeries_FieldTerminalPath
	value interface{}
}

var _ BulkTimeSeries_FieldPathArrayItemValue = (*BulkTimeSeries_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BulkTimeSeries as interface{}
func (fpaiv *BulkTimeSeries_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BulkTimeSeries_FieldTerminalPathArrayItemValue) AsTimeSeriesItemValue() (*TimeSerie, bool) {
	res, ok := fpaiv.value.(*TimeSerie)
	return res, ok
}

func (fpaiv *BulkTimeSeries_FieldTerminalPathArrayItemValue) GetSingle(source *BulkTimeSeries) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BulkTimeSeries_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BulkTimeSeries))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BulkTimeSeries'
func (fpaiv *BulkTimeSeries_FieldTerminalPathArrayItemValue) ContainsValue(source *BulkTimeSeries) bool {
	slice := fpaiv.BulkTimeSeries_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BulkTimeSeries_FieldSubPathArrayItemValue struct {
	BulkTimeSeries_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BulkTimeSeries_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BulkTimeSeries_FieldSubPathArrayItemValue) AsTimeSeriesPathItemValue() (TimeSerie_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TimeSerie_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BulkTimeSeries'
func (fpaivs *BulkTimeSeries_FieldSubPathArrayItemValue) ContainsValue(source *BulkTimeSeries) bool {
	switch fpaivs.Selector() {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BulkTimeSeries: %d", fpaivs.Selector()))
	}
}

// BulkTimeSeries_FieldPathArrayOfValues allows storing slice of values for BulkTimeSeries fields according to their type
type BulkTimeSeries_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BulkTimeSeries_FieldPath
}

func ParseBulkTimeSeries_FieldPathArrayOfValues(pathStr, valuesStr string) (BulkTimeSeries_FieldPathArrayOfValues, error) {
	fp, err := ParseBulkTimeSeries_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BulkTimeSeries field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BulkTimeSeries_FieldPathArrayOfValues), nil
}

func MustParseBulkTimeSeries_FieldPathArrayOfValues(pathStr, valuesStr string) BulkTimeSeries_FieldPathArrayOfValues {
	fpaov, err := ParseBulkTimeSeries_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BulkTimeSeries_FieldTerminalPathArrayOfValues struct {
	BulkTimeSeries_FieldTerminalPath
	values interface{}
}

var _ BulkTimeSeries_FieldPathArrayOfValues = (*BulkTimeSeries_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BulkTimeSeries_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BulkTimeSeries_FieldPathSelectorTimeSeries:
		for _, v := range fpaov.values.([][]*TimeSerie) {
			values = append(values, v)
		}
	case BulkTimeSeries_FieldPathSelectorPhantomFlag:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BulkTimeSeries_FieldTerminalPathArrayOfValues) AsTimeSeriesArrayOfValues() ([][]*TimeSerie, bool) {
	res, ok := fpaov.values.([][]*TimeSerie)
	return res, ok
}
func (fpaov *BulkTimeSeries_FieldTerminalPathArrayOfValues) AsPhantomFlagArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type BulkTimeSeries_FieldSubPathArrayOfValues struct {
	BulkTimeSeries_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BulkTimeSeries_FieldPathArrayOfValues = (*BulkTimeSeries_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BulkTimeSeries_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BulkTimeSeries_FieldSubPathArrayOfValues) AsTimeSeriesPathArrayOfValues() (TimeSerie_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TimeSerie_FieldPathArrayOfValues)
	return res, ok
}
