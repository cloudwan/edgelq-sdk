// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v4/metric_descriptor.proto
// DO NOT EDIT!!!

package metric_descriptor

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	monitored_resource_descriptor "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/monitored_resource_descriptor"
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = api.LaunchStage(0)
	_ = &common.LabelDescriptor{}
	_ = &monitored_resource_descriptor.MonitoredResourceDescriptor{}
	_ = &project.Project{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The kind of measurement. It describes how the data is reported.
type MetricDescriptor_MetricKind int32

const (
	// Do not use this default value.
	MetricDescriptor_METRIC_KIND_UNSPECIFIED MetricDescriptor_MetricKind = 0
	// An instantaneous measurement of a value.
	MetricDescriptor_GAUGE MetricDescriptor_MetricKind = 1
	// The change in a value during a time interval.
	MetricDescriptor_DELTA MetricDescriptor_MetricKind = 2
	// A value accumulated over a time interval.  Cumulative
	// measurements in a time series should have the same start time
	// and increasing end times, until an event resets the cumulative
	// value to zero and sets a new start time for the following
	// points.
	MetricDescriptor_CUMULATIVE MetricDescriptor_MetricKind = 3
)

var (
	MetricDescriptor_MetricKind_name = map[int32]string{
		0: "METRIC_KIND_UNSPECIFIED",
		1: "GAUGE",
		2: "DELTA",
		3: "CUMULATIVE",
	}

	MetricDescriptor_MetricKind_value = map[string]int32{
		"METRIC_KIND_UNSPECIFIED": 0,
		"GAUGE":                   1,
		"DELTA":                   2,
		"CUMULATIVE":              3,
	}
)

func (x MetricDescriptor_MetricKind) Enum() *MetricDescriptor_MetricKind {
	p := new(MetricDescriptor_MetricKind)
	*p = x
	return p
}

func (x MetricDescriptor_MetricKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (MetricDescriptor_MetricKind) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_enumTypes[0].Descriptor()
}

func (MetricDescriptor_MetricKind) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_metric_descriptor_proto_enumTypes[0]
}

func (x MetricDescriptor_MetricKind) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use MetricDescriptor_MetricKind.ProtoReflect.Descriptor instead.
func (MetricDescriptor_MetricKind) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 0}
}

// The value type of a metric.
type MetricDescriptor_ValueType int32

const (
	// Do not use this default value.
	MetricDescriptor_VALUE_TYPE_UNSPECIFIED MetricDescriptor_ValueType = 0
	// The value is a boolean.
	// This value type can be used only if the metric kind is `GAUGE`.
	MetricDescriptor_BOOL MetricDescriptor_ValueType = 1
	// The value is a signed 64-bit integer.
	MetricDescriptor_INT64 MetricDescriptor_ValueType = 2
	// The value is a double precision floating point number.
	MetricDescriptor_DOUBLE MetricDescriptor_ValueType = 3
	// The value is a [`Distribution`][google.api.Distribution].
	MetricDescriptor_DISTRIBUTION MetricDescriptor_ValueType = 5
)

var (
	MetricDescriptor_ValueType_name = map[int32]string{
		0: "VALUE_TYPE_UNSPECIFIED",
		1: "BOOL",
		2: "INT64",
		3: "DOUBLE",
		5: "DISTRIBUTION",
	}

	MetricDescriptor_ValueType_value = map[string]int32{
		"VALUE_TYPE_UNSPECIFIED": 0,
		"BOOL":                   1,
		"INT64":                  2,
		"DOUBLE":                 3,
		"DISTRIBUTION":           5,
	}
)

func (x MetricDescriptor_ValueType) Enum() *MetricDescriptor_ValueType {
	p := new(MetricDescriptor_ValueType)
	*p = x
	return p
}

func (x MetricDescriptor_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (MetricDescriptor_ValueType) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_enumTypes[1].Descriptor()
}

func (MetricDescriptor_ValueType) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_metric_descriptor_proto_enumTypes[1]
}

func (x MetricDescriptor_ValueType) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use MetricDescriptor_ValueType.ProtoReflect.Descriptor instead.
func (MetricDescriptor_ValueType) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 1}
}

// CloseStatus indicates if index group part is closed.
// When part of the index closes, all indices it is part of are closed.
// Older data is still available for reading until group is completely
// removed.
type MetricDescriptor_Indices_CloseStatus int32

const (
	// Index is active for read and write
	MetricDescriptor_Indices_UNDEFINED MetricDescriptor_Indices_CloseStatus = 0
	// index is closed for reading from time when it was suspended.
	// Data prior to suspension is available for reads.
	// Writes are executed normally. SUSPENDED status can be lifted and
	// index will behave like nothing ever happened. Reading will be possible
	// for any time range from creation time.
	MetricDescriptor_Indices_SUSPENDED MetricDescriptor_Indices_CloseStatus = 1
	// Index is no longer writing, but data prior to the closed status is
	// available for reads. This helps to maintain older indices still
	// available for reading, even if newer better indices were created.
	MetricDescriptor_Indices_CLOSED MetricDescriptor_Indices_CloseStatus = 2
)

var (
	MetricDescriptor_Indices_CloseStatus_name = map[int32]string{
		0: "UNDEFINED",
		1: "SUSPENDED",
		2: "CLOSED",
	}

	MetricDescriptor_Indices_CloseStatus_value = map[string]int32{
		"UNDEFINED": 0,
		"SUSPENDED": 1,
		"CLOSED":    2,
	}
)

func (x MetricDescriptor_Indices_CloseStatus) Enum() *MetricDescriptor_Indices_CloseStatus {
	p := new(MetricDescriptor_Indices_CloseStatus)
	*p = x
	return p
}

func (x MetricDescriptor_Indices_CloseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (MetricDescriptor_Indices_CloseStatus) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_enumTypes[2].Descriptor()
}

func (MetricDescriptor_Indices_CloseStatus) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_metric_descriptor_proto_enumTypes[2]
}

func (x MetricDescriptor_Indices_CloseStatus) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use MetricDescriptor_Indices_CloseStatus.ProtoReflect.Descriptor instead.
func (MetricDescriptor_Indices_CloseStatus) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 2, 0}
}

type MetricDescriptor_Indices_SortingFunction_Direction int32

const (
	MetricDescriptor_Indices_SortingFunction_UNDEFINED  MetricDescriptor_Indices_SortingFunction_Direction = 0
	MetricDescriptor_Indices_SortingFunction_ASCENDING  MetricDescriptor_Indices_SortingFunction_Direction = 1
	MetricDescriptor_Indices_SortingFunction_DESCENDING MetricDescriptor_Indices_SortingFunction_Direction = 2
)

var (
	MetricDescriptor_Indices_SortingFunction_Direction_name = map[int32]string{
		0: "UNDEFINED",
		1: "ASCENDING",
		2: "DESCENDING",
	}

	MetricDescriptor_Indices_SortingFunction_Direction_value = map[string]int32{
		"UNDEFINED":  0,
		"ASCENDING":  1,
		"DESCENDING": 2,
	}
)

func (x MetricDescriptor_Indices_SortingFunction_Direction) Enum() *MetricDescriptor_Indices_SortingFunction_Direction {
	p := new(MetricDescriptor_Indices_SortingFunction_Direction)
	*p = x
	return p
}

func (x MetricDescriptor_Indices_SortingFunction_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (MetricDescriptor_Indices_SortingFunction_Direction) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_enumTypes[3].Descriptor()
}

func (MetricDescriptor_Indices_SortingFunction_Direction) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_metric_descriptor_proto_enumTypes[3]
}

func (x MetricDescriptor_Indices_SortingFunction_Direction) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use MetricDescriptor_Indices_SortingFunction_Direction.ProtoReflect.Descriptor instead.
func (MetricDescriptor_Indices_SortingFunction_Direction) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 2, 3, 0}
}

// Defines a metric type and its schema. Once a metric descriptor is created,
// deleting or altering it stops data collection and makes the metric type's
// existing data unusable.
type MetricDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of MetricDescriptor
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [\\w./-]{4,128}
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,35,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// The metric type, including its DNS name prefix. The type is not
	// URL-encoded.  All user-defined metric types have the DNS name
	// `custom.googleapis.com` or `external.googleapis.com`.  Metric types should
	// use a natural hierarchical grouping. For example:
	//
	//     "custom.googleapis.com/invoice/paid/amount"
	//     "external.googleapis.com/prometheus/up"
	//     "appengine.googleapis.com/http/server/response_latencies"
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty" firestore:"type"`
	// associated resource_types (also used to infer defaults)
	// examples, devices.edgelq.com/Device, watchdog.edgelq.com/Agent.
	// DEPRECATED, use "indices".
	ResourceTypes []string `protobuf:"bytes,34,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty" firestore:"resourceTypes"`
	// The set of labels that can be used to describe a specific
	// instance of this metric type. For example, the
	// `appengine.googleapis.com/http/server/response_latencies` metric
	// type has a label for the HTTP response code, `response_code`, so
	// you can look at latencies for successful responses or just
	// for responses that failed.
	Labels []*common.LabelDescriptor `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" firestore:"labels"`
	// Whether the metric records instantaneous values, changes to a value, etc.
	// Some combinations of `metric_kind` and `value_type` might not be supported.
	MetricKind MetricDescriptor_MetricKind `protobuf:"varint,3,opt,name=metric_kind,json=metricKind,proto3,enum=ntt.monitoring.v4.MetricDescriptor_MetricKind" json:"metric_kind,omitempty" firestore:"metricKind"`
	// Whether the measurement is an integer, a floating-point number, etc.
	// Some combinations of `metric_kind` and `value_type` might not be supported.
	ValueType MetricDescriptor_ValueType `protobuf:"varint,4,opt,name=value_type,json=valueType,proto3,enum=ntt.monitoring.v4.MetricDescriptor_ValueType" json:"value_type,omitempty" firestore:"valueType"`
	// The unit in which the metric value is reported. It is only applicable
	// if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
	// supported units are a subset of [The Unified Code for Units of
	// Measure](http://unitsofmeasure.org/ucum.html) standard:
	//
	// **Basic units (UNIT)**
	//
	// * `bit`   bit
	// * `By`    byte
	// * `s`     second
	// * `min`   minute
	// * `h`     hour
	// * `d`     day
	//
	// **Prefixes (PREFIX)**
	//
	// * `k`     kilo    (10**3)
	// * `M`     mega    (10**6)
	// * `G`     giga    (10**9)
	// * `T`     tera    (10**12)
	// * `P`     peta    (10**15)
	// * `E`     exa     (10**18)
	// * `Z`     zetta   (10**21)
	// * `Y`     yotta   (10**24)
	// * `m`     milli   (10**-3)
	// * `u`     micro   (10**-6)
	// * `n`     nano    (10**-9)
	// * `p`     pico    (10**-12)
	// * `f`     femto   (10**-15)
	// * `a`     atto    (10**-18)
	// * `z`     zepto   (10**-21)
	// * `y`     yocto   (10**-24)
	// * `Ki`    kibi    (2**10)
	// * `Mi`    mebi    (2**20)
	// * `Gi`    gibi    (2**30)
	// * `Ti`    tebi    (2**40)
	//
	// **Grammar**
	//
	// The grammar also includes these connectors:
	//
	// * `/`    division (as an infix operator, e.g. `1/s`).
	// * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
	//
	// The grammar for a unit is as follows:
	//
	//     Expression = Component { "." Component } { "/" Component } ;
	//
	//     Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ]
	//               | Annotation
	//               | "1"
	//               ;
	//
	//     Annotation = "{" NAME "}" ;
	//
	// Notes:
	//
	// * `Annotation` is just a comment if it follows a `UNIT` and is
	//    equivalent to `1` if it is used alone. For examples,
	//    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
	// * `NAME` is a sequence of non-blank printable ASCII characters not
	//    containing '{' or '}'.
	// * `1` represents dimensionless value 1, such as in `1/s`.
	// * `%` represents dimensionless value 1/100, and annotates values giving
	//    a percentage.
	Unit string `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty" firestore:"unit"`
	// A detailed description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	// A concise name for the metric, which can be displayed in user interfaces.
	// Use sentence case without an ending period, for example "Request count".
	// This field is optional but it is recommended to be set for any metrics
	// associated with user-visible concepts, such as Quota.
	DisplayName string `protobuf:"bytes,7,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// Optional. Metadata which can be used to guide usage of the metric.
	MetricDescriptorMetadata *MetricDescriptor_MetricDescriptorMetadata `protobuf:"bytes,10,opt,name=metric_descriptor_metadata,json=metricDescriptorMetadata,proto3" json:"metric_descriptor_metadata,omitempty" firestore:"metricDescriptorMetadata"`
	// Distribution bucketing options - define only when ValueType is
	// Distribution. Used for validating input.
	DistributionBucketOptions *common.Distribution_BucketOptions `protobuf:"bytes,31,opt,name=distribution_bucket_options,json=distributionBucketOptions,proto3" json:"distribution_bucket_options,omitempty" firestore:"distributionBucketOptions"`
	// Promoted Label Key Sets allow defining multiple indexing rules for
	// underlying backend enabling query optimizations. Metric promoted label sets
	// are combined with MonitoredResource promoted label sets and result in
	// PromotedKeySet.
	// DEPRECATED, use "indices" instead.
	PromotedLabelKeySets []*common.LabelKeySet `protobuf:"bytes,32,rep,name=promoted_label_key_sets,json=promotedLabelKeySets,proto3" json:"promoted_label_key_sets,omitempty" firestore:"promotedLabelKeySets"`
	// DEPRECATED: use "indices". This field must not be used
	// if client migrated to ResourceBindings. Whenever index_spec is set, it will
	// override resource_descriptor_bindings. This is for migration purpose,
	// future indices must be managed by ResourceBindings.
	IndexSpec *MetricDescriptor_IndexSpec `protobuf:"bytes,36,opt,name=index_spec,json=indexSpec,proto3" json:"index_spec,omitempty" firestore:"indexSpec"`
	// Defines indexing rules for underlying backend enabling query optimizations.
	// It's important consideration for balancing time series query performance
	// and storage cost.
	// Number of non-disabled indices per resource type is 64. Indices are
	// generated from index families. Final index is a combination of metric &
	// resource promoted label set, and pre-aggregation spec (if any). For
	// example, index family with 2 promoted sets for resource, 3 promoted sets
	// for metric, 2 pre-aggregations would create 12 indices. If no
	// pre-aggregations were defined, it would be 6 indices. Metric and resource
	// label sets must never be empty: At least one empty label set must be
	// present.
	Indices *MetricDescriptor_Indices `protobuf:"bytes,37,opt,name=indices,proto3" json:"indices,omitempty" firestore:"indices"`
	// Storage settings
	StorageConfig *MetricDescriptor_StorageConfig `protobuf:"bytes,33,opt,name=storage_config,json=storageConfig,proto3" json:"storage_config,omitempty" firestore:"storageConfig"`
	// Generated indices data in binary format, for internal use only.
	// They are compiled when MetricDescriptor is saved and used by monitoring
	// server, db-controller or controller when necessary.
	// One MetricDescriptor instance will have different value of this field
	// in each region!
	BinaryIndices *MetricDescriptor_BinaryIndices `protobuf:"bytes,38,opt,name=binary_indices,json=binaryIndices,proto3" json:"binary_indices,omitempty" firestore:"binaryIndices"`
}

func (m *MetricDescriptor) Reset() {
	*m = MetricDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor) ProtoMessage() {}

func (m *MetricDescriptor) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor) GotenMessage() {}

// Deprecated, Use MetricDescriptor.ProtoReflect.Descriptor instead.
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0}
}

func (m *MetricDescriptor) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *MetricDescriptor) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *MetricDescriptor) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MetricDescriptor) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *MetricDescriptor) GetLabels() []*common.LabelDescriptor {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricDescriptor) GetMetricKind() MetricDescriptor_MetricKind {
	if m != nil {
		return m.MetricKind
	}
	return MetricDescriptor_METRIC_KIND_UNSPECIFIED
}

func (m *MetricDescriptor) GetValueType() MetricDescriptor_ValueType {
	if m != nil {
		return m.ValueType
	}
	return MetricDescriptor_VALUE_TYPE_UNSPECIFIED
}

func (m *MetricDescriptor) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *MetricDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDescriptor) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *MetricDescriptor) GetMetricDescriptorMetadata() *MetricDescriptor_MetricDescriptorMetadata {
	if m != nil {
		return m.MetricDescriptorMetadata
	}
	return nil
}

func (m *MetricDescriptor) GetDistributionBucketOptions() *common.Distribution_BucketOptions {
	if m != nil {
		return m.DistributionBucketOptions
	}
	return nil
}

func (m *MetricDescriptor) GetPromotedLabelKeySets() []*common.LabelKeySet {
	if m != nil {
		return m.PromotedLabelKeySets
	}
	return nil
}

func (m *MetricDescriptor) GetIndexSpec() *MetricDescriptor_IndexSpec {
	if m != nil {
		return m.IndexSpec
	}
	return nil
}

func (m *MetricDescriptor) GetIndices() *MetricDescriptor_Indices {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *MetricDescriptor) GetStorageConfig() *MetricDescriptor_StorageConfig {
	if m != nil {
		return m.StorageConfig
	}
	return nil
}

func (m *MetricDescriptor) GetBinaryIndices() *MetricDescriptor_BinaryIndices {
	if m != nil {
		return m.BinaryIndices
	}
	return nil
}

func (m *MetricDescriptor) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "MetricDescriptor"))
	}
	m.Name = fv
}

func (m *MetricDescriptor) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "MetricDescriptor"))
	}
	m.Metadata = fv
}

func (m *MetricDescriptor) SetType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "MetricDescriptor"))
	}
	m.Type = fv
}

func (m *MetricDescriptor) SetResourceTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceTypes", "MetricDescriptor"))
	}
	m.ResourceTypes = fv
}

func (m *MetricDescriptor) SetLabels(fv []*common.LabelDescriptor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Labels", "MetricDescriptor"))
	}
	m.Labels = fv
}

func (m *MetricDescriptor) SetMetricKind(fv MetricDescriptor_MetricKind) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricKind", "MetricDescriptor"))
	}
	m.MetricKind = fv
}

func (m *MetricDescriptor) SetValueType(fv MetricDescriptor_ValueType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ValueType", "MetricDescriptor"))
	}
	m.ValueType = fv
}

func (m *MetricDescriptor) SetUnit(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Unit", "MetricDescriptor"))
	}
	m.Unit = fv
}

func (m *MetricDescriptor) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "MetricDescriptor"))
	}
	m.Description = fv
}

func (m *MetricDescriptor) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "MetricDescriptor"))
	}
	m.DisplayName = fv
}

func (m *MetricDescriptor) SetMetricDescriptorMetadata(fv *MetricDescriptor_MetricDescriptorMetadata) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricDescriptorMetadata", "MetricDescriptor"))
	}
	m.MetricDescriptorMetadata = fv
}

func (m *MetricDescriptor) SetDistributionBucketOptions(fv *common.Distribution_BucketOptions) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DistributionBucketOptions", "MetricDescriptor"))
	}
	m.DistributionBucketOptions = fv
}

func (m *MetricDescriptor) SetPromotedLabelKeySets(fv []*common.LabelKeySet) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PromotedLabelKeySets", "MetricDescriptor"))
	}
	m.PromotedLabelKeySets = fv
}

func (m *MetricDescriptor) SetIndexSpec(fv *MetricDescriptor_IndexSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IndexSpec", "MetricDescriptor"))
	}
	m.IndexSpec = fv
}

func (m *MetricDescriptor) SetIndices(fv *MetricDescriptor_Indices) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Indices", "MetricDescriptor"))
	}
	m.Indices = fv
}

func (m *MetricDescriptor) SetStorageConfig(fv *MetricDescriptor_StorageConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StorageConfig", "MetricDescriptor"))
	}
	m.StorageConfig = fv
}

func (m *MetricDescriptor) SetBinaryIndices(fv *MetricDescriptor_BinaryIndices) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BinaryIndices", "MetricDescriptor"))
	}
	m.BinaryIndices = fv
}

// Additional annotations that can be used to guide the usage of a metric.
type MetricDescriptor_MetricDescriptorMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The launch stage of the metric definition.
	LaunchStage api.LaunchStage `protobuf:"varint,1,opt,name=launch_stage,json=launchStage,proto3,enum=ntt.api.LaunchStage" json:"launch_stage,omitempty" firestore:"launchStage"`
}

func (m *MetricDescriptor_MetricDescriptorMetadata) Reset() {
	*m = MetricDescriptor_MetricDescriptorMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_MetricDescriptorMetadata) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_MetricDescriptorMetadata) ProtoMessage() {}

func (m *MetricDescriptor_MetricDescriptorMetadata) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_MetricDescriptorMetadata) GotenMessage() {}

// Deprecated, Use MetricDescriptor_MetricDescriptorMetadata.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_MetricDescriptorMetadata) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 0}
}

func (m *MetricDescriptor_MetricDescriptorMetadata) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_MetricDescriptorMetadata) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_MetricDescriptorMetadata) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_MetricDescriptorMetadata) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_MetricDescriptorMetadata) GetLaunchStage() api.LaunchStage {
	if m != nil {
		return m.LaunchStage
	}
	return api.LaunchStage_LAUNCH_STAGE_UNSPECIFIED
}

func (m *MetricDescriptor_MetricDescriptorMetadata) SetLaunchStage(fv api.LaunchStage) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LaunchStage", "MetricDescriptor_MetricDescriptorMetadata"))
	}
	m.LaunchStage = fv
}

// DEPRECATED, use Indices
type MetricDescriptor_IndexSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// PerResource index
	PerResource []*MetricDescriptor_IndexSpec_PerMonitoredResource `protobuf:"bytes,1,rep,name=per_resource,json=perResource,proto3" json:"per_resource,omitempty" firestore:"perResource"`
}

func (m *MetricDescriptor_IndexSpec) Reset() {
	*m = MetricDescriptor_IndexSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_IndexSpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_IndexSpec) ProtoMessage() {}

func (m *MetricDescriptor_IndexSpec) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_IndexSpec) GotenMessage() {}

// Deprecated, Use MetricDescriptor_IndexSpec.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_IndexSpec) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 1}
}

func (m *MetricDescriptor_IndexSpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_IndexSpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_IndexSpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_IndexSpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_IndexSpec) GetPerResource() []*MetricDescriptor_IndexSpec_PerMonitoredResource {
	if m != nil {
		return m.PerResource
	}
	return nil
}

func (m *MetricDescriptor_IndexSpec) SetPerResource(fv []*MetricDescriptor_IndexSpec_PerMonitoredResource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PerResource", "MetricDescriptor_IndexSpec"))
	}
	m.PerResource = fv
}

// ResourceBindings binds MetricDescriptor with selected
// MonitoredResourceDescriptors and provides indices for TimeSeries storage.
type MetricDescriptor_Indices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Indices coming by default from application, typically populated by
	// fixtures controller
	BuiltIn *MetricDescriptor_Indices_IndexGroups `protobuf:"bytes,1,opt,name=built_in,json=builtIn,proto3" json:"built_in,omitempty" firestore:"builtIn"`
	// User defined additional indices.
	UserDefined *MetricDescriptor_Indices_IndexGroups `protobuf:"bytes,2,opt,name=user_defined,json=userDefined,proto3" json:"user_defined,omitempty" firestore:"userDefined"`
	// Automatically migrated from older specs. It should not be modified by
	// users, it can only be archived once new indices are populated (update
	// closingStatus fields to CLOSED).
	LegacyMigrated []*MetricDescriptor_Indices_NonAggregatedIndices `protobuf:"bytes,3,rep,name=legacy_migrated,json=legacyMigrated,proto3" json:"legacy_migrated,omitempty" firestore:"legacyMigrated"`
}

func (m *MetricDescriptor_Indices) Reset() {
	*m = MetricDescriptor_Indices{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_Indices) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_Indices) ProtoMessage() {}

func (m *MetricDescriptor_Indices) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_Indices) GotenMessage() {}

// Deprecated, Use MetricDescriptor_Indices.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_Indices) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 2}
}

func (m *MetricDescriptor_Indices) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_Indices) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_Indices) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_Indices) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_Indices) GetBuiltIn() *MetricDescriptor_Indices_IndexGroups {
	if m != nil {
		return m.BuiltIn
	}
	return nil
}

func (m *MetricDescriptor_Indices) GetUserDefined() *MetricDescriptor_Indices_IndexGroups {
	if m != nil {
		return m.UserDefined
	}
	return nil
}

func (m *MetricDescriptor_Indices) GetLegacyMigrated() []*MetricDescriptor_Indices_NonAggregatedIndices {
	if m != nil {
		return m.LegacyMigrated
	}
	return nil
}

func (m *MetricDescriptor_Indices) SetBuiltIn(fv *MetricDescriptor_Indices_IndexGroups) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BuiltIn", "MetricDescriptor_Indices"))
	}
	m.BuiltIn = fv
}

func (m *MetricDescriptor_Indices) SetUserDefined(fv *MetricDescriptor_Indices_IndexGroups) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UserDefined", "MetricDescriptor_Indices"))
	}
	m.UserDefined = fv
}

func (m *MetricDescriptor_Indices) SetLegacyMigrated(fv []*MetricDescriptor_Indices_NonAggregatedIndices) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LegacyMigrated", "MetricDescriptor_Indices"))
	}
	m.LegacyMigrated = fv
}

// Backend storage config
type MetricDescriptor_StorageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// whether to store raw points
	StoreRawPoints bool `protobuf:"varint,1,opt,name=store_raw_points,json=storeRawPoints,proto3" json:"store_raw_points,omitempty" firestore:"storeRawPoints"`
}

func (m *MetricDescriptor_StorageConfig) Reset() {
	*m = MetricDescriptor_StorageConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_StorageConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_StorageConfig) ProtoMessage() {}

func (m *MetricDescriptor_StorageConfig) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_StorageConfig) GotenMessage() {}

// Deprecated, Use MetricDescriptor_StorageConfig.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_StorageConfig) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 3}
}

func (m *MetricDescriptor_StorageConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_StorageConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_StorageConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_StorageConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_StorageConfig) GetStoreRawPoints() bool {
	if m != nil {
		return m.StoreRawPoints
	}
	return false
}

func (m *MetricDescriptor_StorageConfig) SetStoreRawPoints(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StoreRawPoints", "MetricDescriptor_StorageConfig"))
	}
	m.StoreRawPoints = fv
}

type MetricDescriptor_BinaryIndices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ByResources   []*MetricDescriptor_BinaryIndices_ByResourceType `protobuf:"bytes,1,rep,name=by_resources,json=byResources,proto3" json:"by_resources,omitempty" firestore:"byResources"`
	// Region to which above binary data is relevant.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty" firestore:"region"`
}

func (m *MetricDescriptor_BinaryIndices) Reset() {
	*m = MetricDescriptor_BinaryIndices{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_BinaryIndices) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_BinaryIndices) ProtoMessage() {}

func (m *MetricDescriptor_BinaryIndices) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_BinaryIndices) GotenMessage() {}

// Deprecated, Use MetricDescriptor_BinaryIndices.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_BinaryIndices) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 4}
}

func (m *MetricDescriptor_BinaryIndices) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_BinaryIndices) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_BinaryIndices) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_BinaryIndices) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_BinaryIndices) GetByResources() []*MetricDescriptor_BinaryIndices_ByResourceType {
	if m != nil {
		return m.ByResources
	}
	return nil
}

func (m *MetricDescriptor_BinaryIndices) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *MetricDescriptor_BinaryIndices) SetByResources(fv []*MetricDescriptor_BinaryIndices_ByResourceType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ByResources", "MetricDescriptor_BinaryIndices"))
	}
	m.ByResources = fv
}

func (m *MetricDescriptor_BinaryIndices) SetRegion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Region", "MetricDescriptor_BinaryIndices"))
	}
	m.Region = fv
}

type MetricDescriptor_IndexSpec_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// each label is of format: `{metric,resource}.labels.<label-key>`.
	// since resource and metric labels are mixed. Full path is required.
	PromotedLabels []string `protobuf:"bytes,2,rep,name=promoted_labels,json=promotedLabels,proto3" json:"promoted_labels,omitempty" firestore:"promotedLabels"`
}

func (m *MetricDescriptor_IndexSpec_Index) Reset() {
	*m = MetricDescriptor_IndexSpec_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_IndexSpec_Index) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_IndexSpec_Index) ProtoMessage() {}

func (m *MetricDescriptor_IndexSpec_Index) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_IndexSpec_Index) GotenMessage() {}

// Deprecated, Use MetricDescriptor_IndexSpec_Index.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_IndexSpec_Index) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *MetricDescriptor_IndexSpec_Index) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_IndexSpec_Index) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_IndexSpec_Index) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_IndexSpec_Index) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_IndexSpec_Index) GetPromotedLabels() []string {
	if m != nil {
		return m.PromotedLabels
	}
	return nil
}

func (m *MetricDescriptor_IndexSpec_Index) SetPromotedLabels(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PromotedLabels", "MetricDescriptor_IndexSpec_Index"))
	}
	m.PromotedLabels = fv
}

type MetricDescriptor_IndexSpec_PerMonitoredResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Resource      *monitored_resource_descriptor.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=resource,proto3" json:"resource,omitempty" firestore:"resource"`
	// List of indices for given metric and resource pair
	Indices []*MetricDescriptor_IndexSpec_Index `protobuf:"bytes,2,rep,name=indices,proto3" json:"indices,omitempty" firestore:"indices"`
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) Reset() {
	*m = MetricDescriptor_IndexSpec_PerMonitoredResource{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_IndexSpec_PerMonitoredResource) ProtoMessage() {}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_IndexSpec_PerMonitoredResource) GotenMessage() {}

// Deprecated, Use MetricDescriptor_IndexSpec_PerMonitoredResource.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_IndexSpec_PerMonitoredResource) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) GetResource() *monitored_resource_descriptor.Reference {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) GetIndices() []*MetricDescriptor_IndexSpec_Index {
	if m != nil {
		return m.Indices
	}
	return nil
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) SetResource(fv *monitored_resource_descriptor.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resource", "MetricDescriptor_IndexSpec_PerMonitoredResource"))
	}
	m.Resource = fv
}

func (m *MetricDescriptor_IndexSpec_PerMonitoredResource) SetIndices(fv []*MetricDescriptor_IndexSpec_Index) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Indices", "MetricDescriptor_IndexSpec_PerMonitoredResource"))
	}
	m.Indices = fv
}

// LabelsGroup represents set of labels in resource and metric.
// It forms part of the index generators (non and pre aggregated).
type MetricDescriptor_Indices_LabelsGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Identifier of the group, used as part of index name and during
	// update validations.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// List of metric keys in the group.
	MetricKeys []string `protobuf:"bytes,2,rep,name=metric_keys,json=metricKeys,proto3" json:"metric_keys,omitempty" firestore:"metricKeys"`
	// List of resource keys in the group.
	ResourceKeys []string `protobuf:"bytes,3,rep,name=resource_keys,json=resourceKeys,proto3" json:"resource_keys,omitempty" firestore:"resourceKeys"`
	// Closing status should be set when indices used by this group is no
	// longer desirable.
	ClosingStatus MetricDescriptor_Indices_CloseStatus `protobuf:"varint,4,opt,name=closing_status,json=closingStatus,proto3,enum=ntt.monitoring.v4.MetricDescriptor_Indices_CloseStatus" json:"closing_status,omitempty" firestore:"closingStatus"`
}

func (m *MetricDescriptor_Indices_LabelsGroup) Reset() {
	*m = MetricDescriptor_Indices_LabelsGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_Indices_LabelsGroup) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_Indices_LabelsGroup) ProtoMessage() {}

func (m *MetricDescriptor_Indices_LabelsGroup) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_Indices_LabelsGroup) GotenMessage() {}

// Deprecated, Use MetricDescriptor_Indices_LabelsGroup.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_Indices_LabelsGroup) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (m *MetricDescriptor_Indices_LabelsGroup) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_Indices_LabelsGroup) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_Indices_LabelsGroup) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_Indices_LabelsGroup) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_Indices_LabelsGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor_Indices_LabelsGroup) GetMetricKeys() []string {
	if m != nil {
		return m.MetricKeys
	}
	return nil
}

func (m *MetricDescriptor_Indices_LabelsGroup) GetResourceKeys() []string {
	if m != nil {
		return m.ResourceKeys
	}
	return nil
}

func (m *MetricDescriptor_Indices_LabelsGroup) GetClosingStatus() MetricDescriptor_Indices_CloseStatus {
	if m != nil {
		return m.ClosingStatus
	}
	return MetricDescriptor_Indices_UNDEFINED
}

func (m *MetricDescriptor_Indices_LabelsGroup) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "MetricDescriptor_Indices_LabelsGroup"))
	}
	m.Name = fv
}

func (m *MetricDescriptor_Indices_LabelsGroup) SetMetricKeys(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricKeys", "MetricDescriptor_Indices_LabelsGroup"))
	}
	m.MetricKeys = fv
}

func (m *MetricDescriptor_Indices_LabelsGroup) SetResourceKeys(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceKeys", "MetricDescriptor_Indices_LabelsGroup"))
	}
	m.ResourceKeys = fv
}

func (m *MetricDescriptor_Indices_LabelsGroup) SetClosingStatus(fv MetricDescriptor_Indices_CloseStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClosingStatus", "MetricDescriptor_Indices_LabelsGroup"))
	}
	m.ClosingStatus = fv
}

// PaginationView is used by PaginationIndices. It indicates which labels
// in metric/resource descriptor are kept for filter purpose, and which
// are "ranked" by.
type MetricDescriptor_Indices_PaginationView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Identifier of the group, used as part of index name and during
	// update validations.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// List of metric keys that can optionally be used in filter.
	FilterableMetricKeys []string `protobuf:"bytes,2,rep,name=filterable_metric_keys,json=filterableMetricKeys,proto3" json:"filterable_metric_keys,omitempty" firestore:"filterableMetricKeys"`
	// List of resource keys that can optionally be used in filter.
	FilterableResourceKeys []string `protobuf:"bytes,3,rep,name=filterable_resource_keys,json=filterableResourceKeys,proto3" json:"filterable_resource_keys,omitempty" firestore:"filterableResourceKeys"`
	// List of metric keys that will be part of "paginated" key (for ranking
	// purpose). Provided labels cannot be used for filtering.
	PaginatedMetricKeys []string `protobuf:"bytes,4,rep,name=paginated_metric_keys,json=paginatedMetricKeys,proto3" json:"paginated_metric_keys,omitempty" firestore:"paginatedMetricKeys"`
	// List of resource keys that will be part of "paginated" key (for ranking
	// purpose). Provided labels cannot be used for filtering.
	PaginatedResourceKeys []string `protobuf:"bytes,5,rep,name=paginated_resource_keys,json=paginatedResourceKeys,proto3" json:"paginated_resource_keys,omitempty" firestore:"paginatedResourceKeys"`
	// Closing status should be set when indices used by this group is no
	// longer desirable.
	ClosingStatus MetricDescriptor_Indices_CloseStatus `protobuf:"varint,6,opt,name=closing_status,json=closingStatus,proto3,enum=ntt.monitoring.v4.MetricDescriptor_Indices_CloseStatus" json:"closing_status,omitempty" firestore:"closingStatus"`
}

func (m *MetricDescriptor_Indices_PaginationView) Reset() {
	*m = MetricDescriptor_Indices_PaginationView{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_Indices_PaginationView) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_Indices_PaginationView) ProtoMessage() {}

func (m *MetricDescriptor_Indices_PaginationView) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_Indices_PaginationView) GotenMessage() {}

// Deprecated, Use MetricDescriptor_Indices_PaginationView.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_Indices_PaginationView) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (m *MetricDescriptor_Indices_PaginationView) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_Indices_PaginationView) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_Indices_PaginationView) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_Indices_PaginationView) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_Indices_PaginationView) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor_Indices_PaginationView) GetFilterableMetricKeys() []string {
	if m != nil {
		return m.FilterableMetricKeys
	}
	return nil
}

func (m *MetricDescriptor_Indices_PaginationView) GetFilterableResourceKeys() []string {
	if m != nil {
		return m.FilterableResourceKeys
	}
	return nil
}

func (m *MetricDescriptor_Indices_PaginationView) GetPaginatedMetricKeys() []string {
	if m != nil {
		return m.PaginatedMetricKeys
	}
	return nil
}

func (m *MetricDescriptor_Indices_PaginationView) GetPaginatedResourceKeys() []string {
	if m != nil {
		return m.PaginatedResourceKeys
	}
	return nil
}

func (m *MetricDescriptor_Indices_PaginationView) GetClosingStatus() MetricDescriptor_Indices_CloseStatus {
	if m != nil {
		return m.ClosingStatus
	}
	return MetricDescriptor_Indices_UNDEFINED
}

func (m *MetricDescriptor_Indices_PaginationView) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "MetricDescriptor_Indices_PaginationView"))
	}
	m.Name = fv
}

func (m *MetricDescriptor_Indices_PaginationView) SetFilterableMetricKeys(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FilterableMetricKeys", "MetricDescriptor_Indices_PaginationView"))
	}
	m.FilterableMetricKeys = fv
}

func (m *MetricDescriptor_Indices_PaginationView) SetFilterableResourceKeys(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FilterableResourceKeys", "MetricDescriptor_Indices_PaginationView"))
	}
	m.FilterableResourceKeys = fv
}

func (m *MetricDescriptor_Indices_PaginationView) SetPaginatedMetricKeys(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PaginatedMetricKeys", "MetricDescriptor_Indices_PaginationView"))
	}
	m.PaginatedMetricKeys = fv
}

func (m *MetricDescriptor_Indices_PaginationView) SetPaginatedResourceKeys(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PaginatedResourceKeys", "MetricDescriptor_Indices_PaginationView"))
	}
	m.PaginatedResourceKeys = fv
}

func (m *MetricDescriptor_Indices_PaginationView) SetClosingStatus(fv MetricDescriptor_Indices_CloseStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClosingStatus", "MetricDescriptor_Indices_PaginationView"))
	}
	m.ClosingStatus = fv
}

// AggregationsGroup groups aggregations required for pre-aggregated
// indices.
type MetricDescriptor_Indices_AggregationsGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of the group (identifier). Used for validating updates.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// List of potential values for perSeriesAligner parameter.
	// It must be specified.
	PerSeriesAligners []common.Aggregation_Aligner `protobuf:"varint,2,rep,packed,name=per_series_aligners,json=perSeriesAligners,proto3,enum=ntt.monitoring.v4.Aggregation_Aligner" json:"per_series_aligners,omitempty" firestore:"perSeriesAligners"`
	// List of potential values for crossSeriesReducer parameter.
	// It can be left empty if we want to support large amount of values.
	CrossSeriesReducers []common.Aggregation_Reducer `protobuf:"varint,3,rep,packed,name=cross_series_reducers,json=crossSeriesReducers,proto3,enum=ntt.monitoring.v4.Aggregation_Reducer" json:"cross_series_reducers,omitempty" firestore:"crossSeriesReducers"`
	// Closing status, if this group is no longer desired.
	ClosingStatus MetricDescriptor_Indices_CloseStatus `protobuf:"varint,4,opt,name=closing_status,json=closingStatus,proto3,enum=ntt.monitoring.v4.MetricDescriptor_Indices_CloseStatus" json:"closing_status,omitempty" firestore:"closingStatus"`
	// This field is automatically computed and cannot be set by users.
	// It displays list of aligners used by underlying storage. May not
	// exactly match to requested aligners.
	// TODO: Support output_only annotation for sub-array items
	StorageAligners []common.Aggregation_Aligner `protobuf:"varint,5,rep,packed,name=storage_aligners,json=storageAligners,proto3,enum=ntt.monitoring.v4.Aggregation_Aligner" json:"storage_aligners,omitempty" firestore:"storageAligners"`
}

func (m *MetricDescriptor_Indices_AggregationsGroup) Reset() {
	*m = MetricDescriptor_Indices_AggregationsGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_Indices_AggregationsGroup) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_Indices_AggregationsGroup) ProtoMessage() {}

func (m *MetricDescriptor_Indices_AggregationsGroup) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_Indices_AggregationsGroup) GotenMessage() {}

// Deprecated, Use MetricDescriptor_Indices_AggregationsGroup.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_Indices_AggregationsGroup) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (m *MetricDescriptor_Indices_AggregationsGroup) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_Indices_AggregationsGroup) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_Indices_AggregationsGroup) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_Indices_AggregationsGroup) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_Indices_AggregationsGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor_Indices_AggregationsGroup) GetPerSeriesAligners() []common.Aggregation_Aligner {
	if m != nil {
		return m.PerSeriesAligners
	}
	return nil
}

func (m *MetricDescriptor_Indices_AggregationsGroup) GetCrossSeriesReducers() []common.Aggregation_Reducer {
	if m != nil {
		return m.CrossSeriesReducers
	}
	return nil
}

func (m *MetricDescriptor_Indices_AggregationsGroup) GetClosingStatus() MetricDescriptor_Indices_CloseStatus {
	if m != nil {
		return m.ClosingStatus
	}
	return MetricDescriptor_Indices_UNDEFINED
}

func (m *MetricDescriptor_Indices_AggregationsGroup) GetStorageAligners() []common.Aggregation_Aligner {
	if m != nil {
		return m.StorageAligners
	}
	return nil
}

func (m *MetricDescriptor_Indices_AggregationsGroup) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "MetricDescriptor_Indices_AggregationsGroup"))
	}
	m.Name = fv
}

func (m *MetricDescriptor_Indices_AggregationsGroup) SetPerSeriesAligners(fv []common.Aggregation_Aligner) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PerSeriesAligners", "MetricDescriptor_Indices_AggregationsGroup"))
	}
	m.PerSeriesAligners = fv
}

func (m *MetricDescriptor_Indices_AggregationsGroup) SetCrossSeriesReducers(fv []common.Aggregation_Reducer) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CrossSeriesReducers", "MetricDescriptor_Indices_AggregationsGroup"))
	}
	m.CrossSeriesReducers = fv
}

func (m *MetricDescriptor_Indices_AggregationsGroup) SetClosingStatus(fv MetricDescriptor_Indices_CloseStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClosingStatus", "MetricDescriptor_Indices_AggregationsGroup"))
	}
	m.ClosingStatus = fv
}

func (m *MetricDescriptor_Indices_AggregationsGroup) SetStorageAligners(fv []common.Aggregation_Aligner) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StorageAligners", "MetricDescriptor_Indices_AggregationsGroup"))
	}
	m.StorageAligners = fv
}

// SortingFunction is a function used for paginable indices.
type MetricDescriptor_Indices_SortingFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// name of the aligner-reducer function
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Aligner function
	Aligner common.Aggregation_Aligner `protobuf:"varint,2,opt,name=aligner,proto3,enum=ntt.monitoring.v4.Aggregation_Aligner" json:"aligner,omitempty" firestore:"aligner"`
	// Reducer function, merging values within paginable label set.
	// Resulting value type must be either INT or DOUBLE,
	// DISTRIBUTION is not supported.
	Reducer common.Aggregation_Reducer `protobuf:"varint,3,opt,name=reducer,proto3,enum=ntt.monitoring.v4.Aggregation_Reducer" json:"reducer,omitempty" firestore:"reducer"`
	// Closing status of this aligner reducer function.
	ClosingStatus MetricDescriptor_Indices_CloseStatus               `protobuf:"varint,4,opt,name=closing_status,json=closingStatus,proto3,enum=ntt.monitoring.v4.MetricDescriptor_Indices_CloseStatus" json:"closing_status,omitempty" firestore:"closingStatus"`
	Sorting       MetricDescriptor_Indices_SortingFunction_Direction `protobuf:"varint,5,opt,name=sorting,proto3,enum=ntt.monitoring.v4.MetricDescriptor_Indices_SortingFunction_Direction" json:"sorting,omitempty" firestore:"sorting"`
}

func (m *MetricDescriptor_Indices_SortingFunction) Reset() {
	*m = MetricDescriptor_Indices_SortingFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_Indices_SortingFunction) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_Indices_SortingFunction) ProtoMessage() {}

func (m *MetricDescriptor_Indices_SortingFunction) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_Indices_SortingFunction) GotenMessage() {}

// Deprecated, Use MetricDescriptor_Indices_SortingFunction.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_Indices_SortingFunction) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 2, 3}
}

func (m *MetricDescriptor_Indices_SortingFunction) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_Indices_SortingFunction) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_Indices_SortingFunction) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_Indices_SortingFunction) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_Indices_SortingFunction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor_Indices_SortingFunction) GetAligner() common.Aggregation_Aligner {
	if m != nil {
		return m.Aligner
	}
	return common.Aggregation_ALIGN_NONE
}

func (m *MetricDescriptor_Indices_SortingFunction) GetReducer() common.Aggregation_Reducer {
	if m != nil {
		return m.Reducer
	}
	return common.Aggregation_REDUCE_NONE
}

func (m *MetricDescriptor_Indices_SortingFunction) GetClosingStatus() MetricDescriptor_Indices_CloseStatus {
	if m != nil {
		return m.ClosingStatus
	}
	return MetricDescriptor_Indices_UNDEFINED
}

func (m *MetricDescriptor_Indices_SortingFunction) GetSorting() MetricDescriptor_Indices_SortingFunction_Direction {
	if m != nil {
		return m.Sorting
	}
	return MetricDescriptor_Indices_SortingFunction_UNDEFINED
}

func (m *MetricDescriptor_Indices_SortingFunction) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "MetricDescriptor_Indices_SortingFunction"))
	}
	m.Name = fv
}

func (m *MetricDescriptor_Indices_SortingFunction) SetAligner(fv common.Aggregation_Aligner) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Aligner", "MetricDescriptor_Indices_SortingFunction"))
	}
	m.Aligner = fv
}

func (m *MetricDescriptor_Indices_SortingFunction) SetReducer(fv common.Aggregation_Reducer) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reducer", "MetricDescriptor_Indices_SortingFunction"))
	}
	m.Reducer = fv
}

func (m *MetricDescriptor_Indices_SortingFunction) SetClosingStatus(fv MetricDescriptor_Indices_CloseStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClosingStatus", "MetricDescriptor_Indices_SortingFunction"))
	}
	m.ClosingStatus = fv
}

func (m *MetricDescriptor_Indices_SortingFunction) SetSorting(fv MetricDescriptor_Indices_SortingFunction_Direction) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Sorting", "MetricDescriptor_Indices_SortingFunction"))
	}
	m.Sorting = fv
}

// PreAggregatedIndices is a generator of pre-aggregated indices.
// One pre-aggregated index is generated per combination of
// resource type, partition label set, filter/group label set,
// and unique storage aligner (computed from supported aggregations).
type MetricDescriptor_Indices_PreAggregatedIndices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of the group
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// All resource types in the group
	ResourceTypes []string `protobuf:"bytes,2,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty" firestore:"resourceTypes"`
	// All partition label sets. Each is generating index per
	// mentioned resource type, filter/group label set and
	// aligner.
	// Index, to be used, requires specifying all labels mentioned
	// in partition.
	PartitionLabelSets []*MetricDescriptor_Indices_LabelsGroup `protobuf:"bytes,3,rep,name=partition_label_sets,json=partitionLabelSets,proto3" json:"partition_label_sets,omitempty" firestore:"partitionLabelSets"`
	// All label sets containing labels that can be used
	// in filter/groupBy fields (other than partition).
	// Index, to be used, must not contain any label
	// in filter/groupBy not present in the filter/group labels set.
	FilterAndGroupLabelSets []*MetricDescriptor_Indices_LabelsGroup `protobuf:"bytes,4,rep,name=filter_and_group_label_sets,json=filterAndGroupLabelSets,proto3" json:"filter_and_group_label_sets,omitempty" firestore:"filterAndGroupLabelSets"`
	// List of all aggregations required by users.
	SupportedAggregations []*MetricDescriptor_Indices_AggregationsGroup `protobuf:"bytes,5,rep,name=supported_aggregations,json=supportedAggregations,proto3" json:"supported_aggregations,omitempty" firestore:"supportedAggregations"`
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) Reset() {
	*m = MetricDescriptor_Indices_PreAggregatedIndices{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_Indices_PreAggregatedIndices) ProtoMessage() {}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_Indices_PreAggregatedIndices) GotenMessage() {}

// Deprecated, Use MetricDescriptor_Indices_PreAggregatedIndices.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_Indices_PreAggregatedIndices) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 2, 4}
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) GetPartitionLabelSets() []*MetricDescriptor_Indices_LabelsGroup {
	if m != nil {
		return m.PartitionLabelSets
	}
	return nil
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) GetFilterAndGroupLabelSets() []*MetricDescriptor_Indices_LabelsGroup {
	if m != nil {
		return m.FilterAndGroupLabelSets
	}
	return nil
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) GetSupportedAggregations() []*MetricDescriptor_Indices_AggregationsGroup {
	if m != nil {
		return m.SupportedAggregations
	}
	return nil
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "MetricDescriptor_Indices_PreAggregatedIndices"))
	}
	m.Name = fv
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) SetResourceTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceTypes", "MetricDescriptor_Indices_PreAggregatedIndices"))
	}
	m.ResourceTypes = fv
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) SetPartitionLabelSets(fv []*MetricDescriptor_Indices_LabelsGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PartitionLabelSets", "MetricDescriptor_Indices_PreAggregatedIndices"))
	}
	m.PartitionLabelSets = fv
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) SetFilterAndGroupLabelSets(fv []*MetricDescriptor_Indices_LabelsGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FilterAndGroupLabelSets", "MetricDescriptor_Indices_PreAggregatedIndices"))
	}
	m.FilterAndGroupLabelSets = fv
}

func (m *MetricDescriptor_Indices_PreAggregatedIndices) SetSupportedAggregations(fv []*MetricDescriptor_Indices_AggregationsGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SupportedAggregations", "MetricDescriptor_Indices_PreAggregatedIndices"))
	}
	m.SupportedAggregations = fv
}

// NonAggregatedIndices is a generator of non-aggregated indices.
// One non-aggregated index is generated per combination of
// resource type by partition label set.
type MetricDescriptor_Indices_NonAggregatedIndices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of the whole group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Resource types in this group.
	ResourceTypes []string `protobuf:"bytes,2,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty" firestore:"resourceTypes"`
	// All partition label sets. Each is generating index per
	// mentioned resource type.
	// Index, to be used, requires specifying all labels mentioned
	// in partition.
	PartitionLabelSets []*MetricDescriptor_Indices_LabelsGroup `protobuf:"bytes,3,rep,name=partition_label_sets,json=partitionLabelSets,proto3" json:"partition_label_sets,omitempty" firestore:"partitionLabelSets"`
}

func (m *MetricDescriptor_Indices_NonAggregatedIndices) Reset() {
	*m = MetricDescriptor_Indices_NonAggregatedIndices{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_Indices_NonAggregatedIndices) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_Indices_NonAggregatedIndices) ProtoMessage() {}

func (m *MetricDescriptor_Indices_NonAggregatedIndices) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_Indices_NonAggregatedIndices) GotenMessage() {}

// Deprecated, Use MetricDescriptor_Indices_NonAggregatedIndices.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_Indices_NonAggregatedIndices) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 2, 5}
}

func (m *MetricDescriptor_Indices_NonAggregatedIndices) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_Indices_NonAggregatedIndices) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_Indices_NonAggregatedIndices) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_Indices_NonAggregatedIndices) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_Indices_NonAggregatedIndices) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor_Indices_NonAggregatedIndices) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *MetricDescriptor_Indices_NonAggregatedIndices) GetPartitionLabelSets() []*MetricDescriptor_Indices_LabelsGroup {
	if m != nil {
		return m.PartitionLabelSets
	}
	return nil
}

func (m *MetricDescriptor_Indices_NonAggregatedIndices) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "MetricDescriptor_Indices_NonAggregatedIndices"))
	}
	m.Name = fv
}

func (m *MetricDescriptor_Indices_NonAggregatedIndices) SetResourceTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceTypes", "MetricDescriptor_Indices_NonAggregatedIndices"))
	}
	m.ResourceTypes = fv
}

func (m *MetricDescriptor_Indices_NonAggregatedIndices) SetPartitionLabelSets(fv []*MetricDescriptor_Indices_LabelsGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PartitionLabelSets", "MetricDescriptor_Indices_NonAggregatedIndices"))
	}
	m.PartitionLabelSets = fv
}

// PaginationIndices are special pre-aggregated indices.
// To access this index, it is necessary to include in the filter
// some partition label set. Paginable labels MUST not be used in filter,
// and have no effect in groupBy (always included).
type MetricDescriptor_Indices_PaginationIndices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of the whole group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Resource types in this group.
	ResourceTypes []string `protobuf:"bytes,2,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty" firestore:"resourceTypes"`
	// All partition label sets. Each is generating index per
	// mentioned resource type.
	// Index, to be used, requires specifying all labels mentioned
	// in partition.
	// Each partition set is matched with each view when generating final
	// views.
	PartitionLabelSets []*MetricDescriptor_Indices_LabelsGroup `protobuf:"bytes,3,rep,name=partition_label_sets,json=partitionLabelSets,proto3" json:"partition_label_sets,omitempty" firestore:"partitionLabelSets"`
	// All views describing label sets.
	Views []*MetricDescriptor_Indices_PaginationView `protobuf:"bytes,5,rep,name=views,proto3" json:"views,omitempty" firestore:"views"`
	// List of functions applied to every partition/views in the group.
	Functions []*MetricDescriptor_Indices_SortingFunction `protobuf:"bytes,6,rep,name=functions,proto3" json:"functions,omitempty" firestore:"functions"`
}

func (m *MetricDescriptor_Indices_PaginationIndices) Reset() {
	*m = MetricDescriptor_Indices_PaginationIndices{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_Indices_PaginationIndices) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_Indices_PaginationIndices) ProtoMessage() {}

func (m *MetricDescriptor_Indices_PaginationIndices) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_Indices_PaginationIndices) GotenMessage() {}

// Deprecated, Use MetricDescriptor_Indices_PaginationIndices.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_Indices_PaginationIndices) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 2, 6}
}

func (m *MetricDescriptor_Indices_PaginationIndices) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_Indices_PaginationIndices) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_Indices_PaginationIndices) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_Indices_PaginationIndices) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_Indices_PaginationIndices) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor_Indices_PaginationIndices) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *MetricDescriptor_Indices_PaginationIndices) GetPartitionLabelSets() []*MetricDescriptor_Indices_LabelsGroup {
	if m != nil {
		return m.PartitionLabelSets
	}
	return nil
}

func (m *MetricDescriptor_Indices_PaginationIndices) GetViews() []*MetricDescriptor_Indices_PaginationView {
	if m != nil {
		return m.Views
	}
	return nil
}

func (m *MetricDescriptor_Indices_PaginationIndices) GetFunctions() []*MetricDescriptor_Indices_SortingFunction {
	if m != nil {
		return m.Functions
	}
	return nil
}

func (m *MetricDescriptor_Indices_PaginationIndices) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "MetricDescriptor_Indices_PaginationIndices"))
	}
	m.Name = fv
}

func (m *MetricDescriptor_Indices_PaginationIndices) SetResourceTypes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceTypes", "MetricDescriptor_Indices_PaginationIndices"))
	}
	m.ResourceTypes = fv
}

func (m *MetricDescriptor_Indices_PaginationIndices) SetPartitionLabelSets(fv []*MetricDescriptor_Indices_LabelsGroup) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PartitionLabelSets", "MetricDescriptor_Indices_PaginationIndices"))
	}
	m.PartitionLabelSets = fv
}

func (m *MetricDescriptor_Indices_PaginationIndices) SetViews(fv []*MetricDescriptor_Indices_PaginationView) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Views", "MetricDescriptor_Indices_PaginationIndices"))
	}
	m.Views = fv
}

func (m *MetricDescriptor_Indices_PaginationIndices) SetFunctions(fv []*MetricDescriptor_Indices_SortingFunction) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Functions", "MetricDescriptor_Indices_PaginationIndices"))
	}
	m.Functions = fv
}

// Grouped indices
type MetricDescriptor_Indices_IndexGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Pre-aggregated index sets.
	PreAggregatedIndices []*MetricDescriptor_Indices_PreAggregatedIndices `protobuf:"bytes,1,rep,name=pre_aggregated_indices,json=preAggregatedIndices,proto3" json:"pre_aggregated_indices,omitempty" firestore:"preAggregatedIndices"`
	// Non-aggregated index sets.
	NonAggregatedIndices []*MetricDescriptor_Indices_NonAggregatedIndices `protobuf:"bytes,2,rep,name=non_aggregated_indices,json=nonAggregatedIndices,proto3" json:"non_aggregated_indices,omitempty" firestore:"nonAggregatedIndices"`
	// Pagination indices.
	PaginationIndices []*MetricDescriptor_Indices_PaginationIndices `protobuf:"bytes,3,rep,name=pagination_indices,json=paginationIndices,proto3" json:"pagination_indices,omitempty" firestore:"paginationIndices"`
}

func (m *MetricDescriptor_Indices_IndexGroups) Reset() {
	*m = MetricDescriptor_Indices_IndexGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_Indices_IndexGroups) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_Indices_IndexGroups) ProtoMessage() {}

func (m *MetricDescriptor_Indices_IndexGroups) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_Indices_IndexGroups) GotenMessage() {}

// Deprecated, Use MetricDescriptor_Indices_IndexGroups.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_Indices_IndexGroups) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 2, 7}
}

func (m *MetricDescriptor_Indices_IndexGroups) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_Indices_IndexGroups) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_Indices_IndexGroups) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_Indices_IndexGroups) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_Indices_IndexGroups) GetPreAggregatedIndices() []*MetricDescriptor_Indices_PreAggregatedIndices {
	if m != nil {
		return m.PreAggregatedIndices
	}
	return nil
}

func (m *MetricDescriptor_Indices_IndexGroups) GetNonAggregatedIndices() []*MetricDescriptor_Indices_NonAggregatedIndices {
	if m != nil {
		return m.NonAggregatedIndices
	}
	return nil
}

func (m *MetricDescriptor_Indices_IndexGroups) GetPaginationIndices() []*MetricDescriptor_Indices_PaginationIndices {
	if m != nil {
		return m.PaginationIndices
	}
	return nil
}

func (m *MetricDescriptor_Indices_IndexGroups) SetPreAggregatedIndices(fv []*MetricDescriptor_Indices_PreAggregatedIndices) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PreAggregatedIndices", "MetricDescriptor_Indices_IndexGroups"))
	}
	m.PreAggregatedIndices = fv
}

func (m *MetricDescriptor_Indices_IndexGroups) SetNonAggregatedIndices(fv []*MetricDescriptor_Indices_NonAggregatedIndices) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NonAggregatedIndices", "MetricDescriptor_Indices_IndexGroups"))
	}
	m.NonAggregatedIndices = fv
}

func (m *MetricDescriptor_Indices_IndexGroups) SetPaginationIndices(fv []*MetricDescriptor_Indices_PaginationIndices) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PaginationIndices", "MetricDescriptor_Indices_IndexGroups"))
	}
	m.PaginationIndices = fv
}

type MetricDescriptor_BinaryIndices_PreAggregatedIndex struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	KeyData         []byte   `protobuf:"bytes,1,opt,name=key_data,json=keyData,proto3" json:"key_data,omitempty" firestore:"keyData"`
	WritingAligners [][]byte `protobuf:"bytes,2,rep,name=writing_aligners,json=writingAligners,proto3" json:"writing_aligners,omitempty" firestore:"writingAligners"`
	ClosedAligners  [][]byte `protobuf:"bytes,3,rep,name=closed_aligners,json=closedAligners,proto3" json:"closed_aligners,omitempty" firestore:"closedAligners"`
}

func (m *MetricDescriptor_BinaryIndices_PreAggregatedIndex) Reset() {
	*m = MetricDescriptor_BinaryIndices_PreAggregatedIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_BinaryIndices_PreAggregatedIndex) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_BinaryIndices_PreAggregatedIndex) ProtoMessage() {}

func (m *MetricDescriptor_BinaryIndices_PreAggregatedIndex) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_BinaryIndices_PreAggregatedIndex) GotenMessage() {}

// Deprecated, Use MetricDescriptor_BinaryIndices_PreAggregatedIndex.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_BinaryIndices_PreAggregatedIndex) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (m *MetricDescriptor_BinaryIndices_PreAggregatedIndex) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_BinaryIndices_PreAggregatedIndex) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_BinaryIndices_PreAggregatedIndex) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_BinaryIndices_PreAggregatedIndex) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_BinaryIndices_PreAggregatedIndex) GetKeyData() []byte {
	if m != nil {
		return m.KeyData
	}
	return nil
}

func (m *MetricDescriptor_BinaryIndices_PreAggregatedIndex) GetWritingAligners() [][]byte {
	if m != nil {
		return m.WritingAligners
	}
	return nil
}

func (m *MetricDescriptor_BinaryIndices_PreAggregatedIndex) GetClosedAligners() [][]byte {
	if m != nil {
		return m.ClosedAligners
	}
	return nil
}

func (m *MetricDescriptor_BinaryIndices_PreAggregatedIndex) SetKeyData(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "KeyData", "MetricDescriptor_BinaryIndices_PreAggregatedIndex"))
	}
	m.KeyData = fv
}

func (m *MetricDescriptor_BinaryIndices_PreAggregatedIndex) SetWritingAligners(fv [][]byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "WritingAligners", "MetricDescriptor_BinaryIndices_PreAggregatedIndex"))
	}
	m.WritingAligners = fv
}

func (m *MetricDescriptor_BinaryIndices_PreAggregatedIndex) SetClosedAligners(fv [][]byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClosedAligners", "MetricDescriptor_BinaryIndices_PreAggregatedIndex"))
	}
	m.ClosedAligners = fv
}

type MetricDescriptor_BinaryIndices_PaginatingIndex struct {
	state            protoimpl.MessageState
	sizeCache        protoimpl.SizeCache
	unknownFields    protoimpl.UnknownFields
	KeyData          []byte   `protobuf:"bytes,1,opt,name=key_data,json=keyData,proto3" json:"key_data,omitempty" firestore:"keyData"`
	WritingFunctions [][]byte `protobuf:"bytes,2,rep,name=writing_functions,json=writingFunctions,proto3" json:"writing_functions,omitempty" firestore:"writingFunctions"`
	ClosedFunctions  [][]byte `protobuf:"bytes,3,rep,name=closed_functions,json=closedFunctions,proto3" json:"closed_functions,omitempty" firestore:"closedFunctions"`
}

func (m *MetricDescriptor_BinaryIndices_PaginatingIndex) Reset() {
	*m = MetricDescriptor_BinaryIndices_PaginatingIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_BinaryIndices_PaginatingIndex) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_BinaryIndices_PaginatingIndex) ProtoMessage() {}

func (m *MetricDescriptor_BinaryIndices_PaginatingIndex) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_BinaryIndices_PaginatingIndex) GotenMessage() {}

// Deprecated, Use MetricDescriptor_BinaryIndices_PaginatingIndex.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_BinaryIndices_PaginatingIndex) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 4, 1}
}

func (m *MetricDescriptor_BinaryIndices_PaginatingIndex) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_BinaryIndices_PaginatingIndex) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_BinaryIndices_PaginatingIndex) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_BinaryIndices_PaginatingIndex) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_BinaryIndices_PaginatingIndex) GetKeyData() []byte {
	if m != nil {
		return m.KeyData
	}
	return nil
}

func (m *MetricDescriptor_BinaryIndices_PaginatingIndex) GetWritingFunctions() [][]byte {
	if m != nil {
		return m.WritingFunctions
	}
	return nil
}

func (m *MetricDescriptor_BinaryIndices_PaginatingIndex) GetClosedFunctions() [][]byte {
	if m != nil {
		return m.ClosedFunctions
	}
	return nil
}

func (m *MetricDescriptor_BinaryIndices_PaginatingIndex) SetKeyData(fv []byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "KeyData", "MetricDescriptor_BinaryIndices_PaginatingIndex"))
	}
	m.KeyData = fv
}

func (m *MetricDescriptor_BinaryIndices_PaginatingIndex) SetWritingFunctions(fv [][]byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "WritingFunctions", "MetricDescriptor_BinaryIndices_PaginatingIndex"))
	}
	m.WritingFunctions = fv
}

func (m *MetricDescriptor_BinaryIndices_PaginatingIndex) SetClosedFunctions(fv [][]byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClosedFunctions", "MetricDescriptor_BinaryIndices_PaginatingIndex"))
	}
	m.ClosedFunctions = fv
}

type MetricDescriptor_BinaryIndices_ByResourceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// resource.type in string version, but integer is also
	// encoded in every other item for convenience.
	ResourceType string `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty" firestore:"resourceType"`
	// List of aggregation encoders, used by streaming job
	// when computing pre-aggregated values. Last item contains
	// most recent version of aggregation. Previous entries
	// will be closed after some time and removed.
	AggsEncoder [][]byte `protobuf:"bytes,2,rep,name=aggs_encoder,json=aggsEncoder,proto3" json:"aggs_encoder,omitempty" firestore:"aggsEncoder"`
	// List of pre-aggregated indices with per-storage-aligner information.
	// These type of indices are more complex due to presence of aligners
	// with their own liveness status.
	PreAggregatedIndices []*MetricDescriptor_BinaryIndices_PreAggregatedIndex `protobuf:"bytes,3,rep,name=pre_aggregated_indices,json=preAggregatedIndices,proto3" json:"pre_aggregated_indices,omitempty" firestore:"preAggregatedIndices"`
	PaginatingIndices    []*MetricDescriptor_BinaryIndices_PaginatingIndex    `protobuf:"bytes,6,rep,name=paginating_indices,json=paginatingIndices,proto3" json:"paginating_indices,omitempty" firestore:"paginatingIndices"`
	// Non aggregated indices. Bytes contain identifier with all promoted
	// keys and name part positions.
	NonAggregatedIndices [][]byte `protobuf:"bytes,4,rep,name=non_aggregated_indices,json=nonAggregatedIndices,proto3" json:"non_aggregated_indices,omitempty" firestore:"nonAggregatedIndices"`
	// index name parts
	NameParts []string `protobuf:"bytes,5,rep,name=name_parts,json=nameParts,proto3" json:"name_parts,omitempty" firestore:"nameParts"`
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) Reset() {
	*m = MetricDescriptor_BinaryIndices_ByResourceType{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MetricDescriptor_BinaryIndices_ByResourceType) ProtoMessage() {}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MetricDescriptor_BinaryIndices_ByResourceType) GotenMessage() {}

// Deprecated, Use MetricDescriptor_BinaryIndices_ByResourceType.ProtoReflect.Descriptor instead.
func (*MetricDescriptor_BinaryIndices_ByResourceType) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP(), []int{0, 4, 2}
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) GetAggsEncoder() [][]byte {
	if m != nil {
		return m.AggsEncoder
	}
	return nil
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) GetPreAggregatedIndices() []*MetricDescriptor_BinaryIndices_PreAggregatedIndex {
	if m != nil {
		return m.PreAggregatedIndices
	}
	return nil
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) GetPaginatingIndices() []*MetricDescriptor_BinaryIndices_PaginatingIndex {
	if m != nil {
		return m.PaginatingIndices
	}
	return nil
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) GetNonAggregatedIndices() [][]byte {
	if m != nil {
		return m.NonAggregatedIndices
	}
	return nil
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) GetNameParts() []string {
	if m != nil {
		return m.NameParts
	}
	return nil
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) SetResourceType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceType", "MetricDescriptor_BinaryIndices_ByResourceType"))
	}
	m.ResourceType = fv
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) SetAggsEncoder(fv [][]byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AggsEncoder", "MetricDescriptor_BinaryIndices_ByResourceType"))
	}
	m.AggsEncoder = fv
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) SetPreAggregatedIndices(fv []*MetricDescriptor_BinaryIndices_PreAggregatedIndex) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PreAggregatedIndices", "MetricDescriptor_BinaryIndices_ByResourceType"))
	}
	m.PreAggregatedIndices = fv
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) SetPaginatingIndices(fv []*MetricDescriptor_BinaryIndices_PaginatingIndex) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PaginatingIndices", "MetricDescriptor_BinaryIndices_ByResourceType"))
	}
	m.PaginatingIndices = fv
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) SetNonAggregatedIndices(fv [][]byte) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NonAggregatedIndices", "MetricDescriptor_BinaryIndices_ByResourceType"))
	}
	m.NonAggregatedIndices = fv
}

func (m *MetricDescriptor_BinaryIndices_ByResourceType) SetNameParts(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NameParts", "MetricDescriptor_BinaryIndices_ByResourceType"))
	}
	m.NameParts = fv
}

var edgelq_monitoring_proto_v4_metric_descriptor_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDesc = []byte{
	0x0a, 0x32, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x27, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x37, 0x0a, 0x10, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2c,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda,
	0x21, 0x14, 0x0a, 0x12, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a,
	0x05, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x22,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x15, 0xca, 0xc6, 0x27, 0x11, 0x42, 0x0f, 0x12, 0x02, 0x08, 0x19,
	0x18, 0x01, 0x22, 0x07, 0x2a, 0x05, 0x3a, 0x03, 0x08, 0x80, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x0a,
	0xca, 0xc6, 0x27, 0x06, 0x42, 0x04, 0x12, 0x02, 0x08, 0x0d, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xca, 0xc6, 0x27, 0x06, 0x2a, 0x04, 0x22, 0x02, 0x08, 0x20, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x22, 0x03,
	0x08, 0x80, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x22, 0x03,
	0x08, 0x80, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x7a, 0x0a, 0x1a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x18, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x1b,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x19, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x17, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x45, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x07,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x5e, 0x0a, 0x0e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x42, 0x04, 0xf0, 0xd9,
	0x21, 0x01, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x1a, 0x53, 0x0a, 0x18, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a,
	0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x1a, 0xd5, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x65, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x36, 0x0a, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x1a, 0xa8, 0x01, 0x0a, 0x14, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25,
	0xb2, 0xda, 0x21, 0x21, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x10, 0x06, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x4d, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0xab,
	0x1d, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x49, 0x6e, 0x12, 0x5a,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x75, 0x0a, 0x0f, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4e, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x42, 0x04, 0x12, 0x02, 0x08,
	0x10, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x1a, 0xb9, 0x02, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x2a, 0x08, 0x1a, 0x02, 0x08, 0x01, 0x22, 0x02, 0x08, 0x40, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2f, 0xca, 0xc6, 0x27, 0x2b,
	0x42, 0x29, 0x12, 0x02, 0x08, 0x10, 0x22, 0x23, 0x2a, 0x21, 0x52, 0x1f, 0x42, 0x1d, 0x5e, 0x5b,
	0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x33, 0x31, 0x7d, 0x24, 0x52, 0x0a, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2f,
	0xca, 0xc6, 0x27, 0x2b, 0x42, 0x29, 0x12, 0x02, 0x08, 0x10, 0x22, 0x23, 0x2a, 0x21, 0x52, 0x1f,
	0x42, 0x1d, 0x5e, 0x5b, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x5f, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x33, 0x31, 0x7d, 0x24, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x5e, 0x0a,
	0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xb4, 0x04,
	0x0a, 0x0e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0xca, 0xc6, 0x27, 0x0a, 0x2a, 0x08, 0x1a, 0x02, 0x08, 0x01, 0x22, 0x02, 0x08, 0x40, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x16, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x2f, 0xca, 0xc6, 0x27, 0x2b, 0x42, 0x29, 0x12, 0x02, 0x08, 0x10,
	0x22, 0x23, 0x2a, 0x21, 0x52, 0x1f, 0x42, 0x1d, 0x5e, 0x5b, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d,
	0x7a, 0x5d, 0x5b, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30,
	0x2c, 0x33, 0x31, 0x7d, 0x24, 0x52, 0x14, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x69, 0x0a, 0x18, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2f, 0xca,
	0xc6, 0x27, 0x2b, 0x42, 0x29, 0x12, 0x02, 0x08, 0x10, 0x22, 0x23, 0x2a, 0x21, 0x52, 0x1f, 0x42,
	0x1d, 0x5e, 0x5b, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x5f, 0x41, 0x2d, 0x5a,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x33, 0x31, 0x7d, 0x24, 0x52, 0x16,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2f, 0xca, 0xc6, 0x27, 0x2b, 0x42, 0x29, 0x12, 0x02, 0x08,
	0x10, 0x22, 0x23, 0x2a, 0x21, 0x52, 0x1f, 0x42, 0x1d, 0x5e, 0x5b, 0x5f, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x5d, 0x5b, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b,
	0x30, 0x2c, 0x33, 0x31, 0x7d, 0x24, 0x52, 0x13, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x67, 0x0a, 0x17, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2f, 0xca, 0xc6,
	0x27, 0x2b, 0x42, 0x29, 0x12, 0x02, 0x08, 0x10, 0x22, 0x23, 0x2a, 0x21, 0x52, 0x1f, 0x42, 0x1d,
	0x5e, 0x5b, 0x5f, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x5f, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x33, 0x31, 0x7d, 0x24, 0x52, 0x15, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x5e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0xb6, 0x03, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x2a, 0x08,
	0x1a, 0x02, 0x08, 0x01, 0x22, 0x02, 0x08, 0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x64,
	0x0a, 0x13, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x42, 0x06, 0x0a, 0x02, 0x08, 0x01, 0x18,
	0x01, 0x52, 0x11, 0x70, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x73, 0x12, 0x64, 0x0a, 0x15, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x42, 0x08, 0xca, 0xc6, 0x27,
	0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x63, 0x6c, 0x6f,
	0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x1a, 0xaf, 0x03,
	0x0a, 0x0f, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x07,
	0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x52, 0x07, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x73,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x69, 0x0a, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x3a, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x22, 0x39, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a,
	0x89, 0x04, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x2a, 0x08, 0x1a, 0x02,
	0x08, 0x01, 0x22, 0x02, 0x08, 0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x1c, 0xca, 0xc6, 0x27, 0x18, 0x42, 0x16, 0x0a, 0x02, 0x08, 0x01,
	0x12, 0x02, 0x08, 0x08, 0x18, 0x01, 0x22, 0x0a, 0x2a, 0x08, 0x1a, 0x02, 0x08, 0x01, 0x22, 0x02,
	0x08, 0x40, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x79, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x42, 0x08,
	0x0a, 0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x10, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x12, 0x85, 0x01, 0x0a,
	0x1b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0e, 0xca, 0xc6, 0x27,
	0x0a, 0x42, 0x08, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x10, 0x52, 0x17, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x42, 0x08, 0x0a, 0x02, 0x08, 0x01,
	0x12, 0x02, 0x08, 0x10, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xfa, 0x01, 0x0a, 0x14,
	0x4e, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x2a, 0x08, 0x1a, 0x02, 0x08, 0x01, 0x22, 0x02,
	0x08, 0x40, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x1c, 0xca, 0xc6, 0x27, 0x18, 0x42, 0x16, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x08,
	0x18, 0x01, 0x22, 0x0a, 0x2a, 0x08, 0x1a, 0x02, 0x08, 0x01, 0x22, 0x02, 0x08, 0x40, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x79, 0x0a,
	0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x42, 0x08, 0x0a, 0x02, 0x08, 0x01,
	0x12, 0x02, 0x08, 0x10, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x1a, 0xc4, 0x03, 0x0a, 0x11, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xca, 0xc6,
	0x27, 0x0a, 0x2a, 0x08, 0x1a, 0x02, 0x08, 0x01, 0x22, 0x02, 0x08, 0x40, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1c, 0xca, 0xc6, 0x27, 0x18,
	0x42, 0x16, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x08, 0x18, 0x01, 0x22, 0x0a, 0x2a, 0x08,
	0x1a, 0x02, 0x08, 0x01, 0x22, 0x02, 0x08, 0x40, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x79, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0e,
	0xca, 0xc6, 0x27, 0x0a, 0x42, 0x08, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x10, 0x52, 0x12,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x73, 0x12, 0x60, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x0e, 0xca,
	0xc6, 0x27, 0x0a, 0x42, 0x08, 0x0a, 0x02, 0x08, 0x01, 0x12, 0x02, 0x08, 0x10, 0x52, 0x05, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x69, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x42, 0x08, 0x0a, 0x02, 0x08, 0x01,
	0x12, 0x02, 0x08, 0x10, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x91, 0x03, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x82, 0x01, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x42, 0x04, 0x12, 0x02, 0x08, 0x10, 0x52, 0x14,
	0x70, 0x72, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x16, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x42, 0x04, 0x12,
	0x02, 0x08, 0x10, 0x52, 0x14, 0x6e, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x12, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x42, 0x04, 0x12, 0x02, 0x08, 0x10,
	0x52, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x39, 0x0a, 0x0d,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x61,
	0x77, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0xb7, 0x06, 0x0a, 0x0d, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x0c, 0x62, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x42, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x62, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x1a, 0x83, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x1a, 0x84, 0x01, 0x0a,
	0x0f, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x77,
	0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x9b, 0x03, 0x0a, 0x0e, 0x42, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x67, 0x67, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x73, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x7a,
	0x0a, 0x16, 0x70, 0x72, 0x65, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x14, 0x70, 0x72, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x12, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x6e, 0x6f,
	0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x73, 0x22, 0x4f, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x41, 0x55, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x4c, 0x54, 0x41,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x03, 0x22, 0x5a, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x3a, 0xea,
	0x04, 0xea, 0x41, 0x62, 0x0a, 0x26, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x7d, 0x92, 0xd9, 0x21, 0xb5, 0x01, 0x0a, 0x11, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x11,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x1a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2a, 0x0e, 0x5b, 0x5c, 0x77, 0x2e,
	0x2f, 0x2d, 0x5d, 0x7b, 0x34, 0x2c, 0x31, 0x32, 0x38, 0x7d, 0x38, 0x05, 0x42, 0x72, 0x08, 0x02,
	0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x0c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x27, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0xb2, 0xdf, 0x21, 0x41, 0x0a, 0x3f, 0x0a, 0x3d, 0x0a, 0x06, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x2d, 0x2a, 0x05,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x01, 0xc2, 0x85, 0x2c, 0xef, 0x01, 0x22, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x22, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x17, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65,
	0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x73,
	0x22, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x22, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22, 0x07, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0e, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x42, 0xd1, 0x02, 0xe8, 0xde,
	0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x5b, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x34,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0xa2, 0x80, 0xd1, 0x02, 0x5d, 0x0a, 0x18, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f,
	0x76, 0x34, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x34, 0x42, 0x15,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x34, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x3b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescData = edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDesc
)

func edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDescData
}

var edgelq_monitoring_proto_v4_metric_descriptor_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var edgelq_monitoring_proto_v4_metric_descriptor_proto_goTypes = []interface{}{
	(MetricDescriptor_MetricKind)(0),                          // 0: ntt.monitoring.v4.MetricDescriptor_MetricKind
	(MetricDescriptor_ValueType)(0),                           // 1: ntt.monitoring.v4.MetricDescriptor_ValueType
	(MetricDescriptor_Indices_CloseStatus)(0),                 // 2: ntt.monitoring.v4.MetricDescriptor_Indices_CloseStatus
	(MetricDescriptor_Indices_SortingFunction_Direction)(0),   // 3: ntt.monitoring.v4.MetricDescriptor_Indices_SortingFunction_Direction
	(*MetricDescriptor)(nil),                                  // 4: ntt.monitoring.v4.MetricDescriptor
	(*MetricDescriptor_MetricDescriptorMetadata)(nil),         // 5: ntt.monitoring.v4.MetricDescriptor.MetricDescriptorMetadata
	(*MetricDescriptor_IndexSpec)(nil),                        // 6: ntt.monitoring.v4.MetricDescriptor.IndexSpec
	(*MetricDescriptor_Indices)(nil),                          // 7: ntt.monitoring.v4.MetricDescriptor.Indices
	(*MetricDescriptor_StorageConfig)(nil),                    // 8: ntt.monitoring.v4.MetricDescriptor.StorageConfig
	(*MetricDescriptor_BinaryIndices)(nil),                    // 9: ntt.monitoring.v4.MetricDescriptor.BinaryIndices
	(*MetricDescriptor_IndexSpec_Index)(nil),                  // 10: ntt.monitoring.v4.MetricDescriptor.IndexSpec.Index
	(*MetricDescriptor_IndexSpec_PerMonitoredResource)(nil),   // 11: ntt.monitoring.v4.MetricDescriptor.IndexSpec.PerMonitoredResource
	(*MetricDescriptor_Indices_LabelsGroup)(nil),              // 12: ntt.monitoring.v4.MetricDescriptor.Indices.LabelsGroup
	(*MetricDescriptor_Indices_PaginationView)(nil),           // 13: ntt.monitoring.v4.MetricDescriptor.Indices.PaginationView
	(*MetricDescriptor_Indices_AggregationsGroup)(nil),        // 14: ntt.monitoring.v4.MetricDescriptor.Indices.AggregationsGroup
	(*MetricDescriptor_Indices_SortingFunction)(nil),          // 15: ntt.monitoring.v4.MetricDescriptor.Indices.SortingFunction
	(*MetricDescriptor_Indices_PreAggregatedIndices)(nil),     // 16: ntt.monitoring.v4.MetricDescriptor.Indices.PreAggregatedIndices
	(*MetricDescriptor_Indices_NonAggregatedIndices)(nil),     // 17: ntt.monitoring.v4.MetricDescriptor.Indices.NonAggregatedIndices
	(*MetricDescriptor_Indices_PaginationIndices)(nil),        // 18: ntt.monitoring.v4.MetricDescriptor.Indices.PaginationIndices
	(*MetricDescriptor_Indices_IndexGroups)(nil),              // 19: ntt.monitoring.v4.MetricDescriptor.Indices.IndexGroups
	(*MetricDescriptor_BinaryIndices_PreAggregatedIndex)(nil), // 20: ntt.monitoring.v4.MetricDescriptor.BinaryIndices.PreAggregatedIndex
	(*MetricDescriptor_BinaryIndices_PaginatingIndex)(nil),    // 21: ntt.monitoring.v4.MetricDescriptor.BinaryIndices.PaginatingIndex
	(*MetricDescriptor_BinaryIndices_ByResourceType)(nil),     // 22: ntt.monitoring.v4.MetricDescriptor.BinaryIndices.ByResourceType
	(*meta.Meta)(nil),                         // 23: goten.types.Meta
	(*common.LabelDescriptor)(nil),            // 24: ntt.monitoring.v4.LabelDescriptor
	(*common.Distribution_BucketOptions)(nil), // 25: ntt.monitoring.v4.Distribution.BucketOptions
	(*common.LabelKeySet)(nil),                // 26: ntt.monitoring.v4.LabelKeySet
	(api.LaunchStage)(0),                      // 27: ntt.api.LaunchStage
	(common.Aggregation_Aligner)(0),           // 28: ntt.monitoring.v4.Aggregation_Aligner
	(common.Aggregation_Reducer)(0),           // 29: ntt.monitoring.v4.Aggregation_Reducer
}
var edgelq_monitoring_proto_v4_metric_descriptor_proto_depIdxs = []int32{
	23, // 0: ntt.monitoring.v4.MetricDescriptor.metadata:type_name -> goten.types.Meta
	24, // 1: ntt.monitoring.v4.MetricDescriptor.labels:type_name -> ntt.monitoring.v4.LabelDescriptor
	0,  // 2: ntt.monitoring.v4.MetricDescriptor.metric_kind:type_name -> ntt.monitoring.v4.MetricDescriptor_MetricKind
	1,  // 3: ntt.monitoring.v4.MetricDescriptor.value_type:type_name -> ntt.monitoring.v4.MetricDescriptor_ValueType
	5,  // 4: ntt.monitoring.v4.MetricDescriptor.metric_descriptor_metadata:type_name -> ntt.monitoring.v4.MetricDescriptor.MetricDescriptorMetadata
	25, // 5: ntt.monitoring.v4.MetricDescriptor.distribution_bucket_options:type_name -> ntt.monitoring.v4.Distribution.BucketOptions
	26, // 6: ntt.monitoring.v4.MetricDescriptor.promoted_label_key_sets:type_name -> ntt.monitoring.v4.LabelKeySet
	6,  // 7: ntt.monitoring.v4.MetricDescriptor.index_spec:type_name -> ntt.monitoring.v4.MetricDescriptor.IndexSpec
	7,  // 8: ntt.monitoring.v4.MetricDescriptor.indices:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices
	8,  // 9: ntt.monitoring.v4.MetricDescriptor.storage_config:type_name -> ntt.monitoring.v4.MetricDescriptor.StorageConfig
	9,  // 10: ntt.monitoring.v4.MetricDescriptor.binary_indices:type_name -> ntt.monitoring.v4.MetricDescriptor.BinaryIndices
	27, // 11: ntt.monitoring.v4.MetricDescriptor.MetricDescriptorMetadata.launch_stage:type_name -> ntt.api.LaunchStage
	11, // 12: ntt.monitoring.v4.MetricDescriptor.IndexSpec.per_resource:type_name -> ntt.monitoring.v4.MetricDescriptor.IndexSpec.PerMonitoredResource
	19, // 13: ntt.monitoring.v4.MetricDescriptor.Indices.built_in:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices.IndexGroups
	19, // 14: ntt.monitoring.v4.MetricDescriptor.Indices.user_defined:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices.IndexGroups
	17, // 15: ntt.monitoring.v4.MetricDescriptor.Indices.legacy_migrated:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices.NonAggregatedIndices
	22, // 16: ntt.monitoring.v4.MetricDescriptor.BinaryIndices.by_resources:type_name -> ntt.monitoring.v4.MetricDescriptor.BinaryIndices.ByResourceType
	10, // 17: ntt.monitoring.v4.MetricDescriptor.IndexSpec.PerMonitoredResource.indices:type_name -> ntt.monitoring.v4.MetricDescriptor.IndexSpec.Index
	2,  // 18: ntt.monitoring.v4.MetricDescriptor.Indices.LabelsGroup.closing_status:type_name -> ntt.monitoring.v4.MetricDescriptor_Indices_CloseStatus
	2,  // 19: ntt.monitoring.v4.MetricDescriptor.Indices.PaginationView.closing_status:type_name -> ntt.monitoring.v4.MetricDescriptor_Indices_CloseStatus
	28, // 20: ntt.monitoring.v4.MetricDescriptor.Indices.AggregationsGroup.per_series_aligners:type_name -> ntt.monitoring.v4.Aggregation_Aligner
	29, // 21: ntt.monitoring.v4.MetricDescriptor.Indices.AggregationsGroup.cross_series_reducers:type_name -> ntt.monitoring.v4.Aggregation_Reducer
	2,  // 22: ntt.monitoring.v4.MetricDescriptor.Indices.AggregationsGroup.closing_status:type_name -> ntt.monitoring.v4.MetricDescriptor_Indices_CloseStatus
	28, // 23: ntt.monitoring.v4.MetricDescriptor.Indices.AggregationsGroup.storage_aligners:type_name -> ntt.monitoring.v4.Aggregation_Aligner
	28, // 24: ntt.monitoring.v4.MetricDescriptor.Indices.SortingFunction.aligner:type_name -> ntt.monitoring.v4.Aggregation_Aligner
	29, // 25: ntt.monitoring.v4.MetricDescriptor.Indices.SortingFunction.reducer:type_name -> ntt.monitoring.v4.Aggregation_Reducer
	2,  // 26: ntt.monitoring.v4.MetricDescriptor.Indices.SortingFunction.closing_status:type_name -> ntt.monitoring.v4.MetricDescriptor_Indices_CloseStatus
	3,  // 27: ntt.monitoring.v4.MetricDescriptor.Indices.SortingFunction.sorting:type_name -> ntt.monitoring.v4.MetricDescriptor_Indices_SortingFunction_Direction
	12, // 28: ntt.monitoring.v4.MetricDescriptor.Indices.PreAggregatedIndices.partition_label_sets:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices.LabelsGroup
	12, // 29: ntt.monitoring.v4.MetricDescriptor.Indices.PreAggregatedIndices.filter_and_group_label_sets:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices.LabelsGroup
	14, // 30: ntt.monitoring.v4.MetricDescriptor.Indices.PreAggregatedIndices.supported_aggregations:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices.AggregationsGroup
	12, // 31: ntt.monitoring.v4.MetricDescriptor.Indices.NonAggregatedIndices.partition_label_sets:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices.LabelsGroup
	12, // 32: ntt.monitoring.v4.MetricDescriptor.Indices.PaginationIndices.partition_label_sets:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices.LabelsGroup
	13, // 33: ntt.monitoring.v4.MetricDescriptor.Indices.PaginationIndices.views:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices.PaginationView
	15, // 34: ntt.monitoring.v4.MetricDescriptor.Indices.PaginationIndices.functions:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices.SortingFunction
	16, // 35: ntt.monitoring.v4.MetricDescriptor.Indices.IndexGroups.pre_aggregated_indices:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices.PreAggregatedIndices
	17, // 36: ntt.monitoring.v4.MetricDescriptor.Indices.IndexGroups.non_aggregated_indices:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices.NonAggregatedIndices
	18, // 37: ntt.monitoring.v4.MetricDescriptor.Indices.IndexGroups.pagination_indices:type_name -> ntt.monitoring.v4.MetricDescriptor.Indices.PaginationIndices
	20, // 38: ntt.monitoring.v4.MetricDescriptor.BinaryIndices.ByResourceType.pre_aggregated_indices:type_name -> ntt.monitoring.v4.MetricDescriptor.BinaryIndices.PreAggregatedIndex
	21, // 39: ntt.monitoring.v4.MetricDescriptor.BinaryIndices.ByResourceType.paginating_indices:type_name -> ntt.monitoring.v4.MetricDescriptor.BinaryIndices.PaginatingIndex
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v4_metric_descriptor_proto_init() }
func edgelq_monitoring_proto_v4_metric_descriptor_proto_init() {
	if edgelq_monitoring_proto_v4_metric_descriptor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_MetricDescriptorMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_IndexSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_Indices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_StorageConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_BinaryIndices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_IndexSpec_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_IndexSpec_PerMonitoredResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_Indices_LabelsGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_Indices_PaginationView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_Indices_AggregationsGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_Indices_SortingFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_Indices_PreAggregatedIndices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_Indices_NonAggregatedIndices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_Indices_PaginationIndices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_Indices_IndexGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_BinaryIndices_PreAggregatedIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_BinaryIndices_PaginatingIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor_BinaryIndices_ByResourceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_monitoring_proto_v4_metric_descriptor_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v4_metric_descriptor_proto_depIdxs,
		EnumInfos:         edgelq_monitoring_proto_v4_metric_descriptor_proto_enumTypes,
		MessageInfos:      edgelq_monitoring_proto_v4_metric_descriptor_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v4_metric_descriptor_proto = out.File
	edgelq_monitoring_proto_v4_metric_descriptor_proto_rawDesc = nil
	edgelq_monitoring_proto_v4_metric_descriptor_proto_goTypes = nil
	edgelq_monitoring_proto_v4_metric_descriptor_proto_depIdxs = nil
}
