// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v4/recovery_store_sharding_info.proto
// DO NOT EDIT!!!

package recovery_store_sharding_info

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &durationpb.Duration{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

func (o *RecoveryStoreShardingInfo) GotenObjectExt() {}

func (o *RecoveryStoreShardingInfo) MakeFullFieldMask() *RecoveryStoreShardingInfo_FieldMask {
	return FullRecoveryStoreShardingInfo_FieldMask()
}

func (o *RecoveryStoreShardingInfo) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRecoveryStoreShardingInfo_FieldMask()
}

func (o *RecoveryStoreShardingInfo) MakeDiffFieldMask(other *RecoveryStoreShardingInfo) *RecoveryStoreShardingInfo_FieldMask {
	if o == nil && other == nil {
		return &RecoveryStoreShardingInfo_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRecoveryStoreShardingInfo_FieldMask()
	}

	res := &RecoveryStoreShardingInfo_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &RecoveryStoreShardingInfo_FieldTerminalPath{selector: RecoveryStoreShardingInfo_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &RecoveryStoreShardingInfo_FieldTerminalPath{selector: RecoveryStoreShardingInfo_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &RecoveryStoreShardingInfo_FieldSubPath{selector: RecoveryStoreShardingInfo_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetValidityPeriod().MakeDiffFieldMask(other.GetValidityPeriod())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &RecoveryStoreShardingInfo_FieldTerminalPath{selector: RecoveryStoreShardingInfo_FieldPathSelectorValidityPeriod})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &RecoveryStoreShardingInfo_FieldSubPath{selector: RecoveryStoreShardingInfo_FieldPathSelectorValidityPeriod, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &RecoveryStoreShardingInfo_FieldTerminalPath{selector: RecoveryStoreShardingInfo_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &RecoveryStoreShardingInfo_FieldSubPath{selector: RecoveryStoreShardingInfo_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	return res
}

func (o *RecoveryStoreShardingInfo) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RecoveryStoreShardingInfo))
}

func (o *RecoveryStoreShardingInfo) Clone() *RecoveryStoreShardingInfo {
	if o == nil {
		return nil
	}
	result := &RecoveryStoreShardingInfo{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.ValidityPeriod = o.ValidityPeriod.Clone()
	result.Spec = o.Spec.Clone()
	return result
}

func (o *RecoveryStoreShardingInfo) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RecoveryStoreShardingInfo) Merge(source *RecoveryStoreShardingInfo) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetValidityPeriod() != nil {
		if o.ValidityPeriod == nil {
			o.ValidityPeriod = new(RecoveryStoreShardingInfo_ValidityPeriod)
		}
		o.ValidityPeriod.Merge(source.GetValidityPeriod())
	}
	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(RecoveryStoreShardingInfo_ShardingSpec)
		}
		o.Spec.Merge(source.GetSpec())
	}
}

func (o *RecoveryStoreShardingInfo) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RecoveryStoreShardingInfo))
}

func (o *RecoveryStoreShardingInfo_ValidityPeriod) GotenObjectExt() {}

func (o *RecoveryStoreShardingInfo_ValidityPeriod) MakeFullFieldMask() *RecoveryStoreShardingInfo_ValidityPeriod_FieldMask {
	return FullRecoveryStoreShardingInfo_ValidityPeriod_FieldMask()
}

func (o *RecoveryStoreShardingInfo_ValidityPeriod) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRecoveryStoreShardingInfo_ValidityPeriod_FieldMask()
}

func (o *RecoveryStoreShardingInfo_ValidityPeriod) MakeDiffFieldMask(other *RecoveryStoreShardingInfo_ValidityPeriod) *RecoveryStoreShardingInfo_ValidityPeriod_FieldMask {
	if o == nil && other == nil {
		return &RecoveryStoreShardingInfo_ValidityPeriod_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRecoveryStoreShardingInfo_ValidityPeriod_FieldMask()
	}

	res := &RecoveryStoreShardingInfo_ValidityPeriod_FieldMask{}
	if !proto.Equal(o.GetStartTime(), other.GetStartTime()) {
		res.Paths = append(res.Paths, &RecoveryStoreShardingInfoValidityPeriod_FieldTerminalPath{selector: RecoveryStoreShardingInfoValidityPeriod_FieldPathSelectorStartTime})
	}
	if !proto.Equal(o.GetEndTime(), other.GetEndTime()) {
		res.Paths = append(res.Paths, &RecoveryStoreShardingInfoValidityPeriod_FieldTerminalPath{selector: RecoveryStoreShardingInfoValidityPeriod_FieldPathSelectorEndTime})
	}
	return res
}

func (o *RecoveryStoreShardingInfo_ValidityPeriod) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RecoveryStoreShardingInfo_ValidityPeriod))
}

func (o *RecoveryStoreShardingInfo_ValidityPeriod) Clone() *RecoveryStoreShardingInfo_ValidityPeriod {
	if o == nil {
		return nil
	}
	result := &RecoveryStoreShardingInfo_ValidityPeriod{}
	result.StartTime = proto.Clone(o.StartTime).(*timestamppb.Timestamp)
	result.EndTime = proto.Clone(o.EndTime).(*timestamppb.Timestamp)
	return result
}

func (o *RecoveryStoreShardingInfo_ValidityPeriod) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RecoveryStoreShardingInfo_ValidityPeriod) Merge(source *RecoveryStoreShardingInfo_ValidityPeriod) {
	if source.GetStartTime() != nil {
		if o.StartTime == nil {
			o.StartTime = new(timestamppb.Timestamp)
		}
		proto.Merge(o.StartTime, source.GetStartTime())
	}
	if source.GetEndTime() != nil {
		if o.EndTime == nil {
			o.EndTime = new(timestamppb.Timestamp)
		}
		proto.Merge(o.EndTime, source.GetEndTime())
	}
}

func (o *RecoveryStoreShardingInfo_ValidityPeriod) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RecoveryStoreShardingInfo_ValidityPeriod))
}

func (o *RecoveryStoreShardingInfo_ShardingSpec) GotenObjectExt() {}

func (o *RecoveryStoreShardingInfo_ShardingSpec) MakeFullFieldMask() *RecoveryStoreShardingInfo_ShardingSpec_FieldMask {
	return FullRecoveryStoreShardingInfo_ShardingSpec_FieldMask()
}

func (o *RecoveryStoreShardingInfo_ShardingSpec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRecoveryStoreShardingInfo_ShardingSpec_FieldMask()
}

func (o *RecoveryStoreShardingInfo_ShardingSpec) MakeDiffFieldMask(other *RecoveryStoreShardingInfo_ShardingSpec) *RecoveryStoreShardingInfo_ShardingSpec_FieldMask {
	if o == nil && other == nil {
		return &RecoveryStoreShardingInfo_ShardingSpec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRecoveryStoreShardingInfo_ShardingSpec_FieldMask()
	}

	res := &RecoveryStoreShardingInfo_ShardingSpec_FieldMask{}
	if !proto.Equal(o.GetTsBlobPeriod(), other.GetTsBlobPeriod()) {
		res.Paths = append(res.Paths, &RecoveryStoreShardingInfoShardingSpec_FieldTerminalPath{selector: RecoveryStoreShardingInfoShardingSpec_FieldPathSelectorTsBlobPeriod})
	}
	if o.GetShardsCount() != other.GetShardsCount() {
		res.Paths = append(res.Paths, &RecoveryStoreShardingInfoShardingSpec_FieldTerminalPath{selector: RecoveryStoreShardingInfoShardingSpec_FieldPathSelectorShardsCount})
	}
	return res
}

func (o *RecoveryStoreShardingInfo_ShardingSpec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RecoveryStoreShardingInfo_ShardingSpec))
}

func (o *RecoveryStoreShardingInfo_ShardingSpec) Clone() *RecoveryStoreShardingInfo_ShardingSpec {
	if o == nil {
		return nil
	}
	result := &RecoveryStoreShardingInfo_ShardingSpec{}
	result.TsBlobPeriod = proto.Clone(o.TsBlobPeriod).(*durationpb.Duration)
	result.ShardsCount = o.ShardsCount
	return result
}

func (o *RecoveryStoreShardingInfo_ShardingSpec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RecoveryStoreShardingInfo_ShardingSpec) Merge(source *RecoveryStoreShardingInfo_ShardingSpec) {
	if source.GetTsBlobPeriod() != nil {
		if o.TsBlobPeriod == nil {
			o.TsBlobPeriod = new(durationpb.Duration)
		}
		proto.Merge(o.TsBlobPeriod, source.GetTsBlobPeriod())
	}
	o.ShardsCount = source.GetShardsCount()
}

func (o *RecoveryStoreShardingInfo_ShardingSpec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RecoveryStoreShardingInfo_ShardingSpec))
}
