// Code generated by protoc-gen-goten-object
// File: edgelq/monitoring/proto/v4/alerting_condition.proto
// DO NOT EDIT!!!

package alerting_condition

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alerting_policy"
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &alerting_policy.AlertingPolicy{}
	_ = &common.LabelDescriptor{}
	_ = &time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

type AlertingCondition_FieldMask struct {
	Paths []AlertingCondition_FieldPath
}

func FullAlertingCondition_FieldMask() *AlertingCondition_FieldMask {
	res := &AlertingCondition_FieldMask{}
	res.Paths = append(res.Paths, &AlertingCondition_FieldTerminalPath{selector: AlertingCondition_FieldPathSelectorName})
	res.Paths = append(res.Paths, &AlertingCondition_FieldTerminalPath{selector: AlertingCondition_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &AlertingCondition_FieldTerminalPath{selector: AlertingCondition_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &AlertingCondition_FieldTerminalPath{selector: AlertingCondition_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &AlertingCondition_FieldTerminalPath{selector: AlertingCondition_FieldPathSelectorSpec})
	res.Paths = append(res.Paths, &AlertingCondition_FieldTerminalPath{selector: AlertingCondition_FieldPathSelectorState})
	return res
}

func (fieldMask *AlertingCondition_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *AlertingCondition_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *AlertingCondition_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseAlertingCondition_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *AlertingCondition_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertingCondition_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AlertingCondition_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertingCondition_FieldPath(raw)
	})
}

func (fieldMask *AlertingCondition_FieldMask) ProtoMessage() {}

func (fieldMask *AlertingCondition_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AlertingCondition_FieldMask) Subtract(other *AlertingCondition_FieldMask) *AlertingCondition_FieldMask {
	result := &AlertingCondition_FieldMask{}
	removedSelectors := make([]bool, 6)
	otherSubMasks := map[AlertingCondition_FieldPathSelector]gotenobject.FieldMask{
		AlertingCondition_FieldPathSelectorMetadata: &meta.Meta_FieldMask{},
		AlertingCondition_FieldPathSelectorSpec:     &AlertingCondition_Spec_FieldMask{},
		AlertingCondition_FieldPathSelectorState:    &AlertingCondition_State_FieldMask{},
	}
	mySubMasks := map[AlertingCondition_FieldPathSelector]gotenobject.FieldMask{
		AlertingCondition_FieldPathSelectorMetadata: &meta.Meta_FieldMask{},
		AlertingCondition_FieldPathSelectorSpec:     &AlertingCondition_Spec_FieldMask{},
		AlertingCondition_FieldPathSelectorState:    &AlertingCondition_State_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertingCondition_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *AlertingCondition_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*AlertingCondition_FieldTerminalPath); ok {
					switch tp.selector {
					case AlertingCondition_FieldPathSelectorMetadata:
						mySubMasks[AlertingCondition_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case AlertingCondition_FieldPathSelectorSpec:
						mySubMasks[AlertingCondition_FieldPathSelectorSpec] = FullAlertingCondition_Spec_FieldMask()
					case AlertingCondition_FieldPathSelectorState:
						mySubMasks[AlertingCondition_FieldPathSelectorState] = FullAlertingCondition_State_FieldMask()
					}
				} else if tp, ok := path.(*AlertingCondition_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &AlertingCondition_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AlertingCondition_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AlertingCondition_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AlertingCondition_FieldMask) FilterInputFields() *AlertingCondition_FieldMask {
	result := &AlertingCondition_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case AlertingCondition_FieldPathSelectorMetadata:
			if _, ok := path.(*AlertingCondition_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &AlertingCondition_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*AlertingCondition_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &AlertingCondition_FieldSubPath{selector: AlertingCondition_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		case AlertingCondition_FieldPathSelectorSpec:
			if _, ok := path.(*AlertingCondition_FieldTerminalPath); ok {
				for _, subpath := range FullAlertingCondition_Spec_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &AlertingCondition_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*AlertingCondition_FieldSubPath); ok {
				selectedMask := &AlertingCondition_Spec_FieldMask{
					Paths: []AlertingConditionSpec_FieldPath{sub.subPath.(AlertingConditionSpec_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &AlertingCondition_FieldSubPath{selector: AlertingCondition_FieldPathSelectorSpec, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AlertingCondition_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AlertingCondition_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertingCondition_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertingCondition_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AlertingCondition_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AlertingCondition_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AlertingCondition_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AlertingCondition_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_FieldMask) AppendPath(path AlertingCondition_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AlertingCondition_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertingCondition_FieldPath))
}

func (fieldMask *AlertingCondition_FieldMask) GetPaths() []AlertingCondition_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AlertingCondition_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AlertingCondition_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertingCondition_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AlertingCondition_FieldMask) Set(target, source *AlertingCondition) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AlertingCondition_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AlertingCondition), source.(*AlertingCondition))
}

func (fieldMask *AlertingCondition_FieldMask) Project(source *AlertingCondition) *AlertingCondition {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AlertingCondition{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	specMask := &AlertingCondition_Spec_FieldMask{}
	wholeSpecAccepted := false
	stateMask := &AlertingCondition_State_FieldMask{}
	wholeStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertingCondition_FieldTerminalPath:
			switch tp.selector {
			case AlertingCondition_FieldPathSelectorName:
				result.Name = source.Name
			case AlertingCondition_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case AlertingCondition_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case AlertingCondition_FieldPathSelectorDescription:
				result.Description = source.Description
			case AlertingCondition_FieldPathSelectorSpec:
				result.Spec = source.Spec
				wholeSpecAccepted = true
			case AlertingCondition_FieldPathSelectorState:
				result.State = source.State
				wholeStateAccepted = true
			}
		case *AlertingCondition_FieldSubPath:
			switch tp.selector {
			case AlertingCondition_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case AlertingCondition_FieldPathSelectorSpec:
				specMask.AppendPath(tp.subPath.(AlertingConditionSpec_FieldPath))
			case AlertingCondition_FieldPathSelectorState:
				stateMask.AppendPath(tp.subPath.(AlertingConditionState_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeSpecAccepted == false && len(specMask.Paths) > 0 {
		result.Spec = specMask.Project(source.GetSpec())
	}
	if wholeStateAccepted == false && len(stateMask.Paths) > 0 {
		result.State = stateMask.Project(source.GetState())
	}
	return result
}

func (fieldMask *AlertingCondition_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AlertingCondition))
}

func (fieldMask *AlertingCondition_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type AlertingCondition_Spec_FieldMask struct {
	Paths []AlertingConditionSpec_FieldPath
}

func FullAlertingCondition_Spec_FieldMask() *AlertingCondition_Spec_FieldMask {
	res := &AlertingCondition_Spec_FieldMask{}
	res.Paths = append(res.Paths, &AlertingConditionSpec_FieldTerminalPath{selector: AlertingConditionSpec_FieldPathSelectorTimeSeries})
	res.Paths = append(res.Paths, &AlertingConditionSpec_FieldTerminalPath{selector: AlertingConditionSpec_FieldPathSelectorTrigger})
	return res
}

func (fieldMask *AlertingCondition_Spec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *AlertingCondition_Spec_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *AlertingCondition_Spec_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseAlertingConditionSpec_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertingConditionSpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AlertingCondition_Spec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertingConditionSpec_FieldPath(raw)
	})
}

func (fieldMask *AlertingCondition_Spec_FieldMask) ProtoMessage() {}

func (fieldMask *AlertingCondition_Spec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AlertingCondition_Spec_FieldMask) Subtract(other *AlertingCondition_Spec_FieldMask) *AlertingCondition_Spec_FieldMask {
	result := &AlertingCondition_Spec_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[AlertingConditionSpec_FieldPathSelector]gotenobject.FieldMask{
		AlertingConditionSpec_FieldPathSelectorTimeSeries: &AlertingCondition_Spec_TimeSeries_FieldMask{},
		AlertingConditionSpec_FieldPathSelectorTrigger:    &AlertingCondition_Spec_Trigger_FieldMask{},
	}
	mySubMasks := map[AlertingConditionSpec_FieldPathSelector]gotenobject.FieldMask{
		AlertingConditionSpec_FieldPathSelectorTimeSeries: &AlertingCondition_Spec_TimeSeries_FieldMask{},
		AlertingConditionSpec_FieldPathSelectorTrigger:    &AlertingCondition_Spec_Trigger_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertingConditionSpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *AlertingConditionSpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*AlertingConditionSpec_FieldTerminalPath); ok {
					switch tp.selector {
					case AlertingConditionSpec_FieldPathSelectorTimeSeries:
						mySubMasks[AlertingConditionSpec_FieldPathSelectorTimeSeries] = FullAlertingCondition_Spec_TimeSeries_FieldMask()
					case AlertingConditionSpec_FieldPathSelectorTrigger:
						mySubMasks[AlertingConditionSpec_FieldPathSelectorTrigger] = FullAlertingCondition_Spec_Trigger_FieldMask()
					}
				} else if tp, ok := path.(*AlertingConditionSpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &AlertingConditionSpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AlertingCondition_Spec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AlertingCondition_Spec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AlertingCondition_Spec_FieldMask) FilterInputFields() *AlertingCondition_Spec_FieldMask {
	result := &AlertingCondition_Spec_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case AlertingConditionSpec_FieldPathSelectorTimeSeries:
			if _, ok := path.(*AlertingConditionSpec_FieldTerminalPath); ok {
				for _, subpath := range FullAlertingCondition_Spec_TimeSeries_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &AlertingConditionSpec_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*AlertingConditionSpec_FieldSubPath); ok {
				selectedMask := &AlertingCondition_Spec_TimeSeries_FieldMask{
					Paths: []AlertingConditionSpecTimeSeries_FieldPath{sub.subPath.(AlertingConditionSpecTimeSeries_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &AlertingConditionSpec_FieldSubPath{selector: AlertingConditionSpec_FieldPathSelectorTimeSeries, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AlertingCondition_Spec_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AlertingCondition_Spec_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertingConditionSpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertingConditionSpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AlertingCondition_Spec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AlertingCondition_Spec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AlertingCondition_Spec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AlertingCondition_Spec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_FieldMask) AppendPath(path AlertingConditionSpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AlertingCondition_Spec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertingConditionSpec_FieldPath))
}

func (fieldMask *AlertingCondition_Spec_FieldMask) GetPaths() []AlertingConditionSpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AlertingCondition_Spec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AlertingCondition_Spec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertingConditionSpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AlertingCondition_Spec_FieldMask) Set(target, source *AlertingCondition_Spec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AlertingCondition_Spec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AlertingCondition_Spec), source.(*AlertingCondition_Spec))
}

func (fieldMask *AlertingCondition_Spec_FieldMask) Project(source *AlertingCondition_Spec) *AlertingCondition_Spec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AlertingCondition_Spec{}
	timeSeriesMask := &AlertingCondition_Spec_TimeSeries_FieldMask{}
	wholeTimeSeriesAccepted := false
	triggerMask := &AlertingCondition_Spec_Trigger_FieldMask{}
	wholeTriggerAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertingConditionSpec_FieldTerminalPath:
			switch tp.selector {
			case AlertingConditionSpec_FieldPathSelectorTimeSeries:
				result.TimeSeries = source.TimeSeries
				wholeTimeSeriesAccepted = true
			case AlertingConditionSpec_FieldPathSelectorTrigger:
				result.Trigger = source.Trigger
				wholeTriggerAccepted = true
			}
		case *AlertingConditionSpec_FieldSubPath:
			switch tp.selector {
			case AlertingConditionSpec_FieldPathSelectorTimeSeries:
				timeSeriesMask.AppendPath(tp.subPath.(AlertingConditionSpecTimeSeries_FieldPath))
			case AlertingConditionSpec_FieldPathSelectorTrigger:
				triggerMask.AppendPath(tp.subPath.(AlertingConditionSpecTrigger_FieldPath))
			}
		}
	}
	if wholeTimeSeriesAccepted == false && len(timeSeriesMask.Paths) > 0 {
		result.TimeSeries = timeSeriesMask.Project(source.GetTimeSeries())
	}
	if wholeTriggerAccepted == false && len(triggerMask.Paths) > 0 {
		result.Trigger = triggerMask.Project(source.GetTrigger())
	}
	return result
}

func (fieldMask *AlertingCondition_Spec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AlertingCondition_Spec))
}

func (fieldMask *AlertingCondition_Spec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type AlertingCondition_State_FieldMask struct {
	Paths []AlertingConditionState_FieldPath
}

func FullAlertingCondition_State_FieldMask() *AlertingCondition_State_FieldMask {
	res := &AlertingCondition_State_FieldMask{}
	res.Paths = append(res.Paths, &AlertingConditionState_FieldTerminalPath{selector: AlertingConditionState_FieldPathSelectorFiringAlertsCount})
	return res
}

func (fieldMask *AlertingCondition_State_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *AlertingCondition_State_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *AlertingCondition_State_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseAlertingConditionState_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *AlertingCondition_State_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertingConditionState_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AlertingCondition_State_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertingConditionState_FieldPath(raw)
	})
}

func (fieldMask *AlertingCondition_State_FieldMask) ProtoMessage() {}

func (fieldMask *AlertingCondition_State_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AlertingCondition_State_FieldMask) Subtract(other *AlertingCondition_State_FieldMask) *AlertingCondition_State_FieldMask {
	result := &AlertingCondition_State_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertingConditionState_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AlertingCondition_State_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AlertingCondition_State_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AlertingCondition_State_FieldMask) FilterInputFields() *AlertingCondition_State_FieldMask {
	result := &AlertingCondition_State_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AlertingCondition_State_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AlertingCondition_State_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertingConditionState_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertingConditionState_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AlertingCondition_State_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AlertingCondition_State_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_State_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AlertingCondition_State_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AlertingCondition_State_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_State_FieldMask) AppendPath(path AlertingConditionState_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AlertingCondition_State_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertingConditionState_FieldPath))
}

func (fieldMask *AlertingCondition_State_FieldMask) GetPaths() []AlertingConditionState_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AlertingCondition_State_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AlertingCondition_State_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertingConditionState_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AlertingCondition_State_FieldMask) Set(target, source *AlertingCondition_State) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AlertingCondition_State_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AlertingCondition_State), source.(*AlertingCondition_State))
}

func (fieldMask *AlertingCondition_State_FieldMask) Project(source *AlertingCondition_State) *AlertingCondition_State {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AlertingCondition_State{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertingConditionState_FieldTerminalPath:
			switch tp.selector {
			case AlertingConditionState_FieldPathSelectorFiringAlertsCount:
				result.FiringAlertsCount = source.FiringAlertsCount
			}
		}
	}
	return result
}

func (fieldMask *AlertingCondition_State_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AlertingCondition_State))
}

func (fieldMask *AlertingCondition_State_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type AlertingCondition_Spec_TimeSeries_FieldMask struct {
	Paths []AlertingConditionSpecTimeSeries_FieldPath
}

func FullAlertingCondition_Spec_TimeSeries_FieldMask() *AlertingCondition_Spec_TimeSeries_FieldMask {
	res := &AlertingCondition_Spec_TimeSeries_FieldMask{}
	res.Paths = append(res.Paths, &AlertingConditionSpecTimeSeries_FieldTerminalPath{selector: AlertingConditionSpecTimeSeries_FieldPathSelectorQuery})
	res.Paths = append(res.Paths, &AlertingConditionSpecTimeSeries_FieldTerminalPath{selector: AlertingConditionSpecTimeSeries_FieldPathSelectorThreshold})
	res.Paths = append(res.Paths, &AlertingConditionSpecTimeSeries_FieldTerminalPath{selector: AlertingConditionSpecTimeSeries_FieldPathSelectorCombineThreshold})
	res.Paths = append(res.Paths, &AlertingConditionSpecTimeSeries_FieldTerminalPath{selector: AlertingConditionSpecTimeSeries_FieldPathSelectorDuration})
	return res
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseAlertingConditionSpecTimeSeries_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertingConditionSpecTimeSeries_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertingConditionSpecTimeSeries_FieldPath(raw)
	})
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) ProtoMessage() {}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) Subtract(other *AlertingCondition_Spec_TimeSeries_FieldMask) *AlertingCondition_Spec_TimeSeries_FieldMask {
	result := &AlertingCondition_Spec_TimeSeries_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[AlertingConditionSpecTimeSeries_FieldPathSelector]gotenobject.FieldMask{
		AlertingConditionSpecTimeSeries_FieldPathSelectorQuery:            &AlertingCondition_Spec_TimeSeries_Query_FieldMask{},
		AlertingConditionSpecTimeSeries_FieldPathSelectorThreshold:        &AlertingCondition_Spec_TimeSeries_Threshold_FieldMask{},
		AlertingConditionSpecTimeSeries_FieldPathSelectorCombineThreshold: &AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask{},
	}
	mySubMasks := map[AlertingConditionSpecTimeSeries_FieldPathSelector]gotenobject.FieldMask{
		AlertingConditionSpecTimeSeries_FieldPathSelectorQuery:            &AlertingCondition_Spec_TimeSeries_Query_FieldMask{},
		AlertingConditionSpecTimeSeries_FieldPathSelectorThreshold:        &AlertingCondition_Spec_TimeSeries_Threshold_FieldMask{},
		AlertingConditionSpecTimeSeries_FieldPathSelectorCombineThreshold: &AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertingConditionSpecTimeSeries_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *AlertingConditionSpecTimeSeries_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*AlertingConditionSpecTimeSeries_FieldTerminalPath); ok {
					switch tp.selector {
					case AlertingConditionSpecTimeSeries_FieldPathSelectorQuery:
						mySubMasks[AlertingConditionSpecTimeSeries_FieldPathSelectorQuery] = FullAlertingCondition_Spec_TimeSeries_Query_FieldMask()
					case AlertingConditionSpecTimeSeries_FieldPathSelectorThreshold:
						mySubMasks[AlertingConditionSpecTimeSeries_FieldPathSelectorThreshold] = FullAlertingCondition_Spec_TimeSeries_Threshold_FieldMask()
					case AlertingConditionSpecTimeSeries_FieldPathSelectorCombineThreshold:
						mySubMasks[AlertingConditionSpecTimeSeries_FieldPathSelectorCombineThreshold] = FullAlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask()
					}
				} else if tp, ok := path.(*AlertingConditionSpecTimeSeries_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &AlertingConditionSpecTimeSeries_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AlertingCondition_Spec_TimeSeries_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) FilterInputFields() *AlertingCondition_Spec_TimeSeries_FieldMask {
	result := &AlertingCondition_Spec_TimeSeries_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case AlertingConditionSpecTimeSeries_FieldPathSelectorQuery:
			if _, ok := path.(*AlertingConditionSpecTimeSeries_FieldTerminalPath); ok {
				for _, subpath := range FullAlertingCondition_Spec_TimeSeries_Query_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &AlertingConditionSpecTimeSeries_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*AlertingConditionSpecTimeSeries_FieldSubPath); ok {
				selectedMask := &AlertingCondition_Spec_TimeSeries_Query_FieldMask{
					Paths: []AlertingConditionSpecTimeSeriesQuery_FieldPath{sub.subPath.(AlertingConditionSpecTimeSeriesQuery_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &AlertingConditionSpecTimeSeries_FieldSubPath{selector: AlertingConditionSpecTimeSeries_FieldPathSelectorQuery, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertingConditionSpecTimeSeries_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertingConditionSpecTimeSeries_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AlertingCondition_Spec_TimeSeries_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AlertingCondition_Spec_TimeSeries_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) AppendPath(path AlertingConditionSpecTimeSeries_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertingConditionSpecTimeSeries_FieldPath))
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) GetPaths() []AlertingConditionSpecTimeSeries_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertingConditionSpecTimeSeries_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) Set(target, source *AlertingCondition_Spec_TimeSeries) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AlertingCondition_Spec_TimeSeries), source.(*AlertingCondition_Spec_TimeSeries))
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) Project(source *AlertingCondition_Spec_TimeSeries) *AlertingCondition_Spec_TimeSeries {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AlertingCondition_Spec_TimeSeries{}
	queryMask := &AlertingCondition_Spec_TimeSeries_Query_FieldMask{}
	wholeQueryAccepted := false
	thresholdMask := &AlertingCondition_Spec_TimeSeries_Threshold_FieldMask{}
	wholeThresholdAccepted := false
	combineThresholdMask := &AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask{}
	wholeCombineThresholdAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertingConditionSpecTimeSeries_FieldTerminalPath:
			switch tp.selector {
			case AlertingConditionSpecTimeSeries_FieldPathSelectorQuery:
				result.Query = source.Query
				wholeQueryAccepted = true
			case AlertingConditionSpecTimeSeries_FieldPathSelectorThreshold:
				result.Threshold = source.Threshold
				wholeThresholdAccepted = true
			case AlertingConditionSpecTimeSeries_FieldPathSelectorCombineThreshold:
				result.CombineThreshold = source.CombineThreshold
				wholeCombineThresholdAccepted = true
			case AlertingConditionSpecTimeSeries_FieldPathSelectorDuration:
				result.Duration = source.Duration
			}
		case *AlertingConditionSpecTimeSeries_FieldSubPath:
			switch tp.selector {
			case AlertingConditionSpecTimeSeries_FieldPathSelectorQuery:
				queryMask.AppendPath(tp.subPath.(AlertingConditionSpecTimeSeriesQuery_FieldPath))
			case AlertingConditionSpecTimeSeries_FieldPathSelectorThreshold:
				thresholdMask.AppendPath(tp.subPath.(AlertingConditionSpecTimeSeriesThreshold_FieldPath))
			case AlertingConditionSpecTimeSeries_FieldPathSelectorCombineThreshold:
				combineThresholdMask.AppendPath(tp.subPath.(AlertingConditionSpecTimeSeriesCombineThreshold_FieldPath))
			}
		}
	}
	if wholeQueryAccepted == false && len(queryMask.Paths) > 0 {
		result.Query = queryMask.Project(source.GetQuery())
	}
	if wholeThresholdAccepted == false && len(thresholdMask.Paths) > 0 {
		result.Threshold = thresholdMask.Project(source.GetThreshold())
	}
	if wholeCombineThresholdAccepted == false && len(combineThresholdMask.Paths) > 0 {
		result.CombineThreshold = combineThresholdMask.Project(source.GetCombineThreshold())
	}
	return result
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AlertingCondition_Spec_TimeSeries))
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type AlertingCondition_Spec_Trigger_FieldMask struct {
	Paths []AlertingConditionSpecTrigger_FieldPath
}

func FullAlertingCondition_Spec_Trigger_FieldMask() *AlertingCondition_Spec_Trigger_FieldMask {
	res := &AlertingCondition_Spec_Trigger_FieldMask{}
	res.Paths = append(res.Paths, &AlertingConditionSpecTrigger_FieldTerminalPath{selector: AlertingConditionSpecTrigger_FieldPathSelectorType})
	return res
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseAlertingConditionSpecTrigger_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertingConditionSpecTrigger_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertingConditionSpecTrigger_FieldPath(raw)
	})
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) ProtoMessage() {}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) Subtract(other *AlertingCondition_Spec_Trigger_FieldMask) *AlertingCondition_Spec_Trigger_FieldMask {
	result := &AlertingCondition_Spec_Trigger_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertingConditionSpecTrigger_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AlertingCondition_Spec_Trigger_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) FilterInputFields() *AlertingCondition_Spec_Trigger_FieldMask {
	result := &AlertingCondition_Spec_Trigger_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertingConditionSpecTrigger_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertingConditionSpecTrigger_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AlertingCondition_Spec_Trigger_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AlertingCondition_Spec_Trigger_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) AppendPath(path AlertingConditionSpecTrigger_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertingConditionSpecTrigger_FieldPath))
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) GetPaths() []AlertingConditionSpecTrigger_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertingConditionSpecTrigger_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) Set(target, source *AlertingCondition_Spec_Trigger) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AlertingCondition_Spec_Trigger), source.(*AlertingCondition_Spec_Trigger))
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) Project(source *AlertingCondition_Spec_Trigger) *AlertingCondition_Spec_Trigger {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AlertingCondition_Spec_Trigger{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertingConditionSpecTrigger_FieldTerminalPath:
			switch tp.selector {
			case AlertingConditionSpecTrigger_FieldPathSelectorType:
				result.Type = source.Type
			}
		}
	}
	return result
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AlertingCondition_Spec_Trigger))
}

func (fieldMask *AlertingCondition_Spec_Trigger_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type AlertingCondition_Spec_TimeSeries_Query_FieldMask struct {
	Paths []AlertingConditionSpecTimeSeriesQuery_FieldPath
}

func FullAlertingCondition_Spec_TimeSeries_Query_FieldMask() *AlertingCondition_Spec_TimeSeries_Query_FieldMask {
	res := &AlertingCondition_Spec_TimeSeries_Query_FieldMask{}
	res.Paths = append(res.Paths, &AlertingConditionSpecTimeSeriesQuery_FieldTerminalPath{selector: AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &AlertingConditionSpecTimeSeriesQuery_FieldTerminalPath{selector: AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorSelector})
	res.Paths = append(res.Paths, &AlertingConditionSpecTimeSeriesQuery_FieldTerminalPath{selector: AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorAggregation})
	return res
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseAlertingConditionSpecTimeSeriesQuery_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertingConditionSpecTimeSeriesQuery_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertingConditionSpecTimeSeriesQuery_FieldPath(raw)
	})
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) ProtoMessage() {}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) Subtract(other *AlertingCondition_Spec_TimeSeries_Query_FieldMask) *AlertingCondition_Spec_TimeSeries_Query_FieldMask {
	result := &AlertingCondition_Spec_TimeSeries_Query_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[AlertingConditionSpecTimeSeriesQuery_FieldPathSelector]gotenobject.FieldMask{
		AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorSelector:    &common.TimeSeriesSelector_FieldMask{},
		AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorAggregation: &common.Aggregation_FieldMask{},
	}
	mySubMasks := map[AlertingConditionSpecTimeSeriesQuery_FieldPathSelector]gotenobject.FieldMask{
		AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorSelector:    &common.TimeSeriesSelector_FieldMask{},
		AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorAggregation: &common.Aggregation_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertingConditionSpecTimeSeriesQuery_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *AlertingConditionSpecTimeSeriesQuery_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*AlertingConditionSpecTimeSeriesQuery_FieldTerminalPath); ok {
					switch tp.selector {
					case AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorSelector:
						mySubMasks[AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorSelector] = common.FullTimeSeriesSelector_FieldMask()
					case AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorAggregation:
						mySubMasks[AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorAggregation] = common.FullAggregation_FieldMask()
					}
				} else if tp, ok := path.(*AlertingConditionSpecTimeSeriesQuery_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &AlertingConditionSpecTimeSeriesQuery_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AlertingCondition_Spec_TimeSeries_Query_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) FilterInputFields() *AlertingCondition_Spec_TimeSeries_Query_FieldMask {
	result := &AlertingCondition_Spec_TimeSeries_Query_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorSelector:
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertingConditionSpecTimeSeriesQuery_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertingConditionSpecTimeSeriesQuery_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AlertingCondition_Spec_TimeSeries_Query_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AlertingCondition_Spec_TimeSeries_Query_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) AppendPath(path AlertingConditionSpecTimeSeriesQuery_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertingConditionSpecTimeSeriesQuery_FieldPath))
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) GetPaths() []AlertingConditionSpecTimeSeriesQuery_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertingConditionSpecTimeSeriesQuery_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) Set(target, source *AlertingCondition_Spec_TimeSeries_Query) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AlertingCondition_Spec_TimeSeries_Query), source.(*AlertingCondition_Spec_TimeSeries_Query))
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) Project(source *AlertingCondition_Spec_TimeSeries_Query) *AlertingCondition_Spec_TimeSeries_Query {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AlertingCondition_Spec_TimeSeries_Query{}
	selectorMask := &common.TimeSeriesSelector_FieldMask{}
	wholeSelectorAccepted := false
	aggregationMask := &common.Aggregation_FieldMask{}
	wholeAggregationAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertingConditionSpecTimeSeriesQuery_FieldTerminalPath:
			switch tp.selector {
			case AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorSelector:
				result.Selector = source.Selector
				wholeSelectorAccepted = true
			case AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorAggregation:
				result.Aggregation = source.Aggregation
				wholeAggregationAccepted = true
			}
		case *AlertingConditionSpecTimeSeriesQuery_FieldSubPath:
			switch tp.selector {
			case AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorSelector:
				selectorMask.AppendPath(tp.subPath.(common.TimeSeriesSelector_FieldPath))
			case AlertingConditionSpecTimeSeriesQuery_FieldPathSelectorAggregation:
				aggregationMask.AppendPath(tp.subPath.(common.Aggregation_FieldPath))
			}
		}
	}
	if wholeSelectorAccepted == false && len(selectorMask.Paths) > 0 {
		result.Selector = selectorMask.Project(source.GetSelector())
	}
	if wholeAggregationAccepted == false && len(aggregationMask.Paths) > 0 {
		result.Aggregation = aggregationMask.Project(source.GetAggregation())
	}
	return result
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AlertingCondition_Spec_TimeSeries_Query))
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Query_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type AlertingCondition_Spec_TimeSeries_Threshold_FieldMask struct {
	Paths []AlertingConditionSpecTimeSeriesThreshold_FieldPath
}

func FullAlertingCondition_Spec_TimeSeries_Threshold_FieldMask() *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask {
	res := &AlertingCondition_Spec_TimeSeries_Threshold_FieldMask{}
	res.Paths = append(res.Paths, &AlertingConditionSpecTimeSeriesThreshold_FieldTerminalPath{selector: AlertingConditionSpecTimeSeriesThreshold_FieldPathSelectorCompare})
	res.Paths = append(res.Paths, &AlertingConditionSpecTimeSeriesThreshold_FieldTerminalPath{selector: AlertingConditionSpecTimeSeriesThreshold_FieldPathSelectorValue})
	return res
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseAlertingConditionSpecTimeSeriesThreshold_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertingConditionSpecTimeSeriesThreshold_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertingConditionSpecTimeSeriesThreshold_FieldPath(raw)
	})
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) ProtoMessage() {}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) Subtract(other *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask {
	result := &AlertingCondition_Spec_TimeSeries_Threshold_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertingConditionSpecTimeSeriesThreshold_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AlertingCondition_Spec_TimeSeries_Threshold_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) FilterInputFields() *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask {
	result := &AlertingCondition_Spec_TimeSeries_Threshold_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertingConditionSpecTimeSeriesThreshold_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertingConditionSpecTimeSeriesThreshold_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) AppendPath(path AlertingConditionSpecTimeSeriesThreshold_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertingConditionSpecTimeSeriesThreshold_FieldPath))
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) GetPaths() []AlertingConditionSpecTimeSeriesThreshold_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertingConditionSpecTimeSeriesThreshold_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) Set(target, source *AlertingCondition_Spec_TimeSeries_Threshold) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AlertingCondition_Spec_TimeSeries_Threshold), source.(*AlertingCondition_Spec_TimeSeries_Threshold))
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) Project(source *AlertingCondition_Spec_TimeSeries_Threshold) *AlertingCondition_Spec_TimeSeries_Threshold {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AlertingCondition_Spec_TimeSeries_Threshold{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertingConditionSpecTimeSeriesThreshold_FieldTerminalPath:
			switch tp.selector {
			case AlertingConditionSpecTimeSeriesThreshold_FieldPathSelectorCompare:
				result.Compare = source.Compare
			case AlertingConditionSpecTimeSeriesThreshold_FieldPathSelectorValue:
				result.Value = source.Value
			}
		}
	}
	return result
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AlertingCondition_Spec_TimeSeries_Threshold))
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_Threshold_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask struct {
	Paths []AlertingConditionSpecTimeSeriesCombineThreshold_FieldPath
}

func FullAlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask() *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask {
	res := &AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask{}
	res.Paths = append(res.Paths, &AlertingConditionSpecTimeSeriesCombineThreshold_FieldTerminalPath{selector: AlertingConditionSpecTimeSeriesCombineThreshold_FieldPathSelectorPerMetric})
	res.Paths = append(res.Paths, &AlertingConditionSpecTimeSeriesCombineThreshold_FieldTerminalPath{selector: AlertingConditionSpecTimeSeriesCombineThreshold_FieldPathSelectorCombine})
	return res
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseAlertingConditionSpecTimeSeriesCombineThreshold_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*AlertingConditionSpecTimeSeriesCombineThreshold_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAlertingConditionSpecTimeSeriesCombineThreshold_FieldPath(raw)
	})
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) ProtoMessage() {}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) Subtract(other *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask {
	result := &AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *AlertingConditionSpecTimeSeriesCombineThreshold_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) FilterInputFields() *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask {
	result := &AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]AlertingConditionSpecTimeSeriesCombineThreshold_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAlertingConditionSpecTimeSeriesCombineThreshold_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) AppendPath(path AlertingConditionSpecTimeSeriesCombineThreshold_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(AlertingConditionSpecTimeSeriesCombineThreshold_FieldPath))
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) GetPaths() []AlertingConditionSpecTimeSeriesCombineThreshold_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAlertingConditionSpecTimeSeriesCombineThreshold_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) Set(target, source *AlertingCondition_Spec_TimeSeries_CombineThreshold) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*AlertingCondition_Spec_TimeSeries_CombineThreshold), source.(*AlertingCondition_Spec_TimeSeries_CombineThreshold))
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) Project(source *AlertingCondition_Spec_TimeSeries_CombineThreshold) *AlertingCondition_Spec_TimeSeries_CombineThreshold {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &AlertingCondition_Spec_TimeSeries_CombineThreshold{}
	var perMetricMapKeys []string
	wholePerMetricAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *AlertingConditionSpecTimeSeriesCombineThreshold_FieldTerminalPath:
			switch tp.selector {
			case AlertingConditionSpecTimeSeriesCombineThreshold_FieldPathSelectorPerMetric:
				result.PerMetric = source.PerMetric
				wholePerMetricAccepted = true
			case AlertingConditionSpecTimeSeriesCombineThreshold_FieldPathSelectorCombine:
				result.Combine = source.Combine
			}
		case *AlertingConditionSpecTimeSeriesCombineThreshold_FieldPathMap:
			switch tp.selector {
			case AlertingConditionSpecTimeSeriesCombineThreshold_FieldPathSelectorPerMetric:
				perMetricMapKeys = append(perMetricMapKeys, tp.key)
			}
		}
	}
	if wholePerMetricAccepted == false && len(perMetricMapKeys) > 0 && source.GetPerMetric() != nil {
		copiedMap := map[string]*AlertingCondition_Spec_TimeSeries_Threshold{}
		sourceMap := source.GetPerMetric()
		for _, key := range perMetricMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.PerMetric = copiedMap
	}
	return result
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*AlertingCondition_Spec_TimeSeries_CombineThreshold))
}

func (fieldMask *AlertingCondition_Spec_TimeSeries_CombineThreshold_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
