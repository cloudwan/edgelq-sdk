// Code generated by protoc-gen-goten-resource
// Resource: AlertingCondition
// DO NOT EDIT!!!

package alerting_condition

import (
	"context"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	"github.com/cloudwan/goten-sdk/types/watch_type"
)

// proto imports
import (
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alerting_policy"
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// ensure the imports are used
var (
	_ = new(context.Context)

	_ = codes.Internal
	_ = status.Status{}

	_ = watch_type.WatchType_STATEFUL
	_ = new(gotenobject.FieldPath)
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &alerting_policy.AlertingPolicy{}
	_ = &common.LabelDescriptor{}
	_ = &time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

type AlertingConditionAccess interface {
	GetAlertingCondition(context.Context, *GetQuery) (*AlertingCondition, error)
	BatchGetAlertingConditions(context.Context, []*Reference, ...gotenresource.BatchGetOption) error
	QueryAlertingConditions(context.Context, *ListQuery) (*QueryResultSnapshot, error)
	SearchAlertingConditions(context.Context, *SearchQuery) (*QueryResultSnapshot, error)
	WatchAlertingCondition(context.Context, *GetQuery, func(*AlertingConditionChange) error) error
	WatchAlertingConditions(context.Context, *WatchQuery, func(*QueryResultChange) error) error
	SaveAlertingCondition(context.Context, *AlertingCondition, ...gotenresource.SaveOption) error
	DeleteAlertingCondition(context.Context, *Reference, ...gotenresource.DeleteOption) error
}

type anyCastAccess struct {
	AlertingConditionAccess
}

func AsAnyCastAccess(access AlertingConditionAccess) gotenresource.Access {
	return &anyCastAccess{AlertingConditionAccess: access}
}

func (a *anyCastAccess) Get(ctx context.Context, q gotenresource.GetQuery) (gotenresource.Resource, error) {
	if asAlertingConditionQuery, ok := q.(*GetQuery); ok {
		return a.GetAlertingCondition(ctx, asAlertingConditionQuery)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected AlertingCondition, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Query(ctx context.Context, q gotenresource.ListQuery) (gotenresource.QueryResultSnapshot, error) {
	if asAlertingConditionQuery, ok := q.(*ListQuery); ok {
		return a.QueryAlertingConditions(ctx, asAlertingConditionQuery)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected AlertingCondition, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Search(ctx context.Context, q gotenresource.SearchQuery) (gotenresource.QueryResultSnapshot, error) {
	if asAlertingConditionQuery, ok := q.(*SearchQuery); ok {
		return a.SearchAlertingConditions(ctx, asAlertingConditionQuery)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected AlertingCondition, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Watch(ctx context.Context, q gotenresource.GetQuery, cb func(ch gotenresource.ResourceChange) error) error {
	if asAlertingConditionQuery, ok := q.(*GetQuery); ok {
		return a.WatchAlertingCondition(ctx, asAlertingConditionQuery, func(change *AlertingConditionChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected AlertingCondition, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) WatchQuery(ctx context.Context, q gotenresource.WatchQuery, cb func(ch gotenresource.QueryResultChange) error) error {
	if asAlertingConditionQuery, ok := q.(*WatchQuery); ok {
		return a.WatchAlertingConditions(ctx, asAlertingConditionQuery, func(change *QueryResultChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected AlertingCondition, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Save(ctx context.Context, res gotenresource.Resource, opts ...gotenresource.SaveOption) error {
	if asAlertingConditionRes, ok := res.(*AlertingCondition); ok {
		return a.SaveAlertingCondition(ctx, asAlertingConditionRes, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected AlertingCondition, got: %s",
		res.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Delete(ctx context.Context, ref gotenresource.Reference, opts ...gotenresource.DeleteOption) error {
	if asAlertingConditionRef, ok := ref.(*Reference); ok {
		return a.DeleteAlertingCondition(ctx, asAlertingConditionRef, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected AlertingCondition, got: %s",
		ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) BatchGet(ctx context.Context, toGet []gotenresource.Reference, opts ...gotenresource.BatchGetOption) error {
	alertingConditionRefs := make([]*Reference, 0, len(toGet))
	for _, ref := range toGet {
		if asAlertingConditionRef, ok := ref.(*Reference); !ok {
			return status.Errorf(codes.Internal,
				"Unrecognized descriptor, expected AlertingCondition, got: %s",
				ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
		} else {
			alertingConditionRefs = append(alertingConditionRefs, asAlertingConditionRef)
		}
	}
	return a.BatchGetAlertingConditions(ctx, alertingConditionRefs, opts...)
}

func (a *anyCastAccess) GetResourceDescriptors() []gotenresource.Descriptor {
	return []gotenresource.Descriptor{
		GetDescriptor(),
	}
}
