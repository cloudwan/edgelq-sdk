// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v4/alerting_condition.proto
// DO NOT EDIT!!!

package alerting_condition

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	alerting_policy "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/alerting_policy"
	common "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/common"
	time_serie "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/time_serie"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &alerting_policy.AlertingPolicy{}
	_ = &common.LabelDescriptor{}
	_ = &time_serie.Point{}
	_ = &durationpb.Duration{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AlertingCondition_Spec_TimeSeries_Threshold_Compare int32

const (
	AlertingCondition_Spec_TimeSeries_Threshold_COMPARE_UNSPECIFIED AlertingCondition_Spec_TimeSeries_Threshold_Compare = 0
	AlertingCondition_Spec_TimeSeries_Threshold_GT                  AlertingCondition_Spec_TimeSeries_Threshold_Compare = 1
	AlertingCondition_Spec_TimeSeries_Threshold_LT                  AlertingCondition_Spec_TimeSeries_Threshold_Compare = 2
)

var (
	AlertingCondition_Spec_TimeSeries_Threshold_Compare_name = map[int32]string{
		0: "COMPARE_UNSPECIFIED",
		1: "GT",
		2: "LT",
	}

	AlertingCondition_Spec_TimeSeries_Threshold_Compare_value = map[string]int32{
		"COMPARE_UNSPECIFIED": 0,
		"GT":                  1,
		"LT":                  2,
	}
)

func (x AlertingCondition_Spec_TimeSeries_Threshold_Compare) Enum() *AlertingCondition_Spec_TimeSeries_Threshold_Compare {
	p := new(AlertingCondition_Spec_TimeSeries_Threshold_Compare)
	*p = x
	return p
}

func (x AlertingCondition_Spec_TimeSeries_Threshold_Compare) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (AlertingCondition_Spec_TimeSeries_Threshold_Compare) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_enumTypes[0].Descriptor()
}

func (AlertingCondition_Spec_TimeSeries_Threshold_Compare) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_alerting_condition_proto_enumTypes[0]
}

func (x AlertingCondition_Spec_TimeSeries_Threshold_Compare) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use AlertingCondition_Spec_TimeSeries_Threshold_Compare.ProtoReflect.Descriptor instead.
func (AlertingCondition_Spec_TimeSeries_Threshold_Compare) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

type AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator int32

const (
	AlertingCondition_Spec_TimeSeries_CombineThreshold_OR  AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator = 0
	AlertingCondition_Spec_TimeSeries_CombineThreshold_AND AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator = 1
)

var (
	AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator_name = map[int32]string{
		0: "OR",
		1: "AND",
	}

	AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator_value = map[string]int32{
		"OR":  0,
		"AND": 1,
	}
)

func (x AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) Enum() *AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator {
	p := new(AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator)
	*p = x
	return p
}

func (x AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_enumTypes[1].Descriptor()
}

func (AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_alerting_condition_proto_enumTypes[1]
}

func (x AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator.ProtoReflect.Descriptor instead.
func (AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescGZIP(), []int{0, 0, 0, 2, 0}
}

type AlertingCondition_Spec_Trigger_Type int32

const (
	// Triggers on each unique TimeSeries label set violation
	AlertingCondition_Spec_Trigger_EACH AlertingCondition_Spec_Trigger_Type = 0
)

var (
	AlertingCondition_Spec_Trigger_Type_name = map[int32]string{
		0: "EACH",
	}

	AlertingCondition_Spec_Trigger_Type_value = map[string]int32{
		"EACH": 0,
	}
)

func (x AlertingCondition_Spec_Trigger_Type) Enum() *AlertingCondition_Spec_Trigger_Type {
	p := new(AlertingCondition_Spec_Trigger_Type)
	*p = x
	return p
}

func (x AlertingCondition_Spec_Trigger_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (AlertingCondition_Spec_Trigger_Type) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_enumTypes[2].Descriptor()
}

func (AlertingCondition_Spec_Trigger_Type) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_alerting_condition_proto_enumTypes[2]
}

func (x AlertingCondition_Spec_Trigger_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use AlertingCondition_Spec_Trigger_Type.ProtoReflect.Descriptor instead.
func (AlertingCondition_Spec_Trigger_Type) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

// AlertingCondition Resource
type AlertingCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of AlertingCondition
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// Display Name
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// Long description
	Description string                   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	Spec        *AlertingCondition_Spec  `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	State       *AlertingCondition_State `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty" firestore:"state"`
}

func (m *AlertingCondition) Reset() {
	*m = AlertingCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingCondition) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingCondition) ProtoMessage() {}

func (m *AlertingCondition) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingCondition) GotenMessage() {}

// Deprecated, Use AlertingCondition.ProtoReflect.Descriptor instead.
func (*AlertingCondition) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescGZIP(), []int{0}
}

func (m *AlertingCondition) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingCondition) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingCondition) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingCondition) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingCondition) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *AlertingCondition) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *AlertingCondition) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *AlertingCondition) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AlertingCondition) GetSpec() *AlertingCondition_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *AlertingCondition) GetState() *AlertingCondition_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *AlertingCondition) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "AlertingCondition"))
	}
	m.Name = fv
}

func (m *AlertingCondition) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "AlertingCondition"))
	}
	m.Metadata = fv
}

func (m *AlertingCondition) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "AlertingCondition"))
	}
	m.DisplayName = fv
}

func (m *AlertingCondition) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "AlertingCondition"))
	}
	m.Description = fv
}

func (m *AlertingCondition) SetSpec(fv *AlertingCondition_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "AlertingCondition"))
	}
	m.Spec = fv
}

func (m *AlertingCondition) SetState(fv *AlertingCondition_State) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "AlertingCondition"))
	}
	m.State = fv
}

type AlertingCondition_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	TimeSeries    *AlertingCondition_Spec_TimeSeries `protobuf:"bytes,1,opt,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty" firestore:"timeSeries"`
	Trigger       *AlertingCondition_Spec_Trigger    `protobuf:"bytes,5,opt,name=trigger,proto3" json:"trigger,omitempty" firestore:"trigger"`
}

func (m *AlertingCondition_Spec) Reset() {
	*m = AlertingCondition_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingCondition_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingCondition_Spec) ProtoMessage() {}

func (m *AlertingCondition_Spec) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingCondition_Spec) GotenMessage() {}

// Deprecated, Use AlertingCondition_Spec.ProtoReflect.Descriptor instead.
func (*AlertingCondition_Spec) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescGZIP(), []int{0, 0}
}

func (m *AlertingCondition_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingCondition_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingCondition_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingCondition_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingCondition_Spec) GetTimeSeries() *AlertingCondition_Spec_TimeSeries {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *AlertingCondition_Spec) GetTrigger() *AlertingCondition_Spec_Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *AlertingCondition_Spec) SetTimeSeries(fv *AlertingCondition_Spec_TimeSeries) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TimeSeries", "AlertingCondition_Spec"))
	}
	m.TimeSeries = fv
}

func (m *AlertingCondition_Spec) SetTrigger(fv *AlertingCondition_Spec_Trigger) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Trigger", "AlertingCondition_Spec"))
	}
	m.Trigger = fv
}

type AlertingCondition_State struct {
	state             protoimpl.MessageState
	sizeCache         protoimpl.SizeCache
	unknownFields     protoimpl.UnknownFields
	FiringAlertsCount int64 `protobuf:"varint,1,opt,name=firing_alerts_count,json=firingAlertsCount,proto3" json:"firing_alerts_count,omitempty" firestore:"firingAlertsCount"`
}

func (m *AlertingCondition_State) Reset() {
	*m = AlertingCondition_State{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingCondition_State) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingCondition_State) ProtoMessage() {}

func (m *AlertingCondition_State) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingCondition_State) GotenMessage() {}

// Deprecated, Use AlertingCondition_State.ProtoReflect.Descriptor instead.
func (*AlertingCondition_State) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescGZIP(), []int{0, 1}
}

func (m *AlertingCondition_State) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingCondition_State) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingCondition_State) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingCondition_State) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingCondition_State) GetFiringAlertsCount() int64 {
	if m != nil {
		return m.FiringAlertsCount
	}
	return int64(0)
}

func (m *AlertingCondition_State) SetFiringAlertsCount(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FiringAlertsCount", "AlertingCondition_State"))
	}
	m.FiringAlertsCount = fv
}

type AlertingCondition_Spec_TimeSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Time Series Query
	Query *AlertingCondition_Spec_TimeSeries_Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty" firestore:"query"`
	// Either specify single threshold or combine threshold, which allows to
	// pair each metric value to their specific thresholds,
	// e.g. distinguish mean (loss, latency, jitter) in single query
	Threshold        *AlertingCondition_Spec_TimeSeries_Threshold        `protobuf:"bytes,2,opt,name=threshold,proto3" json:"threshold,omitempty" firestore:"threshold"`
	CombineThreshold *AlertingCondition_Spec_TimeSeries_CombineThreshold `protobuf:"bytes,3,opt,name=combine_threshold,json=combineThreshold,proto3" json:"combine_threshold,omitempty" firestore:"combineThreshold"`
	// Duration describes length of time needed for the condition to trigger
	// a new alert of resolve an existing one
	Duration *durationpb.Duration `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty" firestore:"duration"`
}

func (m *AlertingCondition_Spec_TimeSeries) Reset() {
	*m = AlertingCondition_Spec_TimeSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingCondition_Spec_TimeSeries) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingCondition_Spec_TimeSeries) ProtoMessage() {}

func (m *AlertingCondition_Spec_TimeSeries) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingCondition_Spec_TimeSeries) GotenMessage() {}

// Deprecated, Use AlertingCondition_Spec_TimeSeries.ProtoReflect.Descriptor instead.
func (*AlertingCondition_Spec_TimeSeries) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *AlertingCondition_Spec_TimeSeries) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingCondition_Spec_TimeSeries) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingCondition_Spec_TimeSeries) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingCondition_Spec_TimeSeries) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingCondition_Spec_TimeSeries) GetQuery() *AlertingCondition_Spec_TimeSeries_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *AlertingCondition_Spec_TimeSeries) GetThreshold() *AlertingCondition_Spec_TimeSeries_Threshold {
	if m != nil {
		return m.Threshold
	}
	return nil
}

func (m *AlertingCondition_Spec_TimeSeries) GetCombineThreshold() *AlertingCondition_Spec_TimeSeries_CombineThreshold {
	if m != nil {
		return m.CombineThreshold
	}
	return nil
}

func (m *AlertingCondition_Spec_TimeSeries) GetDuration() *durationpb.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *AlertingCondition_Spec_TimeSeries) SetQuery(fv *AlertingCondition_Spec_TimeSeries_Query) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Query", "AlertingCondition_Spec_TimeSeries"))
	}
	m.Query = fv
}

func (m *AlertingCondition_Spec_TimeSeries) SetThreshold(fv *AlertingCondition_Spec_TimeSeries_Threshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Threshold", "AlertingCondition_Spec_TimeSeries"))
	}
	m.Threshold = fv
}

func (m *AlertingCondition_Spec_TimeSeries) SetCombineThreshold(fv *AlertingCondition_Spec_TimeSeries_CombineThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CombineThreshold", "AlertingCondition_Spec_TimeSeries"))
	}
	m.CombineThreshold = fv
}

func (m *AlertingCondition_Spec_TimeSeries) SetDuration(fv *durationpb.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Duration", "AlertingCondition_Spec_TimeSeries"))
	}
	m.Duration = fv
}

type AlertingCondition_Spec_Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Type          AlertingCondition_Spec_Trigger_Type `protobuf:"varint,1,opt,name=type,proto3,enum=ntt.monitoring.v4.AlertingCondition_Spec_Trigger_Type" json:"type,omitempty" firestore:"type"`
}

func (m *AlertingCondition_Spec_Trigger) Reset() {
	*m = AlertingCondition_Spec_Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingCondition_Spec_Trigger) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingCondition_Spec_Trigger) ProtoMessage() {}

func (m *AlertingCondition_Spec_Trigger) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingCondition_Spec_Trigger) GotenMessage() {}

// Deprecated, Use AlertingCondition_Spec_Trigger.ProtoReflect.Descriptor instead.
func (*AlertingCondition_Spec_Trigger) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *AlertingCondition_Spec_Trigger) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingCondition_Spec_Trigger) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingCondition_Spec_Trigger) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingCondition_Spec_Trigger) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingCondition_Spec_Trigger) GetType() AlertingCondition_Spec_Trigger_Type {
	if m != nil {
		return m.Type
	}
	return AlertingCondition_Spec_Trigger_EACH
}

func (m *AlertingCondition_Spec_Trigger) SetType(fv AlertingCondition_Spec_Trigger_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "AlertingCondition_Spec_Trigger"))
	}
	m.Type = fv
}

type AlertingCondition_Spec_TimeSeries_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Filter used for time-series.
	Filter *time_serie.Filter `protobuf:"bytes,1,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// Generated, filter-able selector, extracted from filter value. It will
	// contain all extracted conditions for '==' and 'IN' operators.
	// It will exclude conditions for operators '!=' and 'NOT IN'.
	// This allows filtering AlertingConditions by filter conditions.
	Selector *common.TimeSeriesSelector `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty" firestore:"selector"`
	// Time Series aggregation
	Aggregation *common.Aggregation `protobuf:"bytes,3,opt,name=aggregation,proto3" json:"aggregation,omitempty" firestore:"aggregation"`
}

func (m *AlertingCondition_Spec_TimeSeries_Query) Reset() {
	*m = AlertingCondition_Spec_TimeSeries_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingCondition_Spec_TimeSeries_Query) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingCondition_Spec_TimeSeries_Query) ProtoMessage() {}

func (m *AlertingCondition_Spec_TimeSeries_Query) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingCondition_Spec_TimeSeries_Query) GotenMessage() {}

// Deprecated, Use AlertingCondition_Spec_TimeSeries_Query.ProtoReflect.Descriptor instead.
func (*AlertingCondition_Spec_TimeSeries_Query) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (m *AlertingCondition_Spec_TimeSeries_Query) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingCondition_Spec_TimeSeries_Query) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingCondition_Spec_TimeSeries_Query) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingCondition_Spec_TimeSeries_Query) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingCondition_Spec_TimeSeries_Query) GetFilter() *time_serie.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *AlertingCondition_Spec_TimeSeries_Query) GetSelector() *common.TimeSeriesSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *AlertingCondition_Spec_TimeSeries_Query) GetAggregation() *common.Aggregation {
	if m != nil {
		return m.Aggregation
	}
	return nil
}

func (m *AlertingCondition_Spec_TimeSeries_Query) SetFilter(fv *time_serie.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "AlertingCondition_Spec_TimeSeries_Query"))
	}
	m.Filter = fv
}

func (m *AlertingCondition_Spec_TimeSeries_Query) SetSelector(fv *common.TimeSeriesSelector) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Selector", "AlertingCondition_Spec_TimeSeries_Query"))
	}
	m.Selector = fv
}

func (m *AlertingCondition_Spec_TimeSeries_Query) SetAggregation(fv *common.Aggregation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Aggregation", "AlertingCondition_Spec_TimeSeries_Query"))
	}
	m.Aggregation = fv
}

type AlertingCondition_Spec_TimeSeries_Threshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Compare function specifies if observed value must be GreaterThan (GT)
	// or LesserThan (LT) threshold value in order to trigger an alert.
	//
	// Example: for metric latency {compare: GT, value: 150} will trigger if
	// actual latency is above 150ms.
	Compare AlertingCondition_Spec_TimeSeries_Threshold_Compare `protobuf:"varint,1,opt,name=compare,proto3,enum=ntt.monitoring.v4.AlertingCondition_Spec_TimeSeries_Threshold_Compare" json:"compare,omitempty" firestore:"compare"`
	// threshold value
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty" firestore:"value"`
}

func (m *AlertingCondition_Spec_TimeSeries_Threshold) Reset() {
	*m = AlertingCondition_Spec_TimeSeries_Threshold{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingCondition_Spec_TimeSeries_Threshold) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingCondition_Spec_TimeSeries_Threshold) ProtoMessage() {}

func (m *AlertingCondition_Spec_TimeSeries_Threshold) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingCondition_Spec_TimeSeries_Threshold) GotenMessage() {}

// Deprecated, Use AlertingCondition_Spec_TimeSeries_Threshold.ProtoReflect.Descriptor instead.
func (*AlertingCondition_Spec_TimeSeries_Threshold) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (m *AlertingCondition_Spec_TimeSeries_Threshold) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingCondition_Spec_TimeSeries_Threshold) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingCondition_Spec_TimeSeries_Threshold) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingCondition_Spec_TimeSeries_Threshold) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingCondition_Spec_TimeSeries_Threshold) GetCompare() AlertingCondition_Spec_TimeSeries_Threshold_Compare {
	if m != nil {
		return m.Compare
	}
	return AlertingCondition_Spec_TimeSeries_Threshold_COMPARE_UNSPECIFIED
}

func (m *AlertingCondition_Spec_TimeSeries_Threshold) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return float64(0)
}

func (m *AlertingCondition_Spec_TimeSeries_Threshold) SetCompare(fv AlertingCondition_Spec_TimeSeries_Threshold_Compare) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Compare", "AlertingCondition_Spec_TimeSeries_Threshold"))
	}
	m.Compare = fv
}

func (m *AlertingCondition_Spec_TimeSeries_Threshold) SetValue(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Value", "AlertingCondition_Spec_TimeSeries_Threshold"))
	}
	m.Value = fv
}

type AlertingCondition_Spec_TimeSeries_CombineThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Per Metric threshold.
	//
	// If multiple metrics are selected each metric may specify a different
	// threshold
	PerMetric map[string]*AlertingCondition_Spec_TimeSeries_Threshold `protobuf:"bytes,1,rep,name=per_metric,json=perMetric,proto3" json:"per_metric,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"perMetric"`
	// Combine describes how sub-conditions for each metric concerning
	// single resource label set (determined by aggregation.groupByFields)
	// must compose in order to trigger an alert.
	// TODO: add support for AND
	Combine AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator `protobuf:"varint,2,opt,name=combine,proto3,enum=ntt.monitoring.v4.AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator" json:"combine,omitempty" firestore:"combine"`
}

func (m *AlertingCondition_Spec_TimeSeries_CombineThreshold) Reset() {
	*m = AlertingCondition_Spec_TimeSeries_CombineThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AlertingCondition_Spec_TimeSeries_CombineThreshold) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AlertingCondition_Spec_TimeSeries_CombineThreshold) ProtoMessage() {}

func (m *AlertingCondition_Spec_TimeSeries_CombineThreshold) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AlertingCondition_Spec_TimeSeries_CombineThreshold) GotenMessage() {}

// Deprecated, Use AlertingCondition_Spec_TimeSeries_CombineThreshold.ProtoReflect.Descriptor instead.
func (*AlertingCondition_Spec_TimeSeries_CombineThreshold) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (m *AlertingCondition_Spec_TimeSeries_CombineThreshold) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AlertingCondition_Spec_TimeSeries_CombineThreshold) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AlertingCondition_Spec_TimeSeries_CombineThreshold) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AlertingCondition_Spec_TimeSeries_CombineThreshold) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AlertingCondition_Spec_TimeSeries_CombineThreshold) GetPerMetric() map[string]*AlertingCondition_Spec_TimeSeries_Threshold {
	if m != nil {
		return m.PerMetric
	}
	return nil
}

func (m *AlertingCondition_Spec_TimeSeries_CombineThreshold) GetCombine() AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator {
	if m != nil {
		return m.Combine
	}
	return AlertingCondition_Spec_TimeSeries_CombineThreshold_OR
}

func (m *AlertingCondition_Spec_TimeSeries_CombineThreshold) SetPerMetric(fv map[string]*AlertingCondition_Spec_TimeSeries_Threshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PerMetric", "AlertingCondition_Spec_TimeSeries_CombineThreshold"))
	}
	m.PerMetric = fv
}

func (m *AlertingCondition_Spec_TimeSeries_CombineThreshold) SetCombine(fv AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Combine", "AlertingCondition_Spec_TimeSeries_CombineThreshold"))
	}
	m.Combine = fv
}

var edgelq_monitoring_proto_v4_alerting_condition_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v4_alerting_condition_proto_rawDesc = []byte{
	0x0a, 0x33, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xcf, 0x14, 0x0a, 0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xb2, 0xda, 0x21, 0x15, 0x0a, 0x13, 0x0a, 0x11, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xd7, 0x0b, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5f, 0x0a,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02,
	0x08, 0x01, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x55,
	0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x07, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x1a, 0xad, 0x09, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x5c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x72,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0e, 0xca, 0xc6, 0x27, 0x0a, 0x5a, 0x04, 0x32, 0x02, 0x08, 0x3c, 0x62, 0x02, 0x08, 0x01, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc7, 0x01, 0x0a, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x1a, 0x0b, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x47,
	0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xca, 0xc6,
	0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xb7, 0x01, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x60, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x47, 0x54, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x02, 0x1a, 0xa5, 0x03,
	0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x73, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e, 0x50, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x7a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x55, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x09, 0xca, 0xc6, 0x27, 0x05, 0x3a, 0x03, 0x1a, 0x01, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x1a, 0x7c, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x22, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4e, 0x44, 0x10, 0x01, 0x1a, 0x67, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x10, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x41, 0x43, 0x48, 0x10, 0x00, 0x1a, 0x37,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0xf8, 0x05, 0xea, 0x41, 0x99, 0x01, 0x0a, 0x27,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x92, 0xd9, 0x21, 0x9c, 0x01, 0x0a, 0x12, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x12, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x38, 0x05, 0x42, 0x60, 0x08, 0x02, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x66, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x13, 0x46, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0xaa, 0xd9, 0x21, 0x4f, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x0d, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x0a, 0x0f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xb2, 0xdf, 0x21, 0x9a, 0x02,
	0x0a, 0x97, 0x02, 0x0a, 0x94, 0x02, 0x0a, 0x0d, 0x62, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x44, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x2d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x1a, 0x4b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x2d, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x1a, 0x5b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2d, 0x2a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x38, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x2a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0xd8, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x5d, 0x0a, 0x18,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x34, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xa2, 0x80, 0xd1, 0x02, 0x5f,
	0x0a, 0x19, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x42, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x34, 0x2f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x0a,
	0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x34, 0x42, 0x16, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x34, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescData = edgelq_monitoring_proto_v4_alerting_condition_proto_rawDesc
)

func edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v4_alerting_condition_proto_rawDescData
}

var edgelq_monitoring_proto_v4_alerting_condition_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var edgelq_monitoring_proto_v4_alerting_condition_proto_goTypes = []interface{}{
	(AlertingCondition_Spec_TimeSeries_Threshold_Compare)(0),                // 0: ntt.monitoring.v4.AlertingCondition_Spec_TimeSeries_Threshold_Compare
	(AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator)(0), // 1: ntt.monitoring.v4.AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator
	(AlertingCondition_Spec_Trigger_Type)(0),                                // 2: ntt.monitoring.v4.AlertingCondition_Spec_Trigger_Type
	(*AlertingCondition)(nil),                                               // 3: ntt.monitoring.v4.AlertingCondition
	(*AlertingCondition_Spec)(nil),                                          // 4: ntt.monitoring.v4.AlertingCondition.Spec
	(*AlertingCondition_State)(nil),                                         // 5: ntt.monitoring.v4.AlertingCondition.State
	(*AlertingCondition_Spec_TimeSeries)(nil),                               // 6: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries
	(*AlertingCondition_Spec_Trigger)(nil),                                  // 7: ntt.monitoring.v4.AlertingCondition.Spec.Trigger
	(*AlertingCondition_Spec_TimeSeries_Query)(nil),                         // 8: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.Query
	(*AlertingCondition_Spec_TimeSeries_Threshold)(nil),                     // 9: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.Threshold
	(*AlertingCondition_Spec_TimeSeries_CombineThreshold)(nil),              // 10: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.CombineThreshold
	nil,                               // 11: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.CombineThreshold.PerMetricEntry
	(*meta.Meta)(nil),                 // 12: goten.types.Meta
	(*durationpb.Duration)(nil),       // 13: google.protobuf.Duration
	(*common.TimeSeriesSelector)(nil), // 14: ntt.monitoring.v4.TimeSeriesSelector
	(*common.Aggregation)(nil),        // 15: ntt.monitoring.v4.Aggregation
}
var edgelq_monitoring_proto_v4_alerting_condition_proto_depIdxs = []int32{
	12, // 0: ntt.monitoring.v4.AlertingCondition.metadata:type_name -> goten.types.Meta
	4,  // 1: ntt.monitoring.v4.AlertingCondition.spec:type_name -> ntt.monitoring.v4.AlertingCondition.Spec
	5,  // 2: ntt.monitoring.v4.AlertingCondition.state:type_name -> ntt.monitoring.v4.AlertingCondition.State
	6,  // 3: ntt.monitoring.v4.AlertingCondition.Spec.time_series:type_name -> ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries
	7,  // 4: ntt.monitoring.v4.AlertingCondition.Spec.trigger:type_name -> ntt.monitoring.v4.AlertingCondition.Spec.Trigger
	8,  // 5: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.query:type_name -> ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.Query
	9,  // 6: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.threshold:type_name -> ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.Threshold
	10, // 7: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.combine_threshold:type_name -> ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.CombineThreshold
	13, // 8: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.duration:type_name -> google.protobuf.Duration
	2,  // 9: ntt.monitoring.v4.AlertingCondition.Spec.Trigger.type:type_name -> ntt.monitoring.v4.AlertingCondition_Spec_Trigger_Type
	14, // 10: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.Query.selector:type_name -> ntt.monitoring.v4.TimeSeriesSelector
	15, // 11: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.Query.aggregation:type_name -> ntt.monitoring.v4.Aggregation
	0,  // 12: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.Threshold.compare:type_name -> ntt.monitoring.v4.AlertingCondition_Spec_TimeSeries_Threshold_Compare
	11, // 13: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.CombineThreshold.per_metric:type_name -> ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.CombineThreshold.PerMetricEntry
	1,  // 14: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.CombineThreshold.combine:type_name -> ntt.monitoring.v4.AlertingCondition_Spec_TimeSeries_CombineThreshold_CombineOperator
	9,  // 15: ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.CombineThreshold.PerMetricEntry.value:type_name -> ntt.monitoring.v4.AlertingCondition.Spec.TimeSeries.Threshold
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v4_alerting_condition_proto_init() }
func edgelq_monitoring_proto_v4_alerting_condition_proto_init() {
	if edgelq_monitoring_proto_v4_alerting_condition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingCondition_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingCondition_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingCondition_Spec_TimeSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingCondition_Spec_Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingCondition_Spec_TimeSeries_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingCondition_Spec_TimeSeries_Threshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertingCondition_Spec_TimeSeries_CombineThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v4_alerting_condition_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_monitoring_proto_v4_alerting_condition_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v4_alerting_condition_proto_depIdxs,
		EnumInfos:         edgelq_monitoring_proto_v4_alerting_condition_proto_enumTypes,
		MessageInfos:      edgelq_monitoring_proto_v4_alerting_condition_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v4_alerting_condition_proto = out.File
	edgelq_monitoring_proto_v4_alerting_condition_proto_rawDesc = nil
	edgelq_monitoring_proto_v4_alerting_condition_proto_goTypes = nil
	edgelq_monitoring_proto_v4_alerting_condition_proto_depIdxs = nil
}
