// Code generated by protoc-gen-goten-resource
// Resource: NotificationChannel
// DO NOT EDIT!!!

package notification_channel

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

type NotificationChannelList []*NotificationChannel

func (l NotificationChannelList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*NotificationChannel))
}

func (l NotificationChannelList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(NotificationChannelList)...)
}

func (l NotificationChannelList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l NotificationChannelList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l NotificationChannelList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*NotificationChannel)
}

func (l NotificationChannelList) Length() int {
	return len(l)
}

type NotificationChannelChangeList []*NotificationChannelChange

func (l NotificationChannelChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*NotificationChannelChange))
}

func (l NotificationChannelChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(NotificationChannelChangeList)...)
}

func (l NotificationChannelChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l NotificationChannelChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l NotificationChannelChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*NotificationChannelChange)
}

func (l NotificationChannelChangeList) Length() int {
	return len(l)
}

type NotificationChannelNameList []*Name

func (l NotificationChannelNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l NotificationChannelNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(NotificationChannelNameList)...)
}

func (l NotificationChannelNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l NotificationChannelNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l NotificationChannelNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l NotificationChannelNameList) Length() int {
	return len(l)
}

type NotificationChannelReferenceList []*Reference

func (l NotificationChannelReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l NotificationChannelReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(NotificationChannelReferenceList)...)
}

func (l NotificationChannelReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l NotificationChannelReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l NotificationChannelReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l NotificationChannelReferenceList) Length() int {
	return len(l)
}

type NotificationChannelParentNameList []*ParentName

func (l NotificationChannelParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l NotificationChannelParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(NotificationChannelParentNameList)...)
}

func (l NotificationChannelParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l NotificationChannelParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l NotificationChannelParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l NotificationChannelParentNameList) Length() int {
	return len(l)
}

type NotificationChannelParentReferenceList []*ParentReference

func (l NotificationChannelParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l NotificationChannelParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(NotificationChannelParentReferenceList)...)
}

func (l NotificationChannelParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l NotificationChannelParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l NotificationChannelParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l NotificationChannelParentReferenceList) Length() int {
	return len(l)
}

type NotificationChannelMap map[Name]*NotificationChannel

func (m NotificationChannelMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m NotificationChannelMap) Set(res gotenresource.Resource) {
	tRes := res.(*NotificationChannel)
	m[*tRes.Name] = tRes
}

func (m NotificationChannelMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m NotificationChannelMap) Length() int {
	return len(m)
}

func (m NotificationChannelMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type NotificationChannelChangeMap map[Name]*NotificationChannelChange

func (m NotificationChannelChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m NotificationChannelChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*NotificationChannelChange)
	m[*tChange.GetNotificationChannelName()] = tChange
}

func (m NotificationChannelChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m NotificationChannelChangeMap) Length() int {
	return len(m)
}

func (m NotificationChannelChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
