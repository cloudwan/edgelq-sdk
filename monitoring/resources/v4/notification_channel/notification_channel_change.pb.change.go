// Code generated by protoc-gen-goten-resource
// Resource change: NotificationChannelChange
// DO NOT EDIT!!!

package notification_channel

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &fieldmaskpb.FieldMask{}
)

func (c *NotificationChannelChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*NotificationChannelChange_Added_)
	return ok
}

func (c *NotificationChannelChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*NotificationChannelChange_Modified_)
	return ok
}

func (c *NotificationChannelChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*NotificationChannelChange_Current_)
	return ok
}

func (c *NotificationChannelChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*NotificationChannelChange_Removed_)
	return ok
}

func (c *NotificationChannelChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *NotificationChannelChange_Added_:
		return cType.Added.ViewIndex
	case *NotificationChannelChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *NotificationChannelChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *NotificationChannelChange_Removed_:
		return cType.Removed.ViewIndex
	case *NotificationChannelChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *NotificationChannelChange) GetNotificationChannel() *NotificationChannel {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *NotificationChannelChange_Added_:
		return cType.Added.NotificationChannel
	case *NotificationChannelChange_Modified_:
		return cType.Modified.NotificationChannel
	case *NotificationChannelChange_Current_:
		return cType.Current.NotificationChannel
	case *NotificationChannelChange_Removed_:
		return nil
	}
	return nil
}

func (c *NotificationChannelChange) GetRawResource() gotenresource.Resource {
	return c.GetNotificationChannel()
}

func (c *NotificationChannelChange) GetNotificationChannelName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *NotificationChannelChange_Added_:
		return cType.Added.NotificationChannel.GetName()
	case *NotificationChannelChange_Modified_:
		return cType.Modified.Name
	case *NotificationChannelChange_Current_:
		return cType.Current.NotificationChannel.GetName()
	case *NotificationChannelChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *NotificationChannelChange) GetRawName() gotenresource.Name {
	return c.GetNotificationChannelName()
}

func (c *NotificationChannelChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &NotificationChannelChange_Added_{
		Added: &NotificationChannelChange_Added{
			NotificationChannel: snapshot.(*NotificationChannel),
			ViewIndex:           int32(idx),
		},
	}
}

func (c *NotificationChannelChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &NotificationChannelChange_Modified_{
		Modified: &NotificationChannelChange_Modified{
			Name:                name.(*Name),
			NotificationChannel: snapshot.(*NotificationChannel),
			PreviousViewIndex:   int32(prevIdx),
			ViewIndex:           int32(newIdx),
		},
	}
}

func (c *NotificationChannelChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &NotificationChannelChange_Current_{
		Current: &NotificationChannelChange_Current{
			NotificationChannel: snapshot.(*NotificationChannel),
		},
	}
}

func (c *NotificationChannelChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &NotificationChannelChange_Removed_{
		Removed: &NotificationChannelChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
