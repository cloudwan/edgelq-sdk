// Code generated by protoc-gen-goten-go
// File: edgelq/monitoring/proto/v4/notification_channel.proto
// DO NOT EDIT!!!

package notification_channel

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/monitoring/resources/v4/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of NotificationChannel
type NotificationChannel_Spec_Type int32

const (
	// Type is unknown
	NotificationChannel_Spec_TYPE_UNSPECIFIED NotificationChannel_Spec_Type = 0
	// Email NotificationChannel
	NotificationChannel_Spec_EMAIL NotificationChannel_Spec_Type = 1
	// Slack NotificationChannel
	NotificationChannel_Spec_SLACK NotificationChannel_Spec_Type = 2
	// Webhook NotificationChannel
	NotificationChannel_Spec_WEBHOOK NotificationChannel_Spec_Type = 3
)

var (
	NotificationChannel_Spec_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "EMAIL",
		2: "SLACK",
		3: "WEBHOOK",
	}

	NotificationChannel_Spec_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"EMAIL":            1,
		"SLACK":            2,
		"WEBHOOK":          3,
	}
)

func (x NotificationChannel_Spec_Type) Enum() *NotificationChannel_Spec_Type {
	p := new(NotificationChannel_Spec_Type)
	*p = x
	return p
}

func (x NotificationChannel_Spec_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (NotificationChannel_Spec_Type) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_notification_channel_proto_enumTypes[0].Descriptor()
}

func (NotificationChannel_Spec_Type) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_notification_channel_proto_enumTypes[0]
}

func (x NotificationChannel_Spec_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use NotificationChannel_Spec_Type.ProtoReflect.Descriptor instead.
func (NotificationChannel_Spec_Type) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_notification_channel_proto_rawDescGZIP(), []int{0, 0, 0}
}

// State of NotificationChannel
type NotificationChannel_State_Status int32

const (
	// State is unknown
	NotificationChannel_State_STATE_UNSPECIFIED NotificationChannel_State_Status = 0
	// NotificationChannel is active
	NotificationChannel_State_ACTIVE NotificationChannel_State_Status = 1
	// NotificationChannel is disabled
	NotificationChannel_State_DISABLED NotificationChannel_State_Status = 2
	// Error of NotificationChannel
	NotificationChannel_State_ERROR NotificationChannel_State_Status = 3
)

var (
	NotificationChannel_State_Status_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "DISABLED",
		3: "ERROR",
	}

	NotificationChannel_State_Status_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTIVE":            1,
		"DISABLED":          2,
		"ERROR":             3,
	}
)

func (x NotificationChannel_State_Status) Enum() *NotificationChannel_State_Status {
	p := new(NotificationChannel_State_Status)
	*p = x
	return p
}

func (x NotificationChannel_State_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (NotificationChannel_State_Status) Descriptor() preflect.EnumDescriptor {
	return edgelq_monitoring_proto_v4_notification_channel_proto_enumTypes[1].Descriptor()
}

func (NotificationChannel_State_Status) Type() preflect.EnumType {
	return &edgelq_monitoring_proto_v4_notification_channel_proto_enumTypes[1]
}

func (x NotificationChannel_State_Status) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use NotificationChannel_State_Status.ProtoReflect.Descriptor instead.
func (NotificationChannel_State_Status) EnumDescriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_notification_channel_proto_rawDescGZIP(), []int{0, 1, 0}
}

// NotificationChannel Resource
type NotificationChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of NotificationChannel
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Display Name
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Specification
	Spec *NotificationChannel_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// State
	State *NotificationChannel_State `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// description
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *NotificationChannel) Reset() {
	*m = NotificationChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannel) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannel) ProtoMessage() {}

func (m *NotificationChannel) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannel) GotenMessage() {}

// Deprecated, Use NotificationChannel.ProtoReflect.Descriptor instead.
func (*NotificationChannel) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_notification_channel_proto_rawDescGZIP(), []int{0}
}

func (m *NotificationChannel) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannel) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannel) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannel) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannel) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *NotificationChannel) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *NotificationChannel) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *NotificationChannel) GetSpec() *NotificationChannel_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *NotificationChannel) GetState() *NotificationChannel_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *NotificationChannel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NotificationChannel) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "NotificationChannel"))
	}
	m.Name = fv
}

func (m *NotificationChannel) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "NotificationChannel"))
	}
	m.Metadata = fv
}

func (m *NotificationChannel) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "NotificationChannel"))
	}
	m.DisplayName = fv
}

func (m *NotificationChannel) SetSpec(fv *NotificationChannel_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "NotificationChannel"))
	}
	m.Spec = fv
}

func (m *NotificationChannel) SetState(fv *NotificationChannel_State) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "NotificationChannel"))
	}
	m.State = fv
}

func (m *NotificationChannel) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "NotificationChannel"))
	}
	m.Description = fv
}

// Spec of NotificationChannel
type NotificationChannel_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Enabled flag. Whether the NotificationChannel is enabled or not. Disabled
	// channels will not be used for alerting.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Type. Corresponding spec should a oneof field.
	Type NotificationChannel_Spec_Type `protobuf:"varint,2,opt,name=type,proto3,enum=ntt.monitoring.v4.NotificationChannel_Spec_Type" json:"type,omitempty"`
	// Email
	Email *NotificationChannel_Spec_Email `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// Slack
	Slack   *NotificationChannel_Spec_Slack   `protobuf:"bytes,4,opt,name=slack,proto3" json:"slack,omitempty"`
	Webhook *NotificationChannel_Spec_Webhook `protobuf:"bytes,5,opt,name=webhook,proto3" json:"webhook,omitempty"`
	// Default language for invitation is english (eng)
	// Configuring unsupported language will fallback to english
	// Currently only sendgrid uses this.
	NotificationLanguageCode string `protobuf:"bytes,6,opt,name=notification_language_code,json=notificationLanguageCode,proto3" json:"notification_language_code,omitempty"`
}

func (m *NotificationChannel_Spec) Reset() {
	*m = NotificationChannel_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannel_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannel_Spec) ProtoMessage() {}

func (m *NotificationChannel_Spec) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannel_Spec) GotenMessage() {}

// Deprecated, Use NotificationChannel_Spec.ProtoReflect.Descriptor instead.
func (*NotificationChannel_Spec) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_notification_channel_proto_rawDescGZIP(), []int{0, 0}
}

func (m *NotificationChannel_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannel_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannel_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannel_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannel_Spec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *NotificationChannel_Spec) GetType() NotificationChannel_Spec_Type {
	if m != nil {
		return m.Type
	}
	return NotificationChannel_Spec_TYPE_UNSPECIFIED
}

func (m *NotificationChannel_Spec) GetEmail() *NotificationChannel_Spec_Email {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *NotificationChannel_Spec) GetSlack() *NotificationChannel_Spec_Slack {
	if m != nil {
		return m.Slack
	}
	return nil
}

func (m *NotificationChannel_Spec) GetWebhook() *NotificationChannel_Spec_Webhook {
	if m != nil {
		return m.Webhook
	}
	return nil
}

func (m *NotificationChannel_Spec) GetNotificationLanguageCode() string {
	if m != nil {
		return m.NotificationLanguageCode
	}
	return ""
}

func (m *NotificationChannel_Spec) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "NotificationChannel_Spec"))
	}
	m.Enabled = fv
}

func (m *NotificationChannel_Spec) SetType(fv NotificationChannel_Spec_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "NotificationChannel_Spec"))
	}
	m.Type = fv
}

func (m *NotificationChannel_Spec) SetEmail(fv *NotificationChannel_Spec_Email) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Email", "NotificationChannel_Spec"))
	}
	m.Email = fv
}

func (m *NotificationChannel_Spec) SetSlack(fv *NotificationChannel_Spec_Slack) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Slack", "NotificationChannel_Spec"))
	}
	m.Slack = fv
}

func (m *NotificationChannel_Spec) SetWebhook(fv *NotificationChannel_Spec_Webhook) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Webhook", "NotificationChannel_Spec"))
	}
	m.Webhook = fv
}

func (m *NotificationChannel_Spec) SetNotificationLanguageCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NotificationLanguageCode", "NotificationChannel_Spec"))
	}
	m.NotificationLanguageCode = fv
}

// State of NotificationChannel
type NotificationChannel_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Status
	Status NotificationChannel_State_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ntt.monitoring.v4.NotificationChannel_State_Status" json:"status,omitempty"`
	// Error
	Error *NotificationChannel_State_Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *NotificationChannel_State) Reset() {
	*m = NotificationChannel_State{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannel_State) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannel_State) ProtoMessage() {}

func (m *NotificationChannel_State) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannel_State) GotenMessage() {}

// Deprecated, Use NotificationChannel_State.ProtoReflect.Descriptor instead.
func (*NotificationChannel_State) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_notification_channel_proto_rawDescGZIP(), []int{0, 1}
}

func (m *NotificationChannel_State) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannel_State) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannel_State) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannel_State) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannel_State) GetStatus() NotificationChannel_State_Status {
	if m != nil {
		return m.Status
	}
	return NotificationChannel_State_STATE_UNSPECIFIED
}

func (m *NotificationChannel_State) GetError() *NotificationChannel_State_Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *NotificationChannel_State) SetStatus(fv NotificationChannel_State_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "NotificationChannel_State"))
	}
	m.Status = fv
}

func (m *NotificationChannel_State) SetError(fv *NotificationChannel_State_Error) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Error", "NotificationChannel_State"))
	}
	m.Error = fv
}

// Email Spec
type NotificationChannel_Spec_Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Email Addresses
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *NotificationChannel_Spec_Email) Reset() {
	*m = NotificationChannel_Spec_Email{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannel_Spec_Email) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannel_Spec_Email) ProtoMessage() {}

func (m *NotificationChannel_Spec_Email) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannel_Spec_Email) GotenMessage() {}

// Deprecated, Use NotificationChannel_Spec_Email.ProtoReflect.Descriptor instead.
func (*NotificationChannel_Spec_Email) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_notification_channel_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *NotificationChannel_Spec_Email) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannel_Spec_Email) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannel_Spec_Email) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannel_Spec_Email) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannel_Spec_Email) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *NotificationChannel_Spec_Email) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "NotificationChannel_Spec_Email"))
	}
	m.Addresses = fv
}

// Slack Spec
type NotificationChannel_Spec_Slack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Slack Incoming Webhook URL
	IncomingWebhook string `protobuf:"bytes,1,opt,name=incoming_webhook,json=incomingWebhook,proto3" json:"incoming_webhook,omitempty"`
}

func (m *NotificationChannel_Spec_Slack) Reset() {
	*m = NotificationChannel_Spec_Slack{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannel_Spec_Slack) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannel_Spec_Slack) ProtoMessage() {}

func (m *NotificationChannel_Spec_Slack) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannel_Spec_Slack) GotenMessage() {}

// Deprecated, Use NotificationChannel_Spec_Slack.ProtoReflect.Descriptor instead.
func (*NotificationChannel_Spec_Slack) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_notification_channel_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *NotificationChannel_Spec_Slack) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannel_Spec_Slack) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannel_Spec_Slack) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannel_Spec_Slack) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannel_Spec_Slack) GetIncomingWebhook() string {
	if m != nil {
		return m.IncomingWebhook
	}
	return ""
}

func (m *NotificationChannel_Spec_Slack) SetIncomingWebhook(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IncomingWebhook", "NotificationChannel_Spec_Slack"))
	}
	m.IncomingWebhook = fv
}

// PagerDuty Spec
type NotificationChannel_Spec_PagerDuty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// PagerDuty Service Key
	ServiceKey string `protobuf:"bytes,1,opt,name=service_key,json=serviceKey,proto3" json:"service_key,omitempty"`
}

func (m *NotificationChannel_Spec_PagerDuty) Reset() {
	*m = NotificationChannel_Spec_PagerDuty{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannel_Spec_PagerDuty) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannel_Spec_PagerDuty) ProtoMessage() {}

func (m *NotificationChannel_Spec_PagerDuty) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannel_Spec_PagerDuty) GotenMessage() {}

// Deprecated, Use NotificationChannel_Spec_PagerDuty.ProtoReflect.Descriptor instead.
func (*NotificationChannel_Spec_PagerDuty) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_notification_channel_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (m *NotificationChannel_Spec_PagerDuty) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannel_Spec_PagerDuty) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannel_Spec_PagerDuty) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannel_Spec_PagerDuty) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannel_Spec_PagerDuty) GetServiceKey() string {
	if m != nil {
		return m.ServiceKey
	}
	return ""
}

func (m *NotificationChannel_Spec_PagerDuty) SetServiceKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceKey", "NotificationChannel_Spec_PagerDuty"))
	}
	m.ServiceKey = fv
}

// Webhook Spec
type NotificationChannel_Spec_Webhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Webhook URL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Headers
	Headers []*NotificationChannel_Spec_Webhook_Header `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	// Notification mask contains list of fields to include in the message.
	// Notification consists of following fields:
	// * "project" -> See monitoring.edgelq.com/Project protobuf spec for
	// subfields
	// * "organization" -> See iam.edgelq.com/Project protobuf spec for
	// subfields
	// * "alertingPolicy" -> See monitoring.edgelq.com/AlertingPolicy protobuf
	// spec for subfields
	// * "notification" -> See monitoring.edgelq.com/Notification protobuf
	// spec for subfields
	// * "events" -> Array of events, each item has subfields:
	//   * "alertingCondition" -> See monitoring.edgelq.com/AlertingCondition
	//   protobuf spec for subfields
	//   * "metricDescriptor" -> See monitoring.edgelq.com/MetricDescriptor
	//   protobuf spec for subfields
	//   * "monitoredResourceDescriptor" -> See
	//   monitoring.edgelq.com/MonitoredResourceDescriptor
	//     protobuf spec for subfields
	//   * "alerts" -> Array of monitoring.edgelq.com/Alert instances, see
	//   protobuf spec for subfields.
	//
	// If notification_mask is not specified, following default is applied:
	// * "project.name"
	// * "project.title"
	// * "organization.name"
	// * "organization.title"
	// * "events.alertingCondition.name"
	// * "events.alertingCondition.displayName"
	// * "events.alertingCondition.spec"
	// * "events.metricDescriptor.name"
	// * "events.metricDescriptor.displayName"
	// * "events.metricDescriptor.type"
	// * "events.metricDescriptor.labels"
	// * "events.metricDescriptor.metricKind"
	// * "events.metricDescriptor.valueType"
	// * "events.metricDescriptor.unit"
	// * "events.alerts.name"
	// * "events.alerts.displayName"
	// * "events.alerts.info.timeSerie.key"
	// * "events.alerts.info.timeSerie.metric"
	// * "events.alerts.info.timeSerie.monitoredResource"
	// * "events.alerts.info.observedValues"
	// * "events.alerts.state"
	NotificationMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=notification_mask,json=notificationMask,proto3" json:"notification_mask,omitempty"`
	// default is 0 means all the alerts in a notification are sent in single
	// request. Breaking into multiple messages may be significantly slower
	// than sending a single message.
	// For example, to use 250KB chunks, set 0.25 MB
	MaxMessageSizeMb float64 `protobuf:"fixed64,5,opt,name=max_message_size_mb,json=maxMessageSizeMb,proto3" json:"max_message_size_mb,omitempty"`
}

func (m *NotificationChannel_Spec_Webhook) Reset() {
	*m = NotificationChannel_Spec_Webhook{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannel_Spec_Webhook) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannel_Spec_Webhook) ProtoMessage() {}

func (m *NotificationChannel_Spec_Webhook) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannel_Spec_Webhook) GotenMessage() {}

// Deprecated, Use NotificationChannel_Spec_Webhook.ProtoReflect.Descriptor instead.
func (*NotificationChannel_Spec_Webhook) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_notification_channel_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (m *NotificationChannel_Spec_Webhook) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannel_Spec_Webhook) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannel_Spec_Webhook) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannel_Spec_Webhook) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannel_Spec_Webhook) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NotificationChannel_Spec_Webhook) GetHeaders() []*NotificationChannel_Spec_Webhook_Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *NotificationChannel_Spec_Webhook) GetNotificationMask() *fieldmaskpb.FieldMask {
	if m != nil {
		return m.NotificationMask
	}
	return nil
}

func (m *NotificationChannel_Spec_Webhook) GetMaxMessageSizeMb() float64 {
	if m != nil {
		return m.MaxMessageSizeMb
	}
	return float64(0)
}

func (m *NotificationChannel_Spec_Webhook) SetUrl(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Url", "NotificationChannel_Spec_Webhook"))
	}
	m.Url = fv
}

func (m *NotificationChannel_Spec_Webhook) SetHeaders(fv []*NotificationChannel_Spec_Webhook_Header) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Headers", "NotificationChannel_Spec_Webhook"))
	}
	m.Headers = fv
}

func (m *NotificationChannel_Spec_Webhook) SetNotificationMask(fv *fieldmaskpb.FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NotificationMask", "NotificationChannel_Spec_Webhook"))
	}
	m.NotificationMask = fv
}

func (m *NotificationChannel_Spec_Webhook) SetMaxMessageSizeMb(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxMessageSizeMb", "NotificationChannel_Spec_Webhook"))
	}
	m.MaxMessageSizeMb = fv
}

// Header
type NotificationChannel_Spec_Webhook_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *NotificationChannel_Spec_Webhook_Header) Reset() {
	*m = NotificationChannel_Spec_Webhook_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannel_Spec_Webhook_Header) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannel_Spec_Webhook_Header) ProtoMessage() {}

func (m *NotificationChannel_Spec_Webhook_Header) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannel_Spec_Webhook_Header) GotenMessage() {}

// Deprecated, Use NotificationChannel_Spec_Webhook_Header.ProtoReflect.Descriptor instead.
func (*NotificationChannel_Spec_Webhook_Header) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_notification_channel_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

func (m *NotificationChannel_Spec_Webhook_Header) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannel_Spec_Webhook_Header) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannel_Spec_Webhook_Header) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannel_Spec_Webhook_Header) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannel_Spec_Webhook_Header) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NotificationChannel_Spec_Webhook_Header) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *NotificationChannel_Spec_Webhook_Header) SetKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "NotificationChannel_Spec_Webhook_Header"))
	}
	m.Key = fv
}

func (m *NotificationChannel_Spec_Webhook_Header) SetValue(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Value", "NotificationChannel_Spec_Webhook_Header"))
	}
	m.Value = fv
}

// Error of NotificationChannel
type NotificationChannel_State_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Time          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *NotificationChannel_State_Error) Reset() {
	*m = NotificationChannel_State_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *NotificationChannel_State_Error) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*NotificationChannel_State_Error) ProtoMessage() {}

func (m *NotificationChannel_State_Error) ProtoReflect() preflect.Message {
	mi := &edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*NotificationChannel_State_Error) GotenMessage() {}

// Deprecated, Use NotificationChannel_State_Error.ProtoReflect.Descriptor instead.
func (*NotificationChannel_State_Error) Descriptor() ([]byte, []int) {
	return edgelq_monitoring_proto_v4_notification_channel_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *NotificationChannel_State_Error) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *NotificationChannel_State_Error) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *NotificationChannel_State_Error) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *NotificationChannel_State_Error) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *NotificationChannel_State_Error) GetTime() *timestamppb.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *NotificationChannel_State_Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *NotificationChannel_State_Error) SetTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Time", "NotificationChannel_State_Error"))
	}
	m.Time = fv
}

func (m *NotificationChannel_State_Error) SetMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Message", "NotificationChannel_State_Error"))
	}
	m.Message = fv
}

var edgelq_monitoring_proto_v4_notification_channel_proto preflect.FileDescriptor

var edgelq_monitoring_proto_v4_notification_channel_proto_rawDesc = []byte{
	0x0a, 0x35, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x34, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xff, 0x0f, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xb2, 0xda, 0x21, 0x17, 0x0a, 0x15, 0x0a, 0x13, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05, 0x22, 0x03, 0x08, 0x80,
	0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xed,
	0x06, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x47, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x6c, 0x61,
	0x63, 0x6b, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x4d, 0x0a, 0x07, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52,
	0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x25, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x32, 0x0a,
	0x05, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x1a, 0x2c, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x72, 0x44, 0x75, 0x74, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x1a,
	0x9b, 0x02, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x54, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x0a, 0x13,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x6d, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x62, 0x1a, 0x30, 0x0a, 0x06, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x41, 0x43, 0x4b, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x03, 0x1a, 0xb7,
	0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a,
	0x51, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x44, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x3a, 0x86, 0x04, 0xea, 0x41, 0x6b, 0x0a, 0x29,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x7d, 0x92, 0xd9, 0x21, 0x93, 0x01, 0x0a, 0x14,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x1a, 0x07, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x38, 0x05, 0x42, 0x5a, 0x08, 0x02, 0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x20, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x11,
	0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04, 0x54, 0x79, 0x70,
	0x65, 0xaa, 0xd9, 0x21, 0x5d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x61, 0x67, 0x73, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x1a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0xb2, 0xdf, 0x21, 0x53, 0x0a, 0x51, 0x0a, 0x4f, 0x0a, 0x0d, 0x62, 0x79, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x2f, 0x2d, 0x2a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x38, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x2a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0xe6, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x61, 0x0a, 0x1a, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x34, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0xa2, 0x80,
	0xd1, 0x02, 0x63, 0x0a, 0x1b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x34, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x34,
	0x42, 0x18, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x34,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	edgelq_monitoring_proto_v4_notification_channel_proto_rawDescOnce sync.Once
	edgelq_monitoring_proto_v4_notification_channel_proto_rawDescData = edgelq_monitoring_proto_v4_notification_channel_proto_rawDesc
)

func edgelq_monitoring_proto_v4_notification_channel_proto_rawDescGZIP() []byte {
	edgelq_monitoring_proto_v4_notification_channel_proto_rawDescOnce.Do(func() {
		edgelq_monitoring_proto_v4_notification_channel_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_monitoring_proto_v4_notification_channel_proto_rawDescData)
	})
	return edgelq_monitoring_proto_v4_notification_channel_proto_rawDescData
}

var edgelq_monitoring_proto_v4_notification_channel_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var edgelq_monitoring_proto_v4_notification_channel_proto_goTypes = []interface{}{
	(NotificationChannel_Spec_Type)(0),              // 0: ntt.monitoring.v4.NotificationChannel_Spec_Type
	(NotificationChannel_State_Status)(0),           // 1: ntt.monitoring.v4.NotificationChannel_State_Status
	(*NotificationChannel)(nil),                     // 2: ntt.monitoring.v4.NotificationChannel
	(*NotificationChannel_Spec)(nil),                // 3: ntt.monitoring.v4.NotificationChannel.Spec
	(*NotificationChannel_State)(nil),               // 4: ntt.monitoring.v4.NotificationChannel.State
	(*NotificationChannel_Spec_Email)(nil),          // 5: ntt.monitoring.v4.NotificationChannel.Spec.Email
	(*NotificationChannel_Spec_Slack)(nil),          // 6: ntt.monitoring.v4.NotificationChannel.Spec.Slack
	(*NotificationChannel_Spec_PagerDuty)(nil),      // 7: ntt.monitoring.v4.NotificationChannel.Spec.PagerDuty
	(*NotificationChannel_Spec_Webhook)(nil),        // 8: ntt.monitoring.v4.NotificationChannel.Spec.Webhook
	(*NotificationChannel_Spec_Webhook_Header)(nil), // 9: ntt.monitoring.v4.NotificationChannel.Spec.Webhook.Header
	(*NotificationChannel_State_Error)(nil),         // 10: ntt.monitoring.v4.NotificationChannel.State.Error
	(*meta.Meta)(nil),                               // 11: goten.types.Meta
	(*fieldmaskpb.FieldMask)(nil),                   // 12: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),                   // 13: google.protobuf.Timestamp
}
var edgelq_monitoring_proto_v4_notification_channel_proto_depIdxs = []int32{
	11, // 0: ntt.monitoring.v4.NotificationChannel.metadata:type_name -> goten.types.Meta
	3,  // 1: ntt.monitoring.v4.NotificationChannel.spec:type_name -> ntt.monitoring.v4.NotificationChannel.Spec
	4,  // 2: ntt.monitoring.v4.NotificationChannel.state:type_name -> ntt.monitoring.v4.NotificationChannel.State
	0,  // 3: ntt.monitoring.v4.NotificationChannel.Spec.type:type_name -> ntt.monitoring.v4.NotificationChannel_Spec_Type
	5,  // 4: ntt.monitoring.v4.NotificationChannel.Spec.email:type_name -> ntt.monitoring.v4.NotificationChannel.Spec.Email
	6,  // 5: ntt.monitoring.v4.NotificationChannel.Spec.slack:type_name -> ntt.monitoring.v4.NotificationChannel.Spec.Slack
	8,  // 6: ntt.monitoring.v4.NotificationChannel.Spec.webhook:type_name -> ntt.monitoring.v4.NotificationChannel.Spec.Webhook
	1,  // 7: ntt.monitoring.v4.NotificationChannel.State.status:type_name -> ntt.monitoring.v4.NotificationChannel_State_Status
	10, // 8: ntt.monitoring.v4.NotificationChannel.State.error:type_name -> ntt.monitoring.v4.NotificationChannel.State.Error
	9,  // 9: ntt.monitoring.v4.NotificationChannel.Spec.Webhook.headers:type_name -> ntt.monitoring.v4.NotificationChannel.Spec.Webhook.Header
	12, // 10: ntt.monitoring.v4.NotificationChannel.Spec.Webhook.notification_mask:type_name -> google.protobuf.FieldMask
	13, // 11: ntt.monitoring.v4.NotificationChannel.State.Error.time:type_name -> google.protobuf.Timestamp
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { edgelq_monitoring_proto_v4_notification_channel_proto_init() }
func edgelq_monitoring_proto_v4_notification_channel_proto_init() {
	if edgelq_monitoring_proto_v4_notification_channel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel_Spec_Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel_Spec_Slack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel_Spec_PagerDuty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel_Spec_Webhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel_Spec_Webhook_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationChannel_State_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_monitoring_proto_v4_notification_channel_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_monitoring_proto_v4_notification_channel_proto_goTypes,
		DependencyIndexes: edgelq_monitoring_proto_v4_notification_channel_proto_depIdxs,
		EnumInfos:         edgelq_monitoring_proto_v4_notification_channel_proto_enumTypes,
		MessageInfos:      edgelq_monitoring_proto_v4_notification_channel_proto_msgTypes,
	}.Build()
	edgelq_monitoring_proto_v4_notification_channel_proto = out.File
	edgelq_monitoring_proto_v4_notification_channel_proto_rawDesc = nil
	edgelq_monitoring_proto_v4_notification_channel_proto_goTypes = nil
	edgelq_monitoring_proto_v4_notification_channel_proto_depIdxs = nil
}
