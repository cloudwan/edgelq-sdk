// Code generated by protoc-gen-goten-go
// File: edgelq/limits/proto/v1/plan_assignment_request.proto
// DO NOT EDIT!!!

package plan_assignment_request

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	accepted_plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1/accepted_plan"
	common "github.com/cloudwan/edgelq-sdk/limits/resources/v1/common"
	plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1/plan"
	plan_assignment "github.com/cloudwan/edgelq-sdk/limits/resources/v1/plan_assignment"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &accepted_plan.AcceptedPlan{}
	_ = &common.RegionalPlanAssignment{}
	_ = &plan.Plan{}
	_ = &plan_assignment.PlanAssignment{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlanAssignmentRequest_Status_Conclusion int32

const (
	PlanAssignmentRequest_Status_UNDEFINED PlanAssignmentRequest_Status_Conclusion = 0
	PlanAssignmentRequest_Status_PENDING   PlanAssignmentRequest_Status_Conclusion = 1
	PlanAssignmentRequest_Status_APPROVED  PlanAssignmentRequest_Status_Conclusion = 2
	PlanAssignmentRequest_Status_REJECTED  PlanAssignmentRequest_Status_Conclusion = 3
)

var (
	PlanAssignmentRequest_Status_Conclusion_name = map[int32]string{
		0: "UNDEFINED",
		1: "PENDING",
		2: "APPROVED",
		3: "REJECTED",
	}

	PlanAssignmentRequest_Status_Conclusion_value = map[string]int32{
		"UNDEFINED": 0,
		"PENDING":   1,
		"APPROVED":  2,
		"REJECTED":  3,
	}
)

func (x PlanAssignmentRequest_Status_Conclusion) Enum() *PlanAssignmentRequest_Status_Conclusion {
	p := new(PlanAssignmentRequest_Status_Conclusion)
	*p = x
	return p
}

func (x PlanAssignmentRequest_Status_Conclusion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (PlanAssignmentRequest_Status_Conclusion) Descriptor() preflect.EnumDescriptor {
	return edgelq_limits_proto_v1_plan_assignment_request_proto_enumTypes[0].Descriptor()
}

func (PlanAssignmentRequest_Status_Conclusion) Type() preflect.EnumType {
	return &edgelq_limits_proto_v1_plan_assignment_request_proto_enumTypes[0]
}

func (x PlanAssignmentRequest_Status_Conclusion) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use PlanAssignmentRequest_Status_Conclusion.ProtoReflect.Descriptor instead.
func (PlanAssignmentRequest_Status_Conclusion) EnumDescriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescGZIP(), []int{0, 0, 0}
}

// PlanAssignmentRequest gives administrator a way to modify their
// PlanAssignment instances in a safe way, with respect to parent
// organization/system limits.
// PlanAssignmentRequest can be used to:
// * Assign/Reassign new plan for specific service
// * Extend specific resource limits for existing PlanAssignment
// * Redistribute limits across regions (available for project PlanAssignments)
// * Unassign existing PlanAssignment
// Certain requests may be automatically approved by system (for example, if
// they would result in lowering limits), other require higher administrator
// consent. User creating request should check status field after operation
// to check if request was automatically approved.
type PlanAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of PlanAssignmentRequest
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// Purpose of this request
	Request *PlanAssignmentRequest_RequestType `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty" firestore:"request"`
	// Service associated with this request.
	Service *meta_service.Reference `protobuf:"bytes,3,opt,customtype=Reference,name=service,proto3" json:"service,omitempty" firestore:"service"`
	// Approver - it can be org or service in practice, note its always equal
	// to the parent name of AcceptedPlan
	Approver *accepted_plan.ParentName     `protobuf:"bytes,4,opt,customtype=ParentName,name=approver,proto3" json:"approver,omitempty" firestore:"approver"`
	Status   *PlanAssignmentRequest_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
}

func (m *PlanAssignmentRequest) Reset() {
	*m = PlanAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PlanAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PlanAssignmentRequest) ProtoMessage() {}

func (m *PlanAssignmentRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PlanAssignmentRequest) GotenMessage() {}

// Deprecated, Use PlanAssignmentRequest.ProtoReflect.Descriptor instead.
func (*PlanAssignmentRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescGZIP(), []int{0}
}

func (m *PlanAssignmentRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PlanAssignmentRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PlanAssignmentRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PlanAssignmentRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PlanAssignmentRequest) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *PlanAssignmentRequest) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PlanAssignmentRequest) GetRequest() *PlanAssignmentRequest_RequestType {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *PlanAssignmentRequest) GetService() *meta_service.Reference {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *PlanAssignmentRequest) GetApprover() *accepted_plan.ParentName {
	if m != nil {
		return m.Approver
	}
	return nil
}

func (m *PlanAssignmentRequest) GetStatus() *PlanAssignmentRequest_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PlanAssignmentRequest) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "PlanAssignmentRequest"))
	}
	m.Name = fv
}

func (m *PlanAssignmentRequest) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "PlanAssignmentRequest"))
	}
	m.Metadata = fv
}

func (m *PlanAssignmentRequest) SetRequest(fv *PlanAssignmentRequest_RequestType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Request", "PlanAssignmentRequest"))
	}
	m.Request = fv
}

func (m *PlanAssignmentRequest) SetService(fv *meta_service.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "PlanAssignmentRequest"))
	}
	m.Service = fv
}

func (m *PlanAssignmentRequest) SetApprover(fv *accepted_plan.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Approver", "PlanAssignmentRequest"))
	}
	m.Approver = fv
}

func (m *PlanAssignmentRequest) SetStatus(fv *PlanAssignmentRequest_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "PlanAssignmentRequest"))
	}
	m.Status = fv
}

// Status
type PlanAssignmentRequest_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conclusion
	Conclusion PlanAssignmentRequest_Status_Conclusion `protobuf:"varint,1,opt,name=conclusion,proto3,enum=ntt.limits.v1.PlanAssignmentRequest_Status_Conclusion" json:"conclusion,omitempty" firestore:"conclusion"`
	// Optional message with reason
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty" firestore:"reason"`
}

func (m *PlanAssignmentRequest_Status) Reset() {
	*m = PlanAssignmentRequest_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PlanAssignmentRequest_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PlanAssignmentRequest_Status) ProtoMessage() {}

func (m *PlanAssignmentRequest_Status) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PlanAssignmentRequest_Status) GotenMessage() {}

// Deprecated, Use PlanAssignmentRequest_Status.ProtoReflect.Descriptor instead.
func (*PlanAssignmentRequest_Status) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescGZIP(), []int{0, 0}
}

func (m *PlanAssignmentRequest_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PlanAssignmentRequest_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PlanAssignmentRequest_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PlanAssignmentRequest_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PlanAssignmentRequest_Status) GetConclusion() PlanAssignmentRequest_Status_Conclusion {
	if m != nil {
		return m.Conclusion
	}
	return PlanAssignmentRequest_Status_UNDEFINED
}

func (m *PlanAssignmentRequest_Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PlanAssignmentRequest_Status) SetConclusion(fv PlanAssignmentRequest_Status_Conclusion) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Conclusion", "PlanAssignmentRequest_Status"))
	}
	m.Conclusion = fv
}

func (m *PlanAssignmentRequest_Status) SetReason(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reason", "PlanAssignmentRequest_Status"))
	}
	m.Reason = fv
}

// RequestType describes what should change in existing PlanAssignment,
// optionally if new one should be created.
type PlanAssignmentRequest_RequestType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Request:
	//	*PlanAssignmentRequest_RequestType_Assign_
	//	*PlanAssignmentRequest_RequestType_Extend_
	//	*PlanAssignmentRequest_RequestType_Unassign_
	Request isPlanAssignmentRequest_RequestType_Request `protobuf_oneof:"request"`
}

func (m *PlanAssignmentRequest_RequestType) Reset() {
	*m = PlanAssignmentRequest_RequestType{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PlanAssignmentRequest_RequestType) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PlanAssignmentRequest_RequestType) ProtoMessage() {}

func (m *PlanAssignmentRequest_RequestType) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PlanAssignmentRequest_RequestType) GotenMessage() {}

// Deprecated, Use PlanAssignmentRequest_RequestType.ProtoReflect.Descriptor instead.
func (*PlanAssignmentRequest_RequestType) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescGZIP(), []int{0, 1}
}

func (m *PlanAssignmentRequest_RequestType) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PlanAssignmentRequest_RequestType) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PlanAssignmentRequest_RequestType) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PlanAssignmentRequest_RequestType) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isPlanAssignmentRequest_RequestType_Request interface {
	isPlanAssignmentRequest_RequestType_Request()
}

type PlanAssignmentRequest_RequestType_Assign_ struct {
	// Assign request
	Assign *PlanAssignmentRequest_RequestType_Assign `protobuf:"bytes,1,opt,name=assign,proto3,oneof" firestore:"assign"`
}
type PlanAssignmentRequest_RequestType_Extend_ struct {
	// Extend request
	Extend *PlanAssignmentRequest_RequestType_Extend `protobuf:"bytes,2,opt,name=extend,proto3,oneof" firestore:"extend"`
}
type PlanAssignmentRequest_RequestType_Unassign_ struct {
	// Unassign request
	Unassign *PlanAssignmentRequest_RequestType_Unassign `protobuf:"bytes,4,opt,name=unassign,proto3,oneof" firestore:"unassign"`
}

func (*PlanAssignmentRequest_RequestType_Assign_) isPlanAssignmentRequest_RequestType_Request()   {}
func (*PlanAssignmentRequest_RequestType_Extend_) isPlanAssignmentRequest_RequestType_Request()   {}
func (*PlanAssignmentRequest_RequestType_Unassign_) isPlanAssignmentRequest_RequestType_Request() {}
func (m *PlanAssignmentRequest_RequestType) GetRequest() isPlanAssignmentRequest_RequestType_Request {
	if m != nil {
		return m.Request
	}
	return nil
}
func (m *PlanAssignmentRequest_RequestType) GetAssign() *PlanAssignmentRequest_RequestType_Assign {
	if x, ok := m.GetRequest().(*PlanAssignmentRequest_RequestType_Assign_); ok {
		return x.Assign
	}
	return nil
}
func (m *PlanAssignmentRequest_RequestType) GetExtend() *PlanAssignmentRequest_RequestType_Extend {
	if x, ok := m.GetRequest().(*PlanAssignmentRequest_RequestType_Extend_); ok {
		return x.Extend
	}
	return nil
}
func (m *PlanAssignmentRequest_RequestType) GetUnassign() *PlanAssignmentRequest_RequestType_Unassign {
	if x, ok := m.GetRequest().(*PlanAssignmentRequest_RequestType_Unassign_); ok {
		return x.Unassign
	}
	return nil
}
func (m *PlanAssignmentRequest_RequestType) SetRequest(ofv isPlanAssignmentRequest_RequestType_Request) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isPlanAssignmentRequest_RequestType_Request", "PlanAssignmentRequest_RequestType"))
	}
	m.Request = ofv
}
func (m *PlanAssignmentRequest_RequestType) SetAssign(fv *PlanAssignmentRequest_RequestType_Assign) {
	m.SetRequest(&PlanAssignmentRequest_RequestType_Assign_{Assign: fv})
}
func (m *PlanAssignmentRequest_RequestType) SetExtend(fv *PlanAssignmentRequest_RequestType_Extend) {
	m.SetRequest(&PlanAssignmentRequest_RequestType_Extend_{Extend: fv})
}
func (m *PlanAssignmentRequest_RequestType) SetUnassign(fv *PlanAssignmentRequest_RequestType_Unassign) {
	m.SetRequest(&PlanAssignmentRequest_RequestType_Unassign_{Unassign: fv})
}

// Assign request requests for new PlanAssignment instance. If there
// already is a plan for associated service, then previous record is
// overwritten in the scope of the "region". In other words, this request
// can also be used to upgrade/downgrade existing plan. If "region" is
// specified, all extensions from existing plan for given region will be
// discarded and overwritten from this one. If "region" is not specified,
// then
type PlanAssignmentRequest_RequestType_Assign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Plan to apply
	Plan *plan.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=plan,proto3" json:"plan,omitempty" firestore:"plan"`
	// List of all extensions over basic plan. Extensions without specified
	// region will apply to all regions if value of field "region" in this
	// request is also empty. However, if "region" is specified, then
	// extensions defined here will be applicable for this region only.
	Extensions []*common.Allowance `protobuf:"bytes,2,rep,name=extensions,proto3" json:"extensions,omitempty" firestore:"extensions"`
	// Optional region ID for the plan - if not specified,
	// assigned plan will apply to all regions (default plan for region),
	// BUT it will not override plans for specific region in existing
	// PlanAssignment.
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty" firestore:"region"`
}

func (m *PlanAssignmentRequest_RequestType_Assign) Reset() {
	*m = PlanAssignmentRequest_RequestType_Assign{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PlanAssignmentRequest_RequestType_Assign) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PlanAssignmentRequest_RequestType_Assign) ProtoMessage() {}

func (m *PlanAssignmentRequest_RequestType_Assign) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PlanAssignmentRequest_RequestType_Assign) GotenMessage() {}

// Deprecated, Use PlanAssignmentRequest_RequestType_Assign.ProtoReflect.Descriptor instead.
func (*PlanAssignmentRequest_RequestType_Assign) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *PlanAssignmentRequest_RequestType_Assign) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PlanAssignmentRequest_RequestType_Assign) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PlanAssignmentRequest_RequestType_Assign) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PlanAssignmentRequest_RequestType_Assign) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PlanAssignmentRequest_RequestType_Assign) GetPlan() *plan.Reference {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *PlanAssignmentRequest_RequestType_Assign) GetExtensions() []*common.Allowance {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *PlanAssignmentRequest_RequestType_Assign) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *PlanAssignmentRequest_RequestType_Assign) SetPlan(fv *plan.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Plan", "PlanAssignmentRequest_RequestType_Assign"))
	}
	m.Plan = fv
}

func (m *PlanAssignmentRequest_RequestType_Assign) SetExtensions(fv []*common.Allowance) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Extensions", "PlanAssignmentRequest_RequestType_Assign"))
	}
	m.Extensions = fv
}

func (m *PlanAssignmentRequest_RequestType_Assign) SetRegion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Region", "PlanAssignmentRequest_RequestType_Assign"))
	}
	m.Region = fv
}

// Extend request should be used in order to increase (optionally
// decrease) limits from existing plan assignment. Note each addition
// can be applied to one or all regions.
type PlanAssignmentRequest_RequestType_Extend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to existing plan assignment
	Assignment *plan_assignment.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=assignment,proto3" json:"assignment,omitempty" firestore:"assignment"`
	// List of limits to merge within existing assignment
	Additions []*common.Allowance `protobuf:"bytes,2,rep,name=additions,proto3" json:"additions,omitempty" firestore:"additions"`
}

func (m *PlanAssignmentRequest_RequestType_Extend) Reset() {
	*m = PlanAssignmentRequest_RequestType_Extend{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PlanAssignmentRequest_RequestType_Extend) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PlanAssignmentRequest_RequestType_Extend) ProtoMessage() {}

func (m *PlanAssignmentRequest_RequestType_Extend) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PlanAssignmentRequest_RequestType_Extend) GotenMessage() {}

// Deprecated, Use PlanAssignmentRequest_RequestType_Extend.ProtoReflect.Descriptor instead.
func (*PlanAssignmentRequest_RequestType_Extend) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *PlanAssignmentRequest_RequestType_Extend) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PlanAssignmentRequest_RequestType_Extend) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PlanAssignmentRequest_RequestType_Extend) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PlanAssignmentRequest_RequestType_Extend) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PlanAssignmentRequest_RequestType_Extend) GetAssignment() *plan_assignment.Reference {
	if m != nil {
		return m.Assignment
	}
	return nil
}

func (m *PlanAssignmentRequest_RequestType_Extend) GetAdditions() []*common.Allowance {
	if m != nil {
		return m.Additions
	}
	return nil
}

func (m *PlanAssignmentRequest_RequestType_Extend) SetAssignment(fv *plan_assignment.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Assignment", "PlanAssignmentRequest_RequestType_Extend"))
	}
	m.Assignment = fv
}

func (m *PlanAssignmentRequest_RequestType_Extend) SetAdditions(fv []*common.Allowance) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Additions", "PlanAssignmentRequest_RequestType_Extend"))
	}
	m.Additions = fv
}

// Unassign is used to remove existing PlanAssignment if "region" is empty.
// This will always be automatically approved unless limits are in use by
// existing resources.
// If "region" is specified, then this request will remove region specific
// overrides only. Note that this will not be self approved if this would
// result in increased value of limits.
type PlanAssignmentRequest_RequestType_Unassign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Assignment    *plan_assignment.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=assignment,proto3" json:"assignment,omitempty" firestore:"assignment"`
	Region        string                     `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty" firestore:"region"`
}

func (m *PlanAssignmentRequest_RequestType_Unassign) Reset() {
	*m = PlanAssignmentRequest_RequestType_Unassign{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PlanAssignmentRequest_RequestType_Unassign) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PlanAssignmentRequest_RequestType_Unassign) ProtoMessage() {}

func (m *PlanAssignmentRequest_RequestType_Unassign) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PlanAssignmentRequest_RequestType_Unassign) GotenMessage() {}

// Deprecated, Use PlanAssignmentRequest_RequestType_Unassign.ProtoReflect.Descriptor instead.
func (*PlanAssignmentRequest_RequestType_Unassign) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (m *PlanAssignmentRequest_RequestType_Unassign) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PlanAssignmentRequest_RequestType_Unassign) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PlanAssignmentRequest_RequestType_Unassign) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PlanAssignmentRequest_RequestType_Unassign) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PlanAssignmentRequest_RequestType_Unassign) GetAssignment() *plan_assignment.Reference {
	if m != nil {
		return m.Assignment
	}
	return nil
}

func (m *PlanAssignmentRequest_RequestType_Unassign) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *PlanAssignmentRequest_RequestType_Unassign) SetAssignment(fv *plan_assignment.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Assignment", "PlanAssignmentRequest_RequestType_Unassign"))
	}
	m.Assignment = fv
}

func (m *PlanAssignmentRequest_RequestType_Unassign) SetRegion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Region", "PlanAssignmentRequest_RequestType_Unassign"))
	}
	m.Region = fv
}

var edgelq_limits_proto_v1_plan_assignment_request_proto preflect.FileDescriptor

var edgelq_limits_proto_v1_plan_assignment_request_proto_rawDesc = []byte{
	0x0a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61,
	0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x0e, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xb2, 0xda, 0x21,
	0x19, 0x0a, 0x17, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x4a, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xf0, 0xd9,
	0x21, 0x01, 0xb2, 0xda, 0x21, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x10, 0x06, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xf0,
	0xd9, 0x21, 0x01, 0xb2, 0xda, 0x21, 0x10, 0x3a, 0x0e, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x04,
	0xf0, 0xd9, 0x21, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xbe, 0x01, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x85, 0x05,
	0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a,
	0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x12, 0x51, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x12, 0x57, 0x0a, 0x08, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x48, 0x00, 0x52, 0x08, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x1a, 0x84, 0x01, 0x0a,
	0x06, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xb2, 0xda, 0x21, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x6c, 0x61, 0x6e, 0x10, 0x05, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x1a, 0x80, 0x01, 0x0a, 0x06, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x38,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x6e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x52, 0x0a, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0x5c, 0x0a, 0x08, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xb2, 0xda, 0x21, 0x14, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x3a, 0x87, 0x05, 0xea, 0x41, 0xbd, 0x01, 0x0a, 0x27, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x7d, 0x12, 0x4d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x7d, 0x92, 0xd9, 0x21, 0xcc, 0x01, 0x0a, 0x16,
	0x70, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x16, 0x70, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x16,
	0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x1b, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x38, 0x05, 0x42, 0x2b, 0x08, 0x02, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x09, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x36, 0x08, 0x03, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x09,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xb2, 0xdf, 0x21, 0xac, 0x01, 0x0a,
	0x9d, 0x01, 0x0a, 0x7b, 0x0a, 0x06, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x35, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x2d, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x2d, 0x20, 0x01, 0x2a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12,
	0x13, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x0a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0xda, 0x94, 0x23, 0x08, 0x12,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x34, 0x22, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0xea, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x63, 0x0a, 0x1d, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xa2, 0x80,
	0xd1, 0x02, 0x65, 0x0a, 0x1e, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x1a,
	0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x3b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescOnce sync.Once
	edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescData = edgelq_limits_proto_v1_plan_assignment_request_proto_rawDesc
)

func edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescGZIP() []byte {
	edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescOnce.Do(func() {
		edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescData)
	})
	return edgelq_limits_proto_v1_plan_assignment_request_proto_rawDescData
}

var edgelq_limits_proto_v1_plan_assignment_request_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var edgelq_limits_proto_v1_plan_assignment_request_proto_goTypes = []interface{}{
	(PlanAssignmentRequest_Status_Conclusion)(0),       // 0: ntt.limits.v1.PlanAssignmentRequest_Status_Conclusion
	(*PlanAssignmentRequest)(nil),                      // 1: ntt.limits.v1.PlanAssignmentRequest
	(*PlanAssignmentRequest_Status)(nil),               // 2: ntt.limits.v1.PlanAssignmentRequest.Status
	(*PlanAssignmentRequest_RequestType)(nil),          // 3: ntt.limits.v1.PlanAssignmentRequest.RequestType
	(*PlanAssignmentRequest_RequestType_Assign)(nil),   // 4: ntt.limits.v1.PlanAssignmentRequest.RequestType.Assign
	(*PlanAssignmentRequest_RequestType_Extend)(nil),   // 5: ntt.limits.v1.PlanAssignmentRequest.RequestType.Extend
	(*PlanAssignmentRequest_RequestType_Unassign)(nil), // 6: ntt.limits.v1.PlanAssignmentRequest.RequestType.Unassign
	(*meta.Meta)(nil),                                  // 7: goten.types.Meta
	(*common.Allowance)(nil),                           // 8: ntt.limits.v1.Allowance
}
var edgelq_limits_proto_v1_plan_assignment_request_proto_depIdxs = []int32{
	7, // 0: ntt.limits.v1.PlanAssignmentRequest.metadata:type_name -> goten.types.Meta
	3, // 1: ntt.limits.v1.PlanAssignmentRequest.request:type_name -> ntt.limits.v1.PlanAssignmentRequest.RequestType
	2, // 2: ntt.limits.v1.PlanAssignmentRequest.status:type_name -> ntt.limits.v1.PlanAssignmentRequest.Status
	0, // 3: ntt.limits.v1.PlanAssignmentRequest.Status.conclusion:type_name -> ntt.limits.v1.PlanAssignmentRequest_Status_Conclusion
	4, // 4: ntt.limits.v1.PlanAssignmentRequest.RequestType.assign:type_name -> ntt.limits.v1.PlanAssignmentRequest.RequestType.Assign
	5, // 5: ntt.limits.v1.PlanAssignmentRequest.RequestType.extend:type_name -> ntt.limits.v1.PlanAssignmentRequest.RequestType.Extend
	6, // 6: ntt.limits.v1.PlanAssignmentRequest.RequestType.unassign:type_name -> ntt.limits.v1.PlanAssignmentRequest.RequestType.Unassign
	8, // 7: ntt.limits.v1.PlanAssignmentRequest.RequestType.Assign.extensions:type_name -> ntt.limits.v1.Allowance
	8, // 8: ntt.limits.v1.PlanAssignmentRequest.RequestType.Extend.additions:type_name -> ntt.limits.v1.Allowance
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { edgelq_limits_proto_v1_plan_assignment_request_proto_init() }
func edgelq_limits_proto_v1_plan_assignment_request_proto_init() {
	if edgelq_limits_proto_v1_plan_assignment_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanAssignmentRequest_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanAssignmentRequest_RequestType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanAssignmentRequest_RequestType_Assign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanAssignmentRequest_RequestType_Extend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanAssignmentRequest_RequestType_Unassign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PlanAssignmentRequest_RequestType_Assign_)(nil),
		(*PlanAssignmentRequest_RequestType_Extend_)(nil),
		(*PlanAssignmentRequest_RequestType_Unassign_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_limits_proto_v1_plan_assignment_request_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_limits_proto_v1_plan_assignment_request_proto_goTypes,
		DependencyIndexes: edgelq_limits_proto_v1_plan_assignment_request_proto_depIdxs,
		EnumInfos:         edgelq_limits_proto_v1_plan_assignment_request_proto_enumTypes,
		MessageInfos:      edgelq_limits_proto_v1_plan_assignment_request_proto_msgTypes,
	}.Build()
	edgelq_limits_proto_v1_plan_assignment_request_proto = out.File
	edgelq_limits_proto_v1_plan_assignment_request_proto_rawDesc = nil
	edgelq_limits_proto_v1_plan_assignment_request_proto_goTypes = nil
	edgelq_limits_proto_v1_plan_assignment_request_proto_depIdxs = nil
}
