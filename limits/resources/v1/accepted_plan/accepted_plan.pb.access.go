// Code generated by protoc-gen-goten-resource
// Resource: AcceptedPlan
// DO NOT EDIT!!!

package accepted_plan

import (
	"context"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	"github.com/cloudwan/goten-sdk/types/watch_type"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	common "github.com/cloudwan/edgelq-sdk/limits/resources/v1/common"
	plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1/plan"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(context.Context)

	_ = codes.Internal
	_ = status.Status{}

	_ = watch_type.WatchType_STATEFUL
	_ = new(gotenobject.FieldPath)
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &common.RegionalPlanAssignment{}
	_ = &plan.Plan{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

type AcceptedPlanAccess interface {
	GetAcceptedPlan(context.Context, *GetQuery, ...gotenresource.GetOption) (*AcceptedPlan, error)
	BatchGetAcceptedPlans(context.Context, []*Reference, ...gotenresource.BatchGetOption) error
	QueryAcceptedPlans(context.Context, *ListQuery, ...gotenresource.QueryOption) (*QueryResultSnapshot, error)
	WatchAcceptedPlan(context.Context, *GetQuery, func(*AcceptedPlanChange) error) error
	WatchAcceptedPlans(context.Context, *WatchQuery, func(*QueryResultChange) error) error
	SaveAcceptedPlan(context.Context, *AcceptedPlan, ...gotenresource.SaveOption) error
	DeleteAcceptedPlan(context.Context, *Reference, ...gotenresource.DeleteOption) error
}

type anyCastAccess struct {
	AcceptedPlanAccess
}

func AsAnyCastAccess(access AcceptedPlanAccess) gotenresource.Access {
	return &anyCastAccess{AcceptedPlanAccess: access}
}

func (a *anyCastAccess) Get(ctx context.Context, q gotenresource.GetQuery, opts ...gotenresource.GetOption) (gotenresource.Resource, error) {
	if asAcceptedPlanQuery, ok := q.(*GetQuery); ok {
		return a.GetAcceptedPlan(ctx, asAcceptedPlanQuery, opts...)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected AcceptedPlan, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Query(ctx context.Context, q gotenresource.ListQuery, opts ...gotenresource.QueryOption) (gotenresource.QueryResultSnapshot, error) {
	if asAcceptedPlanQuery, ok := q.(*ListQuery); ok {
		return a.QueryAcceptedPlans(ctx, asAcceptedPlanQuery, opts...)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected AcceptedPlan, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Search(ctx context.Context, q gotenresource.SearchQuery, opts ...gotenresource.QueryOption) (gotenresource.QueryResultSnapshot, error) {
	return nil, status.Errorf(codes.Internal, "Search is not available for AcceptedPlan")
}

func (a *anyCastAccess) Watch(ctx context.Context, q gotenresource.GetQuery, cb func(ch gotenresource.ResourceChange) error) error {
	if asAcceptedPlanQuery, ok := q.(*GetQuery); ok {
		return a.WatchAcceptedPlan(ctx, asAcceptedPlanQuery, func(change *AcceptedPlanChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected AcceptedPlan, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) WatchQuery(ctx context.Context, q gotenresource.WatchQuery, cb func(ch gotenresource.QueryResultChange) error) error {
	if asAcceptedPlanQuery, ok := q.(*WatchQuery); ok {
		return a.WatchAcceptedPlans(ctx, asAcceptedPlanQuery, func(change *QueryResultChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected AcceptedPlan, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Save(ctx context.Context, res gotenresource.Resource, opts ...gotenresource.SaveOption) error {
	if asAcceptedPlanRes, ok := res.(*AcceptedPlan); ok {
		return a.SaveAcceptedPlan(ctx, asAcceptedPlanRes, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected AcceptedPlan, got: %s",
		res.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Delete(ctx context.Context, ref gotenresource.Reference, opts ...gotenresource.DeleteOption) error {
	if asAcceptedPlanRef, ok := ref.(*Reference); ok {
		return a.DeleteAcceptedPlan(ctx, asAcceptedPlanRef, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected AcceptedPlan, got: %s",
		ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) BatchGet(ctx context.Context, toGet []gotenresource.Reference, opts ...gotenresource.BatchGetOption) error {
	acceptedPlanRefs := make([]*Reference, 0, len(toGet))
	for _, ref := range toGet {
		if asAcceptedPlanRef, ok := ref.(*Reference); !ok {
			return status.Errorf(codes.Internal,
				"Unrecognized descriptor, expected AcceptedPlan, got: %s",
				ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
		} else {
			acceptedPlanRefs = append(acceptedPlanRefs, asAcceptedPlanRef)
		}
	}
	return a.BatchGetAcceptedPlans(ctx, acceptedPlanRefs, opts...)
}

func (a *anyCastAccess) GetResourceDescriptors() []gotenresource.Descriptor {
	return []gotenresource.Descriptor{
		GetDescriptor(),
	}
}
