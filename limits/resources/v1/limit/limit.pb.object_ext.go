// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1/limit.proto
// DO NOT EDIT!!!

package limit

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	limit_pool "github.com/cloudwan/edgelq-sdk/limits/resources/v1/limit_pool"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &limit_pool.LimitPool{}
	_ = &meta_resource.Resource{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

func (o *Limit) GotenObjectExt() {}

func (o *Limit) MakeFullFieldMask() *Limit_FieldMask {
	return FullLimit_FieldMask()
}

func (o *Limit) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLimit_FieldMask()
}

func (o *Limit) MakeDiffFieldMask(other *Limit) *Limit_FieldMask {
	if o == nil && other == nil {
		return &Limit_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLimit_FieldMask()
	}

	res := &Limit_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Limit_FieldTerminalPath{selector: Limit_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Limit_FieldTerminalPath{selector: Limit_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Limit_FieldSubPath{selector: Limit_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetService().String() != other.GetService().String() {
		res.Paths = append(res.Paths, &Limit_FieldTerminalPath{selector: Limit_FieldPathSelectorService})
	}
	if o.GetResource().String() != other.GetResource().String() {
		res.Paths = append(res.Paths, &Limit_FieldTerminalPath{selector: Limit_FieldPathSelectorResource})
	}
	if o.GetRegion() != other.GetRegion() {
		res.Paths = append(res.Paths, &Limit_FieldTerminalPath{selector: Limit_FieldPathSelectorRegion})
	}
	if o.GetConfiguredLimit() != other.GetConfiguredLimit() {
		res.Paths = append(res.Paths, &Limit_FieldTerminalPath{selector: Limit_FieldPathSelectorConfiguredLimit})
	}
	if o.GetActiveLimit() != other.GetActiveLimit() {
		res.Paths = append(res.Paths, &Limit_FieldTerminalPath{selector: Limit_FieldPathSelectorActiveLimit})
	}
	if o.GetUsage() != other.GetUsage() {
		res.Paths = append(res.Paths, &Limit_FieldTerminalPath{selector: Limit_FieldPathSelectorUsage})
	}

	if len(o.GetSources()) == len(other.GetSources()) {
		for i, lValue := range o.GetSources() {
			rValue := other.GetSources()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &Limit_FieldTerminalPath{selector: Limit_FieldPathSelectorSources})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Limit_FieldTerminalPath{selector: Limit_FieldPathSelectorSources})
	}
	return res
}

func (o *Limit) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Limit))
}

func (o *Limit) Clone() *Limit {
	if o == nil {
		return nil
	}
	result := &Limit{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	if o.Service == nil {
		result.Service = nil
	} else if data, err := o.Service.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Service = &meta_service.Reference{}
		if err := result.Service.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Resource == nil {
		result.Resource = nil
	} else if data, err := o.Resource.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Resource = &meta_resource.Reference{}
		if err := result.Resource.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Region = o.Region
	result.ConfiguredLimit = o.ConfiguredLimit
	result.ActiveLimit = o.ActiveLimit
	result.Usage = o.Usage
	result.Sources = make([]*limit_pool.Reference, len(o.Sources))
	for i, sourceValue := range o.Sources {
		if sourceValue == nil {
			result.Sources[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Sources[i] = &limit_pool.Reference{}
			if err := result.Sources[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *Limit) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Limit) Merge(source *Limit) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetService() != nil {
		if data, err := source.GetService().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Service = &meta_service.Reference{}
			if err := o.Service.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Service = nil
	}
	if source.GetResource() != nil {
		if data, err := source.GetResource().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Resource = &meta_resource.Reference{}
			if err := o.Resource.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Resource = nil
	}
	o.Region = source.GetRegion()
	o.ConfiguredLimit = source.GetConfiguredLimit()
	o.ActiveLimit = source.GetActiveLimit()
	o.Usage = source.GetUsage()
	for _, sourceValue := range source.GetSources() {
		exists := false
		for _, currentValue := range o.Sources {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *limit_pool.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &limit_pool.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Sources = append(o.Sources, newDstElement)
		}
	}

}

func (o *Limit) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Limit))
}
