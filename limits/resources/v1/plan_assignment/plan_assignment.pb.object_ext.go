// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1/plan_assignment.proto
// DO NOT EDIT!!!

package plan_assignment

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1/project"
	accepted_plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1/accepted_plan"
	common "github.com/cloudwan/edgelq-sdk/limits/resources/v1/common"
	plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1/plan"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &accepted_plan.AcceptedPlan{}
	_ = &common.RegionalPlanAssignment{}
	_ = &plan.Plan{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

func (o *PlanAssignment) GotenObjectExt() {}

func (o *PlanAssignment) MakeFullFieldMask() *PlanAssignment_FieldMask {
	return FullPlanAssignment_FieldMask()
}

func (o *PlanAssignment) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPlanAssignment_FieldMask()
}

func (o *PlanAssignment) MakeDiffFieldMask(other *PlanAssignment) *PlanAssignment_FieldMask {
	if o == nil && other == nil {
		return &PlanAssignment_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPlanAssignment_FieldMask()
	}

	res := &PlanAssignment_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PlanAssignment_FieldSubPath{selector: PlanAssignment_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDefaultRegionalPlan().String() != other.GetDefaultRegionalPlan().String() {
		res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorDefaultRegionalPlan})
	}
	if o.GetService().String() != other.GetService().String() {
		res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorService})
	}

	if len(o.GetRegionalPlanOverrides()) == len(other.GetRegionalPlanOverrides()) {
		for i, lValue := range o.GetRegionalPlanOverrides() {
			rValue := other.GetRegionalPlanOverrides()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorRegionalPlanOverrides})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorRegionalPlanOverrides})
	}

	if len(o.GetExtensions()) == len(other.GetExtensions()) {
		for i, lValue := range o.GetExtensions() {
			rValue := other.GetExtensions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorExtensions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorExtensions})
	}

	if len(o.GetAllowances()) == len(other.GetAllowances()) {
		for i, lValue := range o.GetAllowances() {
			rValue := other.GetAllowances()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorAllowances})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorAllowances})
	}

	if len(o.GetAppliedRegions()) == len(other.GetAppliedRegions()) {
		for i, lValue := range o.GetAppliedRegions() {
			rValue := other.GetAppliedRegions()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorAppliedRegions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorAppliedRegions})
	}
	if o.GetAppliedPlanSpecGeneration() != other.GetAppliedPlanSpecGeneration() {
		res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorAppliedPlanSpecGeneration})
	}
	if o.GetSource().String() != other.GetSource().String() {
		res.Paths = append(res.Paths, &PlanAssignment_FieldTerminalPath{selector: PlanAssignment_FieldPathSelectorSource})
	}
	return res
}

func (o *PlanAssignment) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PlanAssignment))
}

func (o *PlanAssignment) Clone() *PlanAssignment {
	if o == nil {
		return nil
	}
	result := &PlanAssignment{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	if o.DefaultRegionalPlan == nil {
		result.DefaultRegionalPlan = nil
	} else if data, err := o.DefaultRegionalPlan.ProtoString(); err != nil {
		panic(err)
	} else {
		result.DefaultRegionalPlan = &plan.Reference{}
		if err := result.DefaultRegionalPlan.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Service == nil {
		result.Service = nil
	} else if data, err := o.Service.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Service = &meta_service.Reference{}
		if err := result.Service.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.RegionalPlanOverrides = make([]*common.RegionalPlanAssignment, len(o.RegionalPlanOverrides))
	for i, sourceValue := range o.RegionalPlanOverrides {
		result.RegionalPlanOverrides[i] = sourceValue.Clone()
	}
	result.Extensions = make([]*common.Allowance, len(o.Extensions))
	for i, sourceValue := range o.Extensions {
		result.Extensions[i] = sourceValue.Clone()
	}
	result.Allowances = make([]*common.Allowance, len(o.Allowances))
	for i, sourceValue := range o.Allowances {
		result.Allowances[i] = sourceValue.Clone()
	}
	result.AppliedRegions = make([]string, len(o.AppliedRegions))
	for i, sourceValue := range o.AppliedRegions {
		result.AppliedRegions[i] = sourceValue
	}
	result.AppliedPlanSpecGeneration = o.AppliedPlanSpecGeneration
	if o.Source == nil {
		result.Source = nil
	} else if data, err := o.Source.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Source = &accepted_plan.Reference{}
		if err := result.Source.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *PlanAssignment) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PlanAssignment) Merge(source *PlanAssignment) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetDefaultRegionalPlan() != nil {
		if data, err := source.GetDefaultRegionalPlan().ProtoString(); err != nil {
			panic(err)
		} else {
			o.DefaultRegionalPlan = &plan.Reference{}
			if err := o.DefaultRegionalPlan.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.DefaultRegionalPlan = nil
	}
	if source.GetService() != nil {
		if data, err := source.GetService().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Service = &meta_service.Reference{}
			if err := o.Service.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Service = nil
	}
	for _, sourceValue := range source.GetRegionalPlanOverrides() {
		exists := false
		for _, currentValue := range o.RegionalPlanOverrides {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *common.RegionalPlanAssignment
			if sourceValue != nil {
				newDstElement = new(common.RegionalPlanAssignment)
				newDstElement.Merge(sourceValue)
			}
			o.RegionalPlanOverrides = append(o.RegionalPlanOverrides, newDstElement)
		}
	}

	for _, sourceValue := range source.GetExtensions() {
		exists := false
		for _, currentValue := range o.Extensions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *common.Allowance
			if sourceValue != nil {
				newDstElement = new(common.Allowance)
				newDstElement.Merge(sourceValue)
			}
			o.Extensions = append(o.Extensions, newDstElement)
		}
	}

	for _, sourceValue := range source.GetAllowances() {
		exists := false
		for _, currentValue := range o.Allowances {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *common.Allowance
			if sourceValue != nil {
				newDstElement = new(common.Allowance)
				newDstElement.Merge(sourceValue)
			}
			o.Allowances = append(o.Allowances, newDstElement)
		}
	}

	for _, sourceValue := range source.GetAppliedRegions() {
		exists := false
		for _, currentValue := range o.AppliedRegions {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.AppliedRegions = append(o.AppliedRegions, newDstElement)
		}
	}

	o.AppliedPlanSpecGeneration = source.GetAppliedPlanSpecGeneration()
	if source.GetSource() != nil {
		if data, err := source.GetSource().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Source = &accepted_plan.Reference{}
			if err := o.Source.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Source = nil
	}
}

func (o *PlanAssignment) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PlanAssignment))
}
