// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1/common.proto
// DO NOT EDIT!!!

package common

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1/plan"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &plan.Plan{}
	_ = &meta_resource.Resource{}
)

func (o *RegionalPlanAssignment) GotenObjectExt() {}

func (o *RegionalPlanAssignment) MakeFullFieldMask() *RegionalPlanAssignment_FieldMask {
	return FullRegionalPlanAssignment_FieldMask()
}

func (o *RegionalPlanAssignment) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRegionalPlanAssignment_FieldMask()
}

func (o *RegionalPlanAssignment) MakeDiffFieldMask(other *RegionalPlanAssignment) *RegionalPlanAssignment_FieldMask {
	if o == nil && other == nil {
		return &RegionalPlanAssignment_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRegionalPlanAssignment_FieldMask()
	}

	res := &RegionalPlanAssignment_FieldMask{}
	if o.GetPlan().String() != other.GetPlan().String() {
		res.Paths = append(res.Paths, &RegionalPlanAssignment_FieldTerminalPath{selector: RegionalPlanAssignment_FieldPathSelectorPlan})
	}
	if o.GetRegion() != other.GetRegion() {
		res.Paths = append(res.Paths, &RegionalPlanAssignment_FieldTerminalPath{selector: RegionalPlanAssignment_FieldPathSelectorRegion})
	}
	if o.GetPlanGeneration() != other.GetPlanGeneration() {
		res.Paths = append(res.Paths, &RegionalPlanAssignment_FieldTerminalPath{selector: RegionalPlanAssignment_FieldPathSelectorPlanGeneration})
	}
	return res
}

func (o *RegionalPlanAssignment) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RegionalPlanAssignment))
}

func (o *RegionalPlanAssignment) Clone() *RegionalPlanAssignment {
	if o == nil {
		return nil
	}
	result := &RegionalPlanAssignment{}
	if o.Plan == nil {
		result.Plan = nil
	} else if data, err := o.Plan.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Plan = &plan.Reference{}
		if err := result.Plan.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Region = o.Region
	result.PlanGeneration = o.PlanGeneration
	return result
}

func (o *RegionalPlanAssignment) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RegionalPlanAssignment) Merge(source *RegionalPlanAssignment) {
	if source.GetPlan() != nil {
		if data, err := source.GetPlan().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Plan = &plan.Reference{}
			if err := o.Plan.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Plan = nil
	}
	o.Region = source.GetRegion()
	o.PlanGeneration = source.GetPlanGeneration()
}

func (o *RegionalPlanAssignment) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RegionalPlanAssignment))
}

func (o *Allowance) GotenObjectExt() {}

func (o *Allowance) MakeFullFieldMask() *Allowance_FieldMask {
	return FullAllowance_FieldMask()
}

func (o *Allowance) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAllowance_FieldMask()
}

func (o *Allowance) MakeDiffFieldMask(other *Allowance) *Allowance_FieldMask {
	if o == nil && other == nil {
		return &Allowance_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAllowance_FieldMask()
	}

	res := &Allowance_FieldMask{}
	if o.GetResource().String() != other.GetResource().String() {
		res.Paths = append(res.Paths, &Allowance_FieldTerminalPath{selector: Allowance_FieldPathSelectorResource})
	}
	if o.GetValue() != other.GetValue() {
		res.Paths = append(res.Paths, &Allowance_FieldTerminalPath{selector: Allowance_FieldPathSelectorValue})
	}
	if o.GetRegion() != other.GetRegion() {
		res.Paths = append(res.Paths, &Allowance_FieldTerminalPath{selector: Allowance_FieldPathSelectorRegion})
	}
	return res
}

func (o *Allowance) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Allowance))
}

func (o *Allowance) Clone() *Allowance {
	if o == nil {
		return nil
	}
	result := &Allowance{}
	if o.Resource == nil {
		result.Resource = nil
	} else if data, err := o.Resource.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Resource = &meta_resource.Reference{}
		if err := result.Resource.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Value = o.Value
	result.Region = o.Region
	return result
}

func (o *Allowance) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Allowance) Merge(source *Allowance) {
	if source.GetResource() != nil {
		if data, err := source.GetResource().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Resource = &meta_resource.Reference{}
			if err := o.Resource.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Resource = nil
	}
	o.Value = source.GetValue()
	o.Region = source.GetRegion()
}

func (o *Allowance) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Allowance))
}
