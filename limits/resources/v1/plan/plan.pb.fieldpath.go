// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1/plan.proto
// DO NOT EDIT!!!

package plan

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1/common"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_iam_common.PCR{}
	_ = &iam_organization.Organization{}
	_ = &meta_resource.Resource{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Plan_FieldPath interface {
	gotenobject.FieldPath
	Selector() Plan_FieldPathSelector
	Get(source *Plan) []interface{}
	GetSingle(source *Plan) (interface{}, bool)
	ClearValue(item *Plan)

	// Those methods build corresponding Plan_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Plan_FieldPathValue
	WithIArrayOfValues(values interface{}) Plan_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Plan_FieldPathArrayItemValue
}

type Plan_FieldPathSelector int32

const (
	Plan_FieldPathSelectorName           Plan_FieldPathSelector = 0
	Plan_FieldPathSelectorMetadata       Plan_FieldPathSelector = 1
	Plan_FieldPathSelectorDisplayName    Plan_FieldPathSelector = 2
	Plan_FieldPathSelectorService        Plan_FieldPathSelector = 3
	Plan_FieldPathSelectorResourceLimits Plan_FieldPathSelector = 4
	Plan_FieldPathSelectorPlanLevel      Plan_FieldPathSelector = 5
	Plan_FieldPathSelectorBusinessTier   Plan_FieldPathSelector = 6
	Plan_FieldPathSelectorGeneration     Plan_FieldPathSelector = 7
)

func (s Plan_FieldPathSelector) String() string {
	switch s {
	case Plan_FieldPathSelectorName:
		return "name"
	case Plan_FieldPathSelectorMetadata:
		return "metadata"
	case Plan_FieldPathSelectorDisplayName:
		return "display_name"
	case Plan_FieldPathSelectorService:
		return "service"
	case Plan_FieldPathSelectorResourceLimits:
		return "resource_limits"
	case Plan_FieldPathSelectorPlanLevel:
		return "plan_level"
	case Plan_FieldPathSelectorBusinessTier:
		return "business_tier"
	case Plan_FieldPathSelectorGeneration:
		return "generation"
	default:
		panic(fmt.Sprintf("Invalid selector for Plan: %d", s))
	}
}

func BuildPlan_FieldPath(fp gotenobject.RawFieldPath) (Plan_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Plan")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorName}, nil
		case "metadata":
			return &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorDisplayName}, nil
		case "service":
			return &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorService}, nil
		case "resource_limits", "resourceLimits", "resource-limits":
			return &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorResourceLimits}, nil
		case "plan_level", "planLevel", "plan-level":
			return &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorPlanLevel}, nil
		case "business_tier", "businessTier", "business-tier":
			return &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorBusinessTier}, nil
		case "generation":
			return &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorGeneration}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Plan_FieldSubPath{selector: Plan_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "resource_limits", "resourceLimits", "resource-limits":
			if subpath, err := BuildPlanLimitValue_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Plan_FieldSubPath{selector: Plan_FieldPathSelectorResourceLimits, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Plan", fp)
}

func ParsePlan_FieldPath(rawField string) (Plan_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPlan_FieldPath(fp)
}

func MustParsePlan_FieldPath(rawField string) Plan_FieldPath {
	fp, err := ParsePlan_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Plan_FieldTerminalPath struct {
	selector Plan_FieldPathSelector
}

var _ Plan_FieldPath = (*Plan_FieldTerminalPath)(nil)

func (fp *Plan_FieldTerminalPath) Selector() Plan_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Plan_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Plan_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Plan
func (fp *Plan_FieldTerminalPath) Get(source *Plan) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Plan_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Plan_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Plan_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Plan_FieldPathSelectorService:
			if source.Service != nil {
				values = append(values, source.Service)
			}
		case Plan_FieldPathSelectorResourceLimits:
			for _, value := range source.GetResourceLimits() {
				values = append(values, value)
			}
		case Plan_FieldPathSelectorPlanLevel:
			values = append(values, source.PlanLevel)
		case Plan_FieldPathSelectorBusinessTier:
			values = append(values, source.BusinessTier)
		case Plan_FieldPathSelectorGeneration:
			values = append(values, source.Generation)
		default:
			panic(fmt.Sprintf("Invalid selector for Plan: %d", fp.selector))
		}
	}
	return
}

func (fp *Plan_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Plan))
}

// GetSingle returns value pointed by specific field of from source Plan
func (fp *Plan_FieldTerminalPath) GetSingle(source *Plan) (interface{}, bool) {
	switch fp.selector {
	case Plan_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Plan_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Plan_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Plan_FieldPathSelectorService:
		res := source.GetService()
		return res, res != nil
	case Plan_FieldPathSelectorResourceLimits:
		res := source.GetResourceLimits()
		return res, res != nil
	case Plan_FieldPathSelectorPlanLevel:
		return source.GetPlanLevel(), source != nil
	case Plan_FieldPathSelectorBusinessTier:
		return source.GetBusinessTier(), source != nil
	case Plan_FieldPathSelectorGeneration:
		return source.GetGeneration(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Plan: %d", fp.selector))
	}
}

func (fp *Plan_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Plan))
}

// GetDefault returns a default value of the field type
func (fp *Plan_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Plan_FieldPathSelectorName:
		return (*Name)(nil)
	case Plan_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case Plan_FieldPathSelectorDisplayName:
		return ""
	case Plan_FieldPathSelectorService:
		return (*meta_service.Reference)(nil)
	case Plan_FieldPathSelectorResourceLimits:
		return ([]*Plan_LimitValue)(nil)
	case Plan_FieldPathSelectorPlanLevel:
		return Plan_UNDEFINED
	case Plan_FieldPathSelectorBusinessTier:
		return iam_iam_common.BusinessTier_UNDEFINED
	case Plan_FieldPathSelectorGeneration:
		return int64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Plan: %d", fp.selector))
	}
}

func (fp *Plan_FieldTerminalPath) ClearValue(item *Plan) {
	if item != nil {
		switch fp.selector {
		case Plan_FieldPathSelectorName:
			item.Name = nil
		case Plan_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Plan_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Plan_FieldPathSelectorService:
			item.Service = nil
		case Plan_FieldPathSelectorResourceLimits:
			item.ResourceLimits = nil
		case Plan_FieldPathSelectorPlanLevel:
			item.PlanLevel = Plan_UNDEFINED
		case Plan_FieldPathSelectorBusinessTier:
			item.BusinessTier = iam_iam_common.BusinessTier_UNDEFINED
		case Plan_FieldPathSelectorGeneration:
			item.Generation = int64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Plan: %d", fp.selector))
		}
	}
}

func (fp *Plan_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Plan))
}

// IsLeaf - whether field path is holds simple value
func (fp *Plan_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Plan_FieldPathSelectorName ||
		fp.selector == Plan_FieldPathSelectorDisplayName ||
		fp.selector == Plan_FieldPathSelectorService ||
		fp.selector == Plan_FieldPathSelectorPlanLevel ||
		fp.selector == Plan_FieldPathSelectorBusinessTier ||
		fp.selector == Plan_FieldPathSelectorGeneration
}

func (fp *Plan_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Plan_FieldTerminalPath) WithIValue(value interface{}) Plan_FieldPathValue {
	switch fp.selector {
	case Plan_FieldPathSelectorName:
		return &Plan_FieldTerminalPathValue{Plan_FieldTerminalPath: *fp, value: value.(*Name)}
	case Plan_FieldPathSelectorMetadata:
		return &Plan_FieldTerminalPathValue{Plan_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case Plan_FieldPathSelectorDisplayName:
		return &Plan_FieldTerminalPathValue{Plan_FieldTerminalPath: *fp, value: value.(string)}
	case Plan_FieldPathSelectorService:
		return &Plan_FieldTerminalPathValue{Plan_FieldTerminalPath: *fp, value: value.(*meta_service.Reference)}
	case Plan_FieldPathSelectorResourceLimits:
		return &Plan_FieldTerminalPathValue{Plan_FieldTerminalPath: *fp, value: value.([]*Plan_LimitValue)}
	case Plan_FieldPathSelectorPlanLevel:
		return &Plan_FieldTerminalPathValue{Plan_FieldTerminalPath: *fp, value: value.(Plan_PlanLevel)}
	case Plan_FieldPathSelectorBusinessTier:
		return &Plan_FieldTerminalPathValue{Plan_FieldTerminalPath: *fp, value: value.(iam_iam_common.BusinessTier)}
	case Plan_FieldPathSelectorGeneration:
		return &Plan_FieldTerminalPathValue{Plan_FieldTerminalPath: *fp, value: value.(int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Plan: %d", fp.selector))
	}
}

func (fp *Plan_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Plan_FieldTerminalPath) WithIArrayOfValues(values interface{}) Plan_FieldPathArrayOfValues {
	fpaov := &Plan_FieldTerminalPathArrayOfValues{Plan_FieldTerminalPath: *fp}
	switch fp.selector {
	case Plan_FieldPathSelectorName:
		return &Plan_FieldTerminalPathArrayOfValues{Plan_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Plan_FieldPathSelectorMetadata:
		return &Plan_FieldTerminalPathArrayOfValues{Plan_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case Plan_FieldPathSelectorDisplayName:
		return &Plan_FieldTerminalPathArrayOfValues{Plan_FieldTerminalPath: *fp, values: values.([]string)}
	case Plan_FieldPathSelectorService:
		return &Plan_FieldTerminalPathArrayOfValues{Plan_FieldTerminalPath: *fp, values: values.([]*meta_service.Reference)}
	case Plan_FieldPathSelectorResourceLimits:
		return &Plan_FieldTerminalPathArrayOfValues{Plan_FieldTerminalPath: *fp, values: values.([][]*Plan_LimitValue)}
	case Plan_FieldPathSelectorPlanLevel:
		return &Plan_FieldTerminalPathArrayOfValues{Plan_FieldTerminalPath: *fp, values: values.([]Plan_PlanLevel)}
	case Plan_FieldPathSelectorBusinessTier:
		return &Plan_FieldTerminalPathArrayOfValues{Plan_FieldTerminalPath: *fp, values: values.([]iam_iam_common.BusinessTier)}
	case Plan_FieldPathSelectorGeneration:
		return &Plan_FieldTerminalPathArrayOfValues{Plan_FieldTerminalPath: *fp, values: values.([]int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Plan: %d", fp.selector))
	}
	return fpaov
}

func (fp *Plan_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Plan_FieldTerminalPath) WithIArrayItemValue(value interface{}) Plan_FieldPathArrayItemValue {
	switch fp.selector {
	case Plan_FieldPathSelectorResourceLimits:
		return &Plan_FieldTerminalPathArrayItemValue{Plan_FieldTerminalPath: *fp, value: value.(*Plan_LimitValue)}
	default:
		panic(fmt.Sprintf("Invalid selector for Plan: %d", fp.selector))
	}
}

func (fp *Plan_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Plan_FieldSubPath struct {
	selector Plan_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Plan_FieldPath = (*Plan_FieldSubPath)(nil)

func (fps *Plan_FieldSubPath) Selector() Plan_FieldPathSelector {
	return fps.selector
}
func (fps *Plan_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *Plan_FieldSubPath) AsResourceLimitsSubPath() (PlanLimitValue_FieldPath, bool) {
	res, ok := fps.subPath.(PlanLimitValue_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Plan_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Plan_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Plan
func (fps *Plan_FieldSubPath) Get(source *Plan) (values []interface{}) {
	switch fps.selector {
	case Plan_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case Plan_FieldPathSelectorResourceLimits:
		for _, item := range source.GetResourceLimits() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Plan: %d", fps.selector))
	}
	return
}

func (fps *Plan_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Plan))
}

// GetSingle returns value of selected field from source Plan
func (fps *Plan_FieldSubPath) GetSingle(source *Plan) (interface{}, bool) {
	switch fps.selector {
	case Plan_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Plan_FieldPathSelectorResourceLimits:
		if len(source.GetResourceLimits()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetResourceLimits()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Plan: %d", fps.selector))
	}
}

func (fps *Plan_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Plan))
}

// GetDefault returns a default value of the field type
func (fps *Plan_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Plan_FieldSubPath) ClearValue(item *Plan) {
	if item != nil {
		switch fps.selector {
		case Plan_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Plan_FieldPathSelectorResourceLimits:
			for _, subItem := range item.ResourceLimits {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Plan: %d", fps.selector))
		}
	}
}

func (fps *Plan_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Plan))
}

// IsLeaf - whether field path is holds simple value
func (fps *Plan_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Plan_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Plan_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Plan_FieldSubPath) WithIValue(value interface{}) Plan_FieldPathValue {
	return &Plan_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Plan_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Plan_FieldSubPath) WithIArrayOfValues(values interface{}) Plan_FieldPathArrayOfValues {
	return &Plan_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Plan_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Plan_FieldSubPath) WithIArrayItemValue(value interface{}) Plan_FieldPathArrayItemValue {
	return &Plan_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Plan_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Plan_FieldPathValue allows storing values for Plan fields according to their type
type Plan_FieldPathValue interface {
	Plan_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Plan)
	CompareWith(*Plan) (cmp int, comparable bool)
}

func ParsePlan_FieldPathValue(pathStr, valueStr string) (Plan_FieldPathValue, error) {
	fp, err := ParsePlan_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Plan field path value from %s: %v", valueStr, err)
	}
	return fpv.(Plan_FieldPathValue), nil
}

func MustParsePlan_FieldPathValue(pathStr, valueStr string) Plan_FieldPathValue {
	fpv, err := ParsePlan_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Plan_FieldTerminalPathValue struct {
	Plan_FieldTerminalPath
	value interface{}
}

var _ Plan_FieldPathValue = (*Plan_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Plan' as interface{}
func (fpv *Plan_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Plan_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Plan_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *Plan_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Plan_FieldTerminalPathValue) AsServiceValue() (*meta_service.Reference, bool) {
	res, ok := fpv.value.(*meta_service.Reference)
	return res, ok
}
func (fpv *Plan_FieldTerminalPathValue) AsResourceLimitsValue() ([]*Plan_LimitValue, bool) {
	res, ok := fpv.value.([]*Plan_LimitValue)
	return res, ok
}
func (fpv *Plan_FieldTerminalPathValue) AsPlanLevelValue() (Plan_PlanLevel, bool) {
	res, ok := fpv.value.(Plan_PlanLevel)
	return res, ok
}
func (fpv *Plan_FieldTerminalPathValue) AsBusinessTierValue() (iam_iam_common.BusinessTier, bool) {
	res, ok := fpv.value.(iam_iam_common.BusinessTier)
	return res, ok
}
func (fpv *Plan_FieldTerminalPathValue) AsGenerationValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}

// SetTo stores value for selected field for object Plan
func (fpv *Plan_FieldTerminalPathValue) SetTo(target **Plan) {
	if *target == nil {
		*target = new(Plan)
	}
	switch fpv.selector {
	case Plan_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Plan_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case Plan_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Plan_FieldPathSelectorService:
		(*target).Service = fpv.value.(*meta_service.Reference)
	case Plan_FieldPathSelectorResourceLimits:
		(*target).ResourceLimits = fpv.value.([]*Plan_LimitValue)
	case Plan_FieldPathSelectorPlanLevel:
		(*target).PlanLevel = fpv.value.(Plan_PlanLevel)
	case Plan_FieldPathSelectorBusinessTier:
		(*target).BusinessTier = fpv.value.(iam_iam_common.BusinessTier)
	case Plan_FieldPathSelectorGeneration:
		(*target).Generation = fpv.value.(int64)
	default:
		panic(fmt.Sprintf("Invalid selector for Plan: %d", fpv.selector))
	}
}

func (fpv *Plan_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Plan)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Plan_FieldTerminalPathValue' with the value under path in 'Plan'.
func (fpv *Plan_FieldTerminalPathValue) CompareWith(source *Plan) (int, bool) {
	switch fpv.selector {
	case Plan_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Plan_FieldPathSelectorMetadata:
		return 0, false
	case Plan_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Plan_FieldPathSelectorService:
		leftValue := fpv.value.(*meta_service.Reference)
		rightValue := source.GetService()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Plan_FieldPathSelectorResourceLimits:
		return 0, false
	case Plan_FieldPathSelectorPlanLevel:
		leftValue := fpv.value.(Plan_PlanLevel)
		rightValue := source.GetPlanLevel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Plan_FieldPathSelectorBusinessTier:
		leftValue := fpv.value.(iam_iam_common.BusinessTier)
		rightValue := source.GetBusinessTier()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Plan_FieldPathSelectorGeneration:
		leftValue := fpv.value.(int64)
		rightValue := source.GetGeneration()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Plan: %d", fpv.selector))
	}
}

func (fpv *Plan_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Plan))
}

type Plan_FieldSubPathValue struct {
	Plan_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Plan_FieldPathValue = (*Plan_FieldSubPathValue)(nil)

func (fpvs *Plan_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Plan_FieldSubPathValue) AsResourceLimitsPathValue() (PlanLimitValue_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(PlanLimitValue_FieldPathValue)
	return res, ok
}

func (fpvs *Plan_FieldSubPathValue) SetTo(target **Plan) {
	if *target == nil {
		*target = new(Plan)
	}
	switch fpvs.Selector() {
	case Plan_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Plan_FieldPathSelectorResourceLimits:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Plan: %d", fpvs.Selector()))
	}
}

func (fpvs *Plan_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Plan)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Plan_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Plan_FieldSubPathValue) CompareWith(source *Plan) (int, bool) {
	switch fpvs.Selector() {
	case Plan_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Plan_FieldPathSelectorResourceLimits:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Plan: %d", fpvs.Selector()))
	}
}

func (fpvs *Plan_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Plan))
}

// Plan_FieldPathArrayItemValue allows storing single item in Path-specific values for Plan according to their type
// Present only for array (repeated) types.
type Plan_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Plan_FieldPath
	ContainsValue(*Plan) bool
}

// ParsePlan_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePlan_FieldPathArrayItemValue(pathStr, valueStr string) (Plan_FieldPathArrayItemValue, error) {
	fp, err := ParsePlan_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Plan field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Plan_FieldPathArrayItemValue), nil
}

func MustParsePlan_FieldPathArrayItemValue(pathStr, valueStr string) Plan_FieldPathArrayItemValue {
	fpaiv, err := ParsePlan_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Plan_FieldTerminalPathArrayItemValue struct {
	Plan_FieldTerminalPath
	value interface{}
}

var _ Plan_FieldPathArrayItemValue = (*Plan_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Plan as interface{}
func (fpaiv *Plan_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Plan_FieldTerminalPathArrayItemValue) AsResourceLimitsItemValue() (*Plan_LimitValue, bool) {
	res, ok := fpaiv.value.(*Plan_LimitValue)
	return res, ok
}

func (fpaiv *Plan_FieldTerminalPathArrayItemValue) GetSingle(source *Plan) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Plan_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Plan))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Plan'
func (fpaiv *Plan_FieldTerminalPathArrayItemValue) ContainsValue(source *Plan) bool {
	slice := fpaiv.Plan_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Plan_FieldSubPathArrayItemValue struct {
	Plan_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Plan_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Plan_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Plan_FieldSubPathArrayItemValue) AsResourceLimitsPathItemValue() (PlanLimitValue_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(PlanLimitValue_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Plan'
func (fpaivs *Plan_FieldSubPathArrayItemValue) ContainsValue(source *Plan) bool {
	switch fpaivs.Selector() {
	case Plan_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Plan_FieldPathSelectorResourceLimits:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Plan: %d", fpaivs.Selector()))
	}
}

// Plan_FieldPathArrayOfValues allows storing slice of values for Plan fields according to their type
type Plan_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Plan_FieldPath
}

func ParsePlan_FieldPathArrayOfValues(pathStr, valuesStr string) (Plan_FieldPathArrayOfValues, error) {
	fp, err := ParsePlan_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Plan field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Plan_FieldPathArrayOfValues), nil
}

func MustParsePlan_FieldPathArrayOfValues(pathStr, valuesStr string) Plan_FieldPathArrayOfValues {
	fpaov, err := ParsePlan_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Plan_FieldTerminalPathArrayOfValues struct {
	Plan_FieldTerminalPath
	values interface{}
}

var _ Plan_FieldPathArrayOfValues = (*Plan_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Plan_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Plan_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Plan_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case Plan_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Plan_FieldPathSelectorService:
		for _, v := range fpaov.values.([]*meta_service.Reference) {
			values = append(values, v)
		}
	case Plan_FieldPathSelectorResourceLimits:
		for _, v := range fpaov.values.([][]*Plan_LimitValue) {
			values = append(values, v)
		}
	case Plan_FieldPathSelectorPlanLevel:
		for _, v := range fpaov.values.([]Plan_PlanLevel) {
			values = append(values, v)
		}
	case Plan_FieldPathSelectorBusinessTier:
		for _, v := range fpaov.values.([]iam_iam_common.BusinessTier) {
			values = append(values, v)
		}
	case Plan_FieldPathSelectorGeneration:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Plan_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Plan_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *Plan_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Plan_FieldTerminalPathArrayOfValues) AsServiceArrayOfValues() ([]*meta_service.Reference, bool) {
	res, ok := fpaov.values.([]*meta_service.Reference)
	return res, ok
}
func (fpaov *Plan_FieldTerminalPathArrayOfValues) AsResourceLimitsArrayOfValues() ([][]*Plan_LimitValue, bool) {
	res, ok := fpaov.values.([][]*Plan_LimitValue)
	return res, ok
}
func (fpaov *Plan_FieldTerminalPathArrayOfValues) AsPlanLevelArrayOfValues() ([]Plan_PlanLevel, bool) {
	res, ok := fpaov.values.([]Plan_PlanLevel)
	return res, ok
}
func (fpaov *Plan_FieldTerminalPathArrayOfValues) AsBusinessTierArrayOfValues() ([]iam_iam_common.BusinessTier, bool) {
	res, ok := fpaov.values.([]iam_iam_common.BusinessTier)
	return res, ok
}
func (fpaov *Plan_FieldTerminalPathArrayOfValues) AsGenerationArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}

type Plan_FieldSubPathArrayOfValues struct {
	Plan_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Plan_FieldPathArrayOfValues = (*Plan_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Plan_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Plan_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Plan_FieldSubPathArrayOfValues) AsResourceLimitsPathArrayOfValues() (PlanLimitValue_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(PlanLimitValue_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PlanLimitValue_FieldPath interface {
	gotenobject.FieldPath
	Selector() PlanLimitValue_FieldPathSelector
	Get(source *Plan_LimitValue) []interface{}
	GetSingle(source *Plan_LimitValue) (interface{}, bool)
	ClearValue(item *Plan_LimitValue)

	// Those methods build corresponding PlanLimitValue_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PlanLimitValue_FieldPathValue
	WithIArrayOfValues(values interface{}) PlanLimitValue_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PlanLimitValue_FieldPathArrayItemValue
}

type PlanLimitValue_FieldPathSelector int32

const (
	PlanLimitValue_FieldPathSelectorResource PlanLimitValue_FieldPathSelector = 0
	PlanLimitValue_FieldPathSelectorValue    PlanLimitValue_FieldPathSelector = 1
)

func (s PlanLimitValue_FieldPathSelector) String() string {
	switch s {
	case PlanLimitValue_FieldPathSelectorResource:
		return "resource"
	case PlanLimitValue_FieldPathSelectorValue:
		return "value"
	default:
		panic(fmt.Sprintf("Invalid selector for Plan_LimitValue: %d", s))
	}
}

func BuildPlanLimitValue_FieldPath(fp gotenobject.RawFieldPath) (PlanLimitValue_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Plan_LimitValue")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "resource":
			return &PlanLimitValue_FieldTerminalPath{selector: PlanLimitValue_FieldPathSelectorResource}, nil
		case "value":
			return &PlanLimitValue_FieldTerminalPath{selector: PlanLimitValue_FieldPathSelectorValue}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Plan_LimitValue", fp)
}

func ParsePlanLimitValue_FieldPath(rawField string) (PlanLimitValue_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPlanLimitValue_FieldPath(fp)
}

func MustParsePlanLimitValue_FieldPath(rawField string) PlanLimitValue_FieldPath {
	fp, err := ParsePlanLimitValue_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PlanLimitValue_FieldTerminalPath struct {
	selector PlanLimitValue_FieldPathSelector
}

var _ PlanLimitValue_FieldPath = (*PlanLimitValue_FieldTerminalPath)(nil)

func (fp *PlanLimitValue_FieldTerminalPath) Selector() PlanLimitValue_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PlanLimitValue_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PlanLimitValue_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Plan_LimitValue
func (fp *PlanLimitValue_FieldTerminalPath) Get(source *Plan_LimitValue) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PlanLimitValue_FieldPathSelectorResource:
			if source.Resource != nil {
				values = append(values, source.Resource)
			}
		case PlanLimitValue_FieldPathSelectorValue:
			values = append(values, source.Value)
		default:
			panic(fmt.Sprintf("Invalid selector for Plan_LimitValue: %d", fp.selector))
		}
	}
	return
}

func (fp *PlanLimitValue_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Plan_LimitValue))
}

// GetSingle returns value pointed by specific field of from source Plan_LimitValue
func (fp *PlanLimitValue_FieldTerminalPath) GetSingle(source *Plan_LimitValue) (interface{}, bool) {
	switch fp.selector {
	case PlanLimitValue_FieldPathSelectorResource:
		res := source.GetResource()
		return res, res != nil
	case PlanLimitValue_FieldPathSelectorValue:
		return source.GetValue(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Plan_LimitValue: %d", fp.selector))
	}
}

func (fp *PlanLimitValue_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Plan_LimitValue))
}

// GetDefault returns a default value of the field type
func (fp *PlanLimitValue_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PlanLimitValue_FieldPathSelectorResource:
		return (*meta_resource.Reference)(nil)
	case PlanLimitValue_FieldPathSelectorValue:
		return int64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Plan_LimitValue: %d", fp.selector))
	}
}

func (fp *PlanLimitValue_FieldTerminalPath) ClearValue(item *Plan_LimitValue) {
	if item != nil {
		switch fp.selector {
		case PlanLimitValue_FieldPathSelectorResource:
			item.Resource = nil
		case PlanLimitValue_FieldPathSelectorValue:
			item.Value = int64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Plan_LimitValue: %d", fp.selector))
		}
	}
}

func (fp *PlanLimitValue_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Plan_LimitValue))
}

// IsLeaf - whether field path is holds simple value
func (fp *PlanLimitValue_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PlanLimitValue_FieldPathSelectorResource ||
		fp.selector == PlanLimitValue_FieldPathSelectorValue
}

func (fp *PlanLimitValue_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PlanLimitValue_FieldTerminalPath) WithIValue(value interface{}) PlanLimitValue_FieldPathValue {
	switch fp.selector {
	case PlanLimitValue_FieldPathSelectorResource:
		return &PlanLimitValue_FieldTerminalPathValue{PlanLimitValue_FieldTerminalPath: *fp, value: value.(*meta_resource.Reference)}
	case PlanLimitValue_FieldPathSelectorValue:
		return &PlanLimitValue_FieldTerminalPathValue{PlanLimitValue_FieldTerminalPath: *fp, value: value.(int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Plan_LimitValue: %d", fp.selector))
	}
}

func (fp *PlanLimitValue_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PlanLimitValue_FieldTerminalPath) WithIArrayOfValues(values interface{}) PlanLimitValue_FieldPathArrayOfValues {
	fpaov := &PlanLimitValue_FieldTerminalPathArrayOfValues{PlanLimitValue_FieldTerminalPath: *fp}
	switch fp.selector {
	case PlanLimitValue_FieldPathSelectorResource:
		return &PlanLimitValue_FieldTerminalPathArrayOfValues{PlanLimitValue_FieldTerminalPath: *fp, values: values.([]*meta_resource.Reference)}
	case PlanLimitValue_FieldPathSelectorValue:
		return &PlanLimitValue_FieldTerminalPathArrayOfValues{PlanLimitValue_FieldTerminalPath: *fp, values: values.([]int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Plan_LimitValue: %d", fp.selector))
	}
	return fpaov
}

func (fp *PlanLimitValue_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PlanLimitValue_FieldTerminalPath) WithIArrayItemValue(value interface{}) PlanLimitValue_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Plan_LimitValue: %d", fp.selector))
	}
}

func (fp *PlanLimitValue_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// PlanLimitValue_FieldPathValue allows storing values for LimitValue fields according to their type
type PlanLimitValue_FieldPathValue interface {
	PlanLimitValue_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Plan_LimitValue)
	CompareWith(*Plan_LimitValue) (cmp int, comparable bool)
}

func ParsePlanLimitValue_FieldPathValue(pathStr, valueStr string) (PlanLimitValue_FieldPathValue, error) {
	fp, err := ParsePlanLimitValue_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LimitValue field path value from %s: %v", valueStr, err)
	}
	return fpv.(PlanLimitValue_FieldPathValue), nil
}

func MustParsePlanLimitValue_FieldPathValue(pathStr, valueStr string) PlanLimitValue_FieldPathValue {
	fpv, err := ParsePlanLimitValue_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PlanLimitValue_FieldTerminalPathValue struct {
	PlanLimitValue_FieldTerminalPath
	value interface{}
}

var _ PlanLimitValue_FieldPathValue = (*PlanLimitValue_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'LimitValue' as interface{}
func (fpv *PlanLimitValue_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PlanLimitValue_FieldTerminalPathValue) AsResourceValue() (*meta_resource.Reference, bool) {
	res, ok := fpv.value.(*meta_resource.Reference)
	return res, ok
}
func (fpv *PlanLimitValue_FieldTerminalPathValue) AsValueValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}

// SetTo stores value for selected field for object LimitValue
func (fpv *PlanLimitValue_FieldTerminalPathValue) SetTo(target **Plan_LimitValue) {
	if *target == nil {
		*target = new(Plan_LimitValue)
	}
	switch fpv.selector {
	case PlanLimitValue_FieldPathSelectorResource:
		(*target).Resource = fpv.value.(*meta_resource.Reference)
	case PlanLimitValue_FieldPathSelectorValue:
		(*target).Value = fpv.value.(int64)
	default:
		panic(fmt.Sprintf("Invalid selector for Plan_LimitValue: %d", fpv.selector))
	}
}

func (fpv *PlanLimitValue_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Plan_LimitValue)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PlanLimitValue_FieldTerminalPathValue' with the value under path in 'Plan_LimitValue'.
func (fpv *PlanLimitValue_FieldTerminalPathValue) CompareWith(source *Plan_LimitValue) (int, bool) {
	switch fpv.selector {
	case PlanLimitValue_FieldPathSelectorResource:
		leftValue := fpv.value.(*meta_resource.Reference)
		rightValue := source.GetResource()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case PlanLimitValue_FieldPathSelectorValue:
		leftValue := fpv.value.(int64)
		rightValue := source.GetValue()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Plan_LimitValue: %d", fpv.selector))
	}
}

func (fpv *PlanLimitValue_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Plan_LimitValue))
}

// PlanLimitValue_FieldPathArrayItemValue allows storing single item in Path-specific values for LimitValue according to their type
// Present only for array (repeated) types.
type PlanLimitValue_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PlanLimitValue_FieldPath
	ContainsValue(*Plan_LimitValue) bool
}

// ParsePlanLimitValue_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePlanLimitValue_FieldPathArrayItemValue(pathStr, valueStr string) (PlanLimitValue_FieldPathArrayItemValue, error) {
	fp, err := ParsePlanLimitValue_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LimitValue field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PlanLimitValue_FieldPathArrayItemValue), nil
}

func MustParsePlanLimitValue_FieldPathArrayItemValue(pathStr, valueStr string) PlanLimitValue_FieldPathArrayItemValue {
	fpaiv, err := ParsePlanLimitValue_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PlanLimitValue_FieldTerminalPathArrayItemValue struct {
	PlanLimitValue_FieldTerminalPath
	value interface{}
}

var _ PlanLimitValue_FieldPathArrayItemValue = (*PlanLimitValue_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Plan_LimitValue as interface{}
func (fpaiv *PlanLimitValue_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *PlanLimitValue_FieldTerminalPathArrayItemValue) GetSingle(source *Plan_LimitValue) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PlanLimitValue_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Plan_LimitValue))
}

// Contains returns a boolean indicating if value that is being held is present in given 'LimitValue'
func (fpaiv *PlanLimitValue_FieldTerminalPathArrayItemValue) ContainsValue(source *Plan_LimitValue) bool {
	slice := fpaiv.PlanLimitValue_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// PlanLimitValue_FieldPathArrayOfValues allows storing slice of values for LimitValue fields according to their type
type PlanLimitValue_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PlanLimitValue_FieldPath
}

func ParsePlanLimitValue_FieldPathArrayOfValues(pathStr, valuesStr string) (PlanLimitValue_FieldPathArrayOfValues, error) {
	fp, err := ParsePlanLimitValue_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LimitValue field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PlanLimitValue_FieldPathArrayOfValues), nil
}

func MustParsePlanLimitValue_FieldPathArrayOfValues(pathStr, valuesStr string) PlanLimitValue_FieldPathArrayOfValues {
	fpaov, err := ParsePlanLimitValue_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PlanLimitValue_FieldTerminalPathArrayOfValues struct {
	PlanLimitValue_FieldTerminalPath
	values interface{}
}

var _ PlanLimitValue_FieldPathArrayOfValues = (*PlanLimitValue_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PlanLimitValue_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PlanLimitValue_FieldPathSelectorResource:
		for _, v := range fpaov.values.([]*meta_resource.Reference) {
			values = append(values, v)
		}
	case PlanLimitValue_FieldPathSelectorValue:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PlanLimitValue_FieldTerminalPathArrayOfValues) AsResourceArrayOfValues() ([]*meta_resource.Reference, bool) {
	res, ok := fpaov.values.([]*meta_resource.Reference)
	return res, ok
}
func (fpaov *PlanLimitValue_FieldTerminalPathArrayOfValues) AsValueArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
