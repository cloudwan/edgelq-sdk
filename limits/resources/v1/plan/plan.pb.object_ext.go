// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1/plan.proto
// DO NOT EDIT!!!

package plan

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1/common"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1/organization"
	meta_resource "github.com/cloudwan/goten-sdk/meta-service/resources/v1/resource"
	meta_service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_iam_common.PCR{}
	_ = &iam_organization.Organization{}
	_ = &meta_resource.Resource{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

func (o *Plan) GotenObjectExt() {}

func (o *Plan) MakeFullFieldMask() *Plan_FieldMask {
	return FullPlan_FieldMask()
}

func (o *Plan) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPlan_FieldMask()
}

func (o *Plan) MakeDiffFieldMask(other *Plan) *Plan_FieldMask {
	if o == nil && other == nil {
		return &Plan_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPlan_FieldMask()
	}

	res := &Plan_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Plan_FieldSubPath{selector: Plan_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorDisplayName})
	}
	if o.GetService().String() != other.GetService().String() {
		res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorService})
	}

	if len(o.GetResourceLimits()) == len(other.GetResourceLimits()) {
		for i, lValue := range o.GetResourceLimits() {
			rValue := other.GetResourceLimits()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorResourceLimits})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorResourceLimits})
	}
	if o.GetPlanLevel() != other.GetPlanLevel() {
		res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorPlanLevel})
	}
	if o.GetBusinessTier() != other.GetBusinessTier() {
		res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorBusinessTier})
	}
	if o.GetGeneration() != other.GetGeneration() {
		res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorGeneration})
	}
	return res
}

func (o *Plan) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Plan))
}

func (o *Plan) Clone() *Plan {
	if o == nil {
		return nil
	}
	result := &Plan{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	if o.Service == nil {
		result.Service = nil
	} else if data, err := o.Service.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Service = &meta_service.Reference{}
		if err := result.Service.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResourceLimits = make([]*Plan_LimitValue, len(o.ResourceLimits))
	for i, sourceValue := range o.ResourceLimits {
		result.ResourceLimits[i] = sourceValue.Clone()
	}
	result.PlanLevel = o.PlanLevel
	result.BusinessTier = o.BusinessTier
	result.Generation = o.Generation
	return result
}

func (o *Plan) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Plan) Merge(source *Plan) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetService() != nil {
		if data, err := source.GetService().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Service = &meta_service.Reference{}
			if err := o.Service.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Service = nil
	}
	for _, sourceValue := range source.GetResourceLimits() {
		exists := false
		for _, currentValue := range o.ResourceLimits {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Plan_LimitValue
			if sourceValue != nil {
				newDstElement = new(Plan_LimitValue)
				newDstElement.Merge(sourceValue)
			}
			o.ResourceLimits = append(o.ResourceLimits, newDstElement)
		}
	}

	o.PlanLevel = source.GetPlanLevel()
	o.BusinessTier = source.GetBusinessTier()
	o.Generation = source.GetGeneration()
}

func (o *Plan) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Plan))
}

func (o *Plan_LimitValue) GotenObjectExt() {}

func (o *Plan_LimitValue) MakeFullFieldMask() *Plan_LimitValue_FieldMask {
	return FullPlan_LimitValue_FieldMask()
}

func (o *Plan_LimitValue) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPlan_LimitValue_FieldMask()
}

func (o *Plan_LimitValue) MakeDiffFieldMask(other *Plan_LimitValue) *Plan_LimitValue_FieldMask {
	if o == nil && other == nil {
		return &Plan_LimitValue_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPlan_LimitValue_FieldMask()
	}

	res := &Plan_LimitValue_FieldMask{}
	if o.GetResource().String() != other.GetResource().String() {
		res.Paths = append(res.Paths, &PlanLimitValue_FieldTerminalPath{selector: PlanLimitValue_FieldPathSelectorResource})
	}
	if o.GetValue() != other.GetValue() {
		res.Paths = append(res.Paths, &PlanLimitValue_FieldTerminalPath{selector: PlanLimitValue_FieldPathSelectorValue})
	}
	return res
}

func (o *Plan_LimitValue) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Plan_LimitValue))
}

func (o *Plan_LimitValue) Clone() *Plan_LimitValue {
	if o == nil {
		return nil
	}
	result := &Plan_LimitValue{}
	if o.Resource == nil {
		result.Resource = nil
	} else if data, err := o.Resource.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Resource = &meta_resource.Reference{}
		if err := result.Resource.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Value = o.Value
	return result
}

func (o *Plan_LimitValue) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Plan_LimitValue) Merge(source *Plan_LimitValue) {
	if source.GetResource() != nil {
		if data, err := source.GetResource().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Resource = &meta_resource.Reference{}
			if err := o.Resource.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Resource = nil
	}
	o.Value = source.GetValue()
}

func (o *Plan_LimitValue) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Plan_LimitValue))
}
