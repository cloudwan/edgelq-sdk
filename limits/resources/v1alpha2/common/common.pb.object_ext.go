// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/common.proto
// DO NOT EDIT!!!

package common

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	meta_resource "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/resource"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &meta_resource.Resource{}
)

func (o *Allowance) GotenObjectExt() {}

func (o *Allowance) MakeFullFieldMask() *Allowance_FieldMask {
	return FullAllowance_FieldMask()
}

func (o *Allowance) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAllowance_FieldMask()
}

func (o *Allowance) MakeDiffFieldMask(other *Allowance) *Allowance_FieldMask {
	if o == nil && other == nil {
		return &Allowance_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAllowance_FieldMask()
	}

	res := &Allowance_FieldMask{}
	if o.GetResource().String() != other.GetResource().String() {
		res.Paths = append(res.Paths, &Allowance_FieldTerminalPath{selector: Allowance_FieldPathSelectorResource})
	}
	if o.GetValue() != other.GetValue() {
		res.Paths = append(res.Paths, &Allowance_FieldTerminalPath{selector: Allowance_FieldPathSelectorValue})
	}
	return res
}

func (o *Allowance) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Allowance))
}

func (o *Allowance) Clone() *Allowance {
	if o == nil {
		return nil
	}
	result := &Allowance{}
	if o.Resource == nil {
		result.Resource = nil
	} else if data, err := o.Resource.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Resource = &meta_resource.Reference{}
		if err := result.Resource.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Value = o.Value
	return result
}

func (o *Allowance) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Allowance) Merge(source *Allowance) {
	if source.GetResource() != nil {
		if data, err := source.GetResource().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Resource = &meta_resource.Reference{}
			if err := o.Resource.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Resource = nil
	}
	o.Value = source.GetValue()
}

func (o *Allowance) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Allowance))
}

func (o *RegionalDistribution) GotenObjectExt() {}

func (o *RegionalDistribution) MakeFullFieldMask() *RegionalDistribution_FieldMask {
	return FullRegionalDistribution_FieldMask()
}

func (o *RegionalDistribution) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullRegionalDistribution_FieldMask()
}

func (o *RegionalDistribution) MakeDiffFieldMask(other *RegionalDistribution) *RegionalDistribution_FieldMask {
	if o == nil && other == nil {
		return &RegionalDistribution_FieldMask{}
	}
	if o == nil || other == nil {
		return FullRegionalDistribution_FieldMask()
	}

	res := &RegionalDistribution_FieldMask{}
	if o.GetResource().String() != other.GetResource().String() {
		res.Paths = append(res.Paths, &RegionalDistribution_FieldTerminalPath{selector: RegionalDistribution_FieldPathSelectorResource})
	}

	if len(o.GetLimitsByRegion()) == len(other.GetLimitsByRegion()) {
		for i, lValue := range o.GetLimitsByRegion() {
			rValue := other.GetLimitsByRegion()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &RegionalDistribution_FieldTerminalPath{selector: RegionalDistribution_FieldPathSelectorLimitsByRegion})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &RegionalDistribution_FieldTerminalPath{selector: RegionalDistribution_FieldPathSelectorLimitsByRegion})
	}
	return res
}

func (o *RegionalDistribution) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*RegionalDistribution))
}

func (o *RegionalDistribution) Clone() *RegionalDistribution {
	if o == nil {
		return nil
	}
	result := &RegionalDistribution{}
	if o.Resource == nil {
		result.Resource = nil
	} else if data, err := o.Resource.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Resource = &meta_resource.Reference{}
		if err := result.Resource.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.LimitsByRegion = map[string]int64{}
	for key, sourceValue := range o.LimitsByRegion {
		result.LimitsByRegion[key] = sourceValue
	}
	return result
}

func (o *RegionalDistribution) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *RegionalDistribution) Merge(source *RegionalDistribution) {
	if source.GetResource() != nil {
		if data, err := source.GetResource().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Resource = &meta_resource.Reference{}
			if err := o.Resource.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Resource = nil
	}
	if source.GetLimitsByRegion() != nil {
		if o.LimitsByRegion == nil {
			o.LimitsByRegion = make(map[string]int64, len(source.GetLimitsByRegion()))
		}
		for key, sourceValue := range source.GetLimitsByRegion() {
			o.LimitsByRegion[key] = sourceValue
		}
	}
}

func (o *RegionalDistribution) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*RegionalDistribution))
}
