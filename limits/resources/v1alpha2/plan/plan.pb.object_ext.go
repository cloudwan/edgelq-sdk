// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/plan.proto
// DO NOT EDIT!!!

package plan

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/common"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &common.Allowance{}
	_ = &meta_service.Service{}
)

func (o *Plan) GotenObjectExt() {}

func (o *Plan) MakeFullFieldMask() *Plan_FieldMask {
	return FullPlan_FieldMask()
}

func (o *Plan) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPlan_FieldMask()
}

func (o *Plan) MakeDiffFieldMask(other *Plan) *Plan_FieldMask {
	if o == nil && other == nil {
		return &Plan_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPlan_FieldMask()
	}

	res := &Plan_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorDisplayName})
	}
	if o.GetService().String() != other.GetService().String() {
		res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorService})
	}

	if len(o.GetResourceLimits()) == len(other.GetResourceLimits()) {
		for i, lValue := range o.GetResourceLimits() {
			rValue := other.GetResourceLimits()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorResourceLimits})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorResourceLimits})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Plan_FieldTerminalPath{selector: Plan_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Plan_FieldSubPath{selector: Plan_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Plan) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Plan))
}

func (o *Plan) Clone() *Plan {
	if o == nil {
		return nil
	}
	result := &Plan{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	if o.Service == nil {
		result.Service = nil
	} else if data, err := o.Service.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Service = &meta_service.Reference{}
		if err := result.Service.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResourceLimits = make([]*common.Allowance, len(o.ResourceLimits))
	for i, sourceValue := range o.ResourceLimits {
		result.ResourceLimits[i] = sourceValue.Clone()
	}
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *Plan) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Plan) Merge(source *Plan) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetService() != nil {
		if data, err := source.GetService().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Service = &meta_service.Reference{}
			if err := o.Service.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Service = nil
	}
	for _, sourceValue := range source.GetResourceLimits() {
		exists := false
		for _, currentValue := range o.ResourceLimits {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *common.Allowance
			if sourceValue != nil {
				newDstElement = new(common.Allowance)
				newDstElement.Merge(sourceValue)
			}
			o.ResourceLimits = append(o.ResourceLimits, newDstElement)
		}
	}

	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *Plan) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Plan))
}
