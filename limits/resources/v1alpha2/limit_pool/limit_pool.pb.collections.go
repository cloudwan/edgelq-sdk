// Code generated by protoc-gen-goten-resource
// Resource: LimitPool
// DO NOT EDIT!!!

package limit_pool

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	meta_resource "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/resource"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &meta_resource.Resource{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

type LimitPoolList []*LimitPool

func (l LimitPoolList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*LimitPool))
}

func (l LimitPoolList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(LimitPoolList)...)
}

func (l LimitPoolList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LimitPoolList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l LimitPoolList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*LimitPool)
}

func (l LimitPoolList) Length() int {
	return len(l)
}

type LimitPoolChangeList []*LimitPoolChange

func (l LimitPoolChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*LimitPoolChange))
}

func (l LimitPoolChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(LimitPoolChangeList)...)
}

func (l LimitPoolChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LimitPoolChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l LimitPoolChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*LimitPoolChange)
}

func (l LimitPoolChangeList) Length() int {
	return len(l)
}

type LimitPoolNameList []*Name

func (l LimitPoolNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l LimitPoolNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(LimitPoolNameList)...)
}

func (l LimitPoolNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LimitPoolNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l LimitPoolNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l LimitPoolNameList) Length() int {
	return len(l)
}

type LimitPoolReferenceList []*Reference

func (l LimitPoolReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l LimitPoolReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(LimitPoolReferenceList)...)
}

func (l LimitPoolReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LimitPoolReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l LimitPoolReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l LimitPoolReferenceList) Length() int {
	return len(l)
}

type LimitPoolParentNameList []*ParentName

func (l LimitPoolParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l LimitPoolParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(LimitPoolParentNameList)...)
}

func (l LimitPoolParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LimitPoolParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l LimitPoolParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l LimitPoolParentNameList) Length() int {
	return len(l)
}

type LimitPoolParentReferenceList []*ParentReference

func (l LimitPoolParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l LimitPoolParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(LimitPoolParentReferenceList)...)
}

func (l LimitPoolParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l LimitPoolParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l LimitPoolParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l LimitPoolParentReferenceList) Length() int {
	return len(l)
}

type LimitPoolMap map[Name]*LimitPool

func (m LimitPoolMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m LimitPoolMap) Set(res gotenresource.Resource) {
	tRes := res.(*LimitPool)
	m[*tRes.Name] = tRes
}

func (m LimitPoolMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m LimitPoolMap) Length() int {
	return len(m)
}

func (m LimitPoolMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type LimitPoolChangeMap map[Name]*LimitPoolChange

func (m LimitPoolChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m LimitPoolChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*LimitPoolChange)
	m[*tChange.GetLimitPoolName()] = tChange
}

func (m LimitPoolChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m LimitPoolChangeMap) Length() int {
	return len(m)
}

func (m LimitPoolChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
