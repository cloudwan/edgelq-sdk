// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/limit_pool.proto
// DO NOT EDIT!!!

package limit_pool

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	meta_resource "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/resource"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_organization.Organization{}
	_ = &meta_resource.Resource{}
	_ = &meta_service.Service{}
)

func (o *LimitPool) GotenObjectExt() {}

func (o *LimitPool) MakeFullFieldMask() *LimitPool_FieldMask {
	return FullLimitPool_FieldMask()
}

func (o *LimitPool) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLimitPool_FieldMask()
}

func (o *LimitPool) MakeDiffFieldMask(other *LimitPool) *LimitPool_FieldMask {
	if o == nil && other == nil {
		return &LimitPool_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLimitPool_FieldMask()
	}

	res := &LimitPool_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &LimitPool_FieldTerminalPath{selector: LimitPool_FieldPathSelectorName})
	}
	if o.GetService().String() != other.GetService().String() {
		res.Paths = append(res.Paths, &LimitPool_FieldTerminalPath{selector: LimitPool_FieldPathSelectorService})
	}
	if o.GetResource().String() != other.GetResource().String() {
		res.Paths = append(res.Paths, &LimitPool_FieldTerminalPath{selector: LimitPool_FieldPathSelectorResource})
	}
	if o.GetConfiguredSize() != other.GetConfiguredSize() {
		res.Paths = append(res.Paths, &LimitPool_FieldTerminalPath{selector: LimitPool_FieldPathSelectorConfiguredSize})
	}
	if o.GetActiveSize() != other.GetActiveSize() {
		res.Paths = append(res.Paths, &LimitPool_FieldTerminalPath{selector: LimitPool_FieldPathSelectorActiveSize})
	}
	if o.GetReserved() != other.GetReserved() {
		res.Paths = append(res.Paths, &LimitPool_FieldTerminalPath{selector: LimitPool_FieldPathSelectorReserved})
	}
	if o.GetSource().String() != other.GetSource().String() {
		res.Paths = append(res.Paths, &LimitPool_FieldTerminalPath{selector: LimitPool_FieldPathSelectorSource})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &LimitPool_FieldTerminalPath{selector: LimitPool_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &LimitPool_FieldSubPath{selector: LimitPool_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *LimitPool) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LimitPool))
}

func (o *LimitPool) Clone() *LimitPool {
	if o == nil {
		return nil
	}
	result := &LimitPool{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Service == nil {
		result.Service = nil
	} else if data, err := o.Service.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Service = &meta_service.Reference{}
		if err := result.Service.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Resource == nil {
		result.Resource = nil
	} else if data, err := o.Resource.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Resource = &meta_resource.Reference{}
		if err := result.Resource.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ConfiguredSize = o.ConfiguredSize
	result.ActiveSize = o.ActiveSize
	result.Reserved = o.Reserved
	if o.Source == nil {
		result.Source = nil
	} else if data, err := o.Source.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Source = &Reference{}
		if err := result.Source.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *LimitPool) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LimitPool) Merge(source *LimitPool) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetService() != nil {
		if data, err := source.GetService().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Service = &meta_service.Reference{}
			if err := o.Service.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Service = nil
	}
	if source.GetResource() != nil {
		if data, err := source.GetResource().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Resource = &meta_resource.Reference{}
			if err := o.Resource.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Resource = nil
	}
	o.ConfiguredSize = source.GetConfiguredSize()
	o.ActiveSize = source.GetActiveSize()
	o.Reserved = source.GetReserved()
	if source.GetSource() != nil {
		if data, err := source.GetSource().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Source = &Reference{}
			if err := o.Source.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Source = nil
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *LimitPool) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LimitPool))
}
