// Code generated by protoc-gen-goten-go
// File: edgelq/limits/proto/v1alpha2/accepted_plan.proto
// DO NOT EDIT!!!

package accepted_plan

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	common "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/common"
	plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &common.Allowance{}
	_ = &plan.Plan{}
	_ = &meta_service.Service{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AcceptedPlan shows a plan accepted by assigner (system or organization)
// for project, organization and system - with all additional information
// like extensions or regional distributions.
// It is in relation 1-1 with PlanAssignment, BUT:
// * PlanAssignment is read-only and represents information for Assignee.
// Name pattern indicates to WHOM plan is assigned.
// * AcceptedPlan contains accepted configuration and represents information
// for assigner. Name pattern indicates WHO ASSIGNED a plan. It is modifiable,
// BUT modifications of accepted plans may result in increased usage of
// allowed limit pools - Organization/System cannot accept plans to sub-entities
// without limits (however, system is allowed to assign plan to itself without
// limits, which makes system admin fully responsible).
type AcceptedPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of AcceptedPlan
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Plan with resource limits
	Plan *plan.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=plan,proto3" json:"plan,omitempty" firestore:"plan"`
	// Service indicates by plan.
	Service *meta_service.Reference `protobuf:"bytes,3,opt,customtype=Reference,name=service,proto3" json:"service,omitempty" firestore:"service"`
	// Optional extensions over standard plan
	Extensions []*common.Allowance `protobuf:"bytes,4,rep,name=extensions,proto3" json:"extensions,omitempty" firestore:"extensions"`
	// Distribution of limits by regions. It does not need
	// to be populated by user in Create/Update requests -
	// system automatically distributes limits across regions
	// equally. Returned AcceptedPlan instance from Create/Update
	// will contain this field populated.
	// If user wants to have some specific resource distributed in
	// certain way, they can do it by partially populating this field
	// too. System will distribute automatically only remaining numbers.
	RegionalDistributions []*common.RegionalDistribution `protobuf:"bytes,5,rep,name=regional_distributions,json=regionalDistributions,proto3" json:"regional_distributions,omitempty" firestore:"regionalDistributions"`
	// Plan assignee
	Assignee *AcceptedPlan_Assignee `protobuf:"bytes,6,opt,name=assignee,proto3" json:"assignee,omitempty" firestore:"assignee"`
	// Metadata
	Metadata *ntt_meta.Meta `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
}

func (m *AcceptedPlan) Reset() {
	*m = AcceptedPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_accepted_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AcceptedPlan) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AcceptedPlan) ProtoMessage() {}

func (m *AcceptedPlan) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_accepted_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AcceptedPlan) GotenMessage() {}

// Deprecated, Use AcceptedPlan.ProtoReflect.Descriptor instead.
func (*AcceptedPlan) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_accepted_plan_proto_rawDescGZIP(), []int{0}
}

func (m *AcceptedPlan) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AcceptedPlan) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AcceptedPlan) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AcceptedPlan) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AcceptedPlan) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *AcceptedPlan) GetPlan() *plan.Reference {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *AcceptedPlan) GetService() *meta_service.Reference {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *AcceptedPlan) GetExtensions() []*common.Allowance {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *AcceptedPlan) GetRegionalDistributions() []*common.RegionalDistribution {
	if m != nil {
		return m.RegionalDistributions
	}
	return nil
}

func (m *AcceptedPlan) GetAssignee() *AcceptedPlan_Assignee {
	if m != nil {
		return m.Assignee
	}
	return nil
}

func (m *AcceptedPlan) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *AcceptedPlan) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "AcceptedPlan"))
	}
	m.Name = fv
}

func (m *AcceptedPlan) SetPlan(fv *plan.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Plan", "AcceptedPlan"))
	}
	m.Plan = fv
}

func (m *AcceptedPlan) SetService(fv *meta_service.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Service", "AcceptedPlan"))
	}
	m.Service = fv
}

func (m *AcceptedPlan) SetExtensions(fv []*common.Allowance) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Extensions", "AcceptedPlan"))
	}
	m.Extensions = fv
}

func (m *AcceptedPlan) SetRegionalDistributions(fv []*common.RegionalDistribution) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionalDistributions", "AcceptedPlan"))
	}
	m.RegionalDistributions = fv
}

func (m *AcceptedPlan) SetAssignee(fv *AcceptedPlan_Assignee) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Assignee", "AcceptedPlan"))
	}
	m.Assignee = fv
}

func (m *AcceptedPlan) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "AcceptedPlan"))
	}
	m.Metadata = fv
}

// Assignee indicates for whom plan was accepted for.
// In case of child project/org deletion, accepted plan will be deleted too,
// which will result in return of all limits.
type AcceptedPlan_Assignee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Types that are valid to be assigned to Assignee:
	//	*AcceptedPlan_Assignee_ProjectAssignee
	//	*AcceptedPlan_Assignee_OrganizationAssignee
	//	*AcceptedPlan_Assignee_SystemAssignee
	Assignee isAcceptedPlan_Assignee_Assignee `protobuf_oneof:"assignee"`
}

func (m *AcceptedPlan_Assignee) Reset() {
	*m = AcceptedPlan_Assignee{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_accepted_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AcceptedPlan_Assignee) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AcceptedPlan_Assignee) ProtoMessage() {}

func (m *AcceptedPlan_Assignee) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_accepted_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AcceptedPlan_Assignee) GotenMessage() {}

// Deprecated, Use AcceptedPlan_Assignee.ProtoReflect.Descriptor instead.
func (*AcceptedPlan_Assignee) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_accepted_plan_proto_rawDescGZIP(), []int{0, 0}
}

func (m *AcceptedPlan_Assignee) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AcceptedPlan_Assignee) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AcceptedPlan_Assignee) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AcceptedPlan_Assignee) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type isAcceptedPlan_Assignee_Assignee interface {
	isAcceptedPlan_Assignee_Assignee()
}

type AcceptedPlan_Assignee_ProjectAssignee struct {
	// Project for whom plan is for.
	ProjectAssignee *iam_project.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=project_assignee,json=projectAssignee,proto3,oneof" firestore:"projectAssignee"`
}
type AcceptedPlan_Assignee_OrganizationAssignee struct {
	// Organization for whom plan is for.
	OrganizationAssignee *iam_organization.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=organization_assignee,json=organizationAssignee,proto3,oneof" firestore:"organizationAssignee"`
}
type AcceptedPlan_Assignee_SystemAssignee struct {
	// If true, it means plan is for system itself.
	SystemAssignee bool `protobuf:"varint,3,opt,name=system_assignee,json=systemAssignee,proto3,oneof" firestore:"systemAssignee"`
}

func (*AcceptedPlan_Assignee_ProjectAssignee) isAcceptedPlan_Assignee_Assignee()      {}
func (*AcceptedPlan_Assignee_OrganizationAssignee) isAcceptedPlan_Assignee_Assignee() {}
func (*AcceptedPlan_Assignee_SystemAssignee) isAcceptedPlan_Assignee_Assignee()       {}
func (m *AcceptedPlan_Assignee) GetAssignee() isAcceptedPlan_Assignee_Assignee {
	if m != nil {
		return m.Assignee
	}
	return nil
}
func (m *AcceptedPlan_Assignee) GetProjectAssignee() *iam_project.Reference {
	if x, ok := m.GetAssignee().(*AcceptedPlan_Assignee_ProjectAssignee); ok {
		return x.ProjectAssignee
	}
	return nil
}
func (m *AcceptedPlan_Assignee) GetOrganizationAssignee() *iam_organization.Reference {
	if x, ok := m.GetAssignee().(*AcceptedPlan_Assignee_OrganizationAssignee); ok {
		return x.OrganizationAssignee
	}
	return nil
}
func (m *AcceptedPlan_Assignee) GetSystemAssignee() bool {
	if x, ok := m.GetAssignee().(*AcceptedPlan_Assignee_SystemAssignee); ok {
		return x.SystemAssignee
	}
	return false
}
func (m *AcceptedPlan_Assignee) SetAssignee(ofv isAcceptedPlan_Assignee_Assignee) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "isAcceptedPlan_Assignee_Assignee", "AcceptedPlan_Assignee"))
	}
	m.Assignee = ofv
}
func (m *AcceptedPlan_Assignee) SetProjectAssignee(fv *iam_project.Reference) {
	m.SetAssignee(&AcceptedPlan_Assignee_ProjectAssignee{ProjectAssignee: fv})
}
func (m *AcceptedPlan_Assignee) SetOrganizationAssignee(fv *iam_organization.Reference) {
	m.SetAssignee(&AcceptedPlan_Assignee_OrganizationAssignee{OrganizationAssignee: fv})
}
func (m *AcceptedPlan_Assignee) SetSystemAssignee(fv bool) {
	m.SetAssignee(&AcceptedPlan_Assignee_SystemAssignee{SystemAssignee: fv})
}

var edgelq_limits_proto_v1alpha2_accepted_plan_proto preflect.FileDescriptor

var edgelq_limits_proto_v1alpha2_accepted_plan_proto_rawDesc = []byte{
	0x0a, 0x30, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69,
	0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x0a, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0xb2, 0xda, 0x21, 0x10, 0x0a, 0x0e, 0x0a, 0x0c, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2,
	0xda, 0x21, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61,
	0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x25, 0xf0, 0xd9, 0x21, 0x01, 0xb2, 0xda, 0x21, 0x1d, 0x12, 0x1b, 0x0a, 0x19,
	0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x60, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x65, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xf2, 0x01, 0x0a, 0x08, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x22, 0xb2, 0xda, 0x21, 0x1e, 0x12, 0x1c, 0x0a, 0x18, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x10, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xb2, 0xda, 0x21, 0x23, 0x12, 0x21, 0x0a, 0x1d,
	0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x48,
	0x00, 0x52, 0x14, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x3a, 0x83,
	0x05, 0xea, 0x41, 0x7b, 0x0a, 0x1e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x7d, 0x12, 0x3a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x2f,
	0x7b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x7d, 0x92,
	0xd9, 0x21, 0xd7, 0x01, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x12, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x1a, 0x12, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4e, 0x6f, 0x6e, 0x65, 0x1a, 0x1d, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x29, 0x08, 0x02, 0x12,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x06, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12,
	0x09, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x4a, 0x51, 0x08, 0x03, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x06, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x09, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x65, 0x12, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x05, 0xb2, 0xdf, 0x21, 0xc1, 0x01,
	0x0a, 0xbe, 0x01, 0x0a, 0x56, 0x0a, 0x06, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x2c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x2f,
	0x2d, 0x1a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x2f, 0x2d, 0x20, 0x01, 0x2a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x1b, 0x0a, 0x19, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x1e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x18, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x09, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xe2, 0xde, 0x21,
	0x02, 0x08, 0x01, 0xc2, 0x85, 0x2c, 0x4d, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x04, 0x70,
	0x6c, 0x61, 0x6e, 0x22, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x16, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x8b, 0x03, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x55,
	0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x42, 0x11, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x3b, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0xd2, 0x84, 0xd1, 0x02, 0x49, 0x0a, 0x0d, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x38, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xa2, 0x80, 0xd1, 0x02, 0x57, 0x0a, 0x14, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_limits_proto_v1alpha2_accepted_plan_proto_rawDescOnce sync.Once
	edgelq_limits_proto_v1alpha2_accepted_plan_proto_rawDescData = edgelq_limits_proto_v1alpha2_accepted_plan_proto_rawDesc
)

func edgelq_limits_proto_v1alpha2_accepted_plan_proto_rawDescGZIP() []byte {
	edgelq_limits_proto_v1alpha2_accepted_plan_proto_rawDescOnce.Do(func() {
		edgelq_limits_proto_v1alpha2_accepted_plan_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_limits_proto_v1alpha2_accepted_plan_proto_rawDescData)
	})
	return edgelq_limits_proto_v1alpha2_accepted_plan_proto_rawDescData
}

var edgelq_limits_proto_v1alpha2_accepted_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var edgelq_limits_proto_v1alpha2_accepted_plan_proto_goTypes = []interface{}{
	(*AcceptedPlan)(nil),                // 0: ntt.limits.v1alpha2.AcceptedPlan
	(*AcceptedPlan_Assignee)(nil),       // 1: ntt.limits.v1alpha2.AcceptedPlan.Assignee
	(*common.Allowance)(nil),            // 2: ntt.limits.v1alpha2.Allowance
	(*common.RegionalDistribution)(nil), // 3: ntt.limits.v1alpha2.RegionalDistribution
	(*ntt_meta.Meta)(nil),               // 4: ntt.types.Meta
}
var edgelq_limits_proto_v1alpha2_accepted_plan_proto_depIdxs = []int32{
	2, // 0: ntt.limits.v1alpha2.AcceptedPlan.extensions:type_name -> ntt.limits.v1alpha2.Allowance
	3, // 1: ntt.limits.v1alpha2.AcceptedPlan.regional_distributions:type_name -> ntt.limits.v1alpha2.RegionalDistribution
	1, // 2: ntt.limits.v1alpha2.AcceptedPlan.assignee:type_name -> ntt.limits.v1alpha2.AcceptedPlan.Assignee
	4, // 3: ntt.limits.v1alpha2.AcceptedPlan.metadata:type_name -> ntt.types.Meta
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { edgelq_limits_proto_v1alpha2_accepted_plan_proto_init() }
func edgelq_limits_proto_v1alpha2_accepted_plan_proto_init() {
	if edgelq_limits_proto_v1alpha2_accepted_plan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_limits_proto_v1alpha2_accepted_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptedPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_accepted_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptedPlan_Assignee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	edgelq_limits_proto_v1alpha2_accepted_plan_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AcceptedPlan_Assignee_ProjectAssignee)(nil),
		(*AcceptedPlan_Assignee_OrganizationAssignee)(nil),
		(*AcceptedPlan_Assignee_SystemAssignee)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_limits_proto_v1alpha2_accepted_plan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_limits_proto_v1alpha2_accepted_plan_proto_goTypes,
		DependencyIndexes: edgelq_limits_proto_v1alpha2_accepted_plan_proto_depIdxs,
		MessageInfos:      edgelq_limits_proto_v1alpha2_accepted_plan_proto_msgTypes,
	}.Build()
	edgelq_limits_proto_v1alpha2_accepted_plan_proto = out.File
	edgelq_limits_proto_v1alpha2_accepted_plan_proto_rawDesc = nil
	edgelq_limits_proto_v1alpha2_accepted_plan_proto_goTypes = nil
	edgelq_limits_proto_v1alpha2_accepted_plan_proto_depIdxs = nil
}
