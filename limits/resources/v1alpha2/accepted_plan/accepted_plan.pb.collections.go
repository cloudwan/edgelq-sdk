// Code generated by protoc-gen-goten-resource
// Resource: AcceptedPlan
// DO NOT EDIT!!!

package accepted_plan

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	common "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/common"
	plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &common.Allowance{}
	_ = &plan.Plan{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

type AcceptedPlanList []*AcceptedPlan

func (l AcceptedPlanList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*AcceptedPlan))
}

func (l AcceptedPlanList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(AcceptedPlanList)...)
}

func (l AcceptedPlanList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AcceptedPlanList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l AcceptedPlanList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*AcceptedPlan)
}

func (l AcceptedPlanList) Length() int {
	return len(l)
}

type AcceptedPlanChangeList []*AcceptedPlanChange

func (l AcceptedPlanChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*AcceptedPlanChange))
}

func (l AcceptedPlanChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(AcceptedPlanChangeList)...)
}

func (l AcceptedPlanChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AcceptedPlanChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l AcceptedPlanChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*AcceptedPlanChange)
}

func (l AcceptedPlanChangeList) Length() int {
	return len(l)
}

type AcceptedPlanNameList []*Name

func (l AcceptedPlanNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l AcceptedPlanNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(AcceptedPlanNameList)...)
}

func (l AcceptedPlanNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AcceptedPlanNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l AcceptedPlanNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l AcceptedPlanNameList) Length() int {
	return len(l)
}

type AcceptedPlanReferenceList []*Reference

func (l AcceptedPlanReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l AcceptedPlanReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(AcceptedPlanReferenceList)...)
}

func (l AcceptedPlanReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AcceptedPlanReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l AcceptedPlanReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l AcceptedPlanReferenceList) Length() int {
	return len(l)
}

type AcceptedPlanParentNameList []*ParentName

func (l AcceptedPlanParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l AcceptedPlanParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(AcceptedPlanParentNameList)...)
}

func (l AcceptedPlanParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AcceptedPlanParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l AcceptedPlanParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l AcceptedPlanParentNameList) Length() int {
	return len(l)
}

type AcceptedPlanParentReferenceList []*ParentReference

func (l AcceptedPlanParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l AcceptedPlanParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(AcceptedPlanParentReferenceList)...)
}

func (l AcceptedPlanParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AcceptedPlanParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l AcceptedPlanParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l AcceptedPlanParentReferenceList) Length() int {
	return len(l)
}

type AcceptedPlanMap map[Name]*AcceptedPlan

func (m AcceptedPlanMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m AcceptedPlanMap) Set(res gotenresource.Resource) {
	tRes := res.(*AcceptedPlan)
	m[*tRes.Name] = tRes
}

func (m AcceptedPlanMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m AcceptedPlanMap) Length() int {
	return len(m)
}

func (m AcceptedPlanMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type AcceptedPlanChangeMap map[Name]*AcceptedPlanChange

func (m AcceptedPlanChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m AcceptedPlanChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*AcceptedPlanChange)
	m[*tChange.GetAcceptedPlanName()] = tChange
}

func (m AcceptedPlanChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m AcceptedPlanChangeMap) Length() int {
	return len(m)
}

func (m AcceptedPlanChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
