// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/accepted_plan.proto
// DO NOT EDIT!!!

package accepted_plan

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	common "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/common"
	plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &common.Allowance{}
	_ = &plan.Plan{}
	_ = &meta_service.Service{}
)

func (o *AcceptedPlan) GotenObjectExt() {}

func (o *AcceptedPlan) MakeFullFieldMask() *AcceptedPlan_FieldMask {
	return FullAcceptedPlan_FieldMask()
}

func (o *AcceptedPlan) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAcceptedPlan_FieldMask()
}

func (o *AcceptedPlan) MakeDiffFieldMask(other *AcceptedPlan) *AcceptedPlan_FieldMask {
	if o == nil && other == nil {
		return &AcceptedPlan_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAcceptedPlan_FieldMask()
	}

	res := &AcceptedPlan_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &AcceptedPlan_FieldTerminalPath{selector: AcceptedPlan_FieldPathSelectorName})
	}
	if o.GetPlan().String() != other.GetPlan().String() {
		res.Paths = append(res.Paths, &AcceptedPlan_FieldTerminalPath{selector: AcceptedPlan_FieldPathSelectorPlan})
	}
	if o.GetService().String() != other.GetService().String() {
		res.Paths = append(res.Paths, &AcceptedPlan_FieldTerminalPath{selector: AcceptedPlan_FieldPathSelectorService})
	}

	if len(o.GetExtensions()) == len(other.GetExtensions()) {
		for i, lValue := range o.GetExtensions() {
			rValue := other.GetExtensions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &AcceptedPlan_FieldTerminalPath{selector: AcceptedPlan_FieldPathSelectorExtensions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &AcceptedPlan_FieldTerminalPath{selector: AcceptedPlan_FieldPathSelectorExtensions})
	}

	if len(o.GetRegionalDistributions()) == len(other.GetRegionalDistributions()) {
		for i, lValue := range o.GetRegionalDistributions() {
			rValue := other.GetRegionalDistributions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &AcceptedPlan_FieldTerminalPath{selector: AcceptedPlan_FieldPathSelectorRegionalDistributions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &AcceptedPlan_FieldTerminalPath{selector: AcceptedPlan_FieldPathSelectorRegionalDistributions})
	}
	{
		subMask := o.GetAssignee().MakeDiffFieldMask(other.GetAssignee())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptedPlan_FieldTerminalPath{selector: AcceptedPlan_FieldPathSelectorAssignee})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptedPlan_FieldSubPath{selector: AcceptedPlan_FieldPathSelectorAssignee, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptedPlan_FieldTerminalPath{selector: AcceptedPlan_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptedPlan_FieldSubPath{selector: AcceptedPlan_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *AcceptedPlan) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AcceptedPlan))
}

func (o *AcceptedPlan) Clone() *AcceptedPlan {
	if o == nil {
		return nil
	}
	result := &AcceptedPlan{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Plan == nil {
		result.Plan = nil
	} else if data, err := o.Plan.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Plan = &plan.Reference{}
		if err := result.Plan.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Service == nil {
		result.Service = nil
	} else if data, err := o.Service.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Service = &meta_service.Reference{}
		if err := result.Service.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Extensions = make([]*common.Allowance, len(o.Extensions))
	for i, sourceValue := range o.Extensions {
		result.Extensions[i] = sourceValue.Clone()
	}
	result.RegionalDistributions = make([]*common.RegionalDistribution, len(o.RegionalDistributions))
	for i, sourceValue := range o.RegionalDistributions {
		result.RegionalDistributions[i] = sourceValue.Clone()
	}
	result.Assignee = o.Assignee.Clone()
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *AcceptedPlan) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AcceptedPlan) Merge(source *AcceptedPlan) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetPlan() != nil {
		if data, err := source.GetPlan().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Plan = &plan.Reference{}
			if err := o.Plan.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Plan = nil
	}
	if source.GetService() != nil {
		if data, err := source.GetService().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Service = &meta_service.Reference{}
			if err := o.Service.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Service = nil
	}
	for _, sourceValue := range source.GetExtensions() {
		exists := false
		for _, currentValue := range o.Extensions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *common.Allowance
			if sourceValue != nil {
				newDstElement = new(common.Allowance)
				newDstElement.Merge(sourceValue)
			}
			o.Extensions = append(o.Extensions, newDstElement)
		}
	}

	for _, sourceValue := range source.GetRegionalDistributions() {
		exists := false
		for _, currentValue := range o.RegionalDistributions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *common.RegionalDistribution
			if sourceValue != nil {
				newDstElement = new(common.RegionalDistribution)
				newDstElement.Merge(sourceValue)
			}
			o.RegionalDistributions = append(o.RegionalDistributions, newDstElement)
		}
	}

	if source.GetAssignee() != nil {
		if o.Assignee == nil {
			o.Assignee = new(AcceptedPlan_Assignee)
		}
		o.Assignee.Merge(source.GetAssignee())
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *AcceptedPlan) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AcceptedPlan))
}

func (o *AcceptedPlan_Assignee) GotenObjectExt() {}

func (o *AcceptedPlan_Assignee) MakeFullFieldMask() *AcceptedPlan_Assignee_FieldMask {
	return FullAcceptedPlan_Assignee_FieldMask()
}

func (o *AcceptedPlan_Assignee) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAcceptedPlan_Assignee_FieldMask()
}

func (o *AcceptedPlan_Assignee) MakeDiffFieldMask(other *AcceptedPlan_Assignee) *AcceptedPlan_Assignee_FieldMask {
	if o == nil && other == nil {
		return &AcceptedPlan_Assignee_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAcceptedPlan_Assignee_FieldMask()
	}

	res := &AcceptedPlan_Assignee_FieldMask{}
	if o.GetProjectAssignee().String() != other.GetProjectAssignee().String() {
		res.Paths = append(res.Paths, &AcceptedPlanAssignee_FieldTerminalPath{selector: AcceptedPlanAssignee_FieldPathSelectorProjectAssignee})
	}
	if o.GetOrganizationAssignee().String() != other.GetOrganizationAssignee().String() {
		res.Paths = append(res.Paths, &AcceptedPlanAssignee_FieldTerminalPath{selector: AcceptedPlanAssignee_FieldPathSelectorOrganizationAssignee})
	}
	if o.GetSystemAssignee() != other.GetSystemAssignee() {
		res.Paths = append(res.Paths, &AcceptedPlanAssignee_FieldTerminalPath{selector: AcceptedPlanAssignee_FieldPathSelectorSystemAssignee})
	}
	return res
}

func (o *AcceptedPlan_Assignee) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AcceptedPlan_Assignee))
}

func (o *AcceptedPlan_Assignee) Clone() *AcceptedPlan_Assignee {
	if o == nil {
		return nil
	}
	result := &AcceptedPlan_Assignee{}
	if o, ok := o.Assignee.(*AcceptedPlan_Assignee_ProjectAssignee); ok {
		result.Assignee = (*AcceptedPlan_Assignee_ProjectAssignee)(nil)
		if o != nil {
			result.Assignee = &AcceptedPlan_Assignee_ProjectAssignee{}
			result := result.Assignee.(*AcceptedPlan_Assignee_ProjectAssignee)
			if o.ProjectAssignee == nil {
				result.ProjectAssignee = nil
			} else if data, err := o.ProjectAssignee.ProtoString(); err != nil {
				panic(err)
			} else {
				result.ProjectAssignee = &iam_project.Reference{}
				if err := result.ProjectAssignee.ParseProtoString(data); err != nil {
					panic(err)
				}
			}
		}
	}
	if o, ok := o.Assignee.(*AcceptedPlan_Assignee_OrganizationAssignee); ok {
		result.Assignee = (*AcceptedPlan_Assignee_OrganizationAssignee)(nil)
		if o != nil {
			result.Assignee = &AcceptedPlan_Assignee_OrganizationAssignee{}
			result := result.Assignee.(*AcceptedPlan_Assignee_OrganizationAssignee)
			if o.OrganizationAssignee == nil {
				result.OrganizationAssignee = nil
			} else if data, err := o.OrganizationAssignee.ProtoString(); err != nil {
				panic(err)
			} else {
				result.OrganizationAssignee = &iam_organization.Reference{}
				if err := result.OrganizationAssignee.ParseProtoString(data); err != nil {
					panic(err)
				}
			}
		}
	}
	if o, ok := o.Assignee.(*AcceptedPlan_Assignee_SystemAssignee); ok {
		result.Assignee = (*AcceptedPlan_Assignee_SystemAssignee)(nil)
		if o != nil {
			result.Assignee = &AcceptedPlan_Assignee_SystemAssignee{}
			result := result.Assignee.(*AcceptedPlan_Assignee_SystemAssignee)
			result.SystemAssignee = o.SystemAssignee
		}
	}
	return result
}

func (o *AcceptedPlan_Assignee) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AcceptedPlan_Assignee) Merge(source *AcceptedPlan_Assignee) {
	if source, ok := source.GetAssignee().(*AcceptedPlan_Assignee_ProjectAssignee); ok {
		if dstOneOf, ok := o.Assignee.(*AcceptedPlan_Assignee_ProjectAssignee); !ok || dstOneOf == nil {
			o.Assignee = &AcceptedPlan_Assignee_ProjectAssignee{}
		}
		if source != nil {
			o := o.Assignee.(*AcceptedPlan_Assignee_ProjectAssignee)
			if source.ProjectAssignee != nil {
				if data, err := source.ProjectAssignee.ProtoString(); err != nil {
					panic(err)
				} else {
					o.ProjectAssignee = &iam_project.Reference{}
					if err := o.ProjectAssignee.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			} else {
				o.ProjectAssignee = nil
			}
		}
	}
	if source, ok := source.GetAssignee().(*AcceptedPlan_Assignee_OrganizationAssignee); ok {
		if dstOneOf, ok := o.Assignee.(*AcceptedPlan_Assignee_OrganizationAssignee); !ok || dstOneOf == nil {
			o.Assignee = &AcceptedPlan_Assignee_OrganizationAssignee{}
		}
		if source != nil {
			o := o.Assignee.(*AcceptedPlan_Assignee_OrganizationAssignee)
			if source.OrganizationAssignee != nil {
				if data, err := source.OrganizationAssignee.ProtoString(); err != nil {
					panic(err)
				} else {
					o.OrganizationAssignee = &iam_organization.Reference{}
					if err := o.OrganizationAssignee.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			} else {
				o.OrganizationAssignee = nil
			}
		}
	}
	if source, ok := source.GetAssignee().(*AcceptedPlan_Assignee_SystemAssignee); ok {
		if dstOneOf, ok := o.Assignee.(*AcceptedPlan_Assignee_SystemAssignee); !ok || dstOneOf == nil {
			o.Assignee = &AcceptedPlan_Assignee_SystemAssignee{}
		}
		if source != nil {
			o := o.Assignee.(*AcceptedPlan_Assignee_SystemAssignee)
			o.SystemAssignee = source.SystemAssignee
		}
	}
}

func (o *AcceptedPlan_Assignee) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AcceptedPlan_Assignee))
}
