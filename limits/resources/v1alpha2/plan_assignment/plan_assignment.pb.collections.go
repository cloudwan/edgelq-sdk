// Code generated by protoc-gen-goten-resource
// Resource: PlanAssignment
// DO NOT EDIT!!!

package plan_assignment

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	accepted_plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/accepted_plan"
	common "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/common"
	plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &accepted_plan.AcceptedPlan{}
	_ = &common.Allowance{}
	_ = &plan.Plan{}
	_ = &meta_service.Service{}
	_ = &meta.Meta{}
)

type PlanAssignmentList []*PlanAssignment

func (l PlanAssignmentList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*PlanAssignment))
}

func (l PlanAssignmentList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(PlanAssignmentList)...)
}

func (l PlanAssignmentList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PlanAssignmentList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l PlanAssignmentList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*PlanAssignment)
}

func (l PlanAssignmentList) Length() int {
	return len(l)
}

type PlanAssignmentChangeList []*PlanAssignmentChange

func (l PlanAssignmentChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*PlanAssignmentChange))
}

func (l PlanAssignmentChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(PlanAssignmentChangeList)...)
}

func (l PlanAssignmentChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PlanAssignmentChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l PlanAssignmentChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*PlanAssignmentChange)
}

func (l PlanAssignmentChangeList) Length() int {
	return len(l)
}

type PlanAssignmentNameList []*Name

func (l PlanAssignmentNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l PlanAssignmentNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(PlanAssignmentNameList)...)
}

func (l PlanAssignmentNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PlanAssignmentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l PlanAssignmentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l PlanAssignmentNameList) Length() int {
	return len(l)
}

type PlanAssignmentReferenceList []*Reference

func (l PlanAssignmentReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l PlanAssignmentReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(PlanAssignmentReferenceList)...)
}

func (l PlanAssignmentReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PlanAssignmentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l PlanAssignmentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l PlanAssignmentReferenceList) Length() int {
	return len(l)
}

type PlanAssignmentParentNameList []*ParentName

func (l PlanAssignmentParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l PlanAssignmentParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(PlanAssignmentParentNameList)...)
}

func (l PlanAssignmentParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PlanAssignmentParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l PlanAssignmentParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l PlanAssignmentParentNameList) Length() int {
	return len(l)
}

type PlanAssignmentParentReferenceList []*ParentReference

func (l PlanAssignmentParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l PlanAssignmentParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(PlanAssignmentParentReferenceList)...)
}

func (l PlanAssignmentParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PlanAssignmentParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l PlanAssignmentParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l PlanAssignmentParentReferenceList) Length() int {
	return len(l)
}

type PlanAssignmentMap map[Name]*PlanAssignment

func (m PlanAssignmentMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m PlanAssignmentMap) Set(res gotenresource.Resource) {
	tRes := res.(*PlanAssignment)
	m[*tRes.Name] = tRes
}

func (m PlanAssignmentMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m PlanAssignmentMap) Length() int {
	return len(m)
}

func (m PlanAssignmentMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type PlanAssignmentChangeMap map[Name]*PlanAssignmentChange

func (m PlanAssignmentChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m PlanAssignmentChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*PlanAssignmentChange)
	m[*tChange.GetPlanAssignmentName()] = tChange
}

func (m PlanAssignmentChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m PlanAssignmentChangeMap) Length() int {
	return len(m)
}

func (m PlanAssignmentChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
