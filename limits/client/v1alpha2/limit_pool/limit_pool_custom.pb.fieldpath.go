// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/limit_pool_custom.proto
// DO NOT EDIT!!!

package limit_pool_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	limit_pool "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/limit_pool"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &limit_pool.LimitPool{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type MigrateLimitPoolSourceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() MigrateLimitPoolSourceRequest_FieldPathSelector
	Get(source *MigrateLimitPoolSourceRequest) []interface{}
	GetSingle(source *MigrateLimitPoolSourceRequest) (interface{}, bool)
	ClearValue(item *MigrateLimitPoolSourceRequest)

	// Those methods build corresponding MigrateLimitPoolSourceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) MigrateLimitPoolSourceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) MigrateLimitPoolSourceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) MigrateLimitPoolSourceRequest_FieldPathArrayItemValue
}

type MigrateLimitPoolSourceRequest_FieldPathSelector int32

const (
	MigrateLimitPoolSourceRequest_FieldPathSelectorName MigrateLimitPoolSourceRequest_FieldPathSelector = 0
)

func (s MigrateLimitPoolSourceRequest_FieldPathSelector) String() string {
	switch s {
	case MigrateLimitPoolSourceRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitPoolSourceRequest: %d", s))
	}
}

func BuildMigrateLimitPoolSourceRequest_FieldPath(fp gotenobject.RawFieldPath) (MigrateLimitPoolSourceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object MigrateLimitPoolSourceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &MigrateLimitPoolSourceRequest_FieldTerminalPath{selector: MigrateLimitPoolSourceRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object MigrateLimitPoolSourceRequest", fp)
}

func ParseMigrateLimitPoolSourceRequest_FieldPath(rawField string) (MigrateLimitPoolSourceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildMigrateLimitPoolSourceRequest_FieldPath(fp)
}

func MustParseMigrateLimitPoolSourceRequest_FieldPath(rawField string) MigrateLimitPoolSourceRequest_FieldPath {
	fp, err := ParseMigrateLimitPoolSourceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type MigrateLimitPoolSourceRequest_FieldTerminalPath struct {
	selector MigrateLimitPoolSourceRequest_FieldPathSelector
}

var _ MigrateLimitPoolSourceRequest_FieldPath = (*MigrateLimitPoolSourceRequest_FieldTerminalPath)(nil)

func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) Selector() MigrateLimitPoolSourceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source MigrateLimitPoolSourceRequest
func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) Get(source *MigrateLimitPoolSourceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case MigrateLimitPoolSourceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for MigrateLimitPoolSourceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*MigrateLimitPoolSourceRequest))
}

// GetSingle returns value pointed by specific field of from source MigrateLimitPoolSourceRequest
func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) GetSingle(source *MigrateLimitPoolSourceRequest) (interface{}, bool) {
	switch fp.selector {
	case MigrateLimitPoolSourceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitPoolSourceRequest: %d", fp.selector))
	}
}

func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*MigrateLimitPoolSourceRequest))
}

// GetDefault returns a default value of the field type
func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case MigrateLimitPoolSourceRequest_FieldPathSelectorName:
		return (*limit_pool.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitPoolSourceRequest: %d", fp.selector))
	}
}

func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) ClearValue(item *MigrateLimitPoolSourceRequest) {
	if item != nil {
		switch fp.selector {
		case MigrateLimitPoolSourceRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for MigrateLimitPoolSourceRequest: %d", fp.selector))
		}
	}
}

func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*MigrateLimitPoolSourceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == MigrateLimitPoolSourceRequest_FieldPathSelectorName
}

func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) WithIValue(value interface{}) MigrateLimitPoolSourceRequest_FieldPathValue {
	switch fp.selector {
	case MigrateLimitPoolSourceRequest_FieldPathSelectorName:
		return &MigrateLimitPoolSourceRequest_FieldTerminalPathValue{MigrateLimitPoolSourceRequest_FieldTerminalPath: *fp, value: value.(*limit_pool.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitPoolSourceRequest: %d", fp.selector))
	}
}

func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) MigrateLimitPoolSourceRequest_FieldPathArrayOfValues {
	fpaov := &MigrateLimitPoolSourceRequest_FieldTerminalPathArrayOfValues{MigrateLimitPoolSourceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case MigrateLimitPoolSourceRequest_FieldPathSelectorName:
		return &MigrateLimitPoolSourceRequest_FieldTerminalPathArrayOfValues{MigrateLimitPoolSourceRequest_FieldTerminalPath: *fp, values: values.([]*limit_pool.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitPoolSourceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) MigrateLimitPoolSourceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitPoolSourceRequest: %d", fp.selector))
	}
}

func (fp *MigrateLimitPoolSourceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// MigrateLimitPoolSourceRequest_FieldPathValue allows storing values for MigrateLimitPoolSourceRequest fields according to their type
type MigrateLimitPoolSourceRequest_FieldPathValue interface {
	MigrateLimitPoolSourceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **MigrateLimitPoolSourceRequest)
	CompareWith(*MigrateLimitPoolSourceRequest) (cmp int, comparable bool)
}

func ParseMigrateLimitPoolSourceRequest_FieldPathValue(pathStr, valueStr string) (MigrateLimitPoolSourceRequest_FieldPathValue, error) {
	fp, err := ParseMigrateLimitPoolSourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MigrateLimitPoolSourceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(MigrateLimitPoolSourceRequest_FieldPathValue), nil
}

func MustParseMigrateLimitPoolSourceRequest_FieldPathValue(pathStr, valueStr string) MigrateLimitPoolSourceRequest_FieldPathValue {
	fpv, err := ParseMigrateLimitPoolSourceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type MigrateLimitPoolSourceRequest_FieldTerminalPathValue struct {
	MigrateLimitPoolSourceRequest_FieldTerminalPath
	value interface{}
}

var _ MigrateLimitPoolSourceRequest_FieldPathValue = (*MigrateLimitPoolSourceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'MigrateLimitPoolSourceRequest' as interface{}
func (fpv *MigrateLimitPoolSourceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *MigrateLimitPoolSourceRequest_FieldTerminalPathValue) AsNameValue() (*limit_pool.Reference, bool) {
	res, ok := fpv.value.(*limit_pool.Reference)
	return res, ok
}

// SetTo stores value for selected field for object MigrateLimitPoolSourceRequest
func (fpv *MigrateLimitPoolSourceRequest_FieldTerminalPathValue) SetTo(target **MigrateLimitPoolSourceRequest) {
	if *target == nil {
		*target = new(MigrateLimitPoolSourceRequest)
	}
	switch fpv.selector {
	case MigrateLimitPoolSourceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*limit_pool.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitPoolSourceRequest: %d", fpv.selector))
	}
}

func (fpv *MigrateLimitPoolSourceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*MigrateLimitPoolSourceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'MigrateLimitPoolSourceRequest_FieldTerminalPathValue' with the value under path in 'MigrateLimitPoolSourceRequest'.
func (fpv *MigrateLimitPoolSourceRequest_FieldTerminalPathValue) CompareWith(source *MigrateLimitPoolSourceRequest) (int, bool) {
	switch fpv.selector {
	case MigrateLimitPoolSourceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*limit_pool.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitPoolSourceRequest: %d", fpv.selector))
	}
}

func (fpv *MigrateLimitPoolSourceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*MigrateLimitPoolSourceRequest))
}

// MigrateLimitPoolSourceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for MigrateLimitPoolSourceRequest according to their type
// Present only for array (repeated) types.
type MigrateLimitPoolSourceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	MigrateLimitPoolSourceRequest_FieldPath
	ContainsValue(*MigrateLimitPoolSourceRequest) bool
}

// ParseMigrateLimitPoolSourceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseMigrateLimitPoolSourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (MigrateLimitPoolSourceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseMigrateLimitPoolSourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MigrateLimitPoolSourceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(MigrateLimitPoolSourceRequest_FieldPathArrayItemValue), nil
}

func MustParseMigrateLimitPoolSourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) MigrateLimitPoolSourceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseMigrateLimitPoolSourceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type MigrateLimitPoolSourceRequest_FieldTerminalPathArrayItemValue struct {
	MigrateLimitPoolSourceRequest_FieldTerminalPath
	value interface{}
}

var _ MigrateLimitPoolSourceRequest_FieldPathArrayItemValue = (*MigrateLimitPoolSourceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object MigrateLimitPoolSourceRequest as interface{}
func (fpaiv *MigrateLimitPoolSourceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *MigrateLimitPoolSourceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *MigrateLimitPoolSourceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *MigrateLimitPoolSourceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*MigrateLimitPoolSourceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'MigrateLimitPoolSourceRequest'
func (fpaiv *MigrateLimitPoolSourceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *MigrateLimitPoolSourceRequest) bool {
	slice := fpaiv.MigrateLimitPoolSourceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// MigrateLimitPoolSourceRequest_FieldPathArrayOfValues allows storing slice of values for MigrateLimitPoolSourceRequest fields according to their type
type MigrateLimitPoolSourceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	MigrateLimitPoolSourceRequest_FieldPath
}

func ParseMigrateLimitPoolSourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (MigrateLimitPoolSourceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseMigrateLimitPoolSourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MigrateLimitPoolSourceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(MigrateLimitPoolSourceRequest_FieldPathArrayOfValues), nil
}

func MustParseMigrateLimitPoolSourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) MigrateLimitPoolSourceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseMigrateLimitPoolSourceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type MigrateLimitPoolSourceRequest_FieldTerminalPathArrayOfValues struct {
	MigrateLimitPoolSourceRequest_FieldTerminalPath
	values interface{}
}

var _ MigrateLimitPoolSourceRequest_FieldPathArrayOfValues = (*MigrateLimitPoolSourceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *MigrateLimitPoolSourceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case MigrateLimitPoolSourceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*limit_pool.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *MigrateLimitPoolSourceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*limit_pool.Reference, bool) {
	res, ok := fpaov.values.([]*limit_pool.Reference)
	return res, ok
}
