// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/limit_pool_service.proto
// DO NOT EDIT!!!

package limit_pool_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	limit_pool "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/limit_pool"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &limit_pool.LimitPool{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetLimitPoolRequest) GotenObjectExt() {}

func (o *GetLimitPoolRequest) MakeFullFieldMask() *GetLimitPoolRequest_FieldMask {
	return FullGetLimitPoolRequest_FieldMask()
}

func (o *GetLimitPoolRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetLimitPoolRequest_FieldMask()
}

func (o *GetLimitPoolRequest) MakeDiffFieldMask(other *GetLimitPoolRequest) *GetLimitPoolRequest_FieldMask {
	if o == nil && other == nil {
		return &GetLimitPoolRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetLimitPoolRequest_FieldMask()
	}

	res := &GetLimitPoolRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetLimitPoolRequest_FieldTerminalPath{selector: GetLimitPoolRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetLimitPoolRequest_FieldTerminalPath{selector: GetLimitPoolRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetLimitPoolRequest_FieldTerminalPath{selector: GetLimitPoolRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetLimitPoolRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetLimitPoolRequest))
}

func (o *GetLimitPoolRequest) Clone() *GetLimitPoolRequest {
	if o == nil {
		return nil
	}
	result := &GetLimitPoolRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &limit_pool.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*limit_pool.LimitPool_FieldMask)
	result.View = o.View
	return result
}

func (o *GetLimitPoolRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetLimitPoolRequest) Merge(source *GetLimitPoolRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &limit_pool.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(limit_pool.LimitPool_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetLimitPoolRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetLimitPoolRequest))
}

func (o *BatchGetLimitPoolsRequest) GotenObjectExt() {}

func (o *BatchGetLimitPoolsRequest) MakeFullFieldMask() *BatchGetLimitPoolsRequest_FieldMask {
	return FullBatchGetLimitPoolsRequest_FieldMask()
}

func (o *BatchGetLimitPoolsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetLimitPoolsRequest_FieldMask()
}

func (o *BatchGetLimitPoolsRequest) MakeDiffFieldMask(other *BatchGetLimitPoolsRequest) *BatchGetLimitPoolsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetLimitPoolsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetLimitPoolsRequest_FieldMask()
	}

	res := &BatchGetLimitPoolsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetLimitPoolsRequest_FieldTerminalPath{selector: BatchGetLimitPoolsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetLimitPoolsRequest_FieldTerminalPath{selector: BatchGetLimitPoolsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetLimitPoolsRequest_FieldTerminalPath{selector: BatchGetLimitPoolsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetLimitPoolsRequest_FieldTerminalPath{selector: BatchGetLimitPoolsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetLimitPoolsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetLimitPoolsRequest))
}

func (o *BatchGetLimitPoolsRequest) Clone() *BatchGetLimitPoolsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetLimitPoolsRequest{}
	result.Names = make([]*limit_pool.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &limit_pool.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*limit_pool.LimitPool_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetLimitPoolsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetLimitPoolsRequest) Merge(source *BatchGetLimitPoolsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *limit_pool.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &limit_pool.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(limit_pool.LimitPool_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetLimitPoolsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetLimitPoolsRequest))
}

func (o *BatchGetLimitPoolsResponse) GotenObjectExt() {}

func (o *BatchGetLimitPoolsResponse) MakeFullFieldMask() *BatchGetLimitPoolsResponse_FieldMask {
	return FullBatchGetLimitPoolsResponse_FieldMask()
}

func (o *BatchGetLimitPoolsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetLimitPoolsResponse_FieldMask()
}

func (o *BatchGetLimitPoolsResponse) MakeDiffFieldMask(other *BatchGetLimitPoolsResponse) *BatchGetLimitPoolsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetLimitPoolsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetLimitPoolsResponse_FieldMask()
	}

	res := &BatchGetLimitPoolsResponse_FieldMask{}

	if len(o.GetLimitPools()) == len(other.GetLimitPools()) {
		for i, lValue := range o.GetLimitPools() {
			rValue := other.GetLimitPools()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetLimitPoolsResponse_FieldTerminalPath{selector: BatchGetLimitPoolsResponse_FieldPathSelectorLimitPools})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetLimitPoolsResponse_FieldTerminalPath{selector: BatchGetLimitPoolsResponse_FieldPathSelectorLimitPools})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetLimitPoolsResponse_FieldTerminalPath{selector: BatchGetLimitPoolsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetLimitPoolsResponse_FieldTerminalPath{selector: BatchGetLimitPoolsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetLimitPoolsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetLimitPoolsResponse))
}

func (o *BatchGetLimitPoolsResponse) Clone() *BatchGetLimitPoolsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetLimitPoolsResponse{}
	result.LimitPools = make([]*limit_pool.LimitPool, len(o.LimitPools))
	for i, sourceValue := range o.LimitPools {
		result.LimitPools[i] = sourceValue.Clone()
	}
	result.Missing = make([]*limit_pool.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &limit_pool.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetLimitPoolsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetLimitPoolsResponse) Merge(source *BatchGetLimitPoolsResponse) {
	for _, sourceValue := range source.GetLimitPools() {
		exists := false
		for _, currentValue := range o.LimitPools {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *limit_pool.LimitPool
			if sourceValue != nil {
				newDstElement = new(limit_pool.LimitPool)
				newDstElement.Merge(sourceValue)
			}
			o.LimitPools = append(o.LimitPools, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *limit_pool.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &limit_pool.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetLimitPoolsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetLimitPoolsResponse))
}

func (o *ListLimitPoolsRequest) GotenObjectExt() {}

func (o *ListLimitPoolsRequest) MakeFullFieldMask() *ListLimitPoolsRequest_FieldMask {
	return FullListLimitPoolsRequest_FieldMask()
}

func (o *ListLimitPoolsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListLimitPoolsRequest_FieldMask()
}

func (o *ListLimitPoolsRequest) MakeDiffFieldMask(other *ListLimitPoolsRequest) *ListLimitPoolsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListLimitPoolsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListLimitPoolsRequest_FieldMask()
	}

	res := &ListLimitPoolsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListLimitPoolsRequest_FieldTerminalPath{selector: ListLimitPoolsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListLimitPoolsRequest_FieldTerminalPath{selector: ListLimitPoolsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListLimitPoolsRequest_FieldTerminalPath{selector: ListLimitPoolsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListLimitPoolsRequest_FieldTerminalPath{selector: ListLimitPoolsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListLimitPoolsRequest_FieldTerminalPath{selector: ListLimitPoolsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListLimitPoolsRequest_FieldTerminalPath{selector: ListLimitPoolsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListLimitPoolsRequest_FieldTerminalPath{selector: ListLimitPoolsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListLimitPoolsRequest_FieldTerminalPath{selector: ListLimitPoolsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListLimitPoolsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListLimitPoolsRequest))
}

func (o *ListLimitPoolsRequest) Clone() *ListLimitPoolsRequest {
	if o == nil {
		return nil
	}
	result := &ListLimitPoolsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &limit_pool.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &limit_pool.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &limit_pool.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &limit_pool.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*limit_pool.LimitPool_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListLimitPoolsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListLimitPoolsRequest) Merge(source *ListLimitPoolsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &limit_pool.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &limit_pool.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &limit_pool.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &limit_pool.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(limit_pool.LimitPool_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListLimitPoolsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListLimitPoolsRequest))
}

func (o *ListLimitPoolsResponse) GotenObjectExt() {}

func (o *ListLimitPoolsResponse) MakeFullFieldMask() *ListLimitPoolsResponse_FieldMask {
	return FullListLimitPoolsResponse_FieldMask()
}

func (o *ListLimitPoolsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListLimitPoolsResponse_FieldMask()
}

func (o *ListLimitPoolsResponse) MakeDiffFieldMask(other *ListLimitPoolsResponse) *ListLimitPoolsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListLimitPoolsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListLimitPoolsResponse_FieldMask()
	}

	res := &ListLimitPoolsResponse_FieldMask{}

	if len(o.GetLimitPools()) == len(other.GetLimitPools()) {
		for i, lValue := range o.GetLimitPools() {
			rValue := other.GetLimitPools()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListLimitPoolsResponse_FieldTerminalPath{selector: ListLimitPoolsResponse_FieldPathSelectorLimitPools})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListLimitPoolsResponse_FieldTerminalPath{selector: ListLimitPoolsResponse_FieldPathSelectorLimitPools})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListLimitPoolsResponse_FieldTerminalPath{selector: ListLimitPoolsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListLimitPoolsResponse_FieldTerminalPath{selector: ListLimitPoolsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListLimitPoolsResponse_FieldTerminalPath{selector: ListLimitPoolsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListLimitPoolsResponse_FieldTerminalPath{selector: ListLimitPoolsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListLimitPoolsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListLimitPoolsResponse))
}

func (o *ListLimitPoolsResponse) Clone() *ListLimitPoolsResponse {
	if o == nil {
		return nil
	}
	result := &ListLimitPoolsResponse{}
	result.LimitPools = make([]*limit_pool.LimitPool, len(o.LimitPools))
	for i, sourceValue := range o.LimitPools {
		result.LimitPools[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &limit_pool.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &limit_pool.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListLimitPoolsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListLimitPoolsResponse) Merge(source *ListLimitPoolsResponse) {
	for _, sourceValue := range source.GetLimitPools() {
		exists := false
		for _, currentValue := range o.LimitPools {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *limit_pool.LimitPool
			if sourceValue != nil {
				newDstElement = new(limit_pool.LimitPool)
				newDstElement.Merge(sourceValue)
			}
			o.LimitPools = append(o.LimitPools, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &limit_pool.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &limit_pool.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListLimitPoolsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListLimitPoolsResponse))
}

func (o *WatchLimitPoolRequest) GotenObjectExt() {}

func (o *WatchLimitPoolRequest) MakeFullFieldMask() *WatchLimitPoolRequest_FieldMask {
	return FullWatchLimitPoolRequest_FieldMask()
}

func (o *WatchLimitPoolRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLimitPoolRequest_FieldMask()
}

func (o *WatchLimitPoolRequest) MakeDiffFieldMask(other *WatchLimitPoolRequest) *WatchLimitPoolRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchLimitPoolRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLimitPoolRequest_FieldMask()
	}

	res := &WatchLimitPoolRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchLimitPoolRequest_FieldTerminalPath{selector: WatchLimitPoolRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchLimitPoolRequest_FieldTerminalPath{selector: WatchLimitPoolRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchLimitPoolRequest_FieldTerminalPath{selector: WatchLimitPoolRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchLimitPoolRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLimitPoolRequest))
}

func (o *WatchLimitPoolRequest) Clone() *WatchLimitPoolRequest {
	if o == nil {
		return nil
	}
	result := &WatchLimitPoolRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &limit_pool.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*limit_pool.LimitPool_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchLimitPoolRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLimitPoolRequest) Merge(source *WatchLimitPoolRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &limit_pool.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(limit_pool.LimitPool_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchLimitPoolRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLimitPoolRequest))
}

func (o *WatchLimitPoolResponse) GotenObjectExt() {}

func (o *WatchLimitPoolResponse) MakeFullFieldMask() *WatchLimitPoolResponse_FieldMask {
	return FullWatchLimitPoolResponse_FieldMask()
}

func (o *WatchLimitPoolResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLimitPoolResponse_FieldMask()
}

func (o *WatchLimitPoolResponse) MakeDiffFieldMask(other *WatchLimitPoolResponse) *WatchLimitPoolResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchLimitPoolResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLimitPoolResponse_FieldMask()
	}

	res := &WatchLimitPoolResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchLimitPoolResponse_FieldTerminalPath{selector: WatchLimitPoolResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchLimitPoolResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLimitPoolResponse))
}

func (o *WatchLimitPoolResponse) Clone() *WatchLimitPoolResponse {
	if o == nil {
		return nil
	}
	result := &WatchLimitPoolResponse{}
	result.Change = proto.Clone(o.Change).(*limit_pool.LimitPoolChange)
	return result
}

func (o *WatchLimitPoolResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLimitPoolResponse) Merge(source *WatchLimitPoolResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(limit_pool.LimitPoolChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchLimitPoolResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLimitPoolResponse))
}

func (o *WatchLimitPoolsRequest) GotenObjectExt() {}

func (o *WatchLimitPoolsRequest) MakeFullFieldMask() *WatchLimitPoolsRequest_FieldMask {
	return FullWatchLimitPoolsRequest_FieldMask()
}

func (o *WatchLimitPoolsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLimitPoolsRequest_FieldMask()
}

func (o *WatchLimitPoolsRequest) MakeDiffFieldMask(other *WatchLimitPoolsRequest) *WatchLimitPoolsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchLimitPoolsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLimitPoolsRequest_FieldMask()
	}

	res := &WatchLimitPoolsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchLimitPoolsRequest_FieldTerminalPath{selector: WatchLimitPoolsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchLimitPoolsRequest_FieldTerminalPath{selector: WatchLimitPoolsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchLimitPoolsRequest_FieldTerminalPath{selector: WatchLimitPoolsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchLimitPoolsRequest_FieldTerminalPath{selector: WatchLimitPoolsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchLimitPoolsRequest_FieldTerminalPath{selector: WatchLimitPoolsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchLimitPoolsRequest_FieldTerminalPath{selector: WatchLimitPoolsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchLimitPoolsRequest_FieldTerminalPath{selector: WatchLimitPoolsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchLimitPoolsRequest_FieldTerminalPath{selector: WatchLimitPoolsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchLimitPoolsRequest_FieldTerminalPath{selector: WatchLimitPoolsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchLimitPoolsRequest_FieldTerminalPath{selector: WatchLimitPoolsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchLimitPoolsRequest_FieldTerminalPath{selector: WatchLimitPoolsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchLimitPoolsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLimitPoolsRequest))
}

func (o *WatchLimitPoolsRequest) Clone() *WatchLimitPoolsRequest {
	if o == nil {
		return nil
	}
	result := &WatchLimitPoolsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &limit_pool.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &limit_pool.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &limit_pool.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &limit_pool.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*limit_pool.LimitPool_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchLimitPoolsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLimitPoolsRequest) Merge(source *WatchLimitPoolsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &limit_pool.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &limit_pool.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &limit_pool.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &limit_pool.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(limit_pool.LimitPool_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchLimitPoolsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLimitPoolsRequest))
}

func (o *WatchLimitPoolsResponse) GotenObjectExt() {}

func (o *WatchLimitPoolsResponse) MakeFullFieldMask() *WatchLimitPoolsResponse_FieldMask {
	return FullWatchLimitPoolsResponse_FieldMask()
}

func (o *WatchLimitPoolsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLimitPoolsResponse_FieldMask()
}

func (o *WatchLimitPoolsResponse) MakeDiffFieldMask(other *WatchLimitPoolsResponse) *WatchLimitPoolsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchLimitPoolsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLimitPoolsResponse_FieldMask()
	}

	res := &WatchLimitPoolsResponse_FieldMask{}

	if len(o.GetLimitPoolChanges()) == len(other.GetLimitPoolChanges()) {
		for i, lValue := range o.GetLimitPoolChanges() {
			rValue := other.GetLimitPoolChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchLimitPoolsResponse_FieldTerminalPath{selector: WatchLimitPoolsResponse_FieldPathSelectorLimitPoolChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchLimitPoolsResponse_FieldTerminalPath{selector: WatchLimitPoolsResponse_FieldPathSelectorLimitPoolChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchLimitPoolsResponse_FieldTerminalPath{selector: WatchLimitPoolsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchLimitPoolsResponse_FieldTerminalPath{selector: WatchLimitPoolsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchLimitPoolsResponse_FieldSubPath{selector: WatchLimitPoolsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchLimitPoolsResponse_FieldTerminalPath{selector: WatchLimitPoolsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchLimitPoolsResponse_FieldTerminalPath{selector: WatchLimitPoolsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchLimitPoolsResponse_FieldTerminalPath{selector: WatchLimitPoolsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchLimitPoolsResponse_FieldTerminalPath{selector: WatchLimitPoolsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchLimitPoolsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLimitPoolsResponse))
}

func (o *WatchLimitPoolsResponse) Clone() *WatchLimitPoolsResponse {
	if o == nil {
		return nil
	}
	result := &WatchLimitPoolsResponse{}
	result.LimitPoolChanges = make([]*limit_pool.LimitPoolChange, len(o.LimitPoolChanges))
	for i, sourceValue := range o.LimitPoolChanges {
		result.LimitPoolChanges[i] = proto.Clone(sourceValue).(*limit_pool.LimitPoolChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchLimitPoolsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLimitPoolsResponse) Merge(source *WatchLimitPoolsResponse) {
	for _, sourceValue := range source.GetLimitPoolChanges() {
		exists := false
		for _, currentValue := range o.LimitPoolChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *limit_pool.LimitPoolChange
			if sourceValue != nil {
				newDstElement = new(limit_pool.LimitPoolChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.LimitPoolChanges = append(o.LimitPoolChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchLimitPoolsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchLimitPoolsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLimitPoolsResponse))
}

func (o *WatchLimitPoolsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchLimitPoolsResponse_PageTokenChange) MakeFullFieldMask() *WatchLimitPoolsResponse_PageTokenChange_FieldMask {
	return FullWatchLimitPoolsResponse_PageTokenChange_FieldMask()
}

func (o *WatchLimitPoolsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLimitPoolsResponse_PageTokenChange_FieldMask()
}

func (o *WatchLimitPoolsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchLimitPoolsResponse_PageTokenChange) *WatchLimitPoolsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchLimitPoolsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLimitPoolsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchLimitPoolsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchLimitPoolsResponsePageTokenChange_FieldTerminalPath{selector: WatchLimitPoolsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchLimitPoolsResponsePageTokenChange_FieldTerminalPath{selector: WatchLimitPoolsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchLimitPoolsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLimitPoolsResponse_PageTokenChange))
}

func (o *WatchLimitPoolsResponse_PageTokenChange) Clone() *WatchLimitPoolsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchLimitPoolsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &limit_pool.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &limit_pool.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchLimitPoolsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLimitPoolsResponse_PageTokenChange) Merge(source *WatchLimitPoolsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &limit_pool.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &limit_pool.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchLimitPoolsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLimitPoolsResponse_PageTokenChange))
}

func (o *UpdateLimitPoolRequest) GotenObjectExt() {}

func (o *UpdateLimitPoolRequest) MakeFullFieldMask() *UpdateLimitPoolRequest_FieldMask {
	return FullUpdateLimitPoolRequest_FieldMask()
}

func (o *UpdateLimitPoolRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateLimitPoolRequest_FieldMask()
}

func (o *UpdateLimitPoolRequest) MakeDiffFieldMask(other *UpdateLimitPoolRequest) *UpdateLimitPoolRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateLimitPoolRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateLimitPoolRequest_FieldMask()
	}

	res := &UpdateLimitPoolRequest_FieldMask{}
	{
		subMask := o.GetLimitPool().MakeDiffFieldMask(other.GetLimitPool())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateLimitPoolRequest_FieldTerminalPath{selector: UpdateLimitPoolRequest_FieldPathSelectorLimitPool})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateLimitPoolRequest_FieldSubPath{selector: UpdateLimitPoolRequest_FieldPathSelectorLimitPool, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateLimitPoolRequest_FieldTerminalPath{selector: UpdateLimitPoolRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateLimitPoolRequest_FieldTerminalPath{selector: UpdateLimitPoolRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateLimitPoolRequest_FieldSubPath{selector: UpdateLimitPoolRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateLimitPoolRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateLimitPoolRequest))
}

func (o *UpdateLimitPoolRequest) Clone() *UpdateLimitPoolRequest {
	if o == nil {
		return nil
	}
	result := &UpdateLimitPoolRequest{}
	result.LimitPool = o.LimitPool.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*limit_pool.LimitPool_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateLimitPoolRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateLimitPoolRequest) Merge(source *UpdateLimitPoolRequest) {
	if source.GetLimitPool() != nil {
		if o.LimitPool == nil {
			o.LimitPool = new(limit_pool.LimitPool)
		}
		o.LimitPool.Merge(source.GetLimitPool())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(limit_pool.LimitPool_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateLimitPoolRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateLimitPoolRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateLimitPoolRequest))
}

func (o *UpdateLimitPoolRequest_CAS) GotenObjectExt() {}

func (o *UpdateLimitPoolRequest_CAS) MakeFullFieldMask() *UpdateLimitPoolRequest_CAS_FieldMask {
	return FullUpdateLimitPoolRequest_CAS_FieldMask()
}

func (o *UpdateLimitPoolRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateLimitPoolRequest_CAS_FieldMask()
}

func (o *UpdateLimitPoolRequest_CAS) MakeDiffFieldMask(other *UpdateLimitPoolRequest_CAS) *UpdateLimitPoolRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateLimitPoolRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateLimitPoolRequest_CAS_FieldMask()
	}

	res := &UpdateLimitPoolRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateLimitPoolRequestCAS_FieldTerminalPath{selector: UpdateLimitPoolRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateLimitPoolRequestCAS_FieldSubPath{selector: UpdateLimitPoolRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateLimitPoolRequestCAS_FieldTerminalPath{selector: UpdateLimitPoolRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateLimitPoolRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateLimitPoolRequest_CAS))
}

func (o *UpdateLimitPoolRequest_CAS) Clone() *UpdateLimitPoolRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateLimitPoolRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*limit_pool.LimitPool_FieldMask)
	return result
}

func (o *UpdateLimitPoolRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateLimitPoolRequest_CAS) Merge(source *UpdateLimitPoolRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(limit_pool.LimitPool)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(limit_pool.LimitPool_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateLimitPoolRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateLimitPoolRequest_CAS))
}

func (o *DeleteLimitPoolRequest) GotenObjectExt() {}

func (o *DeleteLimitPoolRequest) MakeFullFieldMask() *DeleteLimitPoolRequest_FieldMask {
	return FullDeleteLimitPoolRequest_FieldMask()
}

func (o *DeleteLimitPoolRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteLimitPoolRequest_FieldMask()
}

func (o *DeleteLimitPoolRequest) MakeDiffFieldMask(other *DeleteLimitPoolRequest) *DeleteLimitPoolRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteLimitPoolRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteLimitPoolRequest_FieldMask()
	}

	res := &DeleteLimitPoolRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteLimitPoolRequest_FieldTerminalPath{selector: DeleteLimitPoolRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteLimitPoolRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteLimitPoolRequest))
}

func (o *DeleteLimitPoolRequest) Clone() *DeleteLimitPoolRequest {
	if o == nil {
		return nil
	}
	result := &DeleteLimitPoolRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &limit_pool.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteLimitPoolRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteLimitPoolRequest) Merge(source *DeleteLimitPoolRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &limit_pool.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteLimitPoolRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteLimitPoolRequest))
}
