// Code generated by protoc-gen-goten-go
// File: edgelq/limits/proto/v1alpha2/limit_pool_service.proto
// DO NOT EDIT!!!

package limit_pool_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	limit_pool "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/limit_pool"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &limit_pool.LimitPool{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method [GetLimitPool][ntt.limits.v1alpha2.GetLimitPool]
type GetLimitPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.limits.v1alpha2.LimitPool
	Name *limit_pool.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *limit_pool.LimitPool_FieldMask `protobuf:"bytes,3,opt,customtype=LimitPool_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetLimitPoolRequest) Reset() {
	*m = GetLimitPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetLimitPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetLimitPoolRequest) ProtoMessage() {}

func (m *GetLimitPoolRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetLimitPoolRequest) GotenMessage() {}

// Deprecated, Use GetLimitPoolRequest.ProtoReflect.Descriptor instead.
func (*GetLimitPoolRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetLimitPoolRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetLimitPoolRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetLimitPoolRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetLimitPoolRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetLimitPoolRequest) GetName() *limit_pool.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetLimitPoolRequest) GetFieldMask() *limit_pool.LimitPool_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetLimitPoolRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetLimitPoolRequest) SetName(fv *limit_pool.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetLimitPoolRequest"))
	}
	m.Name = fv
}

func (m *GetLimitPoolRequest) SetFieldMask(fv *limit_pool.LimitPool_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetLimitPoolRequest"))
	}
	m.FieldMask = fv
}

func (m *GetLimitPoolRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetLimitPoolRequest"))
	}
	m.View = fv
}

// Request message for method
// [BatchGetLimitPools][ntt.limits.v1alpha2.BatchGetLimitPools]
type BatchGetLimitPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of LimitPools
	Names []*limit_pool.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *limit_pool.LimitPool_FieldMask `protobuf:"bytes,3,opt,customtype=LimitPool_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetLimitPoolsRequest) Reset() {
	*m = BatchGetLimitPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetLimitPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetLimitPoolsRequest) ProtoMessage() {}

func (m *BatchGetLimitPoolsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetLimitPoolsRequest) GotenMessage() {}

// Deprecated, Use BatchGetLimitPoolsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetLimitPoolsRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetLimitPoolsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetLimitPoolsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetLimitPoolsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetLimitPoolsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetLimitPoolsRequest) GetNames() []*limit_pool.Reference {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetLimitPoolsRequest) GetFieldMask() *limit_pool.LimitPool_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetLimitPoolsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetLimitPoolsRequest) SetNames(fv []*limit_pool.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetLimitPoolsRequest"))
	}
	m.Names = fv
}

func (m *BatchGetLimitPoolsRequest) SetFieldMask(fv *limit_pool.LimitPool_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetLimitPoolsRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetLimitPoolsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetLimitPoolsRequest"))
	}
	m.View = fv
}

// BatchGetLimitPoolsResponse
type BatchGetLimitPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found LimitPools
	LimitPools []*limit_pool.LimitPool `protobuf:"bytes,1,rep,name=limit_pools,json=limitPools,proto3" json:"limit_pools,omitempty" firestore:"limitPools"`
	// list of not found LimitPools
	Missing []*limit_pool.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetLimitPoolsResponse) Reset() {
	*m = BatchGetLimitPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetLimitPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetLimitPoolsResponse) ProtoMessage() {}

func (m *BatchGetLimitPoolsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetLimitPoolsResponse) GotenMessage() {}

// Deprecated, Use BatchGetLimitPoolsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetLimitPoolsResponse) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetLimitPoolsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetLimitPoolsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetLimitPoolsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetLimitPoolsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetLimitPoolsResponse) GetLimitPools() []*limit_pool.LimitPool {
	if m != nil {
		return m.LimitPools
	}
	return nil
}

func (m *BatchGetLimitPoolsResponse) GetMissing() []*limit_pool.Reference {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetLimitPoolsResponse) SetLimitPools(fv []*limit_pool.LimitPool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LimitPools", "BatchGetLimitPoolsResponse"))
	}
	m.LimitPools = fv
}

func (m *BatchGetLimitPoolsResponse) SetMissing(fv []*limit_pool.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetLimitPoolsResponse"))
	}
	m.Missing = fv
}

// Request message for method
// [ListLimitPools][ntt.limits.v1alpha2.ListLimitPools]
type ListLimitPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Parent name of ntt.limits.v1alpha2.LimitPool
	Parent *limit_pool.ParentName `protobuf:"bytes,1,opt,customtype=ParentName,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer LimitPools than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListLimitPoolsResponse.next_page_token][ntt.limits.v1alpha2.ListLimitPoolsResponse.next_page_token]
	PageToken *limit_pool.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *limit_pool.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *limit_pool.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *limit_pool.LimitPool_FieldMask `protobuf:"bytes,6,opt,customtype=LimitPool_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *ListLimitPoolsRequest) Reset() {
	*m = ListLimitPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListLimitPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListLimitPoolsRequest) ProtoMessage() {}

func (m *ListLimitPoolsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListLimitPoolsRequest) GotenMessage() {}

// Deprecated, Use ListLimitPoolsRequest.ProtoReflect.Descriptor instead.
func (*ListLimitPoolsRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListLimitPoolsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListLimitPoolsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListLimitPoolsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListLimitPoolsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListLimitPoolsRequest) GetParent() *limit_pool.ParentName {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *ListLimitPoolsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListLimitPoolsRequest) GetPageToken() *limit_pool.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListLimitPoolsRequest) GetOrderBy() *limit_pool.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListLimitPoolsRequest) GetFilter() *limit_pool.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListLimitPoolsRequest) GetFieldMask() *limit_pool.LimitPool_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListLimitPoolsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListLimitPoolsRequest) SetParent(fv *limit_pool.ParentName) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "ListLimitPoolsRequest"))
	}
	m.Parent = fv
}

func (m *ListLimitPoolsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListLimitPoolsRequest"))
	}
	m.PageSize = fv
}

func (m *ListLimitPoolsRequest) SetPageToken(fv *limit_pool.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListLimitPoolsRequest"))
	}
	m.PageToken = fv
}

func (m *ListLimitPoolsRequest) SetOrderBy(fv *limit_pool.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListLimitPoolsRequest"))
	}
	m.OrderBy = fv
}

func (m *ListLimitPoolsRequest) SetFilter(fv *limit_pool.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListLimitPoolsRequest"))
	}
	m.Filter = fv
}

func (m *ListLimitPoolsRequest) SetFieldMask(fv *limit_pool.LimitPool_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListLimitPoolsRequest"))
	}
	m.FieldMask = fv
}

func (m *ListLimitPoolsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListLimitPoolsRequest"))
	}
	m.View = fv
}

// Request message for method
// [ListLimitPools][ntt.limits.v1alpha2.ListLimitPools]
type ListLimitPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of LimitPools
	LimitPools []*limit_pool.LimitPool `protobuf:"bytes,1,rep,name=limit_pools,json=limitPools,proto3" json:"limit_pools,omitempty" firestore:"limitPools"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListLimitPoolsRequest.page_token][ntt.limits.v1alpha2.ListLimitPoolsRequest.page_token]
	PrevPageToken *limit_pool.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListLimitPoolsRequest.page_token][ntt.limits.v1alpha2.ListLimitPoolsRequest.page_token]
	NextPageToken *limit_pool.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *ListLimitPoolsResponse) Reset() {
	*m = ListLimitPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListLimitPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListLimitPoolsResponse) ProtoMessage() {}

func (m *ListLimitPoolsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListLimitPoolsResponse) GotenMessage() {}

// Deprecated, Use ListLimitPoolsResponse.ProtoReflect.Descriptor instead.
func (*ListLimitPoolsResponse) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListLimitPoolsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListLimitPoolsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListLimitPoolsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListLimitPoolsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListLimitPoolsResponse) GetLimitPools() []*limit_pool.LimitPool {
	if m != nil {
		return m.LimitPools
	}
	return nil
}

func (m *ListLimitPoolsResponse) GetPrevPageToken() *limit_pool.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListLimitPoolsResponse) GetNextPageToken() *limit_pool.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListLimitPoolsResponse) SetLimitPools(fv []*limit_pool.LimitPool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LimitPools", "ListLimitPoolsResponse"))
	}
	m.LimitPools = fv
}

func (m *ListLimitPoolsResponse) SetPrevPageToken(fv *limit_pool.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListLimitPoolsResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListLimitPoolsResponse) SetNextPageToken(fv *limit_pool.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListLimitPoolsResponse"))
	}
	m.NextPageToken = fv
}

// Request message for method
// [WatchLimitPool][ntt.limits.v1alpha2.WatchLimitPool]
type WatchLimitPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to ntt.limits.v1alpha2.LimitPool
	Name *limit_pool.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *limit_pool.LimitPool_FieldMask `protobuf:"bytes,2,opt,customtype=LimitPool_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchLimitPoolRequest) Reset() {
	*m = WatchLimitPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchLimitPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchLimitPoolRequest) ProtoMessage() {}

func (m *WatchLimitPoolRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchLimitPoolRequest) GotenMessage() {}

// Deprecated, Use WatchLimitPoolRequest.ProtoReflect.Descriptor instead.
func (*WatchLimitPoolRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchLimitPoolRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchLimitPoolRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchLimitPoolRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchLimitPoolRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchLimitPoolRequest) GetName() *limit_pool.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchLimitPoolRequest) GetFieldMask() *limit_pool.LimitPool_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchLimitPoolRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchLimitPoolRequest) SetName(fv *limit_pool.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchLimitPoolRequest"))
	}
	m.Name = fv
}

func (m *WatchLimitPoolRequest) SetFieldMask(fv *limit_pool.LimitPool_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchLimitPoolRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchLimitPoolRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchLimitPoolRequest"))
	}
	m.View = fv
}

// WatchLimitPoolResponse
type WatchLimitPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *limit_pool.LimitPoolChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchLimitPoolResponse) Reset() {
	*m = WatchLimitPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchLimitPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchLimitPoolResponse) ProtoMessage() {}

func (m *WatchLimitPoolResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchLimitPoolResponse) GotenMessage() {}

// Deprecated, Use WatchLimitPoolResponse.ProtoReflect.Descriptor instead.
func (*WatchLimitPoolResponse) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchLimitPoolResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchLimitPoolResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchLimitPoolResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchLimitPoolResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchLimitPoolResponse) GetChange() *limit_pool.LimitPoolChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchLimitPoolResponse) SetChange(fv *limit_pool.LimitPoolChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchLimitPoolResponse"))
	}
	m.Change = fv
}

// Request message for method
// [WatchLimitPools][ntt.limits.v1alpha2.WatchLimitPools]
type WatchLimitPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.watch_type.WatchType" json:"type,omitempty" firestore:"type"`
	// Parent reference of ntt.limits.v1alpha2.LimitPool
	Parent *limit_pool.ParentReference `protobuf:"bytes,1,opt,customtype=ParentReference,name=parent,proto3" json:"parent,omitempty" firestore:"parent"`
	// Requested page size. Server may return fewer LimitPools than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *limit_pool.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *limit_pool.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *limit_pool.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to LimitPool that don't affect
	// any of masked fields won't be sent back.
	FieldMask *limit_pool.LimitPool_FieldMask `protobuf:"bytes,6,opt,customtype=LimitPool_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// LimitPool that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchLimitPoolsRequest) Reset() {
	*m = WatchLimitPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchLimitPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchLimitPoolsRequest) ProtoMessage() {}

func (m *WatchLimitPoolsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchLimitPoolsRequest) GotenMessage() {}

// Deprecated, Use WatchLimitPoolsRequest.ProtoReflect.Descriptor instead.
func (*WatchLimitPoolsRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchLimitPoolsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchLimitPoolsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchLimitPoolsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchLimitPoolsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchLimitPoolsRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchLimitPoolsRequest) GetParent() *limit_pool.ParentReference {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *WatchLimitPoolsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchLimitPoolsRequest) GetPageToken() *limit_pool.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchLimitPoolsRequest) GetOrderBy() *limit_pool.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchLimitPoolsRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchLimitPoolsRequest) GetFilter() *limit_pool.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchLimitPoolsRequest) GetFieldMask() *limit_pool.LimitPool_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchLimitPoolsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchLimitPoolsRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchLimitPoolsRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchLimitPoolsRequest"))
	}
	m.Type = fv
}

func (m *WatchLimitPoolsRequest) SetParent(fv *limit_pool.ParentReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Parent", "WatchLimitPoolsRequest"))
	}
	m.Parent = fv
}

func (m *WatchLimitPoolsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchLimitPoolsRequest"))
	}
	m.PageSize = fv
}

func (m *WatchLimitPoolsRequest) SetPageToken(fv *limit_pool.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchLimitPoolsRequest"))
	}
	m.PageToken = fv
}

func (m *WatchLimitPoolsRequest) SetOrderBy(fv *limit_pool.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchLimitPoolsRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchLimitPoolsRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchLimitPoolsRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchLimitPoolsRequest) SetFilter(fv *limit_pool.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchLimitPoolsRequest"))
	}
	m.Filter = fv
}

func (m *WatchLimitPoolsRequest) SetFieldMask(fv *limit_pool.LimitPool_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchLimitPoolsRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchLimitPoolsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchLimitPoolsRequest"))
	}
	m.View = fv
}

func (m *WatchLimitPoolsRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchLimitPoolsRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchLimitPoolsResponse
type WatchLimitPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of LimitPools
	LimitPoolChanges []*limit_pool.LimitPoolChange `protobuf:"bytes,2,rep,name=limit_pool_changes,json=limitPoolChanges,proto3" json:"limit_pool_changes,omitempty" firestore:"limitPoolChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All LimitPools will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchLimitPoolsResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (LimitPools will contains changes
	// of type Current only). Any resume tokens should be discarded as well. This
	// field should be checked only for stateless watch. In stateful those kind of
	// errors are handled by the server side. Will never be sent along with
	// is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchLimitPoolsResponse) Reset() {
	*m = WatchLimitPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchLimitPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchLimitPoolsResponse) ProtoMessage() {}

func (m *WatchLimitPoolsResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchLimitPoolsResponse) GotenMessage() {}

// Deprecated, Use WatchLimitPoolsResponse.ProtoReflect.Descriptor instead.
func (*WatchLimitPoolsResponse) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchLimitPoolsResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchLimitPoolsResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchLimitPoolsResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchLimitPoolsResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchLimitPoolsResponse) GetLimitPoolChanges() []*limit_pool.LimitPoolChange {
	if m != nil {
		return m.LimitPoolChanges
	}
	return nil
}

func (m *WatchLimitPoolsResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchLimitPoolsResponse) GetPageTokenChange() *WatchLimitPoolsResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchLimitPoolsResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchLimitPoolsResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchLimitPoolsResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchLimitPoolsResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchLimitPoolsResponse) SetLimitPoolChanges(fv []*limit_pool.LimitPoolChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LimitPoolChanges", "WatchLimitPoolsResponse"))
	}
	m.LimitPoolChanges = fv
}

func (m *WatchLimitPoolsResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchLimitPoolsResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchLimitPoolsResponse) SetPageTokenChange(fv *WatchLimitPoolsResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchLimitPoolsResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchLimitPoolsResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchLimitPoolsResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchLimitPoolsResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchLimitPoolsResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchLimitPoolsResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchLimitPoolsResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchLimitPoolsResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchLimitPoolsResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method
// [UpdateLimitPool][ntt.limits.v1alpha2.UpdateLimitPool]
type UpdateLimitPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// LimitPool resource body
	LimitPool *limit_pool.LimitPool `protobuf:"bytes,2,opt,name=limit_pool,json=limitPool,proto3" json:"limit_pool,omitempty" firestore:"limitPool"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *limit_pool.LimitPool_FieldMask `protobuf:"bytes,3,opt,customtype=LimitPool_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdateLimitPoolRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
}

func (m *UpdateLimitPoolRequest) Reset() {
	*m = UpdateLimitPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateLimitPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateLimitPoolRequest) ProtoMessage() {}

func (m *UpdateLimitPoolRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateLimitPoolRequest) GotenMessage() {}

// Deprecated, Use UpdateLimitPoolRequest.ProtoReflect.Descriptor instead.
func (*UpdateLimitPoolRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP(), []int{9}
}

func (m *UpdateLimitPoolRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateLimitPoolRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateLimitPoolRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateLimitPoolRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateLimitPoolRequest) GetLimitPool() *limit_pool.LimitPool {
	if m != nil {
		return m.LimitPool
	}
	return nil
}

func (m *UpdateLimitPoolRequest) GetUpdateMask() *limit_pool.LimitPool_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateLimitPoolRequest) GetCas() *UpdateLimitPoolRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdateLimitPoolRequest) SetLimitPool(fv *limit_pool.LimitPool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LimitPool", "UpdateLimitPoolRequest"))
	}
	m.LimitPool = fv
}

func (m *UpdateLimitPoolRequest) SetUpdateMask(fv *limit_pool.LimitPool_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdateLimitPoolRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdateLimitPoolRequest) SetCas(fv *UpdateLimitPoolRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdateLimitPoolRequest"))
	}
	m.Cas = fv
}

// Request message for method
// [DeleteLimitPool][ntt.limits.v1alpha2.DeleteLimitPool]
type DeleteLimitPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.limits.v1alpha2.LimitPool
	Name *limit_pool.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeleteLimitPoolRequest) Reset() {
	*m = DeleteLimitPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeleteLimitPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeleteLimitPoolRequest) ProtoMessage() {}

func (m *DeleteLimitPoolRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeleteLimitPoolRequest) GotenMessage() {}

// Deprecated, Use DeleteLimitPoolRequest.ProtoReflect.Descriptor instead.
func (*DeleteLimitPoolRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP(), []int{10}
}

func (m *DeleteLimitPoolRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeleteLimitPoolRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeleteLimitPoolRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeleteLimitPoolRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeleteLimitPoolRequest) GetName() *limit_pool.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeleteLimitPoolRequest) SetName(fv *limit_pool.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeleteLimitPoolRequest"))
	}
	m.Name = fv
}

type WatchLimitPoolsResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *limit_pool.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *limit_pool.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchLimitPoolsResponse_PageTokenChange) Reset() {
	*m = WatchLimitPoolsResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchLimitPoolsResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchLimitPoolsResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchLimitPoolsResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchLimitPoolsResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchLimitPoolsResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchLimitPoolsResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchLimitPoolsResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchLimitPoolsResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchLimitPoolsResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchLimitPoolsResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchLimitPoolsResponse_PageTokenChange) GetPrevPageToken() *limit_pool.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchLimitPoolsResponse_PageTokenChange) GetNextPageToken() *limit_pool.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchLimitPoolsResponse_PageTokenChange) SetPrevPageToken(fv *limit_pool.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchLimitPoolsResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchLimitPoolsResponse_PageTokenChange) SetNextPageToken(fv *limit_pool.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchLimitPoolsResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdateLimitPoolRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *limit_pool.LimitPool `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *limit_pool.LimitPool_FieldMask `protobuf:"bytes,2,opt,customtype=LimitPool_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdateLimitPoolRequest_CAS) Reset() {
	*m = UpdateLimitPoolRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdateLimitPoolRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdateLimitPoolRequest_CAS) ProtoMessage() {}

func (m *UpdateLimitPoolRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdateLimitPoolRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdateLimitPoolRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdateLimitPoolRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP(), []int{9, 0}
}

func (m *UpdateLimitPoolRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdateLimitPoolRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdateLimitPoolRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdateLimitPoolRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdateLimitPoolRequest_CAS) GetConditionalState() *limit_pool.LimitPool {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdateLimitPoolRequest_CAS) GetFieldMask() *limit_pool.LimitPool_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdateLimitPoolRequest_CAS) SetConditionalState(fv *limit_pool.LimitPool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdateLimitPoolRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdateLimitPoolRequest_CAS) SetFieldMask(fv *limit_pool.LimitPool_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdateLimitPoolRequest_CAS"))
	}
	m.FieldMask = fv
}

var edgelq_limits_proto_v1alpha2_limit_pool_service_proto preflect.FileDescriptor

var edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDesc = []byte{
	0x0a, 0x35, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2,
	0xda, 0x21, 0x0d, 0x12, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d,
	0x32, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xbe,
	0x01, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21,
	0x0d, 0x12, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x32, 0x0b, 0x0a, 0x09, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22,
	0x8a, 0x01, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12,
	0x2b, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x12, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0xee, 0x02, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x0d, 0x3a, 0x0b, 0x0a, 0x09,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04,
	0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x22, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x2a, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x29,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0xb2, 0xda, 0x21, 0x0d, 0x1a, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x32,
	0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xcf, 0x01,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x22, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2,
	0xda, 0x21, 0x0d, 0x22, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xb6, 0x01, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x0d, 0x12, 0x0b, 0x0a,
	0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x32, 0x0b, 0x0a, 0x09, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x56, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0xff, 0x03, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda,
	0x21, 0x0d, 0x42, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0xba,
	0x9d, 0x22, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x22, 0x0b,
	0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x2a, 0x0b,
	0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x1a, 0x0b, 0x0a,
	0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x32, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14,
	0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04,
	0x1a, 0x02, 0x08, 0x64, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x90, 0x04, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x68, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x6f,
	0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68, 0x61,
	0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x87, 0x01, 0x0a, 0x0f,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x22, 0x0b,
	0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x76, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x22, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc3, 0x03, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4b, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5,
	0x22, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x4e, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11,
	0xb2, 0xda, 0x21, 0x0d, 0x32, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x41, 0x0a,
	0x03, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x41, 0x53, 0x52, 0x03, 0x63, 0x61, 0x73,
	0x1a, 0xa0, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x32, 0x0b, 0x0a, 0x09, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x3a, 0x26, 0xc2, 0x85, 0x2c, 0x22, 0x32, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x0f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x0d, 0x12, 0x0b, 0x0a, 0x09, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x3a, 0x10, 0xc2, 0x85, 0x2c, 0x0c, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x32, 0x8b, 0x10, 0x0a, 0x10, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x22, 0xa5, 0x01, 0x82, 0xdb, 0x21, 0x20, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x50, 0x5a, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x67, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0x81, 0x02, 0x0a, 0x12, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x12, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x89, 0x01, 0x82, 0xdb, 0x21, 0x2f, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01,
	0x2a, 0x07, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x0d, 0x12, 0x0b, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x92, 0x97, 0x22, 0x23, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0x99,
	0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x12, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x01, 0x82, 0xdb, 0x21,
	0x2e, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08, 0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x32, 0x0d, 0x12, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0xa2,
	0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x5a, 0x2f, 0x12, 0x2d, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x14, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x92, 0x97, 0x22, 0x20, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0xa5, 0x02, 0x0a, 0x0e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2a, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7, 0x01, 0x82, 0xdb, 0x21, 0x24, 0x0a, 0x09, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2a,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x5a, 0x35, 0x22,
	0x33, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x92, 0x97, 0x22, 0x1f, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00,
	0x30, 0x01, 0x12, 0xb3, 0x02, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc2, 0x01, 0x82, 0xdb, 0x21, 0x36, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x08,
	0x1a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x14, 0x12, 0x12, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc,
	0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53, 0x5a, 0x35, 0x22, 0x33, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x92, 0x97, 0x22,
	0x21, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x30, 0x01, 0x12, 0xc2, 0x02, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2b, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0xe1, 0x01, 0x82, 0xdb, 0x21, 0x29,
	0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2a, 0x0c, 0x12, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x72, 0x3a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5a, 0x3a, 0x1a, 0x38, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x1a, 0x28, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x2a, 0x0a, 0x0e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x12, 0x80, 0x02,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x2b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa7, 0x01, 0x82, 0xdb, 0x21, 0x1b, 0x0a, 0x09, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x50, 0x5a, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x2f, 0x2a, 0x7d, 0x2a, 0x1d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03,
	0x1a, 0x2e, 0xca, 0x41, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d,
	0x42, 0x83, 0x03, 0xe8, 0xde, 0x21, 0x01, 0x82, 0xff, 0xd0, 0x02, 0x51, 0x0a, 0x11, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x8a, 0xff, 0xd0,
	0x02, 0x51, 0x0a, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42,
	0x15, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x3b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1, 0x02, 0x49, 0x0a, 0x0d, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x38, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescOnce sync.Once
	edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescData = edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDesc
)

func edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescGZIP() []byte {
	edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescOnce.Do(func() {
		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescData)
	})
	return edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDescData
}

var edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var edgelq_limits_proto_v1alpha2_limit_pool_service_proto_goTypes = []interface{}{
	(*GetLimitPoolRequest)(nil),                     // 0: ntt.limits.v1alpha2.GetLimitPoolRequest
	(*BatchGetLimitPoolsRequest)(nil),               // 1: ntt.limits.v1alpha2.BatchGetLimitPoolsRequest
	(*BatchGetLimitPoolsResponse)(nil),              // 2: ntt.limits.v1alpha2.BatchGetLimitPoolsResponse
	(*ListLimitPoolsRequest)(nil),                   // 3: ntt.limits.v1alpha2.ListLimitPoolsRequest
	(*ListLimitPoolsResponse)(nil),                  // 4: ntt.limits.v1alpha2.ListLimitPoolsResponse
	(*WatchLimitPoolRequest)(nil),                   // 5: ntt.limits.v1alpha2.WatchLimitPoolRequest
	(*WatchLimitPoolResponse)(nil),                  // 6: ntt.limits.v1alpha2.WatchLimitPoolResponse
	(*WatchLimitPoolsRequest)(nil),                  // 7: ntt.limits.v1alpha2.WatchLimitPoolsRequest
	(*WatchLimitPoolsResponse)(nil),                 // 8: ntt.limits.v1alpha2.WatchLimitPoolsResponse
	(*UpdateLimitPoolRequest)(nil),                  // 9: ntt.limits.v1alpha2.UpdateLimitPoolRequest
	(*DeleteLimitPoolRequest)(nil),                  // 10: ntt.limits.v1alpha2.DeleteLimitPoolRequest
	(*WatchLimitPoolsResponse_PageTokenChange)(nil), // 11: ntt.limits.v1alpha2.WatchLimitPoolsResponse.PageTokenChange
	(*UpdateLimitPoolRequest_CAS)(nil),              // 12: ntt.limits.v1alpha2.UpdateLimitPoolRequest.CAS
	(*limit_pool.LimitPool_FieldMask)(nil),          // 13: ntt.limits.v1alpha2.LimitPool_FieldMask
	(view.View)(0),                                  // 14: goten.view.View
	(*limit_pool.LimitPool)(nil),                    // 15: ntt.limits.v1alpha2.LimitPool
	(*limit_pool.LimitPoolChange)(nil),              // 16: ntt.limits.v1alpha2.LimitPoolChange
	(watch_type.WatchType)(0),                       // 17: goten.watch_type.WatchType
	(*empty.Empty)(nil),                             // 18: google.protobuf.Empty
}
var edgelq_limits_proto_v1alpha2_limit_pool_service_proto_depIdxs = []int32{
	13, // 0: ntt.limits.v1alpha2.GetLimitPoolRequest.field_mask:type_name -> ntt.limits.v1alpha2.LimitPool_FieldMask
	14, // 1: ntt.limits.v1alpha2.GetLimitPoolRequest.view:type_name -> goten.view.View
	13, // 2: ntt.limits.v1alpha2.BatchGetLimitPoolsRequest.field_mask:type_name -> ntt.limits.v1alpha2.LimitPool_FieldMask
	14, // 3: ntt.limits.v1alpha2.BatchGetLimitPoolsRequest.view:type_name -> goten.view.View
	15, // 4: ntt.limits.v1alpha2.BatchGetLimitPoolsResponse.limit_pools:type_name -> ntt.limits.v1alpha2.LimitPool
	13, // 5: ntt.limits.v1alpha2.ListLimitPoolsRequest.field_mask:type_name -> ntt.limits.v1alpha2.LimitPool_FieldMask
	14, // 6: ntt.limits.v1alpha2.ListLimitPoolsRequest.view:type_name -> goten.view.View
	15, // 7: ntt.limits.v1alpha2.ListLimitPoolsResponse.limit_pools:type_name -> ntt.limits.v1alpha2.LimitPool
	13, // 8: ntt.limits.v1alpha2.WatchLimitPoolRequest.field_mask:type_name -> ntt.limits.v1alpha2.LimitPool_FieldMask
	14, // 9: ntt.limits.v1alpha2.WatchLimitPoolRequest.view:type_name -> goten.view.View
	16, // 10: ntt.limits.v1alpha2.WatchLimitPoolResponse.change:type_name -> ntt.limits.v1alpha2.LimitPoolChange
	17, // 11: ntt.limits.v1alpha2.WatchLimitPoolsRequest.type:type_name -> goten.watch_type.WatchType
	13, // 12: ntt.limits.v1alpha2.WatchLimitPoolsRequest.field_mask:type_name -> ntt.limits.v1alpha2.LimitPool_FieldMask
	14, // 13: ntt.limits.v1alpha2.WatchLimitPoolsRequest.view:type_name -> goten.view.View
	16, // 14: ntt.limits.v1alpha2.WatchLimitPoolsResponse.limit_pool_changes:type_name -> ntt.limits.v1alpha2.LimitPoolChange
	11, // 15: ntt.limits.v1alpha2.WatchLimitPoolsResponse.page_token_change:type_name -> ntt.limits.v1alpha2.WatchLimitPoolsResponse.PageTokenChange
	15, // 16: ntt.limits.v1alpha2.UpdateLimitPoolRequest.limit_pool:type_name -> ntt.limits.v1alpha2.LimitPool
	13, // 17: ntt.limits.v1alpha2.UpdateLimitPoolRequest.update_mask:type_name -> ntt.limits.v1alpha2.LimitPool_FieldMask
	12, // 18: ntt.limits.v1alpha2.UpdateLimitPoolRequest.cas:type_name -> ntt.limits.v1alpha2.UpdateLimitPoolRequest.CAS
	15, // 19: ntt.limits.v1alpha2.UpdateLimitPoolRequest.CAS.conditional_state:type_name -> ntt.limits.v1alpha2.LimitPool
	13, // 20: ntt.limits.v1alpha2.UpdateLimitPoolRequest.CAS.field_mask:type_name -> ntt.limits.v1alpha2.LimitPool_FieldMask
	0,  // 21: ntt.limits.v1alpha2.LimitPoolService.GetLimitPool:input_type -> ntt.limits.v1alpha2.GetLimitPoolRequest
	1,  // 22: ntt.limits.v1alpha2.LimitPoolService.BatchGetLimitPools:input_type -> ntt.limits.v1alpha2.BatchGetLimitPoolsRequest
	3,  // 23: ntt.limits.v1alpha2.LimitPoolService.ListLimitPools:input_type -> ntt.limits.v1alpha2.ListLimitPoolsRequest
	5,  // 24: ntt.limits.v1alpha2.LimitPoolService.WatchLimitPool:input_type -> ntt.limits.v1alpha2.WatchLimitPoolRequest
	7,  // 25: ntt.limits.v1alpha2.LimitPoolService.WatchLimitPools:input_type -> ntt.limits.v1alpha2.WatchLimitPoolsRequest
	9,  // 26: ntt.limits.v1alpha2.LimitPoolService.UpdateLimitPool:input_type -> ntt.limits.v1alpha2.UpdateLimitPoolRequest
	10, // 27: ntt.limits.v1alpha2.LimitPoolService.DeleteLimitPool:input_type -> ntt.limits.v1alpha2.DeleteLimitPoolRequest
	15, // 28: ntt.limits.v1alpha2.LimitPoolService.GetLimitPool:output_type -> ntt.limits.v1alpha2.LimitPool
	2,  // 29: ntt.limits.v1alpha2.LimitPoolService.BatchGetLimitPools:output_type -> ntt.limits.v1alpha2.BatchGetLimitPoolsResponse
	4,  // 30: ntt.limits.v1alpha2.LimitPoolService.ListLimitPools:output_type -> ntt.limits.v1alpha2.ListLimitPoolsResponse
	6,  // 31: ntt.limits.v1alpha2.LimitPoolService.WatchLimitPool:output_type -> ntt.limits.v1alpha2.WatchLimitPoolResponse
	8,  // 32: ntt.limits.v1alpha2.LimitPoolService.WatchLimitPools:output_type -> ntt.limits.v1alpha2.WatchLimitPoolsResponse
	15, // 33: ntt.limits.v1alpha2.LimitPoolService.UpdateLimitPool:output_type -> ntt.limits.v1alpha2.LimitPool
	18, // 34: ntt.limits.v1alpha2.LimitPoolService.DeleteLimitPool:output_type -> google.protobuf.Empty
	28, // [28:35] is the sub-list for method output_type
	21, // [21:28] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { edgelq_limits_proto_v1alpha2_limit_pool_service_proto_init() }
func edgelq_limits_proto_v1alpha2_limit_pool_service_proto_init() {
	if edgelq_limits_proto_v1alpha2_limit_pool_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLimitPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetLimitPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetLimitPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLimitPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLimitPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchLimitPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchLimitPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchLimitPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchLimitPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLimitPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLimitPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchLimitPoolsResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLimitPoolRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_limits_proto_v1alpha2_limit_pool_service_proto_goTypes,
		DependencyIndexes: edgelq_limits_proto_v1alpha2_limit_pool_service_proto_depIdxs,
		MessageInfos:      edgelq_limits_proto_v1alpha2_limit_pool_service_proto_msgTypes,
	}.Build()
	edgelq_limits_proto_v1alpha2_limit_pool_service_proto = out.File
	edgelq_limits_proto_v1alpha2_limit_pool_service_proto_rawDesc = nil
	edgelq_limits_proto_v1alpha2_limit_pool_service_proto_goTypes = nil
	edgelq_limits_proto_v1alpha2_limit_pool_service_proto_depIdxs = nil
}
