// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/limit_custom.proto
// DO NOT EDIT!!!

package limit_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	limit "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/limit"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &limit.Limit{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type MigrateLimitSourceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() MigrateLimitSourceRequest_FieldPathSelector
	Get(source *MigrateLimitSourceRequest) []interface{}
	GetSingle(source *MigrateLimitSourceRequest) (interface{}, bool)
	ClearValue(item *MigrateLimitSourceRequest)

	// Those methods build corresponding MigrateLimitSourceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) MigrateLimitSourceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) MigrateLimitSourceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) MigrateLimitSourceRequest_FieldPathArrayItemValue
}

type MigrateLimitSourceRequest_FieldPathSelector int32

const (
	MigrateLimitSourceRequest_FieldPathSelectorName MigrateLimitSourceRequest_FieldPathSelector = 0
)

func (s MigrateLimitSourceRequest_FieldPathSelector) String() string {
	switch s {
	case MigrateLimitSourceRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitSourceRequest: %d", s))
	}
}

func BuildMigrateLimitSourceRequest_FieldPath(fp gotenobject.RawFieldPath) (MigrateLimitSourceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object MigrateLimitSourceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &MigrateLimitSourceRequest_FieldTerminalPath{selector: MigrateLimitSourceRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object MigrateLimitSourceRequest", fp)
}

func ParseMigrateLimitSourceRequest_FieldPath(rawField string) (MigrateLimitSourceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildMigrateLimitSourceRequest_FieldPath(fp)
}

func MustParseMigrateLimitSourceRequest_FieldPath(rawField string) MigrateLimitSourceRequest_FieldPath {
	fp, err := ParseMigrateLimitSourceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type MigrateLimitSourceRequest_FieldTerminalPath struct {
	selector MigrateLimitSourceRequest_FieldPathSelector
}

var _ MigrateLimitSourceRequest_FieldPath = (*MigrateLimitSourceRequest_FieldTerminalPath)(nil)

func (fp *MigrateLimitSourceRequest_FieldTerminalPath) Selector() MigrateLimitSourceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *MigrateLimitSourceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *MigrateLimitSourceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source MigrateLimitSourceRequest
func (fp *MigrateLimitSourceRequest_FieldTerminalPath) Get(source *MigrateLimitSourceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case MigrateLimitSourceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for MigrateLimitSourceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *MigrateLimitSourceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*MigrateLimitSourceRequest))
}

// GetSingle returns value pointed by specific field of from source MigrateLimitSourceRequest
func (fp *MigrateLimitSourceRequest_FieldTerminalPath) GetSingle(source *MigrateLimitSourceRequest) (interface{}, bool) {
	switch fp.selector {
	case MigrateLimitSourceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitSourceRequest: %d", fp.selector))
	}
}

func (fp *MigrateLimitSourceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*MigrateLimitSourceRequest))
}

// GetDefault returns a default value of the field type
func (fp *MigrateLimitSourceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case MigrateLimitSourceRequest_FieldPathSelectorName:
		return (*limit.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitSourceRequest: %d", fp.selector))
	}
}

func (fp *MigrateLimitSourceRequest_FieldTerminalPath) ClearValue(item *MigrateLimitSourceRequest) {
	if item != nil {
		switch fp.selector {
		case MigrateLimitSourceRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for MigrateLimitSourceRequest: %d", fp.selector))
		}
	}
}

func (fp *MigrateLimitSourceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*MigrateLimitSourceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *MigrateLimitSourceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == MigrateLimitSourceRequest_FieldPathSelectorName
}

func (fp *MigrateLimitSourceRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *MigrateLimitSourceRequest_FieldTerminalPath) WithIValue(value interface{}) MigrateLimitSourceRequest_FieldPathValue {
	switch fp.selector {
	case MigrateLimitSourceRequest_FieldPathSelectorName:
		return &MigrateLimitSourceRequest_FieldTerminalPathValue{MigrateLimitSourceRequest_FieldTerminalPath: *fp, value: value.(*limit.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitSourceRequest: %d", fp.selector))
	}
}

func (fp *MigrateLimitSourceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *MigrateLimitSourceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) MigrateLimitSourceRequest_FieldPathArrayOfValues {
	fpaov := &MigrateLimitSourceRequest_FieldTerminalPathArrayOfValues{MigrateLimitSourceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case MigrateLimitSourceRequest_FieldPathSelectorName:
		return &MigrateLimitSourceRequest_FieldTerminalPathArrayOfValues{MigrateLimitSourceRequest_FieldTerminalPath: *fp, values: values.([]*limit.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitSourceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *MigrateLimitSourceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *MigrateLimitSourceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) MigrateLimitSourceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitSourceRequest: %d", fp.selector))
	}
}

func (fp *MigrateLimitSourceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// MigrateLimitSourceRequest_FieldPathValue allows storing values for MigrateLimitSourceRequest fields according to their type
type MigrateLimitSourceRequest_FieldPathValue interface {
	MigrateLimitSourceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **MigrateLimitSourceRequest)
	CompareWith(*MigrateLimitSourceRequest) (cmp int, comparable bool)
}

func ParseMigrateLimitSourceRequest_FieldPathValue(pathStr, valueStr string) (MigrateLimitSourceRequest_FieldPathValue, error) {
	fp, err := ParseMigrateLimitSourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MigrateLimitSourceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(MigrateLimitSourceRequest_FieldPathValue), nil
}

func MustParseMigrateLimitSourceRequest_FieldPathValue(pathStr, valueStr string) MigrateLimitSourceRequest_FieldPathValue {
	fpv, err := ParseMigrateLimitSourceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type MigrateLimitSourceRequest_FieldTerminalPathValue struct {
	MigrateLimitSourceRequest_FieldTerminalPath
	value interface{}
}

var _ MigrateLimitSourceRequest_FieldPathValue = (*MigrateLimitSourceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'MigrateLimitSourceRequest' as interface{}
func (fpv *MigrateLimitSourceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *MigrateLimitSourceRequest_FieldTerminalPathValue) AsNameValue() (*limit.Reference, bool) {
	res, ok := fpv.value.(*limit.Reference)
	return res, ok
}

// SetTo stores value for selected field for object MigrateLimitSourceRequest
func (fpv *MigrateLimitSourceRequest_FieldTerminalPathValue) SetTo(target **MigrateLimitSourceRequest) {
	if *target == nil {
		*target = new(MigrateLimitSourceRequest)
	}
	switch fpv.selector {
	case MigrateLimitSourceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*limit.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitSourceRequest: %d", fpv.selector))
	}
}

func (fpv *MigrateLimitSourceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*MigrateLimitSourceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'MigrateLimitSourceRequest_FieldTerminalPathValue' with the value under path in 'MigrateLimitSourceRequest'.
func (fpv *MigrateLimitSourceRequest_FieldTerminalPathValue) CompareWith(source *MigrateLimitSourceRequest) (int, bool) {
	switch fpv.selector {
	case MigrateLimitSourceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*limit.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for MigrateLimitSourceRequest: %d", fpv.selector))
	}
}

func (fpv *MigrateLimitSourceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*MigrateLimitSourceRequest))
}

// MigrateLimitSourceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for MigrateLimitSourceRequest according to their type
// Present only for array (repeated) types.
type MigrateLimitSourceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	MigrateLimitSourceRequest_FieldPath
	ContainsValue(*MigrateLimitSourceRequest) bool
}

// ParseMigrateLimitSourceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseMigrateLimitSourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (MigrateLimitSourceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseMigrateLimitSourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MigrateLimitSourceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(MigrateLimitSourceRequest_FieldPathArrayItemValue), nil
}

func MustParseMigrateLimitSourceRequest_FieldPathArrayItemValue(pathStr, valueStr string) MigrateLimitSourceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseMigrateLimitSourceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type MigrateLimitSourceRequest_FieldTerminalPathArrayItemValue struct {
	MigrateLimitSourceRequest_FieldTerminalPath
	value interface{}
}

var _ MigrateLimitSourceRequest_FieldPathArrayItemValue = (*MigrateLimitSourceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object MigrateLimitSourceRequest as interface{}
func (fpaiv *MigrateLimitSourceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *MigrateLimitSourceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *MigrateLimitSourceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *MigrateLimitSourceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*MigrateLimitSourceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'MigrateLimitSourceRequest'
func (fpaiv *MigrateLimitSourceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *MigrateLimitSourceRequest) bool {
	slice := fpaiv.MigrateLimitSourceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// MigrateLimitSourceRequest_FieldPathArrayOfValues allows storing slice of values for MigrateLimitSourceRequest fields according to their type
type MigrateLimitSourceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	MigrateLimitSourceRequest_FieldPath
}

func ParseMigrateLimitSourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (MigrateLimitSourceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseMigrateLimitSourceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MigrateLimitSourceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(MigrateLimitSourceRequest_FieldPathArrayOfValues), nil
}

func MustParseMigrateLimitSourceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) MigrateLimitSourceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseMigrateLimitSourceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type MigrateLimitSourceRequest_FieldTerminalPathArrayOfValues struct {
	MigrateLimitSourceRequest_FieldTerminalPath
	values interface{}
}

var _ MigrateLimitSourceRequest_FieldPathArrayOfValues = (*MigrateLimitSourceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *MigrateLimitSourceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case MigrateLimitSourceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*limit.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *MigrateLimitSourceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*limit.Reference, bool) {
	res, ok := fpaov.values.([]*limit.Reference)
	return res, ok
}
