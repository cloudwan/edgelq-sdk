// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/limit_service.proto
// DO NOT EDIT!!!

package limit_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	limit "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/limit"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &limit.Limit{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetLimitRequest) GotenObjectExt() {}

func (o *GetLimitRequest) MakeFullFieldMask() *GetLimitRequest_FieldMask {
	return FullGetLimitRequest_FieldMask()
}

func (o *GetLimitRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetLimitRequest_FieldMask()
}

func (o *GetLimitRequest) MakeDiffFieldMask(other *GetLimitRequest) *GetLimitRequest_FieldMask {
	if o == nil && other == nil {
		return &GetLimitRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetLimitRequest_FieldMask()
	}

	res := &GetLimitRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetLimitRequest_FieldTerminalPath{selector: GetLimitRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetLimitRequest_FieldTerminalPath{selector: GetLimitRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetLimitRequest_FieldTerminalPath{selector: GetLimitRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetLimitRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetLimitRequest))
}

func (o *GetLimitRequest) Clone() *GetLimitRequest {
	if o == nil {
		return nil
	}
	result := &GetLimitRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &limit.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*limit.Limit_FieldMask)
	result.View = o.View
	return result
}

func (o *GetLimitRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetLimitRequest) Merge(source *GetLimitRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &limit.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(limit.Limit_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetLimitRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetLimitRequest))
}

func (o *BatchGetLimitsRequest) GotenObjectExt() {}

func (o *BatchGetLimitsRequest) MakeFullFieldMask() *BatchGetLimitsRequest_FieldMask {
	return FullBatchGetLimitsRequest_FieldMask()
}

func (o *BatchGetLimitsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetLimitsRequest_FieldMask()
}

func (o *BatchGetLimitsRequest) MakeDiffFieldMask(other *BatchGetLimitsRequest) *BatchGetLimitsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetLimitsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetLimitsRequest_FieldMask()
	}

	res := &BatchGetLimitsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetLimitsRequest_FieldTerminalPath{selector: BatchGetLimitsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetLimitsRequest_FieldTerminalPath{selector: BatchGetLimitsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetLimitsRequest_FieldTerminalPath{selector: BatchGetLimitsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetLimitsRequest_FieldTerminalPath{selector: BatchGetLimitsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetLimitsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetLimitsRequest))
}

func (o *BatchGetLimitsRequest) Clone() *BatchGetLimitsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetLimitsRequest{}
	result.Names = make([]*limit.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &limit.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*limit.Limit_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetLimitsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetLimitsRequest) Merge(source *BatchGetLimitsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *limit.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &limit.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(limit.Limit_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetLimitsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetLimitsRequest))
}

func (o *BatchGetLimitsResponse) GotenObjectExt() {}

func (o *BatchGetLimitsResponse) MakeFullFieldMask() *BatchGetLimitsResponse_FieldMask {
	return FullBatchGetLimitsResponse_FieldMask()
}

func (o *BatchGetLimitsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetLimitsResponse_FieldMask()
}

func (o *BatchGetLimitsResponse) MakeDiffFieldMask(other *BatchGetLimitsResponse) *BatchGetLimitsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetLimitsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetLimitsResponse_FieldMask()
	}

	res := &BatchGetLimitsResponse_FieldMask{}

	if len(o.GetLimits()) == len(other.GetLimits()) {
		for i, lValue := range o.GetLimits() {
			rValue := other.GetLimits()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetLimitsResponse_FieldTerminalPath{selector: BatchGetLimitsResponse_FieldPathSelectorLimits})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetLimitsResponse_FieldTerminalPath{selector: BatchGetLimitsResponse_FieldPathSelectorLimits})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetLimitsResponse_FieldTerminalPath{selector: BatchGetLimitsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetLimitsResponse_FieldTerminalPath{selector: BatchGetLimitsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetLimitsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetLimitsResponse))
}

func (o *BatchGetLimitsResponse) Clone() *BatchGetLimitsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetLimitsResponse{}
	result.Limits = make([]*limit.Limit, len(o.Limits))
	for i, sourceValue := range o.Limits {
		result.Limits[i] = sourceValue.Clone()
	}
	result.Missing = make([]*limit.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &limit.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetLimitsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetLimitsResponse) Merge(source *BatchGetLimitsResponse) {
	for _, sourceValue := range source.GetLimits() {
		exists := false
		for _, currentValue := range o.Limits {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *limit.Limit
			if sourceValue != nil {
				newDstElement = new(limit.Limit)
				newDstElement.Merge(sourceValue)
			}
			o.Limits = append(o.Limits, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *limit.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &limit.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetLimitsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetLimitsResponse))
}

func (o *ListLimitsRequest) GotenObjectExt() {}

func (o *ListLimitsRequest) MakeFullFieldMask() *ListLimitsRequest_FieldMask {
	return FullListLimitsRequest_FieldMask()
}

func (o *ListLimitsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListLimitsRequest_FieldMask()
}

func (o *ListLimitsRequest) MakeDiffFieldMask(other *ListLimitsRequest) *ListLimitsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListLimitsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListLimitsRequest_FieldMask()
	}

	res := &ListLimitsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListLimitsRequest_FieldTerminalPath{selector: ListLimitsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListLimitsRequest_FieldTerminalPath{selector: ListLimitsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListLimitsRequest_FieldTerminalPath{selector: ListLimitsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListLimitsRequest_FieldTerminalPath{selector: ListLimitsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListLimitsRequest_FieldTerminalPath{selector: ListLimitsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListLimitsRequest_FieldTerminalPath{selector: ListLimitsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListLimitsRequest_FieldTerminalPath{selector: ListLimitsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListLimitsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListLimitsRequest))
}

func (o *ListLimitsRequest) Clone() *ListLimitsRequest {
	if o == nil {
		return nil
	}
	result := &ListLimitsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &limit.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &limit.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &limit.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &limit.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*limit.Limit_FieldMask)
	result.View = o.View
	return result
}

func (o *ListLimitsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListLimitsRequest) Merge(source *ListLimitsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &limit.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &limit.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &limit.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &limit.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(limit.Limit_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListLimitsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListLimitsRequest))
}

func (o *ListLimitsResponse) GotenObjectExt() {}

func (o *ListLimitsResponse) MakeFullFieldMask() *ListLimitsResponse_FieldMask {
	return FullListLimitsResponse_FieldMask()
}

func (o *ListLimitsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListLimitsResponse_FieldMask()
}

func (o *ListLimitsResponse) MakeDiffFieldMask(other *ListLimitsResponse) *ListLimitsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListLimitsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListLimitsResponse_FieldMask()
	}

	res := &ListLimitsResponse_FieldMask{}

	if len(o.GetLimits()) == len(other.GetLimits()) {
		for i, lValue := range o.GetLimits() {
			rValue := other.GetLimits()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListLimitsResponse_FieldTerminalPath{selector: ListLimitsResponse_FieldPathSelectorLimits})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListLimitsResponse_FieldTerminalPath{selector: ListLimitsResponse_FieldPathSelectorLimits})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListLimitsResponse_FieldTerminalPath{selector: ListLimitsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListLimitsResponse_FieldTerminalPath{selector: ListLimitsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListLimitsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListLimitsResponse))
}

func (o *ListLimitsResponse) Clone() *ListLimitsResponse {
	if o == nil {
		return nil
	}
	result := &ListLimitsResponse{}
	result.Limits = make([]*limit.Limit, len(o.Limits))
	for i, sourceValue := range o.Limits {
		result.Limits[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &limit.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &limit.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListLimitsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListLimitsResponse) Merge(source *ListLimitsResponse) {
	for _, sourceValue := range source.GetLimits() {
		exists := false
		for _, currentValue := range o.Limits {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *limit.Limit
			if sourceValue != nil {
				newDstElement = new(limit.Limit)
				newDstElement.Merge(sourceValue)
			}
			o.Limits = append(o.Limits, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &limit.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &limit.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListLimitsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListLimitsResponse))
}

func (o *WatchLimitRequest) GotenObjectExt() {}

func (o *WatchLimitRequest) MakeFullFieldMask() *WatchLimitRequest_FieldMask {
	return FullWatchLimitRequest_FieldMask()
}

func (o *WatchLimitRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLimitRequest_FieldMask()
}

func (o *WatchLimitRequest) MakeDiffFieldMask(other *WatchLimitRequest) *WatchLimitRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchLimitRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLimitRequest_FieldMask()
	}

	res := &WatchLimitRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchLimitRequest_FieldTerminalPath{selector: WatchLimitRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchLimitRequest_FieldTerminalPath{selector: WatchLimitRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchLimitRequest_FieldTerminalPath{selector: WatchLimitRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchLimitRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLimitRequest))
}

func (o *WatchLimitRequest) Clone() *WatchLimitRequest {
	if o == nil {
		return nil
	}
	result := &WatchLimitRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &limit.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*limit.Limit_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchLimitRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLimitRequest) Merge(source *WatchLimitRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &limit.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(limit.Limit_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchLimitRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLimitRequest))
}

func (o *WatchLimitResponse) GotenObjectExt() {}

func (o *WatchLimitResponse) MakeFullFieldMask() *WatchLimitResponse_FieldMask {
	return FullWatchLimitResponse_FieldMask()
}

func (o *WatchLimitResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLimitResponse_FieldMask()
}

func (o *WatchLimitResponse) MakeDiffFieldMask(other *WatchLimitResponse) *WatchLimitResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchLimitResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLimitResponse_FieldMask()
	}

	res := &WatchLimitResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchLimitResponse_FieldTerminalPath{selector: WatchLimitResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchLimitResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLimitResponse))
}

func (o *WatchLimitResponse) Clone() *WatchLimitResponse {
	if o == nil {
		return nil
	}
	result := &WatchLimitResponse{}
	result.Change = proto.Clone(o.Change).(*limit.LimitChange)
	return result
}

func (o *WatchLimitResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLimitResponse) Merge(source *WatchLimitResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(limit.LimitChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchLimitResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLimitResponse))
}

func (o *WatchLimitsRequest) GotenObjectExt() {}

func (o *WatchLimitsRequest) MakeFullFieldMask() *WatchLimitsRequest_FieldMask {
	return FullWatchLimitsRequest_FieldMask()
}

func (o *WatchLimitsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLimitsRequest_FieldMask()
}

func (o *WatchLimitsRequest) MakeDiffFieldMask(other *WatchLimitsRequest) *WatchLimitsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchLimitsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLimitsRequest_FieldMask()
	}

	res := &WatchLimitsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchLimitsRequest_FieldTerminalPath{selector: WatchLimitsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchLimitsRequest_FieldTerminalPath{selector: WatchLimitsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchLimitsRequest_FieldTerminalPath{selector: WatchLimitsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchLimitsRequest_FieldTerminalPath{selector: WatchLimitsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchLimitsRequest_FieldTerminalPath{selector: WatchLimitsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchLimitsRequest_FieldTerminalPath{selector: WatchLimitsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchLimitsRequest_FieldTerminalPath{selector: WatchLimitsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchLimitsRequest_FieldTerminalPath{selector: WatchLimitsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchLimitsRequest_FieldTerminalPath{selector: WatchLimitsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchLimitsRequest_FieldTerminalPath{selector: WatchLimitsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchLimitsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLimitsRequest))
}

func (o *WatchLimitsRequest) Clone() *WatchLimitsRequest {
	if o == nil {
		return nil
	}
	result := &WatchLimitsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &limit.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &limit.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &limit.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &limit.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*limit.Limit_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchLimitsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLimitsRequest) Merge(source *WatchLimitsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &limit.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &limit.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &limit.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &limit.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(limit.Limit_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchLimitsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLimitsRequest))
}

func (o *WatchLimitsResponse) GotenObjectExt() {}

func (o *WatchLimitsResponse) MakeFullFieldMask() *WatchLimitsResponse_FieldMask {
	return FullWatchLimitsResponse_FieldMask()
}

func (o *WatchLimitsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLimitsResponse_FieldMask()
}

func (o *WatchLimitsResponse) MakeDiffFieldMask(other *WatchLimitsResponse) *WatchLimitsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchLimitsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLimitsResponse_FieldMask()
	}

	res := &WatchLimitsResponse_FieldMask{}

	if len(o.GetLimitChanges()) == len(other.GetLimitChanges()) {
		for i, lValue := range o.GetLimitChanges() {
			rValue := other.GetLimitChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchLimitsResponse_FieldTerminalPath{selector: WatchLimitsResponse_FieldPathSelectorLimitChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchLimitsResponse_FieldTerminalPath{selector: WatchLimitsResponse_FieldPathSelectorLimitChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchLimitsResponse_FieldTerminalPath{selector: WatchLimitsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchLimitsResponse_FieldTerminalPath{selector: WatchLimitsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchLimitsResponse_FieldSubPath{selector: WatchLimitsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchLimitsResponse_FieldTerminalPath{selector: WatchLimitsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchLimitsResponse_FieldTerminalPath{selector: WatchLimitsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchLimitsResponse_FieldTerminalPath{selector: WatchLimitsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchLimitsResponse_FieldTerminalPath{selector: WatchLimitsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchLimitsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLimitsResponse))
}

func (o *WatchLimitsResponse) Clone() *WatchLimitsResponse {
	if o == nil {
		return nil
	}
	result := &WatchLimitsResponse{}
	result.LimitChanges = make([]*limit.LimitChange, len(o.LimitChanges))
	for i, sourceValue := range o.LimitChanges {
		result.LimitChanges[i] = proto.Clone(sourceValue).(*limit.LimitChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchLimitsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLimitsResponse) Merge(source *WatchLimitsResponse) {
	for _, sourceValue := range source.GetLimitChanges() {
		exists := false
		for _, currentValue := range o.LimitChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *limit.LimitChange
			if sourceValue != nil {
				newDstElement = new(limit.LimitChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.LimitChanges = append(o.LimitChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchLimitsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchLimitsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLimitsResponse))
}

func (o *WatchLimitsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchLimitsResponse_PageTokenChange) MakeFullFieldMask() *WatchLimitsResponse_PageTokenChange_FieldMask {
	return FullWatchLimitsResponse_PageTokenChange_FieldMask()
}

func (o *WatchLimitsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchLimitsResponse_PageTokenChange_FieldMask()
}

func (o *WatchLimitsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchLimitsResponse_PageTokenChange) *WatchLimitsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchLimitsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchLimitsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchLimitsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchLimitsResponsePageTokenChange_FieldTerminalPath{selector: WatchLimitsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchLimitsResponsePageTokenChange_FieldTerminalPath{selector: WatchLimitsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchLimitsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchLimitsResponse_PageTokenChange))
}

func (o *WatchLimitsResponse_PageTokenChange) Clone() *WatchLimitsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchLimitsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &limit.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &limit.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchLimitsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchLimitsResponse_PageTokenChange) Merge(source *WatchLimitsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &limit.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &limit.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchLimitsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchLimitsResponse_PageTokenChange))
}

func (o *UpdateLimitRequest) GotenObjectExt() {}

func (o *UpdateLimitRequest) MakeFullFieldMask() *UpdateLimitRequest_FieldMask {
	return FullUpdateLimitRequest_FieldMask()
}

func (o *UpdateLimitRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateLimitRequest_FieldMask()
}

func (o *UpdateLimitRequest) MakeDiffFieldMask(other *UpdateLimitRequest) *UpdateLimitRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateLimitRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateLimitRequest_FieldMask()
	}

	res := &UpdateLimitRequest_FieldMask{}
	{
		subMask := o.GetLimit().MakeDiffFieldMask(other.GetLimit())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateLimitRequest_FieldTerminalPath{selector: UpdateLimitRequest_FieldPathSelectorLimit})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateLimitRequest_FieldSubPath{selector: UpdateLimitRequest_FieldPathSelectorLimit, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateLimitRequest_FieldTerminalPath{selector: UpdateLimitRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateLimitRequest_FieldTerminalPath{selector: UpdateLimitRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateLimitRequest_FieldSubPath{selector: UpdateLimitRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateLimitRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateLimitRequest))
}

func (o *UpdateLimitRequest) Clone() *UpdateLimitRequest {
	if o == nil {
		return nil
	}
	result := &UpdateLimitRequest{}
	result.Limit = o.Limit.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*limit.Limit_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateLimitRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateLimitRequest) Merge(source *UpdateLimitRequest) {
	if source.GetLimit() != nil {
		if o.Limit == nil {
			o.Limit = new(limit.Limit)
		}
		o.Limit.Merge(source.GetLimit())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(limit.Limit_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateLimitRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateLimitRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateLimitRequest))
}

func (o *UpdateLimitRequest_CAS) GotenObjectExt() {}

func (o *UpdateLimitRequest_CAS) MakeFullFieldMask() *UpdateLimitRequest_CAS_FieldMask {
	return FullUpdateLimitRequest_CAS_FieldMask()
}

func (o *UpdateLimitRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateLimitRequest_CAS_FieldMask()
}

func (o *UpdateLimitRequest_CAS) MakeDiffFieldMask(other *UpdateLimitRequest_CAS) *UpdateLimitRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateLimitRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateLimitRequest_CAS_FieldMask()
	}

	res := &UpdateLimitRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateLimitRequestCAS_FieldTerminalPath{selector: UpdateLimitRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateLimitRequestCAS_FieldSubPath{selector: UpdateLimitRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateLimitRequestCAS_FieldTerminalPath{selector: UpdateLimitRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateLimitRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateLimitRequest_CAS))
}

func (o *UpdateLimitRequest_CAS) Clone() *UpdateLimitRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateLimitRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*limit.Limit_FieldMask)
	return result
}

func (o *UpdateLimitRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateLimitRequest_CAS) Merge(source *UpdateLimitRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(limit.Limit)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(limit.Limit_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateLimitRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateLimitRequest_CAS))
}

func (o *DeleteLimitRequest) GotenObjectExt() {}

func (o *DeleteLimitRequest) MakeFullFieldMask() *DeleteLimitRequest_FieldMask {
	return FullDeleteLimitRequest_FieldMask()
}

func (o *DeleteLimitRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteLimitRequest_FieldMask()
}

func (o *DeleteLimitRequest) MakeDiffFieldMask(other *DeleteLimitRequest) *DeleteLimitRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteLimitRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteLimitRequest_FieldMask()
	}

	res := &DeleteLimitRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteLimitRequest_FieldTerminalPath{selector: DeleteLimitRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteLimitRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteLimitRequest))
}

func (o *DeleteLimitRequest) Clone() *DeleteLimitRequest {
	if o == nil {
		return nil
	}
	result := &DeleteLimitRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &limit.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteLimitRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteLimitRequest) Merge(source *DeleteLimitRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &limit.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteLimitRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteLimitRequest))
}
