// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/plan_service.proto
// DO NOT EDIT!!!

package plan_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &plan.Plan{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetPlanRequest) GotenObjectExt() {}

func (o *GetPlanRequest) MakeFullFieldMask() *GetPlanRequest_FieldMask {
	return FullGetPlanRequest_FieldMask()
}

func (o *GetPlanRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetPlanRequest_FieldMask()
}

func (o *GetPlanRequest) MakeDiffFieldMask(other *GetPlanRequest) *GetPlanRequest_FieldMask {
	if o == nil && other == nil {
		return &GetPlanRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetPlanRequest_FieldMask()
	}

	res := &GetPlanRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetPlanRequest_FieldTerminalPath{selector: GetPlanRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetPlanRequest_FieldTerminalPath{selector: GetPlanRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetPlanRequest_FieldTerminalPath{selector: GetPlanRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetPlanRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetPlanRequest))
}

func (o *GetPlanRequest) Clone() *GetPlanRequest {
	if o == nil {
		return nil
	}
	result := &GetPlanRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &plan.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan.Plan_FieldMask)
	result.View = o.View
	return result
}

func (o *GetPlanRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetPlanRequest) Merge(source *GetPlanRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &plan.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan.Plan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetPlanRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetPlanRequest))
}

func (o *BatchGetPlansRequest) GotenObjectExt() {}

func (o *BatchGetPlansRequest) MakeFullFieldMask() *BatchGetPlansRequest_FieldMask {
	return FullBatchGetPlansRequest_FieldMask()
}

func (o *BatchGetPlansRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPlansRequest_FieldMask()
}

func (o *BatchGetPlansRequest) MakeDiffFieldMask(other *BatchGetPlansRequest) *BatchGetPlansRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPlansRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPlansRequest_FieldMask()
	}

	res := &BatchGetPlansRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPlansRequest_FieldTerminalPath{selector: BatchGetPlansRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPlansRequest_FieldTerminalPath{selector: BatchGetPlansRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetPlansRequest_FieldTerminalPath{selector: BatchGetPlansRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetPlansRequest_FieldTerminalPath{selector: BatchGetPlansRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetPlansRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPlansRequest))
}

func (o *BatchGetPlansRequest) Clone() *BatchGetPlansRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetPlansRequest{}
	result.Names = make([]*plan.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &plan.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan.Plan_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetPlansRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPlansRequest) Merge(source *BatchGetPlansRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &plan.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan.Plan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetPlansRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPlansRequest))
}

func (o *BatchGetPlansResponse) GotenObjectExt() {}

func (o *BatchGetPlansResponse) MakeFullFieldMask() *BatchGetPlansResponse_FieldMask {
	return FullBatchGetPlansResponse_FieldMask()
}

func (o *BatchGetPlansResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPlansResponse_FieldMask()
}

func (o *BatchGetPlansResponse) MakeDiffFieldMask(other *BatchGetPlansResponse) *BatchGetPlansResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPlansResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPlansResponse_FieldMask()
	}

	res := &BatchGetPlansResponse_FieldMask{}

	if len(o.GetPlans()) == len(other.GetPlans()) {
		for i, lValue := range o.GetPlans() {
			rValue := other.GetPlans()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetPlansResponse_FieldTerminalPath{selector: BatchGetPlansResponse_FieldPathSelectorPlans})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPlansResponse_FieldTerminalPath{selector: BatchGetPlansResponse_FieldPathSelectorPlans})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPlansResponse_FieldTerminalPath{selector: BatchGetPlansResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPlansResponse_FieldTerminalPath{selector: BatchGetPlansResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetPlansResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPlansResponse))
}

func (o *BatchGetPlansResponse) Clone() *BatchGetPlansResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetPlansResponse{}
	result.Plans = make([]*plan.Plan, len(o.Plans))
	for i, sourceValue := range o.Plans {
		result.Plans[i] = sourceValue.Clone()
	}
	result.Missing = make([]*plan.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &plan.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetPlansResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPlansResponse) Merge(source *BatchGetPlansResponse) {
	for _, sourceValue := range source.GetPlans() {
		exists := false
		for _, currentValue := range o.Plans {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan.Plan
			if sourceValue != nil {
				newDstElement = new(plan.Plan)
				newDstElement.Merge(sourceValue)
			}
			o.Plans = append(o.Plans, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &plan.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetPlansResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPlansResponse))
}

func (o *ListPlansRequest) GotenObjectExt() {}

func (o *ListPlansRequest) MakeFullFieldMask() *ListPlansRequest_FieldMask {
	return FullListPlansRequest_FieldMask()
}

func (o *ListPlansRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPlansRequest_FieldMask()
}

func (o *ListPlansRequest) MakeDiffFieldMask(other *ListPlansRequest) *ListPlansRequest_FieldMask {
	if o == nil && other == nil {
		return &ListPlansRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPlansRequest_FieldMask()
	}

	res := &ListPlansRequest_FieldMask{}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListPlansRequest_FieldTerminalPath{selector: ListPlansRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListPlansRequest_FieldTerminalPath{selector: ListPlansRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListPlansRequest_FieldTerminalPath{selector: ListPlansRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListPlansRequest_FieldTerminalPath{selector: ListPlansRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListPlansRequest_FieldTerminalPath{selector: ListPlansRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListPlansRequest_FieldTerminalPath{selector: ListPlansRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListPlansRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPlansRequest))
}

func (o *ListPlansRequest) Clone() *ListPlansRequest {
	if o == nil {
		return nil
	}
	result := &ListPlansRequest{}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &plan.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &plan.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &plan.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan.Plan_FieldMask)
	result.View = o.View
	return result
}

func (o *ListPlansRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPlansRequest) Merge(source *ListPlansRequest) {
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &plan.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &plan.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &plan.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan.Plan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListPlansRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPlansRequest))
}

func (o *ListPlansResponse) GotenObjectExt() {}

func (o *ListPlansResponse) MakeFullFieldMask() *ListPlansResponse_FieldMask {
	return FullListPlansResponse_FieldMask()
}

func (o *ListPlansResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPlansResponse_FieldMask()
}

func (o *ListPlansResponse) MakeDiffFieldMask(other *ListPlansResponse) *ListPlansResponse_FieldMask {
	if o == nil && other == nil {
		return &ListPlansResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPlansResponse_FieldMask()
	}

	res := &ListPlansResponse_FieldMask{}

	if len(o.GetPlans()) == len(other.GetPlans()) {
		for i, lValue := range o.GetPlans() {
			rValue := other.GetPlans()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListPlansResponse_FieldTerminalPath{selector: ListPlansResponse_FieldPathSelectorPlans})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListPlansResponse_FieldTerminalPath{selector: ListPlansResponse_FieldPathSelectorPlans})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListPlansResponse_FieldTerminalPath{selector: ListPlansResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListPlansResponse_FieldTerminalPath{selector: ListPlansResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListPlansResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPlansResponse))
}

func (o *ListPlansResponse) Clone() *ListPlansResponse {
	if o == nil {
		return nil
	}
	result := &ListPlansResponse{}
	result.Plans = make([]*plan.Plan, len(o.Plans))
	for i, sourceValue := range o.Plans {
		result.Plans[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &plan.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &plan.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListPlansResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPlansResponse) Merge(source *ListPlansResponse) {
	for _, sourceValue := range source.GetPlans() {
		exists := false
		for _, currentValue := range o.Plans {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan.Plan
			if sourceValue != nil {
				newDstElement = new(plan.Plan)
				newDstElement.Merge(sourceValue)
			}
			o.Plans = append(o.Plans, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &plan.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &plan.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListPlansResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPlansResponse))
}

func (o *WatchPlanRequest) GotenObjectExt() {}

func (o *WatchPlanRequest) MakeFullFieldMask() *WatchPlanRequest_FieldMask {
	return FullWatchPlanRequest_FieldMask()
}

func (o *WatchPlanRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlanRequest_FieldMask()
}

func (o *WatchPlanRequest) MakeDiffFieldMask(other *WatchPlanRequest) *WatchPlanRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPlanRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlanRequest_FieldMask()
	}

	res := &WatchPlanRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchPlanRequest_FieldTerminalPath{selector: WatchPlanRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPlanRequest_FieldTerminalPath{selector: WatchPlanRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPlanRequest_FieldTerminalPath{selector: WatchPlanRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchPlanRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlanRequest))
}

func (o *WatchPlanRequest) Clone() *WatchPlanRequest {
	if o == nil {
		return nil
	}
	result := &WatchPlanRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &plan.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan.Plan_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchPlanRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlanRequest) Merge(source *WatchPlanRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &plan.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan.Plan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchPlanRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlanRequest))
}

func (o *WatchPlanResponse) GotenObjectExt() {}

func (o *WatchPlanResponse) MakeFullFieldMask() *WatchPlanResponse_FieldMask {
	return FullWatchPlanResponse_FieldMask()
}

func (o *WatchPlanResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlanResponse_FieldMask()
}

func (o *WatchPlanResponse) MakeDiffFieldMask(other *WatchPlanResponse) *WatchPlanResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPlanResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlanResponse_FieldMask()
	}

	res := &WatchPlanResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchPlanResponse_FieldTerminalPath{selector: WatchPlanResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchPlanResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlanResponse))
}

func (o *WatchPlanResponse) Clone() *WatchPlanResponse {
	if o == nil {
		return nil
	}
	result := &WatchPlanResponse{}
	result.Change = proto.Clone(o.Change).(*plan.PlanChange)
	return result
}

func (o *WatchPlanResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlanResponse) Merge(source *WatchPlanResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(plan.PlanChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchPlanResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlanResponse))
}

func (o *WatchPlansRequest) GotenObjectExt() {}

func (o *WatchPlansRequest) MakeFullFieldMask() *WatchPlansRequest_FieldMask {
	return FullWatchPlansRequest_FieldMask()
}

func (o *WatchPlansRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlansRequest_FieldMask()
}

func (o *WatchPlansRequest) MakeDiffFieldMask(other *WatchPlansRequest) *WatchPlansRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPlansRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlansRequest_FieldMask()
	}

	res := &WatchPlansRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorType})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchPlansRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlansRequest))
}

func (o *WatchPlansRequest) Clone() *WatchPlansRequest {
	if o == nil {
		return nil
	}
	result := &WatchPlansRequest{}
	result.Type = o.Type
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &plan.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &plan.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &plan.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan.Plan_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchPlansRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlansRequest) Merge(source *WatchPlansRequest) {
	o.Type = source.GetType()
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &plan.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &plan.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &plan.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan.Plan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchPlansRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlansRequest))
}

func (o *WatchPlansResponse) GotenObjectExt() {}

func (o *WatchPlansResponse) MakeFullFieldMask() *WatchPlansResponse_FieldMask {
	return FullWatchPlansResponse_FieldMask()
}

func (o *WatchPlansResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlansResponse_FieldMask()
}

func (o *WatchPlansResponse) MakeDiffFieldMask(other *WatchPlansResponse) *WatchPlansResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPlansResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlansResponse_FieldMask()
	}

	res := &WatchPlansResponse_FieldMask{}

	if len(o.GetPlanChanges()) == len(other.GetPlanChanges()) {
		for i, lValue := range o.GetPlanChanges() {
			rValue := other.GetPlanChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorPlanChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorPlanChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchPlansResponse_FieldSubPath{selector: WatchPlansResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchPlansResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlansResponse))
}

func (o *WatchPlansResponse) Clone() *WatchPlansResponse {
	if o == nil {
		return nil
	}
	result := &WatchPlansResponse{}
	result.PlanChanges = make([]*plan.PlanChange, len(o.PlanChanges))
	for i, sourceValue := range o.PlanChanges {
		result.PlanChanges[i] = proto.Clone(sourceValue).(*plan.PlanChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchPlansResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlansResponse) Merge(source *WatchPlansResponse) {
	for _, sourceValue := range source.GetPlanChanges() {
		exists := false
		for _, currentValue := range o.PlanChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan.PlanChange
			if sourceValue != nil {
				newDstElement = new(plan.PlanChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.PlanChanges = append(o.PlanChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchPlansResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchPlansResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlansResponse))
}

func (o *WatchPlansResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchPlansResponse_PageTokenChange) MakeFullFieldMask() *WatchPlansResponse_PageTokenChange_FieldMask {
	return FullWatchPlansResponse_PageTokenChange_FieldMask()
}

func (o *WatchPlansResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlansResponse_PageTokenChange_FieldMask()
}

func (o *WatchPlansResponse_PageTokenChange) MakeDiffFieldMask(other *WatchPlansResponse_PageTokenChange) *WatchPlansResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchPlansResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlansResponse_PageTokenChange_FieldMask()
	}

	res := &WatchPlansResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchPlansResponsePageTokenChange_FieldTerminalPath{selector: WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchPlansResponsePageTokenChange_FieldTerminalPath{selector: WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchPlansResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlansResponse_PageTokenChange))
}

func (o *WatchPlansResponse_PageTokenChange) Clone() *WatchPlansResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchPlansResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &plan.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &plan.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchPlansResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlansResponse_PageTokenChange) Merge(source *WatchPlansResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &plan.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &plan.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchPlansResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlansResponse_PageTokenChange))
}

func (o *CreatePlanRequest) GotenObjectExt() {}

func (o *CreatePlanRequest) MakeFullFieldMask() *CreatePlanRequest_FieldMask {
	return FullCreatePlanRequest_FieldMask()
}

func (o *CreatePlanRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreatePlanRequest_FieldMask()
}

func (o *CreatePlanRequest) MakeDiffFieldMask(other *CreatePlanRequest) *CreatePlanRequest_FieldMask {
	if o == nil && other == nil {
		return &CreatePlanRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreatePlanRequest_FieldMask()
	}

	res := &CreatePlanRequest_FieldMask{}
	{
		subMask := o.GetPlan().MakeDiffFieldMask(other.GetPlan())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreatePlanRequest_FieldTerminalPath{selector: CreatePlanRequest_FieldPathSelectorPlan})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreatePlanRequest_FieldSubPath{selector: CreatePlanRequest_FieldPathSelectorPlan, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreatePlanRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreatePlanRequest))
}

func (o *CreatePlanRequest) Clone() *CreatePlanRequest {
	if o == nil {
		return nil
	}
	result := &CreatePlanRequest{}
	result.Plan = o.Plan.Clone()
	return result
}

func (o *CreatePlanRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreatePlanRequest) Merge(source *CreatePlanRequest) {
	if source.GetPlan() != nil {
		if o.Plan == nil {
			o.Plan = new(plan.Plan)
		}
		o.Plan.Merge(source.GetPlan())
	}
}

func (o *CreatePlanRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreatePlanRequest))
}

func (o *UpdatePlanRequest) GotenObjectExt() {}

func (o *UpdatePlanRequest) MakeFullFieldMask() *UpdatePlanRequest_FieldMask {
	return FullUpdatePlanRequest_FieldMask()
}

func (o *UpdatePlanRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePlanRequest_FieldMask()
}

func (o *UpdatePlanRequest) MakeDiffFieldMask(other *UpdatePlanRequest) *UpdatePlanRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdatePlanRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePlanRequest_FieldMask()
	}

	res := &UpdatePlanRequest_FieldMask{}
	{
		subMask := o.GetPlan().MakeDiffFieldMask(other.GetPlan())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePlanRequest_FieldTerminalPath{selector: UpdatePlanRequest_FieldPathSelectorPlan})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePlanRequest_FieldSubPath{selector: UpdatePlanRequest_FieldPathSelectorPlan, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdatePlanRequest_FieldTerminalPath{selector: UpdatePlanRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePlanRequest_FieldTerminalPath{selector: UpdatePlanRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePlanRequest_FieldSubPath{selector: UpdatePlanRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdatePlanRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePlanRequest))
}

func (o *UpdatePlanRequest) Clone() *UpdatePlanRequest {
	if o == nil {
		return nil
	}
	result := &UpdatePlanRequest{}
	result.Plan = o.Plan.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*plan.Plan_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdatePlanRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePlanRequest) Merge(source *UpdatePlanRequest) {
	if source.GetPlan() != nil {
		if o.Plan == nil {
			o.Plan = new(plan.Plan)
		}
		o.Plan.Merge(source.GetPlan())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(plan.Plan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdatePlanRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdatePlanRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePlanRequest))
}

func (o *UpdatePlanRequest_CAS) GotenObjectExt() {}

func (o *UpdatePlanRequest_CAS) MakeFullFieldMask() *UpdatePlanRequest_CAS_FieldMask {
	return FullUpdatePlanRequest_CAS_FieldMask()
}

func (o *UpdatePlanRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePlanRequest_CAS_FieldMask()
}

func (o *UpdatePlanRequest_CAS) MakeDiffFieldMask(other *UpdatePlanRequest_CAS) *UpdatePlanRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdatePlanRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePlanRequest_CAS_FieldMask()
	}

	res := &UpdatePlanRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePlanRequestCAS_FieldTerminalPath{selector: UpdatePlanRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePlanRequestCAS_FieldSubPath{selector: UpdatePlanRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdatePlanRequestCAS_FieldTerminalPath{selector: UpdatePlanRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdatePlanRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePlanRequest_CAS))
}

func (o *UpdatePlanRequest_CAS) Clone() *UpdatePlanRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdatePlanRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*plan.Plan_FieldMask)
	return result
}

func (o *UpdatePlanRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePlanRequest_CAS) Merge(source *UpdatePlanRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(plan.Plan)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan.Plan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdatePlanRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePlanRequest_CAS))
}

func (o *DeletePlanRequest) GotenObjectExt() {}

func (o *DeletePlanRequest) MakeFullFieldMask() *DeletePlanRequest_FieldMask {
	return FullDeletePlanRequest_FieldMask()
}

func (o *DeletePlanRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeletePlanRequest_FieldMask()
}

func (o *DeletePlanRequest) MakeDiffFieldMask(other *DeletePlanRequest) *DeletePlanRequest_FieldMask {
	if o == nil && other == nil {
		return &DeletePlanRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeletePlanRequest_FieldMask()
	}

	res := &DeletePlanRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeletePlanRequest_FieldTerminalPath{selector: DeletePlanRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeletePlanRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeletePlanRequest))
}

func (o *DeletePlanRequest) Clone() *DeletePlanRequest {
	if o == nil {
		return nil
	}
	result := &DeletePlanRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &plan.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeletePlanRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeletePlanRequest) Merge(source *DeletePlanRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &plan.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeletePlanRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeletePlanRequest))
}
