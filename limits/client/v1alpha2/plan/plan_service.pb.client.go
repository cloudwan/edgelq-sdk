// Code generated by protoc-gen-goten-client
// API: PlanService
// DO NOT EDIT!!!

package plan_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &plan.Plan{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PlanServiceClient is the client API for PlanService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlanServiceClient interface {
	GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*plan.Plan, error)
	BatchGetPlans(ctx context.Context, in *BatchGetPlansRequest, opts ...grpc.CallOption) (*BatchGetPlansResponse, error)
	ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*ListPlansResponse, error)
	WatchPlan(ctx context.Context, in *WatchPlanRequest, opts ...grpc.CallOption) (WatchPlanClientStream, error)
	WatchPlans(ctx context.Context, in *WatchPlansRequest, opts ...grpc.CallOption) (WatchPlansClientStream, error)
	CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*plan.Plan, error)
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*plan.Plan, error)
	DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewPlanServiceClient(cc grpc.ClientConnInterface) PlanServiceClient {
	return &client{cc}
}

func (c *client) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*plan.Plan, error) {
	out := new(plan.Plan)
	err := c.cc.Invoke(ctx, "/ntt.limits.v1alpha2.PlanService/GetPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetPlans(ctx context.Context, in *BatchGetPlansRequest, opts ...grpc.CallOption) (*BatchGetPlansResponse, error) {
	out := new(BatchGetPlansResponse)
	err := c.cc.Invoke(ctx, "/ntt.limits.v1alpha2.PlanService/BatchGetPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*ListPlansResponse, error) {
	out := new(ListPlansResponse)
	err := c.cc.Invoke(ctx, "/ntt.limits.v1alpha2.PlanService/ListPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchPlan(ctx context.Context, in *WatchPlanRequest, opts ...grpc.CallOption) (WatchPlanClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPlan",
			ServerStreams: true,
		},
		"/ntt.limits.v1alpha2.PlanService/WatchPlan", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPlanWatchPlanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPlanClientStream interface {
	Recv() (*WatchPlanResponse, error)
	grpc.ClientStream
}

type watchPlanWatchPlanClient struct {
	grpc.ClientStream
}

func (x *watchPlanWatchPlanClient) Recv() (*WatchPlanResponse, error) {
	m := new(WatchPlanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchPlans(ctx context.Context, in *WatchPlansRequest, opts ...grpc.CallOption) (WatchPlansClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPlans",
			ServerStreams: true,
		},
		"/ntt.limits.v1alpha2.PlanService/WatchPlans", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPlansWatchPlansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPlansClientStream interface {
	Recv() (*WatchPlansResponse, error)
	grpc.ClientStream
}

type watchPlansWatchPlansClient struct {
	grpc.ClientStream
}

func (x *watchPlansWatchPlansClient) Recv() (*WatchPlansResponse, error) {
	m := new(WatchPlansResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*plan.Plan, error) {
	out := new(plan.Plan)
	err := c.cc.Invoke(ctx, "/ntt.limits.v1alpha2.PlanService/CreatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*plan.Plan, error) {
	out := new(plan.Plan)
	err := c.cc.Invoke(ctx, "/ntt.limits.v1alpha2.PlanService/UpdatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.limits.v1alpha2.PlanService/DeletePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
