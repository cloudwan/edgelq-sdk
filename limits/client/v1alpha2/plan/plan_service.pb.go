// Code generated by protoc-gen-goten-go
// File: edgelq/limits/proto/v1alpha2/plan_service.proto
// DO NOT EDIT!!!

package plan_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &plan.Plan{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method [GetPlan][ntt.limits.v1alpha2.GetPlan]
type GetPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.limits.v1alpha2.Plan
	Name *plan.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *plan.Plan_FieldMask `protobuf:"bytes,3,opt,customtype=Plan_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *GetPlanRequest) Reset() {
	*m = GetPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *GetPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*GetPlanRequest) ProtoMessage() {}

func (m *GetPlanRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*GetPlanRequest) GotenMessage() {}

// Deprecated, Use GetPlanRequest.ProtoReflect.Descriptor instead.
func (*GetPlanRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{0}
}

func (m *GetPlanRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *GetPlanRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *GetPlanRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *GetPlanRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *GetPlanRequest) GetName() *plan.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *GetPlanRequest) GetFieldMask() *plan.Plan_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *GetPlanRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *GetPlanRequest) SetName(fv *plan.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "GetPlanRequest"))
	}
	m.Name = fv
}

func (m *GetPlanRequest) SetFieldMask(fv *plan.Plan_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "GetPlanRequest"))
	}
	m.FieldMask = fv
}

func (m *GetPlanRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "GetPlanRequest"))
	}
	m.View = fv
}

// Request message for method [BatchGetPlans][ntt.limits.v1alpha2.BatchGetPlans]
type BatchGetPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Names of Plans
	Names []*plan.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=names,proto3" json:"names,omitempty" firestore:"names"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *plan.Plan_FieldMask `protobuf:"bytes,3,opt,customtype=Plan_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *BatchGetPlansRequest) Reset() {
	*m = BatchGetPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetPlansRequest) ProtoMessage() {}

func (m *BatchGetPlansRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetPlansRequest) GotenMessage() {}

// Deprecated, Use BatchGetPlansRequest.ProtoReflect.Descriptor instead.
func (*BatchGetPlansRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{1}
}

func (m *BatchGetPlansRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetPlansRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetPlansRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetPlansRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetPlansRequest) GetNames() []*plan.Reference {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *BatchGetPlansRequest) GetFieldMask() *plan.Plan_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *BatchGetPlansRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *BatchGetPlansRequest) SetNames(fv []*plan.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Names", "BatchGetPlansRequest"))
	}
	m.Names = fv
}

func (m *BatchGetPlansRequest) SetFieldMask(fv *plan.Plan_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "BatchGetPlansRequest"))
	}
	m.FieldMask = fv
}

func (m *BatchGetPlansRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "BatchGetPlansRequest"))
	}
	m.View = fv
}

// BatchGetPlansResponse
type BatchGetPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// found Plans
	Plans []*plan.Plan `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty" firestore:"plans"`
	// list of not found Plans
	Missing []*plan.Reference `protobuf:"bytes,2,rep,customtype=Reference,name=missing,proto3" json:"missing,omitempty" firestore:"missing"`
}

func (m *BatchGetPlansResponse) Reset() {
	*m = BatchGetPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *BatchGetPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*BatchGetPlansResponse) ProtoMessage() {}

func (m *BatchGetPlansResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*BatchGetPlansResponse) GotenMessage() {}

// Deprecated, Use BatchGetPlansResponse.ProtoReflect.Descriptor instead.
func (*BatchGetPlansResponse) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{2}
}

func (m *BatchGetPlansResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *BatchGetPlansResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *BatchGetPlansResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *BatchGetPlansResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *BatchGetPlansResponse) GetPlans() []*plan.Plan {
	if m != nil {
		return m.Plans
	}
	return nil
}

func (m *BatchGetPlansResponse) GetMissing() []*plan.Reference {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *BatchGetPlansResponse) SetPlans(fv []*plan.Plan) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Plans", "BatchGetPlansResponse"))
	}
	m.Plans = fv
}

func (m *BatchGetPlansResponse) SetMissing(fv []*plan.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Missing", "BatchGetPlansResponse"))
	}
	m.Missing = fv
}

// Request message for method [ListPlans][ntt.limits.v1alpha2.ListPlans]
type ListPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Requested page size. Server may return fewer Plans than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListPlansResponse.next_page_token][ntt.limits.v1alpha2.ListPlansResponse.next_page_token]
	PageToken *plan.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *plan.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *plan.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *plan.Plan_FieldMask `protobuf:"bytes,6,opt,customtype=Plan_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *ListPlansRequest) Reset() {
	*m = ListPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListPlansRequest) ProtoMessage() {}

func (m *ListPlansRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListPlansRequest) GotenMessage() {}

// Deprecated, Use ListPlansRequest.ProtoReflect.Descriptor instead.
func (*ListPlansRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{3}
}

func (m *ListPlansRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListPlansRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListPlansRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListPlansRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListPlansRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListPlansRequest) GetPageToken() *plan.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListPlansRequest) GetOrderBy() *plan.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListPlansRequest) GetFilter() *plan.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListPlansRequest) GetFieldMask() *plan.Plan_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListPlansRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListPlansRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListPlansRequest"))
	}
	m.PageSize = fv
}

func (m *ListPlansRequest) SetPageToken(fv *plan.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListPlansRequest"))
	}
	m.PageToken = fv
}

func (m *ListPlansRequest) SetOrderBy(fv *plan.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListPlansRequest"))
	}
	m.OrderBy = fv
}

func (m *ListPlansRequest) SetFilter(fv *plan.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListPlansRequest"))
	}
	m.Filter = fv
}

func (m *ListPlansRequest) SetFieldMask(fv *plan.Plan_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListPlansRequest"))
	}
	m.FieldMask = fv
}

func (m *ListPlansRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListPlansRequest"))
	}
	m.View = fv
}

// Request message for method [ListPlans][ntt.limits.v1alpha2.ListPlans]
type ListPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The list of Plans
	Plans []*plan.Plan `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty" firestore:"plans"`
	// A token to retrieve previous page of results. Pass this value in the
	// [ListPlansRequest.page_token][ntt.limits.v1alpha2.ListPlansRequest.page_token]
	PrevPageToken *plan.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// A token to retrieve next page of results. Pass this value in the
	// [ListPlansRequest.page_token][ntt.limits.v1alpha2.ListPlansRequest.page_token]
	NextPageToken *plan.PagerCursor `protobuf:"bytes,4,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *ListPlansResponse) Reset() {
	*m = ListPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListPlansResponse) ProtoMessage() {}

func (m *ListPlansResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListPlansResponse) GotenMessage() {}

// Deprecated, Use ListPlansResponse.ProtoReflect.Descriptor instead.
func (*ListPlansResponse) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{4}
}

func (m *ListPlansResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListPlansResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListPlansResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListPlansResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListPlansResponse) GetPlans() []*plan.Plan {
	if m != nil {
		return m.Plans
	}
	return nil
}

func (m *ListPlansResponse) GetPrevPageToken() *plan.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *ListPlansResponse) GetNextPageToken() *plan.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListPlansResponse) SetPlans(fv []*plan.Plan) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Plans", "ListPlansResponse"))
	}
	m.Plans = fv
}

func (m *ListPlansResponse) SetPrevPageToken(fv *plan.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "ListPlansResponse"))
	}
	m.PrevPageToken = fv
}

func (m *ListPlansResponse) SetNextPageToken(fv *plan.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "ListPlansResponse"))
	}
	m.NextPageToken = fv
}

// Request message for method [WatchPlan][ntt.limits.v1alpha2.WatchPlan]
type WatchPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference to ntt.limits.v1alpha2.Plan
	Name *plan.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *plan.Plan_FieldMask `protobuf:"bytes,2,opt,customtype=Plan_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,4,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
}

func (m *WatchPlanRequest) Reset() {
	*m = WatchPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPlanRequest) ProtoMessage() {}

func (m *WatchPlanRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPlanRequest) GotenMessage() {}

// Deprecated, Use WatchPlanRequest.ProtoReflect.Descriptor instead.
func (*WatchPlanRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{5}
}

func (m *WatchPlanRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPlanRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPlanRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPlanRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPlanRequest) GetName() *plan.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *WatchPlanRequest) GetFieldMask() *plan.Plan_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchPlanRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchPlanRequest) SetName(fv *plan.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "WatchPlanRequest"))
	}
	m.Name = fv
}

func (m *WatchPlanRequest) SetFieldMask(fv *plan.Plan_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchPlanRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchPlanRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchPlanRequest"))
	}
	m.View = fv
}

// WatchPlanResponse
type WatchPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Change        *plan.PlanChange `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty" firestore:"change"`
}

func (m *WatchPlanResponse) Reset() {
	*m = WatchPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPlanResponse) ProtoMessage() {}

func (m *WatchPlanResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPlanResponse) GotenMessage() {}

// Deprecated, Use WatchPlanResponse.ProtoReflect.Descriptor instead.
func (*WatchPlanResponse) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{6}
}

func (m *WatchPlanResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPlanResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPlanResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPlanResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPlanResponse) GetChange() *plan.PlanChange {
	if m != nil {
		return m.Change
	}
	return nil
}

func (m *WatchPlanResponse) SetChange(fv *plan.PlanChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Change", "WatchPlanResponse"))
	}
	m.Change = fv
}

// Request message for method [WatchPlans][ntt.limits.v1alpha2.WatchPlans]
type WatchPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Type of a watch. Identifies how server stream data to a client, which
	// fields in a request are allowed and which fields in response are relevant.
	Type watch_type.WatchType `protobuf:"varint,9,opt,name=type,proto3,enum=goten.watch_type.WatchType" json:"type,omitempty" firestore:"type"`
	// Requested page size. Server may return fewer Plans than requested.
	// If unspecified, server will pick an appropriate default.
	// Can be populated only for stateful watch type.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Can be populated only for stateful watch type.
	PageToken *plan.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
	// populated only for stateful watch type.
	OrderBy *plan.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// A token identifying watch resume point from previous session.
	// Can be populated only for stateless watch type.
	ResumeToken string `protobuf:"bytes,10,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *plan.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view Changes to Plan that don't affect any
	// of masked fields won't be sent back.
	FieldMask *plan.Plan_FieldMask `protobuf:"bytes,6,opt,customtype=Plan_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask Changes to
	// Plan that don't affect any of masked fields won't be sent back.
	View view.View `protobuf:"varint,8,opt,name=view,proto3,enum=goten.view.View" json:"view,omitempty" firestore:"view"`
	// Maximum amount of changes in each response message. Query result response
	// is divided on the server side into chunks with size of a specified amount
	// to limit memory footprint of each message. Responses will hold information
	// whether more elements will continue for the actual change. If unspecified,
	// server will pick an appropriate default.
	MaxChunkSize int32 `protobuf:"varint,11,opt,name=max_chunk_size,json=maxChunkSize,proto3" json:"max_chunk_size,omitempty" firestore:"maxChunkSize"`
}

func (m *WatchPlansRequest) Reset() {
	*m = WatchPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPlansRequest) ProtoMessage() {}

func (m *WatchPlansRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPlansRequest) GotenMessage() {}

// Deprecated, Use WatchPlansRequest.ProtoReflect.Descriptor instead.
func (*WatchPlansRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{7}
}

func (m *WatchPlansRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPlansRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPlansRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPlansRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPlansRequest) GetType() watch_type.WatchType {
	if m != nil {
		return m.Type
	}
	return watch_type.WatchType_STATEFUL
}

func (m *WatchPlansRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *WatchPlansRequest) GetPageToken() *plan.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *WatchPlansRequest) GetOrderBy() *plan.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *WatchPlansRequest) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchPlansRequest) GetFilter() *plan.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *WatchPlansRequest) GetFieldMask() *plan.Plan_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *WatchPlansRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *WatchPlansRequest) GetMaxChunkSize() int32 {
	if m != nil {
		return m.MaxChunkSize
	}
	return int32(0)
}

func (m *WatchPlansRequest) SetType(fv watch_type.WatchType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "WatchPlansRequest"))
	}
	m.Type = fv
}

func (m *WatchPlansRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "WatchPlansRequest"))
	}
	m.PageSize = fv
}

func (m *WatchPlansRequest) SetPageToken(fv *plan.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "WatchPlansRequest"))
	}
	m.PageToken = fv
}

func (m *WatchPlansRequest) SetOrderBy(fv *plan.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "WatchPlansRequest"))
	}
	m.OrderBy = fv
}

func (m *WatchPlansRequest) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchPlansRequest"))
	}
	m.ResumeToken = fv
}

func (m *WatchPlansRequest) SetFilter(fv *plan.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "WatchPlansRequest"))
	}
	m.Filter = fv
}

func (m *WatchPlansRequest) SetFieldMask(fv *plan.Plan_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "WatchPlansRequest"))
	}
	m.FieldMask = fv
}

func (m *WatchPlansRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "WatchPlansRequest"))
	}
	m.View = fv
}

func (m *WatchPlansRequest) SetMaxChunkSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxChunkSize", "WatchPlansRequest"))
	}
	m.MaxChunkSize = fv
}

// WatchPlansResponse
type WatchPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Changes of Plans
	PlanChanges []*plan.PlanChange `protobuf:"bytes,2,rep,name=plan_changes,json=planChanges,proto3" json:"plan_changes,omitempty" firestore:"planChanges"`
	// If request specified max_chunk_size (or this limit was enforced if
	// stateless watch has been chosen), then responses with "full changeset" will
	// be divided into chunks. Client should keep receiving messages and, once
	// is_current has value true, combine this recent message with all previous
	// ones where is_current is false. If this is the first is_current in a whole
	// watch stream, then it means that client should have, at this moment,
	// contain snapshot of the current situation (or more accurately, snapshot of
	// situation at the moment of request). All Plans will be of type
	// Added/Current (depending on watch_type specified in the request). Further
	// responses will be incremental - however messages may still be chunked and
	// is_current logic still applies. is_current is always true for stateful
	// watch if max_chunk_size was left to 0.
	IsCurrent bool `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty" firestore:"isCurrent"`
	// When present, PageTokens used for page navigation should be updated.
	// Present only if is_current is true (last chunk).
	PageTokenChange *WatchPlansResponse_PageTokenChange `protobuf:"bytes,3,opt,name=page_token_change,json=pageTokenChange,proto3" json:"page_token_change,omitempty" firestore:"pageTokenChange"`
	// Token that can be used if current connection drops and client needs to
	// reconnect. Populated only for stateless watch type. Present only if
	// is_current is true (last chunk).
	ResumeToken string `protobuf:"bytes,5,opt,name=resume_token,json=resumeToken,proto3" json:"resume_token,omitempty" firestore:"resumeToken"`
	// Server may occasionally send information how many resources should client
	// have in its state so far (response message without any changes, but with
	// snapshot_size field specified). If client has different value than the one
	// sent by the server, then it should be treated by a client as an error and
	// should reconnect. If value is smaller then 0, then client should ignore
	// this field as unpopulated. This field should be checked only for stateless
	// watch. In stateful those kind of errors are handled by the server side.
	// Will be never sent together with is_current, is_soft_reset and
	// is_hard_reset flags.
	SnapshotSize int64 `protobuf:"varint,6,opt,name=snapshot_size,json=snapshotSize,proto3" json:"snapshot_size,omitempty" firestore:"snapshotSize"`
	// In case of internal issue server may send response message with this flag.
	// It indicates that client should drop all changes from recent responses
	// where is_current is false only! If last message had is_current set to true,
	// client should do nothing and process normally. Resume token received before
	// is still valid. This field should be checked only for stateless watch. In
	// stateful those kind of errors are handled by the server side. Will never be
	// sent along with is_current, is_hard_reset or snapshot_size.
	IsSoftReset bool `protobuf:"varint,7,opt,name=is_soft_reset,json=isSoftReset,proto3" json:"is_soft_reset,omitempty" firestore:"isSoftReset"`
	// In case of internal issue server may send response message with this flag.
	// After receiving, client should clear whole state (drop all changes received
	// so far) as server will send new snapshot (Plans will contains changes of
	// type Current only). Any resume tokens should be discarded as well. This
	// field should be checked only for stateless watch. In stateful those kind of
	// errors are handled by the server side. Will never be sent along with
	// is_current, is_soft_reset or snapshot_size.
	IsHardReset bool `protobuf:"varint,8,opt,name=is_hard_reset,json=isHardReset,proto3" json:"is_hard_reset,omitempty" firestore:"isHardReset"`
}

func (m *WatchPlansResponse) Reset() {
	*m = WatchPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPlansResponse) ProtoMessage() {}

func (m *WatchPlansResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPlansResponse) GotenMessage() {}

// Deprecated, Use WatchPlansResponse.ProtoReflect.Descriptor instead.
func (*WatchPlansResponse) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{8}
}

func (m *WatchPlansResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPlansResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPlansResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPlansResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPlansResponse) GetPlanChanges() []*plan.PlanChange {
	if m != nil {
		return m.PlanChanges
	}
	return nil
}

func (m *WatchPlansResponse) GetIsCurrent() bool {
	if m != nil {
		return m.IsCurrent
	}
	return false
}

func (m *WatchPlansResponse) GetPageTokenChange() *WatchPlansResponse_PageTokenChange {
	if m != nil {
		return m.PageTokenChange
	}
	return nil
}

func (m *WatchPlansResponse) GetResumeToken() string {
	if m != nil {
		return m.ResumeToken
	}
	return ""
}

func (m *WatchPlansResponse) GetSnapshotSize() int64 {
	if m != nil {
		return m.SnapshotSize
	}
	return int64(0)
}

func (m *WatchPlansResponse) GetIsSoftReset() bool {
	if m != nil {
		return m.IsSoftReset
	}
	return false
}

func (m *WatchPlansResponse) GetIsHardReset() bool {
	if m != nil {
		return m.IsHardReset
	}
	return false
}

func (m *WatchPlansResponse) SetPlanChanges(fv []*plan.PlanChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PlanChanges", "WatchPlansResponse"))
	}
	m.PlanChanges = fv
}

func (m *WatchPlansResponse) SetIsCurrent(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsCurrent", "WatchPlansResponse"))
	}
	m.IsCurrent = fv
}

func (m *WatchPlansResponse) SetPageTokenChange(fv *WatchPlansResponse_PageTokenChange) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageTokenChange", "WatchPlansResponse"))
	}
	m.PageTokenChange = fv
}

func (m *WatchPlansResponse) SetResumeToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResumeToken", "WatchPlansResponse"))
	}
	m.ResumeToken = fv
}

func (m *WatchPlansResponse) SetSnapshotSize(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SnapshotSize", "WatchPlansResponse"))
	}
	m.SnapshotSize = fv
}

func (m *WatchPlansResponse) SetIsSoftReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsSoftReset", "WatchPlansResponse"))
	}
	m.IsSoftReset = fv
}

func (m *WatchPlansResponse) SetIsHardReset(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsHardReset", "WatchPlansResponse"))
	}
	m.IsHardReset = fv
}

// Request message for method [CreatePlan][ntt.limits.v1alpha2.CreatePlan]
type CreatePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Plan resource body
	Plan *plan.Plan `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty" firestore:"plan"`
}

func (m *CreatePlanRequest) Reset() {
	*m = CreatePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *CreatePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*CreatePlanRequest) ProtoMessage() {}

func (m *CreatePlanRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*CreatePlanRequest) GotenMessage() {}

// Deprecated, Use CreatePlanRequest.ProtoReflect.Descriptor instead.
func (*CreatePlanRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{9}
}

func (m *CreatePlanRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *CreatePlanRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *CreatePlanRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *CreatePlanRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *CreatePlanRequest) GetPlan() *plan.Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *CreatePlanRequest) SetPlan(fv *plan.Plan) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Plan", "CreatePlanRequest"))
	}
	m.Plan = fv
}

// Request message for method [UpdatePlan][ntt.limits.v1alpha2.UpdatePlan]
type UpdatePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Plan resource body
	Plan *plan.Plan `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty" firestore:"plan"`
	// FieldMask applied to request - change will be applied only for fields in
	// the mask
	UpdateMask *plan.Plan_FieldMask `protobuf:"bytes,3,opt,customtype=Plan_FieldMask,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty" firestore:"updateMask"`
	// Conditional update applied to request if update should be executed only for
	// specific resource state. If this field is populated, then server will fetch
	// existing resource, compare with the one stored in the cas field (after
	// applying field mask) and proceed with update only and only if they match.
	// Otherwise RPC error Aborted will be returned.
	Cas *UpdatePlanRequest_CAS `protobuf:"bytes,4,opt,name=cas,proto3" json:"cas,omitempty" firestore:"cas"`
}

func (m *UpdatePlanRequest) Reset() {
	*m = UpdatePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdatePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdatePlanRequest) ProtoMessage() {}

func (m *UpdatePlanRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdatePlanRequest) GotenMessage() {}

// Deprecated, Use UpdatePlanRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlanRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdatePlanRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdatePlanRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdatePlanRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdatePlanRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdatePlanRequest) GetPlan() *plan.Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *UpdatePlanRequest) GetUpdateMask() *plan.Plan_FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdatePlanRequest) GetCas() *UpdatePlanRequest_CAS {
	if m != nil {
		return m.Cas
	}
	return nil
}

func (m *UpdatePlanRequest) SetPlan(fv *plan.Plan) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Plan", "UpdatePlanRequest"))
	}
	m.Plan = fv
}

func (m *UpdatePlanRequest) SetUpdateMask(fv *plan.Plan_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateMask", "UpdatePlanRequest"))
	}
	m.UpdateMask = fv
}

func (m *UpdatePlanRequest) SetCas(fv *UpdatePlanRequest_CAS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cas", "UpdatePlanRequest"))
	}
	m.Cas = fv
}

// Request message for method [DeletePlan][ntt.limits.v1alpha2.DeletePlan]
type DeletePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Reference of ntt.limits.v1alpha2.Plan
	Name *plan.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *DeletePlanRequest) Reset() {
	*m = DeletePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeletePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeletePlanRequest) ProtoMessage() {}

func (m *DeletePlanRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeletePlanRequest) GotenMessage() {}

// Deprecated, Use DeletePlanRequest.ProtoReflect.Descriptor instead.
func (*DeletePlanRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{11}
}

func (m *DeletePlanRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeletePlanRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeletePlanRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeletePlanRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeletePlanRequest) GetName() *plan.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeletePlanRequest) SetName(fv *plan.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeletePlanRequest"))
	}
	m.Name = fv
}

type WatchPlansResponse_PageTokenChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// New token to retrieve previous page of results.
	PrevPageToken *plan.PagerCursor `protobuf:"bytes,1,opt,customtype=PagerCursor,name=prev_page_token,json=prevPageToken,proto3" json:"prev_page_token,omitempty" firestore:"prevPageToken"`
	// New token to retrieve next page of results.
	NextPageToken *plan.PagerCursor `protobuf:"bytes,2,opt,customtype=PagerCursor,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty" firestore:"nextPageToken"`
}

func (m *WatchPlansResponse_PageTokenChange) Reset() {
	*m = WatchPlansResponse_PageTokenChange{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WatchPlansResponse_PageTokenChange) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WatchPlansResponse_PageTokenChange) ProtoMessage() {}

func (m *WatchPlansResponse_PageTokenChange) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WatchPlansResponse_PageTokenChange) GotenMessage() {}

// Deprecated, Use WatchPlansResponse_PageTokenChange.ProtoReflect.Descriptor instead.
func (*WatchPlansResponse_PageTokenChange) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{8, 0}
}

func (m *WatchPlansResponse_PageTokenChange) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WatchPlansResponse_PageTokenChange) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WatchPlansResponse_PageTokenChange) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WatchPlansResponse_PageTokenChange) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WatchPlansResponse_PageTokenChange) GetPrevPageToken() *plan.PagerCursor {
	if m != nil {
		return m.PrevPageToken
	}
	return nil
}

func (m *WatchPlansResponse_PageTokenChange) GetNextPageToken() *plan.PagerCursor {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *WatchPlansResponse_PageTokenChange) SetPrevPageToken(fv *plan.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrevPageToken", "WatchPlansResponse_PageTokenChange"))
	}
	m.PrevPageToken = fv
}

func (m *WatchPlansResponse_PageTokenChange) SetNextPageToken(fv *plan.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NextPageToken", "WatchPlansResponse_PageTokenChange"))
	}
	m.NextPageToken = fv
}

// CAS - Compare and Swap. This object is used if user wants to make update
// conditional based upon previous resource version.
type UpdatePlanRequest_CAS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Conditional desired state of a resource before update.
	ConditionalState *plan.Plan `protobuf:"bytes,1,opt,name=conditional_state,json=conditionalState,proto3" json:"conditional_state,omitempty" firestore:"conditionalState"`
	// Field paths from conditional state of resource server should check and
	// compare.
	FieldMask *plan.Plan_FieldMask `protobuf:"bytes,2,opt,customtype=Plan_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
}

func (m *UpdatePlanRequest_CAS) Reset() {
	*m = UpdatePlanRequest_CAS{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *UpdatePlanRequest_CAS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*UpdatePlanRequest_CAS) ProtoMessage() {}

func (m *UpdatePlanRequest_CAS) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*UpdatePlanRequest_CAS) GotenMessage() {}

// Deprecated, Use UpdatePlanRequest_CAS.ProtoReflect.Descriptor instead.
func (*UpdatePlanRequest_CAS) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *UpdatePlanRequest_CAS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *UpdatePlanRequest_CAS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *UpdatePlanRequest_CAS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *UpdatePlanRequest_CAS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *UpdatePlanRequest_CAS) GetConditionalState() *plan.Plan {
	if m != nil {
		return m.ConditionalState
	}
	return nil
}

func (m *UpdatePlanRequest_CAS) GetFieldMask() *plan.Plan_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *UpdatePlanRequest_CAS) SetConditionalState(fv *plan.Plan) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConditionalState", "UpdatePlanRequest_CAS"))
	}
	m.ConditionalState = fv
}

func (m *UpdatePlanRequest_CAS) SetFieldMask(fv *plan.Plan_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "UpdatePlanRequest_CAS"))
	}
	m.FieldMask = fv
}

var edgelq_limits_proto_v1alpha2_plan_service_proto preflect.FileDescriptor

var edgelq_limits_proto_v1alpha2_plan_service_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x65, 0x64,
	0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xda, 0x21, 0x08, 0x12, 0x06, 0x0a, 0x04,
	0x50, 0x6c, 0x61, 0x6e, 0xba, 0x9d, 0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c,
	0xb2, 0xda, 0x21, 0x08, 0x32, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xaf, 0x01,
	0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08,
	0x32, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22,
	0x70, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08,
	0x12, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x22, 0xa6, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12,
	0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x22, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xb2, 0xda, 0x21, 0x08, 0x2a, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x1a, 0x06, 0x0a, 0x04, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21,
	0x08, 0x32, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xb0, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08,
	0x22, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x22, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa7, 0x01,
	0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xb2, 0xda, 0x21, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0xba, 0x9d,
	0x22, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32, 0x06,
	0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x24, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x4c, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xb7, 0x03, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x22,
	0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x2a, 0x06, 0x0a, 0x04, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xb2, 0xda, 0x21, 0x08, 0x1a, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32, 0x06, 0x0a, 0x04, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x3a, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xca, 0xc6, 0x27,
	0x06, 0x12, 0x04, 0x2a, 0x02, 0x08, 0x00, 0xca, 0xc6, 0x27, 0x06, 0x12, 0x04, 0x1a, 0x02, 0x08,
	0x64, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xeb, 0x03, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x11, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x66,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x53, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x7d,
	0x0a, 0x0f, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08,
	0x22, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x22, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6c, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x0c, 0xca, 0xc6, 0x27,
	0x04, 0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x3a,
	0x1a, 0xc2, 0x85, 0x2c, 0x16, 0x32, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x3a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x04,
	0x62, 0x02, 0x08, 0x01, 0xc8, 0xd5, 0x22, 0x01, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x49,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3c, 0x0a, 0x03, 0x63, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x41, 0x53, 0x52, 0x03, 0x63, 0x61, 0x73, 0x1a, 0x96, 0x01, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x12,
	0x46, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xb2, 0xda, 0x21, 0x08, 0x32, 0x06, 0x0a,
	0x04, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x3a, 0x1a, 0xc2, 0x85, 0x2c, 0x16, 0x32, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x3a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xb2, 0xda, 0x21, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0xba, 0x9d, 0x22,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x10, 0xc2, 0x85, 0x2c, 0x0c, 0x32, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x3a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xe8, 0x0c, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x65, 0x82, 0xdb, 0x21, 0x1b, 0x0a, 0x04, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x03, 0x67, 0x65, 0x74, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22, 0x18,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x67, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0xdc, 0x01, 0x0a,
	0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x29,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x82, 0xdb, 0x21, 0x24, 0x0a, 0x04, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x20, 0x01, 0x2a, 0x07, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x32, 0x07, 0x12, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0xa2,
	0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x3a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x92, 0x97, 0x22, 0x1e, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x15, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0xc8, 0xd5, 0x22, 0x00, 0x12, 0xb3, 0x01, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xdb, 0x21, 0x1b, 0x0a, 0x04,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x00,
	0x32, 0x07, 0x12, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x92, 0x97, 0x22, 0x13, 0x12, 0x11, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0xc8, 0xd5, 0x22,
	0x00, 0x12, 0xcf, 0x01, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71,
	0x82, 0xdb, 0x21, 0x1f, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x05, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x2a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x08, 0x12, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22,
	0x1e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x92,
	0x97, 0x22, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22,
	0x00, 0x30, 0x01, 0x12, 0xc7, 0x01, 0x0a, 0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x12, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x66, 0x82, 0xdb, 0x21, 0x23, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x2a, 0x00, 0x32, 0x0e, 0x12, 0x0c,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0xa2, 0xdc, 0x21, 0x02,
	0x08, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x92,
	0x97, 0x22, 0x14, 0x12, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x73, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0xc8, 0xd5, 0x22, 0x00, 0x30, 0x01, 0x12, 0xb9, 0x01,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x26, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x22,
	0x68, 0x82, 0xdb, 0x21, 0x20, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x06, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x2a, 0x06, 0x12, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x32, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x3a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x92, 0x97, 0x22, 0x15, 0x12, 0x13, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x12, 0xd0, 0x01, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x7f, 0x82, 0xdb, 0x21,
	0x1e, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2a,
	0x06, 0x12, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x32, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2,
	0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x04, 0x70, 0x6c, 0x61,
	0x6e, 0x1a, 0x1d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b, 0x70, 0x6c,
	0x61, 0x6e, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x92, 0x97, 0x22, 0x20, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01, 0xd0, 0xd5, 0x22, 0x03, 0x12, 0xb5, 0x01, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x26, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x67, 0x82, 0xdb, 0x21,
	0x16, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2a,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xa2, 0xdc, 0x21, 0x02, 0x10, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x92, 0x97, 0x22,
	0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0xc8, 0xd5, 0x22, 0x01,
	0xd0, 0xd5, 0x22, 0x03, 0x1a, 0x2e, 0xca, 0x41, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x17, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2e, 0x63, 0x6f, 0x6d, 0x42, 0xda, 0x02, 0xe8, 0xde, 0x21, 0x01, 0x82, 0xff, 0xd0, 0x02, 0x45,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x8a, 0xff, 0xd0, 0x02, 0x45, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x0a,
	0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e,
	0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x10, 0x50, 0x6c, 0x61,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a,
	0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x3b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0xd2, 0x84, 0xd1, 0x02, 0x49, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescOnce sync.Once
	edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescData = edgelq_limits_proto_v1alpha2_plan_service_proto_rawDesc
)

func edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescGZIP() []byte {
	edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescOnce.Do(func() {
		edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescData)
	})
	return edgelq_limits_proto_v1alpha2_plan_service_proto_rawDescData
}

var edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var edgelq_limits_proto_v1alpha2_plan_service_proto_goTypes = []interface{}{
	(*GetPlanRequest)(nil),                     // 0: ntt.limits.v1alpha2.GetPlanRequest
	(*BatchGetPlansRequest)(nil),               // 1: ntt.limits.v1alpha2.BatchGetPlansRequest
	(*BatchGetPlansResponse)(nil),              // 2: ntt.limits.v1alpha2.BatchGetPlansResponse
	(*ListPlansRequest)(nil),                   // 3: ntt.limits.v1alpha2.ListPlansRequest
	(*ListPlansResponse)(nil),                  // 4: ntt.limits.v1alpha2.ListPlansResponse
	(*WatchPlanRequest)(nil),                   // 5: ntt.limits.v1alpha2.WatchPlanRequest
	(*WatchPlanResponse)(nil),                  // 6: ntt.limits.v1alpha2.WatchPlanResponse
	(*WatchPlansRequest)(nil),                  // 7: ntt.limits.v1alpha2.WatchPlansRequest
	(*WatchPlansResponse)(nil),                 // 8: ntt.limits.v1alpha2.WatchPlansResponse
	(*CreatePlanRequest)(nil),                  // 9: ntt.limits.v1alpha2.CreatePlanRequest
	(*UpdatePlanRequest)(nil),                  // 10: ntt.limits.v1alpha2.UpdatePlanRequest
	(*DeletePlanRequest)(nil),                  // 11: ntt.limits.v1alpha2.DeletePlanRequest
	(*WatchPlansResponse_PageTokenChange)(nil), // 12: ntt.limits.v1alpha2.WatchPlansResponse.PageTokenChange
	(*UpdatePlanRequest_CAS)(nil),              // 13: ntt.limits.v1alpha2.UpdatePlanRequest.CAS
	(*plan.Plan_FieldMask)(nil),                // 14: ntt.limits.v1alpha2.Plan_FieldMask
	(view.View)(0),                             // 15: goten.view.View
	(*plan.Plan)(nil),                          // 16: ntt.limits.v1alpha2.Plan
	(*plan.PlanChange)(nil),                    // 17: ntt.limits.v1alpha2.PlanChange
	(watch_type.WatchType)(0),                  // 18: goten.watch_type.WatchType
	(*empty.Empty)(nil),                        // 19: google.protobuf.Empty
}
var edgelq_limits_proto_v1alpha2_plan_service_proto_depIdxs = []int32{
	14, // 0: ntt.limits.v1alpha2.GetPlanRequest.field_mask:type_name -> ntt.limits.v1alpha2.Plan_FieldMask
	15, // 1: ntt.limits.v1alpha2.GetPlanRequest.view:type_name -> goten.view.View
	14, // 2: ntt.limits.v1alpha2.BatchGetPlansRequest.field_mask:type_name -> ntt.limits.v1alpha2.Plan_FieldMask
	15, // 3: ntt.limits.v1alpha2.BatchGetPlansRequest.view:type_name -> goten.view.View
	16, // 4: ntt.limits.v1alpha2.BatchGetPlansResponse.plans:type_name -> ntt.limits.v1alpha2.Plan
	14, // 5: ntt.limits.v1alpha2.ListPlansRequest.field_mask:type_name -> ntt.limits.v1alpha2.Plan_FieldMask
	15, // 6: ntt.limits.v1alpha2.ListPlansRequest.view:type_name -> goten.view.View
	16, // 7: ntt.limits.v1alpha2.ListPlansResponse.plans:type_name -> ntt.limits.v1alpha2.Plan
	14, // 8: ntt.limits.v1alpha2.WatchPlanRequest.field_mask:type_name -> ntt.limits.v1alpha2.Plan_FieldMask
	15, // 9: ntt.limits.v1alpha2.WatchPlanRequest.view:type_name -> goten.view.View
	17, // 10: ntt.limits.v1alpha2.WatchPlanResponse.change:type_name -> ntt.limits.v1alpha2.PlanChange
	18, // 11: ntt.limits.v1alpha2.WatchPlansRequest.type:type_name -> goten.watch_type.WatchType
	14, // 12: ntt.limits.v1alpha2.WatchPlansRequest.field_mask:type_name -> ntt.limits.v1alpha2.Plan_FieldMask
	15, // 13: ntt.limits.v1alpha2.WatchPlansRequest.view:type_name -> goten.view.View
	17, // 14: ntt.limits.v1alpha2.WatchPlansResponse.plan_changes:type_name -> ntt.limits.v1alpha2.PlanChange
	12, // 15: ntt.limits.v1alpha2.WatchPlansResponse.page_token_change:type_name -> ntt.limits.v1alpha2.WatchPlansResponse.PageTokenChange
	16, // 16: ntt.limits.v1alpha2.CreatePlanRequest.plan:type_name -> ntt.limits.v1alpha2.Plan
	16, // 17: ntt.limits.v1alpha2.UpdatePlanRequest.plan:type_name -> ntt.limits.v1alpha2.Plan
	14, // 18: ntt.limits.v1alpha2.UpdatePlanRequest.update_mask:type_name -> ntt.limits.v1alpha2.Plan_FieldMask
	13, // 19: ntt.limits.v1alpha2.UpdatePlanRequest.cas:type_name -> ntt.limits.v1alpha2.UpdatePlanRequest.CAS
	16, // 20: ntt.limits.v1alpha2.UpdatePlanRequest.CAS.conditional_state:type_name -> ntt.limits.v1alpha2.Plan
	14, // 21: ntt.limits.v1alpha2.UpdatePlanRequest.CAS.field_mask:type_name -> ntt.limits.v1alpha2.Plan_FieldMask
	0,  // 22: ntt.limits.v1alpha2.PlanService.GetPlan:input_type -> ntt.limits.v1alpha2.GetPlanRequest
	1,  // 23: ntt.limits.v1alpha2.PlanService.BatchGetPlans:input_type -> ntt.limits.v1alpha2.BatchGetPlansRequest
	3,  // 24: ntt.limits.v1alpha2.PlanService.ListPlans:input_type -> ntt.limits.v1alpha2.ListPlansRequest
	5,  // 25: ntt.limits.v1alpha2.PlanService.WatchPlan:input_type -> ntt.limits.v1alpha2.WatchPlanRequest
	7,  // 26: ntt.limits.v1alpha2.PlanService.WatchPlans:input_type -> ntt.limits.v1alpha2.WatchPlansRequest
	9,  // 27: ntt.limits.v1alpha2.PlanService.CreatePlan:input_type -> ntt.limits.v1alpha2.CreatePlanRequest
	10, // 28: ntt.limits.v1alpha2.PlanService.UpdatePlan:input_type -> ntt.limits.v1alpha2.UpdatePlanRequest
	11, // 29: ntt.limits.v1alpha2.PlanService.DeletePlan:input_type -> ntt.limits.v1alpha2.DeletePlanRequest
	16, // 30: ntt.limits.v1alpha2.PlanService.GetPlan:output_type -> ntt.limits.v1alpha2.Plan
	2,  // 31: ntt.limits.v1alpha2.PlanService.BatchGetPlans:output_type -> ntt.limits.v1alpha2.BatchGetPlansResponse
	4,  // 32: ntt.limits.v1alpha2.PlanService.ListPlans:output_type -> ntt.limits.v1alpha2.ListPlansResponse
	6,  // 33: ntt.limits.v1alpha2.PlanService.WatchPlan:output_type -> ntt.limits.v1alpha2.WatchPlanResponse
	8,  // 34: ntt.limits.v1alpha2.PlanService.WatchPlans:output_type -> ntt.limits.v1alpha2.WatchPlansResponse
	16, // 35: ntt.limits.v1alpha2.PlanService.CreatePlan:output_type -> ntt.limits.v1alpha2.Plan
	16, // 36: ntt.limits.v1alpha2.PlanService.UpdatePlan:output_type -> ntt.limits.v1alpha2.Plan
	19, // 37: ntt.limits.v1alpha2.PlanService.DeletePlan:output_type -> google.protobuf.Empty
	30, // [30:38] is the sub-list for method output_type
	22, // [22:30] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { edgelq_limits_proto_v1alpha2_plan_service_proto_init() }
func edgelq_limits_proto_v1alpha2_plan_service_proto_init() {
	if edgelq_limits_proto_v1alpha2_plan_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPlansResponse_PageTokenChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlanRequest_CAS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_limits_proto_v1alpha2_plan_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           edgelq_limits_proto_v1alpha2_plan_service_proto_goTypes,
		DependencyIndexes: edgelq_limits_proto_v1alpha2_plan_service_proto_depIdxs,
		MessageInfos:      edgelq_limits_proto_v1alpha2_plan_service_proto_msgTypes,
	}.Build()
	edgelq_limits_proto_v1alpha2_plan_service_proto = out.File
	edgelq_limits_proto_v1alpha2_plan_service_proto_rawDesc = nil
	edgelq_limits_proto_v1alpha2_plan_service_proto_goTypes = nil
	edgelq_limits_proto_v1alpha2_plan_service_proto_depIdxs = nil
}
