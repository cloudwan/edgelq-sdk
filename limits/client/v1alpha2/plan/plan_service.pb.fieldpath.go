// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/plan_service.proto
// DO NOT EDIT!!!

package plan_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &plan.Plan{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetPlanRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetPlanRequest_FieldPathSelector
	Get(source *GetPlanRequest) []interface{}
	GetSingle(source *GetPlanRequest) (interface{}, bool)
	ClearValue(item *GetPlanRequest)

	// Those methods build corresponding GetPlanRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetPlanRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetPlanRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetPlanRequest_FieldPathArrayItemValue
}

type GetPlanRequest_FieldPathSelector int32

const (
	GetPlanRequest_FieldPathSelectorName      GetPlanRequest_FieldPathSelector = 0
	GetPlanRequest_FieldPathSelectorFieldMask GetPlanRequest_FieldPathSelector = 1
	GetPlanRequest_FieldPathSelectorView      GetPlanRequest_FieldPathSelector = 2
)

func (s GetPlanRequest_FieldPathSelector) String() string {
	switch s {
	case GetPlanRequest_FieldPathSelectorName:
		return "name"
	case GetPlanRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetPlanRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanRequest: %d", s))
	}
}

func BuildGetPlanRequest_FieldPath(fp gotenobject.RawFieldPath) (GetPlanRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetPlanRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetPlanRequest_FieldTerminalPath{selector: GetPlanRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetPlanRequest_FieldTerminalPath{selector: GetPlanRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetPlanRequest_FieldTerminalPath{selector: GetPlanRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetPlanRequest", fp)
}

func ParseGetPlanRequest_FieldPath(rawField string) (GetPlanRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetPlanRequest_FieldPath(fp)
}

func MustParseGetPlanRequest_FieldPath(rawField string) GetPlanRequest_FieldPath {
	fp, err := ParseGetPlanRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetPlanRequest_FieldTerminalPath struct {
	selector GetPlanRequest_FieldPathSelector
}

var _ GetPlanRequest_FieldPath = (*GetPlanRequest_FieldTerminalPath)(nil)

func (fp *GetPlanRequest_FieldTerminalPath) Selector() GetPlanRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetPlanRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetPlanRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetPlanRequest
func (fp *GetPlanRequest_FieldTerminalPath) Get(source *GetPlanRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetPlanRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetPlanRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetPlanRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetPlanRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetPlanRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetPlanRequest))
}

// GetSingle returns value pointed by specific field of from source GetPlanRequest
func (fp *GetPlanRequest_FieldTerminalPath) GetSingle(source *GetPlanRequest) (interface{}, bool) {
	switch fp.selector {
	case GetPlanRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetPlanRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetPlanRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanRequest: %d", fp.selector))
	}
}

func (fp *GetPlanRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetPlanRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetPlanRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetPlanRequest_FieldPathSelectorName:
		return (*plan.Reference)(nil)
	case GetPlanRequest_FieldPathSelectorFieldMask:
		return (*plan.Plan_FieldMask)(nil)
	case GetPlanRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanRequest: %d", fp.selector))
	}
}

func (fp *GetPlanRequest_FieldTerminalPath) ClearValue(item *GetPlanRequest) {
	if item != nil {
		switch fp.selector {
		case GetPlanRequest_FieldPathSelectorName:
			item.Name = nil
		case GetPlanRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetPlanRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetPlanRequest: %d", fp.selector))
		}
	}
}

func (fp *GetPlanRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetPlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetPlanRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetPlanRequest_FieldPathSelectorName ||
		fp.selector == GetPlanRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetPlanRequest_FieldPathSelectorView
}

func (fp *GetPlanRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetPlanRequest_FieldTerminalPath) WithIValue(value interface{}) GetPlanRequest_FieldPathValue {
	switch fp.selector {
	case GetPlanRequest_FieldPathSelectorName:
		return &GetPlanRequest_FieldTerminalPathValue{GetPlanRequest_FieldTerminalPath: *fp, value: value.(*plan.Reference)}
	case GetPlanRequest_FieldPathSelectorFieldMask:
		return &GetPlanRequest_FieldTerminalPathValue{GetPlanRequest_FieldTerminalPath: *fp, value: value.(*plan.Plan_FieldMask)}
	case GetPlanRequest_FieldPathSelectorView:
		return &GetPlanRequest_FieldTerminalPathValue{GetPlanRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanRequest: %d", fp.selector))
	}
}

func (fp *GetPlanRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetPlanRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetPlanRequest_FieldPathArrayOfValues {
	fpaov := &GetPlanRequest_FieldTerminalPathArrayOfValues{GetPlanRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetPlanRequest_FieldPathSelectorName:
		return &GetPlanRequest_FieldTerminalPathArrayOfValues{GetPlanRequest_FieldTerminalPath: *fp, values: values.([]*plan.Reference)}
	case GetPlanRequest_FieldPathSelectorFieldMask:
		return &GetPlanRequest_FieldTerminalPathArrayOfValues{GetPlanRequest_FieldTerminalPath: *fp, values: values.([]*plan.Plan_FieldMask)}
	case GetPlanRequest_FieldPathSelectorView:
		return &GetPlanRequest_FieldTerminalPathArrayOfValues{GetPlanRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetPlanRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetPlanRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetPlanRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanRequest: %d", fp.selector))
	}
}

func (fp *GetPlanRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetPlanRequest_FieldPathValue allows storing values for GetPlanRequest fields according to their type
type GetPlanRequest_FieldPathValue interface {
	GetPlanRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetPlanRequest)
	CompareWith(*GetPlanRequest) (cmp int, comparable bool)
}

func ParseGetPlanRequest_FieldPathValue(pathStr, valueStr string) (GetPlanRequest_FieldPathValue, error) {
	fp, err := ParseGetPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPlanRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetPlanRequest_FieldPathValue), nil
}

func MustParseGetPlanRequest_FieldPathValue(pathStr, valueStr string) GetPlanRequest_FieldPathValue {
	fpv, err := ParseGetPlanRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetPlanRequest_FieldTerminalPathValue struct {
	GetPlanRequest_FieldTerminalPath
	value interface{}
}

var _ GetPlanRequest_FieldPathValue = (*GetPlanRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetPlanRequest' as interface{}
func (fpv *GetPlanRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetPlanRequest_FieldTerminalPathValue) AsNameValue() (*plan.Reference, bool) {
	res, ok := fpv.value.(*plan.Reference)
	return res, ok
}
func (fpv *GetPlanRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan.Plan_FieldMask, bool) {
	res, ok := fpv.value.(*plan.Plan_FieldMask)
	return res, ok
}
func (fpv *GetPlanRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetPlanRequest
func (fpv *GetPlanRequest_FieldTerminalPathValue) SetTo(target **GetPlanRequest) {
	if *target == nil {
		*target = new(GetPlanRequest)
	}
	switch fpv.selector {
	case GetPlanRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*plan.Reference)
	case GetPlanRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan.Plan_FieldMask)
	case GetPlanRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanRequest: %d", fpv.selector))
	}
}

func (fpv *GetPlanRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetPlanRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetPlanRequest_FieldTerminalPathValue' with the value under path in 'GetPlanRequest'.
func (fpv *GetPlanRequest_FieldTerminalPathValue) CompareWith(source *GetPlanRequest) (int, bool) {
	switch fpv.selector {
	case GetPlanRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*plan.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetPlanRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetPlanRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanRequest: %d", fpv.selector))
	}
}

func (fpv *GetPlanRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetPlanRequest))
}

// GetPlanRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetPlanRequest according to their type
// Present only for array (repeated) types.
type GetPlanRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetPlanRequest_FieldPath
	ContainsValue(*GetPlanRequest) bool
}

// ParseGetPlanRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetPlanRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPlanRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetPlanRequest_FieldPathArrayItemValue), nil
}

func MustParseGetPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetPlanRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetPlanRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetPlanRequest_FieldTerminalPathArrayItemValue struct {
	GetPlanRequest_FieldTerminalPath
	value interface{}
}

var _ GetPlanRequest_FieldPathArrayItemValue = (*GetPlanRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetPlanRequest as interface{}
func (fpaiv *GetPlanRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetPlanRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetPlanRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetPlanRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetPlanRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetPlanRequest'
func (fpaiv *GetPlanRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetPlanRequest) bool {
	slice := fpaiv.GetPlanRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetPlanRequest_FieldPathArrayOfValues allows storing slice of values for GetPlanRequest fields according to their type
type GetPlanRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetPlanRequest_FieldPath
}

func ParseGetPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetPlanRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPlanRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetPlanRequest_FieldPathArrayOfValues), nil
}

func MustParseGetPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetPlanRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetPlanRequest_FieldTerminalPathArrayOfValues struct {
	GetPlanRequest_FieldTerminalPath
	values interface{}
}

var _ GetPlanRequest_FieldPathArrayOfValues = (*GetPlanRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetPlanRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetPlanRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*plan.Reference) {
			values = append(values, v)
		}
	case GetPlanRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan.Plan_FieldMask) {
			values = append(values, v)
		}
	case GetPlanRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetPlanRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*plan.Reference, bool) {
	res, ok := fpaov.values.([]*plan.Reference)
	return res, ok
}
func (fpaov *GetPlanRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan.Plan_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan.Plan_FieldMask)
	return res, ok
}
func (fpaov *GetPlanRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPlansRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPlansRequest_FieldPathSelector
	Get(source *BatchGetPlansRequest) []interface{}
	GetSingle(source *BatchGetPlansRequest) (interface{}, bool)
	ClearValue(item *BatchGetPlansRequest)

	// Those methods build corresponding BatchGetPlansRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPlansRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPlansRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPlansRequest_FieldPathArrayItemValue
}

type BatchGetPlansRequest_FieldPathSelector int32

const (
	BatchGetPlansRequest_FieldPathSelectorNames     BatchGetPlansRequest_FieldPathSelector = 0
	BatchGetPlansRequest_FieldPathSelectorFieldMask BatchGetPlansRequest_FieldPathSelector = 1
	BatchGetPlansRequest_FieldPathSelectorView      BatchGetPlansRequest_FieldPathSelector = 2
)

func (s BatchGetPlansRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetPlansRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetPlansRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetPlansRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansRequest: %d", s))
	}
}

func BuildBatchGetPlansRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPlansRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPlansRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetPlansRequest_FieldTerminalPath{selector: BatchGetPlansRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetPlansRequest_FieldTerminalPath{selector: BatchGetPlansRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetPlansRequest_FieldTerminalPath{selector: BatchGetPlansRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPlansRequest", fp)
}

func ParseBatchGetPlansRequest_FieldPath(rawField string) (BatchGetPlansRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPlansRequest_FieldPath(fp)
}

func MustParseBatchGetPlansRequest_FieldPath(rawField string) BatchGetPlansRequest_FieldPath {
	fp, err := ParseBatchGetPlansRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPlansRequest_FieldTerminalPath struct {
	selector BatchGetPlansRequest_FieldPathSelector
}

var _ BatchGetPlansRequest_FieldPath = (*BatchGetPlansRequest_FieldTerminalPath)(nil)

func (fp *BatchGetPlansRequest_FieldTerminalPath) Selector() BatchGetPlansRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPlansRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPlansRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPlansRequest
func (fp *BatchGetPlansRequest_FieldTerminalPath) Get(source *BatchGetPlansRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPlansRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetPlansRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetPlansRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlansRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPlansRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPlansRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetPlansRequest
func (fp *BatchGetPlansRequest_FieldTerminalPath) GetSingle(source *BatchGetPlansRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPlansRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetPlansRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetPlansRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPlansRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPlansRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPlansRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPlansRequest_FieldPathSelectorNames:
		return ([]*plan.Reference)(nil)
	case BatchGetPlansRequest_FieldPathSelectorFieldMask:
		return (*plan.Plan_FieldMask)(nil)
	case BatchGetPlansRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPlansRequest_FieldTerminalPath) ClearValue(item *BatchGetPlansRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetPlansRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetPlansRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetPlansRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlansRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPlansRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPlansRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPlansRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPlansRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetPlansRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetPlansRequest_FieldPathSelectorView
}

func (fp *BatchGetPlansRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetPlansRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetPlansRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetPlansRequest_FieldPathSelectorNames:
		return &BatchGetPlansRequest_FieldTerminalPathValue{BatchGetPlansRequest_FieldTerminalPath: *fp, value: value.([]*plan.Reference)}
	case BatchGetPlansRequest_FieldPathSelectorFieldMask:
		return &BatchGetPlansRequest_FieldTerminalPathValue{BatchGetPlansRequest_FieldTerminalPath: *fp, value: value.(*plan.Plan_FieldMask)}
	case BatchGetPlansRequest_FieldPathSelectorView:
		return &BatchGetPlansRequest_FieldTerminalPathValue{BatchGetPlansRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPlansRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPlansRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPlansRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetPlansRequest_FieldTerminalPathArrayOfValues{BatchGetPlansRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPlansRequest_FieldPathSelectorNames:
		return &BatchGetPlansRequest_FieldTerminalPathArrayOfValues{BatchGetPlansRequest_FieldTerminalPath: *fp, values: values.([][]*plan.Reference)}
	case BatchGetPlansRequest_FieldPathSelectorFieldMask:
		return &BatchGetPlansRequest_FieldTerminalPathArrayOfValues{BatchGetPlansRequest_FieldTerminalPath: *fp, values: values.([]*plan.Plan_FieldMask)}
	case BatchGetPlansRequest_FieldPathSelectorView:
		return &BatchGetPlansRequest_FieldTerminalPathArrayOfValues{BatchGetPlansRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPlansRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPlansRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPlansRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPlansRequest_FieldPathSelectorNames:
		return &BatchGetPlansRequest_FieldTerminalPathArrayItemValue{BatchGetPlansRequest_FieldTerminalPath: *fp, value: value.(*plan.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPlansRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetPlansRequest_FieldPathValue allows storing values for BatchGetPlansRequest fields according to their type
type BatchGetPlansRequest_FieldPathValue interface {
	BatchGetPlansRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPlansRequest)
	CompareWith(*BatchGetPlansRequest) (cmp int, comparable bool)
}

func ParseBatchGetPlansRequest_FieldPathValue(pathStr, valueStr string) (BatchGetPlansRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlansRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPlansRequest_FieldPathValue), nil
}

func MustParseBatchGetPlansRequest_FieldPathValue(pathStr, valueStr string) BatchGetPlansRequest_FieldPathValue {
	fpv, err := ParseBatchGetPlansRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPlansRequest_FieldTerminalPathValue struct {
	BatchGetPlansRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPlansRequest_FieldPathValue = (*BatchGetPlansRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPlansRequest' as interface{}
func (fpv *BatchGetPlansRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPlansRequest_FieldTerminalPathValue) AsNamesValue() ([]*plan.Reference, bool) {
	res, ok := fpv.value.([]*plan.Reference)
	return res, ok
}
func (fpv *BatchGetPlansRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan.Plan_FieldMask, bool) {
	res, ok := fpv.value.(*plan.Plan_FieldMask)
	return res, ok
}
func (fpv *BatchGetPlansRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPlansRequest
func (fpv *BatchGetPlansRequest_FieldTerminalPathValue) SetTo(target **BatchGetPlansRequest) {
	if *target == nil {
		*target = new(BatchGetPlansRequest)
	}
	switch fpv.selector {
	case BatchGetPlansRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*plan.Reference)
	case BatchGetPlansRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan.Plan_FieldMask)
	case BatchGetPlansRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPlansRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPlansRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPlansRequest_FieldTerminalPathValue' with the value under path in 'BatchGetPlansRequest'.
func (fpv *BatchGetPlansRequest_FieldTerminalPathValue) CompareWith(source *BatchGetPlansRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetPlansRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetPlansRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetPlansRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPlansRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPlansRequest))
}

// BatchGetPlansRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPlansRequest according to their type
// Present only for array (repeated) types.
type BatchGetPlansRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPlansRequest_FieldPath
	ContainsValue(*BatchGetPlansRequest) bool
}

// ParseBatchGetPlansRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPlansRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPlansRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlansRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPlansRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPlansRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPlansRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPlansRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPlansRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetPlansRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPlansRequest_FieldPathArrayItemValue = (*BatchGetPlansRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPlansRequest as interface{}
func (fpaiv *BatchGetPlansRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPlansRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*plan.Reference, bool) {
	res, ok := fpaiv.value.(*plan.Reference)
	return res, ok
}

func (fpaiv *BatchGetPlansRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPlansRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPlansRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPlansRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPlansRequest'
func (fpaiv *BatchGetPlansRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPlansRequest) bool {
	slice := fpaiv.BatchGetPlansRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetPlansRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetPlansRequest fields according to their type
type BatchGetPlansRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPlansRequest_FieldPath
}

func ParseBatchGetPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPlansRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlansRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPlansRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPlansRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPlansRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetPlansRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetPlansRequest_FieldPathArrayOfValues = (*BatchGetPlansRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPlansRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPlansRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*plan.Reference) {
			values = append(values, v)
		}
	case BatchGetPlansRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan.Plan_FieldMask) {
			values = append(values, v)
		}
	case BatchGetPlansRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPlansRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*plan.Reference, bool) {
	res, ok := fpaov.values.([][]*plan.Reference)
	return res, ok
}
func (fpaov *BatchGetPlansRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan.Plan_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan.Plan_FieldMask)
	return res, ok
}
func (fpaov *BatchGetPlansRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPlansResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPlansResponse_FieldPathSelector
	Get(source *BatchGetPlansResponse) []interface{}
	GetSingle(source *BatchGetPlansResponse) (interface{}, bool)
	ClearValue(item *BatchGetPlansResponse)

	// Those methods build corresponding BatchGetPlansResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPlansResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPlansResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPlansResponse_FieldPathArrayItemValue
}

type BatchGetPlansResponse_FieldPathSelector int32

const (
	BatchGetPlansResponse_FieldPathSelectorPlans   BatchGetPlansResponse_FieldPathSelector = 0
	BatchGetPlansResponse_FieldPathSelectorMissing BatchGetPlansResponse_FieldPathSelector = 1
)

func (s BatchGetPlansResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetPlansResponse_FieldPathSelectorPlans:
		return "plans"
	case BatchGetPlansResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", s))
	}
}

func BuildBatchGetPlansResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPlansResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPlansResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plans":
			return &BatchGetPlansResponse_FieldTerminalPath{selector: BatchGetPlansResponse_FieldPathSelectorPlans}, nil
		case "missing":
			return &BatchGetPlansResponse_FieldTerminalPath{selector: BatchGetPlansResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "plans":
			if subpath, err := plan.BuildPlan_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetPlansResponse_FieldSubPath{selector: BatchGetPlansResponse_FieldPathSelectorPlans, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPlansResponse", fp)
}

func ParseBatchGetPlansResponse_FieldPath(rawField string) (BatchGetPlansResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPlansResponse_FieldPath(fp)
}

func MustParseBatchGetPlansResponse_FieldPath(rawField string) BatchGetPlansResponse_FieldPath {
	fp, err := ParseBatchGetPlansResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPlansResponse_FieldTerminalPath struct {
	selector BatchGetPlansResponse_FieldPathSelector
}

var _ BatchGetPlansResponse_FieldPath = (*BatchGetPlansResponse_FieldTerminalPath)(nil)

func (fp *BatchGetPlansResponse_FieldTerminalPath) Selector() BatchGetPlansResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPlansResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPlansResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPlansResponse
func (fp *BatchGetPlansResponse_FieldTerminalPath) Get(source *BatchGetPlansResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPlansResponse_FieldPathSelectorPlans:
			for _, value := range source.GetPlans() {
				values = append(values, value)
			}
		case BatchGetPlansResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPlansResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPlansResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetPlansResponse
func (fp *BatchGetPlansResponse_FieldTerminalPath) GetSingle(source *BatchGetPlansResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPlansResponse_FieldPathSelectorPlans:
		res := source.GetPlans()
		return res, res != nil
	case BatchGetPlansResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPlansResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPlansResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPlansResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPlansResponse_FieldPathSelectorPlans:
		return ([]*plan.Plan)(nil)
	case BatchGetPlansResponse_FieldPathSelectorMissing:
		return ([]*plan.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPlansResponse_FieldTerminalPath) ClearValue(item *BatchGetPlansResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetPlansResponse_FieldPathSelectorPlans:
			item.Plans = nil
		case BatchGetPlansResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPlansResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPlansResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPlansResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPlansResponse_FieldPathSelectorMissing
}

func (fp *BatchGetPlansResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetPlansResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetPlansResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetPlansResponse_FieldPathSelectorPlans:
		return &BatchGetPlansResponse_FieldTerminalPathValue{BatchGetPlansResponse_FieldTerminalPath: *fp, value: value.([]*plan.Plan)}
	case BatchGetPlansResponse_FieldPathSelectorMissing:
		return &BatchGetPlansResponse_FieldTerminalPathValue{BatchGetPlansResponse_FieldTerminalPath: *fp, value: value.([]*plan.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPlansResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPlansResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPlansResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetPlansResponse_FieldTerminalPathArrayOfValues{BatchGetPlansResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPlansResponse_FieldPathSelectorPlans:
		return &BatchGetPlansResponse_FieldTerminalPathArrayOfValues{BatchGetPlansResponse_FieldTerminalPath: *fp, values: values.([][]*plan.Plan)}
	case BatchGetPlansResponse_FieldPathSelectorMissing:
		return &BatchGetPlansResponse_FieldTerminalPathArrayOfValues{BatchGetPlansResponse_FieldTerminalPath: *fp, values: values.([][]*plan.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPlansResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPlansResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPlansResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPlansResponse_FieldPathSelectorPlans:
		return &BatchGetPlansResponse_FieldTerminalPathArrayItemValue{BatchGetPlansResponse_FieldTerminalPath: *fp, value: value.(*plan.Plan)}
	case BatchGetPlansResponse_FieldPathSelectorMissing:
		return &BatchGetPlansResponse_FieldTerminalPathArrayItemValue{BatchGetPlansResponse_FieldTerminalPath: *fp, value: value.(*plan.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPlansResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetPlansResponse_FieldSubPath struct {
	selector BatchGetPlansResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetPlansResponse_FieldPath = (*BatchGetPlansResponse_FieldSubPath)(nil)

func (fps *BatchGetPlansResponse_FieldSubPath) Selector() BatchGetPlansResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetPlansResponse_FieldSubPath) AsPlansSubPath() (plan.Plan_FieldPath, bool) {
	res, ok := fps.subPath.(plan.Plan_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetPlansResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetPlansResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetPlansResponse
func (fps *BatchGetPlansResponse_FieldSubPath) Get(source *BatchGetPlansResponse) (values []interface{}) {
	if asPlanFieldPath, ok := fps.AsPlansSubPath(); ok {
		for _, item := range source.GetPlans() {
			values = append(values, asPlanFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetPlansResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetPlansResponse))
}

// GetSingle returns value of selected field from source BatchGetPlansResponse
func (fps *BatchGetPlansResponse_FieldSubPath) GetSingle(source *BatchGetPlansResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetPlansResponse_FieldPathSelectorPlans:
		if len(source.GetPlans()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPlans()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fps.selector))
	}
}

func (fps *BatchGetPlansResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetPlansResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetPlansResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetPlansResponse_FieldSubPath) ClearValue(item *BatchGetPlansResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetPlansResponse_FieldPathSelectorPlans:
			for _, subItem := range item.Plans {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetPlansResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetPlansResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetPlansResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetPlansResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetPlansResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetPlansResponse_FieldSubPath) WithIValue(value interface{}) BatchGetPlansResponse_FieldPathValue {
	return &BatchGetPlansResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetPlansResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetPlansResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetPlansResponse_FieldPathArrayOfValues {
	return &BatchGetPlansResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetPlansResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetPlansResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetPlansResponse_FieldPathArrayItemValue {
	return &BatchGetPlansResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetPlansResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetPlansResponse_FieldPathValue allows storing values for BatchGetPlansResponse fields according to their type
type BatchGetPlansResponse_FieldPathValue interface {
	BatchGetPlansResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPlansResponse)
	CompareWith(*BatchGetPlansResponse) (cmp int, comparable bool)
}

func ParseBatchGetPlansResponse_FieldPathValue(pathStr, valueStr string) (BatchGetPlansResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlansResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPlansResponse_FieldPathValue), nil
}

func MustParseBatchGetPlansResponse_FieldPathValue(pathStr, valueStr string) BatchGetPlansResponse_FieldPathValue {
	fpv, err := ParseBatchGetPlansResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPlansResponse_FieldTerminalPathValue struct {
	BatchGetPlansResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPlansResponse_FieldPathValue = (*BatchGetPlansResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPlansResponse' as interface{}
func (fpv *BatchGetPlansResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPlansResponse_FieldTerminalPathValue) AsPlansValue() ([]*plan.Plan, bool) {
	res, ok := fpv.value.([]*plan.Plan)
	return res, ok
}
func (fpv *BatchGetPlansResponse_FieldTerminalPathValue) AsMissingValue() ([]*plan.Reference, bool) {
	res, ok := fpv.value.([]*plan.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPlansResponse
func (fpv *BatchGetPlansResponse_FieldTerminalPathValue) SetTo(target **BatchGetPlansResponse) {
	if *target == nil {
		*target = new(BatchGetPlansResponse)
	}
	switch fpv.selector {
	case BatchGetPlansResponse_FieldPathSelectorPlans:
		(*target).Plans = fpv.value.([]*plan.Plan)
	case BatchGetPlansResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*plan.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPlansResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPlansResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPlansResponse_FieldTerminalPathValue' with the value under path in 'BatchGetPlansResponse'.
func (fpv *BatchGetPlansResponse_FieldTerminalPathValue) CompareWith(source *BatchGetPlansResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetPlansResponse_FieldPathSelectorPlans:
		return 0, false
	case BatchGetPlansResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPlansResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPlansResponse))
}

type BatchGetPlansResponse_FieldSubPathValue struct {
	BatchGetPlansResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetPlansResponse_FieldPathValue = (*BatchGetPlansResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetPlansResponse_FieldSubPathValue) AsPlansPathValue() (plan.Plan_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan.Plan_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetPlansResponse_FieldSubPathValue) SetTo(target **BatchGetPlansResponse) {
	if *target == nil {
		*target = new(BatchGetPlansResponse)
	}
	switch fpvs.Selector() {
	case BatchGetPlansResponse_FieldPathSelectorPlans:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPlansResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPlansResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetPlansResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetPlansResponse_FieldSubPathValue) CompareWith(source *BatchGetPlansResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetPlansResponse_FieldPathSelectorPlans:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPlansResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetPlansResponse))
}

// BatchGetPlansResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPlansResponse according to their type
// Present only for array (repeated) types.
type BatchGetPlansResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPlansResponse_FieldPath
	ContainsValue(*BatchGetPlansResponse) bool
}

// ParseBatchGetPlansResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPlansResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPlansResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlansResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPlansResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPlansResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPlansResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPlansResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPlansResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetPlansResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPlansResponse_FieldPathArrayItemValue = (*BatchGetPlansResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPlansResponse as interface{}
func (fpaiv *BatchGetPlansResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPlansResponse_FieldTerminalPathArrayItemValue) AsPlansItemValue() (*plan.Plan, bool) {
	res, ok := fpaiv.value.(*plan.Plan)
	return res, ok
}
func (fpaiv *BatchGetPlansResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*plan.Reference, bool) {
	res, ok := fpaiv.value.(*plan.Reference)
	return res, ok
}

func (fpaiv *BatchGetPlansResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPlansResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPlansResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPlansResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPlansResponse'
func (fpaiv *BatchGetPlansResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPlansResponse) bool {
	slice := fpaiv.BatchGetPlansResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetPlansResponse_FieldSubPathArrayItemValue struct {
	BatchGetPlansResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetPlansResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetPlansResponse_FieldSubPathArrayItemValue) AsPlansPathItemValue() (plan.Plan_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan.Plan_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPlansResponse'
func (fpaivs *BatchGetPlansResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetPlansResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetPlansResponse_FieldPathSelectorPlans:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlansResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetPlansResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetPlansResponse fields according to their type
type BatchGetPlansResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPlansResponse_FieldPath
}

func ParseBatchGetPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPlansResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlansResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPlansResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPlansResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPlansResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetPlansResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetPlansResponse_FieldPathArrayOfValues = (*BatchGetPlansResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPlansResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPlansResponse_FieldPathSelectorPlans:
		for _, v := range fpaov.values.([][]*plan.Plan) {
			values = append(values, v)
		}
	case BatchGetPlansResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*plan.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPlansResponse_FieldTerminalPathArrayOfValues) AsPlansArrayOfValues() ([][]*plan.Plan, bool) {
	res, ok := fpaov.values.([][]*plan.Plan)
	return res, ok
}
func (fpaov *BatchGetPlansResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*plan.Reference, bool) {
	res, ok := fpaov.values.([][]*plan.Reference)
	return res, ok
}

type BatchGetPlansResponse_FieldSubPathArrayOfValues struct {
	BatchGetPlansResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetPlansResponse_FieldPathArrayOfValues = (*BatchGetPlansResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetPlansResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetPlansResponse_FieldSubPathArrayOfValues) AsPlansPathArrayOfValues() (plan.Plan_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan.Plan_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPlansRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPlansRequest_FieldPathSelector
	Get(source *ListPlansRequest) []interface{}
	GetSingle(source *ListPlansRequest) (interface{}, bool)
	ClearValue(item *ListPlansRequest)

	// Those methods build corresponding ListPlansRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPlansRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPlansRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPlansRequest_FieldPathArrayItemValue
}

type ListPlansRequest_FieldPathSelector int32

const (
	ListPlansRequest_FieldPathSelectorPageSize  ListPlansRequest_FieldPathSelector = 0
	ListPlansRequest_FieldPathSelectorPageToken ListPlansRequest_FieldPathSelector = 1
	ListPlansRequest_FieldPathSelectorOrderBy   ListPlansRequest_FieldPathSelector = 2
	ListPlansRequest_FieldPathSelectorFilter    ListPlansRequest_FieldPathSelector = 3
	ListPlansRequest_FieldPathSelectorFieldMask ListPlansRequest_FieldPathSelector = 4
	ListPlansRequest_FieldPathSelectorView      ListPlansRequest_FieldPathSelector = 5
)

func (s ListPlansRequest_FieldPathSelector) String() string {
	switch s {
	case ListPlansRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListPlansRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListPlansRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListPlansRequest_FieldPathSelectorFilter:
		return "filter"
	case ListPlansRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListPlansRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansRequest: %d", s))
	}
}

func BuildListPlansRequest_FieldPath(fp gotenobject.RawFieldPath) (ListPlansRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPlansRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "page_size", "pageSize", "page-size":
			return &ListPlansRequest_FieldTerminalPath{selector: ListPlansRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListPlansRequest_FieldTerminalPath{selector: ListPlansRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListPlansRequest_FieldTerminalPath{selector: ListPlansRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListPlansRequest_FieldTerminalPath{selector: ListPlansRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListPlansRequest_FieldTerminalPath{selector: ListPlansRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListPlansRequest_FieldTerminalPath{selector: ListPlansRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPlansRequest", fp)
}

func ParseListPlansRequest_FieldPath(rawField string) (ListPlansRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPlansRequest_FieldPath(fp)
}

func MustParseListPlansRequest_FieldPath(rawField string) ListPlansRequest_FieldPath {
	fp, err := ParseListPlansRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPlansRequest_FieldTerminalPath struct {
	selector ListPlansRequest_FieldPathSelector
}

var _ ListPlansRequest_FieldPath = (*ListPlansRequest_FieldTerminalPath)(nil)

func (fp *ListPlansRequest_FieldTerminalPath) Selector() ListPlansRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPlansRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPlansRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPlansRequest
func (fp *ListPlansRequest_FieldTerminalPath) Get(source *ListPlansRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPlansRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListPlansRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListPlansRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListPlansRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListPlansRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListPlansRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlansRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPlansRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPlansRequest))
}

// GetSingle returns value pointed by specific field of from source ListPlansRequest
func (fp *ListPlansRequest_FieldTerminalPath) GetSingle(source *ListPlansRequest) (interface{}, bool) {
	switch fp.selector {
	case ListPlansRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListPlansRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListPlansRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListPlansRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListPlansRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListPlansRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansRequest: %d", fp.selector))
	}
}

func (fp *ListPlansRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPlansRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListPlansRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPlansRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListPlansRequest_FieldPathSelectorPageToken:
		return (*plan.PagerCursor)(nil)
	case ListPlansRequest_FieldPathSelectorOrderBy:
		return (*plan.OrderBy)(nil)
	case ListPlansRequest_FieldPathSelectorFilter:
		return (*plan.Filter)(nil)
	case ListPlansRequest_FieldPathSelectorFieldMask:
		return (*plan.Plan_FieldMask)(nil)
	case ListPlansRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansRequest: %d", fp.selector))
	}
}

func (fp *ListPlansRequest_FieldTerminalPath) ClearValue(item *ListPlansRequest) {
	if item != nil {
		switch fp.selector {
		case ListPlansRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListPlansRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListPlansRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListPlansRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListPlansRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListPlansRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlansRequest: %d", fp.selector))
		}
	}
}

func (fp *ListPlansRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPlansRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPlansRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPlansRequest_FieldPathSelectorPageSize ||
		fp.selector == ListPlansRequest_FieldPathSelectorPageToken ||
		fp.selector == ListPlansRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListPlansRequest_FieldPathSelectorFilter ||
		fp.selector == ListPlansRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListPlansRequest_FieldPathSelectorView
}

func (fp *ListPlansRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPlansRequest_FieldTerminalPath) WithIValue(value interface{}) ListPlansRequest_FieldPathValue {
	switch fp.selector {
	case ListPlansRequest_FieldPathSelectorPageSize:
		return &ListPlansRequest_FieldTerminalPathValue{ListPlansRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListPlansRequest_FieldPathSelectorPageToken:
		return &ListPlansRequest_FieldTerminalPathValue{ListPlansRequest_FieldTerminalPath: *fp, value: value.(*plan.PagerCursor)}
	case ListPlansRequest_FieldPathSelectorOrderBy:
		return &ListPlansRequest_FieldTerminalPathValue{ListPlansRequest_FieldTerminalPath: *fp, value: value.(*plan.OrderBy)}
	case ListPlansRequest_FieldPathSelectorFilter:
		return &ListPlansRequest_FieldTerminalPathValue{ListPlansRequest_FieldTerminalPath: *fp, value: value.(*plan.Filter)}
	case ListPlansRequest_FieldPathSelectorFieldMask:
		return &ListPlansRequest_FieldTerminalPathValue{ListPlansRequest_FieldTerminalPath: *fp, value: value.(*plan.Plan_FieldMask)}
	case ListPlansRequest_FieldPathSelectorView:
		return &ListPlansRequest_FieldTerminalPathValue{ListPlansRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansRequest: %d", fp.selector))
	}
}

func (fp *ListPlansRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPlansRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPlansRequest_FieldPathArrayOfValues {
	fpaov := &ListPlansRequest_FieldTerminalPathArrayOfValues{ListPlansRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPlansRequest_FieldPathSelectorPageSize:
		return &ListPlansRequest_FieldTerminalPathArrayOfValues{ListPlansRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListPlansRequest_FieldPathSelectorPageToken:
		return &ListPlansRequest_FieldTerminalPathArrayOfValues{ListPlansRequest_FieldTerminalPath: *fp, values: values.([]*plan.PagerCursor)}
	case ListPlansRequest_FieldPathSelectorOrderBy:
		return &ListPlansRequest_FieldTerminalPathArrayOfValues{ListPlansRequest_FieldTerminalPath: *fp, values: values.([]*plan.OrderBy)}
	case ListPlansRequest_FieldPathSelectorFilter:
		return &ListPlansRequest_FieldTerminalPathArrayOfValues{ListPlansRequest_FieldTerminalPath: *fp, values: values.([]*plan.Filter)}
	case ListPlansRequest_FieldPathSelectorFieldMask:
		return &ListPlansRequest_FieldTerminalPathArrayOfValues{ListPlansRequest_FieldTerminalPath: *fp, values: values.([]*plan.Plan_FieldMask)}
	case ListPlansRequest_FieldPathSelectorView:
		return &ListPlansRequest_FieldTerminalPathArrayOfValues{ListPlansRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPlansRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPlansRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPlansRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansRequest: %d", fp.selector))
	}
}

func (fp *ListPlansRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListPlansRequest_FieldPathValue allows storing values for ListPlansRequest fields according to their type
type ListPlansRequest_FieldPathValue interface {
	ListPlansRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPlansRequest)
	CompareWith(*ListPlansRequest) (cmp int, comparable bool)
}

func ParseListPlansRequest_FieldPathValue(pathStr, valueStr string) (ListPlansRequest_FieldPathValue, error) {
	fp, err := ParseListPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlansRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPlansRequest_FieldPathValue), nil
}

func MustParseListPlansRequest_FieldPathValue(pathStr, valueStr string) ListPlansRequest_FieldPathValue {
	fpv, err := ParseListPlansRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPlansRequest_FieldTerminalPathValue struct {
	ListPlansRequest_FieldTerminalPath
	value interface{}
}

var _ ListPlansRequest_FieldPathValue = (*ListPlansRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPlansRequest' as interface{}
func (fpv *ListPlansRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPlansRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListPlansRequest_FieldTerminalPathValue) AsPageTokenValue() (*plan.PagerCursor, bool) {
	res, ok := fpv.value.(*plan.PagerCursor)
	return res, ok
}
func (fpv *ListPlansRequest_FieldTerminalPathValue) AsOrderByValue() (*plan.OrderBy, bool) {
	res, ok := fpv.value.(*plan.OrderBy)
	return res, ok
}
func (fpv *ListPlansRequest_FieldTerminalPathValue) AsFilterValue() (*plan.Filter, bool) {
	res, ok := fpv.value.(*plan.Filter)
	return res, ok
}
func (fpv *ListPlansRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan.Plan_FieldMask, bool) {
	res, ok := fpv.value.(*plan.Plan_FieldMask)
	return res, ok
}
func (fpv *ListPlansRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListPlansRequest
func (fpv *ListPlansRequest_FieldTerminalPathValue) SetTo(target **ListPlansRequest) {
	if *target == nil {
		*target = new(ListPlansRequest)
	}
	switch fpv.selector {
	case ListPlansRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListPlansRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*plan.PagerCursor)
	case ListPlansRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*plan.OrderBy)
	case ListPlansRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*plan.Filter)
	case ListPlansRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan.Plan_FieldMask)
	case ListPlansRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansRequest: %d", fpv.selector))
	}
}

func (fpv *ListPlansRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPlansRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPlansRequest_FieldTerminalPathValue' with the value under path in 'ListPlansRequest'.
func (fpv *ListPlansRequest_FieldTerminalPathValue) CompareWith(source *ListPlansRequest) (int, bool) {
	switch fpv.selector {
	case ListPlansRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPlansRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListPlansRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListPlansRequest_FieldPathSelectorFilter:
		return 0, false
	case ListPlansRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListPlansRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansRequest: %d", fpv.selector))
	}
}

func (fpv *ListPlansRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPlansRequest))
}

// ListPlansRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPlansRequest according to their type
// Present only for array (repeated) types.
type ListPlansRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPlansRequest_FieldPath
	ContainsValue(*ListPlansRequest) bool
}

// ParseListPlansRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPlansRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListPlansRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlansRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPlansRequest_FieldPathArrayItemValue), nil
}

func MustParseListPlansRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListPlansRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListPlansRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPlansRequest_FieldTerminalPathArrayItemValue struct {
	ListPlansRequest_FieldTerminalPath
	value interface{}
}

var _ ListPlansRequest_FieldPathArrayItemValue = (*ListPlansRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPlansRequest as interface{}
func (fpaiv *ListPlansRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListPlansRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListPlansRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPlansRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPlansRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPlansRequest'
func (fpaiv *ListPlansRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPlansRequest) bool {
	slice := fpaiv.ListPlansRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListPlansRequest_FieldPathArrayOfValues allows storing slice of values for ListPlansRequest fields according to their type
type ListPlansRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPlansRequest_FieldPath
}

func ParseListPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPlansRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlansRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPlansRequest_FieldPathArrayOfValues), nil
}

func MustParseListPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListPlansRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPlansRequest_FieldTerminalPathArrayOfValues struct {
	ListPlansRequest_FieldTerminalPath
	values interface{}
}

var _ ListPlansRequest_FieldPathArrayOfValues = (*ListPlansRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPlansRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPlansRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListPlansRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*plan.PagerCursor) {
			values = append(values, v)
		}
	case ListPlansRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*plan.OrderBy) {
			values = append(values, v)
		}
	case ListPlansRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*plan.Filter) {
			values = append(values, v)
		}
	case ListPlansRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan.Plan_FieldMask) {
			values = append(values, v)
		}
	case ListPlansRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPlansRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListPlansRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*plan.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan.PagerCursor)
	return res, ok
}
func (fpaov *ListPlansRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*plan.OrderBy, bool) {
	res, ok := fpaov.values.([]*plan.OrderBy)
	return res, ok
}
func (fpaov *ListPlansRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*plan.Filter, bool) {
	res, ok := fpaov.values.([]*plan.Filter)
	return res, ok
}
func (fpaov *ListPlansRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan.Plan_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan.Plan_FieldMask)
	return res, ok
}
func (fpaov *ListPlansRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPlansResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPlansResponse_FieldPathSelector
	Get(source *ListPlansResponse) []interface{}
	GetSingle(source *ListPlansResponse) (interface{}, bool)
	ClearValue(item *ListPlansResponse)

	// Those methods build corresponding ListPlansResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPlansResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPlansResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPlansResponse_FieldPathArrayItemValue
}

type ListPlansResponse_FieldPathSelector int32

const (
	ListPlansResponse_FieldPathSelectorPlans         ListPlansResponse_FieldPathSelector = 0
	ListPlansResponse_FieldPathSelectorPrevPageToken ListPlansResponse_FieldPathSelector = 1
	ListPlansResponse_FieldPathSelectorNextPageToken ListPlansResponse_FieldPathSelector = 2
)

func (s ListPlansResponse_FieldPathSelector) String() string {
	switch s {
	case ListPlansResponse_FieldPathSelectorPlans:
		return "plans"
	case ListPlansResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListPlansResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", s))
	}
}

func BuildListPlansResponse_FieldPath(fp gotenobject.RawFieldPath) (ListPlansResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPlansResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plans":
			return &ListPlansResponse_FieldTerminalPath{selector: ListPlansResponse_FieldPathSelectorPlans}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListPlansResponse_FieldTerminalPath{selector: ListPlansResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListPlansResponse_FieldTerminalPath{selector: ListPlansResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "plans":
			if subpath, err := plan.BuildPlan_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListPlansResponse_FieldSubPath{selector: ListPlansResponse_FieldPathSelectorPlans, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPlansResponse", fp)
}

func ParseListPlansResponse_FieldPath(rawField string) (ListPlansResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPlansResponse_FieldPath(fp)
}

func MustParseListPlansResponse_FieldPath(rawField string) ListPlansResponse_FieldPath {
	fp, err := ParseListPlansResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPlansResponse_FieldTerminalPath struct {
	selector ListPlansResponse_FieldPathSelector
}

var _ ListPlansResponse_FieldPath = (*ListPlansResponse_FieldTerminalPath)(nil)

func (fp *ListPlansResponse_FieldTerminalPath) Selector() ListPlansResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPlansResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPlansResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPlansResponse
func (fp *ListPlansResponse_FieldTerminalPath) Get(source *ListPlansResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPlansResponse_FieldPathSelectorPlans:
			for _, value := range source.GetPlans() {
				values = append(values, value)
			}
		case ListPlansResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListPlansResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPlansResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPlansResponse))
}

// GetSingle returns value pointed by specific field of from source ListPlansResponse
func (fp *ListPlansResponse_FieldTerminalPath) GetSingle(source *ListPlansResponse) (interface{}, bool) {
	switch fp.selector {
	case ListPlansResponse_FieldPathSelectorPlans:
		res := source.GetPlans()
		return res, res != nil
	case ListPlansResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListPlansResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fp.selector))
	}
}

func (fp *ListPlansResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPlansResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListPlansResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPlansResponse_FieldPathSelectorPlans:
		return ([]*plan.Plan)(nil)
	case ListPlansResponse_FieldPathSelectorPrevPageToken:
		return (*plan.PagerCursor)(nil)
	case ListPlansResponse_FieldPathSelectorNextPageToken:
		return (*plan.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fp.selector))
	}
}

func (fp *ListPlansResponse_FieldTerminalPath) ClearValue(item *ListPlansResponse) {
	if item != nil {
		switch fp.selector {
		case ListPlansResponse_FieldPathSelectorPlans:
			item.Plans = nil
		case ListPlansResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListPlansResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fp.selector))
		}
	}
}

func (fp *ListPlansResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPlansResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPlansResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPlansResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListPlansResponse_FieldPathSelectorNextPageToken
}

func (fp *ListPlansResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPlansResponse_FieldTerminalPath) WithIValue(value interface{}) ListPlansResponse_FieldPathValue {
	switch fp.selector {
	case ListPlansResponse_FieldPathSelectorPlans:
		return &ListPlansResponse_FieldTerminalPathValue{ListPlansResponse_FieldTerminalPath: *fp, value: value.([]*plan.Plan)}
	case ListPlansResponse_FieldPathSelectorPrevPageToken:
		return &ListPlansResponse_FieldTerminalPathValue{ListPlansResponse_FieldTerminalPath: *fp, value: value.(*plan.PagerCursor)}
	case ListPlansResponse_FieldPathSelectorNextPageToken:
		return &ListPlansResponse_FieldTerminalPathValue{ListPlansResponse_FieldTerminalPath: *fp, value: value.(*plan.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fp.selector))
	}
}

func (fp *ListPlansResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPlansResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPlansResponse_FieldPathArrayOfValues {
	fpaov := &ListPlansResponse_FieldTerminalPathArrayOfValues{ListPlansResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPlansResponse_FieldPathSelectorPlans:
		return &ListPlansResponse_FieldTerminalPathArrayOfValues{ListPlansResponse_FieldTerminalPath: *fp, values: values.([][]*plan.Plan)}
	case ListPlansResponse_FieldPathSelectorPrevPageToken:
		return &ListPlansResponse_FieldTerminalPathArrayOfValues{ListPlansResponse_FieldTerminalPath: *fp, values: values.([]*plan.PagerCursor)}
	case ListPlansResponse_FieldPathSelectorNextPageToken:
		return &ListPlansResponse_FieldTerminalPathArrayOfValues{ListPlansResponse_FieldTerminalPath: *fp, values: values.([]*plan.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPlansResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPlansResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPlansResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListPlansResponse_FieldPathSelectorPlans:
		return &ListPlansResponse_FieldTerminalPathArrayItemValue{ListPlansResponse_FieldTerminalPath: *fp, value: value.(*plan.Plan)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fp.selector))
	}
}

func (fp *ListPlansResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListPlansResponse_FieldSubPath struct {
	selector ListPlansResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListPlansResponse_FieldPath = (*ListPlansResponse_FieldSubPath)(nil)

func (fps *ListPlansResponse_FieldSubPath) Selector() ListPlansResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListPlansResponse_FieldSubPath) AsPlansSubPath() (plan.Plan_FieldPath, bool) {
	res, ok := fps.subPath.(plan.Plan_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListPlansResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListPlansResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListPlansResponse
func (fps *ListPlansResponse_FieldSubPath) Get(source *ListPlansResponse) (values []interface{}) {
	if asPlanFieldPath, ok := fps.AsPlansSubPath(); ok {
		for _, item := range source.GetPlans() {
			values = append(values, asPlanFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fps.selector))
	}
	return
}

func (fps *ListPlansResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListPlansResponse))
}

// GetSingle returns value of selected field from source ListPlansResponse
func (fps *ListPlansResponse_FieldSubPath) GetSingle(source *ListPlansResponse) (interface{}, bool) {
	switch fps.selector {
	case ListPlansResponse_FieldPathSelectorPlans:
		if len(source.GetPlans()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPlans()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fps.selector))
	}
}

func (fps *ListPlansResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListPlansResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListPlansResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListPlansResponse_FieldSubPath) ClearValue(item *ListPlansResponse) {
	if item != nil {
		switch fps.selector {
		case ListPlansResponse_FieldPathSelectorPlans:
			for _, subItem := range item.Plans {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fps.selector))
		}
	}
}

func (fps *ListPlansResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListPlansResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListPlansResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListPlansResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListPlansResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListPlansResponse_FieldSubPath) WithIValue(value interface{}) ListPlansResponse_FieldPathValue {
	return &ListPlansResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListPlansResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListPlansResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListPlansResponse_FieldPathArrayOfValues {
	return &ListPlansResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListPlansResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListPlansResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListPlansResponse_FieldPathArrayItemValue {
	return &ListPlansResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListPlansResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListPlansResponse_FieldPathValue allows storing values for ListPlansResponse fields according to their type
type ListPlansResponse_FieldPathValue interface {
	ListPlansResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPlansResponse)
	CompareWith(*ListPlansResponse) (cmp int, comparable bool)
}

func ParseListPlansResponse_FieldPathValue(pathStr, valueStr string) (ListPlansResponse_FieldPathValue, error) {
	fp, err := ParseListPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlansResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPlansResponse_FieldPathValue), nil
}

func MustParseListPlansResponse_FieldPathValue(pathStr, valueStr string) ListPlansResponse_FieldPathValue {
	fpv, err := ParseListPlansResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPlansResponse_FieldTerminalPathValue struct {
	ListPlansResponse_FieldTerminalPath
	value interface{}
}

var _ ListPlansResponse_FieldPathValue = (*ListPlansResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPlansResponse' as interface{}
func (fpv *ListPlansResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPlansResponse_FieldTerminalPathValue) AsPlansValue() ([]*plan.Plan, bool) {
	res, ok := fpv.value.([]*plan.Plan)
	return res, ok
}
func (fpv *ListPlansResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*plan.PagerCursor, bool) {
	res, ok := fpv.value.(*plan.PagerCursor)
	return res, ok
}
func (fpv *ListPlansResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*plan.PagerCursor, bool) {
	res, ok := fpv.value.(*plan.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListPlansResponse
func (fpv *ListPlansResponse_FieldTerminalPathValue) SetTo(target **ListPlansResponse) {
	if *target == nil {
		*target = new(ListPlansResponse)
	}
	switch fpv.selector {
	case ListPlansResponse_FieldPathSelectorPlans:
		(*target).Plans = fpv.value.([]*plan.Plan)
	case ListPlansResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*plan.PagerCursor)
	case ListPlansResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*plan.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fpv.selector))
	}
}

func (fpv *ListPlansResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPlansResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPlansResponse_FieldTerminalPathValue' with the value under path in 'ListPlansResponse'.
func (fpv *ListPlansResponse_FieldTerminalPathValue) CompareWith(source *ListPlansResponse) (int, bool) {
	switch fpv.selector {
	case ListPlansResponse_FieldPathSelectorPlans:
		return 0, false
	case ListPlansResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListPlansResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fpv.selector))
	}
}

func (fpv *ListPlansResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPlansResponse))
}

type ListPlansResponse_FieldSubPathValue struct {
	ListPlansResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListPlansResponse_FieldPathValue = (*ListPlansResponse_FieldSubPathValue)(nil)

func (fpvs *ListPlansResponse_FieldSubPathValue) AsPlansPathValue() (plan.Plan_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan.Plan_FieldPathValue)
	return res, ok
}

func (fpvs *ListPlansResponse_FieldSubPathValue) SetTo(target **ListPlansResponse) {
	if *target == nil {
		*target = new(ListPlansResponse)
	}
	switch fpvs.Selector() {
	case ListPlansResponse_FieldPathSelectorPlans:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPlansResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPlansResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListPlansResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListPlansResponse_FieldSubPathValue) CompareWith(source *ListPlansResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListPlansResponse_FieldPathSelectorPlans:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPlansResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListPlansResponse))
}

// ListPlansResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPlansResponse according to their type
// Present only for array (repeated) types.
type ListPlansResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPlansResponse_FieldPath
	ContainsValue(*ListPlansResponse) bool
}

// ParseListPlansResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPlansResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListPlansResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlansResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPlansResponse_FieldPathArrayItemValue), nil
}

func MustParseListPlansResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListPlansResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListPlansResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPlansResponse_FieldTerminalPathArrayItemValue struct {
	ListPlansResponse_FieldTerminalPath
	value interface{}
}

var _ ListPlansResponse_FieldPathArrayItemValue = (*ListPlansResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPlansResponse as interface{}
func (fpaiv *ListPlansResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListPlansResponse_FieldTerminalPathArrayItemValue) AsPlansItemValue() (*plan.Plan, bool) {
	res, ok := fpaiv.value.(*plan.Plan)
	return res, ok
}

func (fpaiv *ListPlansResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListPlansResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPlansResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPlansResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPlansResponse'
func (fpaiv *ListPlansResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPlansResponse) bool {
	slice := fpaiv.ListPlansResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListPlansResponse_FieldSubPathArrayItemValue struct {
	ListPlansResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListPlansResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListPlansResponse_FieldSubPathArrayItemValue) AsPlansPathItemValue() (plan.Plan_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan.Plan_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPlansResponse'
func (fpaivs *ListPlansResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListPlansResponse) bool {
	switch fpaivs.Selector() {
	case ListPlansResponse_FieldPathSelectorPlans:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlansResponse: %d", fpaivs.Selector()))
	}
}

// ListPlansResponse_FieldPathArrayOfValues allows storing slice of values for ListPlansResponse fields according to their type
type ListPlansResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPlansResponse_FieldPath
}

func ParseListPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPlansResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlansResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPlansResponse_FieldPathArrayOfValues), nil
}

func MustParseListPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListPlansResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPlansResponse_FieldTerminalPathArrayOfValues struct {
	ListPlansResponse_FieldTerminalPath
	values interface{}
}

var _ ListPlansResponse_FieldPathArrayOfValues = (*ListPlansResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPlansResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPlansResponse_FieldPathSelectorPlans:
		for _, v := range fpaov.values.([][]*plan.Plan) {
			values = append(values, v)
		}
	case ListPlansResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*plan.PagerCursor) {
			values = append(values, v)
		}
	case ListPlansResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*plan.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPlansResponse_FieldTerminalPathArrayOfValues) AsPlansArrayOfValues() ([][]*plan.Plan, bool) {
	res, ok := fpaov.values.([][]*plan.Plan)
	return res, ok
}
func (fpaov *ListPlansResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*plan.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan.PagerCursor)
	return res, ok
}
func (fpaov *ListPlansResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*plan.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan.PagerCursor)
	return res, ok
}

type ListPlansResponse_FieldSubPathArrayOfValues struct {
	ListPlansResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListPlansResponse_FieldPathArrayOfValues = (*ListPlansResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListPlansResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListPlansResponse_FieldSubPathArrayOfValues) AsPlansPathArrayOfValues() (plan.Plan_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan.Plan_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlanRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlanRequest_FieldPathSelector
	Get(source *WatchPlanRequest) []interface{}
	GetSingle(source *WatchPlanRequest) (interface{}, bool)
	ClearValue(item *WatchPlanRequest)

	// Those methods build corresponding WatchPlanRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlanRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlanRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlanRequest_FieldPathArrayItemValue
}

type WatchPlanRequest_FieldPathSelector int32

const (
	WatchPlanRequest_FieldPathSelectorName      WatchPlanRequest_FieldPathSelector = 0
	WatchPlanRequest_FieldPathSelectorFieldMask WatchPlanRequest_FieldPathSelector = 1
	WatchPlanRequest_FieldPathSelectorView      WatchPlanRequest_FieldPathSelector = 2
)

func (s WatchPlanRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPlanRequest_FieldPathSelectorName:
		return "name"
	case WatchPlanRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPlanRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanRequest: %d", s))
	}
}

func BuildWatchPlanRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPlanRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlanRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchPlanRequest_FieldTerminalPath{selector: WatchPlanRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPlanRequest_FieldTerminalPath{selector: WatchPlanRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPlanRequest_FieldTerminalPath{selector: WatchPlanRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlanRequest", fp)
}

func ParseWatchPlanRequest_FieldPath(rawField string) (WatchPlanRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlanRequest_FieldPath(fp)
}

func MustParseWatchPlanRequest_FieldPath(rawField string) WatchPlanRequest_FieldPath {
	fp, err := ParseWatchPlanRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlanRequest_FieldTerminalPath struct {
	selector WatchPlanRequest_FieldPathSelector
}

var _ WatchPlanRequest_FieldPath = (*WatchPlanRequest_FieldTerminalPath)(nil)

func (fp *WatchPlanRequest_FieldTerminalPath) Selector() WatchPlanRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlanRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlanRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlanRequest
func (fp *WatchPlanRequest_FieldTerminalPath) Get(source *WatchPlanRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlanRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchPlanRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPlanRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlanRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlanRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPlanRequest
func (fp *WatchPlanRequest_FieldTerminalPath) GetSingle(source *WatchPlanRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPlanRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchPlanRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPlanRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlanRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlanRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlanRequest_FieldPathSelectorName:
		return (*plan.Reference)(nil)
	case WatchPlanRequest_FieldPathSelectorFieldMask:
		return (*plan.Plan_FieldMask)(nil)
	case WatchPlanRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanRequest_FieldTerminalPath) ClearValue(item *WatchPlanRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPlanRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchPlanRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPlanRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPlanRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlanRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlanRequest_FieldPathSelectorName ||
		fp.selector == WatchPlanRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPlanRequest_FieldPathSelectorView
}

func (fp *WatchPlanRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlanRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPlanRequest_FieldPathValue {
	switch fp.selector {
	case WatchPlanRequest_FieldPathSelectorName:
		return &WatchPlanRequest_FieldTerminalPathValue{WatchPlanRequest_FieldTerminalPath: *fp, value: value.(*plan.Reference)}
	case WatchPlanRequest_FieldPathSelectorFieldMask:
		return &WatchPlanRequest_FieldTerminalPathValue{WatchPlanRequest_FieldTerminalPath: *fp, value: value.(*plan.Plan_FieldMask)}
	case WatchPlanRequest_FieldPathSelectorView:
		return &WatchPlanRequest_FieldTerminalPathValue{WatchPlanRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlanRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlanRequest_FieldPathArrayOfValues {
	fpaov := &WatchPlanRequest_FieldTerminalPathArrayOfValues{WatchPlanRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlanRequest_FieldPathSelectorName:
		return &WatchPlanRequest_FieldTerminalPathArrayOfValues{WatchPlanRequest_FieldTerminalPath: *fp, values: values.([]*plan.Reference)}
	case WatchPlanRequest_FieldPathSelectorFieldMask:
		return &WatchPlanRequest_FieldTerminalPathArrayOfValues{WatchPlanRequest_FieldTerminalPath: *fp, values: values.([]*plan.Plan_FieldMask)}
	case WatchPlanRequest_FieldPathSelectorView:
		return &WatchPlanRequest_FieldTerminalPathArrayOfValues{WatchPlanRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlanRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlanRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlanRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPlanRequest_FieldPathValue allows storing values for WatchPlanRequest fields according to their type
type WatchPlanRequest_FieldPathValue interface {
	WatchPlanRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlanRequest)
	CompareWith(*WatchPlanRequest) (cmp int, comparable bool)
}

func ParseWatchPlanRequest_FieldPathValue(pathStr, valueStr string) (WatchPlanRequest_FieldPathValue, error) {
	fp, err := ParseWatchPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlanRequest_FieldPathValue), nil
}

func MustParseWatchPlanRequest_FieldPathValue(pathStr, valueStr string) WatchPlanRequest_FieldPathValue {
	fpv, err := ParseWatchPlanRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlanRequest_FieldTerminalPathValue struct {
	WatchPlanRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPlanRequest_FieldPathValue = (*WatchPlanRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPlanRequest' as interface{}
func (fpv *WatchPlanRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlanRequest_FieldTerminalPathValue) AsNameValue() (*plan.Reference, bool) {
	res, ok := fpv.value.(*plan.Reference)
	return res, ok
}
func (fpv *WatchPlanRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan.Plan_FieldMask, bool) {
	res, ok := fpv.value.(*plan.Plan_FieldMask)
	return res, ok
}
func (fpv *WatchPlanRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchPlanRequest
func (fpv *WatchPlanRequest_FieldTerminalPathValue) SetTo(target **WatchPlanRequest) {
	if *target == nil {
		*target = new(WatchPlanRequest)
	}
	switch fpv.selector {
	case WatchPlanRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*plan.Reference)
	case WatchPlanRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan.Plan_FieldMask)
	case WatchPlanRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPlanRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlanRequest_FieldTerminalPathValue' with the value under path in 'WatchPlanRequest'.
func (fpv *WatchPlanRequest_FieldTerminalPathValue) CompareWith(source *WatchPlanRequest) (int, bool) {
	switch fpv.selector {
	case WatchPlanRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*plan.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPlanRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPlanRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlanRequest))
}

// WatchPlanRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPlanRequest according to their type
// Present only for array (repeated) types.
type WatchPlanRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlanRequest_FieldPath
	ContainsValue(*WatchPlanRequest) bool
}

// ParseWatchPlanRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlanRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlanRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlanRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlanRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlanRequest_FieldTerminalPathArrayItemValue struct {
	WatchPlanRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPlanRequest_FieldPathArrayItemValue = (*WatchPlanRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlanRequest as interface{}
func (fpaiv *WatchPlanRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPlanRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlanRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlanRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlanRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlanRequest'
func (fpaiv *WatchPlanRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlanRequest) bool {
	slice := fpaiv.WatchPlanRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPlanRequest_FieldPathArrayOfValues allows storing slice of values for WatchPlanRequest fields according to their type
type WatchPlanRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlanRequest_FieldPath
}

func ParseWatchPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlanRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlanRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlanRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlanRequest_FieldTerminalPathArrayOfValues struct {
	WatchPlanRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPlanRequest_FieldPathArrayOfValues = (*WatchPlanRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlanRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlanRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*plan.Reference) {
			values = append(values, v)
		}
	case WatchPlanRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan.Plan_FieldMask) {
			values = append(values, v)
		}
	case WatchPlanRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlanRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*plan.Reference, bool) {
	res, ok := fpaov.values.([]*plan.Reference)
	return res, ok
}
func (fpaov *WatchPlanRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan.Plan_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan.Plan_FieldMask)
	return res, ok
}
func (fpaov *WatchPlanRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlanResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlanResponse_FieldPathSelector
	Get(source *WatchPlanResponse) []interface{}
	GetSingle(source *WatchPlanResponse) (interface{}, bool)
	ClearValue(item *WatchPlanResponse)

	// Those methods build corresponding WatchPlanResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlanResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlanResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlanResponse_FieldPathArrayItemValue
}

type WatchPlanResponse_FieldPathSelector int32

const (
	WatchPlanResponse_FieldPathSelectorChange WatchPlanResponse_FieldPathSelector = 0
)

func (s WatchPlanResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPlanResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanResponse: %d", s))
	}
}

func BuildWatchPlanResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPlanResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlanResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchPlanResponse_FieldTerminalPath{selector: WatchPlanResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlanResponse", fp)
}

func ParseWatchPlanResponse_FieldPath(rawField string) (WatchPlanResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlanResponse_FieldPath(fp)
}

func MustParseWatchPlanResponse_FieldPath(rawField string) WatchPlanResponse_FieldPath {
	fp, err := ParseWatchPlanResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlanResponse_FieldTerminalPath struct {
	selector WatchPlanResponse_FieldPathSelector
}

var _ WatchPlanResponse_FieldPath = (*WatchPlanResponse_FieldTerminalPath)(nil)

func (fp *WatchPlanResponse_FieldTerminalPath) Selector() WatchPlanResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlanResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlanResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlanResponse
func (fp *WatchPlanResponse_FieldTerminalPath) Get(source *WatchPlanResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlanResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlanResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlanResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPlanResponse
func (fp *WatchPlanResponse_FieldTerminalPath) GetSingle(source *WatchPlanResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPlanResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlanResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlanResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlanResponse_FieldPathSelectorChange:
		return (*plan.PlanChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanResponse_FieldTerminalPath) ClearValue(item *WatchPlanResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPlanResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPlanResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlanResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlanResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlanResponse_FieldPathSelectorChange
}

func (fp *WatchPlanResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlanResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPlanResponse_FieldPathValue {
	switch fp.selector {
	case WatchPlanResponse_FieldPathSelectorChange:
		return &WatchPlanResponse_FieldTerminalPathValue{WatchPlanResponse_FieldTerminalPath: *fp, value: value.(*plan.PlanChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlanResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlanResponse_FieldPathArrayOfValues {
	fpaov := &WatchPlanResponse_FieldTerminalPathArrayOfValues{WatchPlanResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlanResponse_FieldPathSelectorChange:
		return &WatchPlanResponse_FieldTerminalPathArrayOfValues{WatchPlanResponse_FieldTerminalPath: *fp, values: values.([]*plan.PlanChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlanResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlanResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlanResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPlanResponse_FieldPathValue allows storing values for WatchPlanResponse fields according to their type
type WatchPlanResponse_FieldPathValue interface {
	WatchPlanResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlanResponse)
	CompareWith(*WatchPlanResponse) (cmp int, comparable bool)
}

func ParseWatchPlanResponse_FieldPathValue(pathStr, valueStr string) (WatchPlanResponse_FieldPathValue, error) {
	fp, err := ParseWatchPlanResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlanResponse_FieldPathValue), nil
}

func MustParseWatchPlanResponse_FieldPathValue(pathStr, valueStr string) WatchPlanResponse_FieldPathValue {
	fpv, err := ParseWatchPlanResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlanResponse_FieldTerminalPathValue struct {
	WatchPlanResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPlanResponse_FieldPathValue = (*WatchPlanResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPlanResponse' as interface{}
func (fpv *WatchPlanResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlanResponse_FieldTerminalPathValue) AsChangeValue() (*plan.PlanChange, bool) {
	res, ok := fpv.value.(*plan.PlanChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchPlanResponse
func (fpv *WatchPlanResponse_FieldTerminalPathValue) SetTo(target **WatchPlanResponse) {
	if *target == nil {
		*target = new(WatchPlanResponse)
	}
	switch fpv.selector {
	case WatchPlanResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*plan.PlanChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPlanResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlanResponse_FieldTerminalPathValue' with the value under path in 'WatchPlanResponse'.
func (fpv *WatchPlanResponse_FieldTerminalPathValue) CompareWith(source *WatchPlanResponse) (int, bool) {
	switch fpv.selector {
	case WatchPlanResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPlanResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlanResponse))
}

// WatchPlanResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPlanResponse according to their type
// Present only for array (repeated) types.
type WatchPlanResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlanResponse_FieldPath
	ContainsValue(*WatchPlanResponse) bool
}

// ParseWatchPlanResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlanResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlanResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlanResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlanResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPlanResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlanResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlanResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlanResponse_FieldTerminalPathArrayItemValue struct {
	WatchPlanResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPlanResponse_FieldPathArrayItemValue = (*WatchPlanResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlanResponse as interface{}
func (fpaiv *WatchPlanResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPlanResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlanResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlanResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlanResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlanResponse'
func (fpaiv *WatchPlanResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlanResponse) bool {
	slice := fpaiv.WatchPlanResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPlanResponse_FieldPathArrayOfValues allows storing slice of values for WatchPlanResponse fields according to their type
type WatchPlanResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlanResponse_FieldPath
}

func ParseWatchPlanResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlanResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlanResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlanResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPlanResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlanResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlanResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlanResponse_FieldTerminalPathArrayOfValues struct {
	WatchPlanResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPlanResponse_FieldPathArrayOfValues = (*WatchPlanResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlanResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlanResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*plan.PlanChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlanResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*plan.PlanChange, bool) {
	res, ok := fpaov.values.([]*plan.PlanChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlansRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlansRequest_FieldPathSelector
	Get(source *WatchPlansRequest) []interface{}
	GetSingle(source *WatchPlansRequest) (interface{}, bool)
	ClearValue(item *WatchPlansRequest)

	// Those methods build corresponding WatchPlansRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlansRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlansRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlansRequest_FieldPathArrayItemValue
}

type WatchPlansRequest_FieldPathSelector int32

const (
	WatchPlansRequest_FieldPathSelectorType         WatchPlansRequest_FieldPathSelector = 0
	WatchPlansRequest_FieldPathSelectorPageSize     WatchPlansRequest_FieldPathSelector = 1
	WatchPlansRequest_FieldPathSelectorPageToken    WatchPlansRequest_FieldPathSelector = 2
	WatchPlansRequest_FieldPathSelectorOrderBy      WatchPlansRequest_FieldPathSelector = 3
	WatchPlansRequest_FieldPathSelectorResumeToken  WatchPlansRequest_FieldPathSelector = 4
	WatchPlansRequest_FieldPathSelectorStartingTime WatchPlansRequest_FieldPathSelector = 5
	WatchPlansRequest_FieldPathSelectorFilter       WatchPlansRequest_FieldPathSelector = 6
	WatchPlansRequest_FieldPathSelectorFieldMask    WatchPlansRequest_FieldPathSelector = 7
	WatchPlansRequest_FieldPathSelectorView         WatchPlansRequest_FieldPathSelector = 8
	WatchPlansRequest_FieldPathSelectorMaxChunkSize WatchPlansRequest_FieldPathSelector = 9
)

func (s WatchPlansRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPlansRequest_FieldPathSelectorType:
		return "type"
	case WatchPlansRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchPlansRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchPlansRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchPlansRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPlansRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchPlansRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchPlansRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPlansRequest_FieldPathSelectorView:
		return "view"
	case WatchPlansRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansRequest: %d", s))
	}
}

func BuildWatchPlansRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPlansRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlansRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorType}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchPlansRequest_FieldTerminalPath{selector: WatchPlansRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlansRequest", fp)
}

func ParseWatchPlansRequest_FieldPath(rawField string) (WatchPlansRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlansRequest_FieldPath(fp)
}

func MustParseWatchPlansRequest_FieldPath(rawField string) WatchPlansRequest_FieldPath {
	fp, err := ParseWatchPlansRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlansRequest_FieldTerminalPath struct {
	selector WatchPlansRequest_FieldPathSelector
}

var _ WatchPlansRequest_FieldPath = (*WatchPlansRequest_FieldTerminalPath)(nil)

func (fp *WatchPlansRequest_FieldTerminalPath) Selector() WatchPlansRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlansRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlansRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlansRequest
func (fp *WatchPlansRequest_FieldTerminalPath) Get(source *WatchPlansRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlansRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchPlansRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchPlansRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchPlansRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchPlansRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPlansRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchPlansRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchPlansRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPlansRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchPlansRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlansRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlansRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlansRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPlansRequest
func (fp *WatchPlansRequest_FieldTerminalPath) GetSingle(source *WatchPlansRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPlansRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchPlansRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchPlansRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchPlansRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchPlansRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPlansRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchPlansRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchPlansRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPlansRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchPlansRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansRequest: %d", fp.selector))
	}
}

func (fp *WatchPlansRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlansRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlansRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlansRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchPlansRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchPlansRequest_FieldPathSelectorPageToken:
		return (*plan.PagerCursor)(nil)
	case WatchPlansRequest_FieldPathSelectorOrderBy:
		return (*plan.OrderBy)(nil)
	case WatchPlansRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchPlansRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchPlansRequest_FieldPathSelectorFilter:
		return (*plan.Filter)(nil)
	case WatchPlansRequest_FieldPathSelectorFieldMask:
		return (*plan.Plan_FieldMask)(nil)
	case WatchPlansRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchPlansRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansRequest: %d", fp.selector))
	}
}

func (fp *WatchPlansRequest_FieldTerminalPath) ClearValue(item *WatchPlansRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPlansRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchPlansRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchPlansRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchPlansRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchPlansRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPlansRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchPlansRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchPlansRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPlansRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchPlansRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlansRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPlansRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlansRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlansRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlansRequest_FieldPathSelectorType ||
		fp.selector == WatchPlansRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchPlansRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchPlansRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchPlansRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchPlansRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchPlansRequest_FieldPathSelectorFilter ||
		fp.selector == WatchPlansRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPlansRequest_FieldPathSelectorView ||
		fp.selector == WatchPlansRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchPlansRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlansRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPlansRequest_FieldPathValue {
	switch fp.selector {
	case WatchPlansRequest_FieldPathSelectorType:
		return &WatchPlansRequest_FieldTerminalPathValue{WatchPlansRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchPlansRequest_FieldPathSelectorPageSize:
		return &WatchPlansRequest_FieldTerminalPathValue{WatchPlansRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchPlansRequest_FieldPathSelectorPageToken:
		return &WatchPlansRequest_FieldTerminalPathValue{WatchPlansRequest_FieldTerminalPath: *fp, value: value.(*plan.PagerCursor)}
	case WatchPlansRequest_FieldPathSelectorOrderBy:
		return &WatchPlansRequest_FieldTerminalPathValue{WatchPlansRequest_FieldTerminalPath: *fp, value: value.(*plan.OrderBy)}
	case WatchPlansRequest_FieldPathSelectorResumeToken:
		return &WatchPlansRequest_FieldTerminalPathValue{WatchPlansRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPlansRequest_FieldPathSelectorStartingTime:
		return &WatchPlansRequest_FieldTerminalPathValue{WatchPlansRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchPlansRequest_FieldPathSelectorFilter:
		return &WatchPlansRequest_FieldTerminalPathValue{WatchPlansRequest_FieldTerminalPath: *fp, value: value.(*plan.Filter)}
	case WatchPlansRequest_FieldPathSelectorFieldMask:
		return &WatchPlansRequest_FieldTerminalPathValue{WatchPlansRequest_FieldTerminalPath: *fp, value: value.(*plan.Plan_FieldMask)}
	case WatchPlansRequest_FieldPathSelectorView:
		return &WatchPlansRequest_FieldTerminalPathValue{WatchPlansRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchPlansRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPlansRequest_FieldTerminalPathValue{WatchPlansRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansRequest: %d", fp.selector))
	}
}

func (fp *WatchPlansRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlansRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlansRequest_FieldPathArrayOfValues {
	fpaov := &WatchPlansRequest_FieldTerminalPathArrayOfValues{WatchPlansRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlansRequest_FieldPathSelectorType:
		return &WatchPlansRequest_FieldTerminalPathArrayOfValues{WatchPlansRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchPlansRequest_FieldPathSelectorPageSize:
		return &WatchPlansRequest_FieldTerminalPathArrayOfValues{WatchPlansRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchPlansRequest_FieldPathSelectorPageToken:
		return &WatchPlansRequest_FieldTerminalPathArrayOfValues{WatchPlansRequest_FieldTerminalPath: *fp, values: values.([]*plan.PagerCursor)}
	case WatchPlansRequest_FieldPathSelectorOrderBy:
		return &WatchPlansRequest_FieldTerminalPathArrayOfValues{WatchPlansRequest_FieldTerminalPath: *fp, values: values.([]*plan.OrderBy)}
	case WatchPlansRequest_FieldPathSelectorResumeToken:
		return &WatchPlansRequest_FieldTerminalPathArrayOfValues{WatchPlansRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPlansRequest_FieldPathSelectorStartingTime:
		return &WatchPlansRequest_FieldTerminalPathArrayOfValues{WatchPlansRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchPlansRequest_FieldPathSelectorFilter:
		return &WatchPlansRequest_FieldTerminalPathArrayOfValues{WatchPlansRequest_FieldTerminalPath: *fp, values: values.([]*plan.Filter)}
	case WatchPlansRequest_FieldPathSelectorFieldMask:
		return &WatchPlansRequest_FieldTerminalPathArrayOfValues{WatchPlansRequest_FieldTerminalPath: *fp, values: values.([]*plan.Plan_FieldMask)}
	case WatchPlansRequest_FieldPathSelectorView:
		return &WatchPlansRequest_FieldTerminalPathArrayOfValues{WatchPlansRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchPlansRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPlansRequest_FieldTerminalPathArrayOfValues{WatchPlansRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlansRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlansRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlansRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansRequest: %d", fp.selector))
	}
}

func (fp *WatchPlansRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPlansRequest_FieldPathValue allows storing values for WatchPlansRequest fields according to their type
type WatchPlansRequest_FieldPathValue interface {
	WatchPlansRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlansRequest)
	CompareWith(*WatchPlansRequest) (cmp int, comparable bool)
}

func ParseWatchPlansRequest_FieldPathValue(pathStr, valueStr string) (WatchPlansRequest_FieldPathValue, error) {
	fp, err := ParseWatchPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlansRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlansRequest_FieldPathValue), nil
}

func MustParseWatchPlansRequest_FieldPathValue(pathStr, valueStr string) WatchPlansRequest_FieldPathValue {
	fpv, err := ParseWatchPlansRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlansRequest_FieldTerminalPathValue struct {
	WatchPlansRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPlansRequest_FieldPathValue = (*WatchPlansRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPlansRequest' as interface{}
func (fpv *WatchPlansRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlansRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchPlansRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchPlansRequest_FieldTerminalPathValue) AsPageTokenValue() (*plan.PagerCursor, bool) {
	res, ok := fpv.value.(*plan.PagerCursor)
	return res, ok
}
func (fpv *WatchPlansRequest_FieldTerminalPathValue) AsOrderByValue() (*plan.OrderBy, bool) {
	res, ok := fpv.value.(*plan.OrderBy)
	return res, ok
}
func (fpv *WatchPlansRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPlansRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchPlansRequest_FieldTerminalPathValue) AsFilterValue() (*plan.Filter, bool) {
	res, ok := fpv.value.(*plan.Filter)
	return res, ok
}
func (fpv *WatchPlansRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan.Plan_FieldMask, bool) {
	res, ok := fpv.value.(*plan.Plan_FieldMask)
	return res, ok
}
func (fpv *WatchPlansRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchPlansRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchPlansRequest
func (fpv *WatchPlansRequest_FieldTerminalPathValue) SetTo(target **WatchPlansRequest) {
	if *target == nil {
		*target = new(WatchPlansRequest)
	}
	switch fpv.selector {
	case WatchPlansRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchPlansRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchPlansRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*plan.PagerCursor)
	case WatchPlansRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*plan.OrderBy)
	case WatchPlansRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPlansRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchPlansRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*plan.Filter)
	case WatchPlansRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan.Plan_FieldMask)
	case WatchPlansRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchPlansRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPlansRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlansRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlansRequest_FieldTerminalPathValue' with the value under path in 'WatchPlansRequest'.
func (fpv *WatchPlansRequest_FieldTerminalPathValue) CompareWith(source *WatchPlansRequest) (int, bool) {
	switch fpv.selector {
	case WatchPlansRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlansRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlansRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchPlansRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchPlansRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlansRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlansRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchPlansRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPlansRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlansRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPlansRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlansRequest))
}

// WatchPlansRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPlansRequest according to their type
// Present only for array (repeated) types.
type WatchPlansRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlansRequest_FieldPath
	ContainsValue(*WatchPlansRequest) bool
}

// ParseWatchPlansRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlansRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlansRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlansRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlansRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPlansRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlansRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlansRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlansRequest_FieldTerminalPathArrayItemValue struct {
	WatchPlansRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPlansRequest_FieldPathArrayItemValue = (*WatchPlansRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlansRequest as interface{}
func (fpaiv *WatchPlansRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPlansRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlansRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlansRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlansRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlansRequest'
func (fpaiv *WatchPlansRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlansRequest) bool {
	slice := fpaiv.WatchPlansRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPlansRequest_FieldPathArrayOfValues allows storing slice of values for WatchPlansRequest fields according to their type
type WatchPlansRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlansRequest_FieldPath
}

func ParseWatchPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlansRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlansRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlansRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlansRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlansRequest_FieldTerminalPathArrayOfValues struct {
	WatchPlansRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPlansRequest_FieldPathArrayOfValues = (*WatchPlansRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlansRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlansRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchPlansRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchPlansRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*plan.PagerCursor) {
			values = append(values, v)
		}
	case WatchPlansRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*plan.OrderBy) {
			values = append(values, v)
		}
	case WatchPlansRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPlansRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchPlansRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*plan.Filter) {
			values = append(values, v)
		}
	case WatchPlansRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan.Plan_FieldMask) {
			values = append(values, v)
		}
	case WatchPlansRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchPlansRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlansRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchPlansRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchPlansRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*plan.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan.PagerCursor)
	return res, ok
}
func (fpaov *WatchPlansRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*plan.OrderBy, bool) {
	res, ok := fpaov.values.([]*plan.OrderBy)
	return res, ok
}
func (fpaov *WatchPlansRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPlansRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchPlansRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*plan.Filter, bool) {
	res, ok := fpaov.values.([]*plan.Filter)
	return res, ok
}
func (fpaov *WatchPlansRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan.Plan_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan.Plan_FieldMask)
	return res, ok
}
func (fpaov *WatchPlansRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchPlansRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlansResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlansResponse_FieldPathSelector
	Get(source *WatchPlansResponse) []interface{}
	GetSingle(source *WatchPlansResponse) (interface{}, bool)
	ClearValue(item *WatchPlansResponse)

	// Those methods build corresponding WatchPlansResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlansResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlansResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlansResponse_FieldPathArrayItemValue
}

type WatchPlansResponse_FieldPathSelector int32

const (
	WatchPlansResponse_FieldPathSelectorPlanChanges     WatchPlansResponse_FieldPathSelector = 0
	WatchPlansResponse_FieldPathSelectorIsCurrent       WatchPlansResponse_FieldPathSelector = 1
	WatchPlansResponse_FieldPathSelectorPageTokenChange WatchPlansResponse_FieldPathSelector = 2
	WatchPlansResponse_FieldPathSelectorResumeToken     WatchPlansResponse_FieldPathSelector = 3
	WatchPlansResponse_FieldPathSelectorSnapshotSize    WatchPlansResponse_FieldPathSelector = 4
	WatchPlansResponse_FieldPathSelectorIsSoftReset     WatchPlansResponse_FieldPathSelector = 5
	WatchPlansResponse_FieldPathSelectorIsHardReset     WatchPlansResponse_FieldPathSelector = 6
)

func (s WatchPlansResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPlansResponse_FieldPathSelectorPlanChanges:
		return "plan_changes"
	case WatchPlansResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchPlansResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchPlansResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPlansResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchPlansResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchPlansResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", s))
	}
}

func BuildWatchPlansResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPlansResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlansResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plan_changes", "planChanges", "plan-changes":
			return &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorPlanChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchPlansResponse_FieldTerminalPath{selector: WatchPlansResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchPlansResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchPlansResponse_FieldSubPath{selector: WatchPlansResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlansResponse", fp)
}

func ParseWatchPlansResponse_FieldPath(rawField string) (WatchPlansResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlansResponse_FieldPath(fp)
}

func MustParseWatchPlansResponse_FieldPath(rawField string) WatchPlansResponse_FieldPath {
	fp, err := ParseWatchPlansResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlansResponse_FieldTerminalPath struct {
	selector WatchPlansResponse_FieldPathSelector
}

var _ WatchPlansResponse_FieldPath = (*WatchPlansResponse_FieldTerminalPath)(nil)

func (fp *WatchPlansResponse_FieldTerminalPath) Selector() WatchPlansResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlansResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlansResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlansResponse
func (fp *WatchPlansResponse_FieldTerminalPath) Get(source *WatchPlansResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlansResponse_FieldPathSelectorPlanChanges:
			for _, value := range source.GetPlanChanges() {
				values = append(values, value)
			}
		case WatchPlansResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchPlansResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchPlansResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPlansResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchPlansResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchPlansResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlansResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlansResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPlansResponse
func (fp *WatchPlansResponse_FieldTerminalPath) GetSingle(source *WatchPlansResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPlansResponse_FieldPathSelectorPlanChanges:
		res := source.GetPlanChanges()
		return res, res != nil
	case WatchPlansResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchPlansResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchPlansResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPlansResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchPlansResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchPlansResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fp.selector))
	}
}

func (fp *WatchPlansResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlansResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlansResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlansResponse_FieldPathSelectorPlanChanges:
		return ([]*plan.PlanChange)(nil)
	case WatchPlansResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchPlansResponse_FieldPathSelectorPageTokenChange:
		return (*WatchPlansResponse_PageTokenChange)(nil)
	case WatchPlansResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchPlansResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchPlansResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchPlansResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fp.selector))
	}
}

func (fp *WatchPlansResponse_FieldTerminalPath) ClearValue(item *WatchPlansResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPlansResponse_FieldPathSelectorPlanChanges:
			item.PlanChanges = nil
		case WatchPlansResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchPlansResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchPlansResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPlansResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchPlansResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchPlansResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPlansResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlansResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlansResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlansResponse_FieldPathSelectorPlanChanges ||
		fp.selector == WatchPlansResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchPlansResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchPlansResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchPlansResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchPlansResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchPlansResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlansResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPlansResponse_FieldPathValue {
	switch fp.selector {
	case WatchPlansResponse_FieldPathSelectorPlanChanges:
		return &WatchPlansResponse_FieldTerminalPathValue{WatchPlansResponse_FieldTerminalPath: *fp, value: value.([]*plan.PlanChange)}
	case WatchPlansResponse_FieldPathSelectorIsCurrent:
		return &WatchPlansResponse_FieldTerminalPathValue{WatchPlansResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPlansResponse_FieldPathSelectorPageTokenChange:
		return &WatchPlansResponse_FieldTerminalPathValue{WatchPlansResponse_FieldTerminalPath: *fp, value: value.(*WatchPlansResponse_PageTokenChange)}
	case WatchPlansResponse_FieldPathSelectorResumeToken:
		return &WatchPlansResponse_FieldTerminalPathValue{WatchPlansResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPlansResponse_FieldPathSelectorSnapshotSize:
		return &WatchPlansResponse_FieldTerminalPathValue{WatchPlansResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchPlansResponse_FieldPathSelectorIsSoftReset:
		return &WatchPlansResponse_FieldTerminalPathValue{WatchPlansResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPlansResponse_FieldPathSelectorIsHardReset:
		return &WatchPlansResponse_FieldTerminalPathValue{WatchPlansResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fp.selector))
	}
}

func (fp *WatchPlansResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlansResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlansResponse_FieldPathArrayOfValues {
	fpaov := &WatchPlansResponse_FieldTerminalPathArrayOfValues{WatchPlansResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlansResponse_FieldPathSelectorPlanChanges:
		return &WatchPlansResponse_FieldTerminalPathArrayOfValues{WatchPlansResponse_FieldTerminalPath: *fp, values: values.([][]*plan.PlanChange)}
	case WatchPlansResponse_FieldPathSelectorIsCurrent:
		return &WatchPlansResponse_FieldTerminalPathArrayOfValues{WatchPlansResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPlansResponse_FieldPathSelectorPageTokenChange:
		return &WatchPlansResponse_FieldTerminalPathArrayOfValues{WatchPlansResponse_FieldTerminalPath: *fp, values: values.([]*WatchPlansResponse_PageTokenChange)}
	case WatchPlansResponse_FieldPathSelectorResumeToken:
		return &WatchPlansResponse_FieldTerminalPathArrayOfValues{WatchPlansResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPlansResponse_FieldPathSelectorSnapshotSize:
		return &WatchPlansResponse_FieldTerminalPathArrayOfValues{WatchPlansResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchPlansResponse_FieldPathSelectorIsSoftReset:
		return &WatchPlansResponse_FieldTerminalPathArrayOfValues{WatchPlansResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPlansResponse_FieldPathSelectorIsHardReset:
		return &WatchPlansResponse_FieldTerminalPathArrayOfValues{WatchPlansResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlansResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlansResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlansResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchPlansResponse_FieldPathSelectorPlanChanges:
		return &WatchPlansResponse_FieldTerminalPathArrayItemValue{WatchPlansResponse_FieldTerminalPath: *fp, value: value.(*plan.PlanChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fp.selector))
	}
}

func (fp *WatchPlansResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchPlansResponse_FieldSubPath struct {
	selector WatchPlansResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchPlansResponse_FieldPath = (*WatchPlansResponse_FieldSubPath)(nil)

func (fps *WatchPlansResponse_FieldSubPath) Selector() WatchPlansResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchPlansResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchPlansResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchPlansResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchPlansResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchPlansResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchPlansResponse
func (fps *WatchPlansResponse_FieldSubPath) Get(source *WatchPlansResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchPlansResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchPlansResponse))
}

// GetSingle returns value of selected field from source WatchPlansResponse
func (fps *WatchPlansResponse_FieldSubPath) GetSingle(source *WatchPlansResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchPlansResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fps.selector))
	}
}

func (fps *WatchPlansResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchPlansResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchPlansResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchPlansResponse_FieldSubPath) ClearValue(item *WatchPlansResponse) {
	if item != nil {
		switch fps.selector {
		case WatchPlansResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchPlansResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchPlansResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchPlansResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchPlansResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchPlansResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchPlansResponse_FieldSubPath) WithIValue(value interface{}) WatchPlansResponse_FieldPathValue {
	return &WatchPlansResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchPlansResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchPlansResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchPlansResponse_FieldPathArrayOfValues {
	return &WatchPlansResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchPlansResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchPlansResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchPlansResponse_FieldPathArrayItemValue {
	return &WatchPlansResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchPlansResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchPlansResponse_FieldPathValue allows storing values for WatchPlansResponse fields according to their type
type WatchPlansResponse_FieldPathValue interface {
	WatchPlansResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlansResponse)
	CompareWith(*WatchPlansResponse) (cmp int, comparable bool)
}

func ParseWatchPlansResponse_FieldPathValue(pathStr, valueStr string) (WatchPlansResponse_FieldPathValue, error) {
	fp, err := ParseWatchPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlansResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlansResponse_FieldPathValue), nil
}

func MustParseWatchPlansResponse_FieldPathValue(pathStr, valueStr string) WatchPlansResponse_FieldPathValue {
	fpv, err := ParseWatchPlansResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlansResponse_FieldTerminalPathValue struct {
	WatchPlansResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPlansResponse_FieldPathValue = (*WatchPlansResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPlansResponse' as interface{}
func (fpv *WatchPlansResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlansResponse_FieldTerminalPathValue) AsPlanChangesValue() ([]*plan.PlanChange, bool) {
	res, ok := fpv.value.([]*plan.PlanChange)
	return res, ok
}
func (fpv *WatchPlansResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPlansResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchPlansResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchPlansResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchPlansResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPlansResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchPlansResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPlansResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchPlansResponse
func (fpv *WatchPlansResponse_FieldTerminalPathValue) SetTo(target **WatchPlansResponse) {
	if *target == nil {
		*target = new(WatchPlansResponse)
	}
	switch fpv.selector {
	case WatchPlansResponse_FieldPathSelectorPlanChanges:
		(*target).PlanChanges = fpv.value.([]*plan.PlanChange)
	case WatchPlansResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchPlansResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchPlansResponse_PageTokenChange)
	case WatchPlansResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPlansResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchPlansResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchPlansResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPlansResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlansResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlansResponse_FieldTerminalPathValue' with the value under path in 'WatchPlansResponse'.
func (fpv *WatchPlansResponse_FieldTerminalPathValue) CompareWith(source *WatchPlansResponse) (int, bool) {
	switch fpv.selector {
	case WatchPlansResponse_FieldPathSelectorPlanChanges:
		return 0, false
	case WatchPlansResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlansResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchPlansResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlansResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlansResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlansResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPlansResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlansResponse))
}

type WatchPlansResponse_FieldSubPathValue struct {
	WatchPlansResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchPlansResponse_FieldPathValue = (*WatchPlansResponse_FieldSubPathValue)(nil)

func (fpvs *WatchPlansResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchPlansResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchPlansResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchPlansResponse_FieldSubPathValue) SetTo(target **WatchPlansResponse) {
	if *target == nil {
		*target = new(WatchPlansResponse)
	}
	switch fpvs.Selector() {
	case WatchPlansResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchPlansResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPlansResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlansResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchPlansResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchPlansResponse_FieldSubPathValue) CompareWith(source *WatchPlansResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchPlansResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchPlansResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPlansResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchPlansResponse))
}

// WatchPlansResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPlansResponse according to their type
// Present only for array (repeated) types.
type WatchPlansResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlansResponse_FieldPath
	ContainsValue(*WatchPlansResponse) bool
}

// ParseWatchPlansResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlansResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlansResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlansResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlansResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPlansResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlansResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlansResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlansResponse_FieldTerminalPathArrayItemValue struct {
	WatchPlansResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPlansResponse_FieldPathArrayItemValue = (*WatchPlansResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlansResponse as interface{}
func (fpaiv *WatchPlansResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchPlansResponse_FieldTerminalPathArrayItemValue) AsPlanChangesItemValue() (*plan.PlanChange, bool) {
	res, ok := fpaiv.value.(*plan.PlanChange)
	return res, ok
}

func (fpaiv *WatchPlansResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlansResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlansResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlansResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlansResponse'
func (fpaiv *WatchPlansResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlansResponse) bool {
	slice := fpaiv.WatchPlansResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchPlansResponse_FieldSubPathArrayItemValue struct {
	WatchPlansResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchPlansResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchPlansResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchPlansResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchPlansResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlansResponse'
func (fpaivs *WatchPlansResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchPlansResponse) bool {
	switch fpaivs.Selector() {
	case WatchPlansResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchPlansResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse: %d", fpaivs.Selector()))
	}
}

// WatchPlansResponse_FieldPathArrayOfValues allows storing slice of values for WatchPlansResponse fields according to their type
type WatchPlansResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlansResponse_FieldPath
}

func ParseWatchPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlansResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlansResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlansResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlansResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlansResponse_FieldTerminalPathArrayOfValues struct {
	WatchPlansResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPlansResponse_FieldPathArrayOfValues = (*WatchPlansResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlansResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlansResponse_FieldPathSelectorPlanChanges:
		for _, v := range fpaov.values.([][]*plan.PlanChange) {
			values = append(values, v)
		}
	case WatchPlansResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPlansResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchPlansResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchPlansResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPlansResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchPlansResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPlansResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlansResponse_FieldTerminalPathArrayOfValues) AsPlanChangesArrayOfValues() ([][]*plan.PlanChange, bool) {
	res, ok := fpaov.values.([][]*plan.PlanChange)
	return res, ok
}
func (fpaov *WatchPlansResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPlansResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchPlansResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchPlansResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchPlansResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPlansResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchPlansResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPlansResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchPlansResponse_FieldSubPathArrayOfValues struct {
	WatchPlansResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchPlansResponse_FieldPathArrayOfValues = (*WatchPlansResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchPlansResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchPlansResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchPlansResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchPlansResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlansResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlansResponsePageTokenChange_FieldPathSelector
	Get(source *WatchPlansResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchPlansResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchPlansResponse_PageTokenChange)

	// Those methods build corresponding WatchPlansResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlansResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlansResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlansResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchPlansResponsePageTokenChange_FieldPathSelector int32

const (
	WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchPlansResponsePageTokenChange_FieldPathSelector = 0
	WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken WatchPlansResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchPlansResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchPlansResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchPlansResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlansResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchPlansResponsePageTokenChange_FieldTerminalPath{selector: WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchPlansResponsePageTokenChange_FieldTerminalPath{selector: WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlansResponse_PageTokenChange", fp)
}

func ParseWatchPlansResponsePageTokenChange_FieldPath(rawField string) (WatchPlansResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlansResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchPlansResponsePageTokenChange_FieldPath(rawField string) WatchPlansResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchPlansResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlansResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchPlansResponsePageTokenChange_FieldPathSelector
}

var _ WatchPlansResponsePageTokenChange_FieldPath = (*WatchPlansResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) Selector() WatchPlansResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlansResponse_PageTokenChange
func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) Get(source *WatchPlansResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlansResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlansResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchPlansResponse_PageTokenChange
func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchPlansResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlansResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*plan.PagerCursor)(nil)
	case WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*plan.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchPlansResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlansResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlansResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchPlansResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPlansResponsePageTokenChange_FieldTerminalPathValue{WatchPlansResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*plan.PagerCursor)}
	case WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPlansResponsePageTokenChange_FieldTerminalPathValue{WatchPlansResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*plan.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlansResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPlansResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPlansResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*plan.PagerCursor)}
	case WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPlansResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*plan.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlansResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPlansResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPlansResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchPlansResponsePageTokenChange_FieldPathValue interface {
	WatchPlansResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlansResponse_PageTokenChange)
	CompareWith(*WatchPlansResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchPlansResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchPlansResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchPlansResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlansResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchPlansResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchPlansResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchPlansResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlansResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchPlansResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPlansResponsePageTokenChange_FieldPathValue = (*WatchPlansResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchPlansResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlansResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*plan.PagerCursor, bool) {
	res, ok := fpv.value.(*plan.PagerCursor)
	return res, ok
}
func (fpv *WatchPlansResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*plan.PagerCursor, bool) {
	res, ok := fpv.value.(*plan.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchPlansResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchPlansResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchPlansResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*plan.PagerCursor)
	case WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*plan.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPlansResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlansResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlansResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchPlansResponse_PageTokenChange'.
func (fpv *WatchPlansResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchPlansResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlansResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPlansResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlansResponse_PageTokenChange))
}

// WatchPlansResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchPlansResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlansResponsePageTokenChange_FieldPath
	ContainsValue(*WatchPlansResponse_PageTokenChange) bool
}

// ParseWatchPlansResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlansResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlansResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlansResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlansResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchPlansResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlansResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlansResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlansResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchPlansResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPlansResponsePageTokenChange_FieldPathArrayItemValue = (*WatchPlansResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlansResponse_PageTokenChange as interface{}
func (fpaiv *WatchPlansResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPlansResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlansResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlansResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlansResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchPlansResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlansResponse_PageTokenChange) bool {
	slice := fpaiv.WatchPlansResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPlansResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchPlansResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlansResponsePageTokenChange_FieldPath
}

func ParseWatchPlansResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlansResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlansResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlansResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchPlansResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlansResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlansResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchPlansResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchPlansResponsePageTokenChange_FieldPathArrayOfValues = (*WatchPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*plan.PagerCursor) {
			values = append(values, v)
		}
	case WatchPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*plan.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*plan.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan.PagerCursor)
	return res, ok
}
func (fpaov *WatchPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*plan.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreatePlanRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreatePlanRequest_FieldPathSelector
	Get(source *CreatePlanRequest) []interface{}
	GetSingle(source *CreatePlanRequest) (interface{}, bool)
	ClearValue(item *CreatePlanRequest)

	// Those methods build corresponding CreatePlanRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreatePlanRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreatePlanRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreatePlanRequest_FieldPathArrayItemValue
}

type CreatePlanRequest_FieldPathSelector int32

const (
	CreatePlanRequest_FieldPathSelectorPlan CreatePlanRequest_FieldPathSelector = 0
)

func (s CreatePlanRequest_FieldPathSelector) String() string {
	switch s {
	case CreatePlanRequest_FieldPathSelectorPlan:
		return "plan"
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", s))
	}
}

func BuildCreatePlanRequest_FieldPath(fp gotenobject.RawFieldPath) (CreatePlanRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreatePlanRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plan":
			return &CreatePlanRequest_FieldTerminalPath{selector: CreatePlanRequest_FieldPathSelectorPlan}, nil
		}
	} else {
		switch fp[0] {
		case "plan":
			if subpath, err := plan.BuildPlan_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreatePlanRequest_FieldSubPath{selector: CreatePlanRequest_FieldPathSelectorPlan, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreatePlanRequest", fp)
}

func ParseCreatePlanRequest_FieldPath(rawField string) (CreatePlanRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreatePlanRequest_FieldPath(fp)
}

func MustParseCreatePlanRequest_FieldPath(rawField string) CreatePlanRequest_FieldPath {
	fp, err := ParseCreatePlanRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreatePlanRequest_FieldTerminalPath struct {
	selector CreatePlanRequest_FieldPathSelector
}

var _ CreatePlanRequest_FieldPath = (*CreatePlanRequest_FieldTerminalPath)(nil)

func (fp *CreatePlanRequest_FieldTerminalPath) Selector() CreatePlanRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreatePlanRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreatePlanRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreatePlanRequest
func (fp *CreatePlanRequest_FieldTerminalPath) Get(source *CreatePlanRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreatePlanRequest_FieldPathSelectorPlan:
			if source.Plan != nil {
				values = append(values, source.Plan)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreatePlanRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreatePlanRequest))
}

// GetSingle returns value pointed by specific field of from source CreatePlanRequest
func (fp *CreatePlanRequest_FieldTerminalPath) GetSingle(source *CreatePlanRequest) (interface{}, bool) {
	switch fp.selector {
	case CreatePlanRequest_FieldPathSelectorPlan:
		res := source.GetPlan()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fp.selector))
	}
}

func (fp *CreatePlanRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreatePlanRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreatePlanRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreatePlanRequest_FieldPathSelectorPlan:
		return (*plan.Plan)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fp.selector))
	}
}

func (fp *CreatePlanRequest_FieldTerminalPath) ClearValue(item *CreatePlanRequest) {
	if item != nil {
		switch fp.selector {
		case CreatePlanRequest_FieldPathSelectorPlan:
			item.Plan = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fp.selector))
		}
	}
}

func (fp *CreatePlanRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreatePlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreatePlanRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *CreatePlanRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreatePlanRequest_FieldTerminalPath) WithIValue(value interface{}) CreatePlanRequest_FieldPathValue {
	switch fp.selector {
	case CreatePlanRequest_FieldPathSelectorPlan:
		return &CreatePlanRequest_FieldTerminalPathValue{CreatePlanRequest_FieldTerminalPath: *fp, value: value.(*plan.Plan)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fp.selector))
	}
}

func (fp *CreatePlanRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreatePlanRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreatePlanRequest_FieldPathArrayOfValues {
	fpaov := &CreatePlanRequest_FieldTerminalPathArrayOfValues{CreatePlanRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreatePlanRequest_FieldPathSelectorPlan:
		return &CreatePlanRequest_FieldTerminalPathArrayOfValues{CreatePlanRequest_FieldTerminalPath: *fp, values: values.([]*plan.Plan)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreatePlanRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreatePlanRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreatePlanRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fp.selector))
	}
}

func (fp *CreatePlanRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreatePlanRequest_FieldSubPath struct {
	selector CreatePlanRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreatePlanRequest_FieldPath = (*CreatePlanRequest_FieldSubPath)(nil)

func (fps *CreatePlanRequest_FieldSubPath) Selector() CreatePlanRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreatePlanRequest_FieldSubPath) AsPlanSubPath() (plan.Plan_FieldPath, bool) {
	res, ok := fps.subPath.(plan.Plan_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreatePlanRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreatePlanRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreatePlanRequest
func (fps *CreatePlanRequest_FieldSubPath) Get(source *CreatePlanRequest) (values []interface{}) {
	if asPlanFieldPath, ok := fps.AsPlanSubPath(); ok {
		values = append(values, asPlanFieldPath.Get(source.GetPlan())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fps.selector))
	}
	return
}

func (fps *CreatePlanRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreatePlanRequest))
}

// GetSingle returns value of selected field from source CreatePlanRequest
func (fps *CreatePlanRequest_FieldSubPath) GetSingle(source *CreatePlanRequest) (interface{}, bool) {
	switch fps.selector {
	case CreatePlanRequest_FieldPathSelectorPlan:
		if source.GetPlan() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPlan())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fps.selector))
	}
}

func (fps *CreatePlanRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreatePlanRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreatePlanRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreatePlanRequest_FieldSubPath) ClearValue(item *CreatePlanRequest) {
	if item != nil {
		switch fps.selector {
		case CreatePlanRequest_FieldPathSelectorPlan:
			fps.subPath.ClearValueRaw(item.Plan)
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fps.selector))
		}
	}
}

func (fps *CreatePlanRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreatePlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreatePlanRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreatePlanRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreatePlanRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreatePlanRequest_FieldSubPath) WithIValue(value interface{}) CreatePlanRequest_FieldPathValue {
	return &CreatePlanRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreatePlanRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreatePlanRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreatePlanRequest_FieldPathArrayOfValues {
	return &CreatePlanRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreatePlanRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreatePlanRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreatePlanRequest_FieldPathArrayItemValue {
	return &CreatePlanRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreatePlanRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreatePlanRequest_FieldPathValue allows storing values for CreatePlanRequest fields according to their type
type CreatePlanRequest_FieldPathValue interface {
	CreatePlanRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreatePlanRequest)
	CompareWith(*CreatePlanRequest) (cmp int, comparable bool)
}

func ParseCreatePlanRequest_FieldPathValue(pathStr, valueStr string) (CreatePlanRequest_FieldPathValue, error) {
	fp, err := ParseCreatePlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePlanRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreatePlanRequest_FieldPathValue), nil
}

func MustParseCreatePlanRequest_FieldPathValue(pathStr, valueStr string) CreatePlanRequest_FieldPathValue {
	fpv, err := ParseCreatePlanRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreatePlanRequest_FieldTerminalPathValue struct {
	CreatePlanRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePlanRequest_FieldPathValue = (*CreatePlanRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreatePlanRequest' as interface{}
func (fpv *CreatePlanRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreatePlanRequest_FieldTerminalPathValue) AsPlanValue() (*plan.Plan, bool) {
	res, ok := fpv.value.(*plan.Plan)
	return res, ok
}

// SetTo stores value for selected field for object CreatePlanRequest
func (fpv *CreatePlanRequest_FieldTerminalPathValue) SetTo(target **CreatePlanRequest) {
	if *target == nil {
		*target = new(CreatePlanRequest)
	}
	switch fpv.selector {
	case CreatePlanRequest_FieldPathSelectorPlan:
		(*target).Plan = fpv.value.(*plan.Plan)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePlanRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePlanRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreatePlanRequest_FieldTerminalPathValue' with the value under path in 'CreatePlanRequest'.
func (fpv *CreatePlanRequest_FieldTerminalPathValue) CompareWith(source *CreatePlanRequest) (int, bool) {
	switch fpv.selector {
	case CreatePlanRequest_FieldPathSelectorPlan:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePlanRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreatePlanRequest))
}

type CreatePlanRequest_FieldSubPathValue struct {
	CreatePlanRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreatePlanRequest_FieldPathValue = (*CreatePlanRequest_FieldSubPathValue)(nil)

func (fpvs *CreatePlanRequest_FieldSubPathValue) AsPlanPathValue() (plan.Plan_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan.Plan_FieldPathValue)
	return res, ok
}

func (fpvs *CreatePlanRequest_FieldSubPathValue) SetTo(target **CreatePlanRequest) {
	if *target == nil {
		*target = new(CreatePlanRequest)
	}
	switch fpvs.Selector() {
	case CreatePlanRequest_FieldPathSelectorPlan:
		fpvs.subPathValue.(plan.Plan_FieldPathValue).SetTo(&(*target).Plan)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePlanRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePlanRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreatePlanRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreatePlanRequest_FieldSubPathValue) CompareWith(source *CreatePlanRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreatePlanRequest_FieldPathSelectorPlan:
		return fpvs.subPathValue.(plan.Plan_FieldPathValue).CompareWith(source.GetPlan())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePlanRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreatePlanRequest))
}

// CreatePlanRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreatePlanRequest according to their type
// Present only for array (repeated) types.
type CreatePlanRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreatePlanRequest_FieldPath
	ContainsValue(*CreatePlanRequest) bool
}

// ParseCreatePlanRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreatePlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreatePlanRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreatePlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePlanRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreatePlanRequest_FieldPathArrayItemValue), nil
}

func MustParseCreatePlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreatePlanRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreatePlanRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreatePlanRequest_FieldTerminalPathArrayItemValue struct {
	CreatePlanRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePlanRequest_FieldPathArrayItemValue = (*CreatePlanRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreatePlanRequest as interface{}
func (fpaiv *CreatePlanRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreatePlanRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreatePlanRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreatePlanRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreatePlanRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePlanRequest'
func (fpaiv *CreatePlanRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreatePlanRequest) bool {
	slice := fpaiv.CreatePlanRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreatePlanRequest_FieldSubPathArrayItemValue struct {
	CreatePlanRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreatePlanRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreatePlanRequest_FieldSubPathArrayItemValue) AsPlanPathItemValue() (plan.Plan_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan.Plan_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePlanRequest'
func (fpaivs *CreatePlanRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreatePlanRequest) bool {
	switch fpaivs.Selector() {
	case CreatePlanRequest_FieldPathSelectorPlan:
		return fpaivs.subPathItemValue.(plan.Plan_FieldPathArrayItemValue).ContainsValue(source.GetPlan())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanRequest: %d", fpaivs.Selector()))
	}
}

// CreatePlanRequest_FieldPathArrayOfValues allows storing slice of values for CreatePlanRequest fields according to their type
type CreatePlanRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreatePlanRequest_FieldPath
}

func ParseCreatePlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreatePlanRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreatePlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePlanRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreatePlanRequest_FieldPathArrayOfValues), nil
}

func MustParseCreatePlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreatePlanRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreatePlanRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreatePlanRequest_FieldTerminalPathArrayOfValues struct {
	CreatePlanRequest_FieldTerminalPath
	values interface{}
}

var _ CreatePlanRequest_FieldPathArrayOfValues = (*CreatePlanRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreatePlanRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreatePlanRequest_FieldPathSelectorPlan:
		for _, v := range fpaov.values.([]*plan.Plan) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreatePlanRequest_FieldTerminalPathArrayOfValues) AsPlanArrayOfValues() ([]*plan.Plan, bool) {
	res, ok := fpaov.values.([]*plan.Plan)
	return res, ok
}

type CreatePlanRequest_FieldSubPathArrayOfValues struct {
	CreatePlanRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreatePlanRequest_FieldPathArrayOfValues = (*CreatePlanRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreatePlanRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreatePlanRequest_FieldSubPathArrayOfValues) AsPlanPathArrayOfValues() (plan.Plan_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan.Plan_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePlanRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePlanRequest_FieldPathSelector
	Get(source *UpdatePlanRequest) []interface{}
	GetSingle(source *UpdatePlanRequest) (interface{}, bool)
	ClearValue(item *UpdatePlanRequest)

	// Those methods build corresponding UpdatePlanRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePlanRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePlanRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePlanRequest_FieldPathArrayItemValue
}

type UpdatePlanRequest_FieldPathSelector int32

const (
	UpdatePlanRequest_FieldPathSelectorPlan       UpdatePlanRequest_FieldPathSelector = 0
	UpdatePlanRequest_FieldPathSelectorUpdateMask UpdatePlanRequest_FieldPathSelector = 1
	UpdatePlanRequest_FieldPathSelectorCas        UpdatePlanRequest_FieldPathSelector = 2
)

func (s UpdatePlanRequest_FieldPathSelector) String() string {
	switch s {
	case UpdatePlanRequest_FieldPathSelectorPlan:
		return "plan"
	case UpdatePlanRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdatePlanRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", s))
	}
}

func BuildUpdatePlanRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdatePlanRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePlanRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plan":
			return &UpdatePlanRequest_FieldTerminalPath{selector: UpdatePlanRequest_FieldPathSelectorPlan}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdatePlanRequest_FieldTerminalPath{selector: UpdatePlanRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdatePlanRequest_FieldTerminalPath{selector: UpdatePlanRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "plan":
			if subpath, err := plan.BuildPlan_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePlanRequest_FieldSubPath{selector: UpdatePlanRequest_FieldPathSelectorPlan, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdatePlanRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePlanRequest_FieldSubPath{selector: UpdatePlanRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePlanRequest", fp)
}

func ParseUpdatePlanRequest_FieldPath(rawField string) (UpdatePlanRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePlanRequest_FieldPath(fp)
}

func MustParseUpdatePlanRequest_FieldPath(rawField string) UpdatePlanRequest_FieldPath {
	fp, err := ParseUpdatePlanRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePlanRequest_FieldTerminalPath struct {
	selector UpdatePlanRequest_FieldPathSelector
}

var _ UpdatePlanRequest_FieldPath = (*UpdatePlanRequest_FieldTerminalPath)(nil)

func (fp *UpdatePlanRequest_FieldTerminalPath) Selector() UpdatePlanRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePlanRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePlanRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePlanRequest
func (fp *UpdatePlanRequest_FieldTerminalPath) Get(source *UpdatePlanRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePlanRequest_FieldPathSelectorPlan:
			if source.Plan != nil {
				values = append(values, source.Plan)
			}
		case UpdatePlanRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdatePlanRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePlanRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePlanRequest))
}

// GetSingle returns value pointed by specific field of from source UpdatePlanRequest
func (fp *UpdatePlanRequest_FieldTerminalPath) GetSingle(source *UpdatePlanRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdatePlanRequest_FieldPathSelectorPlan:
		res := source.GetPlan()
		return res, res != nil
	case UpdatePlanRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdatePlanRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fp.selector))
	}
}

func (fp *UpdatePlanRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePlanRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePlanRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePlanRequest_FieldPathSelectorPlan:
		return (*plan.Plan)(nil)
	case UpdatePlanRequest_FieldPathSelectorUpdateMask:
		return (*plan.Plan_FieldMask)(nil)
	case UpdatePlanRequest_FieldPathSelectorCas:
		return (*UpdatePlanRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fp.selector))
	}
}

func (fp *UpdatePlanRequest_FieldTerminalPath) ClearValue(item *UpdatePlanRequest) {
	if item != nil {
		switch fp.selector {
		case UpdatePlanRequest_FieldPathSelectorPlan:
			item.Plan = nil
		case UpdatePlanRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdatePlanRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdatePlanRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePlanRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePlanRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdatePlanRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdatePlanRequest_FieldTerminalPath) WithIValue(value interface{}) UpdatePlanRequest_FieldPathValue {
	switch fp.selector {
	case UpdatePlanRequest_FieldPathSelectorPlan:
		return &UpdatePlanRequest_FieldTerminalPathValue{UpdatePlanRequest_FieldTerminalPath: *fp, value: value.(*plan.Plan)}
	case UpdatePlanRequest_FieldPathSelectorUpdateMask:
		return &UpdatePlanRequest_FieldTerminalPathValue{UpdatePlanRequest_FieldTerminalPath: *fp, value: value.(*plan.Plan_FieldMask)}
	case UpdatePlanRequest_FieldPathSelectorCas:
		return &UpdatePlanRequest_FieldTerminalPathValue{UpdatePlanRequest_FieldTerminalPath: *fp, value: value.(*UpdatePlanRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fp.selector))
	}
}

func (fp *UpdatePlanRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePlanRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePlanRequest_FieldPathArrayOfValues {
	fpaov := &UpdatePlanRequest_FieldTerminalPathArrayOfValues{UpdatePlanRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePlanRequest_FieldPathSelectorPlan:
		return &UpdatePlanRequest_FieldTerminalPathArrayOfValues{UpdatePlanRequest_FieldTerminalPath: *fp, values: values.([]*plan.Plan)}
	case UpdatePlanRequest_FieldPathSelectorUpdateMask:
		return &UpdatePlanRequest_FieldTerminalPathArrayOfValues{UpdatePlanRequest_FieldTerminalPath: *fp, values: values.([]*plan.Plan_FieldMask)}
	case UpdatePlanRequest_FieldPathSelectorCas:
		return &UpdatePlanRequest_FieldTerminalPathArrayOfValues{UpdatePlanRequest_FieldTerminalPath: *fp, values: values.([]*UpdatePlanRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePlanRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePlanRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePlanRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fp.selector))
	}
}

func (fp *UpdatePlanRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePlanRequest_FieldSubPath struct {
	selector UpdatePlanRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePlanRequest_FieldPath = (*UpdatePlanRequest_FieldSubPath)(nil)

func (fps *UpdatePlanRequest_FieldSubPath) Selector() UpdatePlanRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePlanRequest_FieldSubPath) AsPlanSubPath() (plan.Plan_FieldPath, bool) {
	res, ok := fps.subPath.(plan.Plan_FieldPath)
	return res, ok
}
func (fps *UpdatePlanRequest_FieldSubPath) AsCasSubPath() (UpdatePlanRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdatePlanRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePlanRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePlanRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePlanRequest
func (fps *UpdatePlanRequest_FieldSubPath) Get(source *UpdatePlanRequest) (values []interface{}) {
	if asPlanFieldPath, ok := fps.AsPlanSubPath(); ok {
		values = append(values, asPlanFieldPath.Get(source.GetPlan())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdatePlanRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePlanRequest))
}

// GetSingle returns value of selected field from source UpdatePlanRequest
func (fps *UpdatePlanRequest_FieldSubPath) GetSingle(source *UpdatePlanRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdatePlanRequest_FieldPathSelectorPlan:
		if source.GetPlan() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPlan())
	case UpdatePlanRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fps.selector))
	}
}

func (fps *UpdatePlanRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePlanRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePlanRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePlanRequest_FieldSubPath) ClearValue(item *UpdatePlanRequest) {
	if item != nil {
		switch fps.selector {
		case UpdatePlanRequest_FieldPathSelectorPlan:
			fps.subPath.ClearValueRaw(item.Plan)
		case UpdatePlanRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdatePlanRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePlanRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePlanRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdatePlanRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdatePlanRequest_FieldSubPath) WithIValue(value interface{}) UpdatePlanRequest_FieldPathValue {
	return &UpdatePlanRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePlanRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePlanRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePlanRequest_FieldPathArrayOfValues {
	return &UpdatePlanRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePlanRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePlanRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePlanRequest_FieldPathArrayItemValue {
	return &UpdatePlanRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePlanRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePlanRequest_FieldPathValue allows storing values for UpdatePlanRequest fields according to their type
type UpdatePlanRequest_FieldPathValue interface {
	UpdatePlanRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePlanRequest)
	CompareWith(*UpdatePlanRequest) (cmp int, comparable bool)
}

func ParseUpdatePlanRequest_FieldPathValue(pathStr, valueStr string) (UpdatePlanRequest_FieldPathValue, error) {
	fp, err := ParseUpdatePlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePlanRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePlanRequest_FieldPathValue), nil
}

func MustParseUpdatePlanRequest_FieldPathValue(pathStr, valueStr string) UpdatePlanRequest_FieldPathValue {
	fpv, err := ParseUpdatePlanRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePlanRequest_FieldTerminalPathValue struct {
	UpdatePlanRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePlanRequest_FieldPathValue = (*UpdatePlanRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdatePlanRequest' as interface{}
func (fpv *UpdatePlanRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePlanRequest_FieldTerminalPathValue) AsPlanValue() (*plan.Plan, bool) {
	res, ok := fpv.value.(*plan.Plan)
	return res, ok
}
func (fpv *UpdatePlanRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*plan.Plan_FieldMask, bool) {
	res, ok := fpv.value.(*plan.Plan_FieldMask)
	return res, ok
}
func (fpv *UpdatePlanRequest_FieldTerminalPathValue) AsCasValue() (*UpdatePlanRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdatePlanRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdatePlanRequest
func (fpv *UpdatePlanRequest_FieldTerminalPathValue) SetTo(target **UpdatePlanRequest) {
	if *target == nil {
		*target = new(UpdatePlanRequest)
	}
	switch fpv.selector {
	case UpdatePlanRequest_FieldPathSelectorPlan:
		(*target).Plan = fpv.value.(*plan.Plan)
	case UpdatePlanRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*plan.Plan_FieldMask)
	case UpdatePlanRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdatePlanRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePlanRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePlanRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePlanRequest_FieldTerminalPathValue' with the value under path in 'UpdatePlanRequest'.
func (fpv *UpdatePlanRequest_FieldTerminalPathValue) CompareWith(source *UpdatePlanRequest) (int, bool) {
	switch fpv.selector {
	case UpdatePlanRequest_FieldPathSelectorPlan:
		return 0, false
	case UpdatePlanRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdatePlanRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePlanRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePlanRequest))
}

type UpdatePlanRequest_FieldSubPathValue struct {
	UpdatePlanRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePlanRequest_FieldPathValue = (*UpdatePlanRequest_FieldSubPathValue)(nil)

func (fpvs *UpdatePlanRequest_FieldSubPathValue) AsPlanPathValue() (plan.Plan_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan.Plan_FieldPathValue)
	return res, ok
}
func (fpvs *UpdatePlanRequest_FieldSubPathValue) AsCasPathValue() (UpdatePlanRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdatePlanRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePlanRequest_FieldSubPathValue) SetTo(target **UpdatePlanRequest) {
	if *target == nil {
		*target = new(UpdatePlanRequest)
	}
	switch fpvs.Selector() {
	case UpdatePlanRequest_FieldPathSelectorPlan:
		fpvs.subPathValue.(plan.Plan_FieldPathValue).SetTo(&(*target).Plan)
	case UpdatePlanRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdatePlanRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePlanRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePlanRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePlanRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePlanRequest_FieldSubPathValue) CompareWith(source *UpdatePlanRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePlanRequest_FieldPathSelectorPlan:
		return fpvs.subPathValue.(plan.Plan_FieldPathValue).CompareWith(source.GetPlan())
	case UpdatePlanRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdatePlanRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePlanRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePlanRequest))
}

// UpdatePlanRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdatePlanRequest according to their type
// Present only for array (repeated) types.
type UpdatePlanRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePlanRequest_FieldPath
	ContainsValue(*UpdatePlanRequest) bool
}

// ParseUpdatePlanRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePlanRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePlanRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePlanRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdatePlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePlanRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePlanRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePlanRequest_FieldTerminalPathArrayItemValue struct {
	UpdatePlanRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePlanRequest_FieldPathArrayItemValue = (*UpdatePlanRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePlanRequest as interface{}
func (fpaiv *UpdatePlanRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePlanRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePlanRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePlanRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePlanRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePlanRequest'
func (fpaiv *UpdatePlanRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePlanRequest) bool {
	slice := fpaiv.UpdatePlanRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePlanRequest_FieldSubPathArrayItemValue struct {
	UpdatePlanRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePlanRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePlanRequest_FieldSubPathArrayItemValue) AsPlanPathItemValue() (plan.Plan_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan.Plan_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdatePlanRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdatePlanRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdatePlanRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePlanRequest'
func (fpaivs *UpdatePlanRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePlanRequest) bool {
	switch fpaivs.Selector() {
	case UpdatePlanRequest_FieldPathSelectorPlan:
		return fpaivs.subPathItemValue.(plan.Plan_FieldPathArrayItemValue).ContainsValue(source.GetPlan())
	case UpdatePlanRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdatePlanRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest: %d", fpaivs.Selector()))
	}
}

// UpdatePlanRequest_FieldPathArrayOfValues allows storing slice of values for UpdatePlanRequest fields according to their type
type UpdatePlanRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePlanRequest_FieldPath
}

func ParseUpdatePlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePlanRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePlanRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePlanRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdatePlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePlanRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePlanRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePlanRequest_FieldTerminalPathArrayOfValues struct {
	UpdatePlanRequest_FieldTerminalPath
	values interface{}
}

var _ UpdatePlanRequest_FieldPathArrayOfValues = (*UpdatePlanRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePlanRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePlanRequest_FieldPathSelectorPlan:
		for _, v := range fpaov.values.([]*plan.Plan) {
			values = append(values, v)
		}
	case UpdatePlanRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*plan.Plan_FieldMask) {
			values = append(values, v)
		}
	case UpdatePlanRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdatePlanRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePlanRequest_FieldTerminalPathArrayOfValues) AsPlanArrayOfValues() ([]*plan.Plan, bool) {
	res, ok := fpaov.values.([]*plan.Plan)
	return res, ok
}
func (fpaov *UpdatePlanRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*plan.Plan_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan.Plan_FieldMask)
	return res, ok
}
func (fpaov *UpdatePlanRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdatePlanRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdatePlanRequest_CAS)
	return res, ok
}

type UpdatePlanRequest_FieldSubPathArrayOfValues struct {
	UpdatePlanRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePlanRequest_FieldPathArrayOfValues = (*UpdatePlanRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePlanRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePlanRequest_FieldSubPathArrayOfValues) AsPlanPathArrayOfValues() (plan.Plan_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan.Plan_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdatePlanRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdatePlanRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdatePlanRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePlanRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePlanRequestCAS_FieldPathSelector
	Get(source *UpdatePlanRequest_CAS) []interface{}
	GetSingle(source *UpdatePlanRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdatePlanRequest_CAS)

	// Those methods build corresponding UpdatePlanRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePlanRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePlanRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePlanRequestCAS_FieldPathArrayItemValue
}

type UpdatePlanRequestCAS_FieldPathSelector int32

const (
	UpdatePlanRequestCAS_FieldPathSelectorConditionalState UpdatePlanRequestCAS_FieldPathSelector = 0
	UpdatePlanRequestCAS_FieldPathSelectorFieldMask        UpdatePlanRequestCAS_FieldPathSelector = 1
)

func (s UpdatePlanRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdatePlanRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", s))
	}
}

func BuildUpdatePlanRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdatePlanRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePlanRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdatePlanRequestCAS_FieldTerminalPath{selector: UpdatePlanRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdatePlanRequestCAS_FieldTerminalPath{selector: UpdatePlanRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := plan.BuildPlan_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePlanRequestCAS_FieldSubPath{selector: UpdatePlanRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePlanRequest_CAS", fp)
}

func ParseUpdatePlanRequestCAS_FieldPath(rawField string) (UpdatePlanRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePlanRequestCAS_FieldPath(fp)
}

func MustParseUpdatePlanRequestCAS_FieldPath(rawField string) UpdatePlanRequestCAS_FieldPath {
	fp, err := ParseUpdatePlanRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePlanRequestCAS_FieldTerminalPath struct {
	selector UpdatePlanRequestCAS_FieldPathSelector
}

var _ UpdatePlanRequestCAS_FieldPath = (*UpdatePlanRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdatePlanRequestCAS_FieldTerminalPath) Selector() UpdatePlanRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePlanRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePlanRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePlanRequest_CAS
func (fp *UpdatePlanRequestCAS_FieldTerminalPath) Get(source *UpdatePlanRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdatePlanRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePlanRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePlanRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdatePlanRequest_CAS
func (fp *UpdatePlanRequestCAS_FieldTerminalPath) GetSingle(source *UpdatePlanRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdatePlanRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePlanRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePlanRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePlanRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
		return (*plan.Plan)(nil)
	case UpdatePlanRequestCAS_FieldPathSelectorFieldMask:
		return (*plan.Plan_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePlanRequestCAS_FieldTerminalPath) ClearValue(item *UpdatePlanRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdatePlanRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdatePlanRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePlanRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePlanRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePlanRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdatePlanRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdatePlanRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdatePlanRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePlanRequestCAS_FieldTerminalPathValue{UpdatePlanRequestCAS_FieldTerminalPath: *fp, value: value.(*plan.Plan)}
	case UpdatePlanRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePlanRequestCAS_FieldTerminalPathValue{UpdatePlanRequestCAS_FieldTerminalPath: *fp, value: value.(*plan.Plan_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePlanRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePlanRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePlanRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdatePlanRequestCAS_FieldTerminalPathArrayOfValues{UpdatePlanRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePlanRequestCAS_FieldTerminalPathArrayOfValues{UpdatePlanRequestCAS_FieldTerminalPath: *fp, values: values.([]*plan.Plan)}
	case UpdatePlanRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePlanRequestCAS_FieldTerminalPathArrayOfValues{UpdatePlanRequestCAS_FieldTerminalPath: *fp, values: values.([]*plan.Plan_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePlanRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePlanRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePlanRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePlanRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePlanRequestCAS_FieldSubPath struct {
	selector UpdatePlanRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePlanRequestCAS_FieldPath = (*UpdatePlanRequestCAS_FieldSubPath)(nil)

func (fps *UpdatePlanRequestCAS_FieldSubPath) Selector() UpdatePlanRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePlanRequestCAS_FieldSubPath) AsConditionalStateSubPath() (plan.Plan_FieldPath, bool) {
	res, ok := fps.subPath.(plan.Plan_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePlanRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePlanRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePlanRequest_CAS
func (fps *UpdatePlanRequestCAS_FieldSubPath) Get(source *UpdatePlanRequest_CAS) (values []interface{}) {
	if asPlanFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asPlanFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdatePlanRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePlanRequest_CAS))
}

// GetSingle returns value of selected field from source UpdatePlanRequest_CAS
func (fps *UpdatePlanRequestCAS_FieldSubPath) GetSingle(source *UpdatePlanRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdatePlanRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePlanRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePlanRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePlanRequestCAS_FieldSubPath) ClearValue(item *UpdatePlanRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdatePlanRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePlanRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePlanRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePlanRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdatePlanRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdatePlanRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdatePlanRequestCAS_FieldPathValue {
	return &UpdatePlanRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePlanRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePlanRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePlanRequestCAS_FieldPathArrayOfValues {
	return &UpdatePlanRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePlanRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePlanRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePlanRequestCAS_FieldPathArrayItemValue {
	return &UpdatePlanRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePlanRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePlanRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdatePlanRequestCAS_FieldPathValue interface {
	UpdatePlanRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePlanRequest_CAS)
	CompareWith(*UpdatePlanRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdatePlanRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdatePlanRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdatePlanRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePlanRequestCAS_FieldPathValue), nil
}

func MustParseUpdatePlanRequestCAS_FieldPathValue(pathStr, valueStr string) UpdatePlanRequestCAS_FieldPathValue {
	fpv, err := ParseUpdatePlanRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePlanRequestCAS_FieldTerminalPathValue struct {
	UpdatePlanRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePlanRequestCAS_FieldPathValue = (*UpdatePlanRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdatePlanRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePlanRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*plan.Plan, bool) {
	res, ok := fpv.value.(*plan.Plan)
	return res, ok
}
func (fpv *UpdatePlanRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*plan.Plan_FieldMask, bool) {
	res, ok := fpv.value.(*plan.Plan_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdatePlanRequestCAS_FieldTerminalPathValue) SetTo(target **UpdatePlanRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePlanRequest_CAS)
	}
	switch fpv.selector {
	case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*plan.Plan)
	case UpdatePlanRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan.Plan_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePlanRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePlanRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePlanRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdatePlanRequest_CAS'.
func (fpv *UpdatePlanRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdatePlanRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdatePlanRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePlanRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePlanRequest_CAS))
}

type UpdatePlanRequestCAS_FieldSubPathValue struct {
	UpdatePlanRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePlanRequestCAS_FieldPathValue = (*UpdatePlanRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdatePlanRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (plan.Plan_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan.Plan_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePlanRequestCAS_FieldSubPathValue) SetTo(target **UpdatePlanRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePlanRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(plan.Plan_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePlanRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePlanRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePlanRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePlanRequestCAS_FieldSubPathValue) CompareWith(source *UpdatePlanRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(plan.Plan_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePlanRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePlanRequest_CAS))
}

// UpdatePlanRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdatePlanRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePlanRequestCAS_FieldPath
	ContainsValue(*UpdatePlanRequest_CAS) bool
}

// ParseUpdatePlanRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePlanRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePlanRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePlanRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePlanRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdatePlanRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePlanRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePlanRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePlanRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdatePlanRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePlanRequestCAS_FieldPathArrayItemValue = (*UpdatePlanRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePlanRequest_CAS as interface{}
func (fpaiv *UpdatePlanRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePlanRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePlanRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePlanRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePlanRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdatePlanRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePlanRequest_CAS) bool {
	slice := fpaiv.UpdatePlanRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePlanRequestCAS_FieldSubPathArrayItemValue struct {
	UpdatePlanRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePlanRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePlanRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (plan.Plan_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan.Plan_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdatePlanRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePlanRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(plan.Plan_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdatePlanRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdatePlanRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePlanRequestCAS_FieldPath
}

func ParseUpdatePlanRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePlanRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePlanRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePlanRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdatePlanRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePlanRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePlanRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePlanRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdatePlanRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdatePlanRequestCAS_FieldPathArrayOfValues = (*UpdatePlanRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePlanRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePlanRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*plan.Plan) {
			values = append(values, v)
		}
	case UpdatePlanRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan.Plan_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePlanRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*plan.Plan, bool) {
	res, ok := fpaov.values.([]*plan.Plan)
	return res, ok
}
func (fpaov *UpdatePlanRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan.Plan_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan.Plan_FieldMask)
	return res, ok
}

type UpdatePlanRequestCAS_FieldSubPathArrayOfValues struct {
	UpdatePlanRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePlanRequestCAS_FieldPathArrayOfValues = (*UpdatePlanRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePlanRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePlanRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (plan.Plan_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan.Plan_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeletePlanRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeletePlanRequest_FieldPathSelector
	Get(source *DeletePlanRequest) []interface{}
	GetSingle(source *DeletePlanRequest) (interface{}, bool)
	ClearValue(item *DeletePlanRequest)

	// Those methods build corresponding DeletePlanRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeletePlanRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeletePlanRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeletePlanRequest_FieldPathArrayItemValue
}

type DeletePlanRequest_FieldPathSelector int32

const (
	DeletePlanRequest_FieldPathSelectorName DeletePlanRequest_FieldPathSelector = 0
)

func (s DeletePlanRequest_FieldPathSelector) String() string {
	switch s {
	case DeletePlanRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanRequest: %d", s))
	}
}

func BuildDeletePlanRequest_FieldPath(fp gotenobject.RawFieldPath) (DeletePlanRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeletePlanRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeletePlanRequest_FieldTerminalPath{selector: DeletePlanRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeletePlanRequest", fp)
}

func ParseDeletePlanRequest_FieldPath(rawField string) (DeletePlanRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeletePlanRequest_FieldPath(fp)
}

func MustParseDeletePlanRequest_FieldPath(rawField string) DeletePlanRequest_FieldPath {
	fp, err := ParseDeletePlanRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeletePlanRequest_FieldTerminalPath struct {
	selector DeletePlanRequest_FieldPathSelector
}

var _ DeletePlanRequest_FieldPath = (*DeletePlanRequest_FieldTerminalPath)(nil)

func (fp *DeletePlanRequest_FieldTerminalPath) Selector() DeletePlanRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeletePlanRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeletePlanRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeletePlanRequest
func (fp *DeletePlanRequest_FieldTerminalPath) Get(source *DeletePlanRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeletePlanRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePlanRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeletePlanRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeletePlanRequest))
}

// GetSingle returns value pointed by specific field of from source DeletePlanRequest
func (fp *DeletePlanRequest_FieldTerminalPath) GetSingle(source *DeletePlanRequest) (interface{}, bool) {
	switch fp.selector {
	case DeletePlanRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanRequest: %d", fp.selector))
	}
}

func (fp *DeletePlanRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeletePlanRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeletePlanRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeletePlanRequest_FieldPathSelectorName:
		return (*plan.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanRequest: %d", fp.selector))
	}
}

func (fp *DeletePlanRequest_FieldTerminalPath) ClearValue(item *DeletePlanRequest) {
	if item != nil {
		switch fp.selector {
		case DeletePlanRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePlanRequest: %d", fp.selector))
		}
	}
}

func (fp *DeletePlanRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeletePlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeletePlanRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeletePlanRequest_FieldPathSelectorName
}

func (fp *DeletePlanRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeletePlanRequest_FieldTerminalPath) WithIValue(value interface{}) DeletePlanRequest_FieldPathValue {
	switch fp.selector {
	case DeletePlanRequest_FieldPathSelectorName:
		return &DeletePlanRequest_FieldTerminalPathValue{DeletePlanRequest_FieldTerminalPath: *fp, value: value.(*plan.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanRequest: %d", fp.selector))
	}
}

func (fp *DeletePlanRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeletePlanRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeletePlanRequest_FieldPathArrayOfValues {
	fpaov := &DeletePlanRequest_FieldTerminalPathArrayOfValues{DeletePlanRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeletePlanRequest_FieldPathSelectorName:
		return &DeletePlanRequest_FieldTerminalPathArrayOfValues{DeletePlanRequest_FieldTerminalPath: *fp, values: values.([]*plan.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeletePlanRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeletePlanRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeletePlanRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanRequest: %d", fp.selector))
	}
}

func (fp *DeletePlanRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeletePlanRequest_FieldPathValue allows storing values for DeletePlanRequest fields according to their type
type DeletePlanRequest_FieldPathValue interface {
	DeletePlanRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeletePlanRequest)
	CompareWith(*DeletePlanRequest) (cmp int, comparable bool)
}

func ParseDeletePlanRequest_FieldPathValue(pathStr, valueStr string) (DeletePlanRequest_FieldPathValue, error) {
	fp, err := ParseDeletePlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePlanRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeletePlanRequest_FieldPathValue), nil
}

func MustParseDeletePlanRequest_FieldPathValue(pathStr, valueStr string) DeletePlanRequest_FieldPathValue {
	fpv, err := ParseDeletePlanRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeletePlanRequest_FieldTerminalPathValue struct {
	DeletePlanRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePlanRequest_FieldPathValue = (*DeletePlanRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeletePlanRequest' as interface{}
func (fpv *DeletePlanRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeletePlanRequest_FieldTerminalPathValue) AsNameValue() (*plan.Reference, bool) {
	res, ok := fpv.value.(*plan.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeletePlanRequest
func (fpv *DeletePlanRequest_FieldTerminalPathValue) SetTo(target **DeletePlanRequest) {
	if *target == nil {
		*target = new(DeletePlanRequest)
	}
	switch fpv.selector {
	case DeletePlanRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*plan.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePlanRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeletePlanRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeletePlanRequest_FieldTerminalPathValue' with the value under path in 'DeletePlanRequest'.
func (fpv *DeletePlanRequest_FieldTerminalPathValue) CompareWith(source *DeletePlanRequest) (int, bool) {
	switch fpv.selector {
	case DeletePlanRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*plan.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePlanRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeletePlanRequest))
}

// DeletePlanRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeletePlanRequest according to their type
// Present only for array (repeated) types.
type DeletePlanRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeletePlanRequest_FieldPath
	ContainsValue(*DeletePlanRequest) bool
}

// ParseDeletePlanRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeletePlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeletePlanRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeletePlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePlanRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeletePlanRequest_FieldPathArrayItemValue), nil
}

func MustParseDeletePlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeletePlanRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeletePlanRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeletePlanRequest_FieldTerminalPathArrayItemValue struct {
	DeletePlanRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePlanRequest_FieldPathArrayItemValue = (*DeletePlanRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeletePlanRequest as interface{}
func (fpaiv *DeletePlanRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeletePlanRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeletePlanRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeletePlanRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeletePlanRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeletePlanRequest'
func (fpaiv *DeletePlanRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeletePlanRequest) bool {
	slice := fpaiv.DeletePlanRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeletePlanRequest_FieldPathArrayOfValues allows storing slice of values for DeletePlanRequest fields according to their type
type DeletePlanRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeletePlanRequest_FieldPath
}

func ParseDeletePlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeletePlanRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeletePlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePlanRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeletePlanRequest_FieldPathArrayOfValues), nil
}

func MustParseDeletePlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeletePlanRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeletePlanRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeletePlanRequest_FieldTerminalPathArrayOfValues struct {
	DeletePlanRequest_FieldTerminalPath
	values interface{}
}

var _ DeletePlanRequest_FieldPathArrayOfValues = (*DeletePlanRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeletePlanRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeletePlanRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*plan.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeletePlanRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*plan.Reference, bool) {
	res, ok := fpaov.values.([]*plan.Reference)
	return res, ok
}
