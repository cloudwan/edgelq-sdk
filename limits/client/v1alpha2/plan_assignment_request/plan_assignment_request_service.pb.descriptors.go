// Code generated by protoc-gen-goten-client
// API: PlanAssignmentRequestService
// DO NOT EDIT!!!

package plan_assignment_request_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	plan_assignment_request "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan_assignment_request"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &plan_assignment_request.PlanAssignmentRequest{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized                       bool
	planAssignmentRequestServiceDescriptor       *PlanAssignmentRequestServiceDescriptor
	getPlanAssignmentRequestDescriptor           *GetPlanAssignmentRequestDescriptor
	batchGetPlanAssignmentRequestsDescriptor     *BatchGetPlanAssignmentRequestsDescriptor
	listPlanAssignmentRequestsDescriptor         *ListPlanAssignmentRequestsDescriptor
	watchPlanAssignmentRequestDescriptor         *WatchPlanAssignmentRequestDescriptor
	watchPlanAssignmentRequestsDescriptor        *WatchPlanAssignmentRequestsDescriptor
	createPlanAssignmentRequestDescriptor        *CreatePlanAssignmentRequestDescriptor
	updatePlanAssignmentRequestDescriptor        *UpdatePlanAssignmentRequestDescriptor
	deletePlanAssignmentRequestDescriptor        *DeletePlanAssignmentRequestDescriptor
	acceptPlanAssignmentDescriptor               *AcceptPlanAssignmentDescriptor
	declinePlanAssignmentDescriptor              *DeclinePlanAssignmentDescriptor
	listApproverPlanAssignmentRequestsDescriptor *ListApproverPlanAssignmentRequestsDescriptor
)

type GetPlanAssignmentRequestDescriptor struct{}

type GetPlanAssignmentRequestDescriptorClientMsgHandle struct{}

type GetPlanAssignmentRequestDescriptorServerMsgHandle struct{}

func (d *GetPlanAssignmentRequestDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetPlanAssignmentRequestRequest{}
}

func (d *GetPlanAssignmentRequestDescriptor) NewEmptyServerMsg() proto.Message {
	return &plan_assignment_request.PlanAssignmentRequest{}
}

func (d *GetPlanAssignmentRequestDescriptor) IsUnary() bool {
	return true
}

func (d *GetPlanAssignmentRequestDescriptor) IsClientStream() bool {
	return false
}

func (d *GetPlanAssignmentRequestDescriptor) IsServerStream() bool {
	return false
}

func (d *GetPlanAssignmentRequestDescriptor) IsCollection() bool {
	return false
}

func (d *GetPlanAssignmentRequestDescriptor) IsPlural() bool {
	return false
}

func (d *GetPlanAssignmentRequestDescriptor) HasResource() bool {
	return true
}

func (d *GetPlanAssignmentRequestDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetPlanAssignmentRequestDescriptor) GetVerb() string {
	return "get"
}

func (d *GetPlanAssignmentRequestDescriptor) GetMethodName() string {
	return "GetPlanAssignmentRequest"
}

func (d *GetPlanAssignmentRequestDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentRequestService/GetPlanAssignmentRequest"
}

func (d *GetPlanAssignmentRequestDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *GetPlanAssignmentRequestDescriptor) GetApiName() string {
	return "PlanAssignmentRequestService"
}

func (d *GetPlanAssignmentRequestDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *GetPlanAssignmentRequestDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetPlanAssignmentRequestDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentRequestServiceDescriptor
}

func (d *GetPlanAssignmentRequestDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment_request.GetDescriptor()
}

func (d *GetPlanAssignmentRequestDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPlanAssignmentRequestDescriptorClientMsgHandle{}
}

func (d *GetPlanAssignmentRequestDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPlanAssignmentRequestDescriptorServerMsgHandle{}
}

func (h *GetPlanAssignmentRequestDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetPlanAssignmentRequestRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*plan_assignment_request.Name)(nil)
}

func (h *GetPlanAssignmentRequestDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetPlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetPlanAssignmentRequestRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPlanAssignmentRequestDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetPlanAssignmentRequestRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetPlanAssignmentRequestDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*plan_assignment_request.PlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*plan_assignment_request.PlanAssignmentRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*plan_assignment_request.Name)(nil)
}

func (h *GetPlanAssignmentRequestDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*plan_assignment_request.PlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*plan_assignment_request.PlanAssignmentRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPlanAssignmentRequestDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*plan_assignment_request.PlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*plan_assignment_request.PlanAssignmentRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetPlanAssignmentRequestDescriptor() *GetPlanAssignmentRequestDescriptor {
	return getPlanAssignmentRequestDescriptor
}

type BatchGetPlanAssignmentRequestsDescriptor struct{}

type BatchGetPlanAssignmentRequestsDescriptorClientMsgHandle struct{}

type BatchGetPlanAssignmentRequestsDescriptorServerMsgHandle struct{}

func (d *BatchGetPlanAssignmentRequestsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetPlanAssignmentRequestsRequest{}
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetPlanAssignmentRequestsResponse{}
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) GetMethodName() string {
	return "BatchGetPlanAssignmentRequests"
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentRequestService/BatchGetPlanAssignmentRequests"
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) GetApiName() string {
	return "PlanAssignmentRequestService"
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentRequestServiceDescriptor
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment_request.GetDescriptor()
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPlanAssignmentRequestsDescriptorClientMsgHandle{}
}

func (d *BatchGetPlanAssignmentRequestsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPlanAssignmentRequestsDescriptorServerMsgHandle{}
}

func (h *BatchGetPlanAssignmentRequestsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPlanAssignmentRequestsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPlanAssignmentRequestsRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPlanAssignmentRequestsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPlanAssignmentRequestsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPlanAssignmentRequestsRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(plan_assignment_request.PlanAssignmentRequestNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (plan_assignment_request.PlanAssignmentRequestNameList)(nil)
}

func (h *BatchGetPlanAssignmentRequestsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPlanAssignmentRequestsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPlanAssignmentRequestsRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetPlanAssignmentRequestsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPlanAssignmentRequestsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPlanAssignmentRequestsResponse) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPlanAssignmentRequestsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPlanAssignmentRequestsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPlanAssignmentRequestsResponse) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetPlanAssignmentRequests(); len(resources) > 0 {
			list := make(plan_assignment_request.PlanAssignmentRequestNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (plan_assignment_request.PlanAssignmentRequestNameList)(nil)
}

func (h *BatchGetPlanAssignmentRequestsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPlanAssignmentRequestsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPlanAssignmentRequestsResponse) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetPlanAssignmentRequestsDescriptor() *BatchGetPlanAssignmentRequestsDescriptor {
	return batchGetPlanAssignmentRequestsDescriptor
}

type ListPlanAssignmentRequestsDescriptor struct{}

type ListPlanAssignmentRequestsDescriptorClientMsgHandle struct{}

type ListPlanAssignmentRequestsDescriptorServerMsgHandle struct{}

func (d *ListPlanAssignmentRequestsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListPlanAssignmentRequestsRequest{}
}

func (d *ListPlanAssignmentRequestsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListPlanAssignmentRequestsResponse{}
}

func (d *ListPlanAssignmentRequestsDescriptor) IsUnary() bool {
	return true
}

func (d *ListPlanAssignmentRequestsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListPlanAssignmentRequestsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListPlanAssignmentRequestsDescriptor) IsCollection() bool {
	return true
}

func (d *ListPlanAssignmentRequestsDescriptor) IsPlural() bool {
	return true
}

func (d *ListPlanAssignmentRequestsDescriptor) HasResource() bool {
	return true
}

func (d *ListPlanAssignmentRequestsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListPlanAssignmentRequestsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListPlanAssignmentRequestsDescriptor) GetMethodName() string {
	return "ListPlanAssignmentRequests"
}

func (d *ListPlanAssignmentRequestsDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentRequestService/ListPlanAssignmentRequests"
}

func (d *ListPlanAssignmentRequestsDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *ListPlanAssignmentRequestsDescriptor) GetApiName() string {
	return "PlanAssignmentRequestService"
}

func (d *ListPlanAssignmentRequestsDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *ListPlanAssignmentRequestsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListPlanAssignmentRequestsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentRequestServiceDescriptor
}

func (d *ListPlanAssignmentRequestsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment_request.GetDescriptor()
}

func (d *ListPlanAssignmentRequestsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPlanAssignmentRequestsDescriptorClientMsgHandle{}
}

func (d *ListPlanAssignmentRequestsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPlanAssignmentRequestsDescriptorServerMsgHandle{}
}

func (h *ListPlanAssignmentRequestsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPlanAssignmentRequestsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPlanAssignmentRequestsRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPlanAssignmentRequestsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPlanAssignmentRequestsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPlanAssignmentRequestsRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListPlanAssignmentRequestsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPlanAssignmentRequestsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPlanAssignmentRequestsRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*plan_assignment_request.ParentName)(nil)
}

func (h *ListPlanAssignmentRequestsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPlanAssignmentRequestsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPlanAssignmentRequestsResponse) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPlanAssignmentRequestsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPlanAssignmentRequestsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPlanAssignmentRequestsResponse) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetPlanAssignmentRequests(); len(resources) > 0 {
			list := make(plan_assignment_request.PlanAssignmentRequestNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (plan_assignment_request.PlanAssignmentRequestNameList)(nil)
}

func (h *ListPlanAssignmentRequestsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPlanAssignmentRequestsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPlanAssignmentRequestsResponse) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListPlanAssignmentRequestsDescriptor() *ListPlanAssignmentRequestsDescriptor {
	return listPlanAssignmentRequestsDescriptor
}

type WatchPlanAssignmentRequestDescriptor struct{}

type WatchPlanAssignmentRequestDescriptorClientMsgHandle struct{}

type WatchPlanAssignmentRequestDescriptorServerMsgHandle struct{}

func (d *WatchPlanAssignmentRequestDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPlanAssignmentRequestRequest{}
}

func (d *WatchPlanAssignmentRequestDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPlanAssignmentRequestResponse{}
}

func (d *WatchPlanAssignmentRequestDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPlanAssignmentRequestDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPlanAssignmentRequestDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPlanAssignmentRequestDescriptor) IsCollection() bool {
	return false
}

func (d *WatchPlanAssignmentRequestDescriptor) IsPlural() bool {
	return false
}

func (d *WatchPlanAssignmentRequestDescriptor) HasResource() bool {
	return true
}

func (d *WatchPlanAssignmentRequestDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPlanAssignmentRequestDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPlanAssignmentRequestDescriptor) GetMethodName() string {
	return "WatchPlanAssignmentRequest"
}

func (d *WatchPlanAssignmentRequestDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentRequestService/WatchPlanAssignmentRequest"
}

func (d *WatchPlanAssignmentRequestDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *WatchPlanAssignmentRequestDescriptor) GetApiName() string {
	return "PlanAssignmentRequestService"
}

func (d *WatchPlanAssignmentRequestDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *WatchPlanAssignmentRequestDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchPlanAssignmentRequestDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentRequestServiceDescriptor
}

func (d *WatchPlanAssignmentRequestDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment_request.GetDescriptor()
}

func (d *WatchPlanAssignmentRequestDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPlanAssignmentRequestDescriptorClientMsgHandle{}
}

func (d *WatchPlanAssignmentRequestDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPlanAssignmentRequestDescriptorServerMsgHandle{}
}

func (h *WatchPlanAssignmentRequestDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPlanAssignmentRequestRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*plan_assignment_request.Name)(nil)
}

func (h *WatchPlanAssignmentRequestDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPlanAssignmentRequestRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPlanAssignmentRequestDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPlanAssignmentRequestRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPlanAssignmentRequestDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentRequestResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPlanAssignmentRequestResponse) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *plan_assignment_request.PlanAssignmentRequestChange_Added_:
				return tResChange.Added.GetPlanAssignmentRequest().GetName()
			case *plan_assignment_request.PlanAssignmentRequestChange_Modified_:
				return tResChange.Modified.GetName()
			case *plan_assignment_request.PlanAssignmentRequestChange_Removed_:
				return tResChange.Removed.GetName()
			case *plan_assignment_request.PlanAssignmentRequestChange_Current_:
				return tResChange.Current.GetPlanAssignmentRequest().GetName()
			}
		}
	}
	return (*plan_assignment_request.Name)(nil)
}

func (h *WatchPlanAssignmentRequestDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPlanAssignmentRequestResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPlanAssignmentRequestResponse) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPlanAssignmentRequestDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentRequestResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPlanAssignmentRequestResponse) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchPlanAssignmentRequestDescriptor() *WatchPlanAssignmentRequestDescriptor {
	return watchPlanAssignmentRequestDescriptor
}

type WatchPlanAssignmentRequestsDescriptor struct{}

type WatchPlanAssignmentRequestsDescriptorClientMsgHandle struct{}

type WatchPlanAssignmentRequestsDescriptorServerMsgHandle struct{}

func (d *WatchPlanAssignmentRequestsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPlanAssignmentRequestsRequest{}
}

func (d *WatchPlanAssignmentRequestsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPlanAssignmentRequestsResponse{}
}

func (d *WatchPlanAssignmentRequestsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPlanAssignmentRequestsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPlanAssignmentRequestsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPlanAssignmentRequestsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchPlanAssignmentRequestsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchPlanAssignmentRequestsDescriptor) HasResource() bool {
	return true
}

func (d *WatchPlanAssignmentRequestsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPlanAssignmentRequestsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPlanAssignmentRequestsDescriptor) GetMethodName() string {
	return "WatchPlanAssignmentRequests"
}

func (d *WatchPlanAssignmentRequestsDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentRequestService/WatchPlanAssignmentRequests"
}

func (d *WatchPlanAssignmentRequestsDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *WatchPlanAssignmentRequestsDescriptor) GetApiName() string {
	return "PlanAssignmentRequestService"
}

func (d *WatchPlanAssignmentRequestsDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *WatchPlanAssignmentRequestsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchPlanAssignmentRequestsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentRequestServiceDescriptor
}

func (d *WatchPlanAssignmentRequestsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment_request.GetDescriptor()
}

func (d *WatchPlanAssignmentRequestsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPlanAssignmentRequestsDescriptorClientMsgHandle{}
}

func (d *WatchPlanAssignmentRequestsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPlanAssignmentRequestsDescriptorServerMsgHandle{}
}

func (h *WatchPlanAssignmentRequestsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentRequestsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPlanAssignmentRequestsRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPlanAssignmentRequestsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPlanAssignmentRequestsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPlanAssignmentRequestsRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPlanAssignmentRequestsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentRequestsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPlanAssignmentRequestsRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*plan_assignment_request.ParentName)(nil)
}

func (h *WatchPlanAssignmentRequestsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentRequestsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPlanAssignmentRequestsResponse) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPlanAssignmentRequestsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPlanAssignmentRequestsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPlanAssignmentRequestsResponse) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetPlanAssignmentRequestChanges(); len(resChanges) > 0 {
			list := make(plan_assignment_request.PlanAssignmentRequestNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *plan_assignment_request.PlanAssignmentRequestChange_Added_:
					list = append(list, tResChange.Added.GetPlanAssignmentRequest().GetName())
				case *plan_assignment_request.PlanAssignmentRequestChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *plan_assignment_request.PlanAssignmentRequestChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *plan_assignment_request.PlanAssignmentRequestChange_Current_:
					list = append(list, tResChange.Current.GetPlanAssignmentRequest().GetName())
				}
			}
			return list
		}
	}
	return (plan_assignment_request.PlanAssignmentRequestNameList)(nil)
}

func (h *WatchPlanAssignmentRequestsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentRequestsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPlanAssignmentRequestsResponse) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchPlanAssignmentRequestsDescriptor() *WatchPlanAssignmentRequestsDescriptor {
	return watchPlanAssignmentRequestsDescriptor
}

type CreatePlanAssignmentRequestDescriptor struct{}

type CreatePlanAssignmentRequestDescriptorClientMsgHandle struct{}

type CreatePlanAssignmentRequestDescriptorServerMsgHandle struct{}

func (d *CreatePlanAssignmentRequestDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreatePlanAssignmentRequestRequest{}
}

func (d *CreatePlanAssignmentRequestDescriptor) NewEmptyServerMsg() proto.Message {
	return &plan_assignment_request.PlanAssignmentRequest{}
}

func (d *CreatePlanAssignmentRequestDescriptor) IsUnary() bool {
	return true
}

func (d *CreatePlanAssignmentRequestDescriptor) IsClientStream() bool {
	return false
}

func (d *CreatePlanAssignmentRequestDescriptor) IsServerStream() bool {
	return false
}

func (d *CreatePlanAssignmentRequestDescriptor) IsCollection() bool {
	return true
}

func (d *CreatePlanAssignmentRequestDescriptor) IsPlural() bool {
	return false
}

func (d *CreatePlanAssignmentRequestDescriptor) HasResource() bool {
	return true
}

func (d *CreatePlanAssignmentRequestDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreatePlanAssignmentRequestDescriptor) GetVerb() string {
	return "create"
}

func (d *CreatePlanAssignmentRequestDescriptor) GetMethodName() string {
	return "CreatePlanAssignmentRequest"
}

func (d *CreatePlanAssignmentRequestDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentRequestService/CreatePlanAssignmentRequest"
}

func (d *CreatePlanAssignmentRequestDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *CreatePlanAssignmentRequestDescriptor) GetApiName() string {
	return "PlanAssignmentRequestService"
}

func (d *CreatePlanAssignmentRequestDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *CreatePlanAssignmentRequestDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreatePlanAssignmentRequestDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentRequestServiceDescriptor
}

func (d *CreatePlanAssignmentRequestDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment_request.GetDescriptor()
}

func (d *CreatePlanAssignmentRequestDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePlanAssignmentRequestDescriptorClientMsgHandle{}
}

func (d *CreatePlanAssignmentRequestDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePlanAssignmentRequestDescriptorServerMsgHandle{}
}

func (h *CreatePlanAssignmentRequestDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreatePlanAssignmentRequestRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetPlanAssignmentRequest()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*plan_assignment_request.Name)(nil)
}

func (h *CreatePlanAssignmentRequestDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreatePlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreatePlanAssignmentRequestRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePlanAssignmentRequestDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreatePlanAssignmentRequestRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*plan_assignment_request.ParentName)(nil)
}

func (h *CreatePlanAssignmentRequestDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*plan_assignment_request.PlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*plan_assignment_request.PlanAssignmentRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*plan_assignment_request.Name)(nil)
}

func (h *CreatePlanAssignmentRequestDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*plan_assignment_request.PlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*plan_assignment_request.PlanAssignmentRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePlanAssignmentRequestDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*plan_assignment_request.PlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*plan_assignment_request.PlanAssignmentRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreatePlanAssignmentRequestDescriptor() *CreatePlanAssignmentRequestDescriptor {
	return createPlanAssignmentRequestDescriptor
}

type UpdatePlanAssignmentRequestDescriptor struct{}

type UpdatePlanAssignmentRequestDescriptorClientMsgHandle struct{}

type UpdatePlanAssignmentRequestDescriptorServerMsgHandle struct{}

func (d *UpdatePlanAssignmentRequestDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdatePlanAssignmentRequestRequest{}
}

func (d *UpdatePlanAssignmentRequestDescriptor) NewEmptyServerMsg() proto.Message {
	return &plan_assignment_request.PlanAssignmentRequest{}
}

func (d *UpdatePlanAssignmentRequestDescriptor) IsUnary() bool {
	return true
}

func (d *UpdatePlanAssignmentRequestDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdatePlanAssignmentRequestDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdatePlanAssignmentRequestDescriptor) IsCollection() bool {
	return false
}

func (d *UpdatePlanAssignmentRequestDescriptor) IsPlural() bool {
	return false
}

func (d *UpdatePlanAssignmentRequestDescriptor) HasResource() bool {
	return true
}

func (d *UpdatePlanAssignmentRequestDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdatePlanAssignmentRequestDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdatePlanAssignmentRequestDescriptor) GetMethodName() string {
	return "UpdatePlanAssignmentRequest"
}

func (d *UpdatePlanAssignmentRequestDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentRequestService/UpdatePlanAssignmentRequest"
}

func (d *UpdatePlanAssignmentRequestDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *UpdatePlanAssignmentRequestDescriptor) GetApiName() string {
	return "PlanAssignmentRequestService"
}

func (d *UpdatePlanAssignmentRequestDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *UpdatePlanAssignmentRequestDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdatePlanAssignmentRequestDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentRequestServiceDescriptor
}

func (d *UpdatePlanAssignmentRequestDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment_request.GetDescriptor()
}

func (d *UpdatePlanAssignmentRequestDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePlanAssignmentRequestDescriptorClientMsgHandle{}
}

func (d *UpdatePlanAssignmentRequestDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePlanAssignmentRequestDescriptorServerMsgHandle{}
}

func (h *UpdatePlanAssignmentRequestDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdatePlanAssignmentRequestRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetPlanAssignmentRequest()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*plan_assignment_request.Name)(nil)
}

func (h *UpdatePlanAssignmentRequestDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdatePlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdatePlanAssignmentRequestRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePlanAssignmentRequestDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdatePlanAssignmentRequestRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdatePlanAssignmentRequestDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*plan_assignment_request.PlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*plan_assignment_request.PlanAssignmentRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*plan_assignment_request.Name)(nil)
}

func (h *UpdatePlanAssignmentRequestDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*plan_assignment_request.PlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*plan_assignment_request.PlanAssignmentRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePlanAssignmentRequestDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*plan_assignment_request.PlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*plan_assignment_request.PlanAssignmentRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdatePlanAssignmentRequestDescriptor() *UpdatePlanAssignmentRequestDescriptor {
	return updatePlanAssignmentRequestDescriptor
}

type DeletePlanAssignmentRequestDescriptor struct{}

type DeletePlanAssignmentRequestDescriptorClientMsgHandle struct{}

type DeletePlanAssignmentRequestDescriptorServerMsgHandle struct{}

func (d *DeletePlanAssignmentRequestDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeletePlanAssignmentRequestRequest{}
}

func (d *DeletePlanAssignmentRequestDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeletePlanAssignmentRequestDescriptor) IsUnary() bool {
	return true
}

func (d *DeletePlanAssignmentRequestDescriptor) IsClientStream() bool {
	return false
}

func (d *DeletePlanAssignmentRequestDescriptor) IsServerStream() bool {
	return false
}

func (d *DeletePlanAssignmentRequestDescriptor) IsCollection() bool {
	return false
}

func (d *DeletePlanAssignmentRequestDescriptor) IsPlural() bool {
	return false
}

func (d *DeletePlanAssignmentRequestDescriptor) HasResource() bool {
	return true
}

func (d *DeletePlanAssignmentRequestDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeletePlanAssignmentRequestDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeletePlanAssignmentRequestDescriptor) GetMethodName() string {
	return "DeletePlanAssignmentRequest"
}

func (d *DeletePlanAssignmentRequestDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentRequestService/DeletePlanAssignmentRequest"
}

func (d *DeletePlanAssignmentRequestDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *DeletePlanAssignmentRequestDescriptor) GetApiName() string {
	return "PlanAssignmentRequestService"
}

func (d *DeletePlanAssignmentRequestDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *DeletePlanAssignmentRequestDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeletePlanAssignmentRequestDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentRequestServiceDescriptor
}

func (d *DeletePlanAssignmentRequestDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment_request.GetDescriptor()
}

func (d *DeletePlanAssignmentRequestDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePlanAssignmentRequestDescriptorClientMsgHandle{}
}

func (d *DeletePlanAssignmentRequestDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePlanAssignmentRequestDescriptorServerMsgHandle{}
}

func (h *DeletePlanAssignmentRequestDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeletePlanAssignmentRequestRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*plan_assignment_request.Name)(nil)
}

func (h *DeletePlanAssignmentRequestDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeletePlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeletePlanAssignmentRequestRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePlanAssignmentRequestDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePlanAssignmentRequestRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeletePlanAssignmentRequestRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeletePlanAssignmentRequestDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeletePlanAssignmentRequestDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePlanAssignmentRequestDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeletePlanAssignmentRequestDescriptor() *DeletePlanAssignmentRequestDescriptor {
	return deletePlanAssignmentRequestDescriptor
}

type AcceptPlanAssignmentDescriptor struct{}

type AcceptPlanAssignmentDescriptorClientMsgHandle struct{}

type AcceptPlanAssignmentDescriptorServerMsgHandle struct{}

func (d *AcceptPlanAssignmentDescriptor) NewEmptyClientMsg() proto.Message {
	return &AcceptPlanAssignmentRequest{}
}

func (d *AcceptPlanAssignmentDescriptor) NewEmptyServerMsg() proto.Message {
	return &AcceptPlanAssignmentResponse{}
}

func (d *AcceptPlanAssignmentDescriptor) IsUnary() bool {
	return true
}

func (d *AcceptPlanAssignmentDescriptor) IsClientStream() bool {
	return false
}

func (d *AcceptPlanAssignmentDescriptor) IsServerStream() bool {
	return false
}

func (d *AcceptPlanAssignmentDescriptor) IsCollection() bool {
	return false
}

func (d *AcceptPlanAssignmentDescriptor) IsPlural() bool {
	return false
}

func (d *AcceptPlanAssignmentDescriptor) HasResource() bool {
	return true
}

func (d *AcceptPlanAssignmentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *AcceptPlanAssignmentDescriptor) GetVerb() string {
	return "accept"
}

func (d *AcceptPlanAssignmentDescriptor) GetMethodName() string {
	return "AcceptPlanAssignment"
}

func (d *AcceptPlanAssignmentDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentRequestService/AcceptPlanAssignment"
}

func (d *AcceptPlanAssignmentDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *AcceptPlanAssignmentDescriptor) GetApiName() string {
	return "PlanAssignmentRequestService"
}

func (d *AcceptPlanAssignmentDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *AcceptPlanAssignmentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *AcceptPlanAssignmentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentRequestServiceDescriptor
}

func (d *AcceptPlanAssignmentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment_request.GetDescriptor()
}

func (d *AcceptPlanAssignmentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &AcceptPlanAssignmentDescriptorClientMsgHandle{}
}

func (d *AcceptPlanAssignmentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &AcceptPlanAssignmentDescriptorServerMsgHandle{}
}

func (h *AcceptPlanAssignmentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptPlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*AcceptPlanAssignmentRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*plan_assignment_request.Name)(nil)
}

func (h *AcceptPlanAssignmentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*AcceptPlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*AcceptPlanAssignmentRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *AcceptPlanAssignmentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptPlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*AcceptPlanAssignmentRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *AcceptPlanAssignmentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptPlanAssignmentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*AcceptPlanAssignmentResponse) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *AcceptPlanAssignmentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*AcceptPlanAssignmentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*AcceptPlanAssignmentResponse) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *AcceptPlanAssignmentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*AcceptPlanAssignmentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*AcceptPlanAssignmentResponse) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetAcceptPlanAssignmentDescriptor() *AcceptPlanAssignmentDescriptor {
	return acceptPlanAssignmentDescriptor
}

type DeclinePlanAssignmentDescriptor struct{}

type DeclinePlanAssignmentDescriptorClientMsgHandle struct{}

type DeclinePlanAssignmentDescriptorServerMsgHandle struct{}

func (d *DeclinePlanAssignmentDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeclinePlanAssignmentRequest{}
}

func (d *DeclinePlanAssignmentDescriptor) NewEmptyServerMsg() proto.Message {
	return &DeclinePlanAssignmentResponse{}
}

func (d *DeclinePlanAssignmentDescriptor) IsUnary() bool {
	return true
}

func (d *DeclinePlanAssignmentDescriptor) IsClientStream() bool {
	return false
}

func (d *DeclinePlanAssignmentDescriptor) IsServerStream() bool {
	return false
}

func (d *DeclinePlanAssignmentDescriptor) IsCollection() bool {
	return false
}

func (d *DeclinePlanAssignmentDescriptor) IsPlural() bool {
	return false
}

func (d *DeclinePlanAssignmentDescriptor) HasResource() bool {
	return true
}

func (d *DeclinePlanAssignmentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeclinePlanAssignmentDescriptor) GetVerb() string {
	return "decline"
}

func (d *DeclinePlanAssignmentDescriptor) GetMethodName() string {
	return "DeclinePlanAssignment"
}

func (d *DeclinePlanAssignmentDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentRequestService/DeclinePlanAssignment"
}

func (d *DeclinePlanAssignmentDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *DeclinePlanAssignmentDescriptor) GetApiName() string {
	return "PlanAssignmentRequestService"
}

func (d *DeclinePlanAssignmentDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *DeclinePlanAssignmentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeclinePlanAssignmentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentRequestServiceDescriptor
}

func (d *DeclinePlanAssignmentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment_request.GetDescriptor()
}

func (d *DeclinePlanAssignmentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeclinePlanAssignmentDescriptorClientMsgHandle{}
}

func (d *DeclinePlanAssignmentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeclinePlanAssignmentDescriptorServerMsgHandle{}
}

func (h *DeclinePlanAssignmentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeclinePlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeclinePlanAssignmentRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*plan_assignment_request.Name)(nil)
}

func (h *DeclinePlanAssignmentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeclinePlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeclinePlanAssignmentRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeclinePlanAssignmentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeclinePlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeclinePlanAssignmentRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeclinePlanAssignmentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeclinePlanAssignmentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeclinePlanAssignmentResponse) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeclinePlanAssignmentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeclinePlanAssignmentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeclinePlanAssignmentResponse) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeclinePlanAssignmentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeclinePlanAssignmentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeclinePlanAssignmentResponse) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeclinePlanAssignmentDescriptor() *DeclinePlanAssignmentDescriptor {
	return declinePlanAssignmentDescriptor
}

type ListApproverPlanAssignmentRequestsDescriptor struct{}

type ListApproverPlanAssignmentRequestsDescriptorClientMsgHandle struct{}

type ListApproverPlanAssignmentRequestsDescriptorServerMsgHandle struct{}

func (d *ListApproverPlanAssignmentRequestsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListApproverPlanAssignmentRequestsRequest{}
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListPlanAssignmentRequestsResponse{}
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) IsUnary() bool {
	return true
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) IsCollection() bool {
	return true
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) IsPlural() bool {
	return true
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) HasResource() bool {
	return true
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) GetVerb() string {
	return "listApprover"
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) GetMethodName() string {
	return "ListApproverPlanAssignmentRequests"
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentRequestService/ListApproverPlanAssignmentRequests"
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) GetApiName() string {
	return "PlanAssignmentRequestService"
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentRequestServiceDescriptor
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment_request.GetDescriptor()
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListApproverPlanAssignmentRequestsDescriptorClientMsgHandle{}
}

func (d *ListApproverPlanAssignmentRequestsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListApproverPlanAssignmentRequestsDescriptorServerMsgHandle{}
}

func (h *ListApproverPlanAssignmentRequestsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListApproverPlanAssignmentRequestsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListApproverPlanAssignmentRequestsRequest) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListApproverPlanAssignmentRequestsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListApproverPlanAssignmentRequestsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListApproverPlanAssignmentRequestsRequest) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListApproverPlanAssignmentRequestsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListApproverPlanAssignmentRequestsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListApproverPlanAssignmentRequestsRequest) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListApproverPlanAssignmentRequestsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPlanAssignmentRequestsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPlanAssignmentRequestsResponse) *plan_assignment_request.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListApproverPlanAssignmentRequestsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPlanAssignmentRequestsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPlanAssignmentRequestsResponse) []*plan_assignment_request.Name
	})
	if ok {
		return plan_assignment_request.PlanAssignmentRequestNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListApproverPlanAssignmentRequestsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPlanAssignmentRequestsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPlanAssignmentRequestsResponse) *plan_assignment_request.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListApproverPlanAssignmentRequestsDescriptor() *ListApproverPlanAssignmentRequestsDescriptor {
	return listApproverPlanAssignmentRequestsDescriptor
}

type PlanAssignmentRequestServiceDescriptor struct{}

func (d *PlanAssignmentRequestServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getPlanAssignmentRequestDescriptor,
		batchGetPlanAssignmentRequestsDescriptor,
		listPlanAssignmentRequestsDescriptor,
		watchPlanAssignmentRequestDescriptor,
		watchPlanAssignmentRequestsDescriptor,
		createPlanAssignmentRequestDescriptor,
		updatePlanAssignmentRequestDescriptor,
		deletePlanAssignmentRequestDescriptor,
		acceptPlanAssignmentDescriptor,
		declinePlanAssignmentDescriptor,
		listApproverPlanAssignmentRequestsDescriptor,
	}
}

func (d *PlanAssignmentRequestServiceDescriptor) GetFullAPIName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentRequestService"
}

func (d *PlanAssignmentRequestServiceDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *PlanAssignmentRequestServiceDescriptor) GetApiName() string {
	return "PlanAssignmentRequestService"
}

func (d *PlanAssignmentRequestServiceDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *PlanAssignmentRequestServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetPlanAssignmentRequestServiceDescriptor() *PlanAssignmentRequestServiceDescriptor {
	return planAssignmentRequestServiceDescriptor
}

func initDescriptors() {
	planAssignmentRequestServiceDescriptor = &PlanAssignmentRequestServiceDescriptor{}
	getPlanAssignmentRequestDescriptor = &GetPlanAssignmentRequestDescriptor{}
	batchGetPlanAssignmentRequestsDescriptor = &BatchGetPlanAssignmentRequestsDescriptor{}
	listPlanAssignmentRequestsDescriptor = &ListPlanAssignmentRequestsDescriptor{}
	watchPlanAssignmentRequestDescriptor = &WatchPlanAssignmentRequestDescriptor{}
	watchPlanAssignmentRequestsDescriptor = &WatchPlanAssignmentRequestsDescriptor{}
	createPlanAssignmentRequestDescriptor = &CreatePlanAssignmentRequestDescriptor{}
	updatePlanAssignmentRequestDescriptor = &UpdatePlanAssignmentRequestDescriptor{}
	deletePlanAssignmentRequestDescriptor = &DeletePlanAssignmentRequestDescriptor{}
	acceptPlanAssignmentDescriptor = &AcceptPlanAssignmentDescriptor{}
	declinePlanAssignmentDescriptor = &DeclinePlanAssignmentDescriptor{}
	listApproverPlanAssignmentRequestsDescriptor = &ListApproverPlanAssignmentRequestsDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(planAssignmentRequestServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getPlanAssignmentRequestDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetPlanAssignmentRequestsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listPlanAssignmentRequestsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPlanAssignmentRequestDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPlanAssignmentRequestsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createPlanAssignmentRequestDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updatePlanAssignmentRequestDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deletePlanAssignmentRequestDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(acceptPlanAssignmentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(declinePlanAssignmentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listApproverPlanAssignmentRequestsDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
