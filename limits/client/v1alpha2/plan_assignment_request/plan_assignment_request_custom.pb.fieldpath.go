// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/plan_assignment_request_custom.proto
// DO NOT EDIT!!!

package plan_assignment_request_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	accepted_plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/accepted_plan"
	plan_assignment_request "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan_assignment_request"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &accepted_plan.AcceptedPlan{}
	_ = &plan_assignment_request.PlanAssignmentRequest{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AcceptPlanAssignmentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() AcceptPlanAssignmentRequest_FieldPathSelector
	Get(source *AcceptPlanAssignmentRequest) []interface{}
	GetSingle(source *AcceptPlanAssignmentRequest) (interface{}, bool)
	ClearValue(item *AcceptPlanAssignmentRequest)

	// Those methods build corresponding AcceptPlanAssignmentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AcceptPlanAssignmentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) AcceptPlanAssignmentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AcceptPlanAssignmentRequest_FieldPathArrayItemValue
}

type AcceptPlanAssignmentRequest_FieldPathSelector int32

const (
	AcceptPlanAssignmentRequest_FieldPathSelectorName     AcceptPlanAssignmentRequest_FieldPathSelector = 0
	AcceptPlanAssignmentRequest_FieldPathSelectorApprover AcceptPlanAssignmentRequest_FieldPathSelector = 1
)

func (s AcceptPlanAssignmentRequest_FieldPathSelector) String() string {
	switch s {
	case AcceptPlanAssignmentRequest_FieldPathSelectorName:
		return "name"
	case AcceptPlanAssignmentRequest_FieldPathSelectorApprover:
		return "approver"
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentRequest: %d", s))
	}
}

func BuildAcceptPlanAssignmentRequest_FieldPath(fp gotenobject.RawFieldPath) (AcceptPlanAssignmentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AcceptPlanAssignmentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &AcceptPlanAssignmentRequest_FieldTerminalPath{selector: AcceptPlanAssignmentRequest_FieldPathSelectorName}, nil
		case "approver":
			return &AcceptPlanAssignmentRequest_FieldTerminalPath{selector: AcceptPlanAssignmentRequest_FieldPathSelectorApprover}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AcceptPlanAssignmentRequest", fp)
}

func ParseAcceptPlanAssignmentRequest_FieldPath(rawField string) (AcceptPlanAssignmentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAcceptPlanAssignmentRequest_FieldPath(fp)
}

func MustParseAcceptPlanAssignmentRequest_FieldPath(rawField string) AcceptPlanAssignmentRequest_FieldPath {
	fp, err := ParseAcceptPlanAssignmentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AcceptPlanAssignmentRequest_FieldTerminalPath struct {
	selector AcceptPlanAssignmentRequest_FieldPathSelector
}

var _ AcceptPlanAssignmentRequest_FieldPath = (*AcceptPlanAssignmentRequest_FieldTerminalPath)(nil)

func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) Selector() AcceptPlanAssignmentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AcceptPlanAssignmentRequest
func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) Get(source *AcceptPlanAssignmentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AcceptPlanAssignmentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case AcceptPlanAssignmentRequest_FieldPathSelectorApprover:
			if source.Approver != nil {
				values = append(values, source.Approver)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AcceptPlanAssignmentRequest))
}

// GetSingle returns value pointed by specific field of from source AcceptPlanAssignmentRequest
func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) GetSingle(source *AcceptPlanAssignmentRequest) (interface{}, bool) {
	switch fp.selector {
	case AcceptPlanAssignmentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case AcceptPlanAssignmentRequest_FieldPathSelectorApprover:
		res := source.GetApprover()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AcceptPlanAssignmentRequest))
}

// GetDefault returns a default value of the field type
func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AcceptPlanAssignmentRequest_FieldPathSelectorName:
		return (*plan_assignment_request.Reference)(nil)
	case AcceptPlanAssignmentRequest_FieldPathSelectorApprover:
		return (*iam_organization.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) ClearValue(item *AcceptPlanAssignmentRequest) {
	if item != nil {
		switch fp.selector {
		case AcceptPlanAssignmentRequest_FieldPathSelectorName:
			item.Name = nil
		case AcceptPlanAssignmentRequest_FieldPathSelectorApprover:
			item.Approver = nil
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentRequest: %d", fp.selector))
		}
	}
}

func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AcceptPlanAssignmentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AcceptPlanAssignmentRequest_FieldPathSelectorName ||
		fp.selector == AcceptPlanAssignmentRequest_FieldPathSelectorApprover
}

func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) WithIValue(value interface{}) AcceptPlanAssignmentRequest_FieldPathValue {
	switch fp.selector {
	case AcceptPlanAssignmentRequest_FieldPathSelectorName:
		return &AcceptPlanAssignmentRequest_FieldTerminalPathValue{AcceptPlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.Reference)}
	case AcceptPlanAssignmentRequest_FieldPathSelectorApprover:
		return &AcceptPlanAssignmentRequest_FieldTerminalPathValue{AcceptPlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*iam_organization.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) AcceptPlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov := &AcceptPlanAssignmentRequest_FieldTerminalPathArrayOfValues{AcceptPlanAssignmentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case AcceptPlanAssignmentRequest_FieldPathSelectorName:
		return &AcceptPlanAssignmentRequest_FieldTerminalPathArrayOfValues{AcceptPlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.Reference)}
	case AcceptPlanAssignmentRequest_FieldPathSelectorApprover:
		return &AcceptPlanAssignmentRequest_FieldTerminalPathArrayOfValues{AcceptPlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*iam_organization.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) AcceptPlanAssignmentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *AcceptPlanAssignmentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AcceptPlanAssignmentRequest_FieldPathValue allows storing values for AcceptPlanAssignmentRequest fields according to their type
type AcceptPlanAssignmentRequest_FieldPathValue interface {
	AcceptPlanAssignmentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AcceptPlanAssignmentRequest)
	CompareWith(*AcceptPlanAssignmentRequest) (cmp int, comparable bool)
}

func ParseAcceptPlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) (AcceptPlanAssignmentRequest_FieldPathValue, error) {
	fp, err := ParseAcceptPlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptPlanAssignmentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(AcceptPlanAssignmentRequest_FieldPathValue), nil
}

func MustParseAcceptPlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) AcceptPlanAssignmentRequest_FieldPathValue {
	fpv, err := ParseAcceptPlanAssignmentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AcceptPlanAssignmentRequest_FieldTerminalPathValue struct {
	AcceptPlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ AcceptPlanAssignmentRequest_FieldPathValue = (*AcceptPlanAssignmentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AcceptPlanAssignmentRequest' as interface{}
func (fpv *AcceptPlanAssignmentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AcceptPlanAssignmentRequest_FieldTerminalPathValue) AsNameValue() (*plan_assignment_request.Reference, bool) {
	res, ok := fpv.value.(*plan_assignment_request.Reference)
	return res, ok
}
func (fpv *AcceptPlanAssignmentRequest_FieldTerminalPathValue) AsApproverValue() (*iam_organization.Reference, bool) {
	res, ok := fpv.value.(*iam_organization.Reference)
	return res, ok
}

// SetTo stores value for selected field for object AcceptPlanAssignmentRequest
func (fpv *AcceptPlanAssignmentRequest_FieldTerminalPathValue) SetTo(target **AcceptPlanAssignmentRequest) {
	if *target == nil {
		*target = new(AcceptPlanAssignmentRequest)
	}
	switch fpv.selector {
	case AcceptPlanAssignmentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*plan_assignment_request.Reference)
	case AcceptPlanAssignmentRequest_FieldPathSelectorApprover:
		(*target).Approver = fpv.value.(*iam_organization.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *AcceptPlanAssignmentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AcceptPlanAssignmentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AcceptPlanAssignmentRequest_FieldTerminalPathValue' with the value under path in 'AcceptPlanAssignmentRequest'.
func (fpv *AcceptPlanAssignmentRequest_FieldTerminalPathValue) CompareWith(source *AcceptPlanAssignmentRequest) (int, bool) {
	switch fpv.selector {
	case AcceptPlanAssignmentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*plan_assignment_request.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case AcceptPlanAssignmentRequest_FieldPathSelectorApprover:
		leftValue := fpv.value.(*iam_organization.Reference)
		rightValue := source.GetApprover()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *AcceptPlanAssignmentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AcceptPlanAssignmentRequest))
}

// AcceptPlanAssignmentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for AcceptPlanAssignmentRequest according to their type
// Present only for array (repeated) types.
type AcceptPlanAssignmentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AcceptPlanAssignmentRequest_FieldPath
	ContainsValue(*AcceptPlanAssignmentRequest) bool
}

// ParseAcceptPlanAssignmentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAcceptPlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (AcceptPlanAssignmentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseAcceptPlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptPlanAssignmentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AcceptPlanAssignmentRequest_FieldPathArrayItemValue), nil
}

func MustParseAcceptPlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) AcceptPlanAssignmentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseAcceptPlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AcceptPlanAssignmentRequest_FieldTerminalPathArrayItemValue struct {
	AcceptPlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ AcceptPlanAssignmentRequest_FieldPathArrayItemValue = (*AcceptPlanAssignmentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AcceptPlanAssignmentRequest as interface{}
func (fpaiv *AcceptPlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AcceptPlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *AcceptPlanAssignmentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AcceptPlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AcceptPlanAssignmentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AcceptPlanAssignmentRequest'
func (fpaiv *AcceptPlanAssignmentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *AcceptPlanAssignmentRequest) bool {
	slice := fpaiv.AcceptPlanAssignmentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AcceptPlanAssignmentRequest_FieldPathArrayOfValues allows storing slice of values for AcceptPlanAssignmentRequest fields according to their type
type AcceptPlanAssignmentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AcceptPlanAssignmentRequest_FieldPath
}

func ParseAcceptPlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (AcceptPlanAssignmentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseAcceptPlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptPlanAssignmentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AcceptPlanAssignmentRequest_FieldPathArrayOfValues), nil
}

func MustParseAcceptPlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) AcceptPlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseAcceptPlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AcceptPlanAssignmentRequest_FieldTerminalPathArrayOfValues struct {
	AcceptPlanAssignmentRequest_FieldTerminalPath
	values interface{}
}

var _ AcceptPlanAssignmentRequest_FieldPathArrayOfValues = (*AcceptPlanAssignmentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AcceptPlanAssignmentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AcceptPlanAssignmentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*plan_assignment_request.Reference) {
			values = append(values, v)
		}
	case AcceptPlanAssignmentRequest_FieldPathSelectorApprover:
		for _, v := range fpaov.values.([]*iam_organization.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AcceptPlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*plan_assignment_request.Reference, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.Reference)
	return res, ok
}
func (fpaov *AcceptPlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsApproverArrayOfValues() ([]*iam_organization.Reference, bool) {
	res, ok := fpaov.values.([]*iam_organization.Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AcceptPlanAssignmentResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() AcceptPlanAssignmentResponse_FieldPathSelector
	Get(source *AcceptPlanAssignmentResponse) []interface{}
	GetSingle(source *AcceptPlanAssignmentResponse) (interface{}, bool)
	ClearValue(item *AcceptPlanAssignmentResponse)

	// Those methods build corresponding AcceptPlanAssignmentResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AcceptPlanAssignmentResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) AcceptPlanAssignmentResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AcceptPlanAssignmentResponse_FieldPathArrayItemValue
}

type AcceptPlanAssignmentResponse_FieldPathSelector int32

const (
	AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan AcceptPlanAssignmentResponse_FieldPathSelector = 0
)

func (s AcceptPlanAssignmentResponse_FieldPathSelector) String() string {
	switch s {
	case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
		return "accepted_plan"
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", s))
	}
}

func BuildAcceptPlanAssignmentResponse_FieldPath(fp gotenobject.RawFieldPath) (AcceptPlanAssignmentResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AcceptPlanAssignmentResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "accepted_plan", "acceptedPlan", "accepted-plan":
			return &AcceptPlanAssignmentResponse_FieldTerminalPath{selector: AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan}, nil
		}
	} else {
		switch fp[0] {
		case "accepted_plan", "acceptedPlan", "accepted-plan":
			if subpath, err := accepted_plan.BuildAcceptedPlan_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AcceptPlanAssignmentResponse_FieldSubPath{selector: AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AcceptPlanAssignmentResponse", fp)
}

func ParseAcceptPlanAssignmentResponse_FieldPath(rawField string) (AcceptPlanAssignmentResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAcceptPlanAssignmentResponse_FieldPath(fp)
}

func MustParseAcceptPlanAssignmentResponse_FieldPath(rawField string) AcceptPlanAssignmentResponse_FieldPath {
	fp, err := ParseAcceptPlanAssignmentResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AcceptPlanAssignmentResponse_FieldTerminalPath struct {
	selector AcceptPlanAssignmentResponse_FieldPathSelector
}

var _ AcceptPlanAssignmentResponse_FieldPath = (*AcceptPlanAssignmentResponse_FieldTerminalPath)(nil)

func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) Selector() AcceptPlanAssignmentResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AcceptPlanAssignmentResponse
func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) Get(source *AcceptPlanAssignmentResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
			if source.AcceptedPlan != nil {
				values = append(values, source.AcceptedPlan)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AcceptPlanAssignmentResponse))
}

// GetSingle returns value pointed by specific field of from source AcceptPlanAssignmentResponse
func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) GetSingle(source *AcceptPlanAssignmentResponse) (interface{}, bool) {
	switch fp.selector {
	case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
		res := source.GetAcceptedPlan()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fp.selector))
	}
}

func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AcceptPlanAssignmentResponse))
}

// GetDefault returns a default value of the field type
func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
		return (*accepted_plan.AcceptedPlan)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fp.selector))
	}
}

func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) ClearValue(item *AcceptPlanAssignmentResponse) {
	if item != nil {
		switch fp.selector {
		case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
			item.AcceptedPlan = nil
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fp.selector))
		}
	}
}

func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AcceptPlanAssignmentResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) WithIValue(value interface{}) AcceptPlanAssignmentResponse_FieldPathValue {
	switch fp.selector {
	case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
		return &AcceptPlanAssignmentResponse_FieldTerminalPathValue{AcceptPlanAssignmentResponse_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlan)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fp.selector))
	}
}

func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) AcceptPlanAssignmentResponse_FieldPathArrayOfValues {
	fpaov := &AcceptPlanAssignmentResponse_FieldTerminalPathArrayOfValues{AcceptPlanAssignmentResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
		return &AcceptPlanAssignmentResponse_FieldTerminalPathArrayOfValues{AcceptPlanAssignmentResponse_FieldTerminalPath: *fp, values: values.([]*accepted_plan.AcceptedPlan)}
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) AcceptPlanAssignmentResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fp.selector))
	}
}

func (fp *AcceptPlanAssignmentResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type AcceptPlanAssignmentResponse_FieldSubPath struct {
	selector AcceptPlanAssignmentResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AcceptPlanAssignmentResponse_FieldPath = (*AcceptPlanAssignmentResponse_FieldSubPath)(nil)

func (fps *AcceptPlanAssignmentResponse_FieldSubPath) Selector() AcceptPlanAssignmentResponse_FieldPathSelector {
	return fps.selector
}
func (fps *AcceptPlanAssignmentResponse_FieldSubPath) AsAcceptedPlanSubPath() (accepted_plan.AcceptedPlan_FieldPath, bool) {
	res, ok := fps.subPath.(accepted_plan.AcceptedPlan_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AcceptPlanAssignmentResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AcceptPlanAssignmentResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source AcceptPlanAssignmentResponse
func (fps *AcceptPlanAssignmentResponse_FieldSubPath) Get(source *AcceptPlanAssignmentResponse) (values []interface{}) {
	if asAcceptedPlanFieldPath, ok := fps.AsAcceptedPlanSubPath(); ok {
		values = append(values, asAcceptedPlanFieldPath.Get(source.GetAcceptedPlan())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fps.selector))
	}
	return
}

func (fps *AcceptPlanAssignmentResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*AcceptPlanAssignmentResponse))
}

// GetSingle returns value of selected field from source AcceptPlanAssignmentResponse
func (fps *AcceptPlanAssignmentResponse_FieldSubPath) GetSingle(source *AcceptPlanAssignmentResponse) (interface{}, bool) {
	switch fps.selector {
	case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
		if source.GetAcceptedPlan() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAcceptedPlan())
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fps.selector))
	}
}

func (fps *AcceptPlanAssignmentResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*AcceptPlanAssignmentResponse))
}

// GetDefault returns a default value of the field type
func (fps *AcceptPlanAssignmentResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AcceptPlanAssignmentResponse_FieldSubPath) ClearValue(item *AcceptPlanAssignmentResponse) {
	if item != nil {
		switch fps.selector {
		case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
			fps.subPath.ClearValueRaw(item.AcceptedPlan)
		default:
			panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fps.selector))
		}
	}
}

func (fps *AcceptPlanAssignmentResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*AcceptPlanAssignmentResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *AcceptPlanAssignmentResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AcceptPlanAssignmentResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&AcceptPlanAssignmentResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *AcceptPlanAssignmentResponse_FieldSubPath) WithIValue(value interface{}) AcceptPlanAssignmentResponse_FieldPathValue {
	return &AcceptPlanAssignmentResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AcceptPlanAssignmentResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AcceptPlanAssignmentResponse_FieldSubPath) WithIArrayOfValues(values interface{}) AcceptPlanAssignmentResponse_FieldPathArrayOfValues {
	return &AcceptPlanAssignmentResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AcceptPlanAssignmentResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AcceptPlanAssignmentResponse_FieldSubPath) WithIArrayItemValue(value interface{}) AcceptPlanAssignmentResponse_FieldPathArrayItemValue {
	return &AcceptPlanAssignmentResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AcceptPlanAssignmentResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AcceptPlanAssignmentResponse_FieldPathValue allows storing values for AcceptPlanAssignmentResponse fields according to their type
type AcceptPlanAssignmentResponse_FieldPathValue interface {
	AcceptPlanAssignmentResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AcceptPlanAssignmentResponse)
	CompareWith(*AcceptPlanAssignmentResponse) (cmp int, comparable bool)
}

func ParseAcceptPlanAssignmentResponse_FieldPathValue(pathStr, valueStr string) (AcceptPlanAssignmentResponse_FieldPathValue, error) {
	fp, err := ParseAcceptPlanAssignmentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptPlanAssignmentResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(AcceptPlanAssignmentResponse_FieldPathValue), nil
}

func MustParseAcceptPlanAssignmentResponse_FieldPathValue(pathStr, valueStr string) AcceptPlanAssignmentResponse_FieldPathValue {
	fpv, err := ParseAcceptPlanAssignmentResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AcceptPlanAssignmentResponse_FieldTerminalPathValue struct {
	AcceptPlanAssignmentResponse_FieldTerminalPath
	value interface{}
}

var _ AcceptPlanAssignmentResponse_FieldPathValue = (*AcceptPlanAssignmentResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AcceptPlanAssignmentResponse' as interface{}
func (fpv *AcceptPlanAssignmentResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AcceptPlanAssignmentResponse_FieldTerminalPathValue) AsAcceptedPlanValue() (*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpv.value.(*accepted_plan.AcceptedPlan)
	return res, ok
}

// SetTo stores value for selected field for object AcceptPlanAssignmentResponse
func (fpv *AcceptPlanAssignmentResponse_FieldTerminalPathValue) SetTo(target **AcceptPlanAssignmentResponse) {
	if *target == nil {
		*target = new(AcceptPlanAssignmentResponse)
	}
	switch fpv.selector {
	case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
		(*target).AcceptedPlan = fpv.value.(*accepted_plan.AcceptedPlan)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fpv.selector))
	}
}

func (fpv *AcceptPlanAssignmentResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AcceptPlanAssignmentResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AcceptPlanAssignmentResponse_FieldTerminalPathValue' with the value under path in 'AcceptPlanAssignmentResponse'.
func (fpv *AcceptPlanAssignmentResponse_FieldTerminalPathValue) CompareWith(source *AcceptPlanAssignmentResponse) (int, bool) {
	switch fpv.selector {
	case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fpv.selector))
	}
}

func (fpv *AcceptPlanAssignmentResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AcceptPlanAssignmentResponse))
}

type AcceptPlanAssignmentResponse_FieldSubPathValue struct {
	AcceptPlanAssignmentResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AcceptPlanAssignmentResponse_FieldPathValue = (*AcceptPlanAssignmentResponse_FieldSubPathValue)(nil)

func (fpvs *AcceptPlanAssignmentResponse_FieldSubPathValue) AsAcceptedPlanPathValue() (accepted_plan.AcceptedPlan_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue)
	return res, ok
}

func (fpvs *AcceptPlanAssignmentResponse_FieldSubPathValue) SetTo(target **AcceptPlanAssignmentResponse) {
	if *target == nil {
		*target = new(AcceptPlanAssignmentResponse)
	}
	switch fpvs.Selector() {
	case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
		fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue).SetTo(&(*target).AcceptedPlan)
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *AcceptPlanAssignmentResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AcceptPlanAssignmentResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AcceptPlanAssignmentResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AcceptPlanAssignmentResponse_FieldSubPathValue) CompareWith(source *AcceptPlanAssignmentResponse) (int, bool) {
	switch fpvs.Selector() {
	case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
		return fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue).CompareWith(source.GetAcceptedPlan())
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *AcceptPlanAssignmentResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*AcceptPlanAssignmentResponse))
}

// AcceptPlanAssignmentResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for AcceptPlanAssignmentResponse according to their type
// Present only for array (repeated) types.
type AcceptPlanAssignmentResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AcceptPlanAssignmentResponse_FieldPath
	ContainsValue(*AcceptPlanAssignmentResponse) bool
}

// ParseAcceptPlanAssignmentResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAcceptPlanAssignmentResponse_FieldPathArrayItemValue(pathStr, valueStr string) (AcceptPlanAssignmentResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseAcceptPlanAssignmentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptPlanAssignmentResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AcceptPlanAssignmentResponse_FieldPathArrayItemValue), nil
}

func MustParseAcceptPlanAssignmentResponse_FieldPathArrayItemValue(pathStr, valueStr string) AcceptPlanAssignmentResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseAcceptPlanAssignmentResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AcceptPlanAssignmentResponse_FieldTerminalPathArrayItemValue struct {
	AcceptPlanAssignmentResponse_FieldTerminalPath
	value interface{}
}

var _ AcceptPlanAssignmentResponse_FieldPathArrayItemValue = (*AcceptPlanAssignmentResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AcceptPlanAssignmentResponse as interface{}
func (fpaiv *AcceptPlanAssignmentResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AcceptPlanAssignmentResponse_FieldTerminalPathArrayItemValue) GetSingle(source *AcceptPlanAssignmentResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AcceptPlanAssignmentResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AcceptPlanAssignmentResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AcceptPlanAssignmentResponse'
func (fpaiv *AcceptPlanAssignmentResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *AcceptPlanAssignmentResponse) bool {
	slice := fpaiv.AcceptPlanAssignmentResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AcceptPlanAssignmentResponse_FieldSubPathArrayItemValue struct {
	AcceptPlanAssignmentResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AcceptPlanAssignmentResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AcceptPlanAssignmentResponse_FieldSubPathArrayItemValue) AsAcceptedPlanPathItemValue() (accepted_plan.AcceptedPlan_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(accepted_plan.AcceptedPlan_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'AcceptPlanAssignmentResponse'
func (fpaivs *AcceptPlanAssignmentResponse_FieldSubPathArrayItemValue) ContainsValue(source *AcceptPlanAssignmentResponse) bool {
	switch fpaivs.Selector() {
	case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
		return fpaivs.subPathItemValue.(accepted_plan.AcceptedPlan_FieldPathArrayItemValue).ContainsValue(source.GetAcceptedPlan())
	default:
		panic(fmt.Sprintf("Invalid selector for AcceptPlanAssignmentResponse: %d", fpaivs.Selector()))
	}
}

// AcceptPlanAssignmentResponse_FieldPathArrayOfValues allows storing slice of values for AcceptPlanAssignmentResponse fields according to their type
type AcceptPlanAssignmentResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AcceptPlanAssignmentResponse_FieldPath
}

func ParseAcceptPlanAssignmentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (AcceptPlanAssignmentResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseAcceptPlanAssignmentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AcceptPlanAssignmentResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AcceptPlanAssignmentResponse_FieldPathArrayOfValues), nil
}

func MustParseAcceptPlanAssignmentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) AcceptPlanAssignmentResponse_FieldPathArrayOfValues {
	fpaov, err := ParseAcceptPlanAssignmentResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AcceptPlanAssignmentResponse_FieldTerminalPathArrayOfValues struct {
	AcceptPlanAssignmentResponse_FieldTerminalPath
	values interface{}
}

var _ AcceptPlanAssignmentResponse_FieldPathArrayOfValues = (*AcceptPlanAssignmentResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AcceptPlanAssignmentResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan:
		for _, v := range fpaov.values.([]*accepted_plan.AcceptedPlan) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AcceptPlanAssignmentResponse_FieldTerminalPathArrayOfValues) AsAcceptedPlanArrayOfValues() ([]*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpaov.values.([]*accepted_plan.AcceptedPlan)
	return res, ok
}

type AcceptPlanAssignmentResponse_FieldSubPathArrayOfValues struct {
	AcceptPlanAssignmentResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AcceptPlanAssignmentResponse_FieldPathArrayOfValues = (*AcceptPlanAssignmentResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AcceptPlanAssignmentResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AcceptPlanAssignmentResponse_FieldSubPathArrayOfValues) AsAcceptedPlanPathArrayOfValues() (accepted_plan.AcceptedPlan_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(accepted_plan.AcceptedPlan_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeclinePlanAssignmentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeclinePlanAssignmentRequest_FieldPathSelector
	Get(source *DeclinePlanAssignmentRequest) []interface{}
	GetSingle(source *DeclinePlanAssignmentRequest) (interface{}, bool)
	ClearValue(item *DeclinePlanAssignmentRequest)

	// Those methods build corresponding DeclinePlanAssignmentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeclinePlanAssignmentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeclinePlanAssignmentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeclinePlanAssignmentRequest_FieldPathArrayItemValue
}

type DeclinePlanAssignmentRequest_FieldPathSelector int32

const (
	DeclinePlanAssignmentRequest_FieldPathSelectorName     DeclinePlanAssignmentRequest_FieldPathSelector = 0
	DeclinePlanAssignmentRequest_FieldPathSelectorApprover DeclinePlanAssignmentRequest_FieldPathSelector = 1
	DeclinePlanAssignmentRequest_FieldPathSelectorReason   DeclinePlanAssignmentRequest_FieldPathSelector = 2
)

func (s DeclinePlanAssignmentRequest_FieldPathSelector) String() string {
	switch s {
	case DeclinePlanAssignmentRequest_FieldPathSelectorName:
		return "name"
	case DeclinePlanAssignmentRequest_FieldPathSelectorApprover:
		return "approver"
	case DeclinePlanAssignmentRequest_FieldPathSelectorReason:
		return "reason"
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentRequest: %d", s))
	}
}

func BuildDeclinePlanAssignmentRequest_FieldPath(fp gotenobject.RawFieldPath) (DeclinePlanAssignmentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeclinePlanAssignmentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeclinePlanAssignmentRequest_FieldTerminalPath{selector: DeclinePlanAssignmentRequest_FieldPathSelectorName}, nil
		case "approver":
			return &DeclinePlanAssignmentRequest_FieldTerminalPath{selector: DeclinePlanAssignmentRequest_FieldPathSelectorApprover}, nil
		case "reason":
			return &DeclinePlanAssignmentRequest_FieldTerminalPath{selector: DeclinePlanAssignmentRequest_FieldPathSelectorReason}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeclinePlanAssignmentRequest", fp)
}

func ParseDeclinePlanAssignmentRequest_FieldPath(rawField string) (DeclinePlanAssignmentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeclinePlanAssignmentRequest_FieldPath(fp)
}

func MustParseDeclinePlanAssignmentRequest_FieldPath(rawField string) DeclinePlanAssignmentRequest_FieldPath {
	fp, err := ParseDeclinePlanAssignmentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeclinePlanAssignmentRequest_FieldTerminalPath struct {
	selector DeclinePlanAssignmentRequest_FieldPathSelector
}

var _ DeclinePlanAssignmentRequest_FieldPath = (*DeclinePlanAssignmentRequest_FieldTerminalPath)(nil)

func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) Selector() DeclinePlanAssignmentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeclinePlanAssignmentRequest
func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) Get(source *DeclinePlanAssignmentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeclinePlanAssignmentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case DeclinePlanAssignmentRequest_FieldPathSelectorApprover:
			if source.Approver != nil {
				values = append(values, source.Approver)
			}
		case DeclinePlanAssignmentRequest_FieldPathSelectorReason:
			values = append(values, source.Reason)
		default:
			panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeclinePlanAssignmentRequest))
}

// GetSingle returns value pointed by specific field of from source DeclinePlanAssignmentRequest
func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) GetSingle(source *DeclinePlanAssignmentRequest) (interface{}, bool) {
	switch fp.selector {
	case DeclinePlanAssignmentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case DeclinePlanAssignmentRequest_FieldPathSelectorApprover:
		res := source.GetApprover()
		return res, res != nil
	case DeclinePlanAssignmentRequest_FieldPathSelectorReason:
		return source.GetReason(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeclinePlanAssignmentRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeclinePlanAssignmentRequest_FieldPathSelectorName:
		return (*plan_assignment_request.Reference)(nil)
	case DeclinePlanAssignmentRequest_FieldPathSelectorApprover:
		return (*iam_organization.Reference)(nil)
	case DeclinePlanAssignmentRequest_FieldPathSelectorReason:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) ClearValue(item *DeclinePlanAssignmentRequest) {
	if item != nil {
		switch fp.selector {
		case DeclinePlanAssignmentRequest_FieldPathSelectorName:
			item.Name = nil
		case DeclinePlanAssignmentRequest_FieldPathSelectorApprover:
			item.Approver = nil
		case DeclinePlanAssignmentRequest_FieldPathSelectorReason:
			item.Reason = ""
		default:
			panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentRequest: %d", fp.selector))
		}
	}
}

func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeclinePlanAssignmentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeclinePlanAssignmentRequest_FieldPathSelectorName ||
		fp.selector == DeclinePlanAssignmentRequest_FieldPathSelectorApprover ||
		fp.selector == DeclinePlanAssignmentRequest_FieldPathSelectorReason
}

func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) WithIValue(value interface{}) DeclinePlanAssignmentRequest_FieldPathValue {
	switch fp.selector {
	case DeclinePlanAssignmentRequest_FieldPathSelectorName:
		return &DeclinePlanAssignmentRequest_FieldTerminalPathValue{DeclinePlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.Reference)}
	case DeclinePlanAssignmentRequest_FieldPathSelectorApprover:
		return &DeclinePlanAssignmentRequest_FieldTerminalPathValue{DeclinePlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*iam_organization.Reference)}
	case DeclinePlanAssignmentRequest_FieldPathSelectorReason:
		return &DeclinePlanAssignmentRequest_FieldTerminalPathValue{DeclinePlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeclinePlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov := &DeclinePlanAssignmentRequest_FieldTerminalPathArrayOfValues{DeclinePlanAssignmentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeclinePlanAssignmentRequest_FieldPathSelectorName:
		return &DeclinePlanAssignmentRequest_FieldTerminalPathArrayOfValues{DeclinePlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.Reference)}
	case DeclinePlanAssignmentRequest_FieldPathSelectorApprover:
		return &DeclinePlanAssignmentRequest_FieldTerminalPathArrayOfValues{DeclinePlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*iam_organization.Reference)}
	case DeclinePlanAssignmentRequest_FieldPathSelectorReason:
		return &DeclinePlanAssignmentRequest_FieldTerminalPathArrayOfValues{DeclinePlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeclinePlanAssignmentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *DeclinePlanAssignmentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeclinePlanAssignmentRequest_FieldPathValue allows storing values for DeclinePlanAssignmentRequest fields according to their type
type DeclinePlanAssignmentRequest_FieldPathValue interface {
	DeclinePlanAssignmentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeclinePlanAssignmentRequest)
	CompareWith(*DeclinePlanAssignmentRequest) (cmp int, comparable bool)
}

func ParseDeclinePlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) (DeclinePlanAssignmentRequest_FieldPathValue, error) {
	fp, err := ParseDeclinePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeclinePlanAssignmentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeclinePlanAssignmentRequest_FieldPathValue), nil
}

func MustParseDeclinePlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) DeclinePlanAssignmentRequest_FieldPathValue {
	fpv, err := ParseDeclinePlanAssignmentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeclinePlanAssignmentRequest_FieldTerminalPathValue struct {
	DeclinePlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ DeclinePlanAssignmentRequest_FieldPathValue = (*DeclinePlanAssignmentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeclinePlanAssignmentRequest' as interface{}
func (fpv *DeclinePlanAssignmentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeclinePlanAssignmentRequest_FieldTerminalPathValue) AsNameValue() (*plan_assignment_request.Reference, bool) {
	res, ok := fpv.value.(*plan_assignment_request.Reference)
	return res, ok
}
func (fpv *DeclinePlanAssignmentRequest_FieldTerminalPathValue) AsApproverValue() (*iam_organization.Reference, bool) {
	res, ok := fpv.value.(*iam_organization.Reference)
	return res, ok
}
func (fpv *DeclinePlanAssignmentRequest_FieldTerminalPathValue) AsReasonValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object DeclinePlanAssignmentRequest
func (fpv *DeclinePlanAssignmentRequest_FieldTerminalPathValue) SetTo(target **DeclinePlanAssignmentRequest) {
	if *target == nil {
		*target = new(DeclinePlanAssignmentRequest)
	}
	switch fpv.selector {
	case DeclinePlanAssignmentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*plan_assignment_request.Reference)
	case DeclinePlanAssignmentRequest_FieldPathSelectorApprover:
		(*target).Approver = fpv.value.(*iam_organization.Reference)
	case DeclinePlanAssignmentRequest_FieldPathSelectorReason:
		(*target).Reason = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *DeclinePlanAssignmentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeclinePlanAssignmentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeclinePlanAssignmentRequest_FieldTerminalPathValue' with the value under path in 'DeclinePlanAssignmentRequest'.
func (fpv *DeclinePlanAssignmentRequest_FieldTerminalPathValue) CompareWith(source *DeclinePlanAssignmentRequest) (int, bool) {
	switch fpv.selector {
	case DeclinePlanAssignmentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*plan_assignment_request.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case DeclinePlanAssignmentRequest_FieldPathSelectorApprover:
		leftValue := fpv.value.(*iam_organization.Reference)
		rightValue := source.GetApprover()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case DeclinePlanAssignmentRequest_FieldPathSelectorReason:
		leftValue := fpv.value.(string)
		rightValue := source.GetReason()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *DeclinePlanAssignmentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeclinePlanAssignmentRequest))
}

// DeclinePlanAssignmentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeclinePlanAssignmentRequest according to their type
// Present only for array (repeated) types.
type DeclinePlanAssignmentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeclinePlanAssignmentRequest_FieldPath
	ContainsValue(*DeclinePlanAssignmentRequest) bool
}

// ParseDeclinePlanAssignmentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeclinePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeclinePlanAssignmentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeclinePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeclinePlanAssignmentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeclinePlanAssignmentRequest_FieldPathArrayItemValue), nil
}

func MustParseDeclinePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeclinePlanAssignmentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeclinePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeclinePlanAssignmentRequest_FieldTerminalPathArrayItemValue struct {
	DeclinePlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ DeclinePlanAssignmentRequest_FieldPathArrayItemValue = (*DeclinePlanAssignmentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeclinePlanAssignmentRequest as interface{}
func (fpaiv *DeclinePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeclinePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeclinePlanAssignmentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeclinePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeclinePlanAssignmentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeclinePlanAssignmentRequest'
func (fpaiv *DeclinePlanAssignmentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeclinePlanAssignmentRequest) bool {
	slice := fpaiv.DeclinePlanAssignmentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeclinePlanAssignmentRequest_FieldPathArrayOfValues allows storing slice of values for DeclinePlanAssignmentRequest fields according to their type
type DeclinePlanAssignmentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeclinePlanAssignmentRequest_FieldPath
}

func ParseDeclinePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeclinePlanAssignmentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeclinePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeclinePlanAssignmentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeclinePlanAssignmentRequest_FieldPathArrayOfValues), nil
}

func MustParseDeclinePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeclinePlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeclinePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeclinePlanAssignmentRequest_FieldTerminalPathArrayOfValues struct {
	DeclinePlanAssignmentRequest_FieldTerminalPath
	values interface{}
}

var _ DeclinePlanAssignmentRequest_FieldPathArrayOfValues = (*DeclinePlanAssignmentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeclinePlanAssignmentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeclinePlanAssignmentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*plan_assignment_request.Reference) {
			values = append(values, v)
		}
	case DeclinePlanAssignmentRequest_FieldPathSelectorApprover:
		for _, v := range fpaov.values.([]*iam_organization.Reference) {
			values = append(values, v)
		}
	case DeclinePlanAssignmentRequest_FieldPathSelectorReason:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeclinePlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*plan_assignment_request.Reference, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.Reference)
	return res, ok
}
func (fpaov *DeclinePlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsApproverArrayOfValues() ([]*iam_organization.Reference, bool) {
	res, ok := fpaov.values.([]*iam_organization.Reference)
	return res, ok
}
func (fpaov *DeclinePlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsReasonArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeclinePlanAssignmentResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeclinePlanAssignmentResponse_FieldPathSelector
	Get(source *DeclinePlanAssignmentResponse) []interface{}
	GetSingle(source *DeclinePlanAssignmentResponse) (interface{}, bool)
	ClearValue(item *DeclinePlanAssignmentResponse)

	// Those methods build corresponding DeclinePlanAssignmentResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeclinePlanAssignmentResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) DeclinePlanAssignmentResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeclinePlanAssignmentResponse_FieldPathArrayItemValue
}

type DeclinePlanAssignmentResponse_FieldPathSelector int32

func (s DeclinePlanAssignmentResponse_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentResponse: %d", s))
	}
}

func BuildDeclinePlanAssignmentResponse_FieldPath(fp gotenobject.RawFieldPath) (DeclinePlanAssignmentResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeclinePlanAssignmentResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeclinePlanAssignmentResponse", fp)
}

func ParseDeclinePlanAssignmentResponse_FieldPath(rawField string) (DeclinePlanAssignmentResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeclinePlanAssignmentResponse_FieldPath(fp)
}

func MustParseDeclinePlanAssignmentResponse_FieldPath(rawField string) DeclinePlanAssignmentResponse_FieldPath {
	fp, err := ParseDeclinePlanAssignmentResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeclinePlanAssignmentResponse_FieldTerminalPath struct {
	selector DeclinePlanAssignmentResponse_FieldPathSelector
}

var _ DeclinePlanAssignmentResponse_FieldPath = (*DeclinePlanAssignmentResponse_FieldTerminalPath)(nil)

func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) Selector() DeclinePlanAssignmentResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeclinePlanAssignmentResponse
func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) Get(source *DeclinePlanAssignmentResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeclinePlanAssignmentResponse))
}

// GetSingle returns value pointed by specific field of from source DeclinePlanAssignmentResponse
func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) GetSingle(source *DeclinePlanAssignmentResponse) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentResponse: %d", fp.selector))
	}
}

func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeclinePlanAssignmentResponse))
}

// GetDefault returns a default value of the field type
func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentResponse: %d", fp.selector))
	}
}

func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) ClearValue(item *DeclinePlanAssignmentResponse) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentResponse: %d", fp.selector))
		}
	}
}

func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeclinePlanAssignmentResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) WithIValue(value interface{}) DeclinePlanAssignmentResponse_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentResponse: %d", fp.selector))
	}
}

func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeclinePlanAssignmentResponse_FieldPathArrayOfValues {
	fpaov := &DeclinePlanAssignmentResponse_FieldTerminalPathArrayOfValues{DeclinePlanAssignmentResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeclinePlanAssignmentResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentResponse: %d", fp.selector))
	}
}

func (fp *DeclinePlanAssignmentResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeclinePlanAssignmentResponse_FieldPathValue allows storing values for DeclinePlanAssignmentResponse fields according to their type
type DeclinePlanAssignmentResponse_FieldPathValue interface {
	DeclinePlanAssignmentResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeclinePlanAssignmentResponse)
	CompareWith(*DeclinePlanAssignmentResponse) (cmp int, comparable bool)
}

func ParseDeclinePlanAssignmentResponse_FieldPathValue(pathStr, valueStr string) (DeclinePlanAssignmentResponse_FieldPathValue, error) {
	fp, err := ParseDeclinePlanAssignmentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeclinePlanAssignmentResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeclinePlanAssignmentResponse_FieldPathValue), nil
}

func MustParseDeclinePlanAssignmentResponse_FieldPathValue(pathStr, valueStr string) DeclinePlanAssignmentResponse_FieldPathValue {
	fpv, err := ParseDeclinePlanAssignmentResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeclinePlanAssignmentResponse_FieldTerminalPathValue struct {
	DeclinePlanAssignmentResponse_FieldTerminalPath
	value interface{}
}

var _ DeclinePlanAssignmentResponse_FieldPathValue = (*DeclinePlanAssignmentResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeclinePlanAssignmentResponse' as interface{}
func (fpv *DeclinePlanAssignmentResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object DeclinePlanAssignmentResponse
func (fpv *DeclinePlanAssignmentResponse_FieldTerminalPathValue) SetTo(target **DeclinePlanAssignmentResponse) {
	if *target == nil {
		*target = new(DeclinePlanAssignmentResponse)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentResponse: %d", fpv.selector))
	}
}

func (fpv *DeclinePlanAssignmentResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeclinePlanAssignmentResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeclinePlanAssignmentResponse_FieldTerminalPathValue' with the value under path in 'DeclinePlanAssignmentResponse'.
func (fpv *DeclinePlanAssignmentResponse_FieldTerminalPathValue) CompareWith(source *DeclinePlanAssignmentResponse) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeclinePlanAssignmentResponse: %d", fpv.selector))
	}
}

func (fpv *DeclinePlanAssignmentResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeclinePlanAssignmentResponse))
}

// DeclinePlanAssignmentResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for DeclinePlanAssignmentResponse according to their type
// Present only for array (repeated) types.
type DeclinePlanAssignmentResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeclinePlanAssignmentResponse_FieldPath
	ContainsValue(*DeclinePlanAssignmentResponse) bool
}

// ParseDeclinePlanAssignmentResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeclinePlanAssignmentResponse_FieldPathArrayItemValue(pathStr, valueStr string) (DeclinePlanAssignmentResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseDeclinePlanAssignmentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeclinePlanAssignmentResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeclinePlanAssignmentResponse_FieldPathArrayItemValue), nil
}

func MustParseDeclinePlanAssignmentResponse_FieldPathArrayItemValue(pathStr, valueStr string) DeclinePlanAssignmentResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseDeclinePlanAssignmentResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeclinePlanAssignmentResponse_FieldTerminalPathArrayItemValue struct {
	DeclinePlanAssignmentResponse_FieldTerminalPath
	value interface{}
}

var _ DeclinePlanAssignmentResponse_FieldPathArrayItemValue = (*DeclinePlanAssignmentResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeclinePlanAssignmentResponse as interface{}
func (fpaiv *DeclinePlanAssignmentResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeclinePlanAssignmentResponse_FieldTerminalPathArrayItemValue) GetSingle(source *DeclinePlanAssignmentResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeclinePlanAssignmentResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeclinePlanAssignmentResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeclinePlanAssignmentResponse'
func (fpaiv *DeclinePlanAssignmentResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *DeclinePlanAssignmentResponse) bool {
	slice := fpaiv.DeclinePlanAssignmentResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeclinePlanAssignmentResponse_FieldPathArrayOfValues allows storing slice of values for DeclinePlanAssignmentResponse fields according to their type
type DeclinePlanAssignmentResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeclinePlanAssignmentResponse_FieldPath
}

func ParseDeclinePlanAssignmentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (DeclinePlanAssignmentResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseDeclinePlanAssignmentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeclinePlanAssignmentResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeclinePlanAssignmentResponse_FieldPathArrayOfValues), nil
}

func MustParseDeclinePlanAssignmentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) DeclinePlanAssignmentResponse_FieldPathArrayOfValues {
	fpaov, err := ParseDeclinePlanAssignmentResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeclinePlanAssignmentResponse_FieldTerminalPathArrayOfValues struct {
	DeclinePlanAssignmentResponse_FieldTerminalPath
	values interface{}
}

var _ DeclinePlanAssignmentResponse_FieldPathArrayOfValues = (*DeclinePlanAssignmentResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeclinePlanAssignmentResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}
