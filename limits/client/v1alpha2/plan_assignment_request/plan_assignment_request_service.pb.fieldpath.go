// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/plan_assignment_request_service.proto
// DO NOT EDIT!!!

package plan_assignment_request_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	plan_assignment_request "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan_assignment_request"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &plan_assignment_request.PlanAssignmentRequest{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetPlanAssignmentRequestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetPlanAssignmentRequestRequest_FieldPathSelector
	Get(source *GetPlanAssignmentRequestRequest) []interface{}
	GetSingle(source *GetPlanAssignmentRequestRequest) (interface{}, bool)
	ClearValue(item *GetPlanAssignmentRequestRequest)

	// Those methods build corresponding GetPlanAssignmentRequestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetPlanAssignmentRequestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetPlanAssignmentRequestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetPlanAssignmentRequestRequest_FieldPathArrayItemValue
}

type GetPlanAssignmentRequestRequest_FieldPathSelector int32

const (
	GetPlanAssignmentRequestRequest_FieldPathSelectorName      GetPlanAssignmentRequestRequest_FieldPathSelector = 0
	GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask GetPlanAssignmentRequestRequest_FieldPathSelector = 1
	GetPlanAssignmentRequestRequest_FieldPathSelectorView      GetPlanAssignmentRequestRequest_FieldPathSelector = 2
)

func (s GetPlanAssignmentRequestRequest_FieldPathSelector) String() string {
	switch s {
	case GetPlanAssignmentRequestRequest_FieldPathSelectorName:
		return "name"
	case GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetPlanAssignmentRequestRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequestRequest: %d", s))
	}
}

func BuildGetPlanAssignmentRequestRequest_FieldPath(fp gotenobject.RawFieldPath) (GetPlanAssignmentRequestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetPlanAssignmentRequestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetPlanAssignmentRequestRequest_FieldTerminalPath{selector: GetPlanAssignmentRequestRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetPlanAssignmentRequestRequest_FieldTerminalPath{selector: GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetPlanAssignmentRequestRequest_FieldTerminalPath{selector: GetPlanAssignmentRequestRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetPlanAssignmentRequestRequest", fp)
}

func ParseGetPlanAssignmentRequestRequest_FieldPath(rawField string) (GetPlanAssignmentRequestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetPlanAssignmentRequestRequest_FieldPath(fp)
}

func MustParseGetPlanAssignmentRequestRequest_FieldPath(rawField string) GetPlanAssignmentRequestRequest_FieldPath {
	fp, err := ParseGetPlanAssignmentRequestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetPlanAssignmentRequestRequest_FieldTerminalPath struct {
	selector GetPlanAssignmentRequestRequest_FieldPathSelector
}

var _ GetPlanAssignmentRequestRequest_FieldPath = (*GetPlanAssignmentRequestRequest_FieldTerminalPath)(nil)

func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) Selector() GetPlanAssignmentRequestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetPlanAssignmentRequestRequest
func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) Get(source *GetPlanAssignmentRequestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetPlanAssignmentRequestRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetPlanAssignmentRequestRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetPlanAssignmentRequestRequest))
}

// GetSingle returns value pointed by specific field of from source GetPlanAssignmentRequestRequest
func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) GetSingle(source *GetPlanAssignmentRequestRequest) (interface{}, bool) {
	switch fp.selector {
	case GetPlanAssignmentRequestRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetPlanAssignmentRequestRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetPlanAssignmentRequestRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetPlanAssignmentRequestRequest_FieldPathSelectorName:
		return (*plan_assignment_request.Reference)(nil)
	case GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		return (*plan_assignment_request.PlanAssignmentRequest_FieldMask)(nil)
	case GetPlanAssignmentRequestRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) ClearValue(item *GetPlanAssignmentRequestRequest) {
	if item != nil {
		switch fp.selector {
		case GetPlanAssignmentRequestRequest_FieldPathSelectorName:
			item.Name = nil
		case GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetPlanAssignmentRequestRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequestRequest: %d", fp.selector))
		}
	}
}

func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetPlanAssignmentRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetPlanAssignmentRequestRequest_FieldPathSelectorName ||
		fp.selector == GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetPlanAssignmentRequestRequest_FieldPathSelectorView
}

func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) WithIValue(value interface{}) GetPlanAssignmentRequestRequest_FieldPathValue {
	switch fp.selector {
	case GetPlanAssignmentRequestRequest_FieldPathSelectorName:
		return &GetPlanAssignmentRequestRequest_FieldTerminalPathValue{GetPlanAssignmentRequestRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.Reference)}
	case GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		return &GetPlanAssignmentRequestRequest_FieldTerminalPathValue{GetPlanAssignmentRequestRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	case GetPlanAssignmentRequestRequest_FieldPathSelectorView:
		return &GetPlanAssignmentRequestRequest_FieldTerminalPathValue{GetPlanAssignmentRequestRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetPlanAssignmentRequestRequest_FieldPathArrayOfValues {
	fpaov := &GetPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{GetPlanAssignmentRequestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetPlanAssignmentRequestRequest_FieldPathSelectorName:
		return &GetPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{GetPlanAssignmentRequestRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.Reference)}
	case GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		return &GetPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{GetPlanAssignmentRequestRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	case GetPlanAssignmentRequestRequest_FieldPathSelectorView:
		return &GetPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{GetPlanAssignmentRequestRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetPlanAssignmentRequestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *GetPlanAssignmentRequestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetPlanAssignmentRequestRequest_FieldPathValue allows storing values for GetPlanAssignmentRequestRequest fields according to their type
type GetPlanAssignmentRequestRequest_FieldPathValue interface {
	GetPlanAssignmentRequestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetPlanAssignmentRequestRequest)
	CompareWith(*GetPlanAssignmentRequestRequest) (cmp int, comparable bool)
}

func ParseGetPlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr string) (GetPlanAssignmentRequestRequest_FieldPathValue, error) {
	fp, err := ParseGetPlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPlanAssignmentRequestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetPlanAssignmentRequestRequest_FieldPathValue), nil
}

func MustParseGetPlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr string) GetPlanAssignmentRequestRequest_FieldPathValue {
	fpv, err := ParseGetPlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetPlanAssignmentRequestRequest_FieldTerminalPathValue struct {
	GetPlanAssignmentRequestRequest_FieldTerminalPath
	value interface{}
}

var _ GetPlanAssignmentRequestRequest_FieldPathValue = (*GetPlanAssignmentRequestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetPlanAssignmentRequestRequest' as interface{}
func (fpv *GetPlanAssignmentRequestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetPlanAssignmentRequestRequest_FieldTerminalPathValue) AsNameValue() (*plan_assignment_request.Reference, bool) {
	res, ok := fpv.value.(*plan_assignment_request.Reference)
	return res, ok
}
func (fpv *GetPlanAssignmentRequestRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}
func (fpv *GetPlanAssignmentRequestRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetPlanAssignmentRequestRequest
func (fpv *GetPlanAssignmentRequestRequest_FieldTerminalPathValue) SetTo(target **GetPlanAssignmentRequestRequest) {
	if *target == nil {
		*target = new(GetPlanAssignmentRequestRequest)
	}
	switch fpv.selector {
	case GetPlanAssignmentRequestRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*plan_assignment_request.Reference)
	case GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	case GetPlanAssignmentRequestRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequestRequest: %d", fpv.selector))
	}
}

func (fpv *GetPlanAssignmentRequestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetPlanAssignmentRequestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetPlanAssignmentRequestRequest_FieldTerminalPathValue' with the value under path in 'GetPlanAssignmentRequestRequest'.
func (fpv *GetPlanAssignmentRequestRequest_FieldTerminalPathValue) CompareWith(source *GetPlanAssignmentRequestRequest) (int, bool) {
	switch fpv.selector {
	case GetPlanAssignmentRequestRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*plan_assignment_request.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetPlanAssignmentRequestRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequestRequest: %d", fpv.selector))
	}
}

func (fpv *GetPlanAssignmentRequestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetPlanAssignmentRequestRequest))
}

// GetPlanAssignmentRequestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetPlanAssignmentRequestRequest according to their type
// Present only for array (repeated) types.
type GetPlanAssignmentRequestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetPlanAssignmentRequestRequest_FieldPath
	ContainsValue(*GetPlanAssignmentRequestRequest) bool
}

// ParseGetPlanAssignmentRequestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetPlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetPlanAssignmentRequestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetPlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPlanAssignmentRequestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetPlanAssignmentRequestRequest_FieldPathArrayItemValue), nil
}

func MustParseGetPlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetPlanAssignmentRequestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetPlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetPlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue struct {
	GetPlanAssignmentRequestRequest_FieldTerminalPath
	value interface{}
}

var _ GetPlanAssignmentRequestRequest_FieldPathArrayItemValue = (*GetPlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetPlanAssignmentRequestRequest as interface{}
func (fpaiv *GetPlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetPlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetPlanAssignmentRequestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetPlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetPlanAssignmentRequestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetPlanAssignmentRequestRequest'
func (fpaiv *GetPlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetPlanAssignmentRequestRequest) bool {
	slice := fpaiv.GetPlanAssignmentRequestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetPlanAssignmentRequestRequest_FieldPathArrayOfValues allows storing slice of values for GetPlanAssignmentRequestRequest fields according to their type
type GetPlanAssignmentRequestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetPlanAssignmentRequestRequest_FieldPath
}

func ParseGetPlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetPlanAssignmentRequestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetPlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPlanAssignmentRequestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetPlanAssignmentRequestRequest_FieldPathArrayOfValues), nil
}

func MustParseGetPlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetPlanAssignmentRequestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetPlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues struct {
	GetPlanAssignmentRequestRequest_FieldTerminalPath
	values interface{}
}

var _ GetPlanAssignmentRequestRequest_FieldPathArrayOfValues = (*GetPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetPlanAssignmentRequestRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*plan_assignment_request.Reference) {
			values = append(values, v)
		}
	case GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask) {
			values = append(values, v)
		}
	case GetPlanAssignmentRequestRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*plan_assignment_request.Reference, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.Reference)
	return res, ok
}
func (fpaov *GetPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}
func (fpaov *GetPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPlanAssignmentRequestsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPlanAssignmentRequestsRequest_FieldPathSelector
	Get(source *BatchGetPlanAssignmentRequestsRequest) []interface{}
	GetSingle(source *BatchGetPlanAssignmentRequestsRequest) (interface{}, bool)
	ClearValue(item *BatchGetPlanAssignmentRequestsRequest)

	// Those methods build corresponding BatchGetPlanAssignmentRequestsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPlanAssignmentRequestsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPlanAssignmentRequestsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPlanAssignmentRequestsRequest_FieldPathArrayItemValue
}

type BatchGetPlanAssignmentRequestsRequest_FieldPathSelector int32

const (
	BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames     BatchGetPlanAssignmentRequestsRequest_FieldPathSelector = 0
	BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask BatchGetPlanAssignmentRequestsRequest_FieldPathSelector = 1
	BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView      BatchGetPlanAssignmentRequestsRequest_FieldPathSelector = 2
)

func (s BatchGetPlanAssignmentRequestsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsRequest: %d", s))
	}
}

func BuildBatchGetPlanAssignmentRequestsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPlanAssignmentRequestsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPlanAssignmentRequestsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPlanAssignmentRequestsRequest", fp)
}

func ParseBatchGetPlanAssignmentRequestsRequest_FieldPath(rawField string) (BatchGetPlanAssignmentRequestsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPlanAssignmentRequestsRequest_FieldPath(fp)
}

func MustParseBatchGetPlanAssignmentRequestsRequest_FieldPath(rawField string) BatchGetPlanAssignmentRequestsRequest_FieldPath {
	fp, err := ParseBatchGetPlanAssignmentRequestsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath struct {
	selector BatchGetPlanAssignmentRequestsRequest_FieldPathSelector
}

var _ BatchGetPlanAssignmentRequestsRequest_FieldPath = (*BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) Selector() BatchGetPlanAssignmentRequestsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPlanAssignmentRequestsRequest
func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) Get(source *BatchGetPlanAssignmentRequestsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPlanAssignmentRequestsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetPlanAssignmentRequestsRequest
func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) GetSingle(source *BatchGetPlanAssignmentRequestsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPlanAssignmentRequestsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames:
		return ([]*plan_assignment_request.Reference)(nil)
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return (*plan_assignment_request.PlanAssignmentRequest_FieldMask)(nil)
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) ClearValue(item *BatchGetPlanAssignmentRequestsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPlanAssignmentRequestsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView
}

func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetPlanAssignmentRequestsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames:
		return &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue{BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.([]*plan_assignment_request.Reference)}
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue{BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue{BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPlanAssignmentRequestsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames:
		return &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([][]*plan_assignment_request.Reference)}
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPlanAssignmentRequestsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames:
		return &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue{BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetPlanAssignmentRequestsRequest_FieldPathValue allows storing values for BatchGetPlanAssignmentRequestsRequest fields according to their type
type BatchGetPlanAssignmentRequestsRequest_FieldPathValue interface {
	BatchGetPlanAssignmentRequestsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPlanAssignmentRequestsRequest)
	CompareWith(*BatchGetPlanAssignmentRequestsRequest) (cmp int, comparable bool)
}

func ParseBatchGetPlanAssignmentRequestsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetPlanAssignmentRequestsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetPlanAssignmentRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlanAssignmentRequestsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPlanAssignmentRequestsRequest_FieldPathValue), nil
}

func MustParseBatchGetPlanAssignmentRequestsRequest_FieldPathValue(pathStr, valueStr string) BatchGetPlanAssignmentRequestsRequest_FieldPathValue {
	fpv, err := ParseBatchGetPlanAssignmentRequestsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue struct {
	BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPlanAssignmentRequestsRequest_FieldPathValue = (*BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPlanAssignmentRequestsRequest' as interface{}
func (fpv *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsNamesValue() ([]*plan_assignment_request.Reference, bool) {
	res, ok := fpv.value.([]*plan_assignment_request.Reference)
	return res, ok
}
func (fpv *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}
func (fpv *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPlanAssignmentRequestsRequest
func (fpv *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue) SetTo(target **BatchGetPlanAssignmentRequestsRequest) {
	if *target == nil {
		*target = new(BatchGetPlanAssignmentRequestsRequest)
	}
	switch fpv.selector {
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*plan_assignment_request.Reference)
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPlanAssignmentRequestsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetPlanAssignmentRequestsRequest'.
func (fpv *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetPlanAssignmentRequestsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPlanAssignmentRequestsRequest))
}

// BatchGetPlanAssignmentRequestsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPlanAssignmentRequestsRequest according to their type
// Present only for array (repeated) types.
type BatchGetPlanAssignmentRequestsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPlanAssignmentRequestsRequest_FieldPath
	ContainsValue(*BatchGetPlanAssignmentRequestsRequest) bool
}

// ParseBatchGetPlanAssignmentRequestsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPlanAssignmentRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPlanAssignmentRequestsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPlanAssignmentRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlanAssignmentRequestsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPlanAssignmentRequestsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPlanAssignmentRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPlanAssignmentRequestsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPlanAssignmentRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPlanAssignmentRequestsRequest_FieldPathArrayItemValue = (*BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPlanAssignmentRequestsRequest as interface{}
func (fpaiv *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*plan_assignment_request.Reference, bool) {
	res, ok := fpaiv.value.(*plan_assignment_request.Reference)
	return res, ok
}

func (fpaiv *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPlanAssignmentRequestsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPlanAssignmentRequestsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPlanAssignmentRequestsRequest'
func (fpaiv *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPlanAssignmentRequestsRequest) bool {
	slice := fpaiv.BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetPlanAssignmentRequestsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetPlanAssignmentRequestsRequest fields according to their type
type BatchGetPlanAssignmentRequestsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPlanAssignmentRequestsRequest_FieldPath
}

func ParseBatchGetPlanAssignmentRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPlanAssignmentRequestsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPlanAssignmentRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlanAssignmentRequestsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPlanAssignmentRequestsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPlanAssignmentRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPlanAssignmentRequestsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPlanAssignmentRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetPlanAssignmentRequestsRequest_FieldPathArrayOfValues = (*BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*plan_assignment_request.Reference) {
			values = append(values, v)
		}
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask) {
			values = append(values, v)
		}
	case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*plan_assignment_request.Reference, bool) {
	res, ok := fpaov.values.([][]*plan_assignment_request.Reference)
	return res, ok
}
func (fpaov *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}
func (fpaov *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPlanAssignmentRequestsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPlanAssignmentRequestsResponse_FieldPathSelector
	Get(source *BatchGetPlanAssignmentRequestsResponse) []interface{}
	GetSingle(source *BatchGetPlanAssignmentRequestsResponse) (interface{}, bool)
	ClearValue(item *BatchGetPlanAssignmentRequestsResponse)

	// Those methods build corresponding BatchGetPlanAssignmentRequestsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPlanAssignmentRequestsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPlanAssignmentRequestsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPlanAssignmentRequestsResponse_FieldPathArrayItemValue
}

type BatchGetPlanAssignmentRequestsResponse_FieldPathSelector int32

const (
	BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests BatchGetPlanAssignmentRequestsResponse_FieldPathSelector = 0
	BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing                BatchGetPlanAssignmentRequestsResponse_FieldPathSelector = 1
)

func (s BatchGetPlanAssignmentRequestsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return "plan_assignment_requests"
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", s))
	}
}

func BuildBatchGetPlanAssignmentRequestsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPlanAssignmentRequestsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPlanAssignmentRequestsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plan_assignment_requests", "planAssignmentRequests", "plan-assignment-requests":
			return &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests}, nil
		case "missing":
			return &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "plan_assignment_requests", "planAssignmentRequests", "plan-assignment-requests":
			if subpath, err := plan_assignment_request.BuildPlanAssignmentRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetPlanAssignmentRequestsResponse_FieldSubPath{selector: BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPlanAssignmentRequestsResponse", fp)
}

func ParseBatchGetPlanAssignmentRequestsResponse_FieldPath(rawField string) (BatchGetPlanAssignmentRequestsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPlanAssignmentRequestsResponse_FieldPath(fp)
}

func MustParseBatchGetPlanAssignmentRequestsResponse_FieldPath(rawField string) BatchGetPlanAssignmentRequestsResponse_FieldPath {
	fp, err := ParseBatchGetPlanAssignmentRequestsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath struct {
	selector BatchGetPlanAssignmentRequestsResponse_FieldPathSelector
}

var _ BatchGetPlanAssignmentRequestsResponse_FieldPath = (*BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) Selector() BatchGetPlanAssignmentRequestsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPlanAssignmentRequestsResponse
func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) Get(source *BatchGetPlanAssignmentRequestsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
			for _, value := range source.GetPlanAssignmentRequests() {
				values = append(values, value)
			}
		case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPlanAssignmentRequestsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetPlanAssignmentRequestsResponse
func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) GetSingle(source *BatchGetPlanAssignmentRequestsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		res := source.GetPlanAssignmentRequests()
		return res, res != nil
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPlanAssignmentRequestsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return ([]*plan_assignment_request.PlanAssignmentRequest)(nil)
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing:
		return ([]*plan_assignment_request.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) ClearValue(item *BatchGetPlanAssignmentRequestsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
			item.PlanAssignmentRequests = nil
		case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPlanAssignmentRequestsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetPlanAssignmentRequestsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathValue{BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.([]*plan_assignment_request.PlanAssignmentRequest)}
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing:
		return &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathValue{BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.([]*plan_assignment_request.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPlanAssignmentRequestsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, values: values.([][]*plan_assignment_request.PlanAssignmentRequest)}
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing:
		return &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, values: values.([][]*plan_assignment_request.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPlanAssignmentRequestsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue{BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequest)}
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing:
		return &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue{BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetPlanAssignmentRequestsResponse_FieldSubPath struct {
	selector BatchGetPlanAssignmentRequestsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetPlanAssignmentRequestsResponse_FieldPath = (*BatchGetPlanAssignmentRequestsResponse_FieldSubPath)(nil)

func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) Selector() BatchGetPlanAssignmentRequestsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) AsPlanAssignmentRequestsSubPath() (plan_assignment_request.PlanAssignmentRequest_FieldPath, bool) {
	res, ok := fps.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetPlanAssignmentRequestsResponse
func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) Get(source *BatchGetPlanAssignmentRequestsResponse) (values []interface{}) {
	if asPlanAssignmentRequestFieldPath, ok := fps.AsPlanAssignmentRequestsSubPath(); ok {
		for _, item := range source.GetPlanAssignmentRequests() {
			values = append(values, asPlanAssignmentRequestFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetPlanAssignmentRequestsResponse))
}

// GetSingle returns value of selected field from source BatchGetPlanAssignmentRequestsResponse
func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) GetSingle(source *BatchGetPlanAssignmentRequestsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		if len(source.GetPlanAssignmentRequests()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPlanAssignmentRequests()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetPlanAssignmentRequestsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) ClearValue(item *BatchGetPlanAssignmentRequestsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
			for _, subItem := range item.PlanAssignmentRequests {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetPlanAssignmentRequestsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetPlanAssignmentRequestsResponse_FieldPathValue {
	return &BatchGetPlanAssignmentRequestsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetPlanAssignmentRequestsResponse_FieldPathArrayOfValues {
	return &BatchGetPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetPlanAssignmentRequestsResponse_FieldPathArrayItemValue {
	return &BatchGetPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetPlanAssignmentRequestsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetPlanAssignmentRequestsResponse_FieldPathValue allows storing values for BatchGetPlanAssignmentRequestsResponse fields according to their type
type BatchGetPlanAssignmentRequestsResponse_FieldPathValue interface {
	BatchGetPlanAssignmentRequestsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPlanAssignmentRequestsResponse)
	CompareWith(*BatchGetPlanAssignmentRequestsResponse) (cmp int, comparable bool)
}

func ParseBatchGetPlanAssignmentRequestsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetPlanAssignmentRequestsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetPlanAssignmentRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlanAssignmentRequestsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPlanAssignmentRequestsResponse_FieldPathValue), nil
}

func MustParseBatchGetPlanAssignmentRequestsResponse_FieldPathValue(pathStr, valueStr string) BatchGetPlanAssignmentRequestsResponse_FieldPathValue {
	fpv, err := ParseBatchGetPlanAssignmentRequestsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathValue struct {
	BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPlanAssignmentRequestsResponse_FieldPathValue = (*BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPlanAssignmentRequestsResponse' as interface{}
func (fpv *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathValue) AsPlanAssignmentRequestsValue() ([]*plan_assignment_request.PlanAssignmentRequest, bool) {
	res, ok := fpv.value.([]*plan_assignment_request.PlanAssignmentRequest)
	return res, ok
}
func (fpv *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathValue) AsMissingValue() ([]*plan_assignment_request.Reference, bool) {
	res, ok := fpv.value.([]*plan_assignment_request.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPlanAssignmentRequestsResponse
func (fpv *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathValue) SetTo(target **BatchGetPlanAssignmentRequestsResponse) {
	if *target == nil {
		*target = new(BatchGetPlanAssignmentRequestsResponse)
	}
	switch fpv.selector {
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		(*target).PlanAssignmentRequests = fpv.value.([]*plan_assignment_request.PlanAssignmentRequest)
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*plan_assignment_request.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPlanAssignmentRequestsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetPlanAssignmentRequestsResponse'.
func (fpv *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetPlanAssignmentRequestsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return 0, false
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPlanAssignmentRequestsResponse))
}

type BatchGetPlanAssignmentRequestsResponse_FieldSubPathValue struct {
	BatchGetPlanAssignmentRequestsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetPlanAssignmentRequestsResponse_FieldPathValue = (*BatchGetPlanAssignmentRequestsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetPlanAssignmentRequestsResponse_FieldSubPathValue) AsPlanAssignmentRequestsPathValue() (plan_assignment_request.PlanAssignmentRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetPlanAssignmentRequestsResponse_FieldSubPathValue) SetTo(target **BatchGetPlanAssignmentRequestsResponse) {
	if *target == nil {
		*target = new(BatchGetPlanAssignmentRequestsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPlanAssignmentRequestsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPlanAssignmentRequestsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetPlanAssignmentRequestsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetPlanAssignmentRequestsResponse_FieldSubPathValue) CompareWith(source *BatchGetPlanAssignmentRequestsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPlanAssignmentRequestsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetPlanAssignmentRequestsResponse))
}

// BatchGetPlanAssignmentRequestsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPlanAssignmentRequestsResponse according to their type
// Present only for array (repeated) types.
type BatchGetPlanAssignmentRequestsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPlanAssignmentRequestsResponse_FieldPath
	ContainsValue(*BatchGetPlanAssignmentRequestsResponse) bool
}

// ParseBatchGetPlanAssignmentRequestsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPlanAssignmentRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPlanAssignmentRequestsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPlanAssignmentRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlanAssignmentRequestsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPlanAssignmentRequestsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPlanAssignmentRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPlanAssignmentRequestsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPlanAssignmentRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPlanAssignmentRequestsResponse_FieldPathArrayItemValue = (*BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPlanAssignmentRequestsResponse as interface{}
func (fpaiv *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) AsPlanAssignmentRequestsItemValue() (*plan_assignment_request.PlanAssignmentRequest, bool) {
	res, ok := fpaiv.value.(*plan_assignment_request.PlanAssignmentRequest)
	return res, ok
}
func (fpaiv *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*plan_assignment_request.Reference, bool) {
	res, ok := fpaiv.value.(*plan_assignment_request.Reference)
	return res, ok
}

func (fpaiv *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPlanAssignmentRequestsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPlanAssignmentRequestsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPlanAssignmentRequestsResponse'
func (fpaiv *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPlanAssignmentRequestsResponse) bool {
	slice := fpaiv.BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue struct {
	BatchGetPlanAssignmentRequestsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue) AsPlanAssignmentRequestsPathItemValue() (plan_assignment_request.PlanAssignmentRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPlanAssignmentRequestsResponse'
func (fpaivs *BatchGetPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetPlanAssignmentRequestsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentRequestsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetPlanAssignmentRequestsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetPlanAssignmentRequestsResponse fields according to their type
type BatchGetPlanAssignmentRequestsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPlanAssignmentRequestsResponse_FieldPath
}

func ParseBatchGetPlanAssignmentRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPlanAssignmentRequestsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPlanAssignmentRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlanAssignmentRequestsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPlanAssignmentRequestsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPlanAssignmentRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPlanAssignmentRequestsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPlanAssignmentRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetPlanAssignmentRequestsResponse_FieldPathArrayOfValues = (*BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		for _, v := range fpaov.values.([][]*plan_assignment_request.PlanAssignmentRequest) {
			values = append(values, v)
		}
	case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*plan_assignment_request.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) AsPlanAssignmentRequestsArrayOfValues() ([][]*plan_assignment_request.PlanAssignmentRequest, bool) {
	res, ok := fpaov.values.([][]*plan_assignment_request.PlanAssignmentRequest)
	return res, ok
}
func (fpaov *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*plan_assignment_request.Reference, bool) {
	res, ok := fpaov.values.([][]*plan_assignment_request.Reference)
	return res, ok
}

type BatchGetPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues struct {
	BatchGetPlanAssignmentRequestsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetPlanAssignmentRequestsResponse_FieldPathArrayOfValues = (*BatchGetPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues) AsPlanAssignmentRequestsPathArrayOfValues() (plan_assignment_request.PlanAssignmentRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan_assignment_request.PlanAssignmentRequest_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPlanAssignmentRequestsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPlanAssignmentRequestsRequest_FieldPathSelector
	Get(source *ListPlanAssignmentRequestsRequest) []interface{}
	GetSingle(source *ListPlanAssignmentRequestsRequest) (interface{}, bool)
	ClearValue(item *ListPlanAssignmentRequestsRequest)

	// Those methods build corresponding ListPlanAssignmentRequestsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPlanAssignmentRequestsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPlanAssignmentRequestsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPlanAssignmentRequestsRequest_FieldPathArrayItemValue
}

type ListPlanAssignmentRequestsRequest_FieldPathSelector int32

const (
	ListPlanAssignmentRequestsRequest_FieldPathSelectorParent    ListPlanAssignmentRequestsRequest_FieldPathSelector = 0
	ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize  ListPlanAssignmentRequestsRequest_FieldPathSelector = 1
	ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken ListPlanAssignmentRequestsRequest_FieldPathSelector = 2
	ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy   ListPlanAssignmentRequestsRequest_FieldPathSelector = 3
	ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter    ListPlanAssignmentRequestsRequest_FieldPathSelector = 4
	ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask ListPlanAssignmentRequestsRequest_FieldPathSelector = 5
	ListPlanAssignmentRequestsRequest_FieldPathSelectorView      ListPlanAssignmentRequestsRequest_FieldPathSelector = 6
)

func (s ListPlanAssignmentRequestsRequest_FieldPathSelector) String() string {
	switch s {
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		return "parent"
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsRequest: %d", s))
	}
}

func BuildListPlanAssignmentRequestsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListPlanAssignmentRequestsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPlanAssignmentRequestsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPlanAssignmentRequestsRequest", fp)
}

func ParseListPlanAssignmentRequestsRequest_FieldPath(rawField string) (ListPlanAssignmentRequestsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPlanAssignmentRequestsRequest_FieldPath(fp)
}

func MustParseListPlanAssignmentRequestsRequest_FieldPath(rawField string) ListPlanAssignmentRequestsRequest_FieldPath {
	fp, err := ParseListPlanAssignmentRequestsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPlanAssignmentRequestsRequest_FieldTerminalPath struct {
	selector ListPlanAssignmentRequestsRequest_FieldPathSelector
}

var _ ListPlanAssignmentRequestsRequest_FieldPath = (*ListPlanAssignmentRequestsRequest_FieldTerminalPath)(nil)

func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) Selector() ListPlanAssignmentRequestsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPlanAssignmentRequestsRequest
func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) Get(source *ListPlanAssignmentRequestsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPlanAssignmentRequestsRequest))
}

// GetSingle returns value pointed by specific field of from source ListPlanAssignmentRequestsRequest
func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) GetSingle(source *ListPlanAssignmentRequestsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsRequest: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPlanAssignmentRequestsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		return (*plan_assignment_request.ParentName)(nil)
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		return (*plan_assignment_request.PagerCursor)(nil)
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		return (*plan_assignment_request.OrderBy)(nil)
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		return (*plan_assignment_request.Filter)(nil)
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return (*plan_assignment_request.PlanAssignmentRequest_FieldMask)(nil)
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsRequest: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) ClearValue(item *ListPlanAssignmentRequestsRequest) {
	if item != nil {
		switch fp.selector {
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListPlanAssignmentRequestsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPlanAssignmentRequestsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPlanAssignmentRequestsRequest_FieldPathSelectorParent ||
		fp.selector == ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter ||
		fp.selector == ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListPlanAssignmentRequestsRequest_FieldPathSelectorView
}

func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) WithIValue(value interface{}) ListPlanAssignmentRequestsRequest_FieldPathValue {
	switch fp.selector {
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathValue{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.ParentName)}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathValue{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathValue{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PagerCursor)}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathValue{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.OrderBy)}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathValue{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.Filter)}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathValue{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathValue{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsRequest: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPlanAssignmentRequestsRequest_FieldPathArrayOfValues {
	fpaov := &ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.ParentName)}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PagerCursor)}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.OrderBy)}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.Filter)}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return &ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPlanAssignmentRequestsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsRequest: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentRequestsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListPlanAssignmentRequestsRequest_FieldPathValue allows storing values for ListPlanAssignmentRequestsRequest fields according to their type
type ListPlanAssignmentRequestsRequest_FieldPathValue interface {
	ListPlanAssignmentRequestsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPlanAssignmentRequestsRequest)
	CompareWith(*ListPlanAssignmentRequestsRequest) (cmp int, comparable bool)
}

func ParseListPlanAssignmentRequestsRequest_FieldPathValue(pathStr, valueStr string) (ListPlanAssignmentRequestsRequest_FieldPathValue, error) {
	fp, err := ParseListPlanAssignmentRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlanAssignmentRequestsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPlanAssignmentRequestsRequest_FieldPathValue), nil
}

func MustParseListPlanAssignmentRequestsRequest_FieldPathValue(pathStr, valueStr string) ListPlanAssignmentRequestsRequest_FieldPathValue {
	fpv, err := ParseListPlanAssignmentRequestsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPlanAssignmentRequestsRequest_FieldTerminalPathValue struct {
	ListPlanAssignmentRequestsRequest_FieldTerminalPath
	value interface{}
}

var _ ListPlanAssignmentRequestsRequest_FieldPathValue = (*ListPlanAssignmentRequestsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPlanAssignmentRequestsRequest' as interface{}
func (fpv *ListPlanAssignmentRequestsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsParentValue() (*plan_assignment_request.ParentName, bool) {
	res, ok := fpv.value.(*plan_assignment_request.ParentName)
	return res, ok
}
func (fpv *ListPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsPageTokenValue() (*plan_assignment_request.PagerCursor, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PagerCursor)
	return res, ok
}
func (fpv *ListPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsOrderByValue() (*plan_assignment_request.OrderBy, bool) {
	res, ok := fpv.value.(*plan_assignment_request.OrderBy)
	return res, ok
}
func (fpv *ListPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsFilterValue() (*plan_assignment_request.Filter, bool) {
	res, ok := fpv.value.(*plan_assignment_request.Filter)
	return res, ok
}
func (fpv *ListPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}
func (fpv *ListPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListPlanAssignmentRequestsRequest
func (fpv *ListPlanAssignmentRequestsRequest_FieldTerminalPathValue) SetTo(target **ListPlanAssignmentRequestsRequest) {
	if *target == nil {
		*target = new(ListPlanAssignmentRequestsRequest)
	}
	switch fpv.selector {
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*plan_assignment_request.ParentName)
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*plan_assignment_request.PagerCursor)
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*plan_assignment_request.OrderBy)
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*plan_assignment_request.Filter)
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsRequest: %d", fpv.selector))
	}
}

func (fpv *ListPlanAssignmentRequestsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPlanAssignmentRequestsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPlanAssignmentRequestsRequest_FieldTerminalPathValue' with the value under path in 'ListPlanAssignmentRequestsRequest'.
func (fpv *ListPlanAssignmentRequestsRequest_FieldTerminalPathValue) CompareWith(source *ListPlanAssignmentRequestsRequest) (int, bool) {
	switch fpv.selector {
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*plan_assignment_request.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsRequest: %d", fpv.selector))
	}
}

func (fpv *ListPlanAssignmentRequestsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPlanAssignmentRequestsRequest))
}

// ListPlanAssignmentRequestsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPlanAssignmentRequestsRequest according to their type
// Present only for array (repeated) types.
type ListPlanAssignmentRequestsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPlanAssignmentRequestsRequest_FieldPath
	ContainsValue(*ListPlanAssignmentRequestsRequest) bool
}

// ParseListPlanAssignmentRequestsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPlanAssignmentRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListPlanAssignmentRequestsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListPlanAssignmentRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlanAssignmentRequestsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPlanAssignmentRequestsRequest_FieldPathArrayItemValue), nil
}

func MustParseListPlanAssignmentRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListPlanAssignmentRequestsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListPlanAssignmentRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue struct {
	ListPlanAssignmentRequestsRequest_FieldTerminalPath
	value interface{}
}

var _ ListPlanAssignmentRequestsRequest_FieldPathArrayItemValue = (*ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPlanAssignmentRequestsRequest as interface{}
func (fpaiv *ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListPlanAssignmentRequestsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPlanAssignmentRequestsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPlanAssignmentRequestsRequest'
func (fpaiv *ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPlanAssignmentRequestsRequest) bool {
	slice := fpaiv.ListPlanAssignmentRequestsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListPlanAssignmentRequestsRequest_FieldPathArrayOfValues allows storing slice of values for ListPlanAssignmentRequestsRequest fields according to their type
type ListPlanAssignmentRequestsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPlanAssignmentRequestsRequest_FieldPath
}

func ParseListPlanAssignmentRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPlanAssignmentRequestsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListPlanAssignmentRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlanAssignmentRequestsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPlanAssignmentRequestsRequest_FieldPathArrayOfValues), nil
}

func MustParseListPlanAssignmentRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListPlanAssignmentRequestsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListPlanAssignmentRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues struct {
	ListPlanAssignmentRequestsRequest_FieldTerminalPath
	values interface{}
}

var _ ListPlanAssignmentRequestsRequest_FieldPathArrayOfValues = (*ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*plan_assignment_request.ParentName) {
			values = append(values, v)
		}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*plan_assignment_request.PagerCursor) {
			values = append(values, v)
		}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*plan_assignment_request.OrderBy) {
			values = append(values, v)
		}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*plan_assignment_request.Filter) {
			values = append(values, v)
		}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask) {
			values = append(values, v)
		}
	case ListPlanAssignmentRequestsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*plan_assignment_request.ParentName, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.ParentName)
	return res, ok
}
func (fpaov *ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*plan_assignment_request.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PagerCursor)
	return res, ok
}
func (fpaov *ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*plan_assignment_request.OrderBy, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.OrderBy)
	return res, ok
}
func (fpaov *ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*plan_assignment_request.Filter, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.Filter)
	return res, ok
}
func (fpaov *ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}
func (fpaov *ListPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPlanAssignmentRequestsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPlanAssignmentRequestsResponse_FieldPathSelector
	Get(source *ListPlanAssignmentRequestsResponse) []interface{}
	GetSingle(source *ListPlanAssignmentRequestsResponse) (interface{}, bool)
	ClearValue(item *ListPlanAssignmentRequestsResponse)

	// Those methods build corresponding ListPlanAssignmentRequestsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPlanAssignmentRequestsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPlanAssignmentRequestsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPlanAssignmentRequestsResponse_FieldPathArrayItemValue
}

type ListPlanAssignmentRequestsResponse_FieldPathSelector int32

const (
	ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests ListPlanAssignmentRequestsResponse_FieldPathSelector = 0
	ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken          ListPlanAssignmentRequestsResponse_FieldPathSelector = 1
	ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken          ListPlanAssignmentRequestsResponse_FieldPathSelector = 2
)

func (s ListPlanAssignmentRequestsResponse_FieldPathSelector) String() string {
	switch s {
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return "plan_assignment_requests"
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", s))
	}
}

func BuildListPlanAssignmentRequestsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListPlanAssignmentRequestsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPlanAssignmentRequestsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plan_assignment_requests", "planAssignmentRequests", "plan-assignment-requests":
			return &ListPlanAssignmentRequestsResponse_FieldTerminalPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListPlanAssignmentRequestsResponse_FieldTerminalPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListPlanAssignmentRequestsResponse_FieldTerminalPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "plan_assignment_requests", "planAssignmentRequests", "plan-assignment-requests":
			if subpath, err := plan_assignment_request.BuildPlanAssignmentRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListPlanAssignmentRequestsResponse_FieldSubPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPlanAssignmentRequestsResponse", fp)
}

func ParseListPlanAssignmentRequestsResponse_FieldPath(rawField string) (ListPlanAssignmentRequestsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPlanAssignmentRequestsResponse_FieldPath(fp)
}

func MustParseListPlanAssignmentRequestsResponse_FieldPath(rawField string) ListPlanAssignmentRequestsResponse_FieldPath {
	fp, err := ParseListPlanAssignmentRequestsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPlanAssignmentRequestsResponse_FieldTerminalPath struct {
	selector ListPlanAssignmentRequestsResponse_FieldPathSelector
}

var _ ListPlanAssignmentRequestsResponse_FieldPath = (*ListPlanAssignmentRequestsResponse_FieldTerminalPath)(nil)

func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) Selector() ListPlanAssignmentRequestsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPlanAssignmentRequestsResponse
func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) Get(source *ListPlanAssignmentRequestsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
			for _, value := range source.GetPlanAssignmentRequests() {
				values = append(values, value)
			}
		case ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPlanAssignmentRequestsResponse))
}

// GetSingle returns value pointed by specific field of from source ListPlanAssignmentRequestsResponse
func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) GetSingle(source *ListPlanAssignmentRequestsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		res := source.GetPlanAssignmentRequests()
		return res, res != nil
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPlanAssignmentRequestsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return ([]*plan_assignment_request.PlanAssignmentRequest)(nil)
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken:
		return (*plan_assignment_request.PagerCursor)(nil)
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken:
		return (*plan_assignment_request.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) ClearValue(item *ListPlanAssignmentRequestsResponse) {
	if item != nil {
		switch fp.selector {
		case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
			item.PlanAssignmentRequests = nil
		case ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPlanAssignmentRequestsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) WithIValue(value interface{}) ListPlanAssignmentRequestsResponse_FieldPathValue {
	switch fp.selector {
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return &ListPlanAssignmentRequestsResponse_FieldTerminalPathValue{ListPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.([]*plan_assignment_request.PlanAssignmentRequest)}
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken:
		return &ListPlanAssignmentRequestsResponse_FieldTerminalPathValue{ListPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PagerCursor)}
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken:
		return &ListPlanAssignmentRequestsResponse_FieldTerminalPathValue{ListPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPlanAssignmentRequestsResponse_FieldPathArrayOfValues {
	fpaov := &ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{ListPlanAssignmentRequestsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return &ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{ListPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, values: values.([][]*plan_assignment_request.PlanAssignmentRequest)}
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken:
		return &ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{ListPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PagerCursor)}
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken:
		return &ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{ListPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPlanAssignmentRequestsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return &ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue{ListPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequest)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentRequestsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListPlanAssignmentRequestsResponse_FieldSubPath struct {
	selector ListPlanAssignmentRequestsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListPlanAssignmentRequestsResponse_FieldPath = (*ListPlanAssignmentRequestsResponse_FieldSubPath)(nil)

func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) Selector() ListPlanAssignmentRequestsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) AsPlanAssignmentRequestsSubPath() (plan_assignment_request.PlanAssignmentRequest_FieldPath, bool) {
	res, ok := fps.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListPlanAssignmentRequestsResponse
func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) Get(source *ListPlanAssignmentRequestsResponse) (values []interface{}) {
	if asPlanAssignmentRequestFieldPath, ok := fps.AsPlanAssignmentRequestsSubPath(); ok {
		for _, item := range source.GetPlanAssignmentRequests() {
			values = append(values, asPlanAssignmentRequestFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListPlanAssignmentRequestsResponse))
}

// GetSingle returns value of selected field from source ListPlanAssignmentRequestsResponse
func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) GetSingle(source *ListPlanAssignmentRequestsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		if len(source.GetPlanAssignmentRequests()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPlanAssignmentRequests()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fps.selector))
	}
}

func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListPlanAssignmentRequestsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) ClearValue(item *ListPlanAssignmentRequestsResponse) {
	if item != nil {
		switch fps.selector {
		case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
			for _, subItem := range item.PlanAssignmentRequests {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListPlanAssignmentRequestsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListPlanAssignmentRequestsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) WithIValue(value interface{}) ListPlanAssignmentRequestsResponse_FieldPathValue {
	return &ListPlanAssignmentRequestsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListPlanAssignmentRequestsResponse_FieldPathArrayOfValues {
	return &ListPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListPlanAssignmentRequestsResponse_FieldPathArrayItemValue {
	return &ListPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListPlanAssignmentRequestsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListPlanAssignmentRequestsResponse_FieldPathValue allows storing values for ListPlanAssignmentRequestsResponse fields according to their type
type ListPlanAssignmentRequestsResponse_FieldPathValue interface {
	ListPlanAssignmentRequestsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPlanAssignmentRequestsResponse)
	CompareWith(*ListPlanAssignmentRequestsResponse) (cmp int, comparable bool)
}

func ParseListPlanAssignmentRequestsResponse_FieldPathValue(pathStr, valueStr string) (ListPlanAssignmentRequestsResponse_FieldPathValue, error) {
	fp, err := ParseListPlanAssignmentRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlanAssignmentRequestsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPlanAssignmentRequestsResponse_FieldPathValue), nil
}

func MustParseListPlanAssignmentRequestsResponse_FieldPathValue(pathStr, valueStr string) ListPlanAssignmentRequestsResponse_FieldPathValue {
	fpv, err := ParseListPlanAssignmentRequestsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPlanAssignmentRequestsResponse_FieldTerminalPathValue struct {
	ListPlanAssignmentRequestsResponse_FieldTerminalPath
	value interface{}
}

var _ ListPlanAssignmentRequestsResponse_FieldPathValue = (*ListPlanAssignmentRequestsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPlanAssignmentRequestsResponse' as interface{}
func (fpv *ListPlanAssignmentRequestsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPlanAssignmentRequestsResponse_FieldTerminalPathValue) AsPlanAssignmentRequestsValue() ([]*plan_assignment_request.PlanAssignmentRequest, bool) {
	res, ok := fpv.value.([]*plan_assignment_request.PlanAssignmentRequest)
	return res, ok
}
func (fpv *ListPlanAssignmentRequestsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*plan_assignment_request.PagerCursor, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PagerCursor)
	return res, ok
}
func (fpv *ListPlanAssignmentRequestsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*plan_assignment_request.PagerCursor, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListPlanAssignmentRequestsResponse
func (fpv *ListPlanAssignmentRequestsResponse_FieldTerminalPathValue) SetTo(target **ListPlanAssignmentRequestsResponse) {
	if *target == nil {
		*target = new(ListPlanAssignmentRequestsResponse)
	}
	switch fpv.selector {
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		(*target).PlanAssignmentRequests = fpv.value.([]*plan_assignment_request.PlanAssignmentRequest)
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*plan_assignment_request.PagerCursor)
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*plan_assignment_request.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fpv.selector))
	}
}

func (fpv *ListPlanAssignmentRequestsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPlanAssignmentRequestsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPlanAssignmentRequestsResponse_FieldTerminalPathValue' with the value under path in 'ListPlanAssignmentRequestsResponse'.
func (fpv *ListPlanAssignmentRequestsResponse_FieldTerminalPathValue) CompareWith(source *ListPlanAssignmentRequestsResponse) (int, bool) {
	switch fpv.selector {
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return 0, false
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fpv.selector))
	}
}

func (fpv *ListPlanAssignmentRequestsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPlanAssignmentRequestsResponse))
}

type ListPlanAssignmentRequestsResponse_FieldSubPathValue struct {
	ListPlanAssignmentRequestsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListPlanAssignmentRequestsResponse_FieldPathValue = (*ListPlanAssignmentRequestsResponse_FieldSubPathValue)(nil)

func (fpvs *ListPlanAssignmentRequestsResponse_FieldSubPathValue) AsPlanAssignmentRequestsPathValue() (plan_assignment_request.PlanAssignmentRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathValue)
	return res, ok
}

func (fpvs *ListPlanAssignmentRequestsResponse_FieldSubPathValue) SetTo(target **ListPlanAssignmentRequestsResponse) {
	if *target == nil {
		*target = new(ListPlanAssignmentRequestsResponse)
	}
	switch fpvs.Selector() {
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPlanAssignmentRequestsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPlanAssignmentRequestsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListPlanAssignmentRequestsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListPlanAssignmentRequestsResponse_FieldSubPathValue) CompareWith(source *ListPlanAssignmentRequestsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPlanAssignmentRequestsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListPlanAssignmentRequestsResponse))
}

// ListPlanAssignmentRequestsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPlanAssignmentRequestsResponse according to their type
// Present only for array (repeated) types.
type ListPlanAssignmentRequestsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPlanAssignmentRequestsResponse_FieldPath
	ContainsValue(*ListPlanAssignmentRequestsResponse) bool
}

// ParseListPlanAssignmentRequestsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPlanAssignmentRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListPlanAssignmentRequestsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListPlanAssignmentRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlanAssignmentRequestsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPlanAssignmentRequestsResponse_FieldPathArrayItemValue), nil
}

func MustParseListPlanAssignmentRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListPlanAssignmentRequestsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListPlanAssignmentRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue struct {
	ListPlanAssignmentRequestsResponse_FieldTerminalPath
	value interface{}
}

var _ ListPlanAssignmentRequestsResponse_FieldPathArrayItemValue = (*ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPlanAssignmentRequestsResponse as interface{}
func (fpaiv *ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) AsPlanAssignmentRequestsItemValue() (*plan_assignment_request.PlanAssignmentRequest, bool) {
	res, ok := fpaiv.value.(*plan_assignment_request.PlanAssignmentRequest)
	return res, ok
}

func (fpaiv *ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListPlanAssignmentRequestsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPlanAssignmentRequestsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPlanAssignmentRequestsResponse'
func (fpaiv *ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPlanAssignmentRequestsResponse) bool {
	slice := fpaiv.ListPlanAssignmentRequestsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue struct {
	ListPlanAssignmentRequestsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue) AsPlanAssignmentRequestsPathItemValue() (plan_assignment_request.PlanAssignmentRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPlanAssignmentRequestsResponse'
func (fpaivs *ListPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListPlanAssignmentRequestsResponse) bool {
	switch fpaivs.Selector() {
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentRequestsResponse: %d", fpaivs.Selector()))
	}
}

// ListPlanAssignmentRequestsResponse_FieldPathArrayOfValues allows storing slice of values for ListPlanAssignmentRequestsResponse fields according to their type
type ListPlanAssignmentRequestsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPlanAssignmentRequestsResponse_FieldPath
}

func ParseListPlanAssignmentRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPlanAssignmentRequestsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListPlanAssignmentRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlanAssignmentRequestsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPlanAssignmentRequestsResponse_FieldPathArrayOfValues), nil
}

func MustParseListPlanAssignmentRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListPlanAssignmentRequestsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListPlanAssignmentRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues struct {
	ListPlanAssignmentRequestsResponse_FieldTerminalPath
	values interface{}
}

var _ ListPlanAssignmentRequestsResponse_FieldPathArrayOfValues = (*ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
		for _, v := range fpaov.values.([][]*plan_assignment_request.PlanAssignmentRequest) {
			values = append(values, v)
		}
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*plan_assignment_request.PagerCursor) {
			values = append(values, v)
		}
	case ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*plan_assignment_request.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) AsPlanAssignmentRequestsArrayOfValues() ([][]*plan_assignment_request.PlanAssignmentRequest, bool) {
	res, ok := fpaov.values.([][]*plan_assignment_request.PlanAssignmentRequest)
	return res, ok
}
func (fpaov *ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*plan_assignment_request.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PagerCursor)
	return res, ok
}
func (fpaov *ListPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*plan_assignment_request.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PagerCursor)
	return res, ok
}

type ListPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues struct {
	ListPlanAssignmentRequestsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListPlanAssignmentRequestsResponse_FieldPathArrayOfValues = (*ListPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues) AsPlanAssignmentRequestsPathArrayOfValues() (plan_assignment_request.PlanAssignmentRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan_assignment_request.PlanAssignmentRequest_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlanAssignmentRequestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlanAssignmentRequestRequest_FieldPathSelector
	Get(source *WatchPlanAssignmentRequestRequest) []interface{}
	GetSingle(source *WatchPlanAssignmentRequestRequest) (interface{}, bool)
	ClearValue(item *WatchPlanAssignmentRequestRequest)

	// Those methods build corresponding WatchPlanAssignmentRequestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlanAssignmentRequestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlanAssignmentRequestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlanAssignmentRequestRequest_FieldPathArrayItemValue
}

type WatchPlanAssignmentRequestRequest_FieldPathSelector int32

const (
	WatchPlanAssignmentRequestRequest_FieldPathSelectorName      WatchPlanAssignmentRequestRequest_FieldPathSelector = 0
	WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask WatchPlanAssignmentRequestRequest_FieldPathSelector = 1
	WatchPlanAssignmentRequestRequest_FieldPathSelectorView      WatchPlanAssignmentRequestRequest_FieldPathSelector = 2
)

func (s WatchPlanAssignmentRequestRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorName:
		return "name"
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestRequest: %d", s))
	}
}

func BuildWatchPlanAssignmentRequestRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPlanAssignmentRequestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlanAssignmentRequestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchPlanAssignmentRequestRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPlanAssignmentRequestRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPlanAssignmentRequestRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlanAssignmentRequestRequest", fp)
}

func ParseWatchPlanAssignmentRequestRequest_FieldPath(rawField string) (WatchPlanAssignmentRequestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlanAssignmentRequestRequest_FieldPath(fp)
}

func MustParseWatchPlanAssignmentRequestRequest_FieldPath(rawField string) WatchPlanAssignmentRequestRequest_FieldPath {
	fp, err := ParseWatchPlanAssignmentRequestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlanAssignmentRequestRequest_FieldTerminalPath struct {
	selector WatchPlanAssignmentRequestRequest_FieldPathSelector
}

var _ WatchPlanAssignmentRequestRequest_FieldPath = (*WatchPlanAssignmentRequestRequest_FieldTerminalPath)(nil)

func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) Selector() WatchPlanAssignmentRequestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlanAssignmentRequestRequest
func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) Get(source *WatchPlanAssignmentRequestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlanAssignmentRequestRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPlanAssignmentRequestRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlanAssignmentRequestRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPlanAssignmentRequestRequest
func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) GetSingle(source *WatchPlanAssignmentRequestRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlanAssignmentRequestRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorName:
		return (*plan_assignment_request.Reference)(nil)
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		return (*plan_assignment_request.PlanAssignmentRequest_FieldMask)(nil)
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) ClearValue(item *WatchPlanAssignmentRequestRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPlanAssignmentRequestRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPlanAssignmentRequestRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlanAssignmentRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlanAssignmentRequestRequest_FieldPathSelectorName ||
		fp.selector == WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPlanAssignmentRequestRequest_FieldPathSelectorView
}

func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPlanAssignmentRequestRequest_FieldPathValue {
	switch fp.selector {
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorName:
		return &WatchPlanAssignmentRequestRequest_FieldTerminalPathValue{WatchPlanAssignmentRequestRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.Reference)}
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		return &WatchPlanAssignmentRequestRequest_FieldTerminalPathValue{WatchPlanAssignmentRequestRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorView:
		return &WatchPlanAssignmentRequestRequest_FieldTerminalPathValue{WatchPlanAssignmentRequestRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlanAssignmentRequestRequest_FieldPathArrayOfValues {
	fpaov := &WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorName:
		return &WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.Reference)}
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		return &WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorView:
		return &WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlanAssignmentRequestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPlanAssignmentRequestRequest_FieldPathValue allows storing values for WatchPlanAssignmentRequestRequest fields according to their type
type WatchPlanAssignmentRequestRequest_FieldPathValue interface {
	WatchPlanAssignmentRequestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlanAssignmentRequestRequest)
	CompareWith(*WatchPlanAssignmentRequestRequest) (cmp int, comparable bool)
}

func ParseWatchPlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr string) (WatchPlanAssignmentRequestRequest_FieldPathValue, error) {
	fp, err := ParseWatchPlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlanAssignmentRequestRequest_FieldPathValue), nil
}

func MustParseWatchPlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr string) WatchPlanAssignmentRequestRequest_FieldPathValue {
	fpv, err := ParseWatchPlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlanAssignmentRequestRequest_FieldTerminalPathValue struct {
	WatchPlanAssignmentRequestRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentRequestRequest_FieldPathValue = (*WatchPlanAssignmentRequestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPlanAssignmentRequestRequest' as interface{}
func (fpv *WatchPlanAssignmentRequestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlanAssignmentRequestRequest_FieldTerminalPathValue) AsNameValue() (*plan_assignment_request.Reference, bool) {
	res, ok := fpv.value.(*plan_assignment_request.Reference)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchPlanAssignmentRequestRequest
func (fpv *WatchPlanAssignmentRequestRequest_FieldTerminalPathValue) SetTo(target **WatchPlanAssignmentRequestRequest) {
	if *target == nil {
		*target = new(WatchPlanAssignmentRequestRequest)
	}
	switch fpv.selector {
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*plan_assignment_request.Reference)
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentRequestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanAssignmentRequestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlanAssignmentRequestRequest_FieldTerminalPathValue' with the value under path in 'WatchPlanAssignmentRequestRequest'.
func (fpv *WatchPlanAssignmentRequestRequest_FieldTerminalPathValue) CompareWith(source *WatchPlanAssignmentRequestRequest) (int, bool) {
	switch fpv.selector {
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*plan_assignment_request.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentRequestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlanAssignmentRequestRequest))
}

// WatchPlanAssignmentRequestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPlanAssignmentRequestRequest according to their type
// Present only for array (repeated) types.
type WatchPlanAssignmentRequestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlanAssignmentRequestRequest_FieldPath
	ContainsValue(*WatchPlanAssignmentRequestRequest) bool
}

// ParseWatchPlanAssignmentRequestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlanAssignmentRequestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlanAssignmentRequestRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlanAssignmentRequestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue struct {
	WatchPlanAssignmentRequestRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentRequestRequest_FieldPathArrayItemValue = (*WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlanAssignmentRequestRequest as interface{}
func (fpaiv *WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlanAssignmentRequestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlanAssignmentRequestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlanAssignmentRequestRequest'
func (fpaiv *WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlanAssignmentRequestRequest) bool {
	slice := fpaiv.WatchPlanAssignmentRequestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPlanAssignmentRequestRequest_FieldPathArrayOfValues allows storing slice of values for WatchPlanAssignmentRequestRequest fields according to their type
type WatchPlanAssignmentRequestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlanAssignmentRequestRequest_FieldPath
}

func ParseWatchPlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlanAssignmentRequestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlanAssignmentRequestRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlanAssignmentRequestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues struct {
	WatchPlanAssignmentRequestRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPlanAssignmentRequestRequest_FieldPathArrayOfValues = (*WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*plan_assignment_request.Reference) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*plan_assignment_request.Reference, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.Reference)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlanAssignmentRequestResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlanAssignmentRequestResponse_FieldPathSelector
	Get(source *WatchPlanAssignmentRequestResponse) []interface{}
	GetSingle(source *WatchPlanAssignmentRequestResponse) (interface{}, bool)
	ClearValue(item *WatchPlanAssignmentRequestResponse)

	// Those methods build corresponding WatchPlanAssignmentRequestResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlanAssignmentRequestResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlanAssignmentRequestResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlanAssignmentRequestResponse_FieldPathArrayItemValue
}

type WatchPlanAssignmentRequestResponse_FieldPathSelector int32

const (
	WatchPlanAssignmentRequestResponse_FieldPathSelectorChange WatchPlanAssignmentRequestResponse_FieldPathSelector = 0
)

func (s WatchPlanAssignmentRequestResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPlanAssignmentRequestResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestResponse: %d", s))
	}
}

func BuildWatchPlanAssignmentRequestResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPlanAssignmentRequestResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlanAssignmentRequestResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchPlanAssignmentRequestResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlanAssignmentRequestResponse", fp)
}

func ParseWatchPlanAssignmentRequestResponse_FieldPath(rawField string) (WatchPlanAssignmentRequestResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlanAssignmentRequestResponse_FieldPath(fp)
}

func MustParseWatchPlanAssignmentRequestResponse_FieldPath(rawField string) WatchPlanAssignmentRequestResponse_FieldPath {
	fp, err := ParseWatchPlanAssignmentRequestResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlanAssignmentRequestResponse_FieldTerminalPath struct {
	selector WatchPlanAssignmentRequestResponse_FieldPathSelector
}

var _ WatchPlanAssignmentRequestResponse_FieldPath = (*WatchPlanAssignmentRequestResponse_FieldTerminalPath)(nil)

func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) Selector() WatchPlanAssignmentRequestResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlanAssignmentRequestResponse
func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) Get(source *WatchPlanAssignmentRequestResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlanAssignmentRequestResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlanAssignmentRequestResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPlanAssignmentRequestResponse
func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) GetSingle(source *WatchPlanAssignmentRequestResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPlanAssignmentRequestResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlanAssignmentRequestResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlanAssignmentRequestResponse_FieldPathSelectorChange:
		return (*plan_assignment_request.PlanAssignmentRequestChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) ClearValue(item *WatchPlanAssignmentRequestResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPlanAssignmentRequestResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlanAssignmentRequestResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlanAssignmentRequestResponse_FieldPathSelectorChange
}

func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPlanAssignmentRequestResponse_FieldPathValue {
	switch fp.selector {
	case WatchPlanAssignmentRequestResponse_FieldPathSelectorChange:
		return &WatchPlanAssignmentRequestResponse_FieldTerminalPathValue{WatchPlanAssignmentRequestResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequestChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlanAssignmentRequestResponse_FieldPathArrayOfValues {
	fpaov := &WatchPlanAssignmentRequestResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlanAssignmentRequestResponse_FieldPathSelectorChange:
		return &WatchPlanAssignmentRequestResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestResponse_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PlanAssignmentRequestChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlanAssignmentRequestResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPlanAssignmentRequestResponse_FieldPathValue allows storing values for WatchPlanAssignmentRequestResponse fields according to their type
type WatchPlanAssignmentRequestResponse_FieldPathValue interface {
	WatchPlanAssignmentRequestResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlanAssignmentRequestResponse)
	CompareWith(*WatchPlanAssignmentRequestResponse) (cmp int, comparable bool)
}

func ParseWatchPlanAssignmentRequestResponse_FieldPathValue(pathStr, valueStr string) (WatchPlanAssignmentRequestResponse_FieldPathValue, error) {
	fp, err := ParseWatchPlanAssignmentRequestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequestResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlanAssignmentRequestResponse_FieldPathValue), nil
}

func MustParseWatchPlanAssignmentRequestResponse_FieldPathValue(pathStr, valueStr string) WatchPlanAssignmentRequestResponse_FieldPathValue {
	fpv, err := ParseWatchPlanAssignmentRequestResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlanAssignmentRequestResponse_FieldTerminalPathValue struct {
	WatchPlanAssignmentRequestResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentRequestResponse_FieldPathValue = (*WatchPlanAssignmentRequestResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPlanAssignmentRequestResponse' as interface{}
func (fpv *WatchPlanAssignmentRequestResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlanAssignmentRequestResponse_FieldTerminalPathValue) AsChangeValue() (*plan_assignment_request.PlanAssignmentRequestChange, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PlanAssignmentRequestChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchPlanAssignmentRequestResponse
func (fpv *WatchPlanAssignmentRequestResponse_FieldTerminalPathValue) SetTo(target **WatchPlanAssignmentRequestResponse) {
	if *target == nil {
		*target = new(WatchPlanAssignmentRequestResponse)
	}
	switch fpv.selector {
	case WatchPlanAssignmentRequestResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*plan_assignment_request.PlanAssignmentRequestChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentRequestResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanAssignmentRequestResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlanAssignmentRequestResponse_FieldTerminalPathValue' with the value under path in 'WatchPlanAssignmentRequestResponse'.
func (fpv *WatchPlanAssignmentRequestResponse_FieldTerminalPathValue) CompareWith(source *WatchPlanAssignmentRequestResponse) (int, bool) {
	switch fpv.selector {
	case WatchPlanAssignmentRequestResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentRequestResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlanAssignmentRequestResponse))
}

// WatchPlanAssignmentRequestResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPlanAssignmentRequestResponse according to their type
// Present only for array (repeated) types.
type WatchPlanAssignmentRequestResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlanAssignmentRequestResponse_FieldPath
	ContainsValue(*WatchPlanAssignmentRequestResponse) bool
}

// ParseWatchPlanAssignmentRequestResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlanAssignmentRequestResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlanAssignmentRequestResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlanAssignmentRequestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequestResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlanAssignmentRequestResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPlanAssignmentRequestResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlanAssignmentRequestResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlanAssignmentRequestResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlanAssignmentRequestResponse_FieldTerminalPathArrayItemValue struct {
	WatchPlanAssignmentRequestResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentRequestResponse_FieldPathArrayItemValue = (*WatchPlanAssignmentRequestResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlanAssignmentRequestResponse as interface{}
func (fpaiv *WatchPlanAssignmentRequestResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPlanAssignmentRequestResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlanAssignmentRequestResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlanAssignmentRequestResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlanAssignmentRequestResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlanAssignmentRequestResponse'
func (fpaiv *WatchPlanAssignmentRequestResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlanAssignmentRequestResponse) bool {
	slice := fpaiv.WatchPlanAssignmentRequestResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPlanAssignmentRequestResponse_FieldPathArrayOfValues allows storing slice of values for WatchPlanAssignmentRequestResponse fields according to their type
type WatchPlanAssignmentRequestResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlanAssignmentRequestResponse_FieldPath
}

func ParseWatchPlanAssignmentRequestResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlanAssignmentRequestResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlanAssignmentRequestResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequestResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlanAssignmentRequestResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPlanAssignmentRequestResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlanAssignmentRequestResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlanAssignmentRequestResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlanAssignmentRequestResponse_FieldTerminalPathArrayOfValues struct {
	WatchPlanAssignmentRequestResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPlanAssignmentRequestResponse_FieldPathArrayOfValues = (*WatchPlanAssignmentRequestResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlanAssignmentRequestResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlanAssignmentRequestResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*plan_assignment_request.PlanAssignmentRequestChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlanAssignmentRequestResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*plan_assignment_request.PlanAssignmentRequestChange, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PlanAssignmentRequestChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlanAssignmentRequestsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlanAssignmentRequestsRequest_FieldPathSelector
	Get(source *WatchPlanAssignmentRequestsRequest) []interface{}
	GetSingle(source *WatchPlanAssignmentRequestsRequest) (interface{}, bool)
	ClearValue(item *WatchPlanAssignmentRequestsRequest)

	// Those methods build corresponding WatchPlanAssignmentRequestsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlanAssignmentRequestsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlanAssignmentRequestsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlanAssignmentRequestsRequest_FieldPathArrayItemValue
}

type WatchPlanAssignmentRequestsRequest_FieldPathSelector int32

const (
	WatchPlanAssignmentRequestsRequest_FieldPathSelectorType         WatchPlanAssignmentRequestsRequest_FieldPathSelector = 0
	WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent       WatchPlanAssignmentRequestsRequest_FieldPathSelector = 1
	WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize     WatchPlanAssignmentRequestsRequest_FieldPathSelector = 2
	WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken    WatchPlanAssignmentRequestsRequest_FieldPathSelector = 3
	WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy      WatchPlanAssignmentRequestsRequest_FieldPathSelector = 4
	WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken  WatchPlanAssignmentRequestsRequest_FieldPathSelector = 5
	WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter       WatchPlanAssignmentRequestsRequest_FieldPathSelector = 6
	WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask    WatchPlanAssignmentRequestsRequest_FieldPathSelector = 7
	WatchPlanAssignmentRequestsRequest_FieldPathSelectorView         WatchPlanAssignmentRequestsRequest_FieldPathSelector = 8
	WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize WatchPlanAssignmentRequestsRequest_FieldPathSelector = 9
)

func (s WatchPlanAssignmentRequestsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorType:
		return "type"
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return "view"
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsRequest: %d", s))
	}
}

func BuildWatchPlanAssignmentRequestsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPlanAssignmentRequestsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlanAssignmentRequestsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlanAssignmentRequestsRequest", fp)
}

func ParseWatchPlanAssignmentRequestsRequest_FieldPath(rawField string) (WatchPlanAssignmentRequestsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlanAssignmentRequestsRequest_FieldPath(fp)
}

func MustParseWatchPlanAssignmentRequestsRequest_FieldPath(rawField string) WatchPlanAssignmentRequestsRequest_FieldPath {
	fp, err := ParseWatchPlanAssignmentRequestsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlanAssignmentRequestsRequest_FieldTerminalPath struct {
	selector WatchPlanAssignmentRequestsRequest_FieldPathSelector
}

var _ WatchPlanAssignmentRequestsRequest_FieldPath = (*WatchPlanAssignmentRequestsRequest_FieldTerminalPath)(nil)

func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) Selector() WatchPlanAssignmentRequestsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlanAssignmentRequestsRequest
func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) Get(source *WatchPlanAssignmentRequestsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlanAssignmentRequestsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPlanAssignmentRequestsRequest
func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) GetSingle(source *WatchPlanAssignmentRequestsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlanAssignmentRequestsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		return (*plan_assignment_request.ParentReference)(nil)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		return (*plan_assignment_request.PagerCursor)(nil)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		return (*plan_assignment_request.OrderBy)(nil)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		return (*plan_assignment_request.Filter)(nil)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return (*plan_assignment_request.PlanAssignmentRequest_FieldMask)(nil)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) ClearValue(item *WatchPlanAssignmentRequestsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlanAssignmentRequestsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlanAssignmentRequestsRequest_FieldPathSelectorType ||
		fp.selector == WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent ||
		fp.selector == WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPlanAssignmentRequestsRequest_FieldPathSelectorView ||
		fp.selector == WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPlanAssignmentRequestsRequest_FieldPathValue {
	switch fp.selector {
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorType:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.ParentReference)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PagerCursor)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.OrderBy)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.Filter)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlanAssignmentRequestsRequest_FieldPathArrayOfValues {
	fpaov := &WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorType:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.ParentReference)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PagerCursor)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.OrderBy)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.Filter)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorView:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlanAssignmentRequestsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPlanAssignmentRequestsRequest_FieldPathValue allows storing values for WatchPlanAssignmentRequestsRequest fields according to their type
type WatchPlanAssignmentRequestsRequest_FieldPathValue interface {
	WatchPlanAssignmentRequestsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlanAssignmentRequestsRequest)
	CompareWith(*WatchPlanAssignmentRequestsRequest) (cmp int, comparable bool)
}

func ParseWatchPlanAssignmentRequestsRequest_FieldPathValue(pathStr, valueStr string) (WatchPlanAssignmentRequestsRequest_FieldPathValue, error) {
	fp, err := ParseWatchPlanAssignmentRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequestsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlanAssignmentRequestsRequest_FieldPathValue), nil
}

func MustParseWatchPlanAssignmentRequestsRequest_FieldPathValue(pathStr, valueStr string) WatchPlanAssignmentRequestsRequest_FieldPathValue {
	fpv, err := ParseWatchPlanAssignmentRequestsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue struct {
	WatchPlanAssignmentRequestsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentRequestsRequest_FieldPathValue = (*WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPlanAssignmentRequestsRequest' as interface{}
func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsParentValue() (*plan_assignment_request.ParentReference, bool) {
	res, ok := fpv.value.(*plan_assignment_request.ParentReference)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsPageTokenValue() (*plan_assignment_request.PagerCursor, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PagerCursor)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsOrderByValue() (*plan_assignment_request.OrderBy, bool) {
	res, ok := fpv.value.(*plan_assignment_request.OrderBy)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsFilterValue() (*plan_assignment_request.Filter, bool) {
	res, ok := fpv.value.(*plan_assignment_request.Filter)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchPlanAssignmentRequestsRequest
func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) SetTo(target **WatchPlanAssignmentRequestsRequest) {
	if *target == nil {
		*target = new(WatchPlanAssignmentRequestsRequest)
	}
	switch fpv.selector {
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*plan_assignment_request.ParentReference)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*plan_assignment_request.PagerCursor)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*plan_assignment_request.OrderBy)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*plan_assignment_request.Filter)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanAssignmentRequestsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue' with the value under path in 'WatchPlanAssignmentRequestsRequest'.
func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) CompareWith(source *WatchPlanAssignmentRequestsRequest) (int, bool) {
	switch fpv.selector {
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*plan_assignment_request.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlanAssignmentRequestsRequest))
}

// WatchPlanAssignmentRequestsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPlanAssignmentRequestsRequest according to their type
// Present only for array (repeated) types.
type WatchPlanAssignmentRequestsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlanAssignmentRequestsRequest_FieldPath
	ContainsValue(*WatchPlanAssignmentRequestsRequest) bool
}

// ParseWatchPlanAssignmentRequestsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlanAssignmentRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlanAssignmentRequestsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlanAssignmentRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequestsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlanAssignmentRequestsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPlanAssignmentRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlanAssignmentRequestsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlanAssignmentRequestsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue struct {
	WatchPlanAssignmentRequestsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentRequestsRequest_FieldPathArrayItemValue = (*WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlanAssignmentRequestsRequest as interface{}
func (fpaiv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlanAssignmentRequestsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlanAssignmentRequestsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlanAssignmentRequestsRequest'
func (fpaiv *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlanAssignmentRequestsRequest) bool {
	slice := fpaiv.WatchPlanAssignmentRequestsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPlanAssignmentRequestsRequest_FieldPathArrayOfValues allows storing slice of values for WatchPlanAssignmentRequestsRequest fields according to their type
type WatchPlanAssignmentRequestsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlanAssignmentRequestsRequest_FieldPath
}

func ParseWatchPlanAssignmentRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlanAssignmentRequestsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlanAssignmentRequestsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequestsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlanAssignmentRequestsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPlanAssignmentRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlanAssignmentRequestsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlanAssignmentRequestsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues struct {
	WatchPlanAssignmentRequestsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPlanAssignmentRequestsRequest_FieldPathArrayOfValues = (*WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*plan_assignment_request.ParentReference) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*plan_assignment_request.PagerCursor) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*plan_assignment_request.OrderBy) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*plan_assignment_request.Filter) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*plan_assignment_request.ParentReference, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.ParentReference)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*plan_assignment_request.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PagerCursor)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*plan_assignment_request.OrderBy, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.OrderBy)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*plan_assignment_request.Filter, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.Filter)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlanAssignmentRequestsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlanAssignmentRequestsResponse_FieldPathSelector
	Get(source *WatchPlanAssignmentRequestsResponse) []interface{}
	GetSingle(source *WatchPlanAssignmentRequestsResponse) (interface{}, bool)
	ClearValue(item *WatchPlanAssignmentRequestsResponse)

	// Those methods build corresponding WatchPlanAssignmentRequestsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlanAssignmentRequestsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlanAssignmentRequestsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlanAssignmentRequestsResponse_FieldPathArrayItemValue
}

type WatchPlanAssignmentRequestsResponse_FieldPathSelector int32

const (
	WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges WatchPlanAssignmentRequestsResponse_FieldPathSelector = 0
	WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent                    WatchPlanAssignmentRequestsResponse_FieldPathSelector = 1
	WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange              WatchPlanAssignmentRequestsResponse_FieldPathSelector = 2
	WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken                  WatchPlanAssignmentRequestsResponse_FieldPathSelector = 3
	WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize                 WatchPlanAssignmentRequestsResponse_FieldPathSelector = 4
	WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset                  WatchPlanAssignmentRequestsResponse_FieldPathSelector = 5
	WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset                  WatchPlanAssignmentRequestsResponse_FieldPathSelector = 6
)

func (s WatchPlanAssignmentRequestsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges:
		return "plan_assignment_request_changes"
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", s))
	}
}

func BuildWatchPlanAssignmentRequestsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPlanAssignmentRequestsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlanAssignmentRequestsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plan_assignment_request_changes", "planAssignmentRequestChanges", "plan-assignment-request-changes":
			return &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchPlanAssignmentRequestsResponse_FieldSubPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlanAssignmentRequestsResponse", fp)
}

func ParseWatchPlanAssignmentRequestsResponse_FieldPath(rawField string) (WatchPlanAssignmentRequestsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlanAssignmentRequestsResponse_FieldPath(fp)
}

func MustParseWatchPlanAssignmentRequestsResponse_FieldPath(rawField string) WatchPlanAssignmentRequestsResponse_FieldPath {
	fp, err := ParseWatchPlanAssignmentRequestsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlanAssignmentRequestsResponse_FieldTerminalPath struct {
	selector WatchPlanAssignmentRequestsResponse_FieldPathSelector
}

var _ WatchPlanAssignmentRequestsResponse_FieldPath = (*WatchPlanAssignmentRequestsResponse_FieldTerminalPath)(nil)

func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) Selector() WatchPlanAssignmentRequestsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlanAssignmentRequestsResponse
func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) Get(source *WatchPlanAssignmentRequestsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges:
			for _, value := range source.GetPlanAssignmentRequestChanges() {
				values = append(values, value)
			}
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlanAssignmentRequestsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPlanAssignmentRequestsResponse
func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) GetSingle(source *WatchPlanAssignmentRequestsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges:
		res := source.GetPlanAssignmentRequestChanges()
		return res, res != nil
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlanAssignmentRequestsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges:
		return ([]*plan_assignment_request.PlanAssignmentRequestChange)(nil)
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchPlanAssignmentRequestsResponse_PageTokenChange)(nil)
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) ClearValue(item *WatchPlanAssignmentRequestsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges:
			item.PlanAssignmentRequestChanges = nil
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlanAssignmentRequestsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges ||
		fp.selector == WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPlanAssignmentRequestsResponse_FieldPathValue {
	switch fp.selector {
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.([]*plan_assignment_request.PlanAssignmentRequestChange)}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.(*WatchPlanAssignmentRequestsResponse_PageTokenChange)}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlanAssignmentRequestsResponse_FieldPathArrayOfValues {
	fpaov := &WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, values: values.([][]*plan_assignment_request.PlanAssignmentRequestChange)}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, values: values.([]*WatchPlanAssignmentRequestsResponse_PageTokenChange)}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlanAssignmentRequestsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges:
		return &WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue{WatchPlanAssignmentRequestsResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequestChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchPlanAssignmentRequestsResponse_FieldSubPath struct {
	selector WatchPlanAssignmentRequestsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchPlanAssignmentRequestsResponse_FieldPath = (*WatchPlanAssignmentRequestsResponse_FieldSubPath)(nil)

func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) Selector() WatchPlanAssignmentRequestsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchPlanAssignmentRequestsResponse
func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) Get(source *WatchPlanAssignmentRequestsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchPlanAssignmentRequestsResponse))
}

// GetSingle returns value of selected field from source WatchPlanAssignmentRequestsResponse
func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) GetSingle(source *WatchPlanAssignmentRequestsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fps.selector))
	}
}

func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchPlanAssignmentRequestsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) ClearValue(item *WatchPlanAssignmentRequestsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchPlanAssignmentRequestsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) WithIValue(value interface{}) WatchPlanAssignmentRequestsResponse_FieldPathValue {
	return &WatchPlanAssignmentRequestsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchPlanAssignmentRequestsResponse_FieldPathArrayOfValues {
	return &WatchPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchPlanAssignmentRequestsResponse_FieldPathArrayItemValue {
	return &WatchPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchPlanAssignmentRequestsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchPlanAssignmentRequestsResponse_FieldPathValue allows storing values for WatchPlanAssignmentRequestsResponse fields according to their type
type WatchPlanAssignmentRequestsResponse_FieldPathValue interface {
	WatchPlanAssignmentRequestsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlanAssignmentRequestsResponse)
	CompareWith(*WatchPlanAssignmentRequestsResponse) (cmp int, comparable bool)
}

func ParseWatchPlanAssignmentRequestsResponse_FieldPathValue(pathStr, valueStr string) (WatchPlanAssignmentRequestsResponse_FieldPathValue, error) {
	fp, err := ParseWatchPlanAssignmentRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequestsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlanAssignmentRequestsResponse_FieldPathValue), nil
}

func MustParseWatchPlanAssignmentRequestsResponse_FieldPathValue(pathStr, valueStr string) WatchPlanAssignmentRequestsResponse_FieldPathValue {
	fpv, err := ParseWatchPlanAssignmentRequestsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue struct {
	WatchPlanAssignmentRequestsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentRequestsResponse_FieldPathValue = (*WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPlanAssignmentRequestsResponse' as interface{}
func (fpv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue) AsPlanAssignmentRequestChangesValue() ([]*plan_assignment_request.PlanAssignmentRequestChange, bool) {
	res, ok := fpv.value.([]*plan_assignment_request.PlanAssignmentRequestChange)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchPlanAssignmentRequestsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchPlanAssignmentRequestsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchPlanAssignmentRequestsResponse
func (fpv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue) SetTo(target **WatchPlanAssignmentRequestsResponse) {
	if *target == nil {
		*target = new(WatchPlanAssignmentRequestsResponse)
	}
	switch fpv.selector {
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges:
		(*target).PlanAssignmentRequestChanges = fpv.value.([]*plan_assignment_request.PlanAssignmentRequestChange)
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchPlanAssignmentRequestsResponse_PageTokenChange)
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanAssignmentRequestsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue' with the value under path in 'WatchPlanAssignmentRequestsResponse'.
func (fpv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue) CompareWith(source *WatchPlanAssignmentRequestsResponse) (int, bool) {
	switch fpv.selector {
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges:
		return 0, false
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlanAssignmentRequestsResponse))
}

type WatchPlanAssignmentRequestsResponse_FieldSubPathValue struct {
	WatchPlanAssignmentRequestsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchPlanAssignmentRequestsResponse_FieldPathValue = (*WatchPlanAssignmentRequestsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchPlanAssignmentRequestsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchPlanAssignmentRequestsResponse_FieldSubPathValue) SetTo(target **WatchPlanAssignmentRequestsResponse) {
	if *target == nil {
		*target = new(WatchPlanAssignmentRequestsResponse)
	}
	switch fpvs.Selector() {
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPlanAssignmentRequestsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanAssignmentRequestsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchPlanAssignmentRequestsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchPlanAssignmentRequestsResponse_FieldSubPathValue) CompareWith(source *WatchPlanAssignmentRequestsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPlanAssignmentRequestsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchPlanAssignmentRequestsResponse))
}

// WatchPlanAssignmentRequestsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPlanAssignmentRequestsResponse according to their type
// Present only for array (repeated) types.
type WatchPlanAssignmentRequestsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlanAssignmentRequestsResponse_FieldPath
	ContainsValue(*WatchPlanAssignmentRequestsResponse) bool
}

// ParseWatchPlanAssignmentRequestsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlanAssignmentRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlanAssignmentRequestsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlanAssignmentRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequestsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlanAssignmentRequestsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPlanAssignmentRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlanAssignmentRequestsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlanAssignmentRequestsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue struct {
	WatchPlanAssignmentRequestsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentRequestsResponse_FieldPathArrayItemValue = (*WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlanAssignmentRequestsResponse as interface{}
func (fpaiv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) AsPlanAssignmentRequestChangesItemValue() (*plan_assignment_request.PlanAssignmentRequestChange, bool) {
	res, ok := fpaiv.value.(*plan_assignment_request.PlanAssignmentRequestChange)
	return res, ok
}

func (fpaiv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlanAssignmentRequestsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlanAssignmentRequestsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlanAssignmentRequestsResponse'
func (fpaiv *WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlanAssignmentRequestsResponse) bool {
	slice := fpaiv.WatchPlanAssignmentRequestsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue struct {
	WatchPlanAssignmentRequestsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlanAssignmentRequestsResponse'
func (fpaivs *WatchPlanAssignmentRequestsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchPlanAssignmentRequestsResponse) bool {
	switch fpaivs.Selector() {
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse: %d", fpaivs.Selector()))
	}
}

// WatchPlanAssignmentRequestsResponse_FieldPathArrayOfValues allows storing slice of values for WatchPlanAssignmentRequestsResponse fields according to their type
type WatchPlanAssignmentRequestsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlanAssignmentRequestsResponse_FieldPath
}

func ParseWatchPlanAssignmentRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlanAssignmentRequestsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlanAssignmentRequestsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequestsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlanAssignmentRequestsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPlanAssignmentRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlanAssignmentRequestsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlanAssignmentRequestsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues struct {
	WatchPlanAssignmentRequestsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPlanAssignmentRequestsResponse_FieldPathArrayOfValues = (*WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges:
		for _, v := range fpaov.values.([][]*plan_assignment_request.PlanAssignmentRequestChange) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchPlanAssignmentRequestsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) AsPlanAssignmentRequestChangesArrayOfValues() ([][]*plan_assignment_request.PlanAssignmentRequestChange, bool) {
	res, ok := fpaov.values.([][]*plan_assignment_request.PlanAssignmentRequestChange)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchPlanAssignmentRequestsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchPlanAssignmentRequestsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues struct {
	WatchPlanAssignmentRequestsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchPlanAssignmentRequestsResponse_FieldPathArrayOfValues = (*WatchPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchPlanAssignmentRequestsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchPlanAssignmentRequestsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchPlanAssignmentRequestsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchPlanAssignmentRequestsResponse_PageTokenChange)

	// Those methods build corresponding WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelector = 0
	WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlanAssignmentRequestsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlanAssignmentRequestsResponse_PageTokenChange", fp)
}

func ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath(rawField string) (WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath(rawField string) WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelector
}

var _ WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath = (*WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) Selector() WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlanAssignmentRequestsResponse_PageTokenChange
func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchPlanAssignmentRequestsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlanAssignmentRequestsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchPlanAssignmentRequestsResponse_PageTokenChange
func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchPlanAssignmentRequestsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlanAssignmentRequestsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*plan_assignment_request.PagerCursor)(nil)
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*plan_assignment_request.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchPlanAssignmentRequestsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlanAssignmentRequestsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathValue{WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PagerCursor)}
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathValue{WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PagerCursor)}
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue interface {
	WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlanAssignmentRequestsResponse_PageTokenChange)
	CompareWith(*WatchPlanAssignmentRequestsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathValue = (*WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*plan_assignment_request.PagerCursor, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PagerCursor)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*plan_assignment_request.PagerCursor, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchPlanAssignmentRequestsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchPlanAssignmentRequestsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*plan_assignment_request.PagerCursor)
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*plan_assignment_request.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanAssignmentRequestsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchPlanAssignmentRequestsResponse_PageTokenChange'.
func (fpv *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchPlanAssignmentRequestsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequestsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlanAssignmentRequestsResponse_PageTokenChange))
}

// WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchPlanAssignmentRequestsResponse_PageTokenChange) bool
}

// ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlanAssignmentRequestsResponse_PageTokenChange as interface{}
func (fpaiv *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlanAssignmentRequestsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlanAssignmentRequestsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlanAssignmentRequestsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath
}

func ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*plan_assignment_request.PagerCursor) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*plan_assignment_request.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*plan_assignment_request.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PagerCursor)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*plan_assignment_request.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreatePlanAssignmentRequestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreatePlanAssignmentRequestRequest_FieldPathSelector
	Get(source *CreatePlanAssignmentRequestRequest) []interface{}
	GetSingle(source *CreatePlanAssignmentRequestRequest) (interface{}, bool)
	ClearValue(item *CreatePlanAssignmentRequestRequest)

	// Those methods build corresponding CreatePlanAssignmentRequestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreatePlanAssignmentRequestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreatePlanAssignmentRequestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreatePlanAssignmentRequestRequest_FieldPathArrayItemValue
}

type CreatePlanAssignmentRequestRequest_FieldPathSelector int32

const (
	CreatePlanAssignmentRequestRequest_FieldPathSelectorParent                CreatePlanAssignmentRequestRequest_FieldPathSelector = 0
	CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest CreatePlanAssignmentRequestRequest_FieldPathSelector = 1
)

func (s CreatePlanAssignmentRequestRequest_FieldPathSelector) String() string {
	switch s {
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorParent:
		return "parent"
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return "plan_assignment_request"
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", s))
	}
}

func BuildCreatePlanAssignmentRequestRequest_FieldPath(fp gotenobject.RawFieldPath) (CreatePlanAssignmentRequestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreatePlanAssignmentRequestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreatePlanAssignmentRequestRequest_FieldTerminalPath{selector: CreatePlanAssignmentRequestRequest_FieldPathSelectorParent}, nil
		case "plan_assignment_request", "planAssignmentRequest", "plan-assignment-request":
			return &CreatePlanAssignmentRequestRequest_FieldTerminalPath{selector: CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest}, nil
		}
	} else {
		switch fp[0] {
		case "plan_assignment_request", "planAssignmentRequest", "plan-assignment-request":
			if subpath, err := plan_assignment_request.BuildPlanAssignmentRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreatePlanAssignmentRequestRequest_FieldSubPath{selector: CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreatePlanAssignmentRequestRequest", fp)
}

func ParseCreatePlanAssignmentRequestRequest_FieldPath(rawField string) (CreatePlanAssignmentRequestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreatePlanAssignmentRequestRequest_FieldPath(fp)
}

func MustParseCreatePlanAssignmentRequestRequest_FieldPath(rawField string) CreatePlanAssignmentRequestRequest_FieldPath {
	fp, err := ParseCreatePlanAssignmentRequestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreatePlanAssignmentRequestRequest_FieldTerminalPath struct {
	selector CreatePlanAssignmentRequestRequest_FieldPathSelector
}

var _ CreatePlanAssignmentRequestRequest_FieldPath = (*CreatePlanAssignmentRequestRequest_FieldTerminalPath)(nil)

func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) Selector() CreatePlanAssignmentRequestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreatePlanAssignmentRequestRequest
func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) Get(source *CreatePlanAssignmentRequestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreatePlanAssignmentRequestRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
			if source.PlanAssignmentRequest != nil {
				values = append(values, source.PlanAssignmentRequest)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreatePlanAssignmentRequestRequest))
}

// GetSingle returns value pointed by specific field of from source CreatePlanAssignmentRequestRequest
func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) GetSingle(source *CreatePlanAssignmentRequestRequest) (interface{}, bool) {
	switch fp.selector {
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		res := source.GetPlanAssignmentRequest()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreatePlanAssignmentRequestRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorParent:
		return (*plan_assignment_request.ParentReference)(nil)
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return (*plan_assignment_request.PlanAssignmentRequest)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) ClearValue(item *CreatePlanAssignmentRequestRequest) {
	if item != nil {
		switch fp.selector {
		case CreatePlanAssignmentRequestRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
			item.PlanAssignmentRequest = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fp.selector))
		}
	}
}

func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreatePlanAssignmentRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreatePlanAssignmentRequestRequest_FieldPathSelectorParent
}

func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) WithIValue(value interface{}) CreatePlanAssignmentRequestRequest_FieldPathValue {
	switch fp.selector {
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorParent:
		return &CreatePlanAssignmentRequestRequest_FieldTerminalPathValue{CreatePlanAssignmentRequestRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.ParentReference)}
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return &CreatePlanAssignmentRequestRequest_FieldTerminalPathValue{CreatePlanAssignmentRequestRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequest)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreatePlanAssignmentRequestRequest_FieldPathArrayOfValues {
	fpaov := &CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{CreatePlanAssignmentRequestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorParent:
		return &CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{CreatePlanAssignmentRequestRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.ParentReference)}
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return &CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{CreatePlanAssignmentRequestRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PlanAssignmentRequest)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreatePlanAssignmentRequestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *CreatePlanAssignmentRequestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreatePlanAssignmentRequestRequest_FieldSubPath struct {
	selector CreatePlanAssignmentRequestRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreatePlanAssignmentRequestRequest_FieldPath = (*CreatePlanAssignmentRequestRequest_FieldSubPath)(nil)

func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) Selector() CreatePlanAssignmentRequestRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) AsPlanAssignmentRequestSubPath() (plan_assignment_request.PlanAssignmentRequest_FieldPath, bool) {
	res, ok := fps.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreatePlanAssignmentRequestRequest
func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) Get(source *CreatePlanAssignmentRequestRequest) (values []interface{}) {
	if asPlanAssignmentRequestFieldPath, ok := fps.AsPlanAssignmentRequestSubPath(); ok {
		values = append(values, asPlanAssignmentRequestFieldPath.Get(source.GetPlanAssignmentRequest())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fps.selector))
	}
	return
}

func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreatePlanAssignmentRequestRequest))
}

// GetSingle returns value of selected field from source CreatePlanAssignmentRequestRequest
func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) GetSingle(source *CreatePlanAssignmentRequestRequest) (interface{}, bool) {
	switch fps.selector {
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		if source.GetPlanAssignmentRequest() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPlanAssignmentRequest())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fps.selector))
	}
}

func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreatePlanAssignmentRequestRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) ClearValue(item *CreatePlanAssignmentRequestRequest) {
	if item != nil {
		switch fps.selector {
		case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
			fps.subPath.ClearValueRaw(item.PlanAssignmentRequest)
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fps.selector))
		}
	}
}

func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreatePlanAssignmentRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreatePlanAssignmentRequestRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) WithIValue(value interface{}) CreatePlanAssignmentRequestRequest_FieldPathValue {
	return &CreatePlanAssignmentRequestRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreatePlanAssignmentRequestRequest_FieldPathArrayOfValues {
	return &CreatePlanAssignmentRequestRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreatePlanAssignmentRequestRequest_FieldPathArrayItemValue {
	return &CreatePlanAssignmentRequestRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreatePlanAssignmentRequestRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreatePlanAssignmentRequestRequest_FieldPathValue allows storing values for CreatePlanAssignmentRequestRequest fields according to their type
type CreatePlanAssignmentRequestRequest_FieldPathValue interface {
	CreatePlanAssignmentRequestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreatePlanAssignmentRequestRequest)
	CompareWith(*CreatePlanAssignmentRequestRequest) (cmp int, comparable bool)
}

func ParseCreatePlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr string) (CreatePlanAssignmentRequestRequest_FieldPathValue, error) {
	fp, err := ParseCreatePlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePlanAssignmentRequestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreatePlanAssignmentRequestRequest_FieldPathValue), nil
}

func MustParseCreatePlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr string) CreatePlanAssignmentRequestRequest_FieldPathValue {
	fpv, err := ParseCreatePlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreatePlanAssignmentRequestRequest_FieldTerminalPathValue struct {
	CreatePlanAssignmentRequestRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePlanAssignmentRequestRequest_FieldPathValue = (*CreatePlanAssignmentRequestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreatePlanAssignmentRequestRequest' as interface{}
func (fpv *CreatePlanAssignmentRequestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreatePlanAssignmentRequestRequest_FieldTerminalPathValue) AsParentValue() (*plan_assignment_request.ParentReference, bool) {
	res, ok := fpv.value.(*plan_assignment_request.ParentReference)
	return res, ok
}
func (fpv *CreatePlanAssignmentRequestRequest_FieldTerminalPathValue) AsPlanAssignmentRequestValue() (*plan_assignment_request.PlanAssignmentRequest, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PlanAssignmentRequest)
	return res, ok
}

// SetTo stores value for selected field for object CreatePlanAssignmentRequestRequest
func (fpv *CreatePlanAssignmentRequestRequest_FieldTerminalPathValue) SetTo(target **CreatePlanAssignmentRequestRequest) {
	if *target == nil {
		*target = new(CreatePlanAssignmentRequestRequest)
	}
	switch fpv.selector {
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*plan_assignment_request.ParentReference)
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		(*target).PlanAssignmentRequest = fpv.value.(*plan_assignment_request.PlanAssignmentRequest)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePlanAssignmentRequestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePlanAssignmentRequestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreatePlanAssignmentRequestRequest_FieldTerminalPathValue' with the value under path in 'CreatePlanAssignmentRequestRequest'.
func (fpv *CreatePlanAssignmentRequestRequest_FieldTerminalPathValue) CompareWith(source *CreatePlanAssignmentRequestRequest) (int, bool) {
	switch fpv.selector {
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*plan_assignment_request.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePlanAssignmentRequestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreatePlanAssignmentRequestRequest))
}

type CreatePlanAssignmentRequestRequest_FieldSubPathValue struct {
	CreatePlanAssignmentRequestRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreatePlanAssignmentRequestRequest_FieldPathValue = (*CreatePlanAssignmentRequestRequest_FieldSubPathValue)(nil)

func (fpvs *CreatePlanAssignmentRequestRequest_FieldSubPathValue) AsPlanAssignmentRequestPathValue() (plan_assignment_request.PlanAssignmentRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathValue)
	return res, ok
}

func (fpvs *CreatePlanAssignmentRequestRequest_FieldSubPathValue) SetTo(target **CreatePlanAssignmentRequestRequest) {
	if *target == nil {
		*target = new(CreatePlanAssignmentRequestRequest)
	}
	switch fpvs.Selector() {
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		fpvs.subPathValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathValue).SetTo(&(*target).PlanAssignmentRequest)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePlanAssignmentRequestRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePlanAssignmentRequestRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreatePlanAssignmentRequestRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreatePlanAssignmentRequestRequest_FieldSubPathValue) CompareWith(source *CreatePlanAssignmentRequestRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return fpvs.subPathValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathValue).CompareWith(source.GetPlanAssignmentRequest())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePlanAssignmentRequestRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreatePlanAssignmentRequestRequest))
}

// CreatePlanAssignmentRequestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreatePlanAssignmentRequestRequest according to their type
// Present only for array (repeated) types.
type CreatePlanAssignmentRequestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreatePlanAssignmentRequestRequest_FieldPath
	ContainsValue(*CreatePlanAssignmentRequestRequest) bool
}

// ParseCreatePlanAssignmentRequestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreatePlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreatePlanAssignmentRequestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreatePlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePlanAssignmentRequestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreatePlanAssignmentRequestRequest_FieldPathArrayItemValue), nil
}

func MustParseCreatePlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreatePlanAssignmentRequestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreatePlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue struct {
	CreatePlanAssignmentRequestRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePlanAssignmentRequestRequest_FieldPathArrayItemValue = (*CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreatePlanAssignmentRequestRequest as interface{}
func (fpaiv *CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreatePlanAssignmentRequestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreatePlanAssignmentRequestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePlanAssignmentRequestRequest'
func (fpaiv *CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreatePlanAssignmentRequestRequest) bool {
	slice := fpaiv.CreatePlanAssignmentRequestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreatePlanAssignmentRequestRequest_FieldSubPathArrayItemValue struct {
	CreatePlanAssignmentRequestRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreatePlanAssignmentRequestRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreatePlanAssignmentRequestRequest_FieldSubPathArrayItemValue) AsPlanAssignmentRequestPathItemValue() (plan_assignment_request.PlanAssignmentRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePlanAssignmentRequestRequest'
func (fpaivs *CreatePlanAssignmentRequestRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreatePlanAssignmentRequestRequest) bool {
	switch fpaivs.Selector() {
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return fpaivs.subPathItemValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathArrayItemValue).ContainsValue(source.GetPlanAssignmentRequest())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequestRequest: %d", fpaivs.Selector()))
	}
}

// CreatePlanAssignmentRequestRequest_FieldPathArrayOfValues allows storing slice of values for CreatePlanAssignmentRequestRequest fields according to their type
type CreatePlanAssignmentRequestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreatePlanAssignmentRequestRequest_FieldPath
}

func ParseCreatePlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreatePlanAssignmentRequestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreatePlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePlanAssignmentRequestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreatePlanAssignmentRequestRequest_FieldPathArrayOfValues), nil
}

func MustParseCreatePlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreatePlanAssignmentRequestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreatePlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues struct {
	CreatePlanAssignmentRequestRequest_FieldTerminalPath
	values interface{}
}

var _ CreatePlanAssignmentRequestRequest_FieldPathArrayOfValues = (*CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*plan_assignment_request.ParentReference) {
			values = append(values, v)
		}
	case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		for _, v := range fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*plan_assignment_request.ParentReference, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.ParentReference)
	return res, ok
}
func (fpaov *CreatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) AsPlanAssignmentRequestArrayOfValues() ([]*plan_assignment_request.PlanAssignmentRequest, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest)
	return res, ok
}

type CreatePlanAssignmentRequestRequest_FieldSubPathArrayOfValues struct {
	CreatePlanAssignmentRequestRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreatePlanAssignmentRequestRequest_FieldPathArrayOfValues = (*CreatePlanAssignmentRequestRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreatePlanAssignmentRequestRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreatePlanAssignmentRequestRequest_FieldSubPathArrayOfValues) AsPlanAssignmentRequestPathArrayOfValues() (plan_assignment_request.PlanAssignmentRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan_assignment_request.PlanAssignmentRequest_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePlanAssignmentRequestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePlanAssignmentRequestRequest_FieldPathSelector
	Get(source *UpdatePlanAssignmentRequestRequest) []interface{}
	GetSingle(source *UpdatePlanAssignmentRequestRequest) (interface{}, bool)
	ClearValue(item *UpdatePlanAssignmentRequestRequest)

	// Those methods build corresponding UpdatePlanAssignmentRequestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePlanAssignmentRequestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePlanAssignmentRequestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePlanAssignmentRequestRequest_FieldPathArrayItemValue
}

type UpdatePlanAssignmentRequestRequest_FieldPathSelector int32

const (
	UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest UpdatePlanAssignmentRequestRequest_FieldPathSelector = 0
	UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask            UpdatePlanAssignmentRequestRequest_FieldPathSelector = 1
	UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas                   UpdatePlanAssignmentRequestRequest_FieldPathSelector = 2
)

func (s UpdatePlanAssignmentRequestRequest_FieldPathSelector) String() string {
	switch s {
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return "plan_assignment_request"
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", s))
	}
}

func BuildUpdatePlanAssignmentRequestRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdatePlanAssignmentRequestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePlanAssignmentRequestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plan_assignment_request", "planAssignmentRequest", "plan-assignment-request":
			return &UpdatePlanAssignmentRequestRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdatePlanAssignmentRequestRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdatePlanAssignmentRequestRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "plan_assignment_request", "planAssignmentRequest", "plan-assignment-request":
			if subpath, err := plan_assignment_request.BuildPlanAssignmentRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePlanAssignmentRequestRequest_FieldSubPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdatePlanAssignmentRequestRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePlanAssignmentRequestRequest_FieldSubPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePlanAssignmentRequestRequest", fp)
}

func ParseUpdatePlanAssignmentRequestRequest_FieldPath(rawField string) (UpdatePlanAssignmentRequestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePlanAssignmentRequestRequest_FieldPath(fp)
}

func MustParseUpdatePlanAssignmentRequestRequest_FieldPath(rawField string) UpdatePlanAssignmentRequestRequest_FieldPath {
	fp, err := ParseUpdatePlanAssignmentRequestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePlanAssignmentRequestRequest_FieldTerminalPath struct {
	selector UpdatePlanAssignmentRequestRequest_FieldPathSelector
}

var _ UpdatePlanAssignmentRequestRequest_FieldPath = (*UpdatePlanAssignmentRequestRequest_FieldTerminalPath)(nil)

func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) Selector() UpdatePlanAssignmentRequestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePlanAssignmentRequestRequest
func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) Get(source *UpdatePlanAssignmentRequestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
			if source.PlanAssignmentRequest != nil {
				values = append(values, source.PlanAssignmentRequest)
			}
		case UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePlanAssignmentRequestRequest))
}

// GetSingle returns value pointed by specific field of from source UpdatePlanAssignmentRequestRequest
func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) GetSingle(source *UpdatePlanAssignmentRequestRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		res := source.GetPlanAssignmentRequest()
		return res, res != nil
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePlanAssignmentRequestRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return (*plan_assignment_request.PlanAssignmentRequest)(nil)
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask:
		return (*plan_assignment_request.PlanAssignmentRequest_FieldMask)(nil)
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
		return (*UpdatePlanAssignmentRequestRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) ClearValue(item *UpdatePlanAssignmentRequestRequest) {
	if item != nil {
		switch fp.selector {
		case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
			item.PlanAssignmentRequest = nil
		case UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePlanAssignmentRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) WithIValue(value interface{}) UpdatePlanAssignmentRequestRequest_FieldPathValue {
	switch fp.selector {
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return &UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue{UpdatePlanAssignmentRequestRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequest)}
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask:
		return &UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue{UpdatePlanAssignmentRequestRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
		return &UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue{UpdatePlanAssignmentRequestRequest_FieldTerminalPath: *fp, value: value.(*UpdatePlanAssignmentRequestRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePlanAssignmentRequestRequest_FieldPathArrayOfValues {
	fpaov := &UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return &UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequestRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PlanAssignmentRequest)}
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask:
		return &UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequestRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
		return &UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequestRequest_FieldTerminalPath: *fp, values: values.([]*UpdatePlanAssignmentRequestRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePlanAssignmentRequestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePlanAssignmentRequestRequest_FieldSubPath struct {
	selector UpdatePlanAssignmentRequestRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePlanAssignmentRequestRequest_FieldPath = (*UpdatePlanAssignmentRequestRequest_FieldSubPath)(nil)

func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) Selector() UpdatePlanAssignmentRequestRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) AsPlanAssignmentRequestSubPath() (plan_assignment_request.PlanAssignmentRequest_FieldPath, bool) {
	res, ok := fps.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath)
	return res, ok
}
func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) AsCasSubPath() (UpdatePlanAssignmentRequestRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdatePlanAssignmentRequestRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePlanAssignmentRequestRequest
func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) Get(source *UpdatePlanAssignmentRequestRequest) (values []interface{}) {
	if asPlanAssignmentRequestFieldPath, ok := fps.AsPlanAssignmentRequestSubPath(); ok {
		values = append(values, asPlanAssignmentRequestFieldPath.Get(source.GetPlanAssignmentRequest())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePlanAssignmentRequestRequest))
}

// GetSingle returns value of selected field from source UpdatePlanAssignmentRequestRequest
func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) GetSingle(source *UpdatePlanAssignmentRequestRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		if source.GetPlanAssignmentRequest() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPlanAssignmentRequest())
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fps.selector))
	}
}

func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePlanAssignmentRequestRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) ClearValue(item *UpdatePlanAssignmentRequestRequest) {
	if item != nil {
		switch fps.selector {
		case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
			fps.subPath.ClearValueRaw(item.PlanAssignmentRequest)
		case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePlanAssignmentRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdatePlanAssignmentRequestRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) WithIValue(value interface{}) UpdatePlanAssignmentRequestRequest_FieldPathValue {
	return &UpdatePlanAssignmentRequestRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePlanAssignmentRequestRequest_FieldPathArrayOfValues {
	return &UpdatePlanAssignmentRequestRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePlanAssignmentRequestRequest_FieldPathArrayItemValue {
	return &UpdatePlanAssignmentRequestRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePlanAssignmentRequestRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePlanAssignmentRequestRequest_FieldPathValue allows storing values for UpdatePlanAssignmentRequestRequest fields according to their type
type UpdatePlanAssignmentRequestRequest_FieldPathValue interface {
	UpdatePlanAssignmentRequestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePlanAssignmentRequestRequest)
	CompareWith(*UpdatePlanAssignmentRequestRequest) (cmp int, comparable bool)
}

func ParseUpdatePlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr string) (UpdatePlanAssignmentRequestRequest_FieldPathValue, error) {
	fp, err := ParseUpdatePlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePlanAssignmentRequestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePlanAssignmentRequestRequest_FieldPathValue), nil
}

func MustParseUpdatePlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr string) UpdatePlanAssignmentRequestRequest_FieldPathValue {
	fpv, err := ParseUpdatePlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue struct {
	UpdatePlanAssignmentRequestRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePlanAssignmentRequestRequest_FieldPathValue = (*UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdatePlanAssignmentRequestRequest' as interface{}
func (fpv *UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue) AsPlanAssignmentRequestValue() (*plan_assignment_request.PlanAssignmentRequest, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PlanAssignmentRequest)
	return res, ok
}
func (fpv *UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}
func (fpv *UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue) AsCasValue() (*UpdatePlanAssignmentRequestRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdatePlanAssignmentRequestRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdatePlanAssignmentRequestRequest
func (fpv *UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue) SetTo(target **UpdatePlanAssignmentRequestRequest) {
	if *target == nil {
		*target = new(UpdatePlanAssignmentRequestRequest)
	}
	switch fpv.selector {
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		(*target).PlanAssignmentRequest = fpv.value.(*plan_assignment_request.PlanAssignmentRequest)
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdatePlanAssignmentRequestRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePlanAssignmentRequestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue' with the value under path in 'UpdatePlanAssignmentRequestRequest'.
func (fpv *UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue) CompareWith(source *UpdatePlanAssignmentRequestRequest) (int, bool) {
	switch fpv.selector {
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return 0, false
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePlanAssignmentRequestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePlanAssignmentRequestRequest))
}

type UpdatePlanAssignmentRequestRequest_FieldSubPathValue struct {
	UpdatePlanAssignmentRequestRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePlanAssignmentRequestRequest_FieldPathValue = (*UpdatePlanAssignmentRequestRequest_FieldSubPathValue)(nil)

func (fpvs *UpdatePlanAssignmentRequestRequest_FieldSubPathValue) AsPlanAssignmentRequestPathValue() (plan_assignment_request.PlanAssignmentRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathValue)
	return res, ok
}
func (fpvs *UpdatePlanAssignmentRequestRequest_FieldSubPathValue) AsCasPathValue() (UpdatePlanAssignmentRequestRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdatePlanAssignmentRequestRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePlanAssignmentRequestRequest_FieldSubPathValue) SetTo(target **UpdatePlanAssignmentRequestRequest) {
	if *target == nil {
		*target = new(UpdatePlanAssignmentRequestRequest)
	}
	switch fpvs.Selector() {
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		fpvs.subPathValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathValue).SetTo(&(*target).PlanAssignmentRequest)
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdatePlanAssignmentRequestRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePlanAssignmentRequestRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePlanAssignmentRequestRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePlanAssignmentRequestRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePlanAssignmentRequestRequest_FieldSubPathValue) CompareWith(source *UpdatePlanAssignmentRequestRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return fpvs.subPathValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathValue).CompareWith(source.GetPlanAssignmentRequest())
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdatePlanAssignmentRequestRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePlanAssignmentRequestRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePlanAssignmentRequestRequest))
}

// UpdatePlanAssignmentRequestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdatePlanAssignmentRequestRequest according to their type
// Present only for array (repeated) types.
type UpdatePlanAssignmentRequestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePlanAssignmentRequestRequest_FieldPath
	ContainsValue(*UpdatePlanAssignmentRequestRequest) bool
}

// ParseUpdatePlanAssignmentRequestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePlanAssignmentRequestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePlanAssignmentRequestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePlanAssignmentRequestRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdatePlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePlanAssignmentRequestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue struct {
	UpdatePlanAssignmentRequestRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePlanAssignmentRequestRequest_FieldPathArrayItemValue = (*UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePlanAssignmentRequestRequest as interface{}
func (fpaiv *UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePlanAssignmentRequestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePlanAssignmentRequestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePlanAssignmentRequestRequest'
func (fpaiv *UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePlanAssignmentRequestRequest) bool {
	slice := fpaiv.UpdatePlanAssignmentRequestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePlanAssignmentRequestRequest_FieldSubPathArrayItemValue struct {
	UpdatePlanAssignmentRequestRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePlanAssignmentRequestRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePlanAssignmentRequestRequest_FieldSubPathArrayItemValue) AsPlanAssignmentRequestPathItemValue() (plan_assignment_request.PlanAssignmentRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdatePlanAssignmentRequestRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePlanAssignmentRequestRequest'
func (fpaivs *UpdatePlanAssignmentRequestRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePlanAssignmentRequestRequest) bool {
	switch fpaivs.Selector() {
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		return fpaivs.subPathItemValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathArrayItemValue).ContainsValue(source.GetPlanAssignmentRequest())
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest: %d", fpaivs.Selector()))
	}
}

// UpdatePlanAssignmentRequestRequest_FieldPathArrayOfValues allows storing slice of values for UpdatePlanAssignmentRequestRequest fields according to their type
type UpdatePlanAssignmentRequestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePlanAssignmentRequestRequest_FieldPath
}

func ParseUpdatePlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePlanAssignmentRequestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePlanAssignmentRequestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePlanAssignmentRequestRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdatePlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePlanAssignmentRequestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues struct {
	UpdatePlanAssignmentRequestRequest_FieldTerminalPath
	values interface{}
}

var _ UpdatePlanAssignmentRequestRequest_FieldPathArrayOfValues = (*UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
		for _, v := range fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest) {
			values = append(values, v)
		}
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask) {
			values = append(values, v)
		}
	case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdatePlanAssignmentRequestRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) AsPlanAssignmentRequestArrayOfValues() ([]*plan_assignment_request.PlanAssignmentRequest, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest)
	return res, ok
}
func (fpaov *UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}
func (fpaov *UpdatePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdatePlanAssignmentRequestRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdatePlanAssignmentRequestRequest_CAS)
	return res, ok
}

type UpdatePlanAssignmentRequestRequest_FieldSubPathArrayOfValues struct {
	UpdatePlanAssignmentRequestRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePlanAssignmentRequestRequest_FieldPathArrayOfValues = (*UpdatePlanAssignmentRequestRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePlanAssignmentRequestRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePlanAssignmentRequestRequest_FieldSubPathArrayOfValues) AsPlanAssignmentRequestPathArrayOfValues() (plan_assignment_request.PlanAssignmentRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan_assignment_request.PlanAssignmentRequest_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdatePlanAssignmentRequestRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePlanAssignmentRequestRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePlanAssignmentRequestRequestCAS_FieldPathSelector
	Get(source *UpdatePlanAssignmentRequestRequest_CAS) []interface{}
	GetSingle(source *UpdatePlanAssignmentRequestRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdatePlanAssignmentRequestRequest_CAS)

	// Those methods build corresponding UpdatePlanAssignmentRequestRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePlanAssignmentRequestRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue
}

type UpdatePlanAssignmentRequestRequestCAS_FieldPathSelector int32

const (
	UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState UpdatePlanAssignmentRequestRequestCAS_FieldPathSelector = 0
	UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask        UpdatePlanAssignmentRequestRequestCAS_FieldPathSelector = 1
)

func (s UpdatePlanAssignmentRequestRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", s))
	}
}

func BuildUpdatePlanAssignmentRequestRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdatePlanAssignmentRequestRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePlanAssignmentRequestRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := plan_assignment_request.BuildPlanAssignmentRequest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePlanAssignmentRequestRequestCAS_FieldSubPath{selector: UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePlanAssignmentRequestRequest_CAS", fp)
}

func ParseUpdatePlanAssignmentRequestRequestCAS_FieldPath(rawField string) (UpdatePlanAssignmentRequestRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePlanAssignmentRequestRequestCAS_FieldPath(fp)
}

func MustParseUpdatePlanAssignmentRequestRequestCAS_FieldPath(rawField string) UpdatePlanAssignmentRequestRequestCAS_FieldPath {
	fp, err := ParseUpdatePlanAssignmentRequestRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath struct {
	selector UpdatePlanAssignmentRequestRequestCAS_FieldPathSelector
}

var _ UpdatePlanAssignmentRequestRequestCAS_FieldPath = (*UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) Selector() UpdatePlanAssignmentRequestRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePlanAssignmentRequestRequest_CAS
func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) Get(source *UpdatePlanAssignmentRequestRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePlanAssignmentRequestRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdatePlanAssignmentRequestRequest_CAS
func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) GetSingle(source *UpdatePlanAssignmentRequestRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePlanAssignmentRequestRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
		return (*plan_assignment_request.PlanAssignmentRequest)(nil)
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask:
		return (*plan_assignment_request.PlanAssignmentRequest_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) ClearValue(item *UpdatePlanAssignmentRequestRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePlanAssignmentRequestRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdatePlanAssignmentRequestRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathValue{UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequest)}
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathValue{UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PlanAssignmentRequest)}
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePlanAssignmentRequestRequestCAS_FieldSubPath struct {
	selector UpdatePlanAssignmentRequestRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePlanAssignmentRequestRequestCAS_FieldPath = (*UpdatePlanAssignmentRequestRequestCAS_FieldSubPath)(nil)

func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) Selector() UpdatePlanAssignmentRequestRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) AsConditionalStateSubPath() (plan_assignment_request.PlanAssignmentRequest_FieldPath, bool) {
	res, ok := fps.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePlanAssignmentRequestRequest_CAS
func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) Get(source *UpdatePlanAssignmentRequestRequest_CAS) (values []interface{}) {
	if asPlanAssignmentRequestFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asPlanAssignmentRequestFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePlanAssignmentRequestRequest_CAS))
}

// GetSingle returns value of selected field from source UpdatePlanAssignmentRequestRequest_CAS
func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) GetSingle(source *UpdatePlanAssignmentRequestRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePlanAssignmentRequestRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) ClearValue(item *UpdatePlanAssignmentRequestRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePlanAssignmentRequestRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdatePlanAssignmentRequestRequestCAS_FieldPathValue {
	return &UpdatePlanAssignmentRequestRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues {
	return &UpdatePlanAssignmentRequestRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue {
	return &UpdatePlanAssignmentRequestRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePlanAssignmentRequestRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdatePlanAssignmentRequestRequestCAS_FieldPathValue interface {
	UpdatePlanAssignmentRequestRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePlanAssignmentRequestRequest_CAS)
	CompareWith(*UpdatePlanAssignmentRequestRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdatePlanAssignmentRequestRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdatePlanAssignmentRequestRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdatePlanAssignmentRequestRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePlanAssignmentRequestRequestCAS_FieldPathValue), nil
}

func MustParseUpdatePlanAssignmentRequestRequestCAS_FieldPathValue(pathStr, valueStr string) UpdatePlanAssignmentRequestRequestCAS_FieldPathValue {
	fpv, err := ParseUpdatePlanAssignmentRequestRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathValue struct {
	UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePlanAssignmentRequestRequestCAS_FieldPathValue = (*UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*plan_assignment_request.PlanAssignmentRequest, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PlanAssignmentRequest)
	return res, ok
}
func (fpv *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathValue) SetTo(target **UpdatePlanAssignmentRequestRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePlanAssignmentRequestRequest_CAS)
	}
	switch fpv.selector {
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*plan_assignment_request.PlanAssignmentRequest)
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePlanAssignmentRequestRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdatePlanAssignmentRequestRequest_CAS'.
func (fpv *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdatePlanAssignmentRequestRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePlanAssignmentRequestRequest_CAS))
}

type UpdatePlanAssignmentRequestRequestCAS_FieldSubPathValue struct {
	UpdatePlanAssignmentRequestRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePlanAssignmentRequestRequestCAS_FieldPathValue = (*UpdatePlanAssignmentRequestRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdatePlanAssignmentRequestRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (plan_assignment_request.PlanAssignmentRequest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePlanAssignmentRequestRequestCAS_FieldSubPathValue) SetTo(target **UpdatePlanAssignmentRequestRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePlanAssignmentRequestRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePlanAssignmentRequestRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePlanAssignmentRequestRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePlanAssignmentRequestRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePlanAssignmentRequestRequestCAS_FieldSubPathValue) CompareWith(source *UpdatePlanAssignmentRequestRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePlanAssignmentRequestRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePlanAssignmentRequestRequest_CAS))
}

// UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePlanAssignmentRequestRequestCAS_FieldPath
	ContainsValue(*UpdatePlanAssignmentRequestRequest_CAS) bool
}

// ParseUpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePlanAssignmentRequestRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayItemValue = (*UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePlanAssignmentRequestRequest_CAS as interface{}
func (fpaiv *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePlanAssignmentRequestRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePlanAssignmentRequestRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePlanAssignmentRequestRequest_CAS) bool {
	slice := fpaiv.UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePlanAssignmentRequestRequestCAS_FieldSubPathArrayItemValue struct {
	UpdatePlanAssignmentRequestRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePlanAssignmentRequestRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePlanAssignmentRequestRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (plan_assignment_request.PlanAssignmentRequest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdatePlanAssignmentRequestRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePlanAssignmentRequestRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(plan_assignment_request.PlanAssignmentRequest_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequestRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePlanAssignmentRequestRequestCAS_FieldPath
}

func ParseUpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePlanAssignmentRequestRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues = (*UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest) {
			values = append(values, v)
		}
	case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*plan_assignment_request.PlanAssignmentRequest, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest)
	return res, ok
}
func (fpaov *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan_assignment_request.PlanAssignmentRequest_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return res, ok
}

type UpdatePlanAssignmentRequestRequestCAS_FieldSubPathArrayOfValues struct {
	UpdatePlanAssignmentRequestRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePlanAssignmentRequestRequestCAS_FieldPathArrayOfValues = (*UpdatePlanAssignmentRequestRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePlanAssignmentRequestRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePlanAssignmentRequestRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (plan_assignment_request.PlanAssignmentRequest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan_assignment_request.PlanAssignmentRequest_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeletePlanAssignmentRequestRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeletePlanAssignmentRequestRequest_FieldPathSelector
	Get(source *DeletePlanAssignmentRequestRequest) []interface{}
	GetSingle(source *DeletePlanAssignmentRequestRequest) (interface{}, bool)
	ClearValue(item *DeletePlanAssignmentRequestRequest)

	// Those methods build corresponding DeletePlanAssignmentRequestRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeletePlanAssignmentRequestRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeletePlanAssignmentRequestRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeletePlanAssignmentRequestRequest_FieldPathArrayItemValue
}

type DeletePlanAssignmentRequestRequest_FieldPathSelector int32

const (
	DeletePlanAssignmentRequestRequest_FieldPathSelectorName DeletePlanAssignmentRequestRequest_FieldPathSelector = 0
)

func (s DeletePlanAssignmentRequestRequest_FieldPathSelector) String() string {
	switch s {
	case DeletePlanAssignmentRequestRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequestRequest: %d", s))
	}
}

func BuildDeletePlanAssignmentRequestRequest_FieldPath(fp gotenobject.RawFieldPath) (DeletePlanAssignmentRequestRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeletePlanAssignmentRequestRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeletePlanAssignmentRequestRequest_FieldTerminalPath{selector: DeletePlanAssignmentRequestRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeletePlanAssignmentRequestRequest", fp)
}

func ParseDeletePlanAssignmentRequestRequest_FieldPath(rawField string) (DeletePlanAssignmentRequestRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeletePlanAssignmentRequestRequest_FieldPath(fp)
}

func MustParseDeletePlanAssignmentRequestRequest_FieldPath(rawField string) DeletePlanAssignmentRequestRequest_FieldPath {
	fp, err := ParseDeletePlanAssignmentRequestRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeletePlanAssignmentRequestRequest_FieldTerminalPath struct {
	selector DeletePlanAssignmentRequestRequest_FieldPathSelector
}

var _ DeletePlanAssignmentRequestRequest_FieldPath = (*DeletePlanAssignmentRequestRequest_FieldTerminalPath)(nil)

func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) Selector() DeletePlanAssignmentRequestRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeletePlanAssignmentRequestRequest
func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) Get(source *DeletePlanAssignmentRequestRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeletePlanAssignmentRequestRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequestRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeletePlanAssignmentRequestRequest))
}

// GetSingle returns value pointed by specific field of from source DeletePlanAssignmentRequestRequest
func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) GetSingle(source *DeletePlanAssignmentRequestRequest) (interface{}, bool) {
	switch fp.selector {
	case DeletePlanAssignmentRequestRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeletePlanAssignmentRequestRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeletePlanAssignmentRequestRequest_FieldPathSelectorName:
		return (*plan_assignment_request.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) ClearValue(item *DeletePlanAssignmentRequestRequest) {
	if item != nil {
		switch fp.selector {
		case DeletePlanAssignmentRequestRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequestRequest: %d", fp.selector))
		}
	}
}

func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeletePlanAssignmentRequestRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeletePlanAssignmentRequestRequest_FieldPathSelectorName
}

func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) WithIValue(value interface{}) DeletePlanAssignmentRequestRequest_FieldPathValue {
	switch fp.selector {
	case DeletePlanAssignmentRequestRequest_FieldPathSelectorName:
		return &DeletePlanAssignmentRequestRequest_FieldTerminalPathValue{DeletePlanAssignmentRequestRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment_request.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeletePlanAssignmentRequestRequest_FieldPathArrayOfValues {
	fpaov := &DeletePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{DeletePlanAssignmentRequestRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeletePlanAssignmentRequestRequest_FieldPathSelectorName:
		return &DeletePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues{DeletePlanAssignmentRequestRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment_request.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequestRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeletePlanAssignmentRequestRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequestRequest: %d", fp.selector))
	}
}

func (fp *DeletePlanAssignmentRequestRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeletePlanAssignmentRequestRequest_FieldPathValue allows storing values for DeletePlanAssignmentRequestRequest fields according to their type
type DeletePlanAssignmentRequestRequest_FieldPathValue interface {
	DeletePlanAssignmentRequestRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeletePlanAssignmentRequestRequest)
	CompareWith(*DeletePlanAssignmentRequestRequest) (cmp int, comparable bool)
}

func ParseDeletePlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr string) (DeletePlanAssignmentRequestRequest_FieldPathValue, error) {
	fp, err := ParseDeletePlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePlanAssignmentRequestRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeletePlanAssignmentRequestRequest_FieldPathValue), nil
}

func MustParseDeletePlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr string) DeletePlanAssignmentRequestRequest_FieldPathValue {
	fpv, err := ParseDeletePlanAssignmentRequestRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeletePlanAssignmentRequestRequest_FieldTerminalPathValue struct {
	DeletePlanAssignmentRequestRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePlanAssignmentRequestRequest_FieldPathValue = (*DeletePlanAssignmentRequestRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeletePlanAssignmentRequestRequest' as interface{}
func (fpv *DeletePlanAssignmentRequestRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeletePlanAssignmentRequestRequest_FieldTerminalPathValue) AsNameValue() (*plan_assignment_request.Reference, bool) {
	res, ok := fpv.value.(*plan_assignment_request.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeletePlanAssignmentRequestRequest
func (fpv *DeletePlanAssignmentRequestRequest_FieldTerminalPathValue) SetTo(target **DeletePlanAssignmentRequestRequest) {
	if *target == nil {
		*target = new(DeletePlanAssignmentRequestRequest)
	}
	switch fpv.selector {
	case DeletePlanAssignmentRequestRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*plan_assignment_request.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequestRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePlanAssignmentRequestRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeletePlanAssignmentRequestRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeletePlanAssignmentRequestRequest_FieldTerminalPathValue' with the value under path in 'DeletePlanAssignmentRequestRequest'.
func (fpv *DeletePlanAssignmentRequestRequest_FieldTerminalPathValue) CompareWith(source *DeletePlanAssignmentRequestRequest) (int, bool) {
	switch fpv.selector {
	case DeletePlanAssignmentRequestRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*plan_assignment_request.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequestRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePlanAssignmentRequestRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeletePlanAssignmentRequestRequest))
}

// DeletePlanAssignmentRequestRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeletePlanAssignmentRequestRequest according to their type
// Present only for array (repeated) types.
type DeletePlanAssignmentRequestRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeletePlanAssignmentRequestRequest_FieldPath
	ContainsValue(*DeletePlanAssignmentRequestRequest) bool
}

// ParseDeletePlanAssignmentRequestRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeletePlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeletePlanAssignmentRequestRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeletePlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePlanAssignmentRequestRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeletePlanAssignmentRequestRequest_FieldPathArrayItemValue), nil
}

func MustParseDeletePlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeletePlanAssignmentRequestRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeletePlanAssignmentRequestRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeletePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue struct {
	DeletePlanAssignmentRequestRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePlanAssignmentRequestRequest_FieldPathArrayItemValue = (*DeletePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeletePlanAssignmentRequestRequest as interface{}
func (fpaiv *DeletePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeletePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeletePlanAssignmentRequestRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeletePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeletePlanAssignmentRequestRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeletePlanAssignmentRequestRequest'
func (fpaiv *DeletePlanAssignmentRequestRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeletePlanAssignmentRequestRequest) bool {
	slice := fpaiv.DeletePlanAssignmentRequestRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeletePlanAssignmentRequestRequest_FieldPathArrayOfValues allows storing slice of values for DeletePlanAssignmentRequestRequest fields according to their type
type DeletePlanAssignmentRequestRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeletePlanAssignmentRequestRequest_FieldPath
}

func ParseDeletePlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeletePlanAssignmentRequestRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeletePlanAssignmentRequestRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePlanAssignmentRequestRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeletePlanAssignmentRequestRequest_FieldPathArrayOfValues), nil
}

func MustParseDeletePlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeletePlanAssignmentRequestRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeletePlanAssignmentRequestRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeletePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues struct {
	DeletePlanAssignmentRequestRequest_FieldTerminalPath
	values interface{}
}

var _ DeletePlanAssignmentRequestRequest_FieldPathArrayOfValues = (*DeletePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeletePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeletePlanAssignmentRequestRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*plan_assignment_request.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeletePlanAssignmentRequestRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*plan_assignment_request.Reference, bool) {
	res, ok := fpaov.values.([]*plan_assignment_request.Reference)
	return res, ok
}
