// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/plan_assignment_request_service.proto
// DO NOT EDIT!!!

package plan_assignment_request_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	plan_assignment_request "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan_assignment_request"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &plan_assignment_request.PlanAssignmentRequest{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

type GetPlanAssignmentRequestRequest_FieldMask struct {
	Paths []GetPlanAssignmentRequestRequest_FieldPath
}

func FullGetPlanAssignmentRequestRequest_FieldMask() *GetPlanAssignmentRequestRequest_FieldMask {
	res := &GetPlanAssignmentRequestRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetPlanAssignmentRequestRequest_FieldTerminalPath{selector: GetPlanAssignmentRequestRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetPlanAssignmentRequestRequest_FieldTerminalPath{selector: GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetPlanAssignmentRequestRequest_FieldTerminalPath{selector: GetPlanAssignmentRequestRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetPlanAssignmentRequestRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetPlanAssignmentRequestRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetPlanAssignmentRequestRequest_FieldPath(raw)
	})
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) Subtract(other *GetPlanAssignmentRequestRequest_FieldMask) *GetPlanAssignmentRequestRequest_FieldMask {
	result := &GetPlanAssignmentRequestRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetPlanAssignmentRequestRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetPlanAssignmentRequestRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) FilterInputFields() *GetPlanAssignmentRequestRequest_FieldMask {
	result := &GetPlanAssignmentRequestRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetPlanAssignmentRequestRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetPlanAssignmentRequestRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetPlanAssignmentRequestRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetPlanAssignmentRequestRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) AppendPath(path GetPlanAssignmentRequestRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetPlanAssignmentRequestRequest_FieldPath))
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) GetPaths() []GetPlanAssignmentRequestRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetPlanAssignmentRequestRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) Set(target, source *GetPlanAssignmentRequestRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetPlanAssignmentRequestRequest), source.(*GetPlanAssignmentRequestRequest))
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) Project(source *GetPlanAssignmentRequestRequest) *GetPlanAssignmentRequestRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetPlanAssignmentRequestRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetPlanAssignmentRequestRequest_FieldTerminalPath:
			switch tp.selector {
			case GetPlanAssignmentRequestRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetPlanAssignmentRequestRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetPlanAssignmentRequestRequest))
}

func (fieldMask *GetPlanAssignmentRequestRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetPlanAssignmentRequestsRequest_FieldMask struct {
	Paths []BatchGetPlanAssignmentRequestsRequest_FieldPath
}

func FullBatchGetPlanAssignmentRequestsRequest_FieldMask() *BatchGetPlanAssignmentRequestsRequest_FieldMask {
	res := &BatchGetPlanAssignmentRequestsRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetPlanAssignmentRequestsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetPlanAssignmentRequestsRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) Subtract(other *BatchGetPlanAssignmentRequestsRequest_FieldMask) *BatchGetPlanAssignmentRequestsRequest_FieldMask {
	result := &BatchGetPlanAssignmentRequestsRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetPlanAssignmentRequestsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) FilterInputFields() *BatchGetPlanAssignmentRequestsRequest_FieldMask {
	result := &BatchGetPlanAssignmentRequestsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetPlanAssignmentRequestsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetPlanAssignmentRequestsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetPlanAssignmentRequestsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetPlanAssignmentRequestsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) AppendPath(path BatchGetPlanAssignmentRequestsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetPlanAssignmentRequestsRequest_FieldPath))
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) GetPaths() []BatchGetPlanAssignmentRequestsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetPlanAssignmentRequestsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) Set(target, source *BatchGetPlanAssignmentRequestsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetPlanAssignmentRequestsRequest), source.(*BatchGetPlanAssignmentRequestsRequest))
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) Project(source *BatchGetPlanAssignmentRequestsRequest) *BatchGetPlanAssignmentRequestsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetPlanAssignmentRequestsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetPlanAssignmentRequestsRequest))
}

func (fieldMask *BatchGetPlanAssignmentRequestsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetPlanAssignmentRequestsResponse_FieldMask struct {
	Paths []BatchGetPlanAssignmentRequestsResponse_FieldPath
}

func FullBatchGetPlanAssignmentRequestsResponse_FieldMask() *BatchGetPlanAssignmentRequestsResponse_FieldMask {
	res := &BatchGetPlanAssignmentRequestsResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests})
	res.Paths = append(res.Paths, &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetPlanAssignmentRequestsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetPlanAssignmentRequestsResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) Subtract(other *BatchGetPlanAssignmentRequestsResponse_FieldMask) *BatchGetPlanAssignmentRequestsResponse_FieldMask {
	result := &BatchGetPlanAssignmentRequestsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetPlanAssignmentRequestsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests: &plan_assignment_request.PlanAssignmentRequest_FieldMask{},
	}
	mySubMasks := map[BatchGetPlanAssignmentRequestsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests: &plan_assignment_request.PlanAssignmentRequest_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetPlanAssignmentRequestsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
						mySubMasks[BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests] = plan_assignment_request.FullPlanAssignmentRequest_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetPlanAssignmentRequestsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetPlanAssignmentRequestsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetPlanAssignmentRequestsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) FilterInputFields() *BatchGetPlanAssignmentRequestsResponse_FieldMask {
	result := &BatchGetPlanAssignmentRequestsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
			if _, ok := path.(*BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath); ok {
				for _, subpath := range plan_assignment_request.FullPlanAssignmentRequest_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetPlanAssignmentRequestsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetPlanAssignmentRequestsResponse_FieldSubPath); ok {
				selectedMask := &plan_assignment_request.PlanAssignmentRequest_FieldMask{
					Paths: []plan_assignment_request.PlanAssignmentRequest_FieldPath{sub.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetPlanAssignmentRequestsResponse_FieldSubPath{selector: BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetPlanAssignmentRequestsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetPlanAssignmentRequestsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetPlanAssignmentRequestsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetPlanAssignmentRequestsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) AppendPath(path BatchGetPlanAssignmentRequestsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetPlanAssignmentRequestsResponse_FieldPath))
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) GetPaths() []BatchGetPlanAssignmentRequestsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetPlanAssignmentRequestsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) Set(target, source *BatchGetPlanAssignmentRequestsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetPlanAssignmentRequestsResponse), source.(*BatchGetPlanAssignmentRequestsResponse))
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) Project(source *BatchGetPlanAssignmentRequestsResponse) *BatchGetPlanAssignmentRequestsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetPlanAssignmentRequestsResponse{}
	planAssignmentRequestsMask := &plan_assignment_request.PlanAssignmentRequest_FieldMask{}
	wholePlanAssignmentRequestsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
				result.PlanAssignmentRequests = source.PlanAssignmentRequests
				wholePlanAssignmentRequestsAccepted = true
			case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetPlanAssignmentRequestsResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
				planAssignmentRequestsMask.AppendPath(tp.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath))
			}
		}
	}
	if wholePlanAssignmentRequestsAccepted == false && len(planAssignmentRequestsMask.Paths) > 0 {
		for _, sourceItem := range source.GetPlanAssignmentRequests() {
			result.PlanAssignmentRequests = append(result.PlanAssignmentRequests, planAssignmentRequestsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetPlanAssignmentRequestsResponse))
}

func (fieldMask *BatchGetPlanAssignmentRequestsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListPlanAssignmentRequestsRequest_FieldMask struct {
	Paths []ListPlanAssignmentRequestsRequest_FieldPath
}

func FullListPlanAssignmentRequestsRequest_FieldMask() *ListPlanAssignmentRequestsRequest_FieldMask {
	res := &ListPlanAssignmentRequestsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListPlanAssignmentRequestsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListPlanAssignmentRequestsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListPlanAssignmentRequestsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) Subtract(other *ListPlanAssignmentRequestsRequest_FieldMask) *ListPlanAssignmentRequestsRequest_FieldMask {
	result := &ListPlanAssignmentRequestsRequest_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListPlanAssignmentRequestsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListPlanAssignmentRequestsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) FilterInputFields() *ListPlanAssignmentRequestsRequest_FieldMask {
	result := &ListPlanAssignmentRequestsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListPlanAssignmentRequestsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListPlanAssignmentRequestsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListPlanAssignmentRequestsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListPlanAssignmentRequestsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) AppendPath(path ListPlanAssignmentRequestsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListPlanAssignmentRequestsRequest_FieldPath))
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) GetPaths() []ListPlanAssignmentRequestsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListPlanAssignmentRequestsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) Set(target, source *ListPlanAssignmentRequestsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListPlanAssignmentRequestsRequest), source.(*ListPlanAssignmentRequestsRequest))
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) Project(source *ListPlanAssignmentRequestsRequest) *ListPlanAssignmentRequestsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListPlanAssignmentRequestsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListPlanAssignmentRequestsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListPlanAssignmentRequestsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListPlanAssignmentRequestsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListPlanAssignmentRequestsRequest))
}

func (fieldMask *ListPlanAssignmentRequestsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListPlanAssignmentRequestsResponse_FieldMask struct {
	Paths []ListPlanAssignmentRequestsResponse_FieldPath
}

func FullListPlanAssignmentRequestsResponse_FieldMask() *ListPlanAssignmentRequestsResponse_FieldMask {
	res := &ListPlanAssignmentRequestsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListPlanAssignmentRequestsResponse_FieldTerminalPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests})
	res.Paths = append(res.Paths, &ListPlanAssignmentRequestsResponse_FieldTerminalPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListPlanAssignmentRequestsResponse_FieldTerminalPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListPlanAssignmentRequestsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListPlanAssignmentRequestsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListPlanAssignmentRequestsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) Subtract(other *ListPlanAssignmentRequestsResponse_FieldMask) *ListPlanAssignmentRequestsResponse_FieldMask {
	result := &ListPlanAssignmentRequestsResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListPlanAssignmentRequestsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests: &plan_assignment_request.PlanAssignmentRequest_FieldMask{},
	}
	mySubMasks := map[ListPlanAssignmentRequestsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests: &plan_assignment_request.PlanAssignmentRequest_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListPlanAssignmentRequestsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListPlanAssignmentRequestsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListPlanAssignmentRequestsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
						mySubMasks[ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests] = plan_assignment_request.FullPlanAssignmentRequest_FieldMask()
					}
				} else if tp, ok := path.(*ListPlanAssignmentRequestsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListPlanAssignmentRequestsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListPlanAssignmentRequestsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) FilterInputFields() *ListPlanAssignmentRequestsResponse_FieldMask {
	result := &ListPlanAssignmentRequestsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
			if _, ok := path.(*ListPlanAssignmentRequestsResponse_FieldTerminalPath); ok {
				for _, subpath := range plan_assignment_request.FullPlanAssignmentRequest_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListPlanAssignmentRequestsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListPlanAssignmentRequestsResponse_FieldSubPath); ok {
				selectedMask := &plan_assignment_request.PlanAssignmentRequest_FieldMask{
					Paths: []plan_assignment_request.PlanAssignmentRequest_FieldPath{sub.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListPlanAssignmentRequestsResponse_FieldSubPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListPlanAssignmentRequestsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListPlanAssignmentRequestsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListPlanAssignmentRequestsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListPlanAssignmentRequestsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) AppendPath(path ListPlanAssignmentRequestsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListPlanAssignmentRequestsResponse_FieldPath))
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) GetPaths() []ListPlanAssignmentRequestsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListPlanAssignmentRequestsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) Set(target, source *ListPlanAssignmentRequestsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListPlanAssignmentRequestsResponse), source.(*ListPlanAssignmentRequestsResponse))
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) Project(source *ListPlanAssignmentRequestsResponse) *ListPlanAssignmentRequestsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListPlanAssignmentRequestsResponse{}
	planAssignmentRequestsMask := &plan_assignment_request.PlanAssignmentRequest_FieldMask{}
	wholePlanAssignmentRequestsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListPlanAssignmentRequestsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
				result.PlanAssignmentRequests = source.PlanAssignmentRequests
				wholePlanAssignmentRequestsAccepted = true
			case ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *ListPlanAssignmentRequestsResponse_FieldSubPath:
			switch tp.selector {
			case ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests:
				planAssignmentRequestsMask.AppendPath(tp.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath))
			}
		}
	}
	if wholePlanAssignmentRequestsAccepted == false && len(planAssignmentRequestsMask.Paths) > 0 {
		for _, sourceItem := range source.GetPlanAssignmentRequests() {
			result.PlanAssignmentRequests = append(result.PlanAssignmentRequests, planAssignmentRequestsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListPlanAssignmentRequestsResponse))
}

func (fieldMask *ListPlanAssignmentRequestsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPlanAssignmentRequestRequest_FieldMask struct {
	Paths []WatchPlanAssignmentRequestRequest_FieldPath
}

func FullWatchPlanAssignmentRequestRequest_FieldMask() *WatchPlanAssignmentRequestRequest_FieldMask {
	res := &WatchPlanAssignmentRequestRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPlanAssignmentRequestRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPlanAssignmentRequestRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPlanAssignmentRequestRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) Subtract(other *WatchPlanAssignmentRequestRequest_FieldMask) *WatchPlanAssignmentRequestRequest_FieldMask {
	result := &WatchPlanAssignmentRequestRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPlanAssignmentRequestRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPlanAssignmentRequestRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) FilterInputFields() *WatchPlanAssignmentRequestRequest_FieldMask {
	result := &WatchPlanAssignmentRequestRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPlanAssignmentRequestRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPlanAssignmentRequestRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPlanAssignmentRequestRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPlanAssignmentRequestRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) AppendPath(path WatchPlanAssignmentRequestRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPlanAssignmentRequestRequest_FieldPath))
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) GetPaths() []WatchPlanAssignmentRequestRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPlanAssignmentRequestRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) Set(target, source *WatchPlanAssignmentRequestRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPlanAssignmentRequestRequest), source.(*WatchPlanAssignmentRequestRequest))
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) Project(source *WatchPlanAssignmentRequestRequest) *WatchPlanAssignmentRequestRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPlanAssignmentRequestRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPlanAssignmentRequestRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchPlanAssignmentRequestRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchPlanAssignmentRequestRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPlanAssignmentRequestRequest))
}

func (fieldMask *WatchPlanAssignmentRequestRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPlanAssignmentRequestResponse_FieldMask struct {
	Paths []WatchPlanAssignmentRequestResponse_FieldPath
}

func FullWatchPlanAssignmentRequestResponse_FieldMask() *WatchPlanAssignmentRequestResponse_FieldMask {
	res := &WatchPlanAssignmentRequestResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPlanAssignmentRequestResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPlanAssignmentRequestResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPlanAssignmentRequestResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) Subtract(other *WatchPlanAssignmentRequestResponse_FieldMask) *WatchPlanAssignmentRequestResponse_FieldMask {
	result := &WatchPlanAssignmentRequestResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPlanAssignmentRequestResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPlanAssignmentRequestResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) FilterInputFields() *WatchPlanAssignmentRequestResponse_FieldMask {
	result := &WatchPlanAssignmentRequestResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPlanAssignmentRequestResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPlanAssignmentRequestResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPlanAssignmentRequestResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPlanAssignmentRequestResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) AppendPath(path WatchPlanAssignmentRequestResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPlanAssignmentRequestResponse_FieldPath))
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) GetPaths() []WatchPlanAssignmentRequestResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPlanAssignmentRequestResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) Set(target, source *WatchPlanAssignmentRequestResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPlanAssignmentRequestResponse), source.(*WatchPlanAssignmentRequestResponse))
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) Project(source *WatchPlanAssignmentRequestResponse) *WatchPlanAssignmentRequestResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPlanAssignmentRequestResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPlanAssignmentRequestResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchPlanAssignmentRequestResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPlanAssignmentRequestResponse))
}

func (fieldMask *WatchPlanAssignmentRequestResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPlanAssignmentRequestsRequest_FieldMask struct {
	Paths []WatchPlanAssignmentRequestsRequest_FieldPath
}

func FullWatchPlanAssignmentRequestsRequest_FieldMask() *WatchPlanAssignmentRequestsRequest_FieldMask {
	res := &WatchPlanAssignmentRequestsRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPlanAssignmentRequestsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPlanAssignmentRequestsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPlanAssignmentRequestsRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) Subtract(other *WatchPlanAssignmentRequestsRequest_FieldMask) *WatchPlanAssignmentRequestsRequest_FieldMask {
	result := &WatchPlanAssignmentRequestsRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPlanAssignmentRequestsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPlanAssignmentRequestsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) FilterInputFields() *WatchPlanAssignmentRequestsRequest_FieldMask {
	result := &WatchPlanAssignmentRequestsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPlanAssignmentRequestsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPlanAssignmentRequestsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPlanAssignmentRequestsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPlanAssignmentRequestsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) AppendPath(path WatchPlanAssignmentRequestsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPlanAssignmentRequestsRequest_FieldPath))
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) GetPaths() []WatchPlanAssignmentRequestsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPlanAssignmentRequestsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) Set(target, source *WatchPlanAssignmentRequestsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPlanAssignmentRequestsRequest), source.(*WatchPlanAssignmentRequestsRequest))
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) Project(source *WatchPlanAssignmentRequestsRequest) *WatchPlanAssignmentRequestsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPlanAssignmentRequestsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPlanAssignmentRequestsRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchPlanAssignmentRequestsRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchPlanAssignmentRequestsRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchPlanAssignmentRequestsRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPlanAssignmentRequestsRequest))
}

func (fieldMask *WatchPlanAssignmentRequestsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPlanAssignmentRequestsResponse_FieldMask struct {
	Paths []WatchPlanAssignmentRequestsResponse_FieldPath
}

func FullWatchPlanAssignmentRequestsResponse_FieldMask() *WatchPlanAssignmentRequestsResponse_FieldMask {
	res := &WatchPlanAssignmentRequestsResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPlanAssignmentRequestsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPlanAssignmentRequestsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPlanAssignmentRequestsResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) Subtract(other *WatchPlanAssignmentRequestsResponse_FieldMask) *WatchPlanAssignmentRequestsResponse_FieldMask {
	result := &WatchPlanAssignmentRequestsResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchPlanAssignmentRequestsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange: &WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchPlanAssignmentRequestsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange: &WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPlanAssignmentRequestsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchPlanAssignmentRequestsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchPlanAssignmentRequestsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange] = FullWatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchPlanAssignmentRequestsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchPlanAssignmentRequestsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPlanAssignmentRequestsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) FilterInputFields() *WatchPlanAssignmentRequestsResponse_FieldMask {
	result := &WatchPlanAssignmentRequestsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPlanAssignmentRequestsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPlanAssignmentRequestsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPlanAssignmentRequestsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPlanAssignmentRequestsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) AppendPath(path WatchPlanAssignmentRequestsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPlanAssignmentRequestsResponse_FieldPath))
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) GetPaths() []WatchPlanAssignmentRequestsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPlanAssignmentRequestsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) Set(target, source *WatchPlanAssignmentRequestsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPlanAssignmentRequestsResponse), source.(*WatchPlanAssignmentRequestsResponse))
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) Project(source *WatchPlanAssignmentRequestsResponse) *WatchPlanAssignmentRequestsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPlanAssignmentRequestsResponse{}
	pageTokenChangeMask := &WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPlanAssignmentRequestsResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges:
				result.PlanAssignmentRequestChanges = source.PlanAssignmentRequestChanges
			case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchPlanAssignmentRequestsResponse_FieldSubPath:
			switch tp.selector {
			case WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPlanAssignmentRequestsResponse))
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask struct {
	Paths []WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath
}

func FullWatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask() *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask {
	res := &WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) Subtract(other *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask {
	result := &WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask {
	result := &WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) AppendPath(path WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) GetPaths() []WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPlanAssignmentRequestsResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) Set(target, source *WatchPlanAssignmentRequestsResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPlanAssignmentRequestsResponse_PageTokenChange), source.(*WatchPlanAssignmentRequestsResponse_PageTokenChange))
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) Project(source *WatchPlanAssignmentRequestsResponse_PageTokenChange) *WatchPlanAssignmentRequestsResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPlanAssignmentRequestsResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPlanAssignmentRequestsResponse_PageTokenChange))
}

func (fieldMask *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreatePlanAssignmentRequestRequest_FieldMask struct {
	Paths []CreatePlanAssignmentRequestRequest_FieldPath
}

func FullCreatePlanAssignmentRequestRequest_FieldMask() *CreatePlanAssignmentRequestRequest_FieldMask {
	res := &CreatePlanAssignmentRequestRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreatePlanAssignmentRequestRequest_FieldTerminalPath{selector: CreatePlanAssignmentRequestRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreatePlanAssignmentRequestRequest_FieldTerminalPath{selector: CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest})
	return res
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreatePlanAssignmentRequestRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreatePlanAssignmentRequestRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreatePlanAssignmentRequestRequest_FieldPath(raw)
	})
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) Subtract(other *CreatePlanAssignmentRequestRequest_FieldMask) *CreatePlanAssignmentRequestRequest_FieldMask {
	result := &CreatePlanAssignmentRequestRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreatePlanAssignmentRequestRequest_FieldPathSelector]gotenobject.FieldMask{
		CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest: &plan_assignment_request.PlanAssignmentRequest_FieldMask{},
	}
	mySubMasks := map[CreatePlanAssignmentRequestRequest_FieldPathSelector]gotenobject.FieldMask{
		CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest: &plan_assignment_request.PlanAssignmentRequest_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreatePlanAssignmentRequestRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreatePlanAssignmentRequestRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreatePlanAssignmentRequestRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
						mySubMasks[CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest] = plan_assignment_request.FullPlanAssignmentRequest_FieldMask()
					}
				} else if tp, ok := path.(*CreatePlanAssignmentRequestRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreatePlanAssignmentRequestRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreatePlanAssignmentRequestRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) FilterInputFields() *CreatePlanAssignmentRequestRequest_FieldMask {
	result := &CreatePlanAssignmentRequestRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
			if _, ok := path.(*CreatePlanAssignmentRequestRequest_FieldTerminalPath); ok {
				for _, subpath := range plan_assignment_request.FullPlanAssignmentRequest_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreatePlanAssignmentRequestRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreatePlanAssignmentRequestRequest_FieldSubPath); ok {
				selectedMask := &plan_assignment_request.PlanAssignmentRequest_FieldMask{
					Paths: []plan_assignment_request.PlanAssignmentRequest_FieldPath{sub.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreatePlanAssignmentRequestRequest_FieldSubPath{selector: CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreatePlanAssignmentRequestRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreatePlanAssignmentRequestRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreatePlanAssignmentRequestRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreatePlanAssignmentRequestRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) AppendPath(path CreatePlanAssignmentRequestRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreatePlanAssignmentRequestRequest_FieldPath))
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) GetPaths() []CreatePlanAssignmentRequestRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreatePlanAssignmentRequestRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) Set(target, source *CreatePlanAssignmentRequestRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreatePlanAssignmentRequestRequest), source.(*CreatePlanAssignmentRequestRequest))
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) Project(source *CreatePlanAssignmentRequestRequest) *CreatePlanAssignmentRequestRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreatePlanAssignmentRequestRequest{}
	planAssignmentRequestMask := &plan_assignment_request.PlanAssignmentRequest_FieldMask{}
	wholePlanAssignmentRequestAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreatePlanAssignmentRequestRequest_FieldTerminalPath:
			switch tp.selector {
			case CreatePlanAssignmentRequestRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
				result.PlanAssignmentRequest = source.PlanAssignmentRequest
				wholePlanAssignmentRequestAccepted = true
			}
		case *CreatePlanAssignmentRequestRequest_FieldSubPath:
			switch tp.selector {
			case CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
				planAssignmentRequestMask.AppendPath(tp.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath))
			}
		}
	}
	if wholePlanAssignmentRequestAccepted == false && len(planAssignmentRequestMask.Paths) > 0 {
		result.PlanAssignmentRequest = planAssignmentRequestMask.Project(source.GetPlanAssignmentRequest())
	}
	return result
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreatePlanAssignmentRequestRequest))
}

func (fieldMask *CreatePlanAssignmentRequestRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdatePlanAssignmentRequestRequest_FieldMask struct {
	Paths []UpdatePlanAssignmentRequestRequest_FieldPath
}

func FullUpdatePlanAssignmentRequestRequest_FieldMask() *UpdatePlanAssignmentRequestRequest_FieldMask {
	res := &UpdatePlanAssignmentRequestRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest})
	res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdatePlanAssignmentRequestRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdatePlanAssignmentRequestRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdatePlanAssignmentRequestRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) Subtract(other *UpdatePlanAssignmentRequestRequest_FieldMask) *UpdatePlanAssignmentRequestRequest_FieldMask {
	result := &UpdatePlanAssignmentRequestRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdatePlanAssignmentRequestRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest: &plan_assignment_request.PlanAssignmentRequest_FieldMask{},
		UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:                   &UpdatePlanAssignmentRequestRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdatePlanAssignmentRequestRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest: &plan_assignment_request.PlanAssignmentRequest_FieldMask{},
		UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:                   &UpdatePlanAssignmentRequestRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdatePlanAssignmentRequestRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdatePlanAssignmentRequestRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdatePlanAssignmentRequestRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
						mySubMasks[UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest] = plan_assignment_request.FullPlanAssignmentRequest_FieldMask()
					case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
						mySubMasks[UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas] = FullUpdatePlanAssignmentRequestRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdatePlanAssignmentRequestRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdatePlanAssignmentRequestRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdatePlanAssignmentRequestRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) FilterInputFields() *UpdatePlanAssignmentRequestRequest_FieldMask {
	result := &UpdatePlanAssignmentRequestRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
			if _, ok := path.(*UpdatePlanAssignmentRequestRequest_FieldTerminalPath); ok {
				for _, subpath := range plan_assignment_request.FullPlanAssignmentRequest_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePlanAssignmentRequestRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdatePlanAssignmentRequestRequest_FieldSubPath); ok {
				selectedMask := &plan_assignment_request.PlanAssignmentRequest_FieldMask{
					Paths: []plan_assignment_request.PlanAssignmentRequest_FieldPath{sub.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePlanAssignmentRequestRequest_FieldSubPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest, subPath: allowedPath})
				}
			}
		case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdatePlanAssignmentRequestRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdatePlanAssignmentRequestRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePlanAssignmentRequestRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdatePlanAssignmentRequestRequest_FieldSubPath); ok {
				selectedMask := &UpdatePlanAssignmentRequestRequest_CAS_FieldMask{
					Paths: []UpdatePlanAssignmentRequestRequestCAS_FieldPath{sub.subPath.(UpdatePlanAssignmentRequestRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePlanAssignmentRequestRequest_FieldSubPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdatePlanAssignmentRequestRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdatePlanAssignmentRequestRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdatePlanAssignmentRequestRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdatePlanAssignmentRequestRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) AppendPath(path UpdatePlanAssignmentRequestRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdatePlanAssignmentRequestRequest_FieldPath))
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) GetPaths() []UpdatePlanAssignmentRequestRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdatePlanAssignmentRequestRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) Set(target, source *UpdatePlanAssignmentRequestRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdatePlanAssignmentRequestRequest), source.(*UpdatePlanAssignmentRequestRequest))
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) Project(source *UpdatePlanAssignmentRequestRequest) *UpdatePlanAssignmentRequestRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdatePlanAssignmentRequestRequest{}
	planAssignmentRequestMask := &plan_assignment_request.PlanAssignmentRequest_FieldMask{}
	wholePlanAssignmentRequestAccepted := false
	casMask := &UpdatePlanAssignmentRequestRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdatePlanAssignmentRequestRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
				result.PlanAssignmentRequest = source.PlanAssignmentRequest
				wholePlanAssignmentRequestAccepted = true
			case UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdatePlanAssignmentRequestRequest_FieldSubPath:
			switch tp.selector {
			case UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest:
				planAssignmentRequestMask.AppendPath(tp.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath))
			case UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdatePlanAssignmentRequestRequestCAS_FieldPath))
			}
		}
	}
	if wholePlanAssignmentRequestAccepted == false && len(planAssignmentRequestMask.Paths) > 0 {
		result.PlanAssignmentRequest = planAssignmentRequestMask.Project(source.GetPlanAssignmentRequest())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdatePlanAssignmentRequestRequest))
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdatePlanAssignmentRequestRequest_CAS_FieldMask struct {
	Paths []UpdatePlanAssignmentRequestRequestCAS_FieldPath
}

func FullUpdatePlanAssignmentRequestRequest_CAS_FieldMask() *UpdatePlanAssignmentRequestRequest_CAS_FieldMask {
	res := &UpdatePlanAssignmentRequestRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdatePlanAssignmentRequestRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdatePlanAssignmentRequestRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) Subtract(other *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) *UpdatePlanAssignmentRequestRequest_CAS_FieldMask {
	result := &UpdatePlanAssignmentRequestRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdatePlanAssignmentRequestRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState: &plan_assignment_request.PlanAssignmentRequest_FieldMask{},
	}
	mySubMasks := map[UpdatePlanAssignmentRequestRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState: &plan_assignment_request.PlanAssignmentRequest_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState] = plan_assignment_request.FullPlanAssignmentRequest_FieldMask()
					}
				} else if tp, ok := path.(*UpdatePlanAssignmentRequestRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdatePlanAssignmentRequestRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdatePlanAssignmentRequestRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) FilterInputFields() *UpdatePlanAssignmentRequestRequest_CAS_FieldMask {
	result := &UpdatePlanAssignmentRequestRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range plan_assignment_request.FullPlanAssignmentRequest_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePlanAssignmentRequestRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdatePlanAssignmentRequestRequestCAS_FieldSubPath); ok {
				selectedMask := &plan_assignment_request.PlanAssignmentRequest_FieldMask{
					Paths: []plan_assignment_request.PlanAssignmentRequest_FieldPath{sub.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePlanAssignmentRequestRequestCAS_FieldSubPath{selector: UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdatePlanAssignmentRequestRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdatePlanAssignmentRequestRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdatePlanAssignmentRequestRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdatePlanAssignmentRequestRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) AppendPath(path UpdatePlanAssignmentRequestRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdatePlanAssignmentRequestRequestCAS_FieldPath))
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) GetPaths() []UpdatePlanAssignmentRequestRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdatePlanAssignmentRequestRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) Set(target, source *UpdatePlanAssignmentRequestRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdatePlanAssignmentRequestRequest_CAS), source.(*UpdatePlanAssignmentRequestRequest_CAS))
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) Project(source *UpdatePlanAssignmentRequestRequest_CAS) *UpdatePlanAssignmentRequestRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdatePlanAssignmentRequestRequest_CAS{}
	conditionalStateMask := &plan_assignment_request.PlanAssignmentRequest_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdatePlanAssignmentRequestRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(plan_assignment_request.PlanAssignmentRequest_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdatePlanAssignmentRequestRequest_CAS))
}

func (fieldMask *UpdatePlanAssignmentRequestRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeletePlanAssignmentRequestRequest_FieldMask struct {
	Paths []DeletePlanAssignmentRequestRequest_FieldPath
}

func FullDeletePlanAssignmentRequestRequest_FieldMask() *DeletePlanAssignmentRequestRequest_FieldMask {
	res := &DeletePlanAssignmentRequestRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeletePlanAssignmentRequestRequest_FieldTerminalPath{selector: DeletePlanAssignmentRequestRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeletePlanAssignmentRequestRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeletePlanAssignmentRequestRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeletePlanAssignmentRequestRequest_FieldPath(raw)
	})
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) Subtract(other *DeletePlanAssignmentRequestRequest_FieldMask) *DeletePlanAssignmentRequestRequest_FieldMask {
	result := &DeletePlanAssignmentRequestRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeletePlanAssignmentRequestRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeletePlanAssignmentRequestRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) FilterInputFields() *DeletePlanAssignmentRequestRequest_FieldMask {
	result := &DeletePlanAssignmentRequestRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeletePlanAssignmentRequestRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeletePlanAssignmentRequestRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeletePlanAssignmentRequestRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeletePlanAssignmentRequestRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) AppendPath(path DeletePlanAssignmentRequestRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeletePlanAssignmentRequestRequest_FieldPath))
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) GetPaths() []DeletePlanAssignmentRequestRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeletePlanAssignmentRequestRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) Set(target, source *DeletePlanAssignmentRequestRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeletePlanAssignmentRequestRequest), source.(*DeletePlanAssignmentRequestRequest))
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) Project(source *DeletePlanAssignmentRequestRequest) *DeletePlanAssignmentRequestRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeletePlanAssignmentRequestRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeletePlanAssignmentRequestRequest_FieldTerminalPath:
			switch tp.selector {
			case DeletePlanAssignmentRequestRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeletePlanAssignmentRequestRequest))
}

func (fieldMask *DeletePlanAssignmentRequestRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
