// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/plan_assignment_request_custom.proto
// DO NOT EDIT!!!

package plan_assignment_request_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	accepted_plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/accepted_plan"
	plan_assignment_request "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan_assignment_request"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &accepted_plan.AcceptedPlan{}
	_ = &plan_assignment_request.PlanAssignmentRequest{}
)

func (o *AcceptPlanAssignmentRequest) GotenObjectExt() {}

func (o *AcceptPlanAssignmentRequest) MakeFullFieldMask() *AcceptPlanAssignmentRequest_FieldMask {
	return FullAcceptPlanAssignmentRequest_FieldMask()
}

func (o *AcceptPlanAssignmentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAcceptPlanAssignmentRequest_FieldMask()
}

func (o *AcceptPlanAssignmentRequest) MakeDiffFieldMask(other *AcceptPlanAssignmentRequest) *AcceptPlanAssignmentRequest_FieldMask {
	if o == nil && other == nil {
		return &AcceptPlanAssignmentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAcceptPlanAssignmentRequest_FieldMask()
	}

	res := &AcceptPlanAssignmentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &AcceptPlanAssignmentRequest_FieldTerminalPath{selector: AcceptPlanAssignmentRequest_FieldPathSelectorName})
	}
	if o.GetApprover().String() != other.GetApprover().String() {
		res.Paths = append(res.Paths, &AcceptPlanAssignmentRequest_FieldTerminalPath{selector: AcceptPlanAssignmentRequest_FieldPathSelectorApprover})
	}
	return res
}

func (o *AcceptPlanAssignmentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AcceptPlanAssignmentRequest))
}

func (o *AcceptPlanAssignmentRequest) Clone() *AcceptPlanAssignmentRequest {
	if o == nil {
		return nil
	}
	result := &AcceptPlanAssignmentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &plan_assignment_request.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Approver == nil {
		result.Approver = nil
	} else if data, err := o.Approver.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Approver = &iam_organization.Reference{}
		if err := result.Approver.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *AcceptPlanAssignmentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AcceptPlanAssignmentRequest) Merge(source *AcceptPlanAssignmentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &plan_assignment_request.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetApprover() != nil {
		if data, err := source.GetApprover().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Approver = &iam_organization.Reference{}
			if err := o.Approver.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Approver = nil
	}
}

func (o *AcceptPlanAssignmentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AcceptPlanAssignmentRequest))
}

func (o *AcceptPlanAssignmentResponse) GotenObjectExt() {}

func (o *AcceptPlanAssignmentResponse) MakeFullFieldMask() *AcceptPlanAssignmentResponse_FieldMask {
	return FullAcceptPlanAssignmentResponse_FieldMask()
}

func (o *AcceptPlanAssignmentResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAcceptPlanAssignmentResponse_FieldMask()
}

func (o *AcceptPlanAssignmentResponse) MakeDiffFieldMask(other *AcceptPlanAssignmentResponse) *AcceptPlanAssignmentResponse_FieldMask {
	if o == nil && other == nil {
		return &AcceptPlanAssignmentResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAcceptPlanAssignmentResponse_FieldMask()
	}

	res := &AcceptPlanAssignmentResponse_FieldMask{}
	{
		subMask := o.GetAcceptedPlan().MakeDiffFieldMask(other.GetAcceptedPlan())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AcceptPlanAssignmentResponse_FieldTerminalPath{selector: AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AcceptPlanAssignmentResponse_FieldSubPath{selector: AcceptPlanAssignmentResponse_FieldPathSelectorAcceptedPlan, subPath: subpath})
			}
		}
	}
	return res
}

func (o *AcceptPlanAssignmentResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AcceptPlanAssignmentResponse))
}

func (o *AcceptPlanAssignmentResponse) Clone() *AcceptPlanAssignmentResponse {
	if o == nil {
		return nil
	}
	result := &AcceptPlanAssignmentResponse{}
	result.AcceptedPlan = o.AcceptedPlan.Clone()
	return result
}

func (o *AcceptPlanAssignmentResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AcceptPlanAssignmentResponse) Merge(source *AcceptPlanAssignmentResponse) {
	if source.GetAcceptedPlan() != nil {
		if o.AcceptedPlan == nil {
			o.AcceptedPlan = new(accepted_plan.AcceptedPlan)
		}
		o.AcceptedPlan.Merge(source.GetAcceptedPlan())
	}
}

func (o *AcceptPlanAssignmentResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AcceptPlanAssignmentResponse))
}

func (o *DeclinePlanAssignmentRequest) GotenObjectExt() {}

func (o *DeclinePlanAssignmentRequest) MakeFullFieldMask() *DeclinePlanAssignmentRequest_FieldMask {
	return FullDeclinePlanAssignmentRequest_FieldMask()
}

func (o *DeclinePlanAssignmentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeclinePlanAssignmentRequest_FieldMask()
}

func (o *DeclinePlanAssignmentRequest) MakeDiffFieldMask(other *DeclinePlanAssignmentRequest) *DeclinePlanAssignmentRequest_FieldMask {
	if o == nil && other == nil {
		return &DeclinePlanAssignmentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeclinePlanAssignmentRequest_FieldMask()
	}

	res := &DeclinePlanAssignmentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeclinePlanAssignmentRequest_FieldTerminalPath{selector: DeclinePlanAssignmentRequest_FieldPathSelectorName})
	}
	if o.GetApprover().String() != other.GetApprover().String() {
		res.Paths = append(res.Paths, &DeclinePlanAssignmentRequest_FieldTerminalPath{selector: DeclinePlanAssignmentRequest_FieldPathSelectorApprover})
	}
	if o.GetReason() != other.GetReason() {
		res.Paths = append(res.Paths, &DeclinePlanAssignmentRequest_FieldTerminalPath{selector: DeclinePlanAssignmentRequest_FieldPathSelectorReason})
	}
	return res
}

func (o *DeclinePlanAssignmentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeclinePlanAssignmentRequest))
}

func (o *DeclinePlanAssignmentRequest) Clone() *DeclinePlanAssignmentRequest {
	if o == nil {
		return nil
	}
	result := &DeclinePlanAssignmentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &plan_assignment_request.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Approver == nil {
		result.Approver = nil
	} else if data, err := o.Approver.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Approver = &iam_organization.Reference{}
		if err := result.Approver.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Reason = o.Reason
	return result
}

func (o *DeclinePlanAssignmentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeclinePlanAssignmentRequest) Merge(source *DeclinePlanAssignmentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &plan_assignment_request.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetApprover() != nil {
		if data, err := source.GetApprover().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Approver = &iam_organization.Reference{}
			if err := o.Approver.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Approver = nil
	}
	o.Reason = source.GetReason()
}

func (o *DeclinePlanAssignmentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeclinePlanAssignmentRequest))
}

func (o *DeclinePlanAssignmentResponse) GotenObjectExt() {}

func (o *DeclinePlanAssignmentResponse) MakeFullFieldMask() *DeclinePlanAssignmentResponse_FieldMask {
	return FullDeclinePlanAssignmentResponse_FieldMask()
}

func (o *DeclinePlanAssignmentResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeclinePlanAssignmentResponse_FieldMask()
}

func (o *DeclinePlanAssignmentResponse) MakeDiffFieldMask(other *DeclinePlanAssignmentResponse) *DeclinePlanAssignmentResponse_FieldMask {
	if o == nil && other == nil {
		return &DeclinePlanAssignmentResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeclinePlanAssignmentResponse_FieldMask()
	}

	res := &DeclinePlanAssignmentResponse_FieldMask{}
	return res
}

func (o *DeclinePlanAssignmentResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeclinePlanAssignmentResponse))
}

func (o *DeclinePlanAssignmentResponse) Clone() *DeclinePlanAssignmentResponse {
	if o == nil {
		return nil
	}
	result := &DeclinePlanAssignmentResponse{}
	return result
}

func (o *DeclinePlanAssignmentResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeclinePlanAssignmentResponse) Merge(source *DeclinePlanAssignmentResponse) {
}

func (o *DeclinePlanAssignmentResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeclinePlanAssignmentResponse))
}
