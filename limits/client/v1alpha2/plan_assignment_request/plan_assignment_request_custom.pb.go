// Code generated by protoc-gen-goten-go
// File: edgelq/limits/proto/v1alpha2/plan_assignment_request_custom.proto
// DO NOT EDIT!!!

package plan_assignment_request_client

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	accepted_plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/accepted_plan"
	plan_assignment_request "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan_assignment_request"
	view "github.com/cloudwan/goten-sdk/types/view"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &accepted_plan.AcceptedPlan{}
	_ = &plan_assignment_request.PlanAssignmentRequest{}
	_ = &fieldmaskpb.FieldMask{}
	_ = view.View(0)
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for method
// [ListApproverPlanAssignmentRequests][ntt.limits.v1alpha2.ListApproverPlanAssignmentRequests]
type ListApproverPlanAssignmentRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Approver of the plan assignment requests
	Approver *iam_organization.Name `protobuf:"bytes,1,opt,customtype=Name,name=approver,proto3" json:"approver,omitempty" firestore:"approver"`
	// Requested page size. Server may return fewer PlanAssignmentRequests than
	// requested. If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" firestore:"pageSize"`
	// A token identifying a page of results the server should return.
	// Typically, this is the value of
	// [ListPlanAssignmentRequestsResponse.next_page_token][ntt.limits.v1alpha2.ListPlanAssignmentRequestsResponse.next_page_token]
	PageToken *plan_assignment_request.PagerCursor `protobuf:"bytes,3,opt,customtype=PagerCursor,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" firestore:"pageToken"`
	// Order By -
	// https://cloud.google.com/apis/design/design_patterns#list_pagination list
	// of field path with order directive, either 'asc' or 'desc'. If direction is
	// not provided, 'asc' is assumed. e.g. "state.nested_field asc,
	// state.something.else desc, theme"
	OrderBy *plan_assignment_request.OrderBy `protobuf:"bytes,4,opt,customtype=OrderBy,name=order_by,json=orderBy,proto3" json:"order_by,omitempty" firestore:"orderBy"`
	// Filter - filter results by field criteria. Simplified SQL-like syntax with
	// following operators:
	// <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
	// [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
	// CONTAINS "severity:important" OR (state.last_error_time >
	// "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
	Filter *plan_assignment_request.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// A list of extra fields to be obtained for each response item on top of
	// fields defined by request field view
	FieldMask *plan_assignment_request.PlanAssignmentRequest_FieldMask `protobuf:"bytes,6,opt,customtype=PlanAssignmentRequest_FieldMask,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty" firestore:"fieldMask"`
	// View defines list of standard response fields present in response items.
	// Additional fields can be amended by request field field_mask
	View view.View `protobuf:"varint,7,opt,name=view,proto3,enum=goten.types.View" json:"view,omitempty" firestore:"view"`
}

func (m *ListApproverPlanAssignmentRequestsRequest) Reset() {
	*m = ListApproverPlanAssignmentRequestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ListApproverPlanAssignmentRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ListApproverPlanAssignmentRequestsRequest) ProtoMessage() {}

func (m *ListApproverPlanAssignmentRequestsRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ListApproverPlanAssignmentRequestsRequest) GotenMessage() {}

// Deprecated, Use ListApproverPlanAssignmentRequestsRequest.ProtoReflect.Descriptor instead.
func (*ListApproverPlanAssignmentRequestsRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDescGZIP(), []int{0}
}

func (m *ListApproverPlanAssignmentRequestsRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ListApproverPlanAssignmentRequestsRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ListApproverPlanAssignmentRequestsRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ListApproverPlanAssignmentRequestsRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ListApproverPlanAssignmentRequestsRequest) GetApprover() *iam_organization.Name {
	if m != nil {
		return m.Approver
	}
	return nil
}

func (m *ListApproverPlanAssignmentRequestsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return int32(0)
}

func (m *ListApproverPlanAssignmentRequestsRequest) GetPageToken() *plan_assignment_request.PagerCursor {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func (m *ListApproverPlanAssignmentRequestsRequest) GetOrderBy() *plan_assignment_request.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListApproverPlanAssignmentRequestsRequest) GetFilter() *plan_assignment_request.Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListApproverPlanAssignmentRequestsRequest) GetFieldMask() *plan_assignment_request.PlanAssignmentRequest_FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListApproverPlanAssignmentRequestsRequest) GetView() view.View {
	if m != nil {
		return m.View
	}
	return view.View_UNSPECIFIED
}

func (m *ListApproverPlanAssignmentRequestsRequest) SetApprover(fv *iam_organization.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Approver", "ListApproverPlanAssignmentRequestsRequest"))
	}
	m.Approver = fv
}

func (m *ListApproverPlanAssignmentRequestsRequest) SetPageSize(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageSize", "ListApproverPlanAssignmentRequestsRequest"))
	}
	m.PageSize = fv
}

func (m *ListApproverPlanAssignmentRequestsRequest) SetPageToken(fv *plan_assignment_request.PagerCursor) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PageToken", "ListApproverPlanAssignmentRequestsRequest"))
	}
	m.PageToken = fv
}

func (m *ListApproverPlanAssignmentRequestsRequest) SetOrderBy(fv *plan_assignment_request.OrderBy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OrderBy", "ListApproverPlanAssignmentRequestsRequest"))
	}
	m.OrderBy = fv
}

func (m *ListApproverPlanAssignmentRequestsRequest) SetFilter(fv *plan_assignment_request.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "ListApproverPlanAssignmentRequestsRequest"))
	}
	m.Filter = fv
}

func (m *ListApproverPlanAssignmentRequestsRequest) SetFieldMask(fv *plan_assignment_request.PlanAssignmentRequest_FieldMask) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FieldMask", "ListApproverPlanAssignmentRequestsRequest"))
	}
	m.FieldMask = fv
}

func (m *ListApproverPlanAssignmentRequestsRequest) SetView(fv view.View) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "View", "ListApproverPlanAssignmentRequestsRequest"))
	}
	m.View = fv
}

// Request message for method
// [AcceptPlanAssignment][ntt.limits.v1alpha2.AcceptPlanAssignment]
type AcceptPlanAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// name of ntt.limits.v1alpha2.PlanAssignmentRequest
	Name *plan_assignment_request.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Entity approving plan assignment. It can be left empty if the one approving
	// uses system-level privileges.
	Approver *iam_organization.Name `protobuf:"bytes,2,opt,customtype=Name,name=approver,proto3" json:"approver,omitempty" firestore:"approver"`
}

func (m *AcceptPlanAssignmentRequest) Reset() {
	*m = AcceptPlanAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AcceptPlanAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AcceptPlanAssignmentRequest) ProtoMessage() {}

func (m *AcceptPlanAssignmentRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AcceptPlanAssignmentRequest) GotenMessage() {}

// Deprecated, Use AcceptPlanAssignmentRequest.ProtoReflect.Descriptor instead.
func (*AcceptPlanAssignmentRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDescGZIP(), []int{1}
}

func (m *AcceptPlanAssignmentRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AcceptPlanAssignmentRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AcceptPlanAssignmentRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AcceptPlanAssignmentRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AcceptPlanAssignmentRequest) GetName() *plan_assignment_request.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *AcceptPlanAssignmentRequest) GetApprover() *iam_organization.Name {
	if m != nil {
		return m.Approver
	}
	return nil
}

func (m *AcceptPlanAssignmentRequest) SetName(fv *plan_assignment_request.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "AcceptPlanAssignmentRequest"))
	}
	m.Name = fv
}

func (m *AcceptPlanAssignmentRequest) SetApprover(fv *iam_organization.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Approver", "AcceptPlanAssignmentRequest"))
	}
	m.Approver = fv
}

// Response message for method
// [AcceptAssignment][ntt.limits.v1alpha2.AcceptAssignment]
type AcceptPlanAssignmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	AcceptedPlan  *accepted_plan.AcceptedPlan `protobuf:"bytes,1,opt,name=accepted_plan,json=acceptedPlan,proto3" json:"accepted_plan,omitempty" firestore:"acceptedPlan"`
}

func (m *AcceptPlanAssignmentResponse) Reset() {
	*m = AcceptPlanAssignmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AcceptPlanAssignmentResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AcceptPlanAssignmentResponse) ProtoMessage() {}

func (m *AcceptPlanAssignmentResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AcceptPlanAssignmentResponse) GotenMessage() {}

// Deprecated, Use AcceptPlanAssignmentResponse.ProtoReflect.Descriptor instead.
func (*AcceptPlanAssignmentResponse) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDescGZIP(), []int{2}
}

func (m *AcceptPlanAssignmentResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AcceptPlanAssignmentResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AcceptPlanAssignmentResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AcceptPlanAssignmentResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AcceptPlanAssignmentResponse) GetAcceptedPlan() *accepted_plan.AcceptedPlan {
	if m != nil {
		return m.AcceptedPlan
	}
	return nil
}

func (m *AcceptPlanAssignmentResponse) SetAcceptedPlan(fv *accepted_plan.AcceptedPlan) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AcceptedPlan", "AcceptPlanAssignmentResponse"))
	}
	m.AcceptedPlan = fv
}

// Request message for method
// [DeclineAssignment][ntt.limits.v1alpha2.DeclineAssignment]
type DeclinePlanAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	//  name of ntt.limits.v1alpha2.AssignmentRequest
	Name *plan_assignment_request.Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Entity approving plan assignment. It must match approver in
	// PlanAssignmentRequest.
	Approver *iam_organization.Name `protobuf:"bytes,2,opt,customtype=Name,name=approver,proto3" json:"approver,omitempty" firestore:"approver"`
	Reason   string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty" firestore:"reason"`
}

func (m *DeclinePlanAssignmentRequest) Reset() {
	*m = DeclinePlanAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeclinePlanAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeclinePlanAssignmentRequest) ProtoMessage() {}

func (m *DeclinePlanAssignmentRequest) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeclinePlanAssignmentRequest) GotenMessage() {}

// Deprecated, Use DeclinePlanAssignmentRequest.ProtoReflect.Descriptor instead.
func (*DeclinePlanAssignmentRequest) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDescGZIP(), []int{3}
}

func (m *DeclinePlanAssignmentRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeclinePlanAssignmentRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeclinePlanAssignmentRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeclinePlanAssignmentRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *DeclinePlanAssignmentRequest) GetName() *plan_assignment_request.Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DeclinePlanAssignmentRequest) GetApprover() *iam_organization.Name {
	if m != nil {
		return m.Approver
	}
	return nil
}

func (m *DeclinePlanAssignmentRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *DeclinePlanAssignmentRequest) SetName(fv *plan_assignment_request.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "DeclinePlanAssignmentRequest"))
	}
	m.Name = fv
}

func (m *DeclinePlanAssignmentRequest) SetApprover(fv *iam_organization.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Approver", "DeclinePlanAssignmentRequest"))
	}
	m.Approver = fv
}

func (m *DeclinePlanAssignmentRequest) SetReason(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reason", "DeclinePlanAssignmentRequest"))
	}
	m.Reason = fv
}

// Response message for method
// [DeclinePlanAssignment][ntt.limits.v1alpha2.DeclinePlanAssignment]
type DeclinePlanAssignmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *DeclinePlanAssignmentResponse) Reset() {
	*m = DeclinePlanAssignmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *DeclinePlanAssignmentResponse) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*DeclinePlanAssignmentResponse) ProtoMessage() {}

func (m *DeclinePlanAssignmentResponse) ProtoReflect() preflect.Message {
	mi := &edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*DeclinePlanAssignmentResponse) GotenMessage() {}

// Deprecated, Use DeclinePlanAssignmentResponse.ProtoReflect.Descriptor instead.
func (*DeclinePlanAssignmentResponse) Descriptor() ([]byte, []int) {
	return edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDescGZIP(), []int{4}
}

func (m *DeclinePlanAssignmentResponse) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *DeclinePlanAssignmentResponse) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *DeclinePlanAssignmentResponse) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *DeclinePlanAssignmentResponse) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

var edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto preflect.FileDescriptor

var edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDesc = []byte{
	0x0a, 0x41, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x03, 0x0a, 0x29, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f,
	0x0a, 0x1d, 0x0a, 0x1b, 0x69, 0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xca, 0xc6,
	0x27, 0x04, 0x12, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xb2, 0xda, 0x21, 0x19, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x6c,
	0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0xb2, 0xda, 0x21, 0x19, 0x2a, 0x17, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xb2, 0xda, 0x21, 0x19, 0x1a, 0x17,
	0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x58, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42,
	0x1d, 0xb2, 0xda, 0x21, 0x19, 0x32, 0x17, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x22, 0x91, 0x01, 0x0a, 0x1b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0xb2, 0xda, 0x21, 0x19, 0x0a, 0x17, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f, 0x0a, 0x1d, 0x0a, 0x1b, 0x69,
	0x61, 0x6d, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x22, 0x66, 0x0a, 0x1c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0xaa, 0x01, 0x0a,
	0x1c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xb2, 0xda, 0x21,
	0x19, 0x0a, 0x17, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3f, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f, 0x0a, 0x1d, 0x0a, 0x1b, 0x69, 0x61, 0x6d, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x63,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xaa, 0x01, 0x0a, 0x1a, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x20, 0x50, 0x6c, 0x61, 0x6e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x68, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3b, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDescOnce sync.Once
	edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDescData = edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDesc
)

func edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDescGZIP() []byte {
	edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDescOnce.Do(func() {
		edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDescData)
	})
	return edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDescData
}

var edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_goTypes = []interface{}{
	(*ListApproverPlanAssignmentRequestsRequest)(nil),               // 0: ntt.limits.v1alpha2.ListApproverPlanAssignmentRequestsRequest
	(*AcceptPlanAssignmentRequest)(nil),                             // 1: ntt.limits.v1alpha2.AcceptPlanAssignmentRequest
	(*AcceptPlanAssignmentResponse)(nil),                            // 2: ntt.limits.v1alpha2.AcceptPlanAssignmentResponse
	(*DeclinePlanAssignmentRequest)(nil),                            // 3: ntt.limits.v1alpha2.DeclinePlanAssignmentRequest
	(*DeclinePlanAssignmentResponse)(nil),                           // 4: ntt.limits.v1alpha2.DeclinePlanAssignmentResponse
	(*plan_assignment_request.PlanAssignmentRequest_FieldMask)(nil), // 5: ntt.limits.v1alpha2.PlanAssignmentRequest_FieldMask
	(view.View)(0),                     // 6: goten.types.View
	(*accepted_plan.AcceptedPlan)(nil), // 7: ntt.limits.v1alpha2.AcceptedPlan
}
var edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_depIdxs = []int32{
	5, // 0: ntt.limits.v1alpha2.ListApproverPlanAssignmentRequestsRequest.field_mask:type_name -> ntt.limits.v1alpha2.PlanAssignmentRequest_FieldMask
	6, // 1: ntt.limits.v1alpha2.ListApproverPlanAssignmentRequestsRequest.view:type_name -> goten.types.View
	7, // 2: ntt.limits.v1alpha2.AcceptPlanAssignmentResponse.accepted_plan:type_name -> ntt.limits.v1alpha2.AcceptedPlan
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_init() }
func edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_init() {
	if edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApproverPlanAssignmentRequestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptPlanAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptPlanAssignmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclinePlanAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclinePlanAssignmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_goTypes,
		DependencyIndexes: edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_depIdxs,
		MessageInfos:      edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_msgTypes,
	}.Build()
	edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto = out.File
	edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_rawDesc = nil
	edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_goTypes = nil
	edgelq_limits_proto_v1alpha2_plan_assignment_request_custom_proto_depIdxs = nil
}
