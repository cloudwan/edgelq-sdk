// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/plan_assignment_request_service.proto
// DO NOT EDIT!!!

package plan_assignment_request_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	plan_assignment_request "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan_assignment_request"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &plan_assignment_request.PlanAssignmentRequest{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetPlanAssignmentRequestRequest) GotenObjectExt() {}

func (o *GetPlanAssignmentRequestRequest) MakeFullFieldMask() *GetPlanAssignmentRequestRequest_FieldMask {
	return FullGetPlanAssignmentRequestRequest_FieldMask()
}

func (o *GetPlanAssignmentRequestRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetPlanAssignmentRequestRequest_FieldMask()
}

func (o *GetPlanAssignmentRequestRequest) MakeDiffFieldMask(other *GetPlanAssignmentRequestRequest) *GetPlanAssignmentRequestRequest_FieldMask {
	if o == nil && other == nil {
		return &GetPlanAssignmentRequestRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetPlanAssignmentRequestRequest_FieldMask()
	}

	res := &GetPlanAssignmentRequestRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetPlanAssignmentRequestRequest_FieldTerminalPath{selector: GetPlanAssignmentRequestRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetPlanAssignmentRequestRequest_FieldTerminalPath{selector: GetPlanAssignmentRequestRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetPlanAssignmentRequestRequest_FieldTerminalPath{selector: GetPlanAssignmentRequestRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetPlanAssignmentRequestRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetPlanAssignmentRequestRequest))
}

func (o *GetPlanAssignmentRequestRequest) Clone() *GetPlanAssignmentRequestRequest {
	if o == nil {
		return nil
	}
	result := &GetPlanAssignmentRequestRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &plan_assignment_request.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	result.View = o.View
	return result
}

func (o *GetPlanAssignmentRequestRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetPlanAssignmentRequestRequest) Merge(source *GetPlanAssignmentRequestRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &plan_assignment_request.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan_assignment_request.PlanAssignmentRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetPlanAssignmentRequestRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetPlanAssignmentRequestRequest))
}

func (o *BatchGetPlanAssignmentRequestsRequest) GotenObjectExt() {}

func (o *BatchGetPlanAssignmentRequestsRequest) MakeFullFieldMask() *BatchGetPlanAssignmentRequestsRequest_FieldMask {
	return FullBatchGetPlanAssignmentRequestsRequest_FieldMask()
}

func (o *BatchGetPlanAssignmentRequestsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPlanAssignmentRequestsRequest_FieldMask()
}

func (o *BatchGetPlanAssignmentRequestsRequest) MakeDiffFieldMask(other *BatchGetPlanAssignmentRequestsRequest) *BatchGetPlanAssignmentRequestsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPlanAssignmentRequestsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPlanAssignmentRequestsRequest_FieldMask()
	}

	res := &BatchGetPlanAssignmentRequestsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetPlanAssignmentRequestsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetPlanAssignmentRequestsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPlanAssignmentRequestsRequest))
}

func (o *BatchGetPlanAssignmentRequestsRequest) Clone() *BatchGetPlanAssignmentRequestsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetPlanAssignmentRequestsRequest{}
	result.Names = make([]*plan_assignment_request.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &plan_assignment_request.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetPlanAssignmentRequestsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPlanAssignmentRequestsRequest) Merge(source *BatchGetPlanAssignmentRequestsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan_assignment_request.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &plan_assignment_request.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan_assignment_request.PlanAssignmentRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetPlanAssignmentRequestsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPlanAssignmentRequestsRequest))
}

func (o *BatchGetPlanAssignmentRequestsResponse) GotenObjectExt() {}

func (o *BatchGetPlanAssignmentRequestsResponse) MakeFullFieldMask() *BatchGetPlanAssignmentRequestsResponse_FieldMask {
	return FullBatchGetPlanAssignmentRequestsResponse_FieldMask()
}

func (o *BatchGetPlanAssignmentRequestsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPlanAssignmentRequestsResponse_FieldMask()
}

func (o *BatchGetPlanAssignmentRequestsResponse) MakeDiffFieldMask(other *BatchGetPlanAssignmentRequestsResponse) *BatchGetPlanAssignmentRequestsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPlanAssignmentRequestsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPlanAssignmentRequestsResponse_FieldMask()
	}

	res := &BatchGetPlanAssignmentRequestsResponse_FieldMask{}

	if len(o.GetPlanAssignmentRequests()) == len(other.GetPlanAssignmentRequests()) {
		for i, lValue := range o.GetPlanAssignmentRequests() {
			rValue := other.GetPlanAssignmentRequests()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPlanAssignmentRequestsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentRequestsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetPlanAssignmentRequestsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPlanAssignmentRequestsResponse))
}

func (o *BatchGetPlanAssignmentRequestsResponse) Clone() *BatchGetPlanAssignmentRequestsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetPlanAssignmentRequestsResponse{}
	result.PlanAssignmentRequests = make([]*plan_assignment_request.PlanAssignmentRequest, len(o.PlanAssignmentRequests))
	for i, sourceValue := range o.PlanAssignmentRequests {
		result.PlanAssignmentRequests[i] = sourceValue.Clone()
	}
	result.Missing = make([]*plan_assignment_request.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &plan_assignment_request.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetPlanAssignmentRequestsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPlanAssignmentRequestsResponse) Merge(source *BatchGetPlanAssignmentRequestsResponse) {
	for _, sourceValue := range source.GetPlanAssignmentRequests() {
		exists := false
		for _, currentValue := range o.PlanAssignmentRequests {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan_assignment_request.PlanAssignmentRequest
			if sourceValue != nil {
				newDstElement = new(plan_assignment_request.PlanAssignmentRequest)
				newDstElement.Merge(sourceValue)
			}
			o.PlanAssignmentRequests = append(o.PlanAssignmentRequests, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan_assignment_request.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &plan_assignment_request.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetPlanAssignmentRequestsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPlanAssignmentRequestsResponse))
}

func (o *ListPlanAssignmentRequestsRequest) GotenObjectExt() {}

func (o *ListPlanAssignmentRequestsRequest) MakeFullFieldMask() *ListPlanAssignmentRequestsRequest_FieldMask {
	return FullListPlanAssignmentRequestsRequest_FieldMask()
}

func (o *ListPlanAssignmentRequestsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPlanAssignmentRequestsRequest_FieldMask()
}

func (o *ListPlanAssignmentRequestsRequest) MakeDiffFieldMask(other *ListPlanAssignmentRequestsRequest) *ListPlanAssignmentRequestsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListPlanAssignmentRequestsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPlanAssignmentRequestsRequest_FieldMask()
	}

	res := &ListPlanAssignmentRequestsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListPlanAssignmentRequestsRequest_FieldTerminalPath{selector: ListPlanAssignmentRequestsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListPlanAssignmentRequestsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPlanAssignmentRequestsRequest))
}

func (o *ListPlanAssignmentRequestsRequest) Clone() *ListPlanAssignmentRequestsRequest {
	if o == nil {
		return nil
	}
	result := &ListPlanAssignmentRequestsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &plan_assignment_request.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &plan_assignment_request.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &plan_assignment_request.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &plan_assignment_request.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListPlanAssignmentRequestsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPlanAssignmentRequestsRequest) Merge(source *ListPlanAssignmentRequestsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &plan_assignment_request.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &plan_assignment_request.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &plan_assignment_request.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &plan_assignment_request.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan_assignment_request.PlanAssignmentRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListPlanAssignmentRequestsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPlanAssignmentRequestsRequest))
}

func (o *ListPlanAssignmentRequestsResponse) GotenObjectExt() {}

func (o *ListPlanAssignmentRequestsResponse) MakeFullFieldMask() *ListPlanAssignmentRequestsResponse_FieldMask {
	return FullListPlanAssignmentRequestsResponse_FieldMask()
}

func (o *ListPlanAssignmentRequestsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPlanAssignmentRequestsResponse_FieldMask()
}

func (o *ListPlanAssignmentRequestsResponse) MakeDiffFieldMask(other *ListPlanAssignmentRequestsResponse) *ListPlanAssignmentRequestsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListPlanAssignmentRequestsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPlanAssignmentRequestsResponse_FieldMask()
	}

	res := &ListPlanAssignmentRequestsResponse_FieldMask{}

	if len(o.GetPlanAssignmentRequests()) == len(other.GetPlanAssignmentRequests()) {
		for i, lValue := range o.GetPlanAssignmentRequests() {
			rValue := other.GetPlanAssignmentRequests()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListPlanAssignmentRequestsResponse_FieldTerminalPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListPlanAssignmentRequestsResponse_FieldTerminalPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequests})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListPlanAssignmentRequestsResponse_FieldTerminalPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListPlanAssignmentRequestsResponse_FieldTerminalPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListPlanAssignmentRequestsResponse_FieldTerminalPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListPlanAssignmentRequestsResponse_FieldTerminalPath{selector: ListPlanAssignmentRequestsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListPlanAssignmentRequestsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPlanAssignmentRequestsResponse))
}

func (o *ListPlanAssignmentRequestsResponse) Clone() *ListPlanAssignmentRequestsResponse {
	if o == nil {
		return nil
	}
	result := &ListPlanAssignmentRequestsResponse{}
	result.PlanAssignmentRequests = make([]*plan_assignment_request.PlanAssignmentRequest, len(o.PlanAssignmentRequests))
	for i, sourceValue := range o.PlanAssignmentRequests {
		result.PlanAssignmentRequests[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &plan_assignment_request.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &plan_assignment_request.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListPlanAssignmentRequestsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPlanAssignmentRequestsResponse) Merge(source *ListPlanAssignmentRequestsResponse) {
	for _, sourceValue := range source.GetPlanAssignmentRequests() {
		exists := false
		for _, currentValue := range o.PlanAssignmentRequests {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan_assignment_request.PlanAssignmentRequest
			if sourceValue != nil {
				newDstElement = new(plan_assignment_request.PlanAssignmentRequest)
				newDstElement.Merge(sourceValue)
			}
			o.PlanAssignmentRequests = append(o.PlanAssignmentRequests, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &plan_assignment_request.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &plan_assignment_request.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListPlanAssignmentRequestsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPlanAssignmentRequestsResponse))
}

func (o *WatchPlanAssignmentRequestRequest) GotenObjectExt() {}

func (o *WatchPlanAssignmentRequestRequest) MakeFullFieldMask() *WatchPlanAssignmentRequestRequest_FieldMask {
	return FullWatchPlanAssignmentRequestRequest_FieldMask()
}

func (o *WatchPlanAssignmentRequestRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlanAssignmentRequestRequest_FieldMask()
}

func (o *WatchPlanAssignmentRequestRequest) MakeDiffFieldMask(other *WatchPlanAssignmentRequestRequest) *WatchPlanAssignmentRequestRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPlanAssignmentRequestRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlanAssignmentRequestRequest_FieldMask()
	}

	res := &WatchPlanAssignmentRequestRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchPlanAssignmentRequestRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlanAssignmentRequestRequest))
}

func (o *WatchPlanAssignmentRequestRequest) Clone() *WatchPlanAssignmentRequestRequest {
	if o == nil {
		return nil
	}
	result := &WatchPlanAssignmentRequestRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &plan_assignment_request.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchPlanAssignmentRequestRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlanAssignmentRequestRequest) Merge(source *WatchPlanAssignmentRequestRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &plan_assignment_request.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan_assignment_request.PlanAssignmentRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchPlanAssignmentRequestRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlanAssignmentRequestRequest))
}

func (o *WatchPlanAssignmentRequestResponse) GotenObjectExt() {}

func (o *WatchPlanAssignmentRequestResponse) MakeFullFieldMask() *WatchPlanAssignmentRequestResponse_FieldMask {
	return FullWatchPlanAssignmentRequestResponse_FieldMask()
}

func (o *WatchPlanAssignmentRequestResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlanAssignmentRequestResponse_FieldMask()
}

func (o *WatchPlanAssignmentRequestResponse) MakeDiffFieldMask(other *WatchPlanAssignmentRequestResponse) *WatchPlanAssignmentRequestResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPlanAssignmentRequestResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlanAssignmentRequestResponse_FieldMask()
	}

	res := &WatchPlanAssignmentRequestResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchPlanAssignmentRequestResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlanAssignmentRequestResponse))
}

func (o *WatchPlanAssignmentRequestResponse) Clone() *WatchPlanAssignmentRequestResponse {
	if o == nil {
		return nil
	}
	result := &WatchPlanAssignmentRequestResponse{}
	result.Change = proto.Clone(o.Change).(*plan_assignment_request.PlanAssignmentRequestChange)
	return result
}

func (o *WatchPlanAssignmentRequestResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlanAssignmentRequestResponse) Merge(source *WatchPlanAssignmentRequestResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(plan_assignment_request.PlanAssignmentRequestChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchPlanAssignmentRequestResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlanAssignmentRequestResponse))
}

func (o *WatchPlanAssignmentRequestsRequest) GotenObjectExt() {}

func (o *WatchPlanAssignmentRequestsRequest) MakeFullFieldMask() *WatchPlanAssignmentRequestsRequest_FieldMask {
	return FullWatchPlanAssignmentRequestsRequest_FieldMask()
}

func (o *WatchPlanAssignmentRequestsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlanAssignmentRequestsRequest_FieldMask()
}

func (o *WatchPlanAssignmentRequestsRequest) MakeDiffFieldMask(other *WatchPlanAssignmentRequestsRequest) *WatchPlanAssignmentRequestsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPlanAssignmentRequestsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlanAssignmentRequestsRequest_FieldMask()
	}

	res := &WatchPlanAssignmentRequestsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequestsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchPlanAssignmentRequestsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlanAssignmentRequestsRequest))
}

func (o *WatchPlanAssignmentRequestsRequest) Clone() *WatchPlanAssignmentRequestsRequest {
	if o == nil {
		return nil
	}
	result := &WatchPlanAssignmentRequestsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &plan_assignment_request.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &plan_assignment_request.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &plan_assignment_request.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &plan_assignment_request.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchPlanAssignmentRequestsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlanAssignmentRequestsRequest) Merge(source *WatchPlanAssignmentRequestsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &plan_assignment_request.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &plan_assignment_request.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &plan_assignment_request.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &plan_assignment_request.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan_assignment_request.PlanAssignmentRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchPlanAssignmentRequestsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlanAssignmentRequestsRequest))
}

func (o *WatchPlanAssignmentRequestsResponse) GotenObjectExt() {}

func (o *WatchPlanAssignmentRequestsResponse) MakeFullFieldMask() *WatchPlanAssignmentRequestsResponse_FieldMask {
	return FullWatchPlanAssignmentRequestsResponse_FieldMask()
}

func (o *WatchPlanAssignmentRequestsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlanAssignmentRequestsResponse_FieldMask()
}

func (o *WatchPlanAssignmentRequestsResponse) MakeDiffFieldMask(other *WatchPlanAssignmentRequestsResponse) *WatchPlanAssignmentRequestsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPlanAssignmentRequestsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlanAssignmentRequestsResponse_FieldMask()
	}

	res := &WatchPlanAssignmentRequestsResponse_FieldMask{}

	if len(o.GetPlanAssignmentRequestChanges()) == len(other.GetPlanAssignmentRequestChanges()) {
		for i, lValue := range o.GetPlanAssignmentRequestChanges() {
			rValue := other.GetPlanAssignmentRequestChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorPlanAssignmentRequestChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldSubPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponse_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchPlanAssignmentRequestsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlanAssignmentRequestsResponse))
}

func (o *WatchPlanAssignmentRequestsResponse) Clone() *WatchPlanAssignmentRequestsResponse {
	if o == nil {
		return nil
	}
	result := &WatchPlanAssignmentRequestsResponse{}
	result.PlanAssignmentRequestChanges = make([]*plan_assignment_request.PlanAssignmentRequestChange, len(o.PlanAssignmentRequestChanges))
	for i, sourceValue := range o.PlanAssignmentRequestChanges {
		result.PlanAssignmentRequestChanges[i] = proto.Clone(sourceValue).(*plan_assignment_request.PlanAssignmentRequestChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchPlanAssignmentRequestsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlanAssignmentRequestsResponse) Merge(source *WatchPlanAssignmentRequestsResponse) {
	for _, sourceValue := range source.GetPlanAssignmentRequestChanges() {
		exists := false
		for _, currentValue := range o.PlanAssignmentRequestChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan_assignment_request.PlanAssignmentRequestChange
			if sourceValue != nil {
				newDstElement = new(plan_assignment_request.PlanAssignmentRequestChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.PlanAssignmentRequestChanges = append(o.PlanAssignmentRequestChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchPlanAssignmentRequestsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchPlanAssignmentRequestsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlanAssignmentRequestsResponse))
}

func (o *WatchPlanAssignmentRequestsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchPlanAssignmentRequestsResponse_PageTokenChange) MakeFullFieldMask() *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask {
	return FullWatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask()
}

func (o *WatchPlanAssignmentRequestsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask()
}

func (o *WatchPlanAssignmentRequestsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchPlanAssignmentRequestsResponse_PageTokenChange) *WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchPlanAssignmentRequestsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequestsResponsePageTokenChange_FieldTerminalPath{selector: WatchPlanAssignmentRequestsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchPlanAssignmentRequestsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlanAssignmentRequestsResponse_PageTokenChange))
}

func (o *WatchPlanAssignmentRequestsResponse_PageTokenChange) Clone() *WatchPlanAssignmentRequestsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchPlanAssignmentRequestsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &plan_assignment_request.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &plan_assignment_request.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchPlanAssignmentRequestsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlanAssignmentRequestsResponse_PageTokenChange) Merge(source *WatchPlanAssignmentRequestsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &plan_assignment_request.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &plan_assignment_request.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchPlanAssignmentRequestsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlanAssignmentRequestsResponse_PageTokenChange))
}

func (o *CreatePlanAssignmentRequestRequest) GotenObjectExt() {}

func (o *CreatePlanAssignmentRequestRequest) MakeFullFieldMask() *CreatePlanAssignmentRequestRequest_FieldMask {
	return FullCreatePlanAssignmentRequestRequest_FieldMask()
}

func (o *CreatePlanAssignmentRequestRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreatePlanAssignmentRequestRequest_FieldMask()
}

func (o *CreatePlanAssignmentRequestRequest) MakeDiffFieldMask(other *CreatePlanAssignmentRequestRequest) *CreatePlanAssignmentRequestRequest_FieldMask {
	if o == nil && other == nil {
		return &CreatePlanAssignmentRequestRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreatePlanAssignmentRequestRequest_FieldMask()
	}

	res := &CreatePlanAssignmentRequestRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreatePlanAssignmentRequestRequest_FieldTerminalPath{selector: CreatePlanAssignmentRequestRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetPlanAssignmentRequest().MakeDiffFieldMask(other.GetPlanAssignmentRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreatePlanAssignmentRequestRequest_FieldTerminalPath{selector: CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreatePlanAssignmentRequestRequest_FieldSubPath{selector: CreatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreatePlanAssignmentRequestRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreatePlanAssignmentRequestRequest))
}

func (o *CreatePlanAssignmentRequestRequest) Clone() *CreatePlanAssignmentRequestRequest {
	if o == nil {
		return nil
	}
	result := &CreatePlanAssignmentRequestRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &plan_assignment_request.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PlanAssignmentRequest = o.PlanAssignmentRequest.Clone()
	return result
}

func (o *CreatePlanAssignmentRequestRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreatePlanAssignmentRequestRequest) Merge(source *CreatePlanAssignmentRequestRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &plan_assignment_request.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetPlanAssignmentRequest() != nil {
		if o.PlanAssignmentRequest == nil {
			o.PlanAssignmentRequest = new(plan_assignment_request.PlanAssignmentRequest)
		}
		o.PlanAssignmentRequest.Merge(source.GetPlanAssignmentRequest())
	}
}

func (o *CreatePlanAssignmentRequestRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreatePlanAssignmentRequestRequest))
}

func (o *UpdatePlanAssignmentRequestRequest) GotenObjectExt() {}

func (o *UpdatePlanAssignmentRequestRequest) MakeFullFieldMask() *UpdatePlanAssignmentRequestRequest_FieldMask {
	return FullUpdatePlanAssignmentRequestRequest_FieldMask()
}

func (o *UpdatePlanAssignmentRequestRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePlanAssignmentRequestRequest_FieldMask()
}

func (o *UpdatePlanAssignmentRequestRequest) MakeDiffFieldMask(other *UpdatePlanAssignmentRequestRequest) *UpdatePlanAssignmentRequestRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdatePlanAssignmentRequestRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePlanAssignmentRequestRequest_FieldMask()
	}

	res := &UpdatePlanAssignmentRequestRequest_FieldMask{}
	{
		subMask := o.GetPlanAssignmentRequest().MakeDiffFieldMask(other.GetPlanAssignmentRequest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequest_FieldSubPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorPlanAssignmentRequest, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequest_FieldSubPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdatePlanAssignmentRequestRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePlanAssignmentRequestRequest))
}

func (o *UpdatePlanAssignmentRequestRequest) Clone() *UpdatePlanAssignmentRequestRequest {
	if o == nil {
		return nil
	}
	result := &UpdatePlanAssignmentRequestRequest{}
	result.PlanAssignmentRequest = o.PlanAssignmentRequest.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdatePlanAssignmentRequestRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePlanAssignmentRequestRequest) Merge(source *UpdatePlanAssignmentRequestRequest) {
	if source.GetPlanAssignmentRequest() != nil {
		if o.PlanAssignmentRequest == nil {
			o.PlanAssignmentRequest = new(plan_assignment_request.PlanAssignmentRequest)
		}
		o.PlanAssignmentRequest.Merge(source.GetPlanAssignmentRequest())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(plan_assignment_request.PlanAssignmentRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdatePlanAssignmentRequestRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdatePlanAssignmentRequestRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePlanAssignmentRequestRequest))
}

func (o *UpdatePlanAssignmentRequestRequest_CAS) GotenObjectExt() {}

func (o *UpdatePlanAssignmentRequestRequest_CAS) MakeFullFieldMask() *UpdatePlanAssignmentRequestRequest_CAS_FieldMask {
	return FullUpdatePlanAssignmentRequestRequest_CAS_FieldMask()
}

func (o *UpdatePlanAssignmentRequestRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePlanAssignmentRequestRequest_CAS_FieldMask()
}

func (o *UpdatePlanAssignmentRequestRequest_CAS) MakeDiffFieldMask(other *UpdatePlanAssignmentRequestRequest_CAS) *UpdatePlanAssignmentRequestRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdatePlanAssignmentRequestRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePlanAssignmentRequestRequest_CAS_FieldMask()
	}

	res := &UpdatePlanAssignmentRequestRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequestCAS_FieldSubPath{selector: UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestRequestCAS_FieldTerminalPath{selector: UpdatePlanAssignmentRequestRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdatePlanAssignmentRequestRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePlanAssignmentRequestRequest_CAS))
}

func (o *UpdatePlanAssignmentRequestRequest_CAS) Clone() *UpdatePlanAssignmentRequestRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdatePlanAssignmentRequestRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*plan_assignment_request.PlanAssignmentRequest_FieldMask)
	return result
}

func (o *UpdatePlanAssignmentRequestRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePlanAssignmentRequestRequest_CAS) Merge(source *UpdatePlanAssignmentRequestRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(plan_assignment_request.PlanAssignmentRequest)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan_assignment_request.PlanAssignmentRequest_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdatePlanAssignmentRequestRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePlanAssignmentRequestRequest_CAS))
}

func (o *DeletePlanAssignmentRequestRequest) GotenObjectExt() {}

func (o *DeletePlanAssignmentRequestRequest) MakeFullFieldMask() *DeletePlanAssignmentRequestRequest_FieldMask {
	return FullDeletePlanAssignmentRequestRequest_FieldMask()
}

func (o *DeletePlanAssignmentRequestRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeletePlanAssignmentRequestRequest_FieldMask()
}

func (o *DeletePlanAssignmentRequestRequest) MakeDiffFieldMask(other *DeletePlanAssignmentRequestRequest) *DeletePlanAssignmentRequestRequest_FieldMask {
	if o == nil && other == nil {
		return &DeletePlanAssignmentRequestRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeletePlanAssignmentRequestRequest_FieldMask()
	}

	res := &DeletePlanAssignmentRequestRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeletePlanAssignmentRequestRequest_FieldTerminalPath{selector: DeletePlanAssignmentRequestRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeletePlanAssignmentRequestRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeletePlanAssignmentRequestRequest))
}

func (o *DeletePlanAssignmentRequestRequest) Clone() *DeletePlanAssignmentRequestRequest {
	if o == nil {
		return nil
	}
	result := &DeletePlanAssignmentRequestRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &plan_assignment_request.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeletePlanAssignmentRequestRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeletePlanAssignmentRequestRequest) Merge(source *DeletePlanAssignmentRequestRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &plan_assignment_request.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeletePlanAssignmentRequestRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeletePlanAssignmentRequestRequest))
}
