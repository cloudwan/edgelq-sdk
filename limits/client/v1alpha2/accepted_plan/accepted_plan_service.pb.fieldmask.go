// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/accepted_plan_service.proto
// DO NOT EDIT!!!

package accepted_plan_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	accepted_plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/accepted_plan"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &accepted_plan.AcceptedPlan{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

type GetAcceptedPlanRequest_FieldMask struct {
	Paths []GetAcceptedPlanRequest_FieldPath
}

func FullGetAcceptedPlanRequest_FieldMask() *GetAcceptedPlanRequest_FieldMask {
	res := &GetAcceptedPlanRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetAcceptedPlanRequest_FieldTerminalPath{selector: GetAcceptedPlanRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetAcceptedPlanRequest_FieldTerminalPath{selector: GetAcceptedPlanRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetAcceptedPlanRequest_FieldTerminalPath{selector: GetAcceptedPlanRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetAcceptedPlanRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetAcceptedPlanRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetAcceptedPlanRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetAcceptedPlanRequest_FieldPath(raw)
	})
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) Subtract(other *GetAcceptedPlanRequest_FieldMask) *GetAcceptedPlanRequest_FieldMask {
	result := &GetAcceptedPlanRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetAcceptedPlanRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetAcceptedPlanRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetAcceptedPlanRequest_FieldMask) FilterInputFields() *GetAcceptedPlanRequest_FieldMask {
	result := &GetAcceptedPlanRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetAcceptedPlanRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetAcceptedPlanRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetAcceptedPlanRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetAcceptedPlanRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetAcceptedPlanRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) AppendPath(path GetAcceptedPlanRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetAcceptedPlanRequest_FieldPath))
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) GetPaths() []GetAcceptedPlanRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetAcceptedPlanRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) Set(target, source *GetAcceptedPlanRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetAcceptedPlanRequest), source.(*GetAcceptedPlanRequest))
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) Project(source *GetAcceptedPlanRequest) *GetAcceptedPlanRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetAcceptedPlanRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetAcceptedPlanRequest_FieldTerminalPath:
			switch tp.selector {
			case GetAcceptedPlanRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetAcceptedPlanRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetAcceptedPlanRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetAcceptedPlanRequest))
}

func (fieldMask *GetAcceptedPlanRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetAcceptedPlansRequest_FieldMask struct {
	Paths []BatchGetAcceptedPlansRequest_FieldPath
}

func FullBatchGetAcceptedPlansRequest_FieldMask() *BatchGetAcceptedPlansRequest_FieldMask {
	res := &BatchGetAcceptedPlansRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetAcceptedPlansRequest_FieldTerminalPath{selector: BatchGetAcceptedPlansRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetAcceptedPlansRequest_FieldTerminalPath{selector: BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetAcceptedPlansRequest_FieldTerminalPath{selector: BatchGetAcceptedPlansRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetAcceptedPlansRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetAcceptedPlansRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetAcceptedPlansRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) Subtract(other *BatchGetAcceptedPlansRequest_FieldMask) *BatchGetAcceptedPlansRequest_FieldMask {
	result := &BatchGetAcceptedPlansRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetAcceptedPlansRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetAcceptedPlansRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) FilterInputFields() *BatchGetAcceptedPlansRequest_FieldMask {
	result := &BatchGetAcceptedPlansRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetAcceptedPlansRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetAcceptedPlansRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetAcceptedPlansRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetAcceptedPlansRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) AppendPath(path BatchGetAcceptedPlansRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetAcceptedPlansRequest_FieldPath))
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) GetPaths() []BatchGetAcceptedPlansRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetAcceptedPlansRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) Set(target, source *BatchGetAcceptedPlansRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetAcceptedPlansRequest), source.(*BatchGetAcceptedPlansRequest))
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) Project(source *BatchGetAcceptedPlansRequest) *BatchGetAcceptedPlansRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetAcceptedPlansRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetAcceptedPlansRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetAcceptedPlansRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetAcceptedPlansRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetAcceptedPlansRequest))
}

func (fieldMask *BatchGetAcceptedPlansRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetAcceptedPlansResponse_FieldMask struct {
	Paths []BatchGetAcceptedPlansResponse_FieldPath
}

func FullBatchGetAcceptedPlansResponse_FieldMask() *BatchGetAcceptedPlansResponse_FieldMask {
	res := &BatchGetAcceptedPlansResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetAcceptedPlansResponse_FieldTerminalPath{selector: BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans})
	res.Paths = append(res.Paths, &BatchGetAcceptedPlansResponse_FieldTerminalPath{selector: BatchGetAcceptedPlansResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetAcceptedPlansResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetAcceptedPlansResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetAcceptedPlansResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) Subtract(other *BatchGetAcceptedPlansResponse_FieldMask) *BatchGetAcceptedPlansResponse_FieldMask {
	result := &BatchGetAcceptedPlansResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetAcceptedPlansResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans: &accepted_plan.AcceptedPlan_FieldMask{},
	}
	mySubMasks := map[BatchGetAcceptedPlansResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans: &accepted_plan.AcceptedPlan_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetAcceptedPlansResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetAcceptedPlansResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetAcceptedPlansResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
						mySubMasks[BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans] = accepted_plan.FullAcceptedPlan_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetAcceptedPlansResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetAcceptedPlansResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetAcceptedPlansResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) FilterInputFields() *BatchGetAcceptedPlansResponse_FieldMask {
	result := &BatchGetAcceptedPlansResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
			if _, ok := path.(*BatchGetAcceptedPlansResponse_FieldTerminalPath); ok {
				for _, subpath := range accepted_plan.FullAcceptedPlan_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetAcceptedPlansResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetAcceptedPlansResponse_FieldSubPath); ok {
				selectedMask := &accepted_plan.AcceptedPlan_FieldMask{
					Paths: []accepted_plan.AcceptedPlan_FieldPath{sub.subPath.(accepted_plan.AcceptedPlan_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetAcceptedPlansResponse_FieldSubPath{selector: BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetAcceptedPlansResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetAcceptedPlansResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetAcceptedPlansResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetAcceptedPlansResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) AppendPath(path BatchGetAcceptedPlansResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetAcceptedPlansResponse_FieldPath))
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) GetPaths() []BatchGetAcceptedPlansResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetAcceptedPlansResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) Set(target, source *BatchGetAcceptedPlansResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetAcceptedPlansResponse), source.(*BatchGetAcceptedPlansResponse))
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) Project(source *BatchGetAcceptedPlansResponse) *BatchGetAcceptedPlansResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetAcceptedPlansResponse{}
	acceptedPlansMask := &accepted_plan.AcceptedPlan_FieldMask{}
	wholeAcceptedPlansAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetAcceptedPlansResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
				result.AcceptedPlans = source.AcceptedPlans
				wholeAcceptedPlansAccepted = true
			case BatchGetAcceptedPlansResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetAcceptedPlansResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
				acceptedPlansMask.AppendPath(tp.subPath.(accepted_plan.AcceptedPlan_FieldPath))
			}
		}
	}
	if wholeAcceptedPlansAccepted == false && len(acceptedPlansMask.Paths) > 0 {
		for _, sourceItem := range source.GetAcceptedPlans() {
			result.AcceptedPlans = append(result.AcceptedPlans, acceptedPlansMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetAcceptedPlansResponse))
}

func (fieldMask *BatchGetAcceptedPlansResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListAcceptedPlansRequest_FieldMask struct {
	Paths []ListAcceptedPlansRequest_FieldPath
}

func FullListAcceptedPlansRequest_FieldMask() *ListAcceptedPlansRequest_FieldMask {
	res := &ListAcceptedPlansRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListAcceptedPlansRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListAcceptedPlansRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListAcceptedPlansRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListAcceptedPlansRequest_FieldPath(raw)
	})
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) Subtract(other *ListAcceptedPlansRequest_FieldMask) *ListAcceptedPlansRequest_FieldMask {
	result := &ListAcceptedPlansRequest_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListAcceptedPlansRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListAcceptedPlansRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListAcceptedPlansRequest_FieldMask) FilterInputFields() *ListAcceptedPlansRequest_FieldMask {
	result := &ListAcceptedPlansRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListAcceptedPlansRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListAcceptedPlansRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListAcceptedPlansRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListAcceptedPlansRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListAcceptedPlansRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) AppendPath(path ListAcceptedPlansRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListAcceptedPlansRequest_FieldPath))
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) GetPaths() []ListAcceptedPlansRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListAcceptedPlansRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) Set(target, source *ListAcceptedPlansRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListAcceptedPlansRequest), source.(*ListAcceptedPlansRequest))
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) Project(source *ListAcceptedPlansRequest) *ListAcceptedPlansRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListAcceptedPlansRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListAcceptedPlansRequest_FieldTerminalPath:
			switch tp.selector {
			case ListAcceptedPlansRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListAcceptedPlansRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListAcceptedPlansRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListAcceptedPlansRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListAcceptedPlansRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListAcceptedPlansRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListAcceptedPlansRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListAcceptedPlansRequest))
}

func (fieldMask *ListAcceptedPlansRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListAcceptedPlansResponse_FieldMask struct {
	Paths []ListAcceptedPlansResponse_FieldPath
}

func FullListAcceptedPlansResponse_FieldMask() *ListAcceptedPlansResponse_FieldMask {
	res := &ListAcceptedPlansResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListAcceptedPlansResponse_FieldTerminalPath{selector: ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans})
	res.Paths = append(res.Paths, &ListAcceptedPlansResponse_FieldTerminalPath{selector: ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListAcceptedPlansResponse_FieldTerminalPath{selector: ListAcceptedPlansResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListAcceptedPlansResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListAcceptedPlansResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListAcceptedPlansResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListAcceptedPlansResponse_FieldPath(raw)
	})
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) Subtract(other *ListAcceptedPlansResponse_FieldMask) *ListAcceptedPlansResponse_FieldMask {
	result := &ListAcceptedPlansResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListAcceptedPlansResponse_FieldPathSelector]gotenobject.FieldMask{
		ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans: &accepted_plan.AcceptedPlan_FieldMask{},
	}
	mySubMasks := map[ListAcceptedPlansResponse_FieldPathSelector]gotenobject.FieldMask{
		ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans: &accepted_plan.AcceptedPlan_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListAcceptedPlansResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListAcceptedPlansResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListAcceptedPlansResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
						mySubMasks[ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans] = accepted_plan.FullAcceptedPlan_FieldMask()
					}
				} else if tp, ok := path.(*ListAcceptedPlansResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListAcceptedPlansResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListAcceptedPlansResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListAcceptedPlansResponse_FieldMask) FilterInputFields() *ListAcceptedPlansResponse_FieldMask {
	result := &ListAcceptedPlansResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
			if _, ok := path.(*ListAcceptedPlansResponse_FieldTerminalPath); ok {
				for _, subpath := range accepted_plan.FullAcceptedPlan_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListAcceptedPlansResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListAcceptedPlansResponse_FieldSubPath); ok {
				selectedMask := &accepted_plan.AcceptedPlan_FieldMask{
					Paths: []accepted_plan.AcceptedPlan_FieldPath{sub.subPath.(accepted_plan.AcceptedPlan_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListAcceptedPlansResponse_FieldSubPath{selector: ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListAcceptedPlansResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListAcceptedPlansResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListAcceptedPlansResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListAcceptedPlansResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListAcceptedPlansResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) AppendPath(path ListAcceptedPlansResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListAcceptedPlansResponse_FieldPath))
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) GetPaths() []ListAcceptedPlansResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListAcceptedPlansResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) Set(target, source *ListAcceptedPlansResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListAcceptedPlansResponse), source.(*ListAcceptedPlansResponse))
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) Project(source *ListAcceptedPlansResponse) *ListAcceptedPlansResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListAcceptedPlansResponse{}
	acceptedPlansMask := &accepted_plan.AcceptedPlan_FieldMask{}
	wholeAcceptedPlansAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListAcceptedPlansResponse_FieldTerminalPath:
			switch tp.selector {
			case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
				result.AcceptedPlans = source.AcceptedPlans
				wholeAcceptedPlansAccepted = true
			case ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListAcceptedPlansResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *ListAcceptedPlansResponse_FieldSubPath:
			switch tp.selector {
			case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
				acceptedPlansMask.AppendPath(tp.subPath.(accepted_plan.AcceptedPlan_FieldPath))
			}
		}
	}
	if wholeAcceptedPlansAccepted == false && len(acceptedPlansMask.Paths) > 0 {
		for _, sourceItem := range source.GetAcceptedPlans() {
			result.AcceptedPlans = append(result.AcceptedPlans, acceptedPlansMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListAcceptedPlansResponse))
}

func (fieldMask *ListAcceptedPlansResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAcceptedPlanRequest_FieldMask struct {
	Paths []WatchAcceptedPlanRequest_FieldPath
}

func FullWatchAcceptedPlanRequest_FieldMask() *WatchAcceptedPlanRequest_FieldMask {
	res := &WatchAcceptedPlanRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchAcceptedPlanRequest_FieldTerminalPath{selector: WatchAcceptedPlanRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchAcceptedPlanRequest_FieldTerminalPath{selector: WatchAcceptedPlanRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchAcceptedPlanRequest_FieldTerminalPath{selector: WatchAcceptedPlanRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAcceptedPlanRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAcceptedPlanRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAcceptedPlanRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAcceptedPlanRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) Subtract(other *WatchAcceptedPlanRequest_FieldMask) *WatchAcceptedPlanRequest_FieldMask {
	result := &WatchAcceptedPlanRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAcceptedPlanRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAcceptedPlanRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAcceptedPlanRequest_FieldMask) FilterInputFields() *WatchAcceptedPlanRequest_FieldMask {
	result := &WatchAcceptedPlanRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAcceptedPlanRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAcceptedPlanRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAcceptedPlanRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAcceptedPlanRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAcceptedPlanRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) AppendPath(path WatchAcceptedPlanRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAcceptedPlanRequest_FieldPath))
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) GetPaths() []WatchAcceptedPlanRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAcceptedPlanRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) Set(target, source *WatchAcceptedPlanRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAcceptedPlanRequest), source.(*WatchAcceptedPlanRequest))
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) Project(source *WatchAcceptedPlanRequest) *WatchAcceptedPlanRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAcceptedPlanRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAcceptedPlanRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchAcceptedPlanRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchAcceptedPlanRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchAcceptedPlanRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAcceptedPlanRequest))
}

func (fieldMask *WatchAcceptedPlanRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAcceptedPlanResponse_FieldMask struct {
	Paths []WatchAcceptedPlanResponse_FieldPath
}

func FullWatchAcceptedPlanResponse_FieldMask() *WatchAcceptedPlanResponse_FieldMask {
	res := &WatchAcceptedPlanResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchAcceptedPlanResponse_FieldTerminalPath{selector: WatchAcceptedPlanResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAcceptedPlanResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAcceptedPlanResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAcceptedPlanResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAcceptedPlanResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) Subtract(other *WatchAcceptedPlanResponse_FieldMask) *WatchAcceptedPlanResponse_FieldMask {
	result := &WatchAcceptedPlanResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAcceptedPlanResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAcceptedPlanResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAcceptedPlanResponse_FieldMask) FilterInputFields() *WatchAcceptedPlanResponse_FieldMask {
	result := &WatchAcceptedPlanResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAcceptedPlanResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAcceptedPlanResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAcceptedPlanResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAcceptedPlanResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAcceptedPlanResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) AppendPath(path WatchAcceptedPlanResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAcceptedPlanResponse_FieldPath))
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) GetPaths() []WatchAcceptedPlanResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAcceptedPlanResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) Set(target, source *WatchAcceptedPlanResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAcceptedPlanResponse), source.(*WatchAcceptedPlanResponse))
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) Project(source *WatchAcceptedPlanResponse) *WatchAcceptedPlanResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAcceptedPlanResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAcceptedPlanResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchAcceptedPlanResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAcceptedPlanResponse))
}

func (fieldMask *WatchAcceptedPlanResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAcceptedPlansRequest_FieldMask struct {
	Paths []WatchAcceptedPlansRequest_FieldPath
}

func FullWatchAcceptedPlansRequest_FieldMask() *WatchAcceptedPlansRequest_FieldMask {
	res := &WatchAcceptedPlansRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorStartingTime})
	res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAcceptedPlansRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAcceptedPlansRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 11)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAcceptedPlansRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAcceptedPlansRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) Subtract(other *WatchAcceptedPlansRequest_FieldMask) *WatchAcceptedPlansRequest_FieldMask {
	result := &WatchAcceptedPlansRequest_FieldMask{}
	removedSelectors := make([]bool, 11)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAcceptedPlansRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAcceptedPlansRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAcceptedPlansRequest_FieldMask) FilterInputFields() *WatchAcceptedPlansRequest_FieldMask {
	result := &WatchAcceptedPlansRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAcceptedPlansRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAcceptedPlansRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAcceptedPlansRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAcceptedPlansRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAcceptedPlansRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) AppendPath(path WatchAcceptedPlansRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAcceptedPlansRequest_FieldPath))
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) GetPaths() []WatchAcceptedPlansRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAcceptedPlansRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) Set(target, source *WatchAcceptedPlansRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAcceptedPlansRequest), source.(*WatchAcceptedPlansRequest))
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) Project(source *WatchAcceptedPlansRequest) *WatchAcceptedPlansRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAcceptedPlansRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAcceptedPlansRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchAcceptedPlansRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchAcceptedPlansRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchAcceptedPlansRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchAcceptedPlansRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchAcceptedPlansRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchAcceptedPlansRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchAcceptedPlansRequest_FieldPathSelectorStartingTime:
				result.StartingTime = source.StartingTime
			case WatchAcceptedPlansRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchAcceptedPlansRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchAcceptedPlansRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAcceptedPlansRequest))
}

func (fieldMask *WatchAcceptedPlansRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAcceptedPlansResponse_FieldMask struct {
	Paths []WatchAcceptedPlansResponse_FieldPath
}

func FullWatchAcceptedPlansResponse_FieldMask() *WatchAcceptedPlansResponse_FieldMask {
	res := &WatchAcceptedPlansResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges})
	res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAcceptedPlansResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAcceptedPlansResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAcceptedPlansResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAcceptedPlansResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) Subtract(other *WatchAcceptedPlansResponse_FieldMask) *WatchAcceptedPlansResponse_FieldMask {
	result := &WatchAcceptedPlansResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchAcceptedPlansResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange: &WatchAcceptedPlansResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchAcceptedPlansResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange: &WatchAcceptedPlansResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAcceptedPlansResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchAcceptedPlansResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchAcceptedPlansResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange] = FullWatchAcceptedPlansResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchAcceptedPlansResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchAcceptedPlansResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAcceptedPlansResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAcceptedPlansResponse_FieldMask) FilterInputFields() *WatchAcceptedPlansResponse_FieldMask {
	result := &WatchAcceptedPlansResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAcceptedPlansResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAcceptedPlansResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAcceptedPlansResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAcceptedPlansResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAcceptedPlansResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) AppendPath(path WatchAcceptedPlansResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAcceptedPlansResponse_FieldPath))
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) GetPaths() []WatchAcceptedPlansResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAcceptedPlansResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) Set(target, source *WatchAcceptedPlansResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAcceptedPlansResponse), source.(*WatchAcceptedPlansResponse))
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) Project(source *WatchAcceptedPlansResponse) *WatchAcceptedPlansResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAcceptedPlansResponse{}
	pageTokenChangeMask := &WatchAcceptedPlansResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAcceptedPlansResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges:
				result.AcceptedPlanChanges = source.AcceptedPlanChanges
			case WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchAcceptedPlansResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchAcceptedPlansResponse_FieldSubPath:
			switch tp.selector {
			case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchAcceptedPlansResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAcceptedPlansResponse))
}

func (fieldMask *WatchAcceptedPlansResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchAcceptedPlansResponse_PageTokenChange_FieldMask struct {
	Paths []WatchAcceptedPlansResponsePageTokenChange_FieldPath
}

func FullWatchAcceptedPlansResponse_PageTokenChange_FieldMask() *WatchAcceptedPlansResponse_PageTokenChange_FieldMask {
	res := &WatchAcceptedPlansResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath{selector: WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath{selector: WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchAcceptedPlansResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchAcceptedPlansResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) Subtract(other *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) *WatchAcceptedPlansResponse_PageTokenChange_FieldMask {
	result := &WatchAcceptedPlansResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchAcceptedPlansResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchAcceptedPlansResponse_PageTokenChange_FieldMask {
	result := &WatchAcceptedPlansResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchAcceptedPlansResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchAcceptedPlansResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchAcceptedPlansResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchAcceptedPlansResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) AppendPath(path WatchAcceptedPlansResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchAcceptedPlansResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) GetPaths() []WatchAcceptedPlansResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchAcceptedPlansResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) Set(target, source *WatchAcceptedPlansResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchAcceptedPlansResponse_PageTokenChange), source.(*WatchAcceptedPlansResponse_PageTokenChange))
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) Project(source *WatchAcceptedPlansResponse_PageTokenChange) *WatchAcceptedPlansResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchAcceptedPlansResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchAcceptedPlansResponse_PageTokenChange))
}

func (fieldMask *WatchAcceptedPlansResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreateAcceptedPlanRequest_FieldMask struct {
	Paths []CreateAcceptedPlanRequest_FieldPath
}

func FullCreateAcceptedPlanRequest_FieldMask() *CreateAcceptedPlanRequest_FieldMask {
	res := &CreateAcceptedPlanRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreateAcceptedPlanRequest_FieldTerminalPath{selector: CreateAcceptedPlanRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreateAcceptedPlanRequest_FieldTerminalPath{selector: CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan})
	return res
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreateAcceptedPlanRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreateAcceptedPlanRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreateAcceptedPlanRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreateAcceptedPlanRequest_FieldPath(raw)
	})
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) Subtract(other *CreateAcceptedPlanRequest_FieldMask) *CreateAcceptedPlanRequest_FieldMask {
	result := &CreateAcceptedPlanRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreateAcceptedPlanRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan: &accepted_plan.AcceptedPlan_FieldMask{},
	}
	mySubMasks := map[CreateAcceptedPlanRequest_FieldPathSelector]gotenobject.FieldMask{
		CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan: &accepted_plan.AcceptedPlan_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreateAcceptedPlanRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreateAcceptedPlanRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreateAcceptedPlanRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
						mySubMasks[CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan] = accepted_plan.FullAcceptedPlan_FieldMask()
					}
				} else if tp, ok := path.(*CreateAcceptedPlanRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreateAcceptedPlanRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreateAcceptedPlanRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreateAcceptedPlanRequest_FieldMask) FilterInputFields() *CreateAcceptedPlanRequest_FieldMask {
	result := &CreateAcceptedPlanRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
			if _, ok := path.(*CreateAcceptedPlanRequest_FieldTerminalPath); ok {
				for _, subpath := range accepted_plan.FullAcceptedPlan_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateAcceptedPlanRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreateAcceptedPlanRequest_FieldSubPath); ok {
				selectedMask := &accepted_plan.AcceptedPlan_FieldMask{
					Paths: []accepted_plan.AcceptedPlan_FieldPath{sub.subPath.(accepted_plan.AcceptedPlan_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreateAcceptedPlanRequest_FieldSubPath{selector: CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreateAcceptedPlanRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreateAcceptedPlanRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreateAcceptedPlanRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreateAcceptedPlanRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreateAcceptedPlanRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) AppendPath(path CreateAcceptedPlanRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreateAcceptedPlanRequest_FieldPath))
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) GetPaths() []CreateAcceptedPlanRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreateAcceptedPlanRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) Set(target, source *CreateAcceptedPlanRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreateAcceptedPlanRequest), source.(*CreateAcceptedPlanRequest))
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) Project(source *CreateAcceptedPlanRequest) *CreateAcceptedPlanRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreateAcceptedPlanRequest{}
	acceptedPlanMask := &accepted_plan.AcceptedPlan_FieldMask{}
	wholeAcceptedPlanAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreateAcceptedPlanRequest_FieldTerminalPath:
			switch tp.selector {
			case CreateAcceptedPlanRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
				result.AcceptedPlan = source.AcceptedPlan
				wholeAcceptedPlanAccepted = true
			}
		case *CreateAcceptedPlanRequest_FieldSubPath:
			switch tp.selector {
			case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
				acceptedPlanMask.AppendPath(tp.subPath.(accepted_plan.AcceptedPlan_FieldPath))
			}
		}
	}
	if wholeAcceptedPlanAccepted == false && len(acceptedPlanMask.Paths) > 0 {
		result.AcceptedPlan = acceptedPlanMask.Project(source.GetAcceptedPlan())
	}
	return result
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreateAcceptedPlanRequest))
}

func (fieldMask *CreateAcceptedPlanRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateAcceptedPlanRequest_FieldMask struct {
	Paths []UpdateAcceptedPlanRequest_FieldPath
}

func FullUpdateAcceptedPlanRequest_FieldMask() *UpdateAcceptedPlanRequest_FieldMask {
	res := &UpdateAcceptedPlanRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdateAcceptedPlanRequest_FieldTerminalPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan})
	res.Paths = append(res.Paths, &UpdateAcceptedPlanRequest_FieldTerminalPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdateAcceptedPlanRequest_FieldTerminalPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateAcceptedPlanRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateAcceptedPlanRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateAcceptedPlanRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) Subtract(other *UpdateAcceptedPlanRequest_FieldMask) *UpdateAcceptedPlanRequest_FieldMask {
	result := &UpdateAcceptedPlanRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdateAcceptedPlanRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan: &accepted_plan.AcceptedPlan_FieldMask{},
		UpdateAcceptedPlanRequest_FieldPathSelectorCas:          &UpdateAcceptedPlanRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdateAcceptedPlanRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan: &accepted_plan.AcceptedPlan_FieldMask{},
		UpdateAcceptedPlanRequest_FieldPathSelectorCas:          &UpdateAcceptedPlanRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateAcceptedPlanRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateAcceptedPlanRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateAcceptedPlanRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
						mySubMasks[UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan] = accepted_plan.FullAcceptedPlan_FieldMask()
					case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
						mySubMasks[UpdateAcceptedPlanRequest_FieldPathSelectorCas] = FullUpdateAcceptedPlanRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdateAcceptedPlanRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateAcceptedPlanRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateAcceptedPlanRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) FilterInputFields() *UpdateAcceptedPlanRequest_FieldMask {
	result := &UpdateAcceptedPlanRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
			if _, ok := path.(*UpdateAcceptedPlanRequest_FieldTerminalPath); ok {
				for _, subpath := range accepted_plan.FullAcceptedPlan_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAcceptedPlanRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateAcceptedPlanRequest_FieldSubPath); ok {
				selectedMask := &accepted_plan.AcceptedPlan_FieldMask{
					Paths: []accepted_plan.AcceptedPlan_FieldPath{sub.subPath.(accepted_plan.AcceptedPlan_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAcceptedPlanRequest_FieldSubPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan, subPath: allowedPath})
				}
			}
		case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdateAcceptedPlanRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdateAcceptedPlanRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAcceptedPlanRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateAcceptedPlanRequest_FieldSubPath); ok {
				selectedMask := &UpdateAcceptedPlanRequest_CAS_FieldMask{
					Paths: []UpdateAcceptedPlanRequestCAS_FieldPath{sub.subPath.(UpdateAcceptedPlanRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAcceptedPlanRequest_FieldSubPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateAcceptedPlanRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateAcceptedPlanRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateAcceptedPlanRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateAcceptedPlanRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) AppendPath(path UpdateAcceptedPlanRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateAcceptedPlanRequest_FieldPath))
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) GetPaths() []UpdateAcceptedPlanRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateAcceptedPlanRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) Set(target, source *UpdateAcceptedPlanRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateAcceptedPlanRequest), source.(*UpdateAcceptedPlanRequest))
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) Project(source *UpdateAcceptedPlanRequest) *UpdateAcceptedPlanRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateAcceptedPlanRequest{}
	acceptedPlanMask := &accepted_plan.AcceptedPlan_FieldMask{}
	wholeAcceptedPlanAccepted := false
	casMask := &UpdateAcceptedPlanRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateAcceptedPlanRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
				result.AcceptedPlan = source.AcceptedPlan
				wholeAcceptedPlanAccepted = true
			case UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdateAcceptedPlanRequest_FieldSubPath:
			switch tp.selector {
			case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
				acceptedPlanMask.AppendPath(tp.subPath.(accepted_plan.AcceptedPlan_FieldPath))
			case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdateAcceptedPlanRequestCAS_FieldPath))
			}
		}
	}
	if wholeAcceptedPlanAccepted == false && len(acceptedPlanMask.Paths) > 0 {
		result.AcceptedPlan = acceptedPlanMask.Project(source.GetAcceptedPlan())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateAcceptedPlanRequest))
}

func (fieldMask *UpdateAcceptedPlanRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdateAcceptedPlanRequest_CAS_FieldMask struct {
	Paths []UpdateAcceptedPlanRequestCAS_FieldPath
}

func FullUpdateAcceptedPlanRequest_CAS_FieldMask() *UpdateAcceptedPlanRequest_CAS_FieldMask {
	res := &UpdateAcceptedPlanRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdateAcceptedPlanRequestCAS_FieldTerminalPath{selector: UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdateAcceptedPlanRequestCAS_FieldTerminalPath{selector: UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdateAcceptedPlanRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdateAcceptedPlanRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdateAcceptedPlanRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) Subtract(other *UpdateAcceptedPlanRequest_CAS_FieldMask) *UpdateAcceptedPlanRequest_CAS_FieldMask {
	result := &UpdateAcceptedPlanRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdateAcceptedPlanRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState: &accepted_plan.AcceptedPlan_FieldMask{},
	}
	mySubMasks := map[UpdateAcceptedPlanRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState: &accepted_plan.AcceptedPlan_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdateAcceptedPlanRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdateAcceptedPlanRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdateAcceptedPlanRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState] = accepted_plan.FullAcceptedPlan_FieldMask()
					}
				} else if tp, ok := path.(*UpdateAcceptedPlanRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdateAcceptedPlanRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdateAcceptedPlanRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) FilterInputFields() *UpdateAcceptedPlanRequest_CAS_FieldMask {
	result := &UpdateAcceptedPlanRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdateAcceptedPlanRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range accepted_plan.FullAcceptedPlan_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAcceptedPlanRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdateAcceptedPlanRequestCAS_FieldSubPath); ok {
				selectedMask := &accepted_plan.AcceptedPlan_FieldMask{
					Paths: []accepted_plan.AcceptedPlan_FieldPath{sub.subPath.(accepted_plan.AcceptedPlan_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdateAcceptedPlanRequestCAS_FieldSubPath{selector: UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdateAcceptedPlanRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdateAcceptedPlanRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdateAcceptedPlanRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdateAcceptedPlanRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) AppendPath(path UpdateAcceptedPlanRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdateAcceptedPlanRequestCAS_FieldPath))
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) GetPaths() []UpdateAcceptedPlanRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdateAcceptedPlanRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) Set(target, source *UpdateAcceptedPlanRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdateAcceptedPlanRequest_CAS), source.(*UpdateAcceptedPlanRequest_CAS))
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) Project(source *UpdateAcceptedPlanRequest_CAS) *UpdateAcceptedPlanRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdateAcceptedPlanRequest_CAS{}
	conditionalStateMask := &accepted_plan.AcceptedPlan_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdateAcceptedPlanRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdateAcceptedPlanRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(accepted_plan.AcceptedPlan_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdateAcceptedPlanRequest_CAS))
}

func (fieldMask *UpdateAcceptedPlanRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeleteAcceptedPlanRequest_FieldMask struct {
	Paths []DeleteAcceptedPlanRequest_FieldPath
}

func FullDeleteAcceptedPlanRequest_FieldMask() *DeleteAcceptedPlanRequest_FieldMask {
	res := &DeleteAcceptedPlanRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeleteAcceptedPlanRequest_FieldTerminalPath{selector: DeleteAcceptedPlanRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeleteAcceptedPlanRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeleteAcceptedPlanRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeleteAcceptedPlanRequest_FieldPath(raw)
	})
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) Subtract(other *DeleteAcceptedPlanRequest_FieldMask) *DeleteAcceptedPlanRequest_FieldMask {
	result := &DeleteAcceptedPlanRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeleteAcceptedPlanRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeleteAcceptedPlanRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) FilterInputFields() *DeleteAcceptedPlanRequest_FieldMask {
	result := &DeleteAcceptedPlanRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeleteAcceptedPlanRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeleteAcceptedPlanRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeleteAcceptedPlanRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeleteAcceptedPlanRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) AppendPath(path DeleteAcceptedPlanRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeleteAcceptedPlanRequest_FieldPath))
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) GetPaths() []DeleteAcceptedPlanRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeleteAcceptedPlanRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) Set(target, source *DeleteAcceptedPlanRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeleteAcceptedPlanRequest), source.(*DeleteAcceptedPlanRequest))
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) Project(source *DeleteAcceptedPlanRequest) *DeleteAcceptedPlanRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeleteAcceptedPlanRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeleteAcceptedPlanRequest_FieldTerminalPath:
			switch tp.selector {
			case DeleteAcceptedPlanRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeleteAcceptedPlanRequest))
}

func (fieldMask *DeleteAcceptedPlanRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
