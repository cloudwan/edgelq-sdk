// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/accepted_plan_service.proto
// DO NOT EDIT!!!

package accepted_plan_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	accepted_plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/accepted_plan"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &accepted_plan.AcceptedPlan{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetAcceptedPlanRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetAcceptedPlanRequest_FieldPathSelector
	Get(source *GetAcceptedPlanRequest) []interface{}
	GetSingle(source *GetAcceptedPlanRequest) (interface{}, bool)
	ClearValue(item *GetAcceptedPlanRequest)

	// Those methods build corresponding GetAcceptedPlanRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetAcceptedPlanRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetAcceptedPlanRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetAcceptedPlanRequest_FieldPathArrayItemValue
}

type GetAcceptedPlanRequest_FieldPathSelector int32

const (
	GetAcceptedPlanRequest_FieldPathSelectorName      GetAcceptedPlanRequest_FieldPathSelector = 0
	GetAcceptedPlanRequest_FieldPathSelectorFieldMask GetAcceptedPlanRequest_FieldPathSelector = 1
	GetAcceptedPlanRequest_FieldPathSelectorView      GetAcceptedPlanRequest_FieldPathSelector = 2
)

func (s GetAcceptedPlanRequest_FieldPathSelector) String() string {
	switch s {
	case GetAcceptedPlanRequest_FieldPathSelectorName:
		return "name"
	case GetAcceptedPlanRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetAcceptedPlanRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetAcceptedPlanRequest: %d", s))
	}
}

func BuildGetAcceptedPlanRequest_FieldPath(fp gotenobject.RawFieldPath) (GetAcceptedPlanRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetAcceptedPlanRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetAcceptedPlanRequest_FieldTerminalPath{selector: GetAcceptedPlanRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetAcceptedPlanRequest_FieldTerminalPath{selector: GetAcceptedPlanRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetAcceptedPlanRequest_FieldTerminalPath{selector: GetAcceptedPlanRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetAcceptedPlanRequest", fp)
}

func ParseGetAcceptedPlanRequest_FieldPath(rawField string) (GetAcceptedPlanRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetAcceptedPlanRequest_FieldPath(fp)
}

func MustParseGetAcceptedPlanRequest_FieldPath(rawField string) GetAcceptedPlanRequest_FieldPath {
	fp, err := ParseGetAcceptedPlanRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetAcceptedPlanRequest_FieldTerminalPath struct {
	selector GetAcceptedPlanRequest_FieldPathSelector
}

var _ GetAcceptedPlanRequest_FieldPath = (*GetAcceptedPlanRequest_FieldTerminalPath)(nil)

func (fp *GetAcceptedPlanRequest_FieldTerminalPath) Selector() GetAcceptedPlanRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetAcceptedPlanRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetAcceptedPlanRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetAcceptedPlanRequest
func (fp *GetAcceptedPlanRequest_FieldTerminalPath) Get(source *GetAcceptedPlanRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetAcceptedPlanRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetAcceptedPlanRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetAcceptedPlanRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAcceptedPlanRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetAcceptedPlanRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetAcceptedPlanRequest))
}

// GetSingle returns value pointed by specific field of from source GetAcceptedPlanRequest
func (fp *GetAcceptedPlanRequest_FieldTerminalPath) GetSingle(source *GetAcceptedPlanRequest) (interface{}, bool) {
	switch fp.selector {
	case GetAcceptedPlanRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetAcceptedPlanRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetAcceptedPlanRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *GetAcceptedPlanRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetAcceptedPlanRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetAcceptedPlanRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetAcceptedPlanRequest_FieldPathSelectorName:
		return (*accepted_plan.Reference)(nil)
	case GetAcceptedPlanRequest_FieldPathSelectorFieldMask:
		return (*accepted_plan.AcceptedPlan_FieldMask)(nil)
	case GetAcceptedPlanRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *GetAcceptedPlanRequest_FieldTerminalPath) ClearValue(item *GetAcceptedPlanRequest) {
	if item != nil {
		switch fp.selector {
		case GetAcceptedPlanRequest_FieldPathSelectorName:
			item.Name = nil
		case GetAcceptedPlanRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetAcceptedPlanRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetAcceptedPlanRequest: %d", fp.selector))
		}
	}
}

func (fp *GetAcceptedPlanRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetAcceptedPlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetAcceptedPlanRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetAcceptedPlanRequest_FieldPathSelectorName ||
		fp.selector == GetAcceptedPlanRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetAcceptedPlanRequest_FieldPathSelectorView
}

func (fp *GetAcceptedPlanRequest_FieldTerminalPath) WithIValue(value interface{}) GetAcceptedPlanRequest_FieldPathValue {
	switch fp.selector {
	case GetAcceptedPlanRequest_FieldPathSelectorName:
		return &GetAcceptedPlanRequest_FieldTerminalPathValue{GetAcceptedPlanRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.Reference)}
	case GetAcceptedPlanRequest_FieldPathSelectorFieldMask:
		return &GetAcceptedPlanRequest_FieldTerminalPathValue{GetAcceptedPlanRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlan_FieldMask)}
	case GetAcceptedPlanRequest_FieldPathSelectorView:
		return &GetAcceptedPlanRequest_FieldTerminalPathValue{GetAcceptedPlanRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *GetAcceptedPlanRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetAcceptedPlanRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetAcceptedPlanRequest_FieldPathArrayOfValues {
	fpaov := &GetAcceptedPlanRequest_FieldTerminalPathArrayOfValues{GetAcceptedPlanRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetAcceptedPlanRequest_FieldPathSelectorName:
		return &GetAcceptedPlanRequest_FieldTerminalPathArrayOfValues{GetAcceptedPlanRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.Reference)}
	case GetAcceptedPlanRequest_FieldPathSelectorFieldMask:
		return &GetAcceptedPlanRequest_FieldTerminalPathArrayOfValues{GetAcceptedPlanRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.AcceptedPlan_FieldMask)}
	case GetAcceptedPlanRequest_FieldPathSelectorView:
		return &GetAcceptedPlanRequest_FieldTerminalPathArrayOfValues{GetAcceptedPlanRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAcceptedPlanRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetAcceptedPlanRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetAcceptedPlanRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetAcceptedPlanRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *GetAcceptedPlanRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetAcceptedPlanRequest_FieldPathValue allows storing values for GetAcceptedPlanRequest fields according to their type
type GetAcceptedPlanRequest_FieldPathValue interface {
	GetAcceptedPlanRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetAcceptedPlanRequest)
	CompareWith(*GetAcceptedPlanRequest) (cmp int, comparable bool)
}

func ParseGetAcceptedPlanRequest_FieldPathValue(pathStr, valueStr string) (GetAcceptedPlanRequest_FieldPathValue, error) {
	fp, err := ParseGetAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAcceptedPlanRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetAcceptedPlanRequest_FieldPathValue), nil
}

func MustParseGetAcceptedPlanRequest_FieldPathValue(pathStr, valueStr string) GetAcceptedPlanRequest_FieldPathValue {
	fpv, err := ParseGetAcceptedPlanRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetAcceptedPlanRequest_FieldTerminalPathValue struct {
	GetAcceptedPlanRequest_FieldTerminalPath
	value interface{}
}

var _ GetAcceptedPlanRequest_FieldPathValue = (*GetAcceptedPlanRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetAcceptedPlanRequest' as interface{}
func (fpv *GetAcceptedPlanRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetAcceptedPlanRequest_FieldTerminalPathValue) AsNameValue() (*accepted_plan.Reference, bool) {
	res, ok := fpv.value.(*accepted_plan.Reference)
	return res, ok
}
func (fpv *GetAcceptedPlanRequest_FieldTerminalPathValue) AsFieldMaskValue() (*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}
func (fpv *GetAcceptedPlanRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetAcceptedPlanRequest
func (fpv *GetAcceptedPlanRequest_FieldTerminalPathValue) SetTo(target **GetAcceptedPlanRequest) {
	if *target == nil {
		*target = new(GetAcceptedPlanRequest)
	}
	switch fpv.selector {
	case GetAcceptedPlanRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*accepted_plan.Reference)
	case GetAcceptedPlanRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	case GetAcceptedPlanRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAcceptedPlanRequest: %d", fpv.selector))
	}
}

func (fpv *GetAcceptedPlanRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAcceptedPlanRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetAcceptedPlanRequest_FieldTerminalPathValue' with the value under path in 'GetAcceptedPlanRequest'.
func (fpv *GetAcceptedPlanRequest_FieldTerminalPathValue) CompareWith(source *GetAcceptedPlanRequest) (int, bool) {
	switch fpv.selector {
	case GetAcceptedPlanRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*accepted_plan.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetAcceptedPlanRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetAcceptedPlanRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAcceptedPlanRequest: %d", fpv.selector))
	}
}

func (fpv *GetAcceptedPlanRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetAcceptedPlanRequest))
}

// GetAcceptedPlanRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetAcceptedPlanRequest according to their type
// Present only for array (repeated) types.
type GetAcceptedPlanRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetAcceptedPlanRequest_FieldPath
	ContainsValue(*GetAcceptedPlanRequest) bool
}

// ParseGetAcceptedPlanRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetAcceptedPlanRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAcceptedPlanRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetAcceptedPlanRequest_FieldPathArrayItemValue), nil
}

func MustParseGetAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetAcceptedPlanRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetAcceptedPlanRequest_FieldTerminalPathArrayItemValue struct {
	GetAcceptedPlanRequest_FieldTerminalPath
	value interface{}
}

var _ GetAcceptedPlanRequest_FieldPathArrayItemValue = (*GetAcceptedPlanRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetAcceptedPlanRequest as interface{}
func (fpaiv *GetAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetAcceptedPlanRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetAcceptedPlanRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAcceptedPlanRequest'
func (fpaiv *GetAcceptedPlanRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetAcceptedPlanRequest) bool {
	slice := fpaiv.GetAcceptedPlanRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetAcceptedPlanRequest_FieldPathArrayOfValues allows storing slice of values for GetAcceptedPlanRequest fields according to their type
type GetAcceptedPlanRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetAcceptedPlanRequest_FieldPath
}

func ParseGetAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetAcceptedPlanRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAcceptedPlanRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetAcceptedPlanRequest_FieldPathArrayOfValues), nil
}

func MustParseGetAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetAcceptedPlanRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetAcceptedPlanRequest_FieldTerminalPathArrayOfValues struct {
	GetAcceptedPlanRequest_FieldTerminalPath
	values interface{}
}

var _ GetAcceptedPlanRequest_FieldPathArrayOfValues = (*GetAcceptedPlanRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetAcceptedPlanRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetAcceptedPlanRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*accepted_plan.Reference) {
			values = append(values, v)
		}
	case GetAcceptedPlanRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask) {
			values = append(values, v)
		}
	case GetAcceptedPlanRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetAcceptedPlanRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*accepted_plan.Reference, bool) {
	res, ok := fpaov.values.([]*accepted_plan.Reference)
	return res, ok
}
func (fpaov *GetAcceptedPlanRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}
func (fpaov *GetAcceptedPlanRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAcceptedPlansRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAcceptedPlansRequest_FieldPathSelector
	Get(source *BatchGetAcceptedPlansRequest) []interface{}
	GetSingle(source *BatchGetAcceptedPlansRequest) (interface{}, bool)
	ClearValue(item *BatchGetAcceptedPlansRequest)

	// Those methods build corresponding BatchGetAcceptedPlansRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAcceptedPlansRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAcceptedPlansRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAcceptedPlansRequest_FieldPathArrayItemValue
}

type BatchGetAcceptedPlansRequest_FieldPathSelector int32

const (
	BatchGetAcceptedPlansRequest_FieldPathSelectorNames     BatchGetAcceptedPlansRequest_FieldPathSelector = 0
	BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask BatchGetAcceptedPlansRequest_FieldPathSelector = 1
	BatchGetAcceptedPlansRequest_FieldPathSelectorView      BatchGetAcceptedPlansRequest_FieldPathSelector = 2
)

func (s BatchGetAcceptedPlansRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetAcceptedPlansRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetAcceptedPlansRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansRequest: %d", s))
	}
}

func BuildBatchGetAcceptedPlansRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAcceptedPlansRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAcceptedPlansRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetAcceptedPlansRequest_FieldTerminalPath{selector: BatchGetAcceptedPlansRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetAcceptedPlansRequest_FieldTerminalPath{selector: BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetAcceptedPlansRequest_FieldTerminalPath{selector: BatchGetAcceptedPlansRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAcceptedPlansRequest", fp)
}

func ParseBatchGetAcceptedPlansRequest_FieldPath(rawField string) (BatchGetAcceptedPlansRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAcceptedPlansRequest_FieldPath(fp)
}

func MustParseBatchGetAcceptedPlansRequest_FieldPath(rawField string) BatchGetAcceptedPlansRequest_FieldPath {
	fp, err := ParseBatchGetAcceptedPlansRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAcceptedPlansRequest_FieldTerminalPath struct {
	selector BatchGetAcceptedPlansRequest_FieldPathSelector
}

var _ BatchGetAcceptedPlansRequest_FieldPath = (*BatchGetAcceptedPlansRequest_FieldTerminalPath)(nil)

func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) Selector() BatchGetAcceptedPlansRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAcceptedPlansRequest
func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) Get(source *BatchGetAcceptedPlansRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAcceptedPlansRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetAcceptedPlansRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAcceptedPlansRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetAcceptedPlansRequest
func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) GetSingle(source *BatchGetAcceptedPlansRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAcceptedPlansRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetAcceptedPlansRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAcceptedPlansRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAcceptedPlansRequest_FieldPathSelectorNames:
		return ([]*accepted_plan.Reference)(nil)
	case BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return (*accepted_plan.AcceptedPlan_FieldMask)(nil)
	case BatchGetAcceptedPlansRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) ClearValue(item *BatchGetAcceptedPlansRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetAcceptedPlansRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetAcceptedPlansRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAcceptedPlansRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAcceptedPlansRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetAcceptedPlansRequest_FieldPathSelectorView
}

func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetAcceptedPlansRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetAcceptedPlansRequest_FieldPathSelectorNames:
		return &BatchGetAcceptedPlansRequest_FieldTerminalPathValue{BatchGetAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.([]*accepted_plan.Reference)}
	case BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return &BatchGetAcceptedPlansRequest_FieldTerminalPathValue{BatchGetAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlan_FieldMask)}
	case BatchGetAcceptedPlansRequest_FieldPathSelectorView:
		return &BatchGetAcceptedPlansRequest_FieldTerminalPathValue{BatchGetAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAcceptedPlansRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetAcceptedPlansRequest_FieldTerminalPathArrayOfValues{BatchGetAcceptedPlansRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAcceptedPlansRequest_FieldPathSelectorNames:
		return &BatchGetAcceptedPlansRequest_FieldTerminalPathArrayOfValues{BatchGetAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([][]*accepted_plan.Reference)}
	case BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return &BatchGetAcceptedPlansRequest_FieldTerminalPathArrayOfValues{BatchGetAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.AcceptedPlan_FieldMask)}
	case BatchGetAcceptedPlansRequest_FieldPathSelectorView:
		return &BatchGetAcceptedPlansRequest_FieldTerminalPathArrayOfValues{BatchGetAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAcceptedPlansRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAcceptedPlansRequest_FieldPathSelectorNames:
		return &BatchGetAcceptedPlansRequest_FieldTerminalPathArrayItemValue{BatchGetAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAcceptedPlansRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetAcceptedPlansRequest_FieldPathValue allows storing values for BatchGetAcceptedPlansRequest fields according to their type
type BatchGetAcceptedPlansRequest_FieldPathValue interface {
	BatchGetAcceptedPlansRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAcceptedPlansRequest)
	CompareWith(*BatchGetAcceptedPlansRequest) (cmp int, comparable bool)
}

func ParseBatchGetAcceptedPlansRequest_FieldPathValue(pathStr, valueStr string) (BatchGetAcceptedPlansRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetAcceptedPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAcceptedPlansRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAcceptedPlansRequest_FieldPathValue), nil
}

func MustParseBatchGetAcceptedPlansRequest_FieldPathValue(pathStr, valueStr string) BatchGetAcceptedPlansRequest_FieldPathValue {
	fpv, err := ParseBatchGetAcceptedPlansRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAcceptedPlansRequest_FieldTerminalPathValue struct {
	BatchGetAcceptedPlansRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAcceptedPlansRequest_FieldPathValue = (*BatchGetAcceptedPlansRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAcceptedPlansRequest' as interface{}
func (fpv *BatchGetAcceptedPlansRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAcceptedPlansRequest_FieldTerminalPathValue) AsNamesValue() ([]*accepted_plan.Reference, bool) {
	res, ok := fpv.value.([]*accepted_plan.Reference)
	return res, ok
}
func (fpv *BatchGetAcceptedPlansRequest_FieldTerminalPathValue) AsFieldMaskValue() (*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}
func (fpv *BatchGetAcceptedPlansRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAcceptedPlansRequest
func (fpv *BatchGetAcceptedPlansRequest_FieldTerminalPathValue) SetTo(target **BatchGetAcceptedPlansRequest) {
	if *target == nil {
		*target = new(BatchGetAcceptedPlansRequest)
	}
	switch fpv.selector {
	case BatchGetAcceptedPlansRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*accepted_plan.Reference)
	case BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	case BatchGetAcceptedPlansRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAcceptedPlansRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAcceptedPlansRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAcceptedPlansRequest_FieldTerminalPathValue' with the value under path in 'BatchGetAcceptedPlansRequest'.
func (fpv *BatchGetAcceptedPlansRequest_FieldTerminalPathValue) CompareWith(source *BatchGetAcceptedPlansRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetAcceptedPlansRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetAcceptedPlansRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAcceptedPlansRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAcceptedPlansRequest))
}

// BatchGetAcceptedPlansRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAcceptedPlansRequest according to their type
// Present only for array (repeated) types.
type BatchGetAcceptedPlansRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAcceptedPlansRequest_FieldPath
	ContainsValue(*BatchGetAcceptedPlansRequest) bool
}

// ParseBatchGetAcceptedPlansRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAcceptedPlansRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAcceptedPlansRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAcceptedPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAcceptedPlansRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAcceptedPlansRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAcceptedPlansRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAcceptedPlansRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAcceptedPlansRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAcceptedPlansRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetAcceptedPlansRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAcceptedPlansRequest_FieldPathArrayItemValue = (*BatchGetAcceptedPlansRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAcceptedPlansRequest as interface{}
func (fpaiv *BatchGetAcceptedPlansRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAcceptedPlansRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*accepted_plan.Reference, bool) {
	res, ok := fpaiv.value.(*accepted_plan.Reference)
	return res, ok
}

func (fpaiv *BatchGetAcceptedPlansRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAcceptedPlansRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAcceptedPlansRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAcceptedPlansRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAcceptedPlansRequest'
func (fpaiv *BatchGetAcceptedPlansRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAcceptedPlansRequest) bool {
	slice := fpaiv.BatchGetAcceptedPlansRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetAcceptedPlansRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetAcceptedPlansRequest fields according to their type
type BatchGetAcceptedPlansRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAcceptedPlansRequest_FieldPath
}

func ParseBatchGetAcceptedPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAcceptedPlansRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAcceptedPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAcceptedPlansRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAcceptedPlansRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAcceptedPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAcceptedPlansRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAcceptedPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAcceptedPlansRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetAcceptedPlansRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetAcceptedPlansRequest_FieldPathArrayOfValues = (*BatchGetAcceptedPlansRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAcceptedPlansRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAcceptedPlansRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*accepted_plan.Reference) {
			values = append(values, v)
		}
	case BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask) {
			values = append(values, v)
		}
	case BatchGetAcceptedPlansRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*accepted_plan.Reference, bool) {
	res, ok := fpaov.values.([][]*accepted_plan.Reference)
	return res, ok
}
func (fpaov *BatchGetAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}
func (fpaov *BatchGetAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAcceptedPlansResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAcceptedPlansResponse_FieldPathSelector
	Get(source *BatchGetAcceptedPlansResponse) []interface{}
	GetSingle(source *BatchGetAcceptedPlansResponse) (interface{}, bool)
	ClearValue(item *BatchGetAcceptedPlansResponse)

	// Those methods build corresponding BatchGetAcceptedPlansResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAcceptedPlansResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAcceptedPlansResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAcceptedPlansResponse_FieldPathArrayItemValue
}

type BatchGetAcceptedPlansResponse_FieldPathSelector int32

const (
	BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans BatchGetAcceptedPlansResponse_FieldPathSelector = 0
	BatchGetAcceptedPlansResponse_FieldPathSelectorMissing       BatchGetAcceptedPlansResponse_FieldPathSelector = 1
)

func (s BatchGetAcceptedPlansResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return "accepted_plans"
	case BatchGetAcceptedPlansResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", s))
	}
}

func BuildBatchGetAcceptedPlansResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAcceptedPlansResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAcceptedPlansResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "accepted_plans", "acceptedPlans", "accepted-plans":
			return &BatchGetAcceptedPlansResponse_FieldTerminalPath{selector: BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans}, nil
		case "missing":
			return &BatchGetAcceptedPlansResponse_FieldTerminalPath{selector: BatchGetAcceptedPlansResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "accepted_plans", "acceptedPlans", "accepted-plans":
			if subpath, err := accepted_plan.BuildAcceptedPlan_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetAcceptedPlansResponse_FieldSubPath{selector: BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAcceptedPlansResponse", fp)
}

func ParseBatchGetAcceptedPlansResponse_FieldPath(rawField string) (BatchGetAcceptedPlansResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAcceptedPlansResponse_FieldPath(fp)
}

func MustParseBatchGetAcceptedPlansResponse_FieldPath(rawField string) BatchGetAcceptedPlansResponse_FieldPath {
	fp, err := ParseBatchGetAcceptedPlansResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAcceptedPlansResponse_FieldTerminalPath struct {
	selector BatchGetAcceptedPlansResponse_FieldPathSelector
}

var _ BatchGetAcceptedPlansResponse_FieldPath = (*BatchGetAcceptedPlansResponse_FieldTerminalPath)(nil)

func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) Selector() BatchGetAcceptedPlansResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAcceptedPlansResponse
func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) Get(source *BatchGetAcceptedPlansResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
			for _, value := range source.GetAcceptedPlans() {
				values = append(values, value)
			}
		case BatchGetAcceptedPlansResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAcceptedPlansResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetAcceptedPlansResponse
func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) GetSingle(source *BatchGetAcceptedPlansResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		res := source.GetAcceptedPlans()
		return res, res != nil
	case BatchGetAcceptedPlansResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAcceptedPlansResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return ([]*accepted_plan.AcceptedPlan)(nil)
	case BatchGetAcceptedPlansResponse_FieldPathSelectorMissing:
		return ([]*accepted_plan.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) ClearValue(item *BatchGetAcceptedPlansResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
			item.AcceptedPlans = nil
		case BatchGetAcceptedPlansResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAcceptedPlansResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAcceptedPlansResponse_FieldPathSelectorMissing
}

func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetAcceptedPlansResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return &BatchGetAcceptedPlansResponse_FieldTerminalPathValue{BatchGetAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.([]*accepted_plan.AcceptedPlan)}
	case BatchGetAcceptedPlansResponse_FieldPathSelectorMissing:
		return &BatchGetAcceptedPlansResponse_FieldTerminalPathValue{BatchGetAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.([]*accepted_plan.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAcceptedPlansResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetAcceptedPlansResponse_FieldTerminalPathArrayOfValues{BatchGetAcceptedPlansResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return &BatchGetAcceptedPlansResponse_FieldTerminalPathArrayOfValues{BatchGetAcceptedPlansResponse_FieldTerminalPath: *fp, values: values.([][]*accepted_plan.AcceptedPlan)}
	case BatchGetAcceptedPlansResponse_FieldPathSelectorMissing:
		return &BatchGetAcceptedPlansResponse_FieldTerminalPathArrayOfValues{BatchGetAcceptedPlansResponse_FieldTerminalPath: *fp, values: values.([][]*accepted_plan.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAcceptedPlansResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return &BatchGetAcceptedPlansResponse_FieldTerminalPathArrayItemValue{BatchGetAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlan)}
	case BatchGetAcceptedPlansResponse_FieldPathSelectorMissing:
		return &BatchGetAcceptedPlansResponse_FieldTerminalPathArrayItemValue{BatchGetAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.(*accepted_plan.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAcceptedPlansResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetAcceptedPlansResponse_FieldSubPath struct {
	selector BatchGetAcceptedPlansResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetAcceptedPlansResponse_FieldPath = (*BatchGetAcceptedPlansResponse_FieldSubPath)(nil)

func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) Selector() BatchGetAcceptedPlansResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) AsAcceptedPlansSubPath() (accepted_plan.AcceptedPlan_FieldPath, bool) {
	res, ok := fps.subPath.(accepted_plan.AcceptedPlan_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetAcceptedPlansResponse
func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) Get(source *BatchGetAcceptedPlansResponse) (values []interface{}) {
	if asAcceptedPlanFieldPath, ok := fps.AsAcceptedPlansSubPath(); ok {
		for _, item := range source.GetAcceptedPlans() {
			values = append(values, asAcceptedPlanFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetAcceptedPlansResponse))
}

// GetSingle returns value of selected field from source BatchGetAcceptedPlansResponse
func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) GetSingle(source *BatchGetAcceptedPlansResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		if len(source.GetAcceptedPlans()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAcceptedPlans()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fps.selector))
	}
}

func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetAcceptedPlansResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) ClearValue(item *BatchGetAcceptedPlansResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
			for _, subItem := range item.AcceptedPlans {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetAcceptedPlansResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) WithIValue(value interface{}) BatchGetAcceptedPlansResponse_FieldPathValue {
	return &BatchGetAcceptedPlansResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetAcceptedPlansResponse_FieldPathArrayOfValues {
	return &BatchGetAcceptedPlansResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetAcceptedPlansResponse_FieldPathArrayItemValue {
	return &BatchGetAcceptedPlansResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetAcceptedPlansResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetAcceptedPlansResponse_FieldPathValue allows storing values for BatchGetAcceptedPlansResponse fields according to their type
type BatchGetAcceptedPlansResponse_FieldPathValue interface {
	BatchGetAcceptedPlansResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAcceptedPlansResponse)
	CompareWith(*BatchGetAcceptedPlansResponse) (cmp int, comparable bool)
}

func ParseBatchGetAcceptedPlansResponse_FieldPathValue(pathStr, valueStr string) (BatchGetAcceptedPlansResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetAcceptedPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAcceptedPlansResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAcceptedPlansResponse_FieldPathValue), nil
}

func MustParseBatchGetAcceptedPlansResponse_FieldPathValue(pathStr, valueStr string) BatchGetAcceptedPlansResponse_FieldPathValue {
	fpv, err := ParseBatchGetAcceptedPlansResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAcceptedPlansResponse_FieldTerminalPathValue struct {
	BatchGetAcceptedPlansResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAcceptedPlansResponse_FieldPathValue = (*BatchGetAcceptedPlansResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAcceptedPlansResponse' as interface{}
func (fpv *BatchGetAcceptedPlansResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAcceptedPlansResponse_FieldTerminalPathValue) AsAcceptedPlansValue() ([]*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpv.value.([]*accepted_plan.AcceptedPlan)
	return res, ok
}
func (fpv *BatchGetAcceptedPlansResponse_FieldTerminalPathValue) AsMissingValue() ([]*accepted_plan.Reference, bool) {
	res, ok := fpv.value.([]*accepted_plan.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAcceptedPlansResponse
func (fpv *BatchGetAcceptedPlansResponse_FieldTerminalPathValue) SetTo(target **BatchGetAcceptedPlansResponse) {
	if *target == nil {
		*target = new(BatchGetAcceptedPlansResponse)
	}
	switch fpv.selector {
	case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		(*target).AcceptedPlans = fpv.value.([]*accepted_plan.AcceptedPlan)
	case BatchGetAcceptedPlansResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*accepted_plan.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAcceptedPlansResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAcceptedPlansResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAcceptedPlansResponse_FieldTerminalPathValue' with the value under path in 'BatchGetAcceptedPlansResponse'.
func (fpv *BatchGetAcceptedPlansResponse_FieldTerminalPathValue) CompareWith(source *BatchGetAcceptedPlansResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return 0, false
	case BatchGetAcceptedPlansResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAcceptedPlansResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAcceptedPlansResponse))
}

type BatchGetAcceptedPlansResponse_FieldSubPathValue struct {
	BatchGetAcceptedPlansResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetAcceptedPlansResponse_FieldPathValue = (*BatchGetAcceptedPlansResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetAcceptedPlansResponse_FieldSubPathValue) AsAcceptedPlansPathValue() (accepted_plan.AcceptedPlan_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetAcceptedPlansResponse_FieldSubPathValue) SetTo(target **BatchGetAcceptedPlansResponse) {
	if *target == nil {
		*target = new(BatchGetAcceptedPlansResponse)
	}
	switch fpvs.Selector() {
	case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAcceptedPlansResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAcceptedPlansResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetAcceptedPlansResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetAcceptedPlansResponse_FieldSubPathValue) CompareWith(source *BatchGetAcceptedPlansResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAcceptedPlansResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetAcceptedPlansResponse))
}

// BatchGetAcceptedPlansResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAcceptedPlansResponse according to their type
// Present only for array (repeated) types.
type BatchGetAcceptedPlansResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAcceptedPlansResponse_FieldPath
	ContainsValue(*BatchGetAcceptedPlansResponse) bool
}

// ParseBatchGetAcceptedPlansResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAcceptedPlansResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAcceptedPlansResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAcceptedPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAcceptedPlansResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAcceptedPlansResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAcceptedPlansResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAcceptedPlansResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAcceptedPlansResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAcceptedPlansResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetAcceptedPlansResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAcceptedPlansResponse_FieldPathArrayItemValue = (*BatchGetAcceptedPlansResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAcceptedPlansResponse as interface{}
func (fpaiv *BatchGetAcceptedPlansResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAcceptedPlansResponse_FieldTerminalPathArrayItemValue) AsAcceptedPlansItemValue() (*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpaiv.value.(*accepted_plan.AcceptedPlan)
	return res, ok
}
func (fpaiv *BatchGetAcceptedPlansResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*accepted_plan.Reference, bool) {
	res, ok := fpaiv.value.(*accepted_plan.Reference)
	return res, ok
}

func (fpaiv *BatchGetAcceptedPlansResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAcceptedPlansResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAcceptedPlansResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAcceptedPlansResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAcceptedPlansResponse'
func (fpaiv *BatchGetAcceptedPlansResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAcceptedPlansResponse) bool {
	slice := fpaiv.BatchGetAcceptedPlansResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetAcceptedPlansResponse_FieldSubPathArrayItemValue struct {
	BatchGetAcceptedPlansResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetAcceptedPlansResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetAcceptedPlansResponse_FieldSubPathArrayItemValue) AsAcceptedPlansPathItemValue() (accepted_plan.AcceptedPlan_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(accepted_plan.AcceptedPlan_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAcceptedPlansResponse'
func (fpaivs *BatchGetAcceptedPlansResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetAcceptedPlansResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAcceptedPlansResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetAcceptedPlansResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetAcceptedPlansResponse fields according to their type
type BatchGetAcceptedPlansResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAcceptedPlansResponse_FieldPath
}

func ParseBatchGetAcceptedPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAcceptedPlansResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAcceptedPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAcceptedPlansResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAcceptedPlansResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAcceptedPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAcceptedPlansResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAcceptedPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAcceptedPlansResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetAcceptedPlansResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetAcceptedPlansResponse_FieldPathArrayOfValues = (*BatchGetAcceptedPlansResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAcceptedPlansResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		for _, v := range fpaov.values.([][]*accepted_plan.AcceptedPlan) {
			values = append(values, v)
		}
	case BatchGetAcceptedPlansResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*accepted_plan.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAcceptedPlansResponse_FieldTerminalPathArrayOfValues) AsAcceptedPlansArrayOfValues() ([][]*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpaov.values.([][]*accepted_plan.AcceptedPlan)
	return res, ok
}
func (fpaov *BatchGetAcceptedPlansResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*accepted_plan.Reference, bool) {
	res, ok := fpaov.values.([][]*accepted_plan.Reference)
	return res, ok
}

type BatchGetAcceptedPlansResponse_FieldSubPathArrayOfValues struct {
	BatchGetAcceptedPlansResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetAcceptedPlansResponse_FieldPathArrayOfValues = (*BatchGetAcceptedPlansResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetAcceptedPlansResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetAcceptedPlansResponse_FieldSubPathArrayOfValues) AsAcceptedPlansPathArrayOfValues() (accepted_plan.AcceptedPlan_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(accepted_plan.AcceptedPlan_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAcceptedPlansRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAcceptedPlansRequest_FieldPathSelector
	Get(source *ListAcceptedPlansRequest) []interface{}
	GetSingle(source *ListAcceptedPlansRequest) (interface{}, bool)
	ClearValue(item *ListAcceptedPlansRequest)

	// Those methods build corresponding ListAcceptedPlansRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAcceptedPlansRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAcceptedPlansRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAcceptedPlansRequest_FieldPathArrayItemValue
}

type ListAcceptedPlansRequest_FieldPathSelector int32

const (
	ListAcceptedPlansRequest_FieldPathSelectorParent    ListAcceptedPlansRequest_FieldPathSelector = 0
	ListAcceptedPlansRequest_FieldPathSelectorPageSize  ListAcceptedPlansRequest_FieldPathSelector = 1
	ListAcceptedPlansRequest_FieldPathSelectorPageToken ListAcceptedPlansRequest_FieldPathSelector = 2
	ListAcceptedPlansRequest_FieldPathSelectorOrderBy   ListAcceptedPlansRequest_FieldPathSelector = 3
	ListAcceptedPlansRequest_FieldPathSelectorFilter    ListAcceptedPlansRequest_FieldPathSelector = 4
	ListAcceptedPlansRequest_FieldPathSelectorFieldMask ListAcceptedPlansRequest_FieldPathSelector = 5
	ListAcceptedPlansRequest_FieldPathSelectorView      ListAcceptedPlansRequest_FieldPathSelector = 6
)

func (s ListAcceptedPlansRequest_FieldPathSelector) String() string {
	switch s {
	case ListAcceptedPlansRequest_FieldPathSelectorParent:
		return "parent"
	case ListAcceptedPlansRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListAcceptedPlansRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListAcceptedPlansRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListAcceptedPlansRequest_FieldPathSelectorFilter:
		return "filter"
	case ListAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListAcceptedPlansRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansRequest: %d", s))
	}
}

func BuildListAcceptedPlansRequest_FieldPath(fp gotenobject.RawFieldPath) (ListAcceptedPlansRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAcceptedPlansRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAcceptedPlansRequest", fp)
}

func ParseListAcceptedPlansRequest_FieldPath(rawField string) (ListAcceptedPlansRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAcceptedPlansRequest_FieldPath(fp)
}

func MustParseListAcceptedPlansRequest_FieldPath(rawField string) ListAcceptedPlansRequest_FieldPath {
	fp, err := ParseListAcceptedPlansRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAcceptedPlansRequest_FieldTerminalPath struct {
	selector ListAcceptedPlansRequest_FieldPathSelector
}

var _ ListAcceptedPlansRequest_FieldPath = (*ListAcceptedPlansRequest_FieldTerminalPath)(nil)

func (fp *ListAcceptedPlansRequest_FieldTerminalPath) Selector() ListAcceptedPlansRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAcceptedPlansRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAcceptedPlansRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAcceptedPlansRequest
func (fp *ListAcceptedPlansRequest_FieldTerminalPath) Get(source *ListAcceptedPlansRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAcceptedPlansRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListAcceptedPlansRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListAcceptedPlansRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListAcceptedPlansRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListAcceptedPlansRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListAcceptedPlansRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListAcceptedPlansRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAcceptedPlansRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAcceptedPlansRequest))
}

// GetSingle returns value pointed by specific field of from source ListAcceptedPlansRequest
func (fp *ListAcceptedPlansRequest_FieldTerminalPath) GetSingle(source *ListAcceptedPlansRequest) (interface{}, bool) {
	switch fp.selector {
	case ListAcceptedPlansRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListAcceptedPlansRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListAcceptedPlansRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListAcceptedPlansRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListAcceptedPlansRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListAcceptedPlansRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListAcceptedPlansRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansRequest: %d", fp.selector))
	}
}

func (fp *ListAcceptedPlansRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAcceptedPlansRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListAcceptedPlansRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAcceptedPlansRequest_FieldPathSelectorParent:
		return (*accepted_plan.ParentName)(nil)
	case ListAcceptedPlansRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListAcceptedPlansRequest_FieldPathSelectorPageToken:
		return (*accepted_plan.PagerCursor)(nil)
	case ListAcceptedPlansRequest_FieldPathSelectorOrderBy:
		return (*accepted_plan.OrderBy)(nil)
	case ListAcceptedPlansRequest_FieldPathSelectorFilter:
		return (*accepted_plan.Filter)(nil)
	case ListAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return (*accepted_plan.AcceptedPlan_FieldMask)(nil)
	case ListAcceptedPlansRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansRequest: %d", fp.selector))
	}
}

func (fp *ListAcceptedPlansRequest_FieldTerminalPath) ClearValue(item *ListAcceptedPlansRequest) {
	if item != nil {
		switch fp.selector {
		case ListAcceptedPlansRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListAcceptedPlansRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListAcceptedPlansRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListAcceptedPlansRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListAcceptedPlansRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListAcceptedPlansRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListAcceptedPlansRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansRequest: %d", fp.selector))
		}
	}
}

func (fp *ListAcceptedPlansRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAcceptedPlansRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAcceptedPlansRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAcceptedPlansRequest_FieldPathSelectorParent ||
		fp.selector == ListAcceptedPlansRequest_FieldPathSelectorPageSize ||
		fp.selector == ListAcceptedPlansRequest_FieldPathSelectorPageToken ||
		fp.selector == ListAcceptedPlansRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListAcceptedPlansRequest_FieldPathSelectorFilter ||
		fp.selector == ListAcceptedPlansRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListAcceptedPlansRequest_FieldPathSelectorView
}

func (fp *ListAcceptedPlansRequest_FieldTerminalPath) WithIValue(value interface{}) ListAcceptedPlansRequest_FieldPathValue {
	switch fp.selector {
	case ListAcceptedPlansRequest_FieldPathSelectorParent:
		return &ListAcceptedPlansRequest_FieldTerminalPathValue{ListAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.ParentName)}
	case ListAcceptedPlansRequest_FieldPathSelectorPageSize:
		return &ListAcceptedPlansRequest_FieldTerminalPathValue{ListAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListAcceptedPlansRequest_FieldPathSelectorPageToken:
		return &ListAcceptedPlansRequest_FieldTerminalPathValue{ListAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.PagerCursor)}
	case ListAcceptedPlansRequest_FieldPathSelectorOrderBy:
		return &ListAcceptedPlansRequest_FieldTerminalPathValue{ListAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.OrderBy)}
	case ListAcceptedPlansRequest_FieldPathSelectorFilter:
		return &ListAcceptedPlansRequest_FieldTerminalPathValue{ListAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.Filter)}
	case ListAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return &ListAcceptedPlansRequest_FieldTerminalPathValue{ListAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlan_FieldMask)}
	case ListAcceptedPlansRequest_FieldPathSelectorView:
		return &ListAcceptedPlansRequest_FieldTerminalPathValue{ListAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansRequest: %d", fp.selector))
	}
}

func (fp *ListAcceptedPlansRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAcceptedPlansRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAcceptedPlansRequest_FieldPathArrayOfValues {
	fpaov := &ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues{ListAcceptedPlansRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAcceptedPlansRequest_FieldPathSelectorParent:
		return &ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues{ListAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.ParentName)}
	case ListAcceptedPlansRequest_FieldPathSelectorPageSize:
		return &ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues{ListAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListAcceptedPlansRequest_FieldPathSelectorPageToken:
		return &ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues{ListAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.PagerCursor)}
	case ListAcceptedPlansRequest_FieldPathSelectorOrderBy:
		return &ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues{ListAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.OrderBy)}
	case ListAcceptedPlansRequest_FieldPathSelectorFilter:
		return &ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues{ListAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.Filter)}
	case ListAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return &ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues{ListAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.AcceptedPlan_FieldMask)}
	case ListAcceptedPlansRequest_FieldPathSelectorView:
		return &ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues{ListAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAcceptedPlansRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAcceptedPlansRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAcceptedPlansRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansRequest: %d", fp.selector))
	}
}

func (fp *ListAcceptedPlansRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListAcceptedPlansRequest_FieldPathValue allows storing values for ListAcceptedPlansRequest fields according to their type
type ListAcceptedPlansRequest_FieldPathValue interface {
	ListAcceptedPlansRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAcceptedPlansRequest)
	CompareWith(*ListAcceptedPlansRequest) (cmp int, comparable bool)
}

func ParseListAcceptedPlansRequest_FieldPathValue(pathStr, valueStr string) (ListAcceptedPlansRequest_FieldPathValue, error) {
	fp, err := ParseListAcceptedPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAcceptedPlansRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAcceptedPlansRequest_FieldPathValue), nil
}

func MustParseListAcceptedPlansRequest_FieldPathValue(pathStr, valueStr string) ListAcceptedPlansRequest_FieldPathValue {
	fpv, err := ParseListAcceptedPlansRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAcceptedPlansRequest_FieldTerminalPathValue struct {
	ListAcceptedPlansRequest_FieldTerminalPath
	value interface{}
}

var _ ListAcceptedPlansRequest_FieldPathValue = (*ListAcceptedPlansRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAcceptedPlansRequest' as interface{}
func (fpv *ListAcceptedPlansRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAcceptedPlansRequest_FieldTerminalPathValue) AsParentValue() (*accepted_plan.ParentName, bool) {
	res, ok := fpv.value.(*accepted_plan.ParentName)
	return res, ok
}
func (fpv *ListAcceptedPlansRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListAcceptedPlansRequest_FieldTerminalPathValue) AsPageTokenValue() (*accepted_plan.PagerCursor, bool) {
	res, ok := fpv.value.(*accepted_plan.PagerCursor)
	return res, ok
}
func (fpv *ListAcceptedPlansRequest_FieldTerminalPathValue) AsOrderByValue() (*accepted_plan.OrderBy, bool) {
	res, ok := fpv.value.(*accepted_plan.OrderBy)
	return res, ok
}
func (fpv *ListAcceptedPlansRequest_FieldTerminalPathValue) AsFilterValue() (*accepted_plan.Filter, bool) {
	res, ok := fpv.value.(*accepted_plan.Filter)
	return res, ok
}
func (fpv *ListAcceptedPlansRequest_FieldTerminalPathValue) AsFieldMaskValue() (*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}
func (fpv *ListAcceptedPlansRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListAcceptedPlansRequest
func (fpv *ListAcceptedPlansRequest_FieldTerminalPathValue) SetTo(target **ListAcceptedPlansRequest) {
	if *target == nil {
		*target = new(ListAcceptedPlansRequest)
	}
	switch fpv.selector {
	case ListAcceptedPlansRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*accepted_plan.ParentName)
	case ListAcceptedPlansRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListAcceptedPlansRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*accepted_plan.PagerCursor)
	case ListAcceptedPlansRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*accepted_plan.OrderBy)
	case ListAcceptedPlansRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*accepted_plan.Filter)
	case ListAcceptedPlansRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	case ListAcceptedPlansRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansRequest: %d", fpv.selector))
	}
}

func (fpv *ListAcceptedPlansRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAcceptedPlansRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAcceptedPlansRequest_FieldTerminalPathValue' with the value under path in 'ListAcceptedPlansRequest'.
func (fpv *ListAcceptedPlansRequest_FieldTerminalPathValue) CompareWith(source *ListAcceptedPlansRequest) (int, bool) {
	switch fpv.selector {
	case ListAcceptedPlansRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*accepted_plan.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListAcceptedPlansRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListAcceptedPlansRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListAcceptedPlansRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListAcceptedPlansRequest_FieldPathSelectorFilter:
		return 0, false
	case ListAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListAcceptedPlansRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansRequest: %d", fpv.selector))
	}
}

func (fpv *ListAcceptedPlansRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAcceptedPlansRequest))
}

// ListAcceptedPlansRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAcceptedPlansRequest according to their type
// Present only for array (repeated) types.
type ListAcceptedPlansRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAcceptedPlansRequest_FieldPath
	ContainsValue(*ListAcceptedPlansRequest) bool
}

// ParseListAcceptedPlansRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAcceptedPlansRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListAcceptedPlansRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListAcceptedPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAcceptedPlansRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAcceptedPlansRequest_FieldPathArrayItemValue), nil
}

func MustParseListAcceptedPlansRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListAcceptedPlansRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListAcceptedPlansRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAcceptedPlansRequest_FieldTerminalPathArrayItemValue struct {
	ListAcceptedPlansRequest_FieldTerminalPath
	value interface{}
}

var _ ListAcceptedPlansRequest_FieldPathArrayItemValue = (*ListAcceptedPlansRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAcceptedPlansRequest as interface{}
func (fpaiv *ListAcceptedPlansRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListAcceptedPlansRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListAcceptedPlansRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAcceptedPlansRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAcceptedPlansRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAcceptedPlansRequest'
func (fpaiv *ListAcceptedPlansRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAcceptedPlansRequest) bool {
	slice := fpaiv.ListAcceptedPlansRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListAcceptedPlansRequest_FieldPathArrayOfValues allows storing slice of values for ListAcceptedPlansRequest fields according to their type
type ListAcceptedPlansRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAcceptedPlansRequest_FieldPath
}

func ParseListAcceptedPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAcceptedPlansRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListAcceptedPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAcceptedPlansRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAcceptedPlansRequest_FieldPathArrayOfValues), nil
}

func MustParseListAcceptedPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListAcceptedPlansRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListAcceptedPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues struct {
	ListAcceptedPlansRequest_FieldTerminalPath
	values interface{}
}

var _ ListAcceptedPlansRequest_FieldPathArrayOfValues = (*ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAcceptedPlansRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*accepted_plan.ParentName) {
			values = append(values, v)
		}
	case ListAcceptedPlansRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListAcceptedPlansRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*accepted_plan.PagerCursor) {
			values = append(values, v)
		}
	case ListAcceptedPlansRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*accepted_plan.OrderBy) {
			values = append(values, v)
		}
	case ListAcceptedPlansRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*accepted_plan.Filter) {
			values = append(values, v)
		}
	case ListAcceptedPlansRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask) {
			values = append(values, v)
		}
	case ListAcceptedPlansRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*accepted_plan.ParentName, bool) {
	res, ok := fpaov.values.([]*accepted_plan.ParentName)
	return res, ok
}
func (fpaov *ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*accepted_plan.PagerCursor, bool) {
	res, ok := fpaov.values.([]*accepted_plan.PagerCursor)
	return res, ok
}
func (fpaov *ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*accepted_plan.OrderBy, bool) {
	res, ok := fpaov.values.([]*accepted_plan.OrderBy)
	return res, ok
}
func (fpaov *ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*accepted_plan.Filter, bool) {
	res, ok := fpaov.values.([]*accepted_plan.Filter)
	return res, ok
}
func (fpaov *ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}
func (fpaov *ListAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAcceptedPlansResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAcceptedPlansResponse_FieldPathSelector
	Get(source *ListAcceptedPlansResponse) []interface{}
	GetSingle(source *ListAcceptedPlansResponse) (interface{}, bool)
	ClearValue(item *ListAcceptedPlansResponse)

	// Those methods build corresponding ListAcceptedPlansResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAcceptedPlansResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAcceptedPlansResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAcceptedPlansResponse_FieldPathArrayItemValue
}

type ListAcceptedPlansResponse_FieldPathSelector int32

const (
	ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans ListAcceptedPlansResponse_FieldPathSelector = 0
	ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken ListAcceptedPlansResponse_FieldPathSelector = 1
	ListAcceptedPlansResponse_FieldPathSelectorNextPageToken ListAcceptedPlansResponse_FieldPathSelector = 2
)

func (s ListAcceptedPlansResponse_FieldPathSelector) String() string {
	switch s {
	case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return "accepted_plans"
	case ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListAcceptedPlansResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", s))
	}
}

func BuildListAcceptedPlansResponse_FieldPath(fp gotenobject.RawFieldPath) (ListAcceptedPlansResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAcceptedPlansResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "accepted_plans", "acceptedPlans", "accepted-plans":
			return &ListAcceptedPlansResponse_FieldTerminalPath{selector: ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListAcceptedPlansResponse_FieldTerminalPath{selector: ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListAcceptedPlansResponse_FieldTerminalPath{selector: ListAcceptedPlansResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "accepted_plans", "acceptedPlans", "accepted-plans":
			if subpath, err := accepted_plan.BuildAcceptedPlan_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListAcceptedPlansResponse_FieldSubPath{selector: ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAcceptedPlansResponse", fp)
}

func ParseListAcceptedPlansResponse_FieldPath(rawField string) (ListAcceptedPlansResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAcceptedPlansResponse_FieldPath(fp)
}

func MustParseListAcceptedPlansResponse_FieldPath(rawField string) ListAcceptedPlansResponse_FieldPath {
	fp, err := ParseListAcceptedPlansResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAcceptedPlansResponse_FieldTerminalPath struct {
	selector ListAcceptedPlansResponse_FieldPathSelector
}

var _ ListAcceptedPlansResponse_FieldPath = (*ListAcceptedPlansResponse_FieldTerminalPath)(nil)

func (fp *ListAcceptedPlansResponse_FieldTerminalPath) Selector() ListAcceptedPlansResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAcceptedPlansResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAcceptedPlansResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAcceptedPlansResponse
func (fp *ListAcceptedPlansResponse_FieldTerminalPath) Get(source *ListAcceptedPlansResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
			for _, value := range source.GetAcceptedPlans() {
				values = append(values, value)
			}
		case ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListAcceptedPlansResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAcceptedPlansResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAcceptedPlansResponse))
}

// GetSingle returns value pointed by specific field of from source ListAcceptedPlansResponse
func (fp *ListAcceptedPlansResponse_FieldTerminalPath) GetSingle(source *ListAcceptedPlansResponse) (interface{}, bool) {
	switch fp.selector {
	case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		res := source.GetAcceptedPlans()
		return res, res != nil
	case ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListAcceptedPlansResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fp.selector))
	}
}

func (fp *ListAcceptedPlansResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAcceptedPlansResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListAcceptedPlansResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return ([]*accepted_plan.AcceptedPlan)(nil)
	case ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken:
		return (*accepted_plan.PagerCursor)(nil)
	case ListAcceptedPlansResponse_FieldPathSelectorNextPageToken:
		return (*accepted_plan.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fp.selector))
	}
}

func (fp *ListAcceptedPlansResponse_FieldTerminalPath) ClearValue(item *ListAcceptedPlansResponse) {
	if item != nil {
		switch fp.selector {
		case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
			item.AcceptedPlans = nil
		case ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListAcceptedPlansResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fp.selector))
		}
	}
}

func (fp *ListAcceptedPlansResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAcceptedPlansResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAcceptedPlansResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListAcceptedPlansResponse_FieldPathSelectorNextPageToken
}

func (fp *ListAcceptedPlansResponse_FieldTerminalPath) WithIValue(value interface{}) ListAcceptedPlansResponse_FieldPathValue {
	switch fp.selector {
	case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return &ListAcceptedPlansResponse_FieldTerminalPathValue{ListAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.([]*accepted_plan.AcceptedPlan)}
	case ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken:
		return &ListAcceptedPlansResponse_FieldTerminalPathValue{ListAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.(*accepted_plan.PagerCursor)}
	case ListAcceptedPlansResponse_FieldPathSelectorNextPageToken:
		return &ListAcceptedPlansResponse_FieldTerminalPathValue{ListAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.(*accepted_plan.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fp.selector))
	}
}

func (fp *ListAcceptedPlansResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAcceptedPlansResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAcceptedPlansResponse_FieldPathArrayOfValues {
	fpaov := &ListAcceptedPlansResponse_FieldTerminalPathArrayOfValues{ListAcceptedPlansResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return &ListAcceptedPlansResponse_FieldTerminalPathArrayOfValues{ListAcceptedPlansResponse_FieldTerminalPath: *fp, values: values.([][]*accepted_plan.AcceptedPlan)}
	case ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken:
		return &ListAcceptedPlansResponse_FieldTerminalPathArrayOfValues{ListAcceptedPlansResponse_FieldTerminalPath: *fp, values: values.([]*accepted_plan.PagerCursor)}
	case ListAcceptedPlansResponse_FieldPathSelectorNextPageToken:
		return &ListAcceptedPlansResponse_FieldTerminalPathArrayOfValues{ListAcceptedPlansResponse_FieldTerminalPath: *fp, values: values.([]*accepted_plan.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAcceptedPlansResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAcceptedPlansResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAcceptedPlansResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return &ListAcceptedPlansResponse_FieldTerminalPathArrayItemValue{ListAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlan)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fp.selector))
	}
}

func (fp *ListAcceptedPlansResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListAcceptedPlansResponse_FieldSubPath struct {
	selector ListAcceptedPlansResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListAcceptedPlansResponse_FieldPath = (*ListAcceptedPlansResponse_FieldSubPath)(nil)

func (fps *ListAcceptedPlansResponse_FieldSubPath) Selector() ListAcceptedPlansResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListAcceptedPlansResponse_FieldSubPath) AsAcceptedPlansSubPath() (accepted_plan.AcceptedPlan_FieldPath, bool) {
	res, ok := fps.subPath.(accepted_plan.AcceptedPlan_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListAcceptedPlansResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListAcceptedPlansResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListAcceptedPlansResponse
func (fps *ListAcceptedPlansResponse_FieldSubPath) Get(source *ListAcceptedPlansResponse) (values []interface{}) {
	if asAcceptedPlanFieldPath, ok := fps.AsAcceptedPlansSubPath(); ok {
		for _, item := range source.GetAcceptedPlans() {
			values = append(values, asAcceptedPlanFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fps.selector))
	}
	return
}

func (fps *ListAcceptedPlansResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListAcceptedPlansResponse))
}

// GetSingle returns value of selected field from source ListAcceptedPlansResponse
func (fps *ListAcceptedPlansResponse_FieldSubPath) GetSingle(source *ListAcceptedPlansResponse) (interface{}, bool) {
	switch fps.selector {
	case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		if len(source.GetAcceptedPlans()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAcceptedPlans()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fps.selector))
	}
}

func (fps *ListAcceptedPlansResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListAcceptedPlansResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListAcceptedPlansResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListAcceptedPlansResponse_FieldSubPath) ClearValue(item *ListAcceptedPlansResponse) {
	if item != nil {
		switch fps.selector {
		case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
			for _, subItem := range item.AcceptedPlans {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fps.selector))
		}
	}
}

func (fps *ListAcceptedPlansResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListAcceptedPlansResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListAcceptedPlansResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListAcceptedPlansResponse_FieldSubPath) WithIValue(value interface{}) ListAcceptedPlansResponse_FieldPathValue {
	return &ListAcceptedPlansResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListAcceptedPlansResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListAcceptedPlansResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListAcceptedPlansResponse_FieldPathArrayOfValues {
	return &ListAcceptedPlansResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListAcceptedPlansResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListAcceptedPlansResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListAcceptedPlansResponse_FieldPathArrayItemValue {
	return &ListAcceptedPlansResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListAcceptedPlansResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListAcceptedPlansResponse_FieldPathValue allows storing values for ListAcceptedPlansResponse fields according to their type
type ListAcceptedPlansResponse_FieldPathValue interface {
	ListAcceptedPlansResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAcceptedPlansResponse)
	CompareWith(*ListAcceptedPlansResponse) (cmp int, comparable bool)
}

func ParseListAcceptedPlansResponse_FieldPathValue(pathStr, valueStr string) (ListAcceptedPlansResponse_FieldPathValue, error) {
	fp, err := ParseListAcceptedPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAcceptedPlansResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAcceptedPlansResponse_FieldPathValue), nil
}

func MustParseListAcceptedPlansResponse_FieldPathValue(pathStr, valueStr string) ListAcceptedPlansResponse_FieldPathValue {
	fpv, err := ParseListAcceptedPlansResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAcceptedPlansResponse_FieldTerminalPathValue struct {
	ListAcceptedPlansResponse_FieldTerminalPath
	value interface{}
}

var _ ListAcceptedPlansResponse_FieldPathValue = (*ListAcceptedPlansResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAcceptedPlansResponse' as interface{}
func (fpv *ListAcceptedPlansResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAcceptedPlansResponse_FieldTerminalPathValue) AsAcceptedPlansValue() ([]*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpv.value.([]*accepted_plan.AcceptedPlan)
	return res, ok
}
func (fpv *ListAcceptedPlansResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*accepted_plan.PagerCursor, bool) {
	res, ok := fpv.value.(*accepted_plan.PagerCursor)
	return res, ok
}
func (fpv *ListAcceptedPlansResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*accepted_plan.PagerCursor, bool) {
	res, ok := fpv.value.(*accepted_plan.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListAcceptedPlansResponse
func (fpv *ListAcceptedPlansResponse_FieldTerminalPathValue) SetTo(target **ListAcceptedPlansResponse) {
	if *target == nil {
		*target = new(ListAcceptedPlansResponse)
	}
	switch fpv.selector {
	case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		(*target).AcceptedPlans = fpv.value.([]*accepted_plan.AcceptedPlan)
	case ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*accepted_plan.PagerCursor)
	case ListAcceptedPlansResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*accepted_plan.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fpv.selector))
	}
}

func (fpv *ListAcceptedPlansResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAcceptedPlansResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAcceptedPlansResponse_FieldTerminalPathValue' with the value under path in 'ListAcceptedPlansResponse'.
func (fpv *ListAcceptedPlansResponse_FieldTerminalPathValue) CompareWith(source *ListAcceptedPlansResponse) (int, bool) {
	switch fpv.selector {
	case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return 0, false
	case ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListAcceptedPlansResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fpv.selector))
	}
}

func (fpv *ListAcceptedPlansResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAcceptedPlansResponse))
}

type ListAcceptedPlansResponse_FieldSubPathValue struct {
	ListAcceptedPlansResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListAcceptedPlansResponse_FieldPathValue = (*ListAcceptedPlansResponse_FieldSubPathValue)(nil)

func (fpvs *ListAcceptedPlansResponse_FieldSubPathValue) AsAcceptedPlansPathValue() (accepted_plan.AcceptedPlan_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue)
	return res, ok
}

func (fpvs *ListAcceptedPlansResponse_FieldSubPathValue) SetTo(target **ListAcceptedPlansResponse) {
	if *target == nil {
		*target = new(ListAcceptedPlansResponse)
	}
	switch fpvs.Selector() {
	case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAcceptedPlansResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAcceptedPlansResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListAcceptedPlansResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListAcceptedPlansResponse_FieldSubPathValue) CompareWith(source *ListAcceptedPlansResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAcceptedPlansResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListAcceptedPlansResponse))
}

// ListAcceptedPlansResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAcceptedPlansResponse according to their type
// Present only for array (repeated) types.
type ListAcceptedPlansResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAcceptedPlansResponse_FieldPath
	ContainsValue(*ListAcceptedPlansResponse) bool
}

// ParseListAcceptedPlansResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAcceptedPlansResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListAcceptedPlansResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListAcceptedPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAcceptedPlansResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAcceptedPlansResponse_FieldPathArrayItemValue), nil
}

func MustParseListAcceptedPlansResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListAcceptedPlansResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListAcceptedPlansResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAcceptedPlansResponse_FieldTerminalPathArrayItemValue struct {
	ListAcceptedPlansResponse_FieldTerminalPath
	value interface{}
}

var _ ListAcceptedPlansResponse_FieldPathArrayItemValue = (*ListAcceptedPlansResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAcceptedPlansResponse as interface{}
func (fpaiv *ListAcceptedPlansResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListAcceptedPlansResponse_FieldTerminalPathArrayItemValue) AsAcceptedPlansItemValue() (*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpaiv.value.(*accepted_plan.AcceptedPlan)
	return res, ok
}

func (fpaiv *ListAcceptedPlansResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListAcceptedPlansResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAcceptedPlansResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAcceptedPlansResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAcceptedPlansResponse'
func (fpaiv *ListAcceptedPlansResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAcceptedPlansResponse) bool {
	slice := fpaiv.ListAcceptedPlansResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListAcceptedPlansResponse_FieldSubPathArrayItemValue struct {
	ListAcceptedPlansResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListAcceptedPlansResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListAcceptedPlansResponse_FieldSubPathArrayItemValue) AsAcceptedPlansPathItemValue() (accepted_plan.AcceptedPlan_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(accepted_plan.AcceptedPlan_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAcceptedPlansResponse'
func (fpaivs *ListAcceptedPlansResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListAcceptedPlansResponse) bool {
	switch fpaivs.Selector() {
	case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAcceptedPlansResponse: %d", fpaivs.Selector()))
	}
}

// ListAcceptedPlansResponse_FieldPathArrayOfValues allows storing slice of values for ListAcceptedPlansResponse fields according to their type
type ListAcceptedPlansResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAcceptedPlansResponse_FieldPath
}

func ParseListAcceptedPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAcceptedPlansResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListAcceptedPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAcceptedPlansResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAcceptedPlansResponse_FieldPathArrayOfValues), nil
}

func MustParseListAcceptedPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListAcceptedPlansResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListAcceptedPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAcceptedPlansResponse_FieldTerminalPathArrayOfValues struct {
	ListAcceptedPlansResponse_FieldTerminalPath
	values interface{}
}

var _ ListAcceptedPlansResponse_FieldPathArrayOfValues = (*ListAcceptedPlansResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAcceptedPlansResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans:
		for _, v := range fpaov.values.([][]*accepted_plan.AcceptedPlan) {
			values = append(values, v)
		}
	case ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*accepted_plan.PagerCursor) {
			values = append(values, v)
		}
	case ListAcceptedPlansResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*accepted_plan.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAcceptedPlansResponse_FieldTerminalPathArrayOfValues) AsAcceptedPlansArrayOfValues() ([][]*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpaov.values.([][]*accepted_plan.AcceptedPlan)
	return res, ok
}
func (fpaov *ListAcceptedPlansResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*accepted_plan.PagerCursor, bool) {
	res, ok := fpaov.values.([]*accepted_plan.PagerCursor)
	return res, ok
}
func (fpaov *ListAcceptedPlansResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*accepted_plan.PagerCursor, bool) {
	res, ok := fpaov.values.([]*accepted_plan.PagerCursor)
	return res, ok
}

type ListAcceptedPlansResponse_FieldSubPathArrayOfValues struct {
	ListAcceptedPlansResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListAcceptedPlansResponse_FieldPathArrayOfValues = (*ListAcceptedPlansResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListAcceptedPlansResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListAcceptedPlansResponse_FieldSubPathArrayOfValues) AsAcceptedPlansPathArrayOfValues() (accepted_plan.AcceptedPlan_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(accepted_plan.AcceptedPlan_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAcceptedPlanRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAcceptedPlanRequest_FieldPathSelector
	Get(source *WatchAcceptedPlanRequest) []interface{}
	GetSingle(source *WatchAcceptedPlanRequest) (interface{}, bool)
	ClearValue(item *WatchAcceptedPlanRequest)

	// Those methods build corresponding WatchAcceptedPlanRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAcceptedPlanRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAcceptedPlanRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAcceptedPlanRequest_FieldPathArrayItemValue
}

type WatchAcceptedPlanRequest_FieldPathSelector int32

const (
	WatchAcceptedPlanRequest_FieldPathSelectorName      WatchAcceptedPlanRequest_FieldPathSelector = 0
	WatchAcceptedPlanRequest_FieldPathSelectorFieldMask WatchAcceptedPlanRequest_FieldPathSelector = 1
	WatchAcceptedPlanRequest_FieldPathSelectorView      WatchAcceptedPlanRequest_FieldPathSelector = 2
)

func (s WatchAcceptedPlanRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAcceptedPlanRequest_FieldPathSelectorName:
		return "name"
	case WatchAcceptedPlanRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAcceptedPlanRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanRequest: %d", s))
	}
}

func BuildWatchAcceptedPlanRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAcceptedPlanRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAcceptedPlanRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchAcceptedPlanRequest_FieldTerminalPath{selector: WatchAcceptedPlanRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAcceptedPlanRequest_FieldTerminalPath{selector: WatchAcceptedPlanRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAcceptedPlanRequest_FieldTerminalPath{selector: WatchAcceptedPlanRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAcceptedPlanRequest", fp)
}

func ParseWatchAcceptedPlanRequest_FieldPath(rawField string) (WatchAcceptedPlanRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAcceptedPlanRequest_FieldPath(fp)
}

func MustParseWatchAcceptedPlanRequest_FieldPath(rawField string) WatchAcceptedPlanRequest_FieldPath {
	fp, err := ParseWatchAcceptedPlanRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAcceptedPlanRequest_FieldTerminalPath struct {
	selector WatchAcceptedPlanRequest_FieldPathSelector
}

var _ WatchAcceptedPlanRequest_FieldPath = (*WatchAcceptedPlanRequest_FieldTerminalPath)(nil)

func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) Selector() WatchAcceptedPlanRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAcceptedPlanRequest
func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) Get(source *WatchAcceptedPlanRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAcceptedPlanRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchAcceptedPlanRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAcceptedPlanRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAcceptedPlanRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAcceptedPlanRequest
func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) GetSingle(source *WatchAcceptedPlanRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAcceptedPlanRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchAcceptedPlanRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAcceptedPlanRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAcceptedPlanRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAcceptedPlanRequest_FieldPathSelectorName:
		return (*accepted_plan.Reference)(nil)
	case WatchAcceptedPlanRequest_FieldPathSelectorFieldMask:
		return (*accepted_plan.AcceptedPlan_FieldMask)(nil)
	case WatchAcceptedPlanRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) ClearValue(item *WatchAcceptedPlanRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAcceptedPlanRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchAcceptedPlanRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAcceptedPlanRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAcceptedPlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAcceptedPlanRequest_FieldPathSelectorName ||
		fp.selector == WatchAcceptedPlanRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAcceptedPlanRequest_FieldPathSelectorView
}

func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAcceptedPlanRequest_FieldPathValue {
	switch fp.selector {
	case WatchAcceptedPlanRequest_FieldPathSelectorName:
		return &WatchAcceptedPlanRequest_FieldTerminalPathValue{WatchAcceptedPlanRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.Reference)}
	case WatchAcceptedPlanRequest_FieldPathSelectorFieldMask:
		return &WatchAcceptedPlanRequest_FieldTerminalPathValue{WatchAcceptedPlanRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlan_FieldMask)}
	case WatchAcceptedPlanRequest_FieldPathSelectorView:
		return &WatchAcceptedPlanRequest_FieldTerminalPathValue{WatchAcceptedPlanRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAcceptedPlanRequest_FieldPathArrayOfValues {
	fpaov := &WatchAcceptedPlanRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlanRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAcceptedPlanRequest_FieldPathSelectorName:
		return &WatchAcceptedPlanRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlanRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.Reference)}
	case WatchAcceptedPlanRequest_FieldPathSelectorFieldMask:
		return &WatchAcceptedPlanRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlanRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.AcceptedPlan_FieldMask)}
	case WatchAcceptedPlanRequest_FieldPathSelectorView:
		return &WatchAcceptedPlanRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlanRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAcceptedPlanRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlanRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAcceptedPlanRequest_FieldPathValue allows storing values for WatchAcceptedPlanRequest fields according to their type
type WatchAcceptedPlanRequest_FieldPathValue interface {
	WatchAcceptedPlanRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAcceptedPlanRequest)
	CompareWith(*WatchAcceptedPlanRequest) (cmp int, comparable bool)
}

func ParseWatchAcceptedPlanRequest_FieldPathValue(pathStr, valueStr string) (WatchAcceptedPlanRequest_FieldPathValue, error) {
	fp, err := ParseWatchAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAcceptedPlanRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAcceptedPlanRequest_FieldPathValue), nil
}

func MustParseWatchAcceptedPlanRequest_FieldPathValue(pathStr, valueStr string) WatchAcceptedPlanRequest_FieldPathValue {
	fpv, err := ParseWatchAcceptedPlanRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAcceptedPlanRequest_FieldTerminalPathValue struct {
	WatchAcceptedPlanRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAcceptedPlanRequest_FieldPathValue = (*WatchAcceptedPlanRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAcceptedPlanRequest' as interface{}
func (fpv *WatchAcceptedPlanRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAcceptedPlanRequest_FieldTerminalPathValue) AsNameValue() (*accepted_plan.Reference, bool) {
	res, ok := fpv.value.(*accepted_plan.Reference)
	return res, ok
}
func (fpv *WatchAcceptedPlanRequest_FieldTerminalPathValue) AsFieldMaskValue() (*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}
func (fpv *WatchAcceptedPlanRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchAcceptedPlanRequest
func (fpv *WatchAcceptedPlanRequest_FieldTerminalPathValue) SetTo(target **WatchAcceptedPlanRequest) {
	if *target == nil {
		*target = new(WatchAcceptedPlanRequest)
	}
	switch fpv.selector {
	case WatchAcceptedPlanRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*accepted_plan.Reference)
	case WatchAcceptedPlanRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	case WatchAcceptedPlanRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAcceptedPlanRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAcceptedPlanRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAcceptedPlanRequest_FieldTerminalPathValue' with the value under path in 'WatchAcceptedPlanRequest'.
func (fpv *WatchAcceptedPlanRequest_FieldTerminalPathValue) CompareWith(source *WatchAcceptedPlanRequest) (int, bool) {
	switch fpv.selector {
	case WatchAcceptedPlanRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*accepted_plan.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAcceptedPlanRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAcceptedPlanRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAcceptedPlanRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAcceptedPlanRequest))
}

// WatchAcceptedPlanRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAcceptedPlanRequest according to their type
// Present only for array (repeated) types.
type WatchAcceptedPlanRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAcceptedPlanRequest_FieldPath
	ContainsValue(*WatchAcceptedPlanRequest) bool
}

// ParseWatchAcceptedPlanRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAcceptedPlanRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAcceptedPlanRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAcceptedPlanRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAcceptedPlanRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAcceptedPlanRequest_FieldTerminalPathArrayItemValue struct {
	WatchAcceptedPlanRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAcceptedPlanRequest_FieldPathArrayItemValue = (*WatchAcceptedPlanRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAcceptedPlanRequest as interface{}
func (fpaiv *WatchAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAcceptedPlanRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAcceptedPlanRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAcceptedPlanRequest'
func (fpaiv *WatchAcceptedPlanRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAcceptedPlanRequest) bool {
	slice := fpaiv.WatchAcceptedPlanRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAcceptedPlanRequest_FieldPathArrayOfValues allows storing slice of values for WatchAcceptedPlanRequest fields according to their type
type WatchAcceptedPlanRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAcceptedPlanRequest_FieldPath
}

func ParseWatchAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAcceptedPlanRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAcceptedPlanRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAcceptedPlanRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAcceptedPlanRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAcceptedPlanRequest_FieldTerminalPathArrayOfValues struct {
	WatchAcceptedPlanRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAcceptedPlanRequest_FieldPathArrayOfValues = (*WatchAcceptedPlanRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAcceptedPlanRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAcceptedPlanRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*accepted_plan.Reference) {
			values = append(values, v)
		}
	case WatchAcceptedPlanRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask) {
			values = append(values, v)
		}
	case WatchAcceptedPlanRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAcceptedPlanRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*accepted_plan.Reference, bool) {
	res, ok := fpaov.values.([]*accepted_plan.Reference)
	return res, ok
}
func (fpaov *WatchAcceptedPlanRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}
func (fpaov *WatchAcceptedPlanRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAcceptedPlanResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAcceptedPlanResponse_FieldPathSelector
	Get(source *WatchAcceptedPlanResponse) []interface{}
	GetSingle(source *WatchAcceptedPlanResponse) (interface{}, bool)
	ClearValue(item *WatchAcceptedPlanResponse)

	// Those methods build corresponding WatchAcceptedPlanResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAcceptedPlanResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAcceptedPlanResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAcceptedPlanResponse_FieldPathArrayItemValue
}

type WatchAcceptedPlanResponse_FieldPathSelector int32

const (
	WatchAcceptedPlanResponse_FieldPathSelectorChange WatchAcceptedPlanResponse_FieldPathSelector = 0
)

func (s WatchAcceptedPlanResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAcceptedPlanResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanResponse: %d", s))
	}
}

func BuildWatchAcceptedPlanResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAcceptedPlanResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAcceptedPlanResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchAcceptedPlanResponse_FieldTerminalPath{selector: WatchAcceptedPlanResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAcceptedPlanResponse", fp)
}

func ParseWatchAcceptedPlanResponse_FieldPath(rawField string) (WatchAcceptedPlanResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAcceptedPlanResponse_FieldPath(fp)
}

func MustParseWatchAcceptedPlanResponse_FieldPath(rawField string) WatchAcceptedPlanResponse_FieldPath {
	fp, err := ParseWatchAcceptedPlanResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAcceptedPlanResponse_FieldTerminalPath struct {
	selector WatchAcceptedPlanResponse_FieldPathSelector
}

var _ WatchAcceptedPlanResponse_FieldPath = (*WatchAcceptedPlanResponse_FieldTerminalPath)(nil)

func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) Selector() WatchAcceptedPlanResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAcceptedPlanResponse
func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) Get(source *WatchAcceptedPlanResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAcceptedPlanResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAcceptedPlanResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAcceptedPlanResponse
func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) GetSingle(source *WatchAcceptedPlanResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAcceptedPlanResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanResponse: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAcceptedPlanResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAcceptedPlanResponse_FieldPathSelectorChange:
		return (*accepted_plan.AcceptedPlanChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanResponse: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) ClearValue(item *WatchAcceptedPlanResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAcceptedPlanResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAcceptedPlanResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAcceptedPlanResponse_FieldPathSelectorChange
}

func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAcceptedPlanResponse_FieldPathValue {
	switch fp.selector {
	case WatchAcceptedPlanResponse_FieldPathSelectorChange:
		return &WatchAcceptedPlanResponse_FieldTerminalPathValue{WatchAcceptedPlanResponse_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlanChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanResponse: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAcceptedPlanResponse_FieldPathArrayOfValues {
	fpaov := &WatchAcceptedPlanResponse_FieldTerminalPathArrayOfValues{WatchAcceptedPlanResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAcceptedPlanResponse_FieldPathSelectorChange:
		return &WatchAcceptedPlanResponse_FieldTerminalPathArrayOfValues{WatchAcceptedPlanResponse_FieldTerminalPath: *fp, values: values.([]*accepted_plan.AcceptedPlanChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAcceptedPlanResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanResponse: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlanResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAcceptedPlanResponse_FieldPathValue allows storing values for WatchAcceptedPlanResponse fields according to their type
type WatchAcceptedPlanResponse_FieldPathValue interface {
	WatchAcceptedPlanResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAcceptedPlanResponse)
	CompareWith(*WatchAcceptedPlanResponse) (cmp int, comparable bool)
}

func ParseWatchAcceptedPlanResponse_FieldPathValue(pathStr, valueStr string) (WatchAcceptedPlanResponse_FieldPathValue, error) {
	fp, err := ParseWatchAcceptedPlanResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAcceptedPlanResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAcceptedPlanResponse_FieldPathValue), nil
}

func MustParseWatchAcceptedPlanResponse_FieldPathValue(pathStr, valueStr string) WatchAcceptedPlanResponse_FieldPathValue {
	fpv, err := ParseWatchAcceptedPlanResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAcceptedPlanResponse_FieldTerminalPathValue struct {
	WatchAcceptedPlanResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAcceptedPlanResponse_FieldPathValue = (*WatchAcceptedPlanResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAcceptedPlanResponse' as interface{}
func (fpv *WatchAcceptedPlanResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAcceptedPlanResponse_FieldTerminalPathValue) AsChangeValue() (*accepted_plan.AcceptedPlanChange, bool) {
	res, ok := fpv.value.(*accepted_plan.AcceptedPlanChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchAcceptedPlanResponse
func (fpv *WatchAcceptedPlanResponse_FieldTerminalPathValue) SetTo(target **WatchAcceptedPlanResponse) {
	if *target == nil {
		*target = new(WatchAcceptedPlanResponse)
	}
	switch fpv.selector {
	case WatchAcceptedPlanResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*accepted_plan.AcceptedPlanChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAcceptedPlanResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAcceptedPlanResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAcceptedPlanResponse_FieldTerminalPathValue' with the value under path in 'WatchAcceptedPlanResponse'.
func (fpv *WatchAcceptedPlanResponse_FieldTerminalPathValue) CompareWith(source *WatchAcceptedPlanResponse) (int, bool) {
	switch fpv.selector {
	case WatchAcceptedPlanResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlanResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAcceptedPlanResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAcceptedPlanResponse))
}

// WatchAcceptedPlanResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAcceptedPlanResponse according to their type
// Present only for array (repeated) types.
type WatchAcceptedPlanResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAcceptedPlanResponse_FieldPath
	ContainsValue(*WatchAcceptedPlanResponse) bool
}

// ParseWatchAcceptedPlanResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAcceptedPlanResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAcceptedPlanResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAcceptedPlanResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAcceptedPlanResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAcceptedPlanResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAcceptedPlanResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAcceptedPlanResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAcceptedPlanResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAcceptedPlanResponse_FieldTerminalPathArrayItemValue struct {
	WatchAcceptedPlanResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAcceptedPlanResponse_FieldPathArrayItemValue = (*WatchAcceptedPlanResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAcceptedPlanResponse as interface{}
func (fpaiv *WatchAcceptedPlanResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAcceptedPlanResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAcceptedPlanResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAcceptedPlanResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAcceptedPlanResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAcceptedPlanResponse'
func (fpaiv *WatchAcceptedPlanResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAcceptedPlanResponse) bool {
	slice := fpaiv.WatchAcceptedPlanResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAcceptedPlanResponse_FieldPathArrayOfValues allows storing slice of values for WatchAcceptedPlanResponse fields according to their type
type WatchAcceptedPlanResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAcceptedPlanResponse_FieldPath
}

func ParseWatchAcceptedPlanResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAcceptedPlanResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAcceptedPlanResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAcceptedPlanResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAcceptedPlanResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAcceptedPlanResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAcceptedPlanResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAcceptedPlanResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAcceptedPlanResponse_FieldTerminalPathArrayOfValues struct {
	WatchAcceptedPlanResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAcceptedPlanResponse_FieldPathArrayOfValues = (*WatchAcceptedPlanResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAcceptedPlanResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAcceptedPlanResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*accepted_plan.AcceptedPlanChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAcceptedPlanResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*accepted_plan.AcceptedPlanChange, bool) {
	res, ok := fpaov.values.([]*accepted_plan.AcceptedPlanChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAcceptedPlansRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAcceptedPlansRequest_FieldPathSelector
	Get(source *WatchAcceptedPlansRequest) []interface{}
	GetSingle(source *WatchAcceptedPlansRequest) (interface{}, bool)
	ClearValue(item *WatchAcceptedPlansRequest)

	// Those methods build corresponding WatchAcceptedPlansRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAcceptedPlansRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAcceptedPlansRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAcceptedPlansRequest_FieldPathArrayItemValue
}

type WatchAcceptedPlansRequest_FieldPathSelector int32

const (
	WatchAcceptedPlansRequest_FieldPathSelectorType         WatchAcceptedPlansRequest_FieldPathSelector = 0
	WatchAcceptedPlansRequest_FieldPathSelectorParent       WatchAcceptedPlansRequest_FieldPathSelector = 1
	WatchAcceptedPlansRequest_FieldPathSelectorPageSize     WatchAcceptedPlansRequest_FieldPathSelector = 2
	WatchAcceptedPlansRequest_FieldPathSelectorPageToken    WatchAcceptedPlansRequest_FieldPathSelector = 3
	WatchAcceptedPlansRequest_FieldPathSelectorOrderBy      WatchAcceptedPlansRequest_FieldPathSelector = 4
	WatchAcceptedPlansRequest_FieldPathSelectorResumeToken  WatchAcceptedPlansRequest_FieldPathSelector = 5
	WatchAcceptedPlansRequest_FieldPathSelectorFilter       WatchAcceptedPlansRequest_FieldPathSelector = 6
	WatchAcceptedPlansRequest_FieldPathSelectorFieldMask    WatchAcceptedPlansRequest_FieldPathSelector = 7
	WatchAcceptedPlansRequest_FieldPathSelectorView         WatchAcceptedPlansRequest_FieldPathSelector = 8
	WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize WatchAcceptedPlansRequest_FieldPathSelector = 9
)

func (s WatchAcceptedPlansRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAcceptedPlansRequest_FieldPathSelectorType:
		return "type"
	case WatchAcceptedPlansRequest_FieldPathSelectorParent:
		return "parent"
	case WatchAcceptedPlansRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchAcceptedPlansRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchAcceptedPlansRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchAcceptedPlansRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAcceptedPlansRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAcceptedPlansRequest_FieldPathSelectorView:
		return "view"
	case WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansRequest: %d", s))
	}
}

func BuildWatchAcceptedPlansRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAcceptedPlansRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAcceptedPlansRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAcceptedPlansRequest", fp)
}

func ParseWatchAcceptedPlansRequest_FieldPath(rawField string) (WatchAcceptedPlansRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAcceptedPlansRequest_FieldPath(fp)
}

func MustParseWatchAcceptedPlansRequest_FieldPath(rawField string) WatchAcceptedPlansRequest_FieldPath {
	fp, err := ParseWatchAcceptedPlansRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAcceptedPlansRequest_FieldTerminalPath struct {
	selector WatchAcceptedPlansRequest_FieldPathSelector
}

var _ WatchAcceptedPlansRequest_FieldPath = (*WatchAcceptedPlansRequest_FieldTerminalPath)(nil)

func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) Selector() WatchAcceptedPlansRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAcceptedPlansRequest
func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) Get(source *WatchAcceptedPlansRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAcceptedPlansRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchAcceptedPlansRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchAcceptedPlansRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchAcceptedPlansRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchAcceptedPlansRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchAcceptedPlansRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAcceptedPlansRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchAcceptedPlansRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAcceptedPlansRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAcceptedPlansRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAcceptedPlansRequest
func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) GetSingle(source *WatchAcceptedPlansRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAcceptedPlansRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchAcceptedPlansRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchAcceptedPlansRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchAcceptedPlansRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchAcceptedPlansRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchAcceptedPlansRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAcceptedPlansRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchAcceptedPlansRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAcceptedPlansRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansRequest: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAcceptedPlansRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAcceptedPlansRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchAcceptedPlansRequest_FieldPathSelectorParent:
		return (*accepted_plan.ParentReference)(nil)
	case WatchAcceptedPlansRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchAcceptedPlansRequest_FieldPathSelectorPageToken:
		return (*accepted_plan.PagerCursor)(nil)
	case WatchAcceptedPlansRequest_FieldPathSelectorOrderBy:
		return (*accepted_plan.OrderBy)(nil)
	case WatchAcceptedPlansRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchAcceptedPlansRequest_FieldPathSelectorFilter:
		return (*accepted_plan.Filter)(nil)
	case WatchAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return (*accepted_plan.AcceptedPlan_FieldMask)(nil)
	case WatchAcceptedPlansRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansRequest: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) ClearValue(item *WatchAcceptedPlansRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAcceptedPlansRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchAcceptedPlansRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchAcceptedPlansRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchAcceptedPlansRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchAcceptedPlansRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchAcceptedPlansRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAcceptedPlansRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchAcceptedPlansRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAcceptedPlansRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAcceptedPlansRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAcceptedPlansRequest_FieldPathSelectorType ||
		fp.selector == WatchAcceptedPlansRequest_FieldPathSelectorParent ||
		fp.selector == WatchAcceptedPlansRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchAcceptedPlansRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchAcceptedPlansRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchAcceptedPlansRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchAcceptedPlansRequest_FieldPathSelectorFilter ||
		fp.selector == WatchAcceptedPlansRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAcceptedPlansRequest_FieldPathSelectorView ||
		fp.selector == WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAcceptedPlansRequest_FieldPathValue {
	switch fp.selector {
	case WatchAcceptedPlansRequest_FieldPathSelectorType:
		return &WatchAcceptedPlansRequest_FieldTerminalPathValue{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchAcceptedPlansRequest_FieldPathSelectorParent:
		return &WatchAcceptedPlansRequest_FieldTerminalPathValue{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.ParentReference)}
	case WatchAcceptedPlansRequest_FieldPathSelectorPageSize:
		return &WatchAcceptedPlansRequest_FieldTerminalPathValue{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchAcceptedPlansRequest_FieldPathSelectorPageToken:
		return &WatchAcceptedPlansRequest_FieldTerminalPathValue{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.PagerCursor)}
	case WatchAcceptedPlansRequest_FieldPathSelectorOrderBy:
		return &WatchAcceptedPlansRequest_FieldTerminalPathValue{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.OrderBy)}
	case WatchAcceptedPlansRequest_FieldPathSelectorResumeToken:
		return &WatchAcceptedPlansRequest_FieldTerminalPathValue{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAcceptedPlansRequest_FieldPathSelectorFilter:
		return &WatchAcceptedPlansRequest_FieldTerminalPathValue{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.Filter)}
	case WatchAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return &WatchAcceptedPlansRequest_FieldTerminalPathValue{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlan_FieldMask)}
	case WatchAcceptedPlansRequest_FieldPathSelectorView:
		return &WatchAcceptedPlansRequest_FieldTerminalPathValue{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAcceptedPlansRequest_FieldTerminalPathValue{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansRequest: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAcceptedPlansRequest_FieldPathArrayOfValues {
	fpaov := &WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlansRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAcceptedPlansRequest_FieldPathSelectorType:
		return &WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchAcceptedPlansRequest_FieldPathSelectorParent:
		return &WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.ParentReference)}
	case WatchAcceptedPlansRequest_FieldPathSelectorPageSize:
		return &WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchAcceptedPlansRequest_FieldPathSelectorPageToken:
		return &WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.PagerCursor)}
	case WatchAcceptedPlansRequest_FieldPathSelectorOrderBy:
		return &WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.OrderBy)}
	case WatchAcceptedPlansRequest_FieldPathSelectorResumeToken:
		return &WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAcceptedPlansRequest_FieldPathSelectorFilter:
		return &WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.Filter)}
	case WatchAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return &WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.AcceptedPlan_FieldMask)}
	case WatchAcceptedPlansRequest_FieldPathSelectorView:
		return &WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues{WatchAcceptedPlansRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAcceptedPlansRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansRequest: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlansRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAcceptedPlansRequest_FieldPathValue allows storing values for WatchAcceptedPlansRequest fields according to their type
type WatchAcceptedPlansRequest_FieldPathValue interface {
	WatchAcceptedPlansRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAcceptedPlansRequest)
	CompareWith(*WatchAcceptedPlansRequest) (cmp int, comparable bool)
}

func ParseWatchAcceptedPlansRequest_FieldPathValue(pathStr, valueStr string) (WatchAcceptedPlansRequest_FieldPathValue, error) {
	fp, err := ParseWatchAcceptedPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAcceptedPlansRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAcceptedPlansRequest_FieldPathValue), nil
}

func MustParseWatchAcceptedPlansRequest_FieldPathValue(pathStr, valueStr string) WatchAcceptedPlansRequest_FieldPathValue {
	fpv, err := ParseWatchAcceptedPlansRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAcceptedPlansRequest_FieldTerminalPathValue struct {
	WatchAcceptedPlansRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAcceptedPlansRequest_FieldPathValue = (*WatchAcceptedPlansRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAcceptedPlansRequest' as interface{}
func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) AsParentValue() (*accepted_plan.ParentReference, bool) {
	res, ok := fpv.value.(*accepted_plan.ParentReference)
	return res, ok
}
func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) AsPageTokenValue() (*accepted_plan.PagerCursor, bool) {
	res, ok := fpv.value.(*accepted_plan.PagerCursor)
	return res, ok
}
func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) AsOrderByValue() (*accepted_plan.OrderBy, bool) {
	res, ok := fpv.value.(*accepted_plan.OrderBy)
	return res, ok
}
func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) AsFilterValue() (*accepted_plan.Filter, bool) {
	res, ok := fpv.value.(*accepted_plan.Filter)
	return res, ok
}
func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) AsFieldMaskValue() (*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}
func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchAcceptedPlansRequest
func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) SetTo(target **WatchAcceptedPlansRequest) {
	if *target == nil {
		*target = new(WatchAcceptedPlansRequest)
	}
	switch fpv.selector {
	case WatchAcceptedPlansRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchAcceptedPlansRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*accepted_plan.ParentReference)
	case WatchAcceptedPlansRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchAcceptedPlansRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*accepted_plan.PagerCursor)
	case WatchAcceptedPlansRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*accepted_plan.OrderBy)
	case WatchAcceptedPlansRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAcceptedPlansRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*accepted_plan.Filter)
	case WatchAcceptedPlansRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	case WatchAcceptedPlansRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAcceptedPlansRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAcceptedPlansRequest_FieldTerminalPathValue' with the value under path in 'WatchAcceptedPlansRequest'.
func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) CompareWith(source *WatchAcceptedPlansRequest) (int, bool) {
	switch fpv.selector {
	case WatchAcceptedPlansRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*accepted_plan.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchAcceptedPlansRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchAcceptedPlansRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchAcceptedPlansRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAcceptedPlansRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAcceptedPlansRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAcceptedPlansRequest))
}

// WatchAcceptedPlansRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAcceptedPlansRequest according to their type
// Present only for array (repeated) types.
type WatchAcceptedPlansRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAcceptedPlansRequest_FieldPath
	ContainsValue(*WatchAcceptedPlansRequest) bool
}

// ParseWatchAcceptedPlansRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAcceptedPlansRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAcceptedPlansRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAcceptedPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAcceptedPlansRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAcceptedPlansRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAcceptedPlansRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAcceptedPlansRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAcceptedPlansRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAcceptedPlansRequest_FieldTerminalPathArrayItemValue struct {
	WatchAcceptedPlansRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAcceptedPlansRequest_FieldPathArrayItemValue = (*WatchAcceptedPlansRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAcceptedPlansRequest as interface{}
func (fpaiv *WatchAcceptedPlansRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAcceptedPlansRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAcceptedPlansRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAcceptedPlansRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAcceptedPlansRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAcceptedPlansRequest'
func (fpaiv *WatchAcceptedPlansRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAcceptedPlansRequest) bool {
	slice := fpaiv.WatchAcceptedPlansRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAcceptedPlansRequest_FieldPathArrayOfValues allows storing slice of values for WatchAcceptedPlansRequest fields according to their type
type WatchAcceptedPlansRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAcceptedPlansRequest_FieldPath
}

func ParseWatchAcceptedPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAcceptedPlansRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAcceptedPlansRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAcceptedPlansRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAcceptedPlansRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAcceptedPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAcceptedPlansRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAcceptedPlansRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues struct {
	WatchAcceptedPlansRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAcceptedPlansRequest_FieldPathArrayOfValues = (*WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAcceptedPlansRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*accepted_plan.ParentReference) {
			values = append(values, v)
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*accepted_plan.PagerCursor) {
			values = append(values, v)
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*accepted_plan.OrderBy) {
			values = append(values, v)
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*accepted_plan.Filter) {
			values = append(values, v)
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask) {
			values = append(values, v)
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*accepted_plan.ParentReference, bool) {
	res, ok := fpaov.values.([]*accepted_plan.ParentReference)
	return res, ok
}
func (fpaov *WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*accepted_plan.PagerCursor, bool) {
	res, ok := fpaov.values.([]*accepted_plan.PagerCursor)
	return res, ok
}
func (fpaov *WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*accepted_plan.OrderBy, bool) {
	res, ok := fpaov.values.([]*accepted_plan.OrderBy)
	return res, ok
}
func (fpaov *WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*accepted_plan.Filter, bool) {
	res, ok := fpaov.values.([]*accepted_plan.Filter)
	return res, ok
}
func (fpaov *WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}
func (fpaov *WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchAcceptedPlansRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAcceptedPlansResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAcceptedPlansResponse_FieldPathSelector
	Get(source *WatchAcceptedPlansResponse) []interface{}
	GetSingle(source *WatchAcceptedPlansResponse) (interface{}, bool)
	ClearValue(item *WatchAcceptedPlansResponse)

	// Those methods build corresponding WatchAcceptedPlansResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAcceptedPlansResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAcceptedPlansResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAcceptedPlansResponse_FieldPathArrayItemValue
}

type WatchAcceptedPlansResponse_FieldPathSelector int32

const (
	WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges WatchAcceptedPlansResponse_FieldPathSelector = 0
	WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent           WatchAcceptedPlansResponse_FieldPathSelector = 1
	WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange     WatchAcceptedPlansResponse_FieldPathSelector = 2
	WatchAcceptedPlansResponse_FieldPathSelectorResumeToken         WatchAcceptedPlansResponse_FieldPathSelector = 3
	WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize        WatchAcceptedPlansResponse_FieldPathSelector = 4
	WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset         WatchAcceptedPlansResponse_FieldPathSelector = 5
	WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset         WatchAcceptedPlansResponse_FieldPathSelector = 6
)

func (s WatchAcceptedPlansResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges:
		return "accepted_plan_changes"
	case WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchAcceptedPlansResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", s))
	}
}

func BuildWatchAcceptedPlansResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAcceptedPlansResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAcceptedPlansResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "accepted_plan_changes", "acceptedPlanChanges", "accepted-plan-changes":
			return &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchAcceptedPlansResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchAcceptedPlansResponse_FieldSubPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAcceptedPlansResponse", fp)
}

func ParseWatchAcceptedPlansResponse_FieldPath(rawField string) (WatchAcceptedPlansResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAcceptedPlansResponse_FieldPath(fp)
}

func MustParseWatchAcceptedPlansResponse_FieldPath(rawField string) WatchAcceptedPlansResponse_FieldPath {
	fp, err := ParseWatchAcceptedPlansResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAcceptedPlansResponse_FieldTerminalPath struct {
	selector WatchAcceptedPlansResponse_FieldPathSelector
}

var _ WatchAcceptedPlansResponse_FieldPath = (*WatchAcceptedPlansResponse_FieldTerminalPath)(nil)

func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) Selector() WatchAcceptedPlansResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAcceptedPlansResponse
func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) Get(source *WatchAcceptedPlansResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges:
			for _, value := range source.GetAcceptedPlanChanges() {
				values = append(values, value)
			}
		case WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchAcceptedPlansResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAcceptedPlansResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAcceptedPlansResponse
func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) GetSingle(source *WatchAcceptedPlansResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges:
		res := source.GetAcceptedPlanChanges()
		return res, res != nil
	case WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchAcceptedPlansResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAcceptedPlansResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges:
		return ([]*accepted_plan.AcceptedPlanChange)(nil)
	case WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
		return (*WatchAcceptedPlansResponse_PageTokenChange)(nil)
	case WatchAcceptedPlansResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) ClearValue(item *WatchAcceptedPlansResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges:
			item.AcceptedPlanChanges = nil
		case WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchAcceptedPlansResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAcceptedPlansResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges ||
		fp.selector == WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchAcceptedPlansResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAcceptedPlansResponse_FieldPathValue {
	switch fp.selector {
	case WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges:
		return &WatchAcceptedPlansResponse_FieldTerminalPathValue{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.([]*accepted_plan.AcceptedPlanChange)}
	case WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent:
		return &WatchAcceptedPlansResponse_FieldTerminalPathValue{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
		return &WatchAcceptedPlansResponse_FieldTerminalPathValue{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.(*WatchAcceptedPlansResponse_PageTokenChange)}
	case WatchAcceptedPlansResponse_FieldPathSelectorResumeToken:
		return &WatchAcceptedPlansResponse_FieldTerminalPathValue{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize:
		return &WatchAcceptedPlansResponse_FieldTerminalPathValue{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset:
		return &WatchAcceptedPlansResponse_FieldTerminalPathValue{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset:
		return &WatchAcceptedPlansResponse_FieldTerminalPathValue{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAcceptedPlansResponse_FieldPathArrayOfValues {
	fpaov := &WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues{WatchAcceptedPlansResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges:
		return &WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, values: values.([][]*accepted_plan.AcceptedPlanChange)}
	case WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent:
		return &WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
		return &WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, values: values.([]*WatchAcceptedPlansResponse_PageTokenChange)}
	case WatchAcceptedPlansResponse_FieldPathSelectorResumeToken:
		return &WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize:
		return &WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset:
		return &WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset:
		return &WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAcceptedPlansResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges:
		return &WatchAcceptedPlansResponse_FieldTerminalPathArrayItemValue{WatchAcceptedPlansResponse_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlanChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlansResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchAcceptedPlansResponse_FieldSubPath struct {
	selector WatchAcceptedPlansResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchAcceptedPlansResponse_FieldPath = (*WatchAcceptedPlansResponse_FieldSubPath)(nil)

func (fps *WatchAcceptedPlansResponse_FieldSubPath) Selector() WatchAcceptedPlansResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchAcceptedPlansResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchAcceptedPlansResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchAcceptedPlansResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchAcceptedPlansResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchAcceptedPlansResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchAcceptedPlansResponse
func (fps *WatchAcceptedPlansResponse_FieldSubPath) Get(source *WatchAcceptedPlansResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchAcceptedPlansResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchAcceptedPlansResponse))
}

// GetSingle returns value of selected field from source WatchAcceptedPlansResponse
func (fps *WatchAcceptedPlansResponse_FieldSubPath) GetSingle(source *WatchAcceptedPlansResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fps.selector))
	}
}

func (fps *WatchAcceptedPlansResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchAcceptedPlansResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchAcceptedPlansResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchAcceptedPlansResponse_FieldSubPath) ClearValue(item *WatchAcceptedPlansResponse) {
	if item != nil {
		switch fps.selector {
		case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchAcceptedPlansResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchAcceptedPlansResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchAcceptedPlansResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchAcceptedPlansResponse_FieldSubPath) WithIValue(value interface{}) WatchAcceptedPlansResponse_FieldPathValue {
	return &WatchAcceptedPlansResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchAcceptedPlansResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchAcceptedPlansResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchAcceptedPlansResponse_FieldPathArrayOfValues {
	return &WatchAcceptedPlansResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchAcceptedPlansResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchAcceptedPlansResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchAcceptedPlansResponse_FieldPathArrayItemValue {
	return &WatchAcceptedPlansResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchAcceptedPlansResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchAcceptedPlansResponse_FieldPathValue allows storing values for WatchAcceptedPlansResponse fields according to their type
type WatchAcceptedPlansResponse_FieldPathValue interface {
	WatchAcceptedPlansResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAcceptedPlansResponse)
	CompareWith(*WatchAcceptedPlansResponse) (cmp int, comparable bool)
}

func ParseWatchAcceptedPlansResponse_FieldPathValue(pathStr, valueStr string) (WatchAcceptedPlansResponse_FieldPathValue, error) {
	fp, err := ParseWatchAcceptedPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAcceptedPlansResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAcceptedPlansResponse_FieldPathValue), nil
}

func MustParseWatchAcceptedPlansResponse_FieldPathValue(pathStr, valueStr string) WatchAcceptedPlansResponse_FieldPathValue {
	fpv, err := ParseWatchAcceptedPlansResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAcceptedPlansResponse_FieldTerminalPathValue struct {
	WatchAcceptedPlansResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAcceptedPlansResponse_FieldPathValue = (*WatchAcceptedPlansResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAcceptedPlansResponse' as interface{}
func (fpv *WatchAcceptedPlansResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAcceptedPlansResponse_FieldTerminalPathValue) AsAcceptedPlanChangesValue() ([]*accepted_plan.AcceptedPlanChange, bool) {
	res, ok := fpv.value.([]*accepted_plan.AcceptedPlanChange)
	return res, ok
}
func (fpv *WatchAcceptedPlansResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAcceptedPlansResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchAcceptedPlansResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchAcceptedPlansResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchAcceptedPlansResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAcceptedPlansResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchAcceptedPlansResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAcceptedPlansResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchAcceptedPlansResponse
func (fpv *WatchAcceptedPlansResponse_FieldTerminalPathValue) SetTo(target **WatchAcceptedPlansResponse) {
	if *target == nil {
		*target = new(WatchAcceptedPlansResponse)
	}
	switch fpv.selector {
	case WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges:
		(*target).AcceptedPlanChanges = fpv.value.([]*accepted_plan.AcceptedPlanChange)
	case WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchAcceptedPlansResponse_PageTokenChange)
	case WatchAcceptedPlansResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAcceptedPlansResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAcceptedPlansResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAcceptedPlansResponse_FieldTerminalPathValue' with the value under path in 'WatchAcceptedPlansResponse'.
func (fpv *WatchAcceptedPlansResponse_FieldTerminalPathValue) CompareWith(source *WatchAcceptedPlansResponse) (int, bool) {
	switch fpv.selector {
	case WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges:
		return 0, false
	case WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchAcceptedPlansResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAcceptedPlansResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAcceptedPlansResponse))
}

type WatchAcceptedPlansResponse_FieldSubPathValue struct {
	WatchAcceptedPlansResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchAcceptedPlansResponse_FieldPathValue = (*WatchAcceptedPlansResponse_FieldSubPathValue)(nil)

func (fpvs *WatchAcceptedPlansResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchAcceptedPlansResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchAcceptedPlansResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchAcceptedPlansResponse_FieldSubPathValue) SetTo(target **WatchAcceptedPlansResponse) {
	if *target == nil {
		*target = new(WatchAcceptedPlansResponse)
	}
	switch fpvs.Selector() {
	case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchAcceptedPlansResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAcceptedPlansResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAcceptedPlansResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchAcceptedPlansResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchAcceptedPlansResponse_FieldSubPathValue) CompareWith(source *WatchAcceptedPlansResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchAcceptedPlansResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAcceptedPlansResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchAcceptedPlansResponse))
}

// WatchAcceptedPlansResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAcceptedPlansResponse according to their type
// Present only for array (repeated) types.
type WatchAcceptedPlansResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAcceptedPlansResponse_FieldPath
	ContainsValue(*WatchAcceptedPlansResponse) bool
}

// ParseWatchAcceptedPlansResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAcceptedPlansResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAcceptedPlansResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAcceptedPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAcceptedPlansResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAcceptedPlansResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAcceptedPlansResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAcceptedPlansResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAcceptedPlansResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAcceptedPlansResponse_FieldTerminalPathArrayItemValue struct {
	WatchAcceptedPlansResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAcceptedPlansResponse_FieldPathArrayItemValue = (*WatchAcceptedPlansResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAcceptedPlansResponse as interface{}
func (fpaiv *WatchAcceptedPlansResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchAcceptedPlansResponse_FieldTerminalPathArrayItemValue) AsAcceptedPlanChangesItemValue() (*accepted_plan.AcceptedPlanChange, bool) {
	res, ok := fpaiv.value.(*accepted_plan.AcceptedPlanChange)
	return res, ok
}

func (fpaiv *WatchAcceptedPlansResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAcceptedPlansResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAcceptedPlansResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAcceptedPlansResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAcceptedPlansResponse'
func (fpaiv *WatchAcceptedPlansResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAcceptedPlansResponse) bool {
	slice := fpaiv.WatchAcceptedPlansResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchAcceptedPlansResponse_FieldSubPathArrayItemValue struct {
	WatchAcceptedPlansResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchAcceptedPlansResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchAcceptedPlansResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAcceptedPlansResponse'
func (fpaivs *WatchAcceptedPlansResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchAcceptedPlansResponse) bool {
	switch fpaivs.Selector() {
	case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse: %d", fpaivs.Selector()))
	}
}

// WatchAcceptedPlansResponse_FieldPathArrayOfValues allows storing slice of values for WatchAcceptedPlansResponse fields according to their type
type WatchAcceptedPlansResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAcceptedPlansResponse_FieldPath
}

func ParseWatchAcceptedPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAcceptedPlansResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAcceptedPlansResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAcceptedPlansResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAcceptedPlansResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAcceptedPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAcceptedPlansResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAcceptedPlansResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues struct {
	WatchAcceptedPlansResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAcceptedPlansResponse_FieldPathArrayOfValues = (*WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges:
		for _, v := range fpaov.values.([][]*accepted_plan.AcceptedPlanChange) {
			values = append(values, v)
		}
	case WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchAcceptedPlansResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchAcceptedPlansResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues) AsAcceptedPlanChangesArrayOfValues() ([][]*accepted_plan.AcceptedPlanChange, bool) {
	res, ok := fpaov.values.([][]*accepted_plan.AcceptedPlanChange)
	return res, ok
}
func (fpaov *WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchAcceptedPlansResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchAcceptedPlansResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAcceptedPlansResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchAcceptedPlansResponse_FieldSubPathArrayOfValues struct {
	WatchAcceptedPlansResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchAcceptedPlansResponse_FieldPathArrayOfValues = (*WatchAcceptedPlansResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchAcceptedPlansResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchAcceptedPlansResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAcceptedPlansResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAcceptedPlansResponsePageTokenChange_FieldPathSelector
	Get(source *WatchAcceptedPlansResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchAcceptedPlansResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchAcceptedPlansResponse_PageTokenChange)

	// Those methods build corresponding WatchAcceptedPlansResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAcceptedPlansResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchAcceptedPlansResponsePageTokenChange_FieldPathSelector int32

const (
	WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchAcceptedPlansResponsePageTokenChange_FieldPathSelector = 0
	WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken WatchAcceptedPlansResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchAcceptedPlansResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchAcceptedPlansResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchAcceptedPlansResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAcceptedPlansResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath{selector: WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath{selector: WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAcceptedPlansResponse_PageTokenChange", fp)
}

func ParseWatchAcceptedPlansResponsePageTokenChange_FieldPath(rawField string) (WatchAcceptedPlansResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAcceptedPlansResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchAcceptedPlansResponsePageTokenChange_FieldPath(rawField string) WatchAcceptedPlansResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchAcceptedPlansResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchAcceptedPlansResponsePageTokenChange_FieldPathSelector
}

var _ WatchAcceptedPlansResponsePageTokenChange_FieldPath = (*WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) Selector() WatchAcceptedPlansResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAcceptedPlansResponse_PageTokenChange
func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) Get(source *WatchAcceptedPlansResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAcceptedPlansResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchAcceptedPlansResponse_PageTokenChange
func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchAcceptedPlansResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAcceptedPlansResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*accepted_plan.PagerCursor)(nil)
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*accepted_plan.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchAcceptedPlansResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAcceptedPlansResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchAcceptedPlansResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathValue{WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*accepted_plan.PagerCursor)}
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathValue{WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*accepted_plan.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*accepted_plan.PagerCursor)}
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*accepted_plan.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAcceptedPlansResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchAcceptedPlansResponsePageTokenChange_FieldPathValue interface {
	WatchAcceptedPlansResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAcceptedPlansResponse_PageTokenChange)
	CompareWith(*WatchAcceptedPlansResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchAcceptedPlansResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchAcceptedPlansResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchAcceptedPlansResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAcceptedPlansResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchAcceptedPlansResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchAcceptedPlansResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchAcceptedPlansResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAcceptedPlansResponsePageTokenChange_FieldPathValue = (*WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*accepted_plan.PagerCursor, bool) {
	res, ok := fpv.value.(*accepted_plan.PagerCursor)
	return res, ok
}
func (fpv *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*accepted_plan.PagerCursor, bool) {
	res, ok := fpv.value.(*accepted_plan.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchAcceptedPlansResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchAcceptedPlansResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*accepted_plan.PagerCursor)
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*accepted_plan.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAcceptedPlansResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchAcceptedPlansResponse_PageTokenChange'.
func (fpv *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchAcceptedPlansResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAcceptedPlansResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAcceptedPlansResponse_PageTokenChange))
}

// WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAcceptedPlansResponsePageTokenChange_FieldPath
	ContainsValue(*WatchAcceptedPlansResponse_PageTokenChange) bool
}

// ParseWatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAcceptedPlansResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayItemValue = (*WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAcceptedPlansResponse_PageTokenChange as interface{}
func (fpaiv *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAcceptedPlansResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAcceptedPlansResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAcceptedPlansResponse_PageTokenChange) bool {
	slice := fpaiv.WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAcceptedPlansResponsePageTokenChange_FieldPath
}

func ParseWatchAcceptedPlansResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAcceptedPlansResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchAcceptedPlansResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAcceptedPlansResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchAcceptedPlansResponsePageTokenChange_FieldPathArrayOfValues = (*WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*accepted_plan.PagerCursor) {
			values = append(values, v)
		}
	case WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*accepted_plan.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*accepted_plan.PagerCursor, bool) {
	res, ok := fpaov.values.([]*accepted_plan.PagerCursor)
	return res, ok
}
func (fpaov *WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*accepted_plan.PagerCursor, bool) {
	res, ok := fpaov.values.([]*accepted_plan.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateAcceptedPlanRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateAcceptedPlanRequest_FieldPathSelector
	Get(source *CreateAcceptedPlanRequest) []interface{}
	GetSingle(source *CreateAcceptedPlanRequest) (interface{}, bool)
	ClearValue(item *CreateAcceptedPlanRequest)

	// Those methods build corresponding CreateAcceptedPlanRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateAcceptedPlanRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateAcceptedPlanRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateAcceptedPlanRequest_FieldPathArrayItemValue
}

type CreateAcceptedPlanRequest_FieldPathSelector int32

const (
	CreateAcceptedPlanRequest_FieldPathSelectorParent       CreateAcceptedPlanRequest_FieldPathSelector = 0
	CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan CreateAcceptedPlanRequest_FieldPathSelector = 1
)

func (s CreateAcceptedPlanRequest_FieldPathSelector) String() string {
	switch s {
	case CreateAcceptedPlanRequest_FieldPathSelectorParent:
		return "parent"
	case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return "accepted_plan"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", s))
	}
}

func BuildCreateAcceptedPlanRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateAcceptedPlanRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateAcceptedPlanRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateAcceptedPlanRequest_FieldTerminalPath{selector: CreateAcceptedPlanRequest_FieldPathSelectorParent}, nil
		case "accepted_plan", "acceptedPlan", "accepted-plan":
			return &CreateAcceptedPlanRequest_FieldTerminalPath{selector: CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan}, nil
		}
	} else {
		switch fp[0] {
		case "accepted_plan", "acceptedPlan", "accepted-plan":
			if subpath, err := accepted_plan.BuildAcceptedPlan_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateAcceptedPlanRequest_FieldSubPath{selector: CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateAcceptedPlanRequest", fp)
}

func ParseCreateAcceptedPlanRequest_FieldPath(rawField string) (CreateAcceptedPlanRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateAcceptedPlanRequest_FieldPath(fp)
}

func MustParseCreateAcceptedPlanRequest_FieldPath(rawField string) CreateAcceptedPlanRequest_FieldPath {
	fp, err := ParseCreateAcceptedPlanRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateAcceptedPlanRequest_FieldTerminalPath struct {
	selector CreateAcceptedPlanRequest_FieldPathSelector
}

var _ CreateAcceptedPlanRequest_FieldPath = (*CreateAcceptedPlanRequest_FieldTerminalPath)(nil)

func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) Selector() CreateAcceptedPlanRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateAcceptedPlanRequest
func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) Get(source *CreateAcceptedPlanRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateAcceptedPlanRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
			if source.AcceptedPlan != nil {
				values = append(values, source.AcceptedPlan)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateAcceptedPlanRequest))
}

// GetSingle returns value pointed by specific field of from source CreateAcceptedPlanRequest
func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) GetSingle(source *CreateAcceptedPlanRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateAcceptedPlanRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		res := source.GetAcceptedPlan()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateAcceptedPlanRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateAcceptedPlanRequest_FieldPathSelectorParent:
		return (*accepted_plan.ParentReference)(nil)
	case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return (*accepted_plan.AcceptedPlan)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) ClearValue(item *CreateAcceptedPlanRequest) {
	if item != nil {
		switch fp.selector {
		case CreateAcceptedPlanRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
			item.AcceptedPlan = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateAcceptedPlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateAcceptedPlanRequest_FieldPathSelectorParent
}

func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) WithIValue(value interface{}) CreateAcceptedPlanRequest_FieldPathValue {
	switch fp.selector {
	case CreateAcceptedPlanRequest_FieldPathSelectorParent:
		return &CreateAcceptedPlanRequest_FieldTerminalPathValue{CreateAcceptedPlanRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.ParentReference)}
	case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return &CreateAcceptedPlanRequest_FieldTerminalPathValue{CreateAcceptedPlanRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlan)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateAcceptedPlanRequest_FieldPathArrayOfValues {
	fpaov := &CreateAcceptedPlanRequest_FieldTerminalPathArrayOfValues{CreateAcceptedPlanRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateAcceptedPlanRequest_FieldPathSelectorParent:
		return &CreateAcceptedPlanRequest_FieldTerminalPathArrayOfValues{CreateAcceptedPlanRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.ParentReference)}
	case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return &CreateAcceptedPlanRequest_FieldTerminalPathArrayOfValues{CreateAcceptedPlanRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.AcceptedPlan)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateAcceptedPlanRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *CreateAcceptedPlanRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateAcceptedPlanRequest_FieldSubPath struct {
	selector CreateAcceptedPlanRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateAcceptedPlanRequest_FieldPath = (*CreateAcceptedPlanRequest_FieldSubPath)(nil)

func (fps *CreateAcceptedPlanRequest_FieldSubPath) Selector() CreateAcceptedPlanRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateAcceptedPlanRequest_FieldSubPath) AsAcceptedPlanSubPath() (accepted_plan.AcceptedPlan_FieldPath, bool) {
	res, ok := fps.subPath.(accepted_plan.AcceptedPlan_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateAcceptedPlanRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateAcceptedPlanRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateAcceptedPlanRequest
func (fps *CreateAcceptedPlanRequest_FieldSubPath) Get(source *CreateAcceptedPlanRequest) (values []interface{}) {
	if asAcceptedPlanFieldPath, ok := fps.AsAcceptedPlanSubPath(); ok {
		values = append(values, asAcceptedPlanFieldPath.Get(source.GetAcceptedPlan())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateAcceptedPlanRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateAcceptedPlanRequest))
}

// GetSingle returns value of selected field from source CreateAcceptedPlanRequest
func (fps *CreateAcceptedPlanRequest_FieldSubPath) GetSingle(source *CreateAcceptedPlanRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		if source.GetAcceptedPlan() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAcceptedPlan())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fps.selector))
	}
}

func (fps *CreateAcceptedPlanRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateAcceptedPlanRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateAcceptedPlanRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateAcceptedPlanRequest_FieldSubPath) ClearValue(item *CreateAcceptedPlanRequest) {
	if item != nil {
		switch fps.selector {
		case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
			fps.subPath.ClearValueRaw(item.AcceptedPlan)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateAcceptedPlanRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateAcceptedPlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateAcceptedPlanRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateAcceptedPlanRequest_FieldSubPath) WithIValue(value interface{}) CreateAcceptedPlanRequest_FieldPathValue {
	return &CreateAcceptedPlanRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateAcceptedPlanRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateAcceptedPlanRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateAcceptedPlanRequest_FieldPathArrayOfValues {
	return &CreateAcceptedPlanRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateAcceptedPlanRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateAcceptedPlanRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateAcceptedPlanRequest_FieldPathArrayItemValue {
	return &CreateAcceptedPlanRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateAcceptedPlanRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateAcceptedPlanRequest_FieldPathValue allows storing values for CreateAcceptedPlanRequest fields according to their type
type CreateAcceptedPlanRequest_FieldPathValue interface {
	CreateAcceptedPlanRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateAcceptedPlanRequest)
	CompareWith(*CreateAcceptedPlanRequest) (cmp int, comparable bool)
}

func ParseCreateAcceptedPlanRequest_FieldPathValue(pathStr, valueStr string) (CreateAcceptedPlanRequest_FieldPathValue, error) {
	fp, err := ParseCreateAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAcceptedPlanRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateAcceptedPlanRequest_FieldPathValue), nil
}

func MustParseCreateAcceptedPlanRequest_FieldPathValue(pathStr, valueStr string) CreateAcceptedPlanRequest_FieldPathValue {
	fpv, err := ParseCreateAcceptedPlanRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateAcceptedPlanRequest_FieldTerminalPathValue struct {
	CreateAcceptedPlanRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAcceptedPlanRequest_FieldPathValue = (*CreateAcceptedPlanRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateAcceptedPlanRequest' as interface{}
func (fpv *CreateAcceptedPlanRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateAcceptedPlanRequest_FieldTerminalPathValue) AsParentValue() (*accepted_plan.ParentReference, bool) {
	res, ok := fpv.value.(*accepted_plan.ParentReference)
	return res, ok
}
func (fpv *CreateAcceptedPlanRequest_FieldTerminalPathValue) AsAcceptedPlanValue() (*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpv.value.(*accepted_plan.AcceptedPlan)
	return res, ok
}

// SetTo stores value for selected field for object CreateAcceptedPlanRequest
func (fpv *CreateAcceptedPlanRequest_FieldTerminalPathValue) SetTo(target **CreateAcceptedPlanRequest) {
	if *target == nil {
		*target = new(CreateAcceptedPlanRequest)
	}
	switch fpv.selector {
	case CreateAcceptedPlanRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*accepted_plan.ParentReference)
	case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		(*target).AcceptedPlan = fpv.value.(*accepted_plan.AcceptedPlan)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAcceptedPlanRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAcceptedPlanRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateAcceptedPlanRequest_FieldTerminalPathValue' with the value under path in 'CreateAcceptedPlanRequest'.
func (fpv *CreateAcceptedPlanRequest_FieldTerminalPathValue) CompareWith(source *CreateAcceptedPlanRequest) (int, bool) {
	switch fpv.selector {
	case CreateAcceptedPlanRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*accepted_plan.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAcceptedPlanRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateAcceptedPlanRequest))
}

type CreateAcceptedPlanRequest_FieldSubPathValue struct {
	CreateAcceptedPlanRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateAcceptedPlanRequest_FieldPathValue = (*CreateAcceptedPlanRequest_FieldSubPathValue)(nil)

func (fpvs *CreateAcceptedPlanRequest_FieldSubPathValue) AsAcceptedPlanPathValue() (accepted_plan.AcceptedPlan_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue)
	return res, ok
}

func (fpvs *CreateAcceptedPlanRequest_FieldSubPathValue) SetTo(target **CreateAcceptedPlanRequest) {
	if *target == nil {
		*target = new(CreateAcceptedPlanRequest)
	}
	switch fpvs.Selector() {
	case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue).SetTo(&(*target).AcceptedPlan)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAcceptedPlanRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAcceptedPlanRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateAcceptedPlanRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateAcceptedPlanRequest_FieldSubPathValue) CompareWith(source *CreateAcceptedPlanRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue).CompareWith(source.GetAcceptedPlan())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAcceptedPlanRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateAcceptedPlanRequest))
}

// CreateAcceptedPlanRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateAcceptedPlanRequest according to their type
// Present only for array (repeated) types.
type CreateAcceptedPlanRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateAcceptedPlanRequest_FieldPath
	ContainsValue(*CreateAcceptedPlanRequest) bool
}

// ParseCreateAcceptedPlanRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateAcceptedPlanRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAcceptedPlanRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateAcceptedPlanRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateAcceptedPlanRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateAcceptedPlanRequest_FieldTerminalPathArrayItemValue struct {
	CreateAcceptedPlanRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAcceptedPlanRequest_FieldPathArrayItemValue = (*CreateAcceptedPlanRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateAcceptedPlanRequest as interface{}
func (fpaiv *CreateAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateAcceptedPlanRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateAcceptedPlanRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAcceptedPlanRequest'
func (fpaiv *CreateAcceptedPlanRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateAcceptedPlanRequest) bool {
	slice := fpaiv.CreateAcceptedPlanRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateAcceptedPlanRequest_FieldSubPathArrayItemValue struct {
	CreateAcceptedPlanRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateAcceptedPlanRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateAcceptedPlanRequest_FieldSubPathArrayItemValue) AsAcceptedPlanPathItemValue() (accepted_plan.AcceptedPlan_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(accepted_plan.AcceptedPlan_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAcceptedPlanRequest'
func (fpaivs *CreateAcceptedPlanRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateAcceptedPlanRequest) bool {
	switch fpaivs.Selector() {
	case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return fpaivs.subPathItemValue.(accepted_plan.AcceptedPlan_FieldPathArrayItemValue).ContainsValue(source.GetAcceptedPlan())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAcceptedPlanRequest: %d", fpaivs.Selector()))
	}
}

// CreateAcceptedPlanRequest_FieldPathArrayOfValues allows storing slice of values for CreateAcceptedPlanRequest fields according to their type
type CreateAcceptedPlanRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateAcceptedPlanRequest_FieldPath
}

func ParseCreateAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateAcceptedPlanRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAcceptedPlanRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateAcceptedPlanRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateAcceptedPlanRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateAcceptedPlanRequest_FieldTerminalPathArrayOfValues struct {
	CreateAcceptedPlanRequest_FieldTerminalPath
	values interface{}
}

var _ CreateAcceptedPlanRequest_FieldPathArrayOfValues = (*CreateAcceptedPlanRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateAcceptedPlanRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateAcceptedPlanRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*accepted_plan.ParentReference) {
			values = append(values, v)
		}
	case CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		for _, v := range fpaov.values.([]*accepted_plan.AcceptedPlan) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateAcceptedPlanRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*accepted_plan.ParentReference, bool) {
	res, ok := fpaov.values.([]*accepted_plan.ParentReference)
	return res, ok
}
func (fpaov *CreateAcceptedPlanRequest_FieldTerminalPathArrayOfValues) AsAcceptedPlanArrayOfValues() ([]*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpaov.values.([]*accepted_plan.AcceptedPlan)
	return res, ok
}

type CreateAcceptedPlanRequest_FieldSubPathArrayOfValues struct {
	CreateAcceptedPlanRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateAcceptedPlanRequest_FieldPathArrayOfValues = (*CreateAcceptedPlanRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateAcceptedPlanRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateAcceptedPlanRequest_FieldSubPathArrayOfValues) AsAcceptedPlanPathArrayOfValues() (accepted_plan.AcceptedPlan_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(accepted_plan.AcceptedPlan_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAcceptedPlanRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAcceptedPlanRequest_FieldPathSelector
	Get(source *UpdateAcceptedPlanRequest) []interface{}
	GetSingle(source *UpdateAcceptedPlanRequest) (interface{}, bool)
	ClearValue(item *UpdateAcceptedPlanRequest)

	// Those methods build corresponding UpdateAcceptedPlanRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAcceptedPlanRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAcceptedPlanRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAcceptedPlanRequest_FieldPathArrayItemValue
}

type UpdateAcceptedPlanRequest_FieldPathSelector int32

const (
	UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan UpdateAcceptedPlanRequest_FieldPathSelector = 0
	UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask   UpdateAcceptedPlanRequest_FieldPathSelector = 1
	UpdateAcceptedPlanRequest_FieldPathSelectorCas          UpdateAcceptedPlanRequest_FieldPathSelector = 2
)

func (s UpdateAcceptedPlanRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return "accepted_plan"
	case UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", s))
	}
}

func BuildUpdateAcceptedPlanRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateAcceptedPlanRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAcceptedPlanRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "accepted_plan", "acceptedPlan", "accepted-plan":
			return &UpdateAcceptedPlanRequest_FieldTerminalPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateAcceptedPlanRequest_FieldTerminalPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateAcceptedPlanRequest_FieldTerminalPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "accepted_plan", "acceptedPlan", "accepted-plan":
			if subpath, err := accepted_plan.BuildAcceptedPlan_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAcceptedPlanRequest_FieldSubPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateAcceptedPlanRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAcceptedPlanRequest_FieldSubPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAcceptedPlanRequest", fp)
}

func ParseUpdateAcceptedPlanRequest_FieldPath(rawField string) (UpdateAcceptedPlanRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAcceptedPlanRequest_FieldPath(fp)
}

func MustParseUpdateAcceptedPlanRequest_FieldPath(rawField string) UpdateAcceptedPlanRequest_FieldPath {
	fp, err := ParseUpdateAcceptedPlanRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAcceptedPlanRequest_FieldTerminalPath struct {
	selector UpdateAcceptedPlanRequest_FieldPathSelector
}

var _ UpdateAcceptedPlanRequest_FieldPath = (*UpdateAcceptedPlanRequest_FieldTerminalPath)(nil)

func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) Selector() UpdateAcceptedPlanRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAcceptedPlanRequest
func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) Get(source *UpdateAcceptedPlanRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
			if source.AcceptedPlan != nil {
				values = append(values, source.AcceptedPlan)
			}
		case UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAcceptedPlanRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateAcceptedPlanRequest
func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) GetSingle(source *UpdateAcceptedPlanRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		res := source.GetAcceptedPlan()
		return res, res != nil
	case UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAcceptedPlanRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return (*accepted_plan.AcceptedPlan)(nil)
	case UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask:
		return (*accepted_plan.AcceptedPlan_FieldMask)(nil)
	case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
		return (*UpdateAcceptedPlanRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) ClearValue(item *UpdateAcceptedPlanRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
			item.AcceptedPlan = nil
		case UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAcceptedPlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateAcceptedPlanRequest_FieldPathValue {
	switch fp.selector {
	case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return &UpdateAcceptedPlanRequest_FieldTerminalPathValue{UpdateAcceptedPlanRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlan)}
	case UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask:
		return &UpdateAcceptedPlanRequest_FieldTerminalPathValue{UpdateAcceptedPlanRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlan_FieldMask)}
	case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
		return &UpdateAcceptedPlanRequest_FieldTerminalPathValue{UpdateAcceptedPlanRequest_FieldTerminalPath: *fp, value: value.(*UpdateAcceptedPlanRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAcceptedPlanRequest_FieldPathArrayOfValues {
	fpaov := &UpdateAcceptedPlanRequest_FieldTerminalPathArrayOfValues{UpdateAcceptedPlanRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return &UpdateAcceptedPlanRequest_FieldTerminalPathArrayOfValues{UpdateAcceptedPlanRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.AcceptedPlan)}
	case UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask:
		return &UpdateAcceptedPlanRequest_FieldTerminalPathArrayOfValues{UpdateAcceptedPlanRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.AcceptedPlan_FieldMask)}
	case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
		return &UpdateAcceptedPlanRequest_FieldTerminalPathArrayOfValues{UpdateAcceptedPlanRequest_FieldTerminalPath: *fp, values: values.([]*UpdateAcceptedPlanRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAcceptedPlanRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *UpdateAcceptedPlanRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAcceptedPlanRequest_FieldSubPath struct {
	selector UpdateAcceptedPlanRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAcceptedPlanRequest_FieldPath = (*UpdateAcceptedPlanRequest_FieldSubPath)(nil)

func (fps *UpdateAcceptedPlanRequest_FieldSubPath) Selector() UpdateAcceptedPlanRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAcceptedPlanRequest_FieldSubPath) AsAcceptedPlanSubPath() (accepted_plan.AcceptedPlan_FieldPath, bool) {
	res, ok := fps.subPath.(accepted_plan.AcceptedPlan_FieldPath)
	return res, ok
}
func (fps *UpdateAcceptedPlanRequest_FieldSubPath) AsCasSubPath() (UpdateAcceptedPlanRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateAcceptedPlanRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAcceptedPlanRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAcceptedPlanRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAcceptedPlanRequest
func (fps *UpdateAcceptedPlanRequest_FieldSubPath) Get(source *UpdateAcceptedPlanRequest) (values []interface{}) {
	if asAcceptedPlanFieldPath, ok := fps.AsAcceptedPlanSubPath(); ok {
		values = append(values, asAcceptedPlanFieldPath.Get(source.GetAcceptedPlan())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateAcceptedPlanRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAcceptedPlanRequest))
}

// GetSingle returns value of selected field from source UpdateAcceptedPlanRequest
func (fps *UpdateAcceptedPlanRequest_FieldSubPath) GetSingle(source *UpdateAcceptedPlanRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		if source.GetAcceptedPlan() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAcceptedPlan())
	case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fps.selector))
	}
}

func (fps *UpdateAcceptedPlanRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAcceptedPlanRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAcceptedPlanRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAcceptedPlanRequest_FieldSubPath) ClearValue(item *UpdateAcceptedPlanRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
			fps.subPath.ClearValueRaw(item.AcceptedPlan)
		case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateAcceptedPlanRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAcceptedPlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAcceptedPlanRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAcceptedPlanRequest_FieldSubPath) WithIValue(value interface{}) UpdateAcceptedPlanRequest_FieldPathValue {
	return &UpdateAcceptedPlanRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAcceptedPlanRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAcceptedPlanRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAcceptedPlanRequest_FieldPathArrayOfValues {
	return &UpdateAcceptedPlanRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAcceptedPlanRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAcceptedPlanRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAcceptedPlanRequest_FieldPathArrayItemValue {
	return &UpdateAcceptedPlanRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAcceptedPlanRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAcceptedPlanRequest_FieldPathValue allows storing values for UpdateAcceptedPlanRequest fields according to their type
type UpdateAcceptedPlanRequest_FieldPathValue interface {
	UpdateAcceptedPlanRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAcceptedPlanRequest)
	CompareWith(*UpdateAcceptedPlanRequest) (cmp int, comparable bool)
}

func ParseUpdateAcceptedPlanRequest_FieldPathValue(pathStr, valueStr string) (UpdateAcceptedPlanRequest_FieldPathValue, error) {
	fp, err := ParseUpdateAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAcceptedPlanRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAcceptedPlanRequest_FieldPathValue), nil
}

func MustParseUpdateAcceptedPlanRequest_FieldPathValue(pathStr, valueStr string) UpdateAcceptedPlanRequest_FieldPathValue {
	fpv, err := ParseUpdateAcceptedPlanRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAcceptedPlanRequest_FieldTerminalPathValue struct {
	UpdateAcceptedPlanRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAcceptedPlanRequest_FieldPathValue = (*UpdateAcceptedPlanRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateAcceptedPlanRequest' as interface{}
func (fpv *UpdateAcceptedPlanRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAcceptedPlanRequest_FieldTerminalPathValue) AsAcceptedPlanValue() (*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpv.value.(*accepted_plan.AcceptedPlan)
	return res, ok
}
func (fpv *UpdateAcceptedPlanRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}
func (fpv *UpdateAcceptedPlanRequest_FieldTerminalPathValue) AsCasValue() (*UpdateAcceptedPlanRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateAcceptedPlanRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateAcceptedPlanRequest
func (fpv *UpdateAcceptedPlanRequest_FieldTerminalPathValue) SetTo(target **UpdateAcceptedPlanRequest) {
	if *target == nil {
		*target = new(UpdateAcceptedPlanRequest)
	}
	switch fpv.selector {
	case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		(*target).AcceptedPlan = fpv.value.(*accepted_plan.AcceptedPlan)
	case UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateAcceptedPlanRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAcceptedPlanRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAcceptedPlanRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAcceptedPlanRequest_FieldTerminalPathValue' with the value under path in 'UpdateAcceptedPlanRequest'.
func (fpv *UpdateAcceptedPlanRequest_FieldTerminalPathValue) CompareWith(source *UpdateAcceptedPlanRequest) (int, bool) {
	switch fpv.selector {
	case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return 0, false
	case UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAcceptedPlanRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAcceptedPlanRequest))
}

type UpdateAcceptedPlanRequest_FieldSubPathValue struct {
	UpdateAcceptedPlanRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAcceptedPlanRequest_FieldPathValue = (*UpdateAcceptedPlanRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateAcceptedPlanRequest_FieldSubPathValue) AsAcceptedPlanPathValue() (accepted_plan.AcceptedPlan_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateAcceptedPlanRequest_FieldSubPathValue) AsCasPathValue() (UpdateAcceptedPlanRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateAcceptedPlanRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAcceptedPlanRequest_FieldSubPathValue) SetTo(target **UpdateAcceptedPlanRequest) {
	if *target == nil {
		*target = new(UpdateAcceptedPlanRequest)
	}
	switch fpvs.Selector() {
	case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue).SetTo(&(*target).AcceptedPlan)
	case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateAcceptedPlanRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAcceptedPlanRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAcceptedPlanRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAcceptedPlanRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAcceptedPlanRequest_FieldSubPathValue) CompareWith(source *UpdateAcceptedPlanRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue).CompareWith(source.GetAcceptedPlan())
	case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateAcceptedPlanRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAcceptedPlanRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAcceptedPlanRequest))
}

// UpdateAcceptedPlanRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateAcceptedPlanRequest according to their type
// Present only for array (repeated) types.
type UpdateAcceptedPlanRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAcceptedPlanRequest_FieldPath
	ContainsValue(*UpdateAcceptedPlanRequest) bool
}

// ParseUpdateAcceptedPlanRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAcceptedPlanRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAcceptedPlanRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAcceptedPlanRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAcceptedPlanRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAcceptedPlanRequest_FieldTerminalPathArrayItemValue struct {
	UpdateAcceptedPlanRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAcceptedPlanRequest_FieldPathArrayItemValue = (*UpdateAcceptedPlanRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAcceptedPlanRequest as interface{}
func (fpaiv *UpdateAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAcceptedPlanRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAcceptedPlanRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAcceptedPlanRequest'
func (fpaiv *UpdateAcceptedPlanRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAcceptedPlanRequest) bool {
	slice := fpaiv.UpdateAcceptedPlanRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAcceptedPlanRequest_FieldSubPathArrayItemValue struct {
	UpdateAcceptedPlanRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAcceptedPlanRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAcceptedPlanRequest_FieldSubPathArrayItemValue) AsAcceptedPlanPathItemValue() (accepted_plan.AcceptedPlan_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(accepted_plan.AcceptedPlan_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateAcceptedPlanRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAcceptedPlanRequest'
func (fpaivs *UpdateAcceptedPlanRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAcceptedPlanRequest) bool {
	switch fpaivs.Selector() {
	case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		return fpaivs.subPathItemValue.(accepted_plan.AcceptedPlan_FieldPathArrayItemValue).ContainsValue(source.GetAcceptedPlan())
	case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest: %d", fpaivs.Selector()))
	}
}

// UpdateAcceptedPlanRequest_FieldPathArrayOfValues allows storing slice of values for UpdateAcceptedPlanRequest fields according to their type
type UpdateAcceptedPlanRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAcceptedPlanRequest_FieldPath
}

func ParseUpdateAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAcceptedPlanRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAcceptedPlanRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAcceptedPlanRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAcceptedPlanRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAcceptedPlanRequest_FieldTerminalPathArrayOfValues struct {
	UpdateAcceptedPlanRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateAcceptedPlanRequest_FieldPathArrayOfValues = (*UpdateAcceptedPlanRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAcceptedPlanRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan:
		for _, v := range fpaov.values.([]*accepted_plan.AcceptedPlan) {
			values = append(values, v)
		}
	case UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask) {
			values = append(values, v)
		}
	case UpdateAcceptedPlanRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateAcceptedPlanRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAcceptedPlanRequest_FieldTerminalPathArrayOfValues) AsAcceptedPlanArrayOfValues() ([]*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpaov.values.([]*accepted_plan.AcceptedPlan)
	return res, ok
}
func (fpaov *UpdateAcceptedPlanRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}
func (fpaov *UpdateAcceptedPlanRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateAcceptedPlanRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateAcceptedPlanRequest_CAS)
	return res, ok
}

type UpdateAcceptedPlanRequest_FieldSubPathArrayOfValues struct {
	UpdateAcceptedPlanRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAcceptedPlanRequest_FieldPathArrayOfValues = (*UpdateAcceptedPlanRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAcceptedPlanRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAcceptedPlanRequest_FieldSubPathArrayOfValues) AsAcceptedPlanPathArrayOfValues() (accepted_plan.AcceptedPlan_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(accepted_plan.AcceptedPlan_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateAcceptedPlanRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAcceptedPlanRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAcceptedPlanRequestCAS_FieldPathSelector
	Get(source *UpdateAcceptedPlanRequest_CAS) []interface{}
	GetSingle(source *UpdateAcceptedPlanRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateAcceptedPlanRequest_CAS)

	// Those methods build corresponding UpdateAcceptedPlanRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAcceptedPlanRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue
}

type UpdateAcceptedPlanRequestCAS_FieldPathSelector int32

const (
	UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState UpdateAcceptedPlanRequestCAS_FieldPathSelector = 0
	UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask        UpdateAcceptedPlanRequestCAS_FieldPathSelector = 1
)

func (s UpdateAcceptedPlanRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", s))
	}
}

func BuildUpdateAcceptedPlanRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateAcceptedPlanRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAcceptedPlanRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateAcceptedPlanRequestCAS_FieldTerminalPath{selector: UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateAcceptedPlanRequestCAS_FieldTerminalPath{selector: UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := accepted_plan.BuildAcceptedPlan_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAcceptedPlanRequestCAS_FieldSubPath{selector: UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAcceptedPlanRequest_CAS", fp)
}

func ParseUpdateAcceptedPlanRequestCAS_FieldPath(rawField string) (UpdateAcceptedPlanRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAcceptedPlanRequestCAS_FieldPath(fp)
}

func MustParseUpdateAcceptedPlanRequestCAS_FieldPath(rawField string) UpdateAcceptedPlanRequestCAS_FieldPath {
	fp, err := ParseUpdateAcceptedPlanRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAcceptedPlanRequestCAS_FieldTerminalPath struct {
	selector UpdateAcceptedPlanRequestCAS_FieldPathSelector
}

var _ UpdateAcceptedPlanRequestCAS_FieldPath = (*UpdateAcceptedPlanRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) Selector() UpdateAcceptedPlanRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAcceptedPlanRequest_CAS
func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) Get(source *UpdateAcceptedPlanRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAcceptedPlanRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateAcceptedPlanRequest_CAS
func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) GetSingle(source *UpdateAcceptedPlanRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAcceptedPlanRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
		return (*accepted_plan.AcceptedPlan)(nil)
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask:
		return (*accepted_plan.AcceptedPlan_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) ClearValue(item *UpdateAcceptedPlanRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAcceptedPlanRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateAcceptedPlanRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAcceptedPlanRequestCAS_FieldTerminalPathValue{UpdateAcceptedPlanRequestCAS_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlan)}
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAcceptedPlanRequestCAS_FieldTerminalPathValue{UpdateAcceptedPlanRequestCAS_FieldTerminalPath: *fp, value: value.(*accepted_plan.AcceptedPlan_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayOfValues{UpdateAcceptedPlanRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayOfValues{UpdateAcceptedPlanRequestCAS_FieldTerminalPath: *fp, values: values.([]*accepted_plan.AcceptedPlan)}
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayOfValues{UpdateAcceptedPlanRequestCAS_FieldTerminalPath: *fp, values: values.([]*accepted_plan.AcceptedPlan_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAcceptedPlanRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAcceptedPlanRequestCAS_FieldSubPath struct {
	selector UpdateAcceptedPlanRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAcceptedPlanRequestCAS_FieldPath = (*UpdateAcceptedPlanRequestCAS_FieldSubPath)(nil)

func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) Selector() UpdateAcceptedPlanRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) AsConditionalStateSubPath() (accepted_plan.AcceptedPlan_FieldPath, bool) {
	res, ok := fps.subPath.(accepted_plan.AcceptedPlan_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAcceptedPlanRequest_CAS
func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) Get(source *UpdateAcceptedPlanRequest_CAS) (values []interface{}) {
	if asAcceptedPlanFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asAcceptedPlanFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAcceptedPlanRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateAcceptedPlanRequest_CAS
func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) GetSingle(source *UpdateAcceptedPlanRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAcceptedPlanRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) ClearValue(item *UpdateAcceptedPlanRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAcceptedPlanRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateAcceptedPlanRequestCAS_FieldPathValue {
	return &UpdateAcceptedPlanRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues {
	return &UpdateAcceptedPlanRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue {
	return &UpdateAcceptedPlanRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAcceptedPlanRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAcceptedPlanRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateAcceptedPlanRequestCAS_FieldPathValue interface {
	UpdateAcceptedPlanRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAcceptedPlanRequest_CAS)
	CompareWith(*UpdateAcceptedPlanRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateAcceptedPlanRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateAcceptedPlanRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateAcceptedPlanRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAcceptedPlanRequestCAS_FieldPathValue), nil
}

func MustParseUpdateAcceptedPlanRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateAcceptedPlanRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateAcceptedPlanRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAcceptedPlanRequestCAS_FieldTerminalPathValue struct {
	UpdateAcceptedPlanRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAcceptedPlanRequestCAS_FieldPathValue = (*UpdateAcceptedPlanRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateAcceptedPlanRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAcceptedPlanRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpv.value.(*accepted_plan.AcceptedPlan)
	return res, ok
}
func (fpv *UpdateAcceptedPlanRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateAcceptedPlanRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateAcceptedPlanRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAcceptedPlanRequest_CAS)
	}
	switch fpv.selector {
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*accepted_plan.AcceptedPlan)
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*accepted_plan.AcceptedPlan_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAcceptedPlanRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAcceptedPlanRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAcceptedPlanRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateAcceptedPlanRequest_CAS'.
func (fpv *UpdateAcceptedPlanRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateAcceptedPlanRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAcceptedPlanRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAcceptedPlanRequest_CAS))
}

type UpdateAcceptedPlanRequestCAS_FieldSubPathValue struct {
	UpdateAcceptedPlanRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAcceptedPlanRequestCAS_FieldPathValue = (*UpdateAcceptedPlanRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateAcceptedPlanRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (accepted_plan.AcceptedPlan_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAcceptedPlanRequestCAS_FieldSubPathValue) SetTo(target **UpdateAcceptedPlanRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAcceptedPlanRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAcceptedPlanRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAcceptedPlanRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAcceptedPlanRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAcceptedPlanRequestCAS_FieldSubPathValue) CompareWith(source *UpdateAcceptedPlanRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(accepted_plan.AcceptedPlan_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAcceptedPlanRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAcceptedPlanRequest_CAS))
}

// UpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAcceptedPlanRequestCAS_FieldPath
	ContainsValue(*UpdateAcceptedPlanRequest_CAS) bool
}

// ParseUpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAcceptedPlanRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateAcceptedPlanRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAcceptedPlanRequestCAS_FieldPathArrayItemValue = (*UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAcceptedPlanRequest_CAS as interface{}
func (fpaiv *UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAcceptedPlanRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAcceptedPlanRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAcceptedPlanRequest_CAS) bool {
	slice := fpaiv.UpdateAcceptedPlanRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAcceptedPlanRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateAcceptedPlanRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAcceptedPlanRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAcceptedPlanRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (accepted_plan.AcceptedPlan_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(accepted_plan.AcceptedPlan_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateAcceptedPlanRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAcceptedPlanRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(accepted_plan.AcceptedPlan_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAcceptedPlanRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAcceptedPlanRequestCAS_FieldPath
}

func ParseUpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAcceptedPlanRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateAcceptedPlanRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues = (*UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*accepted_plan.AcceptedPlan) {
			values = append(values, v)
		}
	case UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*accepted_plan.AcceptedPlan, bool) {
	res, ok := fpaov.values.([]*accepted_plan.AcceptedPlan)
	return res, ok
}
func (fpaov *UpdateAcceptedPlanRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*accepted_plan.AcceptedPlan_FieldMask, bool) {
	res, ok := fpaov.values.([]*accepted_plan.AcceptedPlan_FieldMask)
	return res, ok
}

type UpdateAcceptedPlanRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateAcceptedPlanRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAcceptedPlanRequestCAS_FieldPathArrayOfValues = (*UpdateAcceptedPlanRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAcceptedPlanRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAcceptedPlanRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (accepted_plan.AcceptedPlan_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(accepted_plan.AcceptedPlan_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteAcceptedPlanRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteAcceptedPlanRequest_FieldPathSelector
	Get(source *DeleteAcceptedPlanRequest) []interface{}
	GetSingle(source *DeleteAcceptedPlanRequest) (interface{}, bool)
	ClearValue(item *DeleteAcceptedPlanRequest)

	// Those methods build corresponding DeleteAcceptedPlanRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteAcceptedPlanRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteAcceptedPlanRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteAcceptedPlanRequest_FieldPathArrayItemValue
}

type DeleteAcceptedPlanRequest_FieldPathSelector int32

const (
	DeleteAcceptedPlanRequest_FieldPathSelectorName DeleteAcceptedPlanRequest_FieldPathSelector = 0
)

func (s DeleteAcceptedPlanRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteAcceptedPlanRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAcceptedPlanRequest: %d", s))
	}
}

func BuildDeleteAcceptedPlanRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteAcceptedPlanRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteAcceptedPlanRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteAcceptedPlanRequest_FieldTerminalPath{selector: DeleteAcceptedPlanRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteAcceptedPlanRequest", fp)
}

func ParseDeleteAcceptedPlanRequest_FieldPath(rawField string) (DeleteAcceptedPlanRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteAcceptedPlanRequest_FieldPath(fp)
}

func MustParseDeleteAcceptedPlanRequest_FieldPath(rawField string) DeleteAcceptedPlanRequest_FieldPath {
	fp, err := ParseDeleteAcceptedPlanRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteAcceptedPlanRequest_FieldTerminalPath struct {
	selector DeleteAcceptedPlanRequest_FieldPathSelector
}

var _ DeleteAcceptedPlanRequest_FieldPath = (*DeleteAcceptedPlanRequest_FieldTerminalPath)(nil)

func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) Selector() DeleteAcceptedPlanRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteAcceptedPlanRequest
func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) Get(source *DeleteAcceptedPlanRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteAcceptedPlanRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAcceptedPlanRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteAcceptedPlanRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteAcceptedPlanRequest
func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) GetSingle(source *DeleteAcceptedPlanRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteAcceptedPlanRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteAcceptedPlanRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteAcceptedPlanRequest_FieldPathSelectorName:
		return (*accepted_plan.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) ClearValue(item *DeleteAcceptedPlanRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteAcceptedPlanRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAcceptedPlanRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteAcceptedPlanRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteAcceptedPlanRequest_FieldPathSelectorName
}

func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteAcceptedPlanRequest_FieldPathValue {
	switch fp.selector {
	case DeleteAcceptedPlanRequest_FieldPathSelectorName:
		return &DeleteAcceptedPlanRequest_FieldTerminalPathValue{DeleteAcceptedPlanRequest_FieldTerminalPath: *fp, value: value.(*accepted_plan.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteAcceptedPlanRequest_FieldPathArrayOfValues {
	fpaov := &DeleteAcceptedPlanRequest_FieldTerminalPathArrayOfValues{DeleteAcceptedPlanRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteAcceptedPlanRequest_FieldPathSelectorName:
		return &DeleteAcceptedPlanRequest_FieldTerminalPathArrayOfValues{DeleteAcceptedPlanRequest_FieldTerminalPath: *fp, values: values.([]*accepted_plan.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAcceptedPlanRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteAcceptedPlanRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAcceptedPlanRequest: %d", fp.selector))
	}
}

func (fp *DeleteAcceptedPlanRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteAcceptedPlanRequest_FieldPathValue allows storing values for DeleteAcceptedPlanRequest fields according to their type
type DeleteAcceptedPlanRequest_FieldPathValue interface {
	DeleteAcceptedPlanRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteAcceptedPlanRequest)
	CompareWith(*DeleteAcceptedPlanRequest) (cmp int, comparable bool)
}

func ParseDeleteAcceptedPlanRequest_FieldPathValue(pathStr, valueStr string) (DeleteAcceptedPlanRequest_FieldPathValue, error) {
	fp, err := ParseDeleteAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAcceptedPlanRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteAcceptedPlanRequest_FieldPathValue), nil
}

func MustParseDeleteAcceptedPlanRequest_FieldPathValue(pathStr, valueStr string) DeleteAcceptedPlanRequest_FieldPathValue {
	fpv, err := ParseDeleteAcceptedPlanRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteAcceptedPlanRequest_FieldTerminalPathValue struct {
	DeleteAcceptedPlanRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAcceptedPlanRequest_FieldPathValue = (*DeleteAcceptedPlanRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteAcceptedPlanRequest' as interface{}
func (fpv *DeleteAcceptedPlanRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteAcceptedPlanRequest_FieldTerminalPathValue) AsNameValue() (*accepted_plan.Reference, bool) {
	res, ok := fpv.value.(*accepted_plan.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteAcceptedPlanRequest
func (fpv *DeleteAcceptedPlanRequest_FieldTerminalPathValue) SetTo(target **DeleteAcceptedPlanRequest) {
	if *target == nil {
		*target = new(DeleteAcceptedPlanRequest)
	}
	switch fpv.selector {
	case DeleteAcceptedPlanRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*accepted_plan.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAcceptedPlanRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAcceptedPlanRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteAcceptedPlanRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteAcceptedPlanRequest_FieldTerminalPathValue' with the value under path in 'DeleteAcceptedPlanRequest'.
func (fpv *DeleteAcceptedPlanRequest_FieldTerminalPathValue) CompareWith(source *DeleteAcceptedPlanRequest) (int, bool) {
	switch fpv.selector {
	case DeleteAcceptedPlanRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*accepted_plan.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAcceptedPlanRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAcceptedPlanRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteAcceptedPlanRequest))
}

// DeleteAcceptedPlanRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteAcceptedPlanRequest according to their type
// Present only for array (repeated) types.
type DeleteAcceptedPlanRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteAcceptedPlanRequest_FieldPath
	ContainsValue(*DeleteAcceptedPlanRequest) bool
}

// ParseDeleteAcceptedPlanRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteAcceptedPlanRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAcceptedPlanRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteAcceptedPlanRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteAcceptedPlanRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteAcceptedPlanRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteAcceptedPlanRequest_FieldTerminalPathArrayItemValue struct {
	DeleteAcceptedPlanRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAcceptedPlanRequest_FieldPathArrayItemValue = (*DeleteAcceptedPlanRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteAcceptedPlanRequest as interface{}
func (fpaiv *DeleteAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteAcceptedPlanRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteAcceptedPlanRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteAcceptedPlanRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteAcceptedPlanRequest'
func (fpaiv *DeleteAcceptedPlanRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteAcceptedPlanRequest) bool {
	slice := fpaiv.DeleteAcceptedPlanRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteAcceptedPlanRequest_FieldPathArrayOfValues allows storing slice of values for DeleteAcceptedPlanRequest fields according to their type
type DeleteAcceptedPlanRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteAcceptedPlanRequest_FieldPath
}

func ParseDeleteAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteAcceptedPlanRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteAcceptedPlanRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAcceptedPlanRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteAcceptedPlanRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteAcceptedPlanRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteAcceptedPlanRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteAcceptedPlanRequest_FieldTerminalPathArrayOfValues struct {
	DeleteAcceptedPlanRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteAcceptedPlanRequest_FieldPathArrayOfValues = (*DeleteAcceptedPlanRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteAcceptedPlanRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteAcceptedPlanRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*accepted_plan.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteAcceptedPlanRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*accepted_plan.Reference, bool) {
	res, ok := fpaov.values.([]*accepted_plan.Reference)
	return res, ok
}
