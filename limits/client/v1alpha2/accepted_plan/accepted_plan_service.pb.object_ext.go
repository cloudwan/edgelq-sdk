// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/accepted_plan_service.proto
// DO NOT EDIT!!!

package accepted_plan_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	accepted_plan "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/accepted_plan"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &accepted_plan.AcceptedPlan{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetAcceptedPlanRequest) GotenObjectExt() {}

func (o *GetAcceptedPlanRequest) MakeFullFieldMask() *GetAcceptedPlanRequest_FieldMask {
	return FullGetAcceptedPlanRequest_FieldMask()
}

func (o *GetAcceptedPlanRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetAcceptedPlanRequest_FieldMask()
}

func (o *GetAcceptedPlanRequest) MakeDiffFieldMask(other *GetAcceptedPlanRequest) *GetAcceptedPlanRequest_FieldMask {
	if o == nil && other == nil {
		return &GetAcceptedPlanRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetAcceptedPlanRequest_FieldMask()
	}

	res := &GetAcceptedPlanRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetAcceptedPlanRequest_FieldTerminalPath{selector: GetAcceptedPlanRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetAcceptedPlanRequest_FieldTerminalPath{selector: GetAcceptedPlanRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetAcceptedPlanRequest_FieldTerminalPath{selector: GetAcceptedPlanRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetAcceptedPlanRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetAcceptedPlanRequest))
}

func (o *GetAcceptedPlanRequest) Clone() *GetAcceptedPlanRequest {
	if o == nil {
		return nil
	}
	result := &GetAcceptedPlanRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &accepted_plan.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*accepted_plan.AcceptedPlan_FieldMask)
	result.View = o.View
	return result
}

func (o *GetAcceptedPlanRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetAcceptedPlanRequest) Merge(source *GetAcceptedPlanRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &accepted_plan.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(accepted_plan.AcceptedPlan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetAcceptedPlanRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetAcceptedPlanRequest))
}

func (o *BatchGetAcceptedPlansRequest) GotenObjectExt() {}

func (o *BatchGetAcceptedPlansRequest) MakeFullFieldMask() *BatchGetAcceptedPlansRequest_FieldMask {
	return FullBatchGetAcceptedPlansRequest_FieldMask()
}

func (o *BatchGetAcceptedPlansRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAcceptedPlansRequest_FieldMask()
}

func (o *BatchGetAcceptedPlansRequest) MakeDiffFieldMask(other *BatchGetAcceptedPlansRequest) *BatchGetAcceptedPlansRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAcceptedPlansRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAcceptedPlansRequest_FieldMask()
	}

	res := &BatchGetAcceptedPlansRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAcceptedPlansRequest_FieldTerminalPath{selector: BatchGetAcceptedPlansRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAcceptedPlansRequest_FieldTerminalPath{selector: BatchGetAcceptedPlansRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetAcceptedPlansRequest_FieldTerminalPath{selector: BatchGetAcceptedPlansRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetAcceptedPlansRequest_FieldTerminalPath{selector: BatchGetAcceptedPlansRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetAcceptedPlansRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAcceptedPlansRequest))
}

func (o *BatchGetAcceptedPlansRequest) Clone() *BatchGetAcceptedPlansRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetAcceptedPlansRequest{}
	result.Names = make([]*accepted_plan.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &accepted_plan.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*accepted_plan.AcceptedPlan_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetAcceptedPlansRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAcceptedPlansRequest) Merge(source *BatchGetAcceptedPlansRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *accepted_plan.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &accepted_plan.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(accepted_plan.AcceptedPlan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetAcceptedPlansRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAcceptedPlansRequest))
}

func (o *BatchGetAcceptedPlansResponse) GotenObjectExt() {}

func (o *BatchGetAcceptedPlansResponse) MakeFullFieldMask() *BatchGetAcceptedPlansResponse_FieldMask {
	return FullBatchGetAcceptedPlansResponse_FieldMask()
}

func (o *BatchGetAcceptedPlansResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAcceptedPlansResponse_FieldMask()
}

func (o *BatchGetAcceptedPlansResponse) MakeDiffFieldMask(other *BatchGetAcceptedPlansResponse) *BatchGetAcceptedPlansResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAcceptedPlansResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAcceptedPlansResponse_FieldMask()
	}

	res := &BatchGetAcceptedPlansResponse_FieldMask{}

	if len(o.GetAcceptedPlans()) == len(other.GetAcceptedPlans()) {
		for i, lValue := range o.GetAcceptedPlans() {
			rValue := other.GetAcceptedPlans()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetAcceptedPlansResponse_FieldTerminalPath{selector: BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAcceptedPlansResponse_FieldTerminalPath{selector: BatchGetAcceptedPlansResponse_FieldPathSelectorAcceptedPlans})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAcceptedPlansResponse_FieldTerminalPath{selector: BatchGetAcceptedPlansResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAcceptedPlansResponse_FieldTerminalPath{selector: BatchGetAcceptedPlansResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetAcceptedPlansResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAcceptedPlansResponse))
}

func (o *BatchGetAcceptedPlansResponse) Clone() *BatchGetAcceptedPlansResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetAcceptedPlansResponse{}
	result.AcceptedPlans = make([]*accepted_plan.AcceptedPlan, len(o.AcceptedPlans))
	for i, sourceValue := range o.AcceptedPlans {
		result.AcceptedPlans[i] = sourceValue.Clone()
	}
	result.Missing = make([]*accepted_plan.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &accepted_plan.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetAcceptedPlansResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAcceptedPlansResponse) Merge(source *BatchGetAcceptedPlansResponse) {
	for _, sourceValue := range source.GetAcceptedPlans() {
		exists := false
		for _, currentValue := range o.AcceptedPlans {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *accepted_plan.AcceptedPlan
			if sourceValue != nil {
				newDstElement = new(accepted_plan.AcceptedPlan)
				newDstElement.Merge(sourceValue)
			}
			o.AcceptedPlans = append(o.AcceptedPlans, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *accepted_plan.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &accepted_plan.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetAcceptedPlansResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAcceptedPlansResponse))
}

func (o *ListAcceptedPlansRequest) GotenObjectExt() {}

func (o *ListAcceptedPlansRequest) MakeFullFieldMask() *ListAcceptedPlansRequest_FieldMask {
	return FullListAcceptedPlansRequest_FieldMask()
}

func (o *ListAcceptedPlansRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAcceptedPlansRequest_FieldMask()
}

func (o *ListAcceptedPlansRequest) MakeDiffFieldMask(other *ListAcceptedPlansRequest) *ListAcceptedPlansRequest_FieldMask {
	if o == nil && other == nil {
		return &ListAcceptedPlansRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAcceptedPlansRequest_FieldMask()
	}

	res := &ListAcceptedPlansRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListAcceptedPlansRequest_FieldTerminalPath{selector: ListAcceptedPlansRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListAcceptedPlansRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAcceptedPlansRequest))
}

func (o *ListAcceptedPlansRequest) Clone() *ListAcceptedPlansRequest {
	if o == nil {
		return nil
	}
	result := &ListAcceptedPlansRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &accepted_plan.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &accepted_plan.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &accepted_plan.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &accepted_plan.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*accepted_plan.AcceptedPlan_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListAcceptedPlansRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAcceptedPlansRequest) Merge(source *ListAcceptedPlansRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &accepted_plan.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &accepted_plan.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &accepted_plan.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &accepted_plan.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(accepted_plan.AcceptedPlan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListAcceptedPlansRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAcceptedPlansRequest))
}

func (o *ListAcceptedPlansResponse) GotenObjectExt() {}

func (o *ListAcceptedPlansResponse) MakeFullFieldMask() *ListAcceptedPlansResponse_FieldMask {
	return FullListAcceptedPlansResponse_FieldMask()
}

func (o *ListAcceptedPlansResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAcceptedPlansResponse_FieldMask()
}

func (o *ListAcceptedPlansResponse) MakeDiffFieldMask(other *ListAcceptedPlansResponse) *ListAcceptedPlansResponse_FieldMask {
	if o == nil && other == nil {
		return &ListAcceptedPlansResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAcceptedPlansResponse_FieldMask()
	}

	res := &ListAcceptedPlansResponse_FieldMask{}

	if len(o.GetAcceptedPlans()) == len(other.GetAcceptedPlans()) {
		for i, lValue := range o.GetAcceptedPlans() {
			rValue := other.GetAcceptedPlans()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListAcceptedPlansResponse_FieldTerminalPath{selector: ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListAcceptedPlansResponse_FieldTerminalPath{selector: ListAcceptedPlansResponse_FieldPathSelectorAcceptedPlans})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListAcceptedPlansResponse_FieldTerminalPath{selector: ListAcceptedPlansResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListAcceptedPlansResponse_FieldTerminalPath{selector: ListAcceptedPlansResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListAcceptedPlansResponse_FieldTerminalPath{selector: ListAcceptedPlansResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListAcceptedPlansResponse_FieldTerminalPath{selector: ListAcceptedPlansResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListAcceptedPlansResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAcceptedPlansResponse))
}

func (o *ListAcceptedPlansResponse) Clone() *ListAcceptedPlansResponse {
	if o == nil {
		return nil
	}
	result := &ListAcceptedPlansResponse{}
	result.AcceptedPlans = make([]*accepted_plan.AcceptedPlan, len(o.AcceptedPlans))
	for i, sourceValue := range o.AcceptedPlans {
		result.AcceptedPlans[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &accepted_plan.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &accepted_plan.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListAcceptedPlansResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAcceptedPlansResponse) Merge(source *ListAcceptedPlansResponse) {
	for _, sourceValue := range source.GetAcceptedPlans() {
		exists := false
		for _, currentValue := range o.AcceptedPlans {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *accepted_plan.AcceptedPlan
			if sourceValue != nil {
				newDstElement = new(accepted_plan.AcceptedPlan)
				newDstElement.Merge(sourceValue)
			}
			o.AcceptedPlans = append(o.AcceptedPlans, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &accepted_plan.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &accepted_plan.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListAcceptedPlansResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAcceptedPlansResponse))
}

func (o *WatchAcceptedPlanRequest) GotenObjectExt() {}

func (o *WatchAcceptedPlanRequest) MakeFullFieldMask() *WatchAcceptedPlanRequest_FieldMask {
	return FullWatchAcceptedPlanRequest_FieldMask()
}

func (o *WatchAcceptedPlanRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAcceptedPlanRequest_FieldMask()
}

func (o *WatchAcceptedPlanRequest) MakeDiffFieldMask(other *WatchAcceptedPlanRequest) *WatchAcceptedPlanRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAcceptedPlanRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAcceptedPlanRequest_FieldMask()
	}

	res := &WatchAcceptedPlanRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchAcceptedPlanRequest_FieldTerminalPath{selector: WatchAcceptedPlanRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAcceptedPlanRequest_FieldTerminalPath{selector: WatchAcceptedPlanRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAcceptedPlanRequest_FieldTerminalPath{selector: WatchAcceptedPlanRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchAcceptedPlanRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAcceptedPlanRequest))
}

func (o *WatchAcceptedPlanRequest) Clone() *WatchAcceptedPlanRequest {
	if o == nil {
		return nil
	}
	result := &WatchAcceptedPlanRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &accepted_plan.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*accepted_plan.AcceptedPlan_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchAcceptedPlanRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAcceptedPlanRequest) Merge(source *WatchAcceptedPlanRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &accepted_plan.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(accepted_plan.AcceptedPlan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchAcceptedPlanRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAcceptedPlanRequest))
}

func (o *WatchAcceptedPlanResponse) GotenObjectExt() {}

func (o *WatchAcceptedPlanResponse) MakeFullFieldMask() *WatchAcceptedPlanResponse_FieldMask {
	return FullWatchAcceptedPlanResponse_FieldMask()
}

func (o *WatchAcceptedPlanResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAcceptedPlanResponse_FieldMask()
}

func (o *WatchAcceptedPlanResponse) MakeDiffFieldMask(other *WatchAcceptedPlanResponse) *WatchAcceptedPlanResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAcceptedPlanResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAcceptedPlanResponse_FieldMask()
	}

	res := &WatchAcceptedPlanResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchAcceptedPlanResponse_FieldTerminalPath{selector: WatchAcceptedPlanResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchAcceptedPlanResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAcceptedPlanResponse))
}

func (o *WatchAcceptedPlanResponse) Clone() *WatchAcceptedPlanResponse {
	if o == nil {
		return nil
	}
	result := &WatchAcceptedPlanResponse{}
	result.Change = proto.Clone(o.Change).(*accepted_plan.AcceptedPlanChange)
	return result
}

func (o *WatchAcceptedPlanResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAcceptedPlanResponse) Merge(source *WatchAcceptedPlanResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(accepted_plan.AcceptedPlanChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchAcceptedPlanResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAcceptedPlanResponse))
}

func (o *WatchAcceptedPlansRequest) GotenObjectExt() {}

func (o *WatchAcceptedPlansRequest) MakeFullFieldMask() *WatchAcceptedPlansRequest_FieldMask {
	return FullWatchAcceptedPlansRequest_FieldMask()
}

func (o *WatchAcceptedPlansRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAcceptedPlansRequest_FieldMask()
}

func (o *WatchAcceptedPlansRequest) MakeDiffFieldMask(other *WatchAcceptedPlansRequest) *WatchAcceptedPlansRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAcceptedPlansRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAcceptedPlansRequest_FieldMask()
	}

	res := &WatchAcceptedPlansRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansRequest_FieldTerminalPath{selector: WatchAcceptedPlansRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchAcceptedPlansRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAcceptedPlansRequest))
}

func (o *WatchAcceptedPlansRequest) Clone() *WatchAcceptedPlansRequest {
	if o == nil {
		return nil
	}
	result := &WatchAcceptedPlansRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &accepted_plan.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &accepted_plan.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &accepted_plan.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &accepted_plan.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*accepted_plan.AcceptedPlan_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchAcceptedPlansRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAcceptedPlansRequest) Merge(source *WatchAcceptedPlansRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &accepted_plan.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &accepted_plan.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &accepted_plan.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &accepted_plan.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(accepted_plan.AcceptedPlan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchAcceptedPlansRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAcceptedPlansRequest))
}

func (o *WatchAcceptedPlansResponse) GotenObjectExt() {}

func (o *WatchAcceptedPlansResponse) MakeFullFieldMask() *WatchAcceptedPlansResponse_FieldMask {
	return FullWatchAcceptedPlansResponse_FieldMask()
}

func (o *WatchAcceptedPlansResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAcceptedPlansResponse_FieldMask()
}

func (o *WatchAcceptedPlansResponse) MakeDiffFieldMask(other *WatchAcceptedPlansResponse) *WatchAcceptedPlansResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAcceptedPlansResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAcceptedPlansResponse_FieldMask()
	}

	res := &WatchAcceptedPlansResponse_FieldMask{}

	if len(o.GetAcceptedPlanChanges()) == len(other.GetAcceptedPlanChanges()) {
		for i, lValue := range o.GetAcceptedPlanChanges() {
			rValue := other.GetAcceptedPlanChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorAcceptedPlanChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldSubPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansResponse_FieldTerminalPath{selector: WatchAcceptedPlansResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchAcceptedPlansResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAcceptedPlansResponse))
}

func (o *WatchAcceptedPlansResponse) Clone() *WatchAcceptedPlansResponse {
	if o == nil {
		return nil
	}
	result := &WatchAcceptedPlansResponse{}
	result.AcceptedPlanChanges = make([]*accepted_plan.AcceptedPlanChange, len(o.AcceptedPlanChanges))
	for i, sourceValue := range o.AcceptedPlanChanges {
		result.AcceptedPlanChanges[i] = proto.Clone(sourceValue).(*accepted_plan.AcceptedPlanChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchAcceptedPlansResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAcceptedPlansResponse) Merge(source *WatchAcceptedPlansResponse) {
	for _, sourceValue := range source.GetAcceptedPlanChanges() {
		exists := false
		for _, currentValue := range o.AcceptedPlanChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *accepted_plan.AcceptedPlanChange
			if sourceValue != nil {
				newDstElement = new(accepted_plan.AcceptedPlanChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.AcceptedPlanChanges = append(o.AcceptedPlanChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchAcceptedPlansResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchAcceptedPlansResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAcceptedPlansResponse))
}

func (o *WatchAcceptedPlansResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchAcceptedPlansResponse_PageTokenChange) MakeFullFieldMask() *WatchAcceptedPlansResponse_PageTokenChange_FieldMask {
	return FullWatchAcceptedPlansResponse_PageTokenChange_FieldMask()
}

func (o *WatchAcceptedPlansResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAcceptedPlansResponse_PageTokenChange_FieldMask()
}

func (o *WatchAcceptedPlansResponse_PageTokenChange) MakeDiffFieldMask(other *WatchAcceptedPlansResponse_PageTokenChange) *WatchAcceptedPlansResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchAcceptedPlansResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAcceptedPlansResponse_PageTokenChange_FieldMask()
	}

	res := &WatchAcceptedPlansResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath{selector: WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchAcceptedPlansResponsePageTokenChange_FieldTerminalPath{selector: WatchAcceptedPlansResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchAcceptedPlansResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAcceptedPlansResponse_PageTokenChange))
}

func (o *WatchAcceptedPlansResponse_PageTokenChange) Clone() *WatchAcceptedPlansResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchAcceptedPlansResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &accepted_plan.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &accepted_plan.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchAcceptedPlansResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAcceptedPlansResponse_PageTokenChange) Merge(source *WatchAcceptedPlansResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &accepted_plan.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &accepted_plan.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchAcceptedPlansResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAcceptedPlansResponse_PageTokenChange))
}

func (o *CreateAcceptedPlanRequest) GotenObjectExt() {}

func (o *CreateAcceptedPlanRequest) MakeFullFieldMask() *CreateAcceptedPlanRequest_FieldMask {
	return FullCreateAcceptedPlanRequest_FieldMask()
}

func (o *CreateAcceptedPlanRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateAcceptedPlanRequest_FieldMask()
}

func (o *CreateAcceptedPlanRequest) MakeDiffFieldMask(other *CreateAcceptedPlanRequest) *CreateAcceptedPlanRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateAcceptedPlanRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateAcceptedPlanRequest_FieldMask()
	}

	res := &CreateAcceptedPlanRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateAcceptedPlanRequest_FieldTerminalPath{selector: CreateAcceptedPlanRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetAcceptedPlan().MakeDiffFieldMask(other.GetAcceptedPlan())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateAcceptedPlanRequest_FieldTerminalPath{selector: CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateAcceptedPlanRequest_FieldSubPath{selector: CreateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateAcceptedPlanRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateAcceptedPlanRequest))
}

func (o *CreateAcceptedPlanRequest) Clone() *CreateAcceptedPlanRequest {
	if o == nil {
		return nil
	}
	result := &CreateAcceptedPlanRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &accepted_plan.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.AcceptedPlan = o.AcceptedPlan.Clone()
	return result
}

func (o *CreateAcceptedPlanRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateAcceptedPlanRequest) Merge(source *CreateAcceptedPlanRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &accepted_plan.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetAcceptedPlan() != nil {
		if o.AcceptedPlan == nil {
			o.AcceptedPlan = new(accepted_plan.AcceptedPlan)
		}
		o.AcceptedPlan.Merge(source.GetAcceptedPlan())
	}
}

func (o *CreateAcceptedPlanRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateAcceptedPlanRequest))
}

func (o *UpdateAcceptedPlanRequest) GotenObjectExt() {}

func (o *UpdateAcceptedPlanRequest) MakeFullFieldMask() *UpdateAcceptedPlanRequest_FieldMask {
	return FullUpdateAcceptedPlanRequest_FieldMask()
}

func (o *UpdateAcceptedPlanRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAcceptedPlanRequest_FieldMask()
}

func (o *UpdateAcceptedPlanRequest) MakeDiffFieldMask(other *UpdateAcceptedPlanRequest) *UpdateAcceptedPlanRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateAcceptedPlanRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAcceptedPlanRequest_FieldMask()
	}

	res := &UpdateAcceptedPlanRequest_FieldMask{}
	{
		subMask := o.GetAcceptedPlan().MakeDiffFieldMask(other.GetAcceptedPlan())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAcceptedPlanRequest_FieldTerminalPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAcceptedPlanRequest_FieldSubPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorAcceptedPlan, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateAcceptedPlanRequest_FieldTerminalPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAcceptedPlanRequest_FieldTerminalPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAcceptedPlanRequest_FieldSubPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateAcceptedPlanRequest_FieldTerminalPath{selector: UpdateAcceptedPlanRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateAcceptedPlanRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAcceptedPlanRequest))
}

func (o *UpdateAcceptedPlanRequest) Clone() *UpdateAcceptedPlanRequest {
	if o == nil {
		return nil
	}
	result := &UpdateAcceptedPlanRequest{}
	result.AcceptedPlan = o.AcceptedPlan.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*accepted_plan.AcceptedPlan_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateAcceptedPlanRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAcceptedPlanRequest) Merge(source *UpdateAcceptedPlanRequest) {
	if source.GetAcceptedPlan() != nil {
		if o.AcceptedPlan == nil {
			o.AcceptedPlan = new(accepted_plan.AcceptedPlan)
		}
		o.AcceptedPlan.Merge(source.GetAcceptedPlan())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(accepted_plan.AcceptedPlan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateAcceptedPlanRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateAcceptedPlanRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAcceptedPlanRequest))
}

func (o *UpdateAcceptedPlanRequest_CAS) GotenObjectExt() {}

func (o *UpdateAcceptedPlanRequest_CAS) MakeFullFieldMask() *UpdateAcceptedPlanRequest_CAS_FieldMask {
	return FullUpdateAcceptedPlanRequest_CAS_FieldMask()
}

func (o *UpdateAcceptedPlanRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAcceptedPlanRequest_CAS_FieldMask()
}

func (o *UpdateAcceptedPlanRequest_CAS) MakeDiffFieldMask(other *UpdateAcceptedPlanRequest_CAS) *UpdateAcceptedPlanRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateAcceptedPlanRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAcceptedPlanRequest_CAS_FieldMask()
	}

	res := &UpdateAcceptedPlanRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAcceptedPlanRequestCAS_FieldTerminalPath{selector: UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAcceptedPlanRequestCAS_FieldSubPath{selector: UpdateAcceptedPlanRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateAcceptedPlanRequestCAS_FieldTerminalPath{selector: UpdateAcceptedPlanRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateAcceptedPlanRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAcceptedPlanRequest_CAS))
}

func (o *UpdateAcceptedPlanRequest_CAS) Clone() *UpdateAcceptedPlanRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateAcceptedPlanRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*accepted_plan.AcceptedPlan_FieldMask)
	return result
}

func (o *UpdateAcceptedPlanRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAcceptedPlanRequest_CAS) Merge(source *UpdateAcceptedPlanRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(accepted_plan.AcceptedPlan)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(accepted_plan.AcceptedPlan_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateAcceptedPlanRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAcceptedPlanRequest_CAS))
}

func (o *DeleteAcceptedPlanRequest) GotenObjectExt() {}

func (o *DeleteAcceptedPlanRequest) MakeFullFieldMask() *DeleteAcceptedPlanRequest_FieldMask {
	return FullDeleteAcceptedPlanRequest_FieldMask()
}

func (o *DeleteAcceptedPlanRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteAcceptedPlanRequest_FieldMask()
}

func (o *DeleteAcceptedPlanRequest) MakeDiffFieldMask(other *DeleteAcceptedPlanRequest) *DeleteAcceptedPlanRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteAcceptedPlanRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteAcceptedPlanRequest_FieldMask()
	}

	res := &DeleteAcceptedPlanRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteAcceptedPlanRequest_FieldTerminalPath{selector: DeleteAcceptedPlanRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteAcceptedPlanRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteAcceptedPlanRequest))
}

func (o *DeleteAcceptedPlanRequest) Clone() *DeleteAcceptedPlanRequest {
	if o == nil {
		return nil
	}
	result := &DeleteAcceptedPlanRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &accepted_plan.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteAcceptedPlanRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteAcceptedPlanRequest) Merge(source *DeleteAcceptedPlanRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &accepted_plan.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteAcceptedPlanRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteAcceptedPlanRequest))
}
