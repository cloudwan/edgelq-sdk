// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/plan_assignment_service.proto
// DO NOT EDIT!!!

package plan_assignment_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	plan_assignment "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan_assignment"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &plan_assignment.PlanAssignment{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetPlanAssignmentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetPlanAssignmentRequest_FieldPathSelector
	Get(source *GetPlanAssignmentRequest) []interface{}
	GetSingle(source *GetPlanAssignmentRequest) (interface{}, bool)
	ClearValue(item *GetPlanAssignmentRequest)

	// Those methods build corresponding GetPlanAssignmentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetPlanAssignmentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetPlanAssignmentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetPlanAssignmentRequest_FieldPathArrayItemValue
}

type GetPlanAssignmentRequest_FieldPathSelector int32

const (
	GetPlanAssignmentRequest_FieldPathSelectorName      GetPlanAssignmentRequest_FieldPathSelector = 0
	GetPlanAssignmentRequest_FieldPathSelectorFieldMask GetPlanAssignmentRequest_FieldPathSelector = 1
	GetPlanAssignmentRequest_FieldPathSelectorView      GetPlanAssignmentRequest_FieldPathSelector = 2
)

func (s GetPlanAssignmentRequest_FieldPathSelector) String() string {
	switch s {
	case GetPlanAssignmentRequest_FieldPathSelectorName:
		return "name"
	case GetPlanAssignmentRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetPlanAssignmentRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequest: %d", s))
	}
}

func BuildGetPlanAssignmentRequest_FieldPath(fp gotenobject.RawFieldPath) (GetPlanAssignmentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetPlanAssignmentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetPlanAssignmentRequest_FieldTerminalPath{selector: GetPlanAssignmentRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetPlanAssignmentRequest_FieldTerminalPath{selector: GetPlanAssignmentRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetPlanAssignmentRequest_FieldTerminalPath{selector: GetPlanAssignmentRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetPlanAssignmentRequest", fp)
}

func ParseGetPlanAssignmentRequest_FieldPath(rawField string) (GetPlanAssignmentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetPlanAssignmentRequest_FieldPath(fp)
}

func MustParseGetPlanAssignmentRequest_FieldPath(rawField string) GetPlanAssignmentRequest_FieldPath {
	fp, err := ParseGetPlanAssignmentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetPlanAssignmentRequest_FieldTerminalPath struct {
	selector GetPlanAssignmentRequest_FieldPathSelector
}

var _ GetPlanAssignmentRequest_FieldPath = (*GetPlanAssignmentRequest_FieldTerminalPath)(nil)

func (fp *GetPlanAssignmentRequest_FieldTerminalPath) Selector() GetPlanAssignmentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetPlanAssignmentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetPlanAssignmentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetPlanAssignmentRequest
func (fp *GetPlanAssignmentRequest_FieldTerminalPath) Get(source *GetPlanAssignmentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetPlanAssignmentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetPlanAssignmentRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetPlanAssignmentRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetPlanAssignmentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetPlanAssignmentRequest))
}

// GetSingle returns value pointed by specific field of from source GetPlanAssignmentRequest
func (fp *GetPlanAssignmentRequest_FieldTerminalPath) GetSingle(source *GetPlanAssignmentRequest) (interface{}, bool) {
	switch fp.selector {
	case GetPlanAssignmentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetPlanAssignmentRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetPlanAssignmentRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *GetPlanAssignmentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetPlanAssignmentRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetPlanAssignmentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetPlanAssignmentRequest_FieldPathSelectorName:
		return (*plan_assignment.Reference)(nil)
	case GetPlanAssignmentRequest_FieldPathSelectorFieldMask:
		return (*plan_assignment.PlanAssignment_FieldMask)(nil)
	case GetPlanAssignmentRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *GetPlanAssignmentRequest_FieldTerminalPath) ClearValue(item *GetPlanAssignmentRequest) {
	if item != nil {
		switch fp.selector {
		case GetPlanAssignmentRequest_FieldPathSelectorName:
			item.Name = nil
		case GetPlanAssignmentRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetPlanAssignmentRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequest: %d", fp.selector))
		}
	}
}

func (fp *GetPlanAssignmentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetPlanAssignmentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetPlanAssignmentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetPlanAssignmentRequest_FieldPathSelectorName ||
		fp.selector == GetPlanAssignmentRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetPlanAssignmentRequest_FieldPathSelectorView
}

func (fp *GetPlanAssignmentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetPlanAssignmentRequest_FieldTerminalPath) WithIValue(value interface{}) GetPlanAssignmentRequest_FieldPathValue {
	switch fp.selector {
	case GetPlanAssignmentRequest_FieldPathSelectorName:
		return &GetPlanAssignmentRequest_FieldTerminalPathValue{GetPlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.Reference)}
	case GetPlanAssignmentRequest_FieldPathSelectorFieldMask:
		return &GetPlanAssignmentRequest_FieldTerminalPathValue{GetPlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignment_FieldMask)}
	case GetPlanAssignmentRequest_FieldPathSelectorView:
		return &GetPlanAssignmentRequest_FieldTerminalPathValue{GetPlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *GetPlanAssignmentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetPlanAssignmentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetPlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov := &GetPlanAssignmentRequest_FieldTerminalPathArrayOfValues{GetPlanAssignmentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetPlanAssignmentRequest_FieldPathSelectorName:
		return &GetPlanAssignmentRequest_FieldTerminalPathArrayOfValues{GetPlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.Reference)}
	case GetPlanAssignmentRequest_FieldPathSelectorFieldMask:
		return &GetPlanAssignmentRequest_FieldTerminalPathArrayOfValues{GetPlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PlanAssignment_FieldMask)}
	case GetPlanAssignmentRequest_FieldPathSelectorView:
		return &GetPlanAssignmentRequest_FieldTerminalPathArrayOfValues{GetPlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetPlanAssignmentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetPlanAssignmentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetPlanAssignmentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *GetPlanAssignmentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetPlanAssignmentRequest_FieldPathValue allows storing values for GetPlanAssignmentRequest fields according to their type
type GetPlanAssignmentRequest_FieldPathValue interface {
	GetPlanAssignmentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetPlanAssignmentRequest)
	CompareWith(*GetPlanAssignmentRequest) (cmp int, comparable bool)
}

func ParseGetPlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) (GetPlanAssignmentRequest_FieldPathValue, error) {
	fp, err := ParseGetPlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPlanAssignmentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetPlanAssignmentRequest_FieldPathValue), nil
}

func MustParseGetPlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) GetPlanAssignmentRequest_FieldPathValue {
	fpv, err := ParseGetPlanAssignmentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetPlanAssignmentRequest_FieldTerminalPathValue struct {
	GetPlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ GetPlanAssignmentRequest_FieldPathValue = (*GetPlanAssignmentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetPlanAssignmentRequest' as interface{}
func (fpv *GetPlanAssignmentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetPlanAssignmentRequest_FieldTerminalPathValue) AsNameValue() (*plan_assignment.Reference, bool) {
	res, ok := fpv.value.(*plan_assignment.Reference)
	return res, ok
}
func (fpv *GetPlanAssignmentRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}
func (fpv *GetPlanAssignmentRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetPlanAssignmentRequest
func (fpv *GetPlanAssignmentRequest_FieldTerminalPathValue) SetTo(target **GetPlanAssignmentRequest) {
	if *target == nil {
		*target = new(GetPlanAssignmentRequest)
	}
	switch fpv.selector {
	case GetPlanAssignmentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*plan_assignment.Reference)
	case GetPlanAssignmentRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	case GetPlanAssignmentRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *GetPlanAssignmentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetPlanAssignmentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetPlanAssignmentRequest_FieldTerminalPathValue' with the value under path in 'GetPlanAssignmentRequest'.
func (fpv *GetPlanAssignmentRequest_FieldTerminalPathValue) CompareWith(source *GetPlanAssignmentRequest) (int, bool) {
	switch fpv.selector {
	case GetPlanAssignmentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*plan_assignment.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetPlanAssignmentRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetPlanAssignmentRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *GetPlanAssignmentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetPlanAssignmentRequest))
}

// GetPlanAssignmentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetPlanAssignmentRequest according to their type
// Present only for array (repeated) types.
type GetPlanAssignmentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetPlanAssignmentRequest_FieldPath
	ContainsValue(*GetPlanAssignmentRequest) bool
}

// ParseGetPlanAssignmentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetPlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetPlanAssignmentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetPlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPlanAssignmentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetPlanAssignmentRequest_FieldPathArrayItemValue), nil
}

func MustParseGetPlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetPlanAssignmentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetPlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetPlanAssignmentRequest_FieldTerminalPathArrayItemValue struct {
	GetPlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ GetPlanAssignmentRequest_FieldPathArrayItemValue = (*GetPlanAssignmentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetPlanAssignmentRequest as interface{}
func (fpaiv *GetPlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetPlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetPlanAssignmentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetPlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetPlanAssignmentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetPlanAssignmentRequest'
func (fpaiv *GetPlanAssignmentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetPlanAssignmentRequest) bool {
	slice := fpaiv.GetPlanAssignmentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetPlanAssignmentRequest_FieldPathArrayOfValues allows storing slice of values for GetPlanAssignmentRequest fields according to their type
type GetPlanAssignmentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetPlanAssignmentRequest_FieldPath
}

func ParseGetPlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetPlanAssignmentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetPlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPlanAssignmentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetPlanAssignmentRequest_FieldPathArrayOfValues), nil
}

func MustParseGetPlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetPlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetPlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetPlanAssignmentRequest_FieldTerminalPathArrayOfValues struct {
	GetPlanAssignmentRequest_FieldTerminalPath
	values interface{}
}

var _ GetPlanAssignmentRequest_FieldPathArrayOfValues = (*GetPlanAssignmentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetPlanAssignmentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetPlanAssignmentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*plan_assignment.Reference) {
			values = append(values, v)
		}
	case GetPlanAssignmentRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask) {
			values = append(values, v)
		}
	case GetPlanAssignmentRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetPlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*plan_assignment.Reference, bool) {
	res, ok := fpaov.values.([]*plan_assignment.Reference)
	return res, ok
}
func (fpaov *GetPlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}
func (fpaov *GetPlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPlanAssignmentsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPlanAssignmentsRequest_FieldPathSelector
	Get(source *BatchGetPlanAssignmentsRequest) []interface{}
	GetSingle(source *BatchGetPlanAssignmentsRequest) (interface{}, bool)
	ClearValue(item *BatchGetPlanAssignmentsRequest)

	// Those methods build corresponding BatchGetPlanAssignmentsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPlanAssignmentsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPlanAssignmentsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPlanAssignmentsRequest_FieldPathArrayItemValue
}

type BatchGetPlanAssignmentsRequest_FieldPathSelector int32

const (
	BatchGetPlanAssignmentsRequest_FieldPathSelectorNames     BatchGetPlanAssignmentsRequest_FieldPathSelector = 0
	BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask BatchGetPlanAssignmentsRequest_FieldPathSelector = 1
	BatchGetPlanAssignmentsRequest_FieldPathSelectorView      BatchGetPlanAssignmentsRequest_FieldPathSelector = 2
)

func (s BatchGetPlanAssignmentsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsRequest: %d", s))
	}
}

func BuildBatchGetPlanAssignmentsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPlanAssignmentsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPlanAssignmentsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetPlanAssignmentsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetPlanAssignmentsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetPlanAssignmentsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPlanAssignmentsRequest", fp)
}

func ParseBatchGetPlanAssignmentsRequest_FieldPath(rawField string) (BatchGetPlanAssignmentsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPlanAssignmentsRequest_FieldPath(fp)
}

func MustParseBatchGetPlanAssignmentsRequest_FieldPath(rawField string) BatchGetPlanAssignmentsRequest_FieldPath {
	fp, err := ParseBatchGetPlanAssignmentsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPlanAssignmentsRequest_FieldTerminalPath struct {
	selector BatchGetPlanAssignmentsRequest_FieldPathSelector
}

var _ BatchGetPlanAssignmentsRequest_FieldPath = (*BatchGetPlanAssignmentsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) Selector() BatchGetPlanAssignmentsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPlanAssignmentsRequest
func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) Get(source *BatchGetPlanAssignmentsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPlanAssignmentsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetPlanAssignmentsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPlanAssignmentsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetPlanAssignmentsRequest
func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) GetSingle(source *BatchGetPlanAssignmentsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPlanAssignmentsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorNames:
		return ([]*plan_assignment.Reference)(nil)
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return (*plan_assignment.PlanAssignment_FieldMask)(nil)
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) ClearValue(item *BatchGetPlanAssignmentsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetPlanAssignmentsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetPlanAssignmentsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPlanAssignmentsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPlanAssignmentsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetPlanAssignmentsRequest_FieldPathSelectorView
}

func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetPlanAssignmentsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorNames:
		return &BatchGetPlanAssignmentsRequest_FieldTerminalPathValue{BatchGetPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.([]*plan_assignment.Reference)}
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return &BatchGetPlanAssignmentsRequest_FieldTerminalPathValue{BatchGetPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignment_FieldMask)}
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorView:
		return &BatchGetPlanAssignmentsRequest_FieldTerminalPathValue{BatchGetPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPlanAssignmentsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorNames:
		return &BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([][]*plan_assignment.Reference)}
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return &BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PlanAssignment_FieldMask)}
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorView:
		return &BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPlanAssignmentsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorNames:
		return &BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayItemValue{BatchGetPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetPlanAssignmentsRequest_FieldPathValue allows storing values for BatchGetPlanAssignmentsRequest fields according to their type
type BatchGetPlanAssignmentsRequest_FieldPathValue interface {
	BatchGetPlanAssignmentsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPlanAssignmentsRequest)
	CompareWith(*BatchGetPlanAssignmentsRequest) (cmp int, comparable bool)
}

func ParseBatchGetPlanAssignmentsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetPlanAssignmentsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetPlanAssignmentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlanAssignmentsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPlanAssignmentsRequest_FieldPathValue), nil
}

func MustParseBatchGetPlanAssignmentsRequest_FieldPathValue(pathStr, valueStr string) BatchGetPlanAssignmentsRequest_FieldPathValue {
	fpv, err := ParseBatchGetPlanAssignmentsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPlanAssignmentsRequest_FieldTerminalPathValue struct {
	BatchGetPlanAssignmentsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPlanAssignmentsRequest_FieldPathValue = (*BatchGetPlanAssignmentsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPlanAssignmentsRequest' as interface{}
func (fpv *BatchGetPlanAssignmentsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPlanAssignmentsRequest_FieldTerminalPathValue) AsNamesValue() ([]*plan_assignment.Reference, bool) {
	res, ok := fpv.value.([]*plan_assignment.Reference)
	return res, ok
}
func (fpv *BatchGetPlanAssignmentsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}
func (fpv *BatchGetPlanAssignmentsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPlanAssignmentsRequest
func (fpv *BatchGetPlanAssignmentsRequest_FieldTerminalPathValue) SetTo(target **BatchGetPlanAssignmentsRequest) {
	if *target == nil {
		*target = new(BatchGetPlanAssignmentsRequest)
	}
	switch fpv.selector {
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*plan_assignment.Reference)
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPlanAssignmentsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPlanAssignmentsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPlanAssignmentsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetPlanAssignmentsRequest'.
func (fpv *BatchGetPlanAssignmentsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetPlanAssignmentsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPlanAssignmentsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPlanAssignmentsRequest))
}

// BatchGetPlanAssignmentsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPlanAssignmentsRequest according to their type
// Present only for array (repeated) types.
type BatchGetPlanAssignmentsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPlanAssignmentsRequest_FieldPath
	ContainsValue(*BatchGetPlanAssignmentsRequest) bool
}

// ParseBatchGetPlanAssignmentsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPlanAssignmentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPlanAssignmentsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPlanAssignmentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlanAssignmentsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPlanAssignmentsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPlanAssignmentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPlanAssignmentsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPlanAssignmentsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetPlanAssignmentsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPlanAssignmentsRequest_FieldPathArrayItemValue = (*BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPlanAssignmentsRequest as interface{}
func (fpaiv *BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*plan_assignment.Reference, bool) {
	res, ok := fpaiv.value.(*plan_assignment.Reference)
	return res, ok
}

func (fpaiv *BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPlanAssignmentsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPlanAssignmentsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPlanAssignmentsRequest'
func (fpaiv *BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPlanAssignmentsRequest) bool {
	slice := fpaiv.BatchGetPlanAssignmentsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetPlanAssignmentsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetPlanAssignmentsRequest fields according to their type
type BatchGetPlanAssignmentsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPlanAssignmentsRequest_FieldPath
}

func ParseBatchGetPlanAssignmentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPlanAssignmentsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPlanAssignmentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlanAssignmentsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPlanAssignmentsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPlanAssignmentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPlanAssignmentsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPlanAssignmentsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetPlanAssignmentsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetPlanAssignmentsRequest_FieldPathArrayOfValues = (*BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*plan_assignment.Reference) {
			values = append(values, v)
		}
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask) {
			values = append(values, v)
		}
	case BatchGetPlanAssignmentsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*plan_assignment.Reference, bool) {
	res, ok := fpaov.values.([][]*plan_assignment.Reference)
	return res, ok
}
func (fpaov *BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}
func (fpaov *BatchGetPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPlanAssignmentsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPlanAssignmentsResponse_FieldPathSelector
	Get(source *BatchGetPlanAssignmentsResponse) []interface{}
	GetSingle(source *BatchGetPlanAssignmentsResponse) (interface{}, bool)
	ClearValue(item *BatchGetPlanAssignmentsResponse)

	// Those methods build corresponding BatchGetPlanAssignmentsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPlanAssignmentsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPlanAssignmentsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPlanAssignmentsResponse_FieldPathArrayItemValue
}

type BatchGetPlanAssignmentsResponse_FieldPathSelector int32

const (
	BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments BatchGetPlanAssignmentsResponse_FieldPathSelector = 0
	BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing         BatchGetPlanAssignmentsResponse_FieldPathSelector = 1
)

func (s BatchGetPlanAssignmentsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return "plan_assignments"
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", s))
	}
}

func BuildBatchGetPlanAssignmentsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPlanAssignmentsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPlanAssignmentsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plan_assignments", "planAssignments", "plan-assignments":
			return &BatchGetPlanAssignmentsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments}, nil
		case "missing":
			return &BatchGetPlanAssignmentsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "plan_assignments", "planAssignments", "plan-assignments":
			if subpath, err := plan_assignment.BuildPlanAssignment_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetPlanAssignmentsResponse_FieldSubPath{selector: BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPlanAssignmentsResponse", fp)
}

func ParseBatchGetPlanAssignmentsResponse_FieldPath(rawField string) (BatchGetPlanAssignmentsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPlanAssignmentsResponse_FieldPath(fp)
}

func MustParseBatchGetPlanAssignmentsResponse_FieldPath(rawField string) BatchGetPlanAssignmentsResponse_FieldPath {
	fp, err := ParseBatchGetPlanAssignmentsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPlanAssignmentsResponse_FieldTerminalPath struct {
	selector BatchGetPlanAssignmentsResponse_FieldPathSelector
}

var _ BatchGetPlanAssignmentsResponse_FieldPath = (*BatchGetPlanAssignmentsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) Selector() BatchGetPlanAssignmentsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPlanAssignmentsResponse
func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) Get(source *BatchGetPlanAssignmentsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
			for _, value := range source.GetPlanAssignments() {
				values = append(values, value)
			}
		case BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPlanAssignmentsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetPlanAssignmentsResponse
func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) GetSingle(source *BatchGetPlanAssignmentsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		res := source.GetPlanAssignments()
		return res, res != nil
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPlanAssignmentsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return ([]*plan_assignment.PlanAssignment)(nil)
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing:
		return ([]*plan_assignment.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) ClearValue(item *BatchGetPlanAssignmentsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
			item.PlanAssignments = nil
		case BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPlanAssignmentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetPlanAssignmentsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return &BatchGetPlanAssignmentsResponse_FieldTerminalPathValue{BatchGetPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.([]*plan_assignment.PlanAssignment)}
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing:
		return &BatchGetPlanAssignmentsResponse_FieldTerminalPathValue{BatchGetPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.([]*plan_assignment.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPlanAssignmentsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return &BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([][]*plan_assignment.PlanAssignment)}
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing:
		return &BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{BatchGetPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([][]*plan_assignment.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPlanAssignmentsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return &BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayItemValue{BatchGetPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignment)}
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing:
		return &BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayItemValue{BatchGetPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPlanAssignmentsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetPlanAssignmentsResponse_FieldSubPath struct {
	selector BatchGetPlanAssignmentsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetPlanAssignmentsResponse_FieldPath = (*BatchGetPlanAssignmentsResponse_FieldSubPath)(nil)

func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) Selector() BatchGetPlanAssignmentsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) AsPlanAssignmentsSubPath() (plan_assignment.PlanAssignment_FieldPath, bool) {
	res, ok := fps.subPath.(plan_assignment.PlanAssignment_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetPlanAssignmentsResponse
func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) Get(source *BatchGetPlanAssignmentsResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		for _, item := range source.GetPlanAssignments() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetPlanAssignmentsResponse))
}

// GetSingle returns value of selected field from source BatchGetPlanAssignmentsResponse
func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) GetSingle(source *BatchGetPlanAssignmentsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		if len(source.GetPlanAssignments()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPlanAssignments()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetPlanAssignmentsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) ClearValue(item *BatchGetPlanAssignmentsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
			for _, subItem := range item.PlanAssignments {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetPlanAssignmentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetPlanAssignmentsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetPlanAssignmentsResponse_FieldPathValue {
	return &BatchGetPlanAssignmentsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetPlanAssignmentsResponse_FieldPathArrayOfValues {
	return &BatchGetPlanAssignmentsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetPlanAssignmentsResponse_FieldPathArrayItemValue {
	return &BatchGetPlanAssignmentsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetPlanAssignmentsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetPlanAssignmentsResponse_FieldPathValue allows storing values for BatchGetPlanAssignmentsResponse fields according to their type
type BatchGetPlanAssignmentsResponse_FieldPathValue interface {
	BatchGetPlanAssignmentsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPlanAssignmentsResponse)
	CompareWith(*BatchGetPlanAssignmentsResponse) (cmp int, comparable bool)
}

func ParseBatchGetPlanAssignmentsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetPlanAssignmentsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetPlanAssignmentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlanAssignmentsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPlanAssignmentsResponse_FieldPathValue), nil
}

func MustParseBatchGetPlanAssignmentsResponse_FieldPathValue(pathStr, valueStr string) BatchGetPlanAssignmentsResponse_FieldPathValue {
	fpv, err := ParseBatchGetPlanAssignmentsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPlanAssignmentsResponse_FieldTerminalPathValue struct {
	BatchGetPlanAssignmentsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPlanAssignmentsResponse_FieldPathValue = (*BatchGetPlanAssignmentsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPlanAssignmentsResponse' as interface{}
func (fpv *BatchGetPlanAssignmentsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPlanAssignmentsResponse_FieldTerminalPathValue) AsPlanAssignmentsValue() ([]*plan_assignment.PlanAssignment, bool) {
	res, ok := fpv.value.([]*plan_assignment.PlanAssignment)
	return res, ok
}
func (fpv *BatchGetPlanAssignmentsResponse_FieldTerminalPathValue) AsMissingValue() ([]*plan_assignment.Reference, bool) {
	res, ok := fpv.value.([]*plan_assignment.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPlanAssignmentsResponse
func (fpv *BatchGetPlanAssignmentsResponse_FieldTerminalPathValue) SetTo(target **BatchGetPlanAssignmentsResponse) {
	if *target == nil {
		*target = new(BatchGetPlanAssignmentsResponse)
	}
	switch fpv.selector {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		(*target).PlanAssignments = fpv.value.([]*plan_assignment.PlanAssignment)
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*plan_assignment.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPlanAssignmentsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPlanAssignmentsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPlanAssignmentsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetPlanAssignmentsResponse'.
func (fpv *BatchGetPlanAssignmentsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetPlanAssignmentsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return 0, false
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPlanAssignmentsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPlanAssignmentsResponse))
}

type BatchGetPlanAssignmentsResponse_FieldSubPathValue struct {
	BatchGetPlanAssignmentsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetPlanAssignmentsResponse_FieldPathValue = (*BatchGetPlanAssignmentsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetPlanAssignmentsResponse_FieldSubPathValue) AsPlanAssignmentsPathValue() (plan_assignment.PlanAssignment_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetPlanAssignmentsResponse_FieldSubPathValue) SetTo(target **BatchGetPlanAssignmentsResponse) {
	if *target == nil {
		*target = new(BatchGetPlanAssignmentsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPlanAssignmentsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPlanAssignmentsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetPlanAssignmentsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetPlanAssignmentsResponse_FieldSubPathValue) CompareWith(source *BatchGetPlanAssignmentsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPlanAssignmentsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetPlanAssignmentsResponse))
}

// BatchGetPlanAssignmentsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPlanAssignmentsResponse according to their type
// Present only for array (repeated) types.
type BatchGetPlanAssignmentsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPlanAssignmentsResponse_FieldPath
	ContainsValue(*BatchGetPlanAssignmentsResponse) bool
}

// ParseBatchGetPlanAssignmentsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPlanAssignmentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPlanAssignmentsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPlanAssignmentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlanAssignmentsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPlanAssignmentsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPlanAssignmentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPlanAssignmentsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPlanAssignmentsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetPlanAssignmentsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPlanAssignmentsResponse_FieldPathArrayItemValue = (*BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPlanAssignmentsResponse as interface{}
func (fpaiv *BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) AsPlanAssignmentsItemValue() (*plan_assignment.PlanAssignment, bool) {
	res, ok := fpaiv.value.(*plan_assignment.PlanAssignment)
	return res, ok
}
func (fpaiv *BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*plan_assignment.Reference, bool) {
	res, ok := fpaiv.value.(*plan_assignment.Reference)
	return res, ok
}

func (fpaiv *BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPlanAssignmentsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPlanAssignmentsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPlanAssignmentsResponse'
func (fpaiv *BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPlanAssignmentsResponse) bool {
	slice := fpaiv.BatchGetPlanAssignmentsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetPlanAssignmentsResponse_FieldSubPathArrayItemValue struct {
	BatchGetPlanAssignmentsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetPlanAssignmentsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetPlanAssignmentsResponse_FieldSubPathArrayItemValue) AsPlanAssignmentsPathItemValue() (plan_assignment.PlanAssignment_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan_assignment.PlanAssignment_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPlanAssignmentsResponse'
func (fpaivs *BatchGetPlanAssignmentsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetPlanAssignmentsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPlanAssignmentsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetPlanAssignmentsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetPlanAssignmentsResponse fields according to their type
type BatchGetPlanAssignmentsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPlanAssignmentsResponse_FieldPath
}

func ParseBatchGetPlanAssignmentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPlanAssignmentsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPlanAssignmentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPlanAssignmentsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPlanAssignmentsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPlanAssignmentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPlanAssignmentsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPlanAssignmentsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetPlanAssignmentsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetPlanAssignmentsResponse_FieldPathArrayOfValues = (*BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		for _, v := range fpaov.values.([][]*plan_assignment.PlanAssignment) {
			values = append(values, v)
		}
	case BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*plan_assignment.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsPlanAssignmentsArrayOfValues() ([][]*plan_assignment.PlanAssignment, bool) {
	res, ok := fpaov.values.([][]*plan_assignment.PlanAssignment)
	return res, ok
}
func (fpaov *BatchGetPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*plan_assignment.Reference, bool) {
	res, ok := fpaov.values.([][]*plan_assignment.Reference)
	return res, ok
}

type BatchGetPlanAssignmentsResponse_FieldSubPathArrayOfValues struct {
	BatchGetPlanAssignmentsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetPlanAssignmentsResponse_FieldPathArrayOfValues = (*BatchGetPlanAssignmentsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetPlanAssignmentsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetPlanAssignmentsResponse_FieldSubPathArrayOfValues) AsPlanAssignmentsPathArrayOfValues() (plan_assignment.PlanAssignment_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan_assignment.PlanAssignment_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPlanAssignmentsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPlanAssignmentsRequest_FieldPathSelector
	Get(source *ListPlanAssignmentsRequest) []interface{}
	GetSingle(source *ListPlanAssignmentsRequest) (interface{}, bool)
	ClearValue(item *ListPlanAssignmentsRequest)

	// Those methods build corresponding ListPlanAssignmentsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPlanAssignmentsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPlanAssignmentsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPlanAssignmentsRequest_FieldPathArrayItemValue
}

type ListPlanAssignmentsRequest_FieldPathSelector int32

const (
	ListPlanAssignmentsRequest_FieldPathSelectorParent            ListPlanAssignmentsRequest_FieldPathSelector = 0
	ListPlanAssignmentsRequest_FieldPathSelectorPageSize          ListPlanAssignmentsRequest_FieldPathSelector = 1
	ListPlanAssignmentsRequest_FieldPathSelectorPageToken         ListPlanAssignmentsRequest_FieldPathSelector = 2
	ListPlanAssignmentsRequest_FieldPathSelectorOrderBy           ListPlanAssignmentsRequest_FieldPathSelector = 3
	ListPlanAssignmentsRequest_FieldPathSelectorFilter            ListPlanAssignmentsRequest_FieldPathSelector = 4
	ListPlanAssignmentsRequest_FieldPathSelectorFieldMask         ListPlanAssignmentsRequest_FieldPathSelector = 5
	ListPlanAssignmentsRequest_FieldPathSelectorView              ListPlanAssignmentsRequest_FieldPathSelector = 6
	ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo ListPlanAssignmentsRequest_FieldPathSelector = 7
)

func (s ListPlanAssignmentsRequest_FieldPathSelector) String() string {
	switch s {
	case ListPlanAssignmentsRequest_FieldPathSelectorParent:
		return "parent"
	case ListPlanAssignmentsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListPlanAssignmentsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListPlanAssignmentsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListPlanAssignmentsRequest_FieldPathSelectorView:
		return "view"
	case ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsRequest: %d", s))
	}
}

func BuildListPlanAssignmentsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListPlanAssignmentsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPlanAssignmentsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPlanAssignmentsRequest", fp)
}

func ParseListPlanAssignmentsRequest_FieldPath(rawField string) (ListPlanAssignmentsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPlanAssignmentsRequest_FieldPath(fp)
}

func MustParseListPlanAssignmentsRequest_FieldPath(rawField string) ListPlanAssignmentsRequest_FieldPath {
	fp, err := ParseListPlanAssignmentsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPlanAssignmentsRequest_FieldTerminalPath struct {
	selector ListPlanAssignmentsRequest_FieldPathSelector
}

var _ ListPlanAssignmentsRequest_FieldPath = (*ListPlanAssignmentsRequest_FieldTerminalPath)(nil)

func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) Selector() ListPlanAssignmentsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPlanAssignmentsRequest
func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) Get(source *ListPlanAssignmentsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPlanAssignmentsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListPlanAssignmentsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListPlanAssignmentsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListPlanAssignmentsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListPlanAssignmentsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListPlanAssignmentsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListPlanAssignmentsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPlanAssignmentsRequest))
}

// GetSingle returns value pointed by specific field of from source ListPlanAssignmentsRequest
func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) GetSingle(source *ListPlanAssignmentsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListPlanAssignmentsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListPlanAssignmentsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListPlanAssignmentsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListPlanAssignmentsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListPlanAssignmentsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsRequest: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPlanAssignmentsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPlanAssignmentsRequest_FieldPathSelectorParent:
		return (*plan_assignment.ParentName)(nil)
	case ListPlanAssignmentsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListPlanAssignmentsRequest_FieldPathSelectorPageToken:
		return (*plan_assignment.PagerCursor)(nil)
	case ListPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		return (*plan_assignment.OrderBy)(nil)
	case ListPlanAssignmentsRequest_FieldPathSelectorFilter:
		return (*plan_assignment.Filter)(nil)
	case ListPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return (*plan_assignment.PlanAssignment_FieldMask)(nil)
	case ListPlanAssignmentsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsRequest: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) ClearValue(item *ListPlanAssignmentsRequest) {
	if item != nil {
		switch fp.selector {
		case ListPlanAssignmentsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListPlanAssignmentsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListPlanAssignmentsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListPlanAssignmentsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListPlanAssignmentsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListPlanAssignmentsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListPlanAssignmentsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPlanAssignmentsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPlanAssignmentsRequest_FieldPathSelectorParent ||
		fp.selector == ListPlanAssignmentsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListPlanAssignmentsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListPlanAssignmentsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListPlanAssignmentsRequest_FieldPathSelectorFilter ||
		fp.selector == ListPlanAssignmentsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListPlanAssignmentsRequest_FieldPathSelectorView ||
		fp.selector == ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) WithIValue(value interface{}) ListPlanAssignmentsRequest_FieldPathValue {
	switch fp.selector {
	case ListPlanAssignmentsRequest_FieldPathSelectorParent:
		return &ListPlanAssignmentsRequest_FieldTerminalPathValue{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.ParentName)}
	case ListPlanAssignmentsRequest_FieldPathSelectorPageSize:
		return &ListPlanAssignmentsRequest_FieldTerminalPathValue{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListPlanAssignmentsRequest_FieldPathSelectorPageToken:
		return &ListPlanAssignmentsRequest_FieldTerminalPathValue{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.PagerCursor)}
	case ListPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		return &ListPlanAssignmentsRequest_FieldTerminalPathValue{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.OrderBy)}
	case ListPlanAssignmentsRequest_FieldPathSelectorFilter:
		return &ListPlanAssignmentsRequest_FieldTerminalPathValue{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.Filter)}
	case ListPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return &ListPlanAssignmentsRequest_FieldTerminalPathValue{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignment_FieldMask)}
	case ListPlanAssignmentsRequest_FieldPathSelectorView:
		return &ListPlanAssignmentsRequest_FieldTerminalPathValue{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListPlanAssignmentsRequest_FieldTerminalPathValue{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsRequest: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPlanAssignmentsRequest_FieldPathArrayOfValues {
	fpaov := &ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPlanAssignmentsRequest_FieldPathSelectorParent:
		return &ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.ParentName)}
	case ListPlanAssignmentsRequest_FieldPathSelectorPageSize:
		return &ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListPlanAssignmentsRequest_FieldPathSelectorPageToken:
		return &ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PagerCursor)}
	case ListPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		return &ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.OrderBy)}
	case ListPlanAssignmentsRequest_FieldPathSelectorFilter:
		return &ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.Filter)}
	case ListPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return &ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PlanAssignment_FieldMask)}
	case ListPlanAssignmentsRequest_FieldPathSelectorView:
		return &ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{ListPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPlanAssignmentsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsRequest: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListPlanAssignmentsRequest_FieldPathValue allows storing values for ListPlanAssignmentsRequest fields according to their type
type ListPlanAssignmentsRequest_FieldPathValue interface {
	ListPlanAssignmentsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPlanAssignmentsRequest)
	CompareWith(*ListPlanAssignmentsRequest) (cmp int, comparable bool)
}

func ParseListPlanAssignmentsRequest_FieldPathValue(pathStr, valueStr string) (ListPlanAssignmentsRequest_FieldPathValue, error) {
	fp, err := ParseListPlanAssignmentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlanAssignmentsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPlanAssignmentsRequest_FieldPathValue), nil
}

func MustParseListPlanAssignmentsRequest_FieldPathValue(pathStr, valueStr string) ListPlanAssignmentsRequest_FieldPathValue {
	fpv, err := ParseListPlanAssignmentsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPlanAssignmentsRequest_FieldTerminalPathValue struct {
	ListPlanAssignmentsRequest_FieldTerminalPath
	value interface{}
}

var _ ListPlanAssignmentsRequest_FieldPathValue = (*ListPlanAssignmentsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPlanAssignmentsRequest' as interface{}
func (fpv *ListPlanAssignmentsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPlanAssignmentsRequest_FieldTerminalPathValue) AsParentValue() (*plan_assignment.ParentName, bool) {
	res, ok := fpv.value.(*plan_assignment.ParentName)
	return res, ok
}
func (fpv *ListPlanAssignmentsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListPlanAssignmentsRequest_FieldTerminalPathValue) AsPageTokenValue() (*plan_assignment.PagerCursor, bool) {
	res, ok := fpv.value.(*plan_assignment.PagerCursor)
	return res, ok
}
func (fpv *ListPlanAssignmentsRequest_FieldTerminalPathValue) AsOrderByValue() (*plan_assignment.OrderBy, bool) {
	res, ok := fpv.value.(*plan_assignment.OrderBy)
	return res, ok
}
func (fpv *ListPlanAssignmentsRequest_FieldTerminalPathValue) AsFilterValue() (*plan_assignment.Filter, bool) {
	res, ok := fpv.value.(*plan_assignment.Filter)
	return res, ok
}
func (fpv *ListPlanAssignmentsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}
func (fpv *ListPlanAssignmentsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListPlanAssignmentsRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListPlanAssignmentsRequest
func (fpv *ListPlanAssignmentsRequest_FieldTerminalPathValue) SetTo(target **ListPlanAssignmentsRequest) {
	if *target == nil {
		*target = new(ListPlanAssignmentsRequest)
	}
	switch fpv.selector {
	case ListPlanAssignmentsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*plan_assignment.ParentName)
	case ListPlanAssignmentsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListPlanAssignmentsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*plan_assignment.PagerCursor)
	case ListPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*plan_assignment.OrderBy)
	case ListPlanAssignmentsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*plan_assignment.Filter)
	case ListPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	case ListPlanAssignmentsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsRequest: %d", fpv.selector))
	}
}

func (fpv *ListPlanAssignmentsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPlanAssignmentsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPlanAssignmentsRequest_FieldTerminalPathValue' with the value under path in 'ListPlanAssignmentsRequest'.
func (fpv *ListPlanAssignmentsRequest_FieldTerminalPathValue) CompareWith(source *ListPlanAssignmentsRequest) (int, bool) {
	switch fpv.selector {
	case ListPlanAssignmentsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*plan_assignment.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListPlanAssignmentsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPlanAssignmentsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListPlanAssignmentsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListPlanAssignmentsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsRequest: %d", fpv.selector))
	}
}

func (fpv *ListPlanAssignmentsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPlanAssignmentsRequest))
}

// ListPlanAssignmentsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPlanAssignmentsRequest according to their type
// Present only for array (repeated) types.
type ListPlanAssignmentsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPlanAssignmentsRequest_FieldPath
	ContainsValue(*ListPlanAssignmentsRequest) bool
}

// ParseListPlanAssignmentsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPlanAssignmentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListPlanAssignmentsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListPlanAssignmentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlanAssignmentsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPlanAssignmentsRequest_FieldPathArrayItemValue), nil
}

func MustParseListPlanAssignmentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListPlanAssignmentsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListPlanAssignmentsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPlanAssignmentsRequest_FieldTerminalPathArrayItemValue struct {
	ListPlanAssignmentsRequest_FieldTerminalPath
	value interface{}
}

var _ ListPlanAssignmentsRequest_FieldPathArrayItemValue = (*ListPlanAssignmentsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPlanAssignmentsRequest as interface{}
func (fpaiv *ListPlanAssignmentsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListPlanAssignmentsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListPlanAssignmentsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPlanAssignmentsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPlanAssignmentsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPlanAssignmentsRequest'
func (fpaiv *ListPlanAssignmentsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPlanAssignmentsRequest) bool {
	slice := fpaiv.ListPlanAssignmentsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListPlanAssignmentsRequest_FieldPathArrayOfValues allows storing slice of values for ListPlanAssignmentsRequest fields according to their type
type ListPlanAssignmentsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPlanAssignmentsRequest_FieldPath
}

func ParseListPlanAssignmentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPlanAssignmentsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListPlanAssignmentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlanAssignmentsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPlanAssignmentsRequest_FieldPathArrayOfValues), nil
}

func MustParseListPlanAssignmentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListPlanAssignmentsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListPlanAssignmentsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues struct {
	ListPlanAssignmentsRequest_FieldTerminalPath
	values interface{}
}

var _ ListPlanAssignmentsRequest_FieldPathArrayOfValues = (*ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPlanAssignmentsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*plan_assignment.ParentName) {
			values = append(values, v)
		}
	case ListPlanAssignmentsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListPlanAssignmentsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*plan_assignment.PagerCursor) {
			values = append(values, v)
		}
	case ListPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*plan_assignment.OrderBy) {
			values = append(values, v)
		}
	case ListPlanAssignmentsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*plan_assignment.Filter) {
			values = append(values, v)
		}
	case ListPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask) {
			values = append(values, v)
		}
	case ListPlanAssignmentsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*plan_assignment.ParentName, bool) {
	res, ok := fpaov.values.([]*plan_assignment.ParentName)
	return res, ok
}
func (fpaov *ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*plan_assignment.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PagerCursor)
	return res, ok
}
func (fpaov *ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*plan_assignment.OrderBy, bool) {
	res, ok := fpaov.values.([]*plan_assignment.OrderBy)
	return res, ok
}
func (fpaov *ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*plan_assignment.Filter, bool) {
	res, ok := fpaov.values.([]*plan_assignment.Filter)
	return res, ok
}
func (fpaov *ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}
func (fpaov *ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPlanAssignmentsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPlanAssignmentsResponse_FieldPathSelector
	Get(source *ListPlanAssignmentsResponse) []interface{}
	GetSingle(source *ListPlanAssignmentsResponse) (interface{}, bool)
	ClearValue(item *ListPlanAssignmentsResponse)

	// Those methods build corresponding ListPlanAssignmentsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPlanAssignmentsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPlanAssignmentsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPlanAssignmentsResponse_FieldPathArrayItemValue
}

type ListPlanAssignmentsResponse_FieldPathSelector int32

const (
	ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments   ListPlanAssignmentsResponse_FieldPathSelector = 0
	ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken     ListPlanAssignmentsResponse_FieldPathSelector = 1
	ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken     ListPlanAssignmentsResponse_FieldPathSelector = 2
	ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset     ListPlanAssignmentsResponse_FieldPathSelector = 3
	ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount ListPlanAssignmentsResponse_FieldPathSelector = 4
)

func (s ListPlanAssignmentsResponse_FieldPathSelector) String() string {
	switch s {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return "plan_assignments"
	case ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", s))
	}
}

func BuildListPlanAssignmentsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListPlanAssignmentsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPlanAssignmentsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plan_assignments", "planAssignments", "plan-assignments":
			return &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "plan_assignments", "planAssignments", "plan-assignments":
			if subpath, err := plan_assignment.BuildPlanAssignment_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListPlanAssignmentsResponse_FieldSubPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPlanAssignmentsResponse", fp)
}

func ParseListPlanAssignmentsResponse_FieldPath(rawField string) (ListPlanAssignmentsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPlanAssignmentsResponse_FieldPath(fp)
}

func MustParseListPlanAssignmentsResponse_FieldPath(rawField string) ListPlanAssignmentsResponse_FieldPath {
	fp, err := ParseListPlanAssignmentsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPlanAssignmentsResponse_FieldTerminalPath struct {
	selector ListPlanAssignmentsResponse_FieldPathSelector
}

var _ ListPlanAssignmentsResponse_FieldPath = (*ListPlanAssignmentsResponse_FieldTerminalPath)(nil)

func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) Selector() ListPlanAssignmentsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPlanAssignmentsResponse
func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) Get(source *ListPlanAssignmentsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
			for _, value := range source.GetPlanAssignments() {
				values = append(values, value)
			}
		case ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPlanAssignmentsResponse))
}

// GetSingle returns value pointed by specific field of from source ListPlanAssignmentsResponse
func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) GetSingle(source *ListPlanAssignmentsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		res := source.GetPlanAssignments()
		return res, res != nil
	case ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPlanAssignmentsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return ([]*plan_assignment.PlanAssignment)(nil)
	case ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken:
		return (*plan_assignment.PagerCursor)(nil)
	case ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken:
		return (*plan_assignment.PagerCursor)(nil)
	case ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) ClearValue(item *ListPlanAssignmentsResponse) {
	if item != nil {
		switch fp.selector {
		case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
			item.PlanAssignments = nil
		case ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPlanAssignmentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) WithIValue(value interface{}) ListPlanAssignmentsResponse_FieldPathValue {
	switch fp.selector {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return &ListPlanAssignmentsResponse_FieldTerminalPathValue{ListPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.([]*plan_assignment.PlanAssignment)}
	case ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken:
		return &ListPlanAssignmentsResponse_FieldTerminalPathValue{ListPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment.PagerCursor)}
	case ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken:
		return &ListPlanAssignmentsResponse_FieldTerminalPathValue{ListPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment.PagerCursor)}
	case ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset:
		return &ListPlanAssignmentsResponse_FieldTerminalPathValue{ListPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount:
		return &ListPlanAssignmentsResponse_FieldTerminalPathValue{ListPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPlanAssignmentsResponse_FieldPathArrayOfValues {
	fpaov := &ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{ListPlanAssignmentsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return &ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{ListPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([][]*plan_assignment.PlanAssignment)}
	case ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken:
		return &ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{ListPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PagerCursor)}
	case ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken:
		return &ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{ListPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PagerCursor)}
	case ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset:
		return &ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{ListPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount:
		return &ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{ListPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPlanAssignmentsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return &ListPlanAssignmentsResponse_FieldTerminalPathArrayItemValue{ListPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignment)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fp.selector))
	}
}

func (fp *ListPlanAssignmentsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListPlanAssignmentsResponse_FieldSubPath struct {
	selector ListPlanAssignmentsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListPlanAssignmentsResponse_FieldPath = (*ListPlanAssignmentsResponse_FieldSubPath)(nil)

func (fps *ListPlanAssignmentsResponse_FieldSubPath) Selector() ListPlanAssignmentsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListPlanAssignmentsResponse_FieldSubPath) AsPlanAssignmentsSubPath() (plan_assignment.PlanAssignment_FieldPath, bool) {
	res, ok := fps.subPath.(plan_assignment.PlanAssignment_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListPlanAssignmentsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListPlanAssignmentsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListPlanAssignmentsResponse
func (fps *ListPlanAssignmentsResponse_FieldSubPath) Get(source *ListPlanAssignmentsResponse) (values []interface{}) {
	switch fps.selector {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		for _, item := range source.GetPlanAssignments() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListPlanAssignmentsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListPlanAssignmentsResponse))
}

// GetSingle returns value of selected field from source ListPlanAssignmentsResponse
func (fps *ListPlanAssignmentsResponse_FieldSubPath) GetSingle(source *ListPlanAssignmentsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		if len(source.GetPlanAssignments()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPlanAssignments()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fps.selector))
	}
}

func (fps *ListPlanAssignmentsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListPlanAssignmentsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListPlanAssignmentsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListPlanAssignmentsResponse_FieldSubPath) ClearValue(item *ListPlanAssignmentsResponse) {
	if item != nil {
		switch fps.selector {
		case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
			for _, subItem := range item.PlanAssignments {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListPlanAssignmentsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListPlanAssignmentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListPlanAssignmentsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListPlanAssignmentsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListPlanAssignmentsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListPlanAssignmentsResponse_FieldSubPath) WithIValue(value interface{}) ListPlanAssignmentsResponse_FieldPathValue {
	return &ListPlanAssignmentsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListPlanAssignmentsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListPlanAssignmentsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListPlanAssignmentsResponse_FieldPathArrayOfValues {
	return &ListPlanAssignmentsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListPlanAssignmentsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListPlanAssignmentsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListPlanAssignmentsResponse_FieldPathArrayItemValue {
	return &ListPlanAssignmentsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListPlanAssignmentsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListPlanAssignmentsResponse_FieldPathValue allows storing values for ListPlanAssignmentsResponse fields according to their type
type ListPlanAssignmentsResponse_FieldPathValue interface {
	ListPlanAssignmentsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPlanAssignmentsResponse)
	CompareWith(*ListPlanAssignmentsResponse) (cmp int, comparable bool)
}

func ParseListPlanAssignmentsResponse_FieldPathValue(pathStr, valueStr string) (ListPlanAssignmentsResponse_FieldPathValue, error) {
	fp, err := ParseListPlanAssignmentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlanAssignmentsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPlanAssignmentsResponse_FieldPathValue), nil
}

func MustParseListPlanAssignmentsResponse_FieldPathValue(pathStr, valueStr string) ListPlanAssignmentsResponse_FieldPathValue {
	fpv, err := ParseListPlanAssignmentsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPlanAssignmentsResponse_FieldTerminalPathValue struct {
	ListPlanAssignmentsResponse_FieldTerminalPath
	value interface{}
}

var _ ListPlanAssignmentsResponse_FieldPathValue = (*ListPlanAssignmentsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPlanAssignmentsResponse' as interface{}
func (fpv *ListPlanAssignmentsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPlanAssignmentsResponse_FieldTerminalPathValue) AsPlanAssignmentsValue() ([]*plan_assignment.PlanAssignment, bool) {
	res, ok := fpv.value.([]*plan_assignment.PlanAssignment)
	return res, ok
}
func (fpv *ListPlanAssignmentsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*plan_assignment.PagerCursor, bool) {
	res, ok := fpv.value.(*plan_assignment.PagerCursor)
	return res, ok
}
func (fpv *ListPlanAssignmentsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*plan_assignment.PagerCursor, bool) {
	res, ok := fpv.value.(*plan_assignment.PagerCursor)
	return res, ok
}
func (fpv *ListPlanAssignmentsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListPlanAssignmentsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListPlanAssignmentsResponse
func (fpv *ListPlanAssignmentsResponse_FieldTerminalPathValue) SetTo(target **ListPlanAssignmentsResponse) {
	if *target == nil {
		*target = new(ListPlanAssignmentsResponse)
	}
	switch fpv.selector {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		(*target).PlanAssignments = fpv.value.([]*plan_assignment.PlanAssignment)
	case ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*plan_assignment.PagerCursor)
	case ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*plan_assignment.PagerCursor)
	case ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fpv.selector))
	}
}

func (fpv *ListPlanAssignmentsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPlanAssignmentsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPlanAssignmentsResponse_FieldTerminalPathValue' with the value under path in 'ListPlanAssignmentsResponse'.
func (fpv *ListPlanAssignmentsResponse_FieldTerminalPathValue) CompareWith(source *ListPlanAssignmentsResponse) (int, bool) {
	switch fpv.selector {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return 0, false
	case ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fpv.selector))
	}
}

func (fpv *ListPlanAssignmentsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPlanAssignmentsResponse))
}

type ListPlanAssignmentsResponse_FieldSubPathValue struct {
	ListPlanAssignmentsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListPlanAssignmentsResponse_FieldPathValue = (*ListPlanAssignmentsResponse_FieldSubPathValue)(nil)

func (fpvs *ListPlanAssignmentsResponse_FieldSubPathValue) AsPlanAssignmentsPathValue() (plan_assignment.PlanAssignment_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue)
	return res, ok
}

func (fpvs *ListPlanAssignmentsResponse_FieldSubPathValue) SetTo(target **ListPlanAssignmentsResponse) {
	if *target == nil {
		*target = new(ListPlanAssignmentsResponse)
	}
	switch fpvs.Selector() {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPlanAssignmentsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPlanAssignmentsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListPlanAssignmentsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListPlanAssignmentsResponse_FieldSubPathValue) CompareWith(source *ListPlanAssignmentsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPlanAssignmentsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListPlanAssignmentsResponse))
}

// ListPlanAssignmentsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPlanAssignmentsResponse according to their type
// Present only for array (repeated) types.
type ListPlanAssignmentsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPlanAssignmentsResponse_FieldPath
	ContainsValue(*ListPlanAssignmentsResponse) bool
}

// ParseListPlanAssignmentsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPlanAssignmentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListPlanAssignmentsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListPlanAssignmentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlanAssignmentsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPlanAssignmentsResponse_FieldPathArrayItemValue), nil
}

func MustParseListPlanAssignmentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListPlanAssignmentsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListPlanAssignmentsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPlanAssignmentsResponse_FieldTerminalPathArrayItemValue struct {
	ListPlanAssignmentsResponse_FieldTerminalPath
	value interface{}
}

var _ ListPlanAssignmentsResponse_FieldPathArrayItemValue = (*ListPlanAssignmentsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPlanAssignmentsResponse as interface{}
func (fpaiv *ListPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) AsPlanAssignmentsItemValue() (*plan_assignment.PlanAssignment, bool) {
	res, ok := fpaiv.value.(*plan_assignment.PlanAssignment)
	return res, ok
}

func (fpaiv *ListPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListPlanAssignmentsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPlanAssignmentsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPlanAssignmentsResponse'
func (fpaiv *ListPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPlanAssignmentsResponse) bool {
	slice := fpaiv.ListPlanAssignmentsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListPlanAssignmentsResponse_FieldSubPathArrayItemValue struct {
	ListPlanAssignmentsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListPlanAssignmentsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListPlanAssignmentsResponse_FieldSubPathArrayItemValue) AsPlanAssignmentsPathItemValue() (plan_assignment.PlanAssignment_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan_assignment.PlanAssignment_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPlanAssignmentsResponse'
func (fpaivs *ListPlanAssignmentsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListPlanAssignmentsResponse) bool {
	switch fpaivs.Selector() {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPlanAssignmentsResponse: %d", fpaivs.Selector()))
	}
}

// ListPlanAssignmentsResponse_FieldPathArrayOfValues allows storing slice of values for ListPlanAssignmentsResponse fields according to their type
type ListPlanAssignmentsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPlanAssignmentsResponse_FieldPath
}

func ParseListPlanAssignmentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPlanAssignmentsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListPlanAssignmentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPlanAssignmentsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPlanAssignmentsResponse_FieldPathArrayOfValues), nil
}

func MustParseListPlanAssignmentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListPlanAssignmentsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListPlanAssignmentsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues struct {
	ListPlanAssignmentsResponse_FieldTerminalPath
	values interface{}
}

var _ ListPlanAssignmentsResponse_FieldPathArrayOfValues = (*ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
		for _, v := range fpaov.values.([][]*plan_assignment.PlanAssignment) {
			values = append(values, v)
		}
	case ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*plan_assignment.PagerCursor) {
			values = append(values, v)
		}
	case ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*plan_assignment.PagerCursor) {
			values = append(values, v)
		}
	case ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsPlanAssignmentsArrayOfValues() ([][]*plan_assignment.PlanAssignment, bool) {
	res, ok := fpaov.values.([][]*plan_assignment.PlanAssignment)
	return res, ok
}
func (fpaov *ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*plan_assignment.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PagerCursor)
	return res, ok
}
func (fpaov *ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*plan_assignment.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PagerCursor)
	return res, ok
}
func (fpaov *ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListPlanAssignmentsResponse_FieldSubPathArrayOfValues struct {
	ListPlanAssignmentsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListPlanAssignmentsResponse_FieldPathArrayOfValues = (*ListPlanAssignmentsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListPlanAssignmentsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListPlanAssignmentsResponse_FieldSubPathArrayOfValues) AsPlanAssignmentsPathArrayOfValues() (plan_assignment.PlanAssignment_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan_assignment.PlanAssignment_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlanAssignmentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlanAssignmentRequest_FieldPathSelector
	Get(source *WatchPlanAssignmentRequest) []interface{}
	GetSingle(source *WatchPlanAssignmentRequest) (interface{}, bool)
	ClearValue(item *WatchPlanAssignmentRequest)

	// Those methods build corresponding WatchPlanAssignmentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlanAssignmentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlanAssignmentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlanAssignmentRequest_FieldPathArrayItemValue
}

type WatchPlanAssignmentRequest_FieldPathSelector int32

const (
	WatchPlanAssignmentRequest_FieldPathSelectorName      WatchPlanAssignmentRequest_FieldPathSelector = 0
	WatchPlanAssignmentRequest_FieldPathSelectorFieldMask WatchPlanAssignmentRequest_FieldPathSelector = 1
	WatchPlanAssignmentRequest_FieldPathSelectorView      WatchPlanAssignmentRequest_FieldPathSelector = 2
)

func (s WatchPlanAssignmentRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPlanAssignmentRequest_FieldPathSelectorName:
		return "name"
	case WatchPlanAssignmentRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPlanAssignmentRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequest: %d", s))
	}
}

func BuildWatchPlanAssignmentRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPlanAssignmentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlanAssignmentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchPlanAssignmentRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPlanAssignmentRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPlanAssignmentRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlanAssignmentRequest", fp)
}

func ParseWatchPlanAssignmentRequest_FieldPath(rawField string) (WatchPlanAssignmentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlanAssignmentRequest_FieldPath(fp)
}

func MustParseWatchPlanAssignmentRequest_FieldPath(rawField string) WatchPlanAssignmentRequest_FieldPath {
	fp, err := ParseWatchPlanAssignmentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlanAssignmentRequest_FieldTerminalPath struct {
	selector WatchPlanAssignmentRequest_FieldPathSelector
}

var _ WatchPlanAssignmentRequest_FieldPath = (*WatchPlanAssignmentRequest_FieldTerminalPath)(nil)

func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) Selector() WatchPlanAssignmentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlanAssignmentRequest
func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) Get(source *WatchPlanAssignmentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlanAssignmentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchPlanAssignmentRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPlanAssignmentRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlanAssignmentRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPlanAssignmentRequest
func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) GetSingle(source *WatchPlanAssignmentRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPlanAssignmentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchPlanAssignmentRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPlanAssignmentRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlanAssignmentRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlanAssignmentRequest_FieldPathSelectorName:
		return (*plan_assignment.Reference)(nil)
	case WatchPlanAssignmentRequest_FieldPathSelectorFieldMask:
		return (*plan_assignment.PlanAssignment_FieldMask)(nil)
	case WatchPlanAssignmentRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) ClearValue(item *WatchPlanAssignmentRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPlanAssignmentRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchPlanAssignmentRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPlanAssignmentRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlanAssignmentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlanAssignmentRequest_FieldPathSelectorName ||
		fp.selector == WatchPlanAssignmentRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPlanAssignmentRequest_FieldPathSelectorView
}

func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPlanAssignmentRequest_FieldPathValue {
	switch fp.selector {
	case WatchPlanAssignmentRequest_FieldPathSelectorName:
		return &WatchPlanAssignmentRequest_FieldTerminalPathValue{WatchPlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.Reference)}
	case WatchPlanAssignmentRequest_FieldPathSelectorFieldMask:
		return &WatchPlanAssignmentRequest_FieldTerminalPathValue{WatchPlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignment_FieldMask)}
	case WatchPlanAssignmentRequest_FieldPathSelectorView:
		return &WatchPlanAssignmentRequest_FieldTerminalPathValue{WatchPlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov := &WatchPlanAssignmentRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlanAssignmentRequest_FieldPathSelectorName:
		return &WatchPlanAssignmentRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.Reference)}
	case WatchPlanAssignmentRequest_FieldPathSelectorFieldMask:
		return &WatchPlanAssignmentRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PlanAssignment_FieldMask)}
	case WatchPlanAssignmentRequest_FieldPathSelectorView:
		return &WatchPlanAssignmentRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlanAssignmentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPlanAssignmentRequest_FieldPathValue allows storing values for WatchPlanAssignmentRequest fields according to their type
type WatchPlanAssignmentRequest_FieldPathValue interface {
	WatchPlanAssignmentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlanAssignmentRequest)
	CompareWith(*WatchPlanAssignmentRequest) (cmp int, comparable bool)
}

func ParseWatchPlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) (WatchPlanAssignmentRequest_FieldPathValue, error) {
	fp, err := ParseWatchPlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlanAssignmentRequest_FieldPathValue), nil
}

func MustParseWatchPlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) WatchPlanAssignmentRequest_FieldPathValue {
	fpv, err := ParseWatchPlanAssignmentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlanAssignmentRequest_FieldTerminalPathValue struct {
	WatchPlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentRequest_FieldPathValue = (*WatchPlanAssignmentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPlanAssignmentRequest' as interface{}
func (fpv *WatchPlanAssignmentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlanAssignmentRequest_FieldTerminalPathValue) AsNameValue() (*plan_assignment.Reference, bool) {
	res, ok := fpv.value.(*plan_assignment.Reference)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}
func (fpv *WatchPlanAssignmentRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchPlanAssignmentRequest
func (fpv *WatchPlanAssignmentRequest_FieldTerminalPathValue) SetTo(target **WatchPlanAssignmentRequest) {
	if *target == nil {
		*target = new(WatchPlanAssignmentRequest)
	}
	switch fpv.selector {
	case WatchPlanAssignmentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*plan_assignment.Reference)
	case WatchPlanAssignmentRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	case WatchPlanAssignmentRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanAssignmentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlanAssignmentRequest_FieldTerminalPathValue' with the value under path in 'WatchPlanAssignmentRequest'.
func (fpv *WatchPlanAssignmentRequest_FieldTerminalPathValue) CompareWith(source *WatchPlanAssignmentRequest) (int, bool) {
	switch fpv.selector {
	case WatchPlanAssignmentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*plan_assignment.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPlanAssignmentRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlanAssignmentRequest))
}

// WatchPlanAssignmentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPlanAssignmentRequest according to their type
// Present only for array (repeated) types.
type WatchPlanAssignmentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlanAssignmentRequest_FieldPath
	ContainsValue(*WatchPlanAssignmentRequest) bool
}

// ParseWatchPlanAssignmentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlanAssignmentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlanAssignmentRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlanAssignmentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlanAssignmentRequest_FieldTerminalPathArrayItemValue struct {
	WatchPlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentRequest_FieldPathArrayItemValue = (*WatchPlanAssignmentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlanAssignmentRequest as interface{}
func (fpaiv *WatchPlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlanAssignmentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlanAssignmentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlanAssignmentRequest'
func (fpaiv *WatchPlanAssignmentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlanAssignmentRequest) bool {
	slice := fpaiv.WatchPlanAssignmentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPlanAssignmentRequest_FieldPathArrayOfValues allows storing slice of values for WatchPlanAssignmentRequest fields according to their type
type WatchPlanAssignmentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlanAssignmentRequest_FieldPath
}

func ParseWatchPlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlanAssignmentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlanAssignmentRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlanAssignmentRequest_FieldTerminalPathArrayOfValues struct {
	WatchPlanAssignmentRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPlanAssignmentRequest_FieldPathArrayOfValues = (*WatchPlanAssignmentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlanAssignmentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlanAssignmentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*plan_assignment.Reference) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask) {
			values = append(values, v)
		}
	case WatchPlanAssignmentRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*plan_assignment.Reference, bool) {
	res, ok := fpaov.values.([]*plan_assignment.Reference)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}
func (fpaov *WatchPlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlanAssignmentResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlanAssignmentResponse_FieldPathSelector
	Get(source *WatchPlanAssignmentResponse) []interface{}
	GetSingle(source *WatchPlanAssignmentResponse) (interface{}, bool)
	ClearValue(item *WatchPlanAssignmentResponse)

	// Those methods build corresponding WatchPlanAssignmentResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlanAssignmentResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlanAssignmentResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlanAssignmentResponse_FieldPathArrayItemValue
}

type WatchPlanAssignmentResponse_FieldPathSelector int32

const (
	WatchPlanAssignmentResponse_FieldPathSelectorChange WatchPlanAssignmentResponse_FieldPathSelector = 0
)

func (s WatchPlanAssignmentResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPlanAssignmentResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentResponse: %d", s))
	}
}

func BuildWatchPlanAssignmentResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPlanAssignmentResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlanAssignmentResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchPlanAssignmentResponse_FieldTerminalPath{selector: WatchPlanAssignmentResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlanAssignmentResponse", fp)
}

func ParseWatchPlanAssignmentResponse_FieldPath(rawField string) (WatchPlanAssignmentResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlanAssignmentResponse_FieldPath(fp)
}

func MustParseWatchPlanAssignmentResponse_FieldPath(rawField string) WatchPlanAssignmentResponse_FieldPath {
	fp, err := ParseWatchPlanAssignmentResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlanAssignmentResponse_FieldTerminalPath struct {
	selector WatchPlanAssignmentResponse_FieldPathSelector
}

var _ WatchPlanAssignmentResponse_FieldPath = (*WatchPlanAssignmentResponse_FieldTerminalPath)(nil)

func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) Selector() WatchPlanAssignmentResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlanAssignmentResponse
func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) Get(source *WatchPlanAssignmentResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlanAssignmentResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlanAssignmentResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPlanAssignmentResponse
func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) GetSingle(source *WatchPlanAssignmentResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPlanAssignmentResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlanAssignmentResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlanAssignmentResponse_FieldPathSelectorChange:
		return (*plan_assignment.PlanAssignmentChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) ClearValue(item *WatchPlanAssignmentResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPlanAssignmentResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlanAssignmentResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlanAssignmentResponse_FieldPathSelectorChange
}

func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPlanAssignmentResponse_FieldPathValue {
	switch fp.selector {
	case WatchPlanAssignmentResponse_FieldPathSelectorChange:
		return &WatchPlanAssignmentResponse_FieldTerminalPathValue{WatchPlanAssignmentResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignmentChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlanAssignmentResponse_FieldPathArrayOfValues {
	fpaov := &WatchPlanAssignmentResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlanAssignmentResponse_FieldPathSelectorChange:
		return &WatchPlanAssignmentResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentResponse_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PlanAssignmentChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlanAssignmentResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPlanAssignmentResponse_FieldPathValue allows storing values for WatchPlanAssignmentResponse fields according to their type
type WatchPlanAssignmentResponse_FieldPathValue interface {
	WatchPlanAssignmentResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlanAssignmentResponse)
	CompareWith(*WatchPlanAssignmentResponse) (cmp int, comparable bool)
}

func ParseWatchPlanAssignmentResponse_FieldPathValue(pathStr, valueStr string) (WatchPlanAssignmentResponse_FieldPathValue, error) {
	fp, err := ParseWatchPlanAssignmentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlanAssignmentResponse_FieldPathValue), nil
}

func MustParseWatchPlanAssignmentResponse_FieldPathValue(pathStr, valueStr string) WatchPlanAssignmentResponse_FieldPathValue {
	fpv, err := ParseWatchPlanAssignmentResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlanAssignmentResponse_FieldTerminalPathValue struct {
	WatchPlanAssignmentResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentResponse_FieldPathValue = (*WatchPlanAssignmentResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPlanAssignmentResponse' as interface{}
func (fpv *WatchPlanAssignmentResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlanAssignmentResponse_FieldTerminalPathValue) AsChangeValue() (*plan_assignment.PlanAssignmentChange, bool) {
	res, ok := fpv.value.(*plan_assignment.PlanAssignmentChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchPlanAssignmentResponse
func (fpv *WatchPlanAssignmentResponse_FieldTerminalPathValue) SetTo(target **WatchPlanAssignmentResponse) {
	if *target == nil {
		*target = new(WatchPlanAssignmentResponse)
	}
	switch fpv.selector {
	case WatchPlanAssignmentResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*plan_assignment.PlanAssignmentChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanAssignmentResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlanAssignmentResponse_FieldTerminalPathValue' with the value under path in 'WatchPlanAssignmentResponse'.
func (fpv *WatchPlanAssignmentResponse_FieldTerminalPathValue) CompareWith(source *WatchPlanAssignmentResponse) (int, bool) {
	switch fpv.selector {
	case WatchPlanAssignmentResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlanAssignmentResponse))
}

// WatchPlanAssignmentResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPlanAssignmentResponse according to their type
// Present only for array (repeated) types.
type WatchPlanAssignmentResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlanAssignmentResponse_FieldPath
	ContainsValue(*WatchPlanAssignmentResponse) bool
}

// ParseWatchPlanAssignmentResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlanAssignmentResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlanAssignmentResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlanAssignmentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlanAssignmentResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPlanAssignmentResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlanAssignmentResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlanAssignmentResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlanAssignmentResponse_FieldTerminalPathArrayItemValue struct {
	WatchPlanAssignmentResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentResponse_FieldPathArrayItemValue = (*WatchPlanAssignmentResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlanAssignmentResponse as interface{}
func (fpaiv *WatchPlanAssignmentResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPlanAssignmentResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlanAssignmentResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlanAssignmentResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlanAssignmentResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlanAssignmentResponse'
func (fpaiv *WatchPlanAssignmentResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlanAssignmentResponse) bool {
	slice := fpaiv.WatchPlanAssignmentResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPlanAssignmentResponse_FieldPathArrayOfValues allows storing slice of values for WatchPlanAssignmentResponse fields according to their type
type WatchPlanAssignmentResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlanAssignmentResponse_FieldPath
}

func ParseWatchPlanAssignmentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlanAssignmentResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlanAssignmentResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlanAssignmentResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPlanAssignmentResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlanAssignmentResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlanAssignmentResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlanAssignmentResponse_FieldTerminalPathArrayOfValues struct {
	WatchPlanAssignmentResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPlanAssignmentResponse_FieldPathArrayOfValues = (*WatchPlanAssignmentResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlanAssignmentResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlanAssignmentResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*plan_assignment.PlanAssignmentChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlanAssignmentResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*plan_assignment.PlanAssignmentChange, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PlanAssignmentChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlanAssignmentsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlanAssignmentsRequest_FieldPathSelector
	Get(source *WatchPlanAssignmentsRequest) []interface{}
	GetSingle(source *WatchPlanAssignmentsRequest) (interface{}, bool)
	ClearValue(item *WatchPlanAssignmentsRequest)

	// Those methods build corresponding WatchPlanAssignmentsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlanAssignmentsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlanAssignmentsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlanAssignmentsRequest_FieldPathArrayItemValue
}

type WatchPlanAssignmentsRequest_FieldPathSelector int32

const (
	WatchPlanAssignmentsRequest_FieldPathSelectorType         WatchPlanAssignmentsRequest_FieldPathSelector = 0
	WatchPlanAssignmentsRequest_FieldPathSelectorParent       WatchPlanAssignmentsRequest_FieldPathSelector = 1
	WatchPlanAssignmentsRequest_FieldPathSelectorPageSize     WatchPlanAssignmentsRequest_FieldPathSelector = 2
	WatchPlanAssignmentsRequest_FieldPathSelectorPageToken    WatchPlanAssignmentsRequest_FieldPathSelector = 3
	WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy      WatchPlanAssignmentsRequest_FieldPathSelector = 4
	WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken  WatchPlanAssignmentsRequest_FieldPathSelector = 5
	WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime WatchPlanAssignmentsRequest_FieldPathSelector = 6
	WatchPlanAssignmentsRequest_FieldPathSelectorFilter       WatchPlanAssignmentsRequest_FieldPathSelector = 7
	WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask    WatchPlanAssignmentsRequest_FieldPathSelector = 8
	WatchPlanAssignmentsRequest_FieldPathSelectorView         WatchPlanAssignmentsRequest_FieldPathSelector = 9
	WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize WatchPlanAssignmentsRequest_FieldPathSelector = 10
)

func (s WatchPlanAssignmentsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPlanAssignmentsRequest_FieldPathSelectorType:
		return "type"
	case WatchPlanAssignmentsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchPlanAssignmentsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPlanAssignmentsRequest_FieldPathSelectorView:
		return "view"
	case WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsRequest: %d", s))
	}
}

func BuildWatchPlanAssignmentsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPlanAssignmentsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlanAssignmentsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlanAssignmentsRequest", fp)
}

func ParseWatchPlanAssignmentsRequest_FieldPath(rawField string) (WatchPlanAssignmentsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlanAssignmentsRequest_FieldPath(fp)
}

func MustParseWatchPlanAssignmentsRequest_FieldPath(rawField string) WatchPlanAssignmentsRequest_FieldPath {
	fp, err := ParseWatchPlanAssignmentsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlanAssignmentsRequest_FieldTerminalPath struct {
	selector WatchPlanAssignmentsRequest_FieldPathSelector
}

var _ WatchPlanAssignmentsRequest_FieldPath = (*WatchPlanAssignmentsRequest_FieldTerminalPath)(nil)

func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) Selector() WatchPlanAssignmentsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlanAssignmentsRequest
func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) Get(source *WatchPlanAssignmentsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlanAssignmentsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchPlanAssignmentsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchPlanAssignmentsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchPlanAssignmentsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchPlanAssignmentsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPlanAssignmentsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlanAssignmentsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPlanAssignmentsRequest
func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) GetSingle(source *WatchPlanAssignmentsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPlanAssignmentsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchPlanAssignmentsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchPlanAssignmentsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPlanAssignmentsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlanAssignmentsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlanAssignmentsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchPlanAssignmentsRequest_FieldPathSelectorParent:
		return (*plan_assignment.ParentReference)(nil)
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageToken:
		return (*plan_assignment.PagerCursor)(nil)
	case WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		return (*plan_assignment.OrderBy)(nil)
	case WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchPlanAssignmentsRequest_FieldPathSelectorFilter:
		return (*plan_assignment.Filter)(nil)
	case WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return (*plan_assignment.PlanAssignment_FieldMask)(nil)
	case WatchPlanAssignmentsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) ClearValue(item *WatchPlanAssignmentsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPlanAssignmentsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchPlanAssignmentsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchPlanAssignmentsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchPlanAssignmentsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchPlanAssignmentsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPlanAssignmentsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlanAssignmentsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlanAssignmentsRequest_FieldPathSelectorType ||
		fp.selector == WatchPlanAssignmentsRequest_FieldPathSelectorParent ||
		fp.selector == WatchPlanAssignmentsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchPlanAssignmentsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchPlanAssignmentsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPlanAssignmentsRequest_FieldPathSelectorView ||
		fp.selector == WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPlanAssignmentsRequest_FieldPathValue {
	switch fp.selector {
	case WatchPlanAssignmentsRequest_FieldPathSelectorType:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathValue{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorParent:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathValue{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.ParentReference)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageSize:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathValue{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageToken:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathValue{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.PagerCursor)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathValue{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.OrderBy)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathValue{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathValue{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorFilter:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathValue{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.Filter)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathValue{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignment_FieldMask)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorView:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathValue{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathValue{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlanAssignmentsRequest_FieldPathArrayOfValues {
	fpaov := &WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlanAssignmentsRequest_FieldPathSelectorType:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorParent:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.ParentReference)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageSize:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageToken:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PagerCursor)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.OrderBy)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorFilter:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.Filter)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PlanAssignment_FieldMask)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorView:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlanAssignmentsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsRequest: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPlanAssignmentsRequest_FieldPathValue allows storing values for WatchPlanAssignmentsRequest fields according to their type
type WatchPlanAssignmentsRequest_FieldPathValue interface {
	WatchPlanAssignmentsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlanAssignmentsRequest)
	CompareWith(*WatchPlanAssignmentsRequest) (cmp int, comparable bool)
}

func ParseWatchPlanAssignmentsRequest_FieldPathValue(pathStr, valueStr string) (WatchPlanAssignmentsRequest_FieldPathValue, error) {
	fp, err := ParseWatchPlanAssignmentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlanAssignmentsRequest_FieldPathValue), nil
}

func MustParseWatchPlanAssignmentsRequest_FieldPathValue(pathStr, valueStr string) WatchPlanAssignmentsRequest_FieldPathValue {
	fpv, err := ParseWatchPlanAssignmentsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlanAssignmentsRequest_FieldTerminalPathValue struct {
	WatchPlanAssignmentsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentsRequest_FieldPathValue = (*WatchPlanAssignmentsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPlanAssignmentsRequest' as interface{}
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) AsParentValue() (*plan_assignment.ParentReference, bool) {
	res, ok := fpv.value.(*plan_assignment.ParentReference)
	return res, ok
}
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) AsPageTokenValue() (*plan_assignment.PagerCursor, bool) {
	res, ok := fpv.value.(*plan_assignment.PagerCursor)
	return res, ok
}
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) AsOrderByValue() (*plan_assignment.OrderBy, bool) {
	res, ok := fpv.value.(*plan_assignment.OrderBy)
	return res, ok
}
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) AsFilterValue() (*plan_assignment.Filter, bool) {
	res, ok := fpv.value.(*plan_assignment.Filter)
	return res, ok
}
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchPlanAssignmentsRequest
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) SetTo(target **WatchPlanAssignmentsRequest) {
	if *target == nil {
		*target = new(WatchPlanAssignmentsRequest)
	}
	switch fpv.selector {
	case WatchPlanAssignmentsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchPlanAssignmentsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*plan_assignment.ParentReference)
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*plan_assignment.PagerCursor)
	case WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*plan_assignment.OrderBy)
	case WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchPlanAssignmentsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*plan_assignment.Filter)
	case WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	case WatchPlanAssignmentsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanAssignmentsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlanAssignmentsRequest_FieldTerminalPathValue' with the value under path in 'WatchPlanAssignmentsRequest'.
func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) CompareWith(source *WatchPlanAssignmentsRequest) (int, bool) {
	switch fpv.selector {
	case WatchPlanAssignmentsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*plan_assignment.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPlanAssignmentsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlanAssignmentsRequest))
}

// WatchPlanAssignmentsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPlanAssignmentsRequest according to their type
// Present only for array (repeated) types.
type WatchPlanAssignmentsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlanAssignmentsRequest_FieldPath
	ContainsValue(*WatchPlanAssignmentsRequest) bool
}

// ParseWatchPlanAssignmentsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlanAssignmentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlanAssignmentsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlanAssignmentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlanAssignmentsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPlanAssignmentsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlanAssignmentsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlanAssignmentsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlanAssignmentsRequest_FieldTerminalPathArrayItemValue struct {
	WatchPlanAssignmentsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentsRequest_FieldPathArrayItemValue = (*WatchPlanAssignmentsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlanAssignmentsRequest as interface{}
func (fpaiv *WatchPlanAssignmentsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPlanAssignmentsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlanAssignmentsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlanAssignmentsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlanAssignmentsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlanAssignmentsRequest'
func (fpaiv *WatchPlanAssignmentsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlanAssignmentsRequest) bool {
	slice := fpaiv.WatchPlanAssignmentsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPlanAssignmentsRequest_FieldPathArrayOfValues allows storing slice of values for WatchPlanAssignmentsRequest fields according to their type
type WatchPlanAssignmentsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlanAssignmentsRequest_FieldPath
}

func ParseWatchPlanAssignmentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlanAssignmentsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlanAssignmentsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlanAssignmentsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPlanAssignmentsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlanAssignmentsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlanAssignmentsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues struct {
	WatchPlanAssignmentsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPlanAssignmentsRequest_FieldPathArrayOfValues = (*WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlanAssignmentsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*plan_assignment.ParentReference) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*plan_assignment.PagerCursor) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*plan_assignment.OrderBy) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*plan_assignment.Filter) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*plan_assignment.ParentReference, bool) {
	res, ok := fpaov.values.([]*plan_assignment.ParentReference)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*plan_assignment.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PagerCursor)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*plan_assignment.OrderBy, bool) {
	res, ok := fpaov.values.([]*plan_assignment.OrderBy)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*plan_assignment.Filter, bool) {
	res, ok := fpaov.values.([]*plan_assignment.Filter)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlanAssignmentsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlanAssignmentsResponse_FieldPathSelector
	Get(source *WatchPlanAssignmentsResponse) []interface{}
	GetSingle(source *WatchPlanAssignmentsResponse) (interface{}, bool)
	ClearValue(item *WatchPlanAssignmentsResponse)

	// Those methods build corresponding WatchPlanAssignmentsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlanAssignmentsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlanAssignmentsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlanAssignmentsResponse_FieldPathArrayItemValue
}

type WatchPlanAssignmentsResponse_FieldPathSelector int32

const (
	WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges WatchPlanAssignmentsResponse_FieldPathSelector = 0
	WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent             WatchPlanAssignmentsResponse_FieldPathSelector = 1
	WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange       WatchPlanAssignmentsResponse_FieldPathSelector = 2
	WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken           WatchPlanAssignmentsResponse_FieldPathSelector = 3
	WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize          WatchPlanAssignmentsResponse_FieldPathSelector = 4
	WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset           WatchPlanAssignmentsResponse_FieldPathSelector = 5
	WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset           WatchPlanAssignmentsResponse_FieldPathSelector = 6
)

func (s WatchPlanAssignmentsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges:
		return "plan_assignment_changes"
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", s))
	}
}

func BuildWatchPlanAssignmentsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPlanAssignmentsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlanAssignmentsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plan_assignment_changes", "planAssignmentChanges", "plan-assignment-changes":
			return &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchPlanAssignmentsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchPlanAssignmentsResponse_FieldSubPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlanAssignmentsResponse", fp)
}

func ParseWatchPlanAssignmentsResponse_FieldPath(rawField string) (WatchPlanAssignmentsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlanAssignmentsResponse_FieldPath(fp)
}

func MustParseWatchPlanAssignmentsResponse_FieldPath(rawField string) WatchPlanAssignmentsResponse_FieldPath {
	fp, err := ParseWatchPlanAssignmentsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlanAssignmentsResponse_FieldTerminalPath struct {
	selector WatchPlanAssignmentsResponse_FieldPathSelector
}

var _ WatchPlanAssignmentsResponse_FieldPath = (*WatchPlanAssignmentsResponse_FieldTerminalPath)(nil)

func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) Selector() WatchPlanAssignmentsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlanAssignmentsResponse
func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) Get(source *WatchPlanAssignmentsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges:
			for _, value := range source.GetPlanAssignmentChanges() {
				values = append(values, value)
			}
		case WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlanAssignmentsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPlanAssignmentsResponse
func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) GetSingle(source *WatchPlanAssignmentsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges:
		res := source.GetPlanAssignmentChanges()
		return res, res != nil
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlanAssignmentsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges:
		return ([]*plan_assignment.PlanAssignmentChange)(nil)
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchPlanAssignmentsResponse_PageTokenChange)(nil)
	case WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) ClearValue(item *WatchPlanAssignmentsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges:
			item.PlanAssignmentChanges = nil
		case WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlanAssignmentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges ||
		fp.selector == WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPlanAssignmentsResponse_FieldPathValue {
	switch fp.selector {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathValue{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.([]*plan_assignment.PlanAssignmentChange)}
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathValue{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathValue{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(*WatchPlanAssignmentsResponse_PageTokenChange)}
	case WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathValue{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathValue{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathValue{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathValue{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlanAssignmentsResponse_FieldPathArrayOfValues {
	fpaov := &WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([][]*plan_assignment.PlanAssignmentChange)}
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([]*WatchPlanAssignmentsResponse_PageTokenChange)}
	case WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlanAssignmentsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges:
		return &WatchPlanAssignmentsResponse_FieldTerminalPathArrayItemValue{WatchPlanAssignmentsResponse_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignmentChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchPlanAssignmentsResponse_FieldSubPath struct {
	selector WatchPlanAssignmentsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchPlanAssignmentsResponse_FieldPath = (*WatchPlanAssignmentsResponse_FieldSubPath)(nil)

func (fps *WatchPlanAssignmentsResponse_FieldSubPath) Selector() WatchPlanAssignmentsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchPlanAssignmentsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchPlanAssignmentsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchPlanAssignmentsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchPlanAssignmentsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchPlanAssignmentsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchPlanAssignmentsResponse
func (fps *WatchPlanAssignmentsResponse_FieldSubPath) Get(source *WatchPlanAssignmentsResponse) (values []interface{}) {
	switch fps.selector {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchPlanAssignmentsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchPlanAssignmentsResponse))
}

// GetSingle returns value of selected field from source WatchPlanAssignmentsResponse
func (fps *WatchPlanAssignmentsResponse_FieldSubPath) GetSingle(source *WatchPlanAssignmentsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fps.selector))
	}
}

func (fps *WatchPlanAssignmentsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchPlanAssignmentsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchPlanAssignmentsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchPlanAssignmentsResponse_FieldSubPath) ClearValue(item *WatchPlanAssignmentsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchPlanAssignmentsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchPlanAssignmentsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchPlanAssignmentsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchPlanAssignmentsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchPlanAssignmentsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchPlanAssignmentsResponse_FieldSubPath) WithIValue(value interface{}) WatchPlanAssignmentsResponse_FieldPathValue {
	return &WatchPlanAssignmentsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchPlanAssignmentsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchPlanAssignmentsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchPlanAssignmentsResponse_FieldPathArrayOfValues {
	return &WatchPlanAssignmentsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchPlanAssignmentsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchPlanAssignmentsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchPlanAssignmentsResponse_FieldPathArrayItemValue {
	return &WatchPlanAssignmentsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchPlanAssignmentsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchPlanAssignmentsResponse_FieldPathValue allows storing values for WatchPlanAssignmentsResponse fields according to their type
type WatchPlanAssignmentsResponse_FieldPathValue interface {
	WatchPlanAssignmentsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlanAssignmentsResponse)
	CompareWith(*WatchPlanAssignmentsResponse) (cmp int, comparable bool)
}

func ParseWatchPlanAssignmentsResponse_FieldPathValue(pathStr, valueStr string) (WatchPlanAssignmentsResponse_FieldPathValue, error) {
	fp, err := ParseWatchPlanAssignmentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlanAssignmentsResponse_FieldPathValue), nil
}

func MustParseWatchPlanAssignmentsResponse_FieldPathValue(pathStr, valueStr string) WatchPlanAssignmentsResponse_FieldPathValue {
	fpv, err := ParseWatchPlanAssignmentsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlanAssignmentsResponse_FieldTerminalPathValue struct {
	WatchPlanAssignmentsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentsResponse_FieldPathValue = (*WatchPlanAssignmentsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPlanAssignmentsResponse' as interface{}
func (fpv *WatchPlanAssignmentsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlanAssignmentsResponse_FieldTerminalPathValue) AsPlanAssignmentChangesValue() ([]*plan_assignment.PlanAssignmentChange, bool) {
	res, ok := fpv.value.([]*plan_assignment.PlanAssignmentChange)
	return res, ok
}
func (fpv *WatchPlanAssignmentsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPlanAssignmentsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchPlanAssignmentsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchPlanAssignmentsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchPlanAssignmentsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPlanAssignmentsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchPlanAssignmentsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPlanAssignmentsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchPlanAssignmentsResponse
func (fpv *WatchPlanAssignmentsResponse_FieldTerminalPathValue) SetTo(target **WatchPlanAssignmentsResponse) {
	if *target == nil {
		*target = new(WatchPlanAssignmentsResponse)
	}
	switch fpv.selector {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges:
		(*target).PlanAssignmentChanges = fpv.value.([]*plan_assignment.PlanAssignmentChange)
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchPlanAssignmentsResponse_PageTokenChange)
	case WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanAssignmentsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlanAssignmentsResponse_FieldTerminalPathValue' with the value under path in 'WatchPlanAssignmentsResponse'.
func (fpv *WatchPlanAssignmentsResponse_FieldTerminalPathValue) CompareWith(source *WatchPlanAssignmentsResponse) (int, bool) {
	switch fpv.selector {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges:
		return 0, false
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlanAssignmentsResponse))
}

type WatchPlanAssignmentsResponse_FieldSubPathValue struct {
	WatchPlanAssignmentsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchPlanAssignmentsResponse_FieldPathValue = (*WatchPlanAssignmentsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchPlanAssignmentsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchPlanAssignmentsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchPlanAssignmentsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchPlanAssignmentsResponse_FieldSubPathValue) SetTo(target **WatchPlanAssignmentsResponse) {
	if *target == nil {
		*target = new(WatchPlanAssignmentsResponse)
	}
	switch fpvs.Selector() {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchPlanAssignmentsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPlanAssignmentsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanAssignmentsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchPlanAssignmentsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchPlanAssignmentsResponse_FieldSubPathValue) CompareWith(source *WatchPlanAssignmentsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchPlanAssignmentsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPlanAssignmentsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchPlanAssignmentsResponse))
}

// WatchPlanAssignmentsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPlanAssignmentsResponse according to their type
// Present only for array (repeated) types.
type WatchPlanAssignmentsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlanAssignmentsResponse_FieldPath
	ContainsValue(*WatchPlanAssignmentsResponse) bool
}

// ParseWatchPlanAssignmentsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlanAssignmentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlanAssignmentsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlanAssignmentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlanAssignmentsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPlanAssignmentsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlanAssignmentsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlanAssignmentsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlanAssignmentsResponse_FieldTerminalPathArrayItemValue struct {
	WatchPlanAssignmentsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentsResponse_FieldPathArrayItemValue = (*WatchPlanAssignmentsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlanAssignmentsResponse as interface{}
func (fpaiv *WatchPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) AsPlanAssignmentChangesItemValue() (*plan_assignment.PlanAssignmentChange, bool) {
	res, ok := fpaiv.value.(*plan_assignment.PlanAssignmentChange)
	return res, ok
}

func (fpaiv *WatchPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlanAssignmentsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlanAssignmentsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlanAssignmentsResponse'
func (fpaiv *WatchPlanAssignmentsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlanAssignmentsResponse) bool {
	slice := fpaiv.WatchPlanAssignmentsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchPlanAssignmentsResponse_FieldSubPathArrayItemValue struct {
	WatchPlanAssignmentsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchPlanAssignmentsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchPlanAssignmentsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPlanAssignmentsResponse'
func (fpaivs *WatchPlanAssignmentsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchPlanAssignmentsResponse) bool {
	switch fpaivs.Selector() {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse: %d", fpaivs.Selector()))
	}
}

// WatchPlanAssignmentsResponse_FieldPathArrayOfValues allows storing slice of values for WatchPlanAssignmentsResponse fields according to their type
type WatchPlanAssignmentsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlanAssignmentsResponse_FieldPath
}

func ParseWatchPlanAssignmentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlanAssignmentsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlanAssignmentsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPlanAssignmentsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlanAssignmentsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPlanAssignmentsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlanAssignmentsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlanAssignmentsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues struct {
	WatchPlanAssignmentsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPlanAssignmentsResponse_FieldPathArrayOfValues = (*WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges:
		for _, v := range fpaov.values.([][]*plan_assignment.PlanAssignmentChange) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchPlanAssignmentsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsPlanAssignmentChangesArrayOfValues() ([][]*plan_assignment.PlanAssignmentChange, bool) {
	res, ok := fpaov.values.([][]*plan_assignment.PlanAssignmentChange)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchPlanAssignmentsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchPlanAssignmentsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchPlanAssignmentsResponse_FieldSubPathArrayOfValues struct {
	WatchPlanAssignmentsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchPlanAssignmentsResponse_FieldPathArrayOfValues = (*WatchPlanAssignmentsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchPlanAssignmentsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchPlanAssignmentsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPlanAssignmentsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchPlanAssignmentsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchPlanAssignmentsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchPlanAssignmentsResponse_PageTokenChange)

	// Those methods build corresponding WatchPlanAssignmentsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPlanAssignmentsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelector = 0
	WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchPlanAssignmentsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchPlanAssignmentsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPlanAssignmentsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath{selector: WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath{selector: WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPlanAssignmentsResponse_PageTokenChange", fp)
}

func ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPath(rawField string) (WatchPlanAssignmentsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPlanAssignmentsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchPlanAssignmentsResponsePageTokenChange_FieldPath(rawField string) WatchPlanAssignmentsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelector
}

var _ WatchPlanAssignmentsResponsePageTokenChange_FieldPath = (*WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) Selector() WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPlanAssignmentsResponse_PageTokenChange
func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchPlanAssignmentsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPlanAssignmentsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchPlanAssignmentsResponse_PageTokenChange
func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchPlanAssignmentsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPlanAssignmentsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*plan_assignment.PagerCursor)(nil)
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*plan_assignment.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchPlanAssignmentsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPlanAssignmentsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchPlanAssignmentsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathValue{WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*plan_assignment.PagerCursor)}
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathValue{WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*plan_assignment.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PagerCursor)}
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPlanAssignmentsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchPlanAssignmentsResponsePageTokenChange_FieldPathValue interface {
	WatchPlanAssignmentsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPlanAssignmentsResponse_PageTokenChange)
	CompareWith(*WatchPlanAssignmentsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchPlanAssignmentsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPlanAssignmentsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchPlanAssignmentsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchPlanAssignmentsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentsResponsePageTokenChange_FieldPathValue = (*WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*plan_assignment.PagerCursor, bool) {
	res, ok := fpv.value.(*plan_assignment.PagerCursor)
	return res, ok
}
func (fpv *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*plan_assignment.PagerCursor, bool) {
	res, ok := fpv.value.(*plan_assignment.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchPlanAssignmentsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchPlanAssignmentsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*plan_assignment.PagerCursor)
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*plan_assignment.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPlanAssignmentsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchPlanAssignmentsResponse_PageTokenChange'.
func (fpv *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchPlanAssignmentsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPlanAssignmentsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPlanAssignmentsResponse_PageTokenChange))
}

// WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPlanAssignmentsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchPlanAssignmentsResponse_PageTokenChange) bool
}

// ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPlanAssignmentsResponse_PageTokenChange as interface{}
func (fpaiv *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPlanAssignmentsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPlanAssignmentsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPlanAssignmentsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPlanAssignmentsResponsePageTokenChange_FieldPath
}

func ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchPlanAssignmentsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*plan_assignment.PagerCursor) {
			values = append(values, v)
		}
	case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*plan_assignment.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*plan_assignment.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PagerCursor)
	return res, ok
}
func (fpaov *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*plan_assignment.PagerCursor, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreatePlanAssignmentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreatePlanAssignmentRequest_FieldPathSelector
	Get(source *CreatePlanAssignmentRequest) []interface{}
	GetSingle(source *CreatePlanAssignmentRequest) (interface{}, bool)
	ClearValue(item *CreatePlanAssignmentRequest)

	// Those methods build corresponding CreatePlanAssignmentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreatePlanAssignmentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreatePlanAssignmentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreatePlanAssignmentRequest_FieldPathArrayItemValue
}

type CreatePlanAssignmentRequest_FieldPathSelector int32

const (
	CreatePlanAssignmentRequest_FieldPathSelectorParent         CreatePlanAssignmentRequest_FieldPathSelector = 0
	CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment CreatePlanAssignmentRequest_FieldPathSelector = 1
)

func (s CreatePlanAssignmentRequest_FieldPathSelector) String() string {
	switch s {
	case CreatePlanAssignmentRequest_FieldPathSelectorParent:
		return "parent"
	case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return "plan_assignment"
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", s))
	}
}

func BuildCreatePlanAssignmentRequest_FieldPath(fp gotenobject.RawFieldPath) (CreatePlanAssignmentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreatePlanAssignmentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreatePlanAssignmentRequest_FieldTerminalPath{selector: CreatePlanAssignmentRequest_FieldPathSelectorParent}, nil
		case "plan_assignment", "planAssignment", "plan-assignment":
			return &CreatePlanAssignmentRequest_FieldTerminalPath{selector: CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment}, nil
		}
	} else {
		switch fp[0] {
		case "plan_assignment", "planAssignment", "plan-assignment":
			if subpath, err := plan_assignment.BuildPlanAssignment_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreatePlanAssignmentRequest_FieldSubPath{selector: CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreatePlanAssignmentRequest", fp)
}

func ParseCreatePlanAssignmentRequest_FieldPath(rawField string) (CreatePlanAssignmentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreatePlanAssignmentRequest_FieldPath(fp)
}

func MustParseCreatePlanAssignmentRequest_FieldPath(rawField string) CreatePlanAssignmentRequest_FieldPath {
	fp, err := ParseCreatePlanAssignmentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreatePlanAssignmentRequest_FieldTerminalPath struct {
	selector CreatePlanAssignmentRequest_FieldPathSelector
}

var _ CreatePlanAssignmentRequest_FieldPath = (*CreatePlanAssignmentRequest_FieldTerminalPath)(nil)

func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) Selector() CreatePlanAssignmentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreatePlanAssignmentRequest
func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) Get(source *CreatePlanAssignmentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreatePlanAssignmentRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
			if source.PlanAssignment != nil {
				values = append(values, source.PlanAssignment)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreatePlanAssignmentRequest))
}

// GetSingle returns value pointed by specific field of from source CreatePlanAssignmentRequest
func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) GetSingle(source *CreatePlanAssignmentRequest) (interface{}, bool) {
	switch fp.selector {
	case CreatePlanAssignmentRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		res := source.GetPlanAssignment()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreatePlanAssignmentRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreatePlanAssignmentRequest_FieldPathSelectorParent:
		return (*plan_assignment.ParentReference)(nil)
	case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return (*plan_assignment.PlanAssignment)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) ClearValue(item *CreatePlanAssignmentRequest) {
	if item != nil {
		switch fp.selector {
		case CreatePlanAssignmentRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
			item.PlanAssignment = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fp.selector))
		}
	}
}

func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreatePlanAssignmentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreatePlanAssignmentRequest_FieldPathSelectorParent
}

func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) WithIValue(value interface{}) CreatePlanAssignmentRequest_FieldPathValue {
	switch fp.selector {
	case CreatePlanAssignmentRequest_FieldPathSelectorParent:
		return &CreatePlanAssignmentRequest_FieldTerminalPathValue{CreatePlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.ParentReference)}
	case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return &CreatePlanAssignmentRequest_FieldTerminalPathValue{CreatePlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignment)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreatePlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov := &CreatePlanAssignmentRequest_FieldTerminalPathArrayOfValues{CreatePlanAssignmentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreatePlanAssignmentRequest_FieldPathSelectorParent:
		return &CreatePlanAssignmentRequest_FieldTerminalPathArrayOfValues{CreatePlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.ParentReference)}
	case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return &CreatePlanAssignmentRequest_FieldTerminalPathArrayOfValues{CreatePlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PlanAssignment)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreatePlanAssignmentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *CreatePlanAssignmentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreatePlanAssignmentRequest_FieldSubPath struct {
	selector CreatePlanAssignmentRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreatePlanAssignmentRequest_FieldPath = (*CreatePlanAssignmentRequest_FieldSubPath)(nil)

func (fps *CreatePlanAssignmentRequest_FieldSubPath) Selector() CreatePlanAssignmentRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreatePlanAssignmentRequest_FieldSubPath) AsPlanAssignmentSubPath() (plan_assignment.PlanAssignment_FieldPath, bool) {
	res, ok := fps.subPath.(plan_assignment.PlanAssignment_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreatePlanAssignmentRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreatePlanAssignmentRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreatePlanAssignmentRequest
func (fps *CreatePlanAssignmentRequest_FieldSubPath) Get(source *CreatePlanAssignmentRequest) (values []interface{}) {
	switch fps.selector {
	case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		values = append(values, fps.subPath.GetRaw(source.GetPlanAssignment())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fps.selector))
	}
	return
}

func (fps *CreatePlanAssignmentRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreatePlanAssignmentRequest))
}

// GetSingle returns value of selected field from source CreatePlanAssignmentRequest
func (fps *CreatePlanAssignmentRequest_FieldSubPath) GetSingle(source *CreatePlanAssignmentRequest) (interface{}, bool) {
	switch fps.selector {
	case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		if source.GetPlanAssignment() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPlanAssignment())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fps.selector))
	}
}

func (fps *CreatePlanAssignmentRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreatePlanAssignmentRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreatePlanAssignmentRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreatePlanAssignmentRequest_FieldSubPath) ClearValue(item *CreatePlanAssignmentRequest) {
	if item != nil {
		switch fps.selector {
		case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
			fps.subPath.ClearValueRaw(item.PlanAssignment)
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fps.selector))
		}
	}
}

func (fps *CreatePlanAssignmentRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreatePlanAssignmentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreatePlanAssignmentRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreatePlanAssignmentRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreatePlanAssignmentRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreatePlanAssignmentRequest_FieldSubPath) WithIValue(value interface{}) CreatePlanAssignmentRequest_FieldPathValue {
	return &CreatePlanAssignmentRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreatePlanAssignmentRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreatePlanAssignmentRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreatePlanAssignmentRequest_FieldPathArrayOfValues {
	return &CreatePlanAssignmentRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreatePlanAssignmentRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreatePlanAssignmentRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreatePlanAssignmentRequest_FieldPathArrayItemValue {
	return &CreatePlanAssignmentRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreatePlanAssignmentRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreatePlanAssignmentRequest_FieldPathValue allows storing values for CreatePlanAssignmentRequest fields according to their type
type CreatePlanAssignmentRequest_FieldPathValue interface {
	CreatePlanAssignmentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreatePlanAssignmentRequest)
	CompareWith(*CreatePlanAssignmentRequest) (cmp int, comparable bool)
}

func ParseCreatePlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) (CreatePlanAssignmentRequest_FieldPathValue, error) {
	fp, err := ParseCreatePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePlanAssignmentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreatePlanAssignmentRequest_FieldPathValue), nil
}

func MustParseCreatePlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) CreatePlanAssignmentRequest_FieldPathValue {
	fpv, err := ParseCreatePlanAssignmentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreatePlanAssignmentRequest_FieldTerminalPathValue struct {
	CreatePlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePlanAssignmentRequest_FieldPathValue = (*CreatePlanAssignmentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreatePlanAssignmentRequest' as interface{}
func (fpv *CreatePlanAssignmentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreatePlanAssignmentRequest_FieldTerminalPathValue) AsParentValue() (*plan_assignment.ParentReference, bool) {
	res, ok := fpv.value.(*plan_assignment.ParentReference)
	return res, ok
}
func (fpv *CreatePlanAssignmentRequest_FieldTerminalPathValue) AsPlanAssignmentValue() (*plan_assignment.PlanAssignment, bool) {
	res, ok := fpv.value.(*plan_assignment.PlanAssignment)
	return res, ok
}

// SetTo stores value for selected field for object CreatePlanAssignmentRequest
func (fpv *CreatePlanAssignmentRequest_FieldTerminalPathValue) SetTo(target **CreatePlanAssignmentRequest) {
	if *target == nil {
		*target = new(CreatePlanAssignmentRequest)
	}
	switch fpv.selector {
	case CreatePlanAssignmentRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*plan_assignment.ParentReference)
	case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		(*target).PlanAssignment = fpv.value.(*plan_assignment.PlanAssignment)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePlanAssignmentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePlanAssignmentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreatePlanAssignmentRequest_FieldTerminalPathValue' with the value under path in 'CreatePlanAssignmentRequest'.
func (fpv *CreatePlanAssignmentRequest_FieldTerminalPathValue) CompareWith(source *CreatePlanAssignmentRequest) (int, bool) {
	switch fpv.selector {
	case CreatePlanAssignmentRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*plan_assignment.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePlanAssignmentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreatePlanAssignmentRequest))
}

type CreatePlanAssignmentRequest_FieldSubPathValue struct {
	CreatePlanAssignmentRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreatePlanAssignmentRequest_FieldPathValue = (*CreatePlanAssignmentRequest_FieldSubPathValue)(nil)

func (fpvs *CreatePlanAssignmentRequest_FieldSubPathValue) AsPlanAssignmentPathValue() (plan_assignment.PlanAssignment_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue)
	return res, ok
}

func (fpvs *CreatePlanAssignmentRequest_FieldSubPathValue) SetTo(target **CreatePlanAssignmentRequest) {
	if *target == nil {
		*target = new(CreatePlanAssignmentRequest)
	}
	switch fpvs.Selector() {
	case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue).SetTo(&(*target).PlanAssignment)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePlanAssignmentRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePlanAssignmentRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreatePlanAssignmentRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreatePlanAssignmentRequest_FieldSubPathValue) CompareWith(source *CreatePlanAssignmentRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue).CompareWith(source.GetPlanAssignment())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePlanAssignmentRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreatePlanAssignmentRequest))
}

// CreatePlanAssignmentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreatePlanAssignmentRequest according to their type
// Present only for array (repeated) types.
type CreatePlanAssignmentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreatePlanAssignmentRequest_FieldPath
	ContainsValue(*CreatePlanAssignmentRequest) bool
}

// ParseCreatePlanAssignmentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreatePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreatePlanAssignmentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreatePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePlanAssignmentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreatePlanAssignmentRequest_FieldPathArrayItemValue), nil
}

func MustParseCreatePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreatePlanAssignmentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreatePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreatePlanAssignmentRequest_FieldTerminalPathArrayItemValue struct {
	CreatePlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePlanAssignmentRequest_FieldPathArrayItemValue = (*CreatePlanAssignmentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreatePlanAssignmentRequest as interface{}
func (fpaiv *CreatePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreatePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreatePlanAssignmentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreatePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreatePlanAssignmentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePlanAssignmentRequest'
func (fpaiv *CreatePlanAssignmentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreatePlanAssignmentRequest) bool {
	slice := fpaiv.CreatePlanAssignmentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreatePlanAssignmentRequest_FieldSubPathArrayItemValue struct {
	CreatePlanAssignmentRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreatePlanAssignmentRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreatePlanAssignmentRequest_FieldSubPathArrayItemValue) AsPlanAssignmentPathItemValue() (plan_assignment.PlanAssignment_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan_assignment.PlanAssignment_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePlanAssignmentRequest'
func (fpaivs *CreatePlanAssignmentRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreatePlanAssignmentRequest) bool {
	switch fpaivs.Selector() {
	case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return fpaivs.subPathItemValue.(plan_assignment.PlanAssignment_FieldPathArrayItemValue).ContainsValue(source.GetPlanAssignment())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePlanAssignmentRequest: %d", fpaivs.Selector()))
	}
}

// CreatePlanAssignmentRequest_FieldPathArrayOfValues allows storing slice of values for CreatePlanAssignmentRequest fields according to their type
type CreatePlanAssignmentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreatePlanAssignmentRequest_FieldPath
}

func ParseCreatePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreatePlanAssignmentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreatePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePlanAssignmentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreatePlanAssignmentRequest_FieldPathArrayOfValues), nil
}

func MustParseCreatePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreatePlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreatePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreatePlanAssignmentRequest_FieldTerminalPathArrayOfValues struct {
	CreatePlanAssignmentRequest_FieldTerminalPath
	values interface{}
}

var _ CreatePlanAssignmentRequest_FieldPathArrayOfValues = (*CreatePlanAssignmentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreatePlanAssignmentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreatePlanAssignmentRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*plan_assignment.ParentReference) {
			values = append(values, v)
		}
	case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		for _, v := range fpaov.values.([]*plan_assignment.PlanAssignment) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreatePlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*plan_assignment.ParentReference, bool) {
	res, ok := fpaov.values.([]*plan_assignment.ParentReference)
	return res, ok
}
func (fpaov *CreatePlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsPlanAssignmentArrayOfValues() ([]*plan_assignment.PlanAssignment, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PlanAssignment)
	return res, ok
}

type CreatePlanAssignmentRequest_FieldSubPathArrayOfValues struct {
	CreatePlanAssignmentRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreatePlanAssignmentRequest_FieldPathArrayOfValues = (*CreatePlanAssignmentRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreatePlanAssignmentRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreatePlanAssignmentRequest_FieldSubPathArrayOfValues) AsPlanAssignmentPathArrayOfValues() (plan_assignment.PlanAssignment_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan_assignment.PlanAssignment_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePlanAssignmentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePlanAssignmentRequest_FieldPathSelector
	Get(source *UpdatePlanAssignmentRequest) []interface{}
	GetSingle(source *UpdatePlanAssignmentRequest) (interface{}, bool)
	ClearValue(item *UpdatePlanAssignmentRequest)

	// Those methods build corresponding UpdatePlanAssignmentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePlanAssignmentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePlanAssignmentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePlanAssignmentRequest_FieldPathArrayItemValue
}

type UpdatePlanAssignmentRequest_FieldPathSelector int32

const (
	UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment UpdatePlanAssignmentRequest_FieldPathSelector = 0
	UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask     UpdatePlanAssignmentRequest_FieldPathSelector = 1
	UpdatePlanAssignmentRequest_FieldPathSelectorCas            UpdatePlanAssignmentRequest_FieldPathSelector = 2
	UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing   UpdatePlanAssignmentRequest_FieldPathSelector = 3
)

func (s UpdatePlanAssignmentRequest_FieldPathSelector) String() string {
	switch s {
	case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return "plan_assignment"
	case UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
		return "cas"
	case UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing:
		return "allow_missing"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", s))
	}
}

func BuildUpdatePlanAssignmentRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdatePlanAssignmentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePlanAssignmentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plan_assignment", "planAssignment", "plan-assignment":
			return &UpdatePlanAssignmentRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdatePlanAssignmentRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdatePlanAssignmentRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorCas}, nil
		case "allow_missing", "allowMissing", "allow-missing":
			return &UpdatePlanAssignmentRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing}, nil
		}
	} else {
		switch fp[0] {
		case "plan_assignment", "planAssignment", "plan-assignment":
			if subpath, err := plan_assignment.BuildPlanAssignment_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePlanAssignmentRequest_FieldSubPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdatePlanAssignmentRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePlanAssignmentRequest_FieldSubPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePlanAssignmentRequest", fp)
}

func ParseUpdatePlanAssignmentRequest_FieldPath(rawField string) (UpdatePlanAssignmentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePlanAssignmentRequest_FieldPath(fp)
}

func MustParseUpdatePlanAssignmentRequest_FieldPath(rawField string) UpdatePlanAssignmentRequest_FieldPath {
	fp, err := ParseUpdatePlanAssignmentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePlanAssignmentRequest_FieldTerminalPath struct {
	selector UpdatePlanAssignmentRequest_FieldPathSelector
}

var _ UpdatePlanAssignmentRequest_FieldPath = (*UpdatePlanAssignmentRequest_FieldTerminalPath)(nil)

func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) Selector() UpdatePlanAssignmentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePlanAssignmentRequest
func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) Get(source *UpdatePlanAssignmentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
			if source.PlanAssignment != nil {
				values = append(values, source.PlanAssignment)
			}
		case UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		case UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing:
			values = append(values, source.AllowMissing)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePlanAssignmentRequest))
}

// GetSingle returns value pointed by specific field of from source UpdatePlanAssignmentRequest
func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) GetSingle(source *UpdatePlanAssignmentRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		res := source.GetPlanAssignment()
		return res, res != nil
	case UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	case UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing:
		return source.GetAllowMissing(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePlanAssignmentRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return (*plan_assignment.PlanAssignment)(nil)
	case UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask:
		return (*plan_assignment.PlanAssignment_FieldMask)(nil)
	case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
		return (*UpdatePlanAssignmentRequest_CAS)(nil)
	case UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) ClearValue(item *UpdatePlanAssignmentRequest) {
	if item != nil {
		switch fp.selector {
		case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
			item.PlanAssignment = nil
		case UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
			item.Cas = nil
		case UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing:
			item.AllowMissing = false
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePlanAssignmentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask ||
		fp.selector == UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing
}

func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) WithIValue(value interface{}) UpdatePlanAssignmentRequest_FieldPathValue {
	switch fp.selector {
	case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return &UpdatePlanAssignmentRequest_FieldTerminalPathValue{UpdatePlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignment)}
	case UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask:
		return &UpdatePlanAssignmentRequest_FieldTerminalPathValue{UpdatePlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignment_FieldMask)}
	case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
		return &UpdatePlanAssignmentRequest_FieldTerminalPathValue{UpdatePlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*UpdatePlanAssignmentRequest_CAS)}
	case UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing:
		return &UpdatePlanAssignmentRequest_FieldTerminalPathValue{UpdatePlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov := &UpdatePlanAssignmentRequest_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return &UpdatePlanAssignmentRequest_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PlanAssignment)}
	case UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask:
		return &UpdatePlanAssignmentRequest_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PlanAssignment_FieldMask)}
	case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
		return &UpdatePlanAssignmentRequest_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*UpdatePlanAssignmentRequest_CAS)}
	case UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing:
		return &UpdatePlanAssignmentRequest_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePlanAssignmentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePlanAssignmentRequest_FieldSubPath struct {
	selector UpdatePlanAssignmentRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePlanAssignmentRequest_FieldPath = (*UpdatePlanAssignmentRequest_FieldSubPath)(nil)

func (fps *UpdatePlanAssignmentRequest_FieldSubPath) Selector() UpdatePlanAssignmentRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePlanAssignmentRequest_FieldSubPath) AsPlanAssignmentSubPath() (plan_assignment.PlanAssignment_FieldPath, bool) {
	res, ok := fps.subPath.(plan_assignment.PlanAssignment_FieldPath)
	return res, ok
}
func (fps *UpdatePlanAssignmentRequest_FieldSubPath) AsCasSubPath() (UpdatePlanAssignmentRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdatePlanAssignmentRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePlanAssignmentRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePlanAssignmentRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePlanAssignmentRequest
func (fps *UpdatePlanAssignmentRequest_FieldSubPath) Get(source *UpdatePlanAssignmentRequest) (values []interface{}) {
	switch fps.selector {
	case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		values = append(values, fps.subPath.GetRaw(source.GetPlanAssignment())...)
	case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdatePlanAssignmentRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePlanAssignmentRequest))
}

// GetSingle returns value of selected field from source UpdatePlanAssignmentRequest
func (fps *UpdatePlanAssignmentRequest_FieldSubPath) GetSingle(source *UpdatePlanAssignmentRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		if source.GetPlanAssignment() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPlanAssignment())
	case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fps.selector))
	}
}

func (fps *UpdatePlanAssignmentRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePlanAssignmentRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePlanAssignmentRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePlanAssignmentRequest_FieldSubPath) ClearValue(item *UpdatePlanAssignmentRequest) {
	if item != nil {
		switch fps.selector {
		case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
			fps.subPath.ClearValueRaw(item.PlanAssignment)
		case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdatePlanAssignmentRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePlanAssignmentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePlanAssignmentRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePlanAssignmentRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdatePlanAssignmentRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdatePlanAssignmentRequest_FieldSubPath) WithIValue(value interface{}) UpdatePlanAssignmentRequest_FieldPathValue {
	return &UpdatePlanAssignmentRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePlanAssignmentRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePlanAssignmentRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePlanAssignmentRequest_FieldPathArrayOfValues {
	return &UpdatePlanAssignmentRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePlanAssignmentRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePlanAssignmentRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePlanAssignmentRequest_FieldPathArrayItemValue {
	return &UpdatePlanAssignmentRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePlanAssignmentRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePlanAssignmentRequest_FieldPathValue allows storing values for UpdatePlanAssignmentRequest fields according to their type
type UpdatePlanAssignmentRequest_FieldPathValue interface {
	UpdatePlanAssignmentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePlanAssignmentRequest)
	CompareWith(*UpdatePlanAssignmentRequest) (cmp int, comparable bool)
}

func ParseUpdatePlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) (UpdatePlanAssignmentRequest_FieldPathValue, error) {
	fp, err := ParseUpdatePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePlanAssignmentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePlanAssignmentRequest_FieldPathValue), nil
}

func MustParseUpdatePlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) UpdatePlanAssignmentRequest_FieldPathValue {
	fpv, err := ParseUpdatePlanAssignmentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePlanAssignmentRequest_FieldTerminalPathValue struct {
	UpdatePlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePlanAssignmentRequest_FieldPathValue = (*UpdatePlanAssignmentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdatePlanAssignmentRequest' as interface{}
func (fpv *UpdatePlanAssignmentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePlanAssignmentRequest_FieldTerminalPathValue) AsPlanAssignmentValue() (*plan_assignment.PlanAssignment, bool) {
	res, ok := fpv.value.(*plan_assignment.PlanAssignment)
	return res, ok
}
func (fpv *UpdatePlanAssignmentRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}
func (fpv *UpdatePlanAssignmentRequest_FieldTerminalPathValue) AsCasValue() (*UpdatePlanAssignmentRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdatePlanAssignmentRequest_CAS)
	return res, ok
}
func (fpv *UpdatePlanAssignmentRequest_FieldTerminalPathValue) AsAllowMissingValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object UpdatePlanAssignmentRequest
func (fpv *UpdatePlanAssignmentRequest_FieldTerminalPathValue) SetTo(target **UpdatePlanAssignmentRequest) {
	if *target == nil {
		*target = new(UpdatePlanAssignmentRequest)
	}
	switch fpv.selector {
	case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		(*target).PlanAssignment = fpv.value.(*plan_assignment.PlanAssignment)
	case UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdatePlanAssignmentRequest_CAS)
	case UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing:
		(*target).AllowMissing = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePlanAssignmentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePlanAssignmentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePlanAssignmentRequest_FieldTerminalPathValue' with the value under path in 'UpdatePlanAssignmentRequest'.
func (fpv *UpdatePlanAssignmentRequest_FieldTerminalPathValue) CompareWith(source *UpdatePlanAssignmentRequest) (int, bool) {
	switch fpv.selector {
	case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return 0, false
	case UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
		return 0, false
	case UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAllowMissing()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePlanAssignmentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePlanAssignmentRequest))
}

type UpdatePlanAssignmentRequest_FieldSubPathValue struct {
	UpdatePlanAssignmentRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePlanAssignmentRequest_FieldPathValue = (*UpdatePlanAssignmentRequest_FieldSubPathValue)(nil)

func (fpvs *UpdatePlanAssignmentRequest_FieldSubPathValue) AsPlanAssignmentPathValue() (plan_assignment.PlanAssignment_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue)
	return res, ok
}
func (fpvs *UpdatePlanAssignmentRequest_FieldSubPathValue) AsCasPathValue() (UpdatePlanAssignmentRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdatePlanAssignmentRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePlanAssignmentRequest_FieldSubPathValue) SetTo(target **UpdatePlanAssignmentRequest) {
	if *target == nil {
		*target = new(UpdatePlanAssignmentRequest)
	}
	switch fpvs.Selector() {
	case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue).SetTo(&(*target).PlanAssignment)
	case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdatePlanAssignmentRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePlanAssignmentRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePlanAssignmentRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePlanAssignmentRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePlanAssignmentRequest_FieldSubPathValue) CompareWith(source *UpdatePlanAssignmentRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue).CompareWith(source.GetPlanAssignment())
	case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdatePlanAssignmentRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePlanAssignmentRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePlanAssignmentRequest))
}

// UpdatePlanAssignmentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdatePlanAssignmentRequest according to their type
// Present only for array (repeated) types.
type UpdatePlanAssignmentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePlanAssignmentRequest_FieldPath
	ContainsValue(*UpdatePlanAssignmentRequest) bool
}

// ParseUpdatePlanAssignmentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePlanAssignmentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePlanAssignmentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePlanAssignmentRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdatePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePlanAssignmentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePlanAssignmentRequest_FieldTerminalPathArrayItemValue struct {
	UpdatePlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePlanAssignmentRequest_FieldPathArrayItemValue = (*UpdatePlanAssignmentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePlanAssignmentRequest as interface{}
func (fpaiv *UpdatePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePlanAssignmentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePlanAssignmentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePlanAssignmentRequest'
func (fpaiv *UpdatePlanAssignmentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePlanAssignmentRequest) bool {
	slice := fpaiv.UpdatePlanAssignmentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePlanAssignmentRequest_FieldSubPathArrayItemValue struct {
	UpdatePlanAssignmentRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePlanAssignmentRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePlanAssignmentRequest_FieldSubPathArrayItemValue) AsPlanAssignmentPathItemValue() (plan_assignment.PlanAssignment_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan_assignment.PlanAssignment_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdatePlanAssignmentRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePlanAssignmentRequest'
func (fpaivs *UpdatePlanAssignmentRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePlanAssignmentRequest) bool {
	switch fpaivs.Selector() {
	case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return fpaivs.subPathItemValue.(plan_assignment.PlanAssignment_FieldPathArrayItemValue).ContainsValue(source.GetPlanAssignment())
	case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest: %d", fpaivs.Selector()))
	}
}

// UpdatePlanAssignmentRequest_FieldPathArrayOfValues allows storing slice of values for UpdatePlanAssignmentRequest fields according to their type
type UpdatePlanAssignmentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePlanAssignmentRequest_FieldPath
}

func ParseUpdatePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePlanAssignmentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePlanAssignmentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePlanAssignmentRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdatePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePlanAssignmentRequest_FieldTerminalPathArrayOfValues struct {
	UpdatePlanAssignmentRequest_FieldTerminalPath
	values interface{}
}

var _ UpdatePlanAssignmentRequest_FieldPathArrayOfValues = (*UpdatePlanAssignmentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePlanAssignmentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		for _, v := range fpaov.values.([]*plan_assignment.PlanAssignment) {
			values = append(values, v)
		}
	case UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask) {
			values = append(values, v)
		}
	case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdatePlanAssignmentRequest_CAS) {
			values = append(values, v)
		}
	case UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsPlanAssignmentArrayOfValues() ([]*plan_assignment.PlanAssignment, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PlanAssignment)
	return res, ok
}
func (fpaov *UpdatePlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}
func (fpaov *UpdatePlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdatePlanAssignmentRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdatePlanAssignmentRequest_CAS)
	return res, ok
}
func (fpaov *UpdatePlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsAllowMissingArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type UpdatePlanAssignmentRequest_FieldSubPathArrayOfValues struct {
	UpdatePlanAssignmentRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePlanAssignmentRequest_FieldPathArrayOfValues = (*UpdatePlanAssignmentRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePlanAssignmentRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePlanAssignmentRequest_FieldSubPathArrayOfValues) AsPlanAssignmentPathArrayOfValues() (plan_assignment.PlanAssignment_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan_assignment.PlanAssignment_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdatePlanAssignmentRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePlanAssignmentRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePlanAssignmentRequestCAS_FieldPathSelector
	Get(source *UpdatePlanAssignmentRequest_CAS) []interface{}
	GetSingle(source *UpdatePlanAssignmentRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdatePlanAssignmentRequest_CAS)

	// Those methods build corresponding UpdatePlanAssignmentRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePlanAssignmentRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue
}

type UpdatePlanAssignmentRequestCAS_FieldPathSelector int32

const (
	UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState UpdatePlanAssignmentRequestCAS_FieldPathSelector = 0
	UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask        UpdatePlanAssignmentRequestCAS_FieldPathSelector = 1
)

func (s UpdatePlanAssignmentRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", s))
	}
}

func BuildUpdatePlanAssignmentRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdatePlanAssignmentRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePlanAssignmentRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdatePlanAssignmentRequestCAS_FieldTerminalPath{selector: UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdatePlanAssignmentRequestCAS_FieldTerminalPath{selector: UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := plan_assignment.BuildPlanAssignment_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePlanAssignmentRequestCAS_FieldSubPath{selector: UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePlanAssignmentRequest_CAS", fp)
}

func ParseUpdatePlanAssignmentRequestCAS_FieldPath(rawField string) (UpdatePlanAssignmentRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePlanAssignmentRequestCAS_FieldPath(fp)
}

func MustParseUpdatePlanAssignmentRequestCAS_FieldPath(rawField string) UpdatePlanAssignmentRequestCAS_FieldPath {
	fp, err := ParseUpdatePlanAssignmentRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePlanAssignmentRequestCAS_FieldTerminalPath struct {
	selector UpdatePlanAssignmentRequestCAS_FieldPathSelector
}

var _ UpdatePlanAssignmentRequestCAS_FieldPath = (*UpdatePlanAssignmentRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) Selector() UpdatePlanAssignmentRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePlanAssignmentRequest_CAS
func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) Get(source *UpdatePlanAssignmentRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePlanAssignmentRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdatePlanAssignmentRequest_CAS
func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) GetSingle(source *UpdatePlanAssignmentRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePlanAssignmentRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
		return (*plan_assignment.PlanAssignment)(nil)
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask:
		return (*plan_assignment.PlanAssignment_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) ClearValue(item *UpdatePlanAssignmentRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePlanAssignmentRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdatePlanAssignmentRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePlanAssignmentRequestCAS_FieldTerminalPathValue{UpdatePlanAssignmentRequestCAS_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignment)}
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePlanAssignmentRequestCAS_FieldTerminalPathValue{UpdatePlanAssignmentRequestCAS_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignment_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequestCAS_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PlanAssignment)}
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayOfValues{UpdatePlanAssignmentRequestCAS_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PlanAssignment_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePlanAssignmentRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePlanAssignmentRequestCAS_FieldSubPath struct {
	selector UpdatePlanAssignmentRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePlanAssignmentRequestCAS_FieldPath = (*UpdatePlanAssignmentRequestCAS_FieldSubPath)(nil)

func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) Selector() UpdatePlanAssignmentRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) AsConditionalStateSubPath() (plan_assignment.PlanAssignment_FieldPath, bool) {
	res, ok := fps.subPath.(plan_assignment.PlanAssignment_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePlanAssignmentRequest_CAS
func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) Get(source *UpdatePlanAssignmentRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePlanAssignmentRequest_CAS))
}

// GetSingle returns value of selected field from source UpdatePlanAssignmentRequest_CAS
func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) GetSingle(source *UpdatePlanAssignmentRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePlanAssignmentRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) ClearValue(item *UpdatePlanAssignmentRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePlanAssignmentRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdatePlanAssignmentRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdatePlanAssignmentRequestCAS_FieldPathValue {
	return &UpdatePlanAssignmentRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues {
	return &UpdatePlanAssignmentRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue {
	return &UpdatePlanAssignmentRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePlanAssignmentRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePlanAssignmentRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdatePlanAssignmentRequestCAS_FieldPathValue interface {
	UpdatePlanAssignmentRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePlanAssignmentRequest_CAS)
	CompareWith(*UpdatePlanAssignmentRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdatePlanAssignmentRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdatePlanAssignmentRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdatePlanAssignmentRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePlanAssignmentRequestCAS_FieldPathValue), nil
}

func MustParseUpdatePlanAssignmentRequestCAS_FieldPathValue(pathStr, valueStr string) UpdatePlanAssignmentRequestCAS_FieldPathValue {
	fpv, err := ParseUpdatePlanAssignmentRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePlanAssignmentRequestCAS_FieldTerminalPathValue struct {
	UpdatePlanAssignmentRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePlanAssignmentRequestCAS_FieldPathValue = (*UpdatePlanAssignmentRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdatePlanAssignmentRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePlanAssignmentRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*plan_assignment.PlanAssignment, bool) {
	res, ok := fpv.value.(*plan_assignment.PlanAssignment)
	return res, ok
}
func (fpv *UpdatePlanAssignmentRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdatePlanAssignmentRequestCAS_FieldTerminalPathValue) SetTo(target **UpdatePlanAssignmentRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePlanAssignmentRequest_CAS)
	}
	switch fpv.selector {
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*plan_assignment.PlanAssignment)
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*plan_assignment.PlanAssignment_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePlanAssignmentRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePlanAssignmentRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePlanAssignmentRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdatePlanAssignmentRequest_CAS'.
func (fpv *UpdatePlanAssignmentRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdatePlanAssignmentRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePlanAssignmentRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePlanAssignmentRequest_CAS))
}

type UpdatePlanAssignmentRequestCAS_FieldSubPathValue struct {
	UpdatePlanAssignmentRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePlanAssignmentRequestCAS_FieldPathValue = (*UpdatePlanAssignmentRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdatePlanAssignmentRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (plan_assignment.PlanAssignment_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePlanAssignmentRequestCAS_FieldSubPathValue) SetTo(target **UpdatePlanAssignmentRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePlanAssignmentRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePlanAssignmentRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePlanAssignmentRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePlanAssignmentRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePlanAssignmentRequestCAS_FieldSubPathValue) CompareWith(source *UpdatePlanAssignmentRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePlanAssignmentRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePlanAssignmentRequest_CAS))
}

// UpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePlanAssignmentRequestCAS_FieldPath
	ContainsValue(*UpdatePlanAssignmentRequest_CAS) bool
}

// ParseUpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePlanAssignmentRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdatePlanAssignmentRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePlanAssignmentRequestCAS_FieldPathArrayItemValue = (*UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePlanAssignmentRequest_CAS as interface{}
func (fpaiv *UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePlanAssignmentRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePlanAssignmentRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePlanAssignmentRequest_CAS) bool {
	slice := fpaiv.UpdatePlanAssignmentRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePlanAssignmentRequestCAS_FieldSubPathArrayItemValue struct {
	UpdatePlanAssignmentRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePlanAssignmentRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePlanAssignmentRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (plan_assignment.PlanAssignment_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan_assignment.PlanAssignment_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdatePlanAssignmentRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePlanAssignmentRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(plan_assignment.PlanAssignment_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePlanAssignmentRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePlanAssignmentRequestCAS_FieldPath
}

func ParseUpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePlanAssignmentRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdatePlanAssignmentRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues = (*UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*plan_assignment.PlanAssignment) {
			values = append(values, v)
		}
	case UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*plan_assignment.PlanAssignment, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PlanAssignment)
	return res, ok
}
func (fpaov *UpdatePlanAssignmentRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*plan_assignment.PlanAssignment_FieldMask, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PlanAssignment_FieldMask)
	return res, ok
}

type UpdatePlanAssignmentRequestCAS_FieldSubPathArrayOfValues struct {
	UpdatePlanAssignmentRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePlanAssignmentRequestCAS_FieldPathArrayOfValues = (*UpdatePlanAssignmentRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePlanAssignmentRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePlanAssignmentRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (plan_assignment.PlanAssignment_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan_assignment.PlanAssignment_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeletePlanAssignmentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeletePlanAssignmentRequest_FieldPathSelector
	Get(source *DeletePlanAssignmentRequest) []interface{}
	GetSingle(source *DeletePlanAssignmentRequest) (interface{}, bool)
	ClearValue(item *DeletePlanAssignmentRequest)

	// Those methods build corresponding DeletePlanAssignmentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeletePlanAssignmentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeletePlanAssignmentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeletePlanAssignmentRequest_FieldPathArrayItemValue
}

type DeletePlanAssignmentRequest_FieldPathSelector int32

const (
	DeletePlanAssignmentRequest_FieldPathSelectorName DeletePlanAssignmentRequest_FieldPathSelector = 0
)

func (s DeletePlanAssignmentRequest_FieldPathSelector) String() string {
	switch s {
	case DeletePlanAssignmentRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequest: %d", s))
	}
}

func BuildDeletePlanAssignmentRequest_FieldPath(fp gotenobject.RawFieldPath) (DeletePlanAssignmentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeletePlanAssignmentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeletePlanAssignmentRequest_FieldTerminalPath{selector: DeletePlanAssignmentRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeletePlanAssignmentRequest", fp)
}

func ParseDeletePlanAssignmentRequest_FieldPath(rawField string) (DeletePlanAssignmentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeletePlanAssignmentRequest_FieldPath(fp)
}

func MustParseDeletePlanAssignmentRequest_FieldPath(rawField string) DeletePlanAssignmentRequest_FieldPath {
	fp, err := ParseDeletePlanAssignmentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeletePlanAssignmentRequest_FieldTerminalPath struct {
	selector DeletePlanAssignmentRequest_FieldPathSelector
}

var _ DeletePlanAssignmentRequest_FieldPath = (*DeletePlanAssignmentRequest_FieldTerminalPath)(nil)

func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) Selector() DeletePlanAssignmentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeletePlanAssignmentRequest
func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) Get(source *DeletePlanAssignmentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeletePlanAssignmentRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeletePlanAssignmentRequest))
}

// GetSingle returns value pointed by specific field of from source DeletePlanAssignmentRequest
func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) GetSingle(source *DeletePlanAssignmentRequest) (interface{}, bool) {
	switch fp.selector {
	case DeletePlanAssignmentRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeletePlanAssignmentRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeletePlanAssignmentRequest_FieldPathSelectorName:
		return (*plan_assignment.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) ClearValue(item *DeletePlanAssignmentRequest) {
	if item != nil {
		switch fp.selector {
		case DeletePlanAssignmentRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequest: %d", fp.selector))
		}
	}
}

func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeletePlanAssignmentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeletePlanAssignmentRequest_FieldPathSelectorName
}

func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) WithIValue(value interface{}) DeletePlanAssignmentRequest_FieldPathValue {
	switch fp.selector {
	case DeletePlanAssignmentRequest_FieldPathSelectorName:
		return &DeletePlanAssignmentRequest_FieldTerminalPathValue{DeletePlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeletePlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov := &DeletePlanAssignmentRequest_FieldTerminalPathArrayOfValues{DeletePlanAssignmentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeletePlanAssignmentRequest_FieldPathSelectorName:
		return &DeletePlanAssignmentRequest_FieldTerminalPathArrayOfValues{DeletePlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeletePlanAssignmentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *DeletePlanAssignmentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeletePlanAssignmentRequest_FieldPathValue allows storing values for DeletePlanAssignmentRequest fields according to their type
type DeletePlanAssignmentRequest_FieldPathValue interface {
	DeletePlanAssignmentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeletePlanAssignmentRequest)
	CompareWith(*DeletePlanAssignmentRequest) (cmp int, comparable bool)
}

func ParseDeletePlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) (DeletePlanAssignmentRequest_FieldPathValue, error) {
	fp, err := ParseDeletePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePlanAssignmentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeletePlanAssignmentRequest_FieldPathValue), nil
}

func MustParseDeletePlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) DeletePlanAssignmentRequest_FieldPathValue {
	fpv, err := ParseDeletePlanAssignmentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeletePlanAssignmentRequest_FieldTerminalPathValue struct {
	DeletePlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePlanAssignmentRequest_FieldPathValue = (*DeletePlanAssignmentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeletePlanAssignmentRequest' as interface{}
func (fpv *DeletePlanAssignmentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeletePlanAssignmentRequest_FieldTerminalPathValue) AsNameValue() (*plan_assignment.Reference, bool) {
	res, ok := fpv.value.(*plan_assignment.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeletePlanAssignmentRequest
func (fpv *DeletePlanAssignmentRequest_FieldTerminalPathValue) SetTo(target **DeletePlanAssignmentRequest) {
	if *target == nil {
		*target = new(DeletePlanAssignmentRequest)
	}
	switch fpv.selector {
	case DeletePlanAssignmentRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*plan_assignment.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePlanAssignmentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeletePlanAssignmentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeletePlanAssignmentRequest_FieldTerminalPathValue' with the value under path in 'DeletePlanAssignmentRequest'.
func (fpv *DeletePlanAssignmentRequest_FieldTerminalPathValue) CompareWith(source *DeletePlanAssignmentRequest) (int, bool) {
	switch fpv.selector {
	case DeletePlanAssignmentRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*plan_assignment.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePlanAssignmentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeletePlanAssignmentRequest))
}

// DeletePlanAssignmentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeletePlanAssignmentRequest according to their type
// Present only for array (repeated) types.
type DeletePlanAssignmentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeletePlanAssignmentRequest_FieldPath
	ContainsValue(*DeletePlanAssignmentRequest) bool
}

// ParseDeletePlanAssignmentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeletePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeletePlanAssignmentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeletePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePlanAssignmentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeletePlanAssignmentRequest_FieldPathArrayItemValue), nil
}

func MustParseDeletePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeletePlanAssignmentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeletePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeletePlanAssignmentRequest_FieldTerminalPathArrayItemValue struct {
	DeletePlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePlanAssignmentRequest_FieldPathArrayItemValue = (*DeletePlanAssignmentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeletePlanAssignmentRequest as interface{}
func (fpaiv *DeletePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeletePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeletePlanAssignmentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeletePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeletePlanAssignmentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeletePlanAssignmentRequest'
func (fpaiv *DeletePlanAssignmentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeletePlanAssignmentRequest) bool {
	slice := fpaiv.DeletePlanAssignmentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeletePlanAssignmentRequest_FieldPathArrayOfValues allows storing slice of values for DeletePlanAssignmentRequest fields according to their type
type DeletePlanAssignmentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeletePlanAssignmentRequest_FieldPath
}

func ParseDeletePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeletePlanAssignmentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeletePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePlanAssignmentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeletePlanAssignmentRequest_FieldPathArrayOfValues), nil
}

func MustParseDeletePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeletePlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeletePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeletePlanAssignmentRequest_FieldTerminalPathArrayOfValues struct {
	DeletePlanAssignmentRequest_FieldTerminalPath
	values interface{}
}

var _ DeletePlanAssignmentRequest_FieldPathArrayOfValues = (*DeletePlanAssignmentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeletePlanAssignmentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeletePlanAssignmentRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*plan_assignment.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeletePlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*plan_assignment.Reference, bool) {
	res, ok := fpaov.values.([]*plan_assignment.Reference)
	return res, ok
}
