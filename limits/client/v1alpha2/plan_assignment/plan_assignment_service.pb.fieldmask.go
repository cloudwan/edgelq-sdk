// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/plan_assignment_service.proto
// DO NOT EDIT!!!

package plan_assignment_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	plan_assignment "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan_assignment"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &plan_assignment.PlanAssignment{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

type GetPlanAssignmentRequest_FieldMask struct {
	Paths []GetPlanAssignmentRequest_FieldPath
}

func FullGetPlanAssignmentRequest_FieldMask() *GetPlanAssignmentRequest_FieldMask {
	res := &GetPlanAssignmentRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetPlanAssignmentRequest_FieldTerminalPath{selector: GetPlanAssignmentRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetPlanAssignmentRequest_FieldTerminalPath{selector: GetPlanAssignmentRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetPlanAssignmentRequest_FieldTerminalPath{selector: GetPlanAssignmentRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetPlanAssignmentRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetPlanAssignmentRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetPlanAssignmentRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetPlanAssignmentRequest_FieldPath(raw)
	})
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) Subtract(other *GetPlanAssignmentRequest_FieldMask) *GetPlanAssignmentRequest_FieldMask {
	result := &GetPlanAssignmentRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetPlanAssignmentRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetPlanAssignmentRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetPlanAssignmentRequest_FieldMask) FilterInputFields() *GetPlanAssignmentRequest_FieldMask {
	result := &GetPlanAssignmentRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetPlanAssignmentRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetPlanAssignmentRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetPlanAssignmentRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetPlanAssignmentRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetPlanAssignmentRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) AppendPath(path GetPlanAssignmentRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetPlanAssignmentRequest_FieldPath))
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) GetPaths() []GetPlanAssignmentRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetPlanAssignmentRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) Set(target, source *GetPlanAssignmentRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetPlanAssignmentRequest), source.(*GetPlanAssignmentRequest))
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) Project(source *GetPlanAssignmentRequest) *GetPlanAssignmentRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetPlanAssignmentRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetPlanAssignmentRequest_FieldTerminalPath:
			switch tp.selector {
			case GetPlanAssignmentRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetPlanAssignmentRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetPlanAssignmentRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetPlanAssignmentRequest))
}

func (fieldMask *GetPlanAssignmentRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetPlanAssignmentsRequest_FieldMask struct {
	Paths []BatchGetPlanAssignmentsRequest_FieldPath
}

func FullBatchGetPlanAssignmentsRequest_FieldMask() *BatchGetPlanAssignmentsRequest_FieldMask {
	res := &BatchGetPlanAssignmentsRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetPlanAssignmentsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentsRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetPlanAssignmentsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetPlanAssignmentsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetPlanAssignmentsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetPlanAssignmentsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetPlanAssignmentsRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) Subtract(other *BatchGetPlanAssignmentsRequest_FieldMask) *BatchGetPlanAssignmentsRequest_FieldMask {
	result := &BatchGetPlanAssignmentsRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetPlanAssignmentsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetPlanAssignmentsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) FilterInputFields() *BatchGetPlanAssignmentsRequest_FieldMask {
	result := &BatchGetPlanAssignmentsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetPlanAssignmentsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetPlanAssignmentsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetPlanAssignmentsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetPlanAssignmentsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) AppendPath(path BatchGetPlanAssignmentsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetPlanAssignmentsRequest_FieldPath))
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) GetPaths() []BatchGetPlanAssignmentsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetPlanAssignmentsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) Set(target, source *BatchGetPlanAssignmentsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetPlanAssignmentsRequest), source.(*BatchGetPlanAssignmentsRequest))
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) Project(source *BatchGetPlanAssignmentsRequest) *BatchGetPlanAssignmentsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetPlanAssignmentsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetPlanAssignmentsRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetPlanAssignmentsRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetPlanAssignmentsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetPlanAssignmentsRequest))
}

func (fieldMask *BatchGetPlanAssignmentsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetPlanAssignmentsResponse_FieldMask struct {
	Paths []BatchGetPlanAssignmentsResponse_FieldPath
}

func FullBatchGetPlanAssignmentsResponse_FieldMask() *BatchGetPlanAssignmentsResponse_FieldMask {
	res := &BatchGetPlanAssignmentsResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetPlanAssignmentsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments})
	res.Paths = append(res.Paths, &BatchGetPlanAssignmentsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetPlanAssignmentsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetPlanAssignmentsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetPlanAssignmentsResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) Subtract(other *BatchGetPlanAssignmentsResponse_FieldMask) *BatchGetPlanAssignmentsResponse_FieldMask {
	result := &BatchGetPlanAssignmentsResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetPlanAssignmentsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments: &plan_assignment.PlanAssignment_FieldMask{},
	}
	mySubMasks := map[BatchGetPlanAssignmentsResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments: &plan_assignment.PlanAssignment_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetPlanAssignmentsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetPlanAssignmentsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetPlanAssignmentsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
						mySubMasks[BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments] = plan_assignment.FullPlanAssignment_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetPlanAssignmentsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetPlanAssignmentsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetPlanAssignmentsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) FilterInputFields() *BatchGetPlanAssignmentsResponse_FieldMask {
	result := &BatchGetPlanAssignmentsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
			if _, ok := path.(*BatchGetPlanAssignmentsResponse_FieldTerminalPath); ok {
				for _, subpath := range plan_assignment.FullPlanAssignment_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetPlanAssignmentsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetPlanAssignmentsResponse_FieldSubPath); ok {
				selectedMask := &plan_assignment.PlanAssignment_FieldMask{
					Paths: []plan_assignment.PlanAssignment_FieldPath{sub.subPath.(plan_assignment.PlanAssignment_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetPlanAssignmentsResponse_FieldSubPath{selector: BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetPlanAssignmentsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetPlanAssignmentsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetPlanAssignmentsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetPlanAssignmentsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) AppendPath(path BatchGetPlanAssignmentsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetPlanAssignmentsResponse_FieldPath))
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) GetPaths() []BatchGetPlanAssignmentsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetPlanAssignmentsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) Set(target, source *BatchGetPlanAssignmentsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetPlanAssignmentsResponse), source.(*BatchGetPlanAssignmentsResponse))
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) Project(source *BatchGetPlanAssignmentsResponse) *BatchGetPlanAssignmentsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetPlanAssignmentsResponse{}
	planAssignmentsMask := &plan_assignment.PlanAssignment_FieldMask{}
	wholePlanAssignmentsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetPlanAssignmentsResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
				result.PlanAssignments = source.PlanAssignments
				wholePlanAssignmentsAccepted = true
			case BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetPlanAssignmentsResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
				planAssignmentsMask.AppendPath(tp.subPath.(plan_assignment.PlanAssignment_FieldPath))
			}
		}
	}
	if wholePlanAssignmentsAccepted == false && len(planAssignmentsMask.Paths) > 0 {
		for _, sourceItem := range source.GetPlanAssignments() {
			result.PlanAssignments = append(result.PlanAssignments, planAssignmentsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetPlanAssignmentsResponse))
}

func (fieldMask *BatchGetPlanAssignmentsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListPlanAssignmentsRequest_FieldMask struct {
	Paths []ListPlanAssignmentsRequest_FieldPath
}

func FullListPlanAssignmentsRequest_FieldMask() *ListPlanAssignmentsRequest_FieldMask {
	res := &ListPlanAssignmentsRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListPlanAssignmentsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListPlanAssignmentsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListPlanAssignmentsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListPlanAssignmentsRequest_FieldPath(raw)
	})
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) Subtract(other *ListPlanAssignmentsRequest_FieldMask) *ListPlanAssignmentsRequest_FieldMask {
	result := &ListPlanAssignmentsRequest_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListPlanAssignmentsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListPlanAssignmentsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListPlanAssignmentsRequest_FieldMask) FilterInputFields() *ListPlanAssignmentsRequest_FieldMask {
	result := &ListPlanAssignmentsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListPlanAssignmentsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListPlanAssignmentsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListPlanAssignmentsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListPlanAssignmentsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListPlanAssignmentsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) AppendPath(path ListPlanAssignmentsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListPlanAssignmentsRequest_FieldPath))
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) GetPaths() []ListPlanAssignmentsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListPlanAssignmentsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) Set(target, source *ListPlanAssignmentsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListPlanAssignmentsRequest), source.(*ListPlanAssignmentsRequest))
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) Project(source *ListPlanAssignmentsRequest) *ListPlanAssignmentsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListPlanAssignmentsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListPlanAssignmentsRequest_FieldTerminalPath:
			switch tp.selector {
			case ListPlanAssignmentsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListPlanAssignmentsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListPlanAssignmentsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListPlanAssignmentsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListPlanAssignmentsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListPlanAssignmentsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListPlanAssignmentsRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListPlanAssignmentsRequest))
}

func (fieldMask *ListPlanAssignmentsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListPlanAssignmentsResponse_FieldMask struct {
	Paths []ListPlanAssignmentsResponse_FieldPath
}

func FullListPlanAssignmentsResponse_FieldMask() *ListPlanAssignmentsResponse_FieldMask {
	res := &ListPlanAssignmentsResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments})
	res.Paths = append(res.Paths, &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListPlanAssignmentsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListPlanAssignmentsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListPlanAssignmentsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListPlanAssignmentsResponse_FieldPath(raw)
	})
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) Subtract(other *ListPlanAssignmentsResponse_FieldMask) *ListPlanAssignmentsResponse_FieldMask {
	result := &ListPlanAssignmentsResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListPlanAssignmentsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments: &plan_assignment.PlanAssignment_FieldMask{},
	}
	mySubMasks := map[ListPlanAssignmentsResponse_FieldPathSelector]gotenobject.FieldMask{
		ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments: &plan_assignment.PlanAssignment_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListPlanAssignmentsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListPlanAssignmentsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListPlanAssignmentsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
						mySubMasks[ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments] = plan_assignment.FullPlanAssignment_FieldMask()
					}
				} else if tp, ok := path.(*ListPlanAssignmentsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListPlanAssignmentsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListPlanAssignmentsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListPlanAssignmentsResponse_FieldMask) FilterInputFields() *ListPlanAssignmentsResponse_FieldMask {
	result := &ListPlanAssignmentsResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
			if _, ok := path.(*ListPlanAssignmentsResponse_FieldTerminalPath); ok {
				for _, subpath := range plan_assignment.FullPlanAssignment_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListPlanAssignmentsResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListPlanAssignmentsResponse_FieldSubPath); ok {
				selectedMask := &plan_assignment.PlanAssignment_FieldMask{
					Paths: []plan_assignment.PlanAssignment_FieldPath{sub.subPath.(plan_assignment.PlanAssignment_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListPlanAssignmentsResponse_FieldSubPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListPlanAssignmentsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListPlanAssignmentsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListPlanAssignmentsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListPlanAssignmentsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListPlanAssignmentsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) AppendPath(path ListPlanAssignmentsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListPlanAssignmentsResponse_FieldPath))
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) GetPaths() []ListPlanAssignmentsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListPlanAssignmentsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) Set(target, source *ListPlanAssignmentsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListPlanAssignmentsResponse), source.(*ListPlanAssignmentsResponse))
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) Project(source *ListPlanAssignmentsResponse) *ListPlanAssignmentsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListPlanAssignmentsResponse{}
	planAssignmentsMask := &plan_assignment.PlanAssignment_FieldMask{}
	wholePlanAssignmentsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListPlanAssignmentsResponse_FieldTerminalPath:
			switch tp.selector {
			case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
				result.PlanAssignments = source.PlanAssignments
				wholePlanAssignmentsAccepted = true
			case ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *ListPlanAssignmentsResponse_FieldSubPath:
			switch tp.selector {
			case ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments:
				planAssignmentsMask.AppendPath(tp.subPath.(plan_assignment.PlanAssignment_FieldPath))
			}
		}
	}
	if wholePlanAssignmentsAccepted == false && len(planAssignmentsMask.Paths) > 0 {
		for _, sourceItem := range source.GetPlanAssignments() {
			result.PlanAssignments = append(result.PlanAssignments, planAssignmentsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListPlanAssignmentsResponse))
}

func (fieldMask *ListPlanAssignmentsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPlanAssignmentRequest_FieldMask struct {
	Paths []WatchPlanAssignmentRequest_FieldPath
}

func FullWatchPlanAssignmentRequest_FieldMask() *WatchPlanAssignmentRequest_FieldMask {
	res := &WatchPlanAssignmentRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchPlanAssignmentRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPlanAssignmentRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPlanAssignmentRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPlanAssignmentRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPlanAssignmentRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) Subtract(other *WatchPlanAssignmentRequest_FieldMask) *WatchPlanAssignmentRequest_FieldMask {
	result := &WatchPlanAssignmentRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPlanAssignmentRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPlanAssignmentRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPlanAssignmentRequest_FieldMask) FilterInputFields() *WatchPlanAssignmentRequest_FieldMask {
	result := &WatchPlanAssignmentRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPlanAssignmentRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPlanAssignmentRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPlanAssignmentRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPlanAssignmentRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPlanAssignmentRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) AppendPath(path WatchPlanAssignmentRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPlanAssignmentRequest_FieldPath))
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) GetPaths() []WatchPlanAssignmentRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPlanAssignmentRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) Set(target, source *WatchPlanAssignmentRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPlanAssignmentRequest), source.(*WatchPlanAssignmentRequest))
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) Project(source *WatchPlanAssignmentRequest) *WatchPlanAssignmentRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPlanAssignmentRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPlanAssignmentRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchPlanAssignmentRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchPlanAssignmentRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchPlanAssignmentRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPlanAssignmentRequest))
}

func (fieldMask *WatchPlanAssignmentRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPlanAssignmentResponse_FieldMask struct {
	Paths []WatchPlanAssignmentResponse_FieldPath
}

func FullWatchPlanAssignmentResponse_FieldMask() *WatchPlanAssignmentResponse_FieldMask {
	res := &WatchPlanAssignmentResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchPlanAssignmentResponse_FieldTerminalPath{selector: WatchPlanAssignmentResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPlanAssignmentResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPlanAssignmentResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPlanAssignmentResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPlanAssignmentResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) Subtract(other *WatchPlanAssignmentResponse_FieldMask) *WatchPlanAssignmentResponse_FieldMask {
	result := &WatchPlanAssignmentResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPlanAssignmentResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPlanAssignmentResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPlanAssignmentResponse_FieldMask) FilterInputFields() *WatchPlanAssignmentResponse_FieldMask {
	result := &WatchPlanAssignmentResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPlanAssignmentResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPlanAssignmentResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPlanAssignmentResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPlanAssignmentResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPlanAssignmentResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) AppendPath(path WatchPlanAssignmentResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPlanAssignmentResponse_FieldPath))
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) GetPaths() []WatchPlanAssignmentResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPlanAssignmentResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) Set(target, source *WatchPlanAssignmentResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPlanAssignmentResponse), source.(*WatchPlanAssignmentResponse))
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) Project(source *WatchPlanAssignmentResponse) *WatchPlanAssignmentResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPlanAssignmentResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPlanAssignmentResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchPlanAssignmentResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPlanAssignmentResponse))
}

func (fieldMask *WatchPlanAssignmentResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPlanAssignmentsRequest_FieldMask struct {
	Paths []WatchPlanAssignmentsRequest_FieldPath
}

func FullWatchPlanAssignmentsRequest_FieldMask() *WatchPlanAssignmentsRequest_FieldMask {
	res := &WatchPlanAssignmentsRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPlanAssignmentsRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 10)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPlanAssignmentsRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPlanAssignmentsRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) Subtract(other *WatchPlanAssignmentsRequest_FieldMask) *WatchPlanAssignmentsRequest_FieldMask {
	result := &WatchPlanAssignmentsRequest_FieldMask{}
	removedSelectors := make([]bool, 10)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPlanAssignmentsRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPlanAssignmentsRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) FilterInputFields() *WatchPlanAssignmentsRequest_FieldMask {
	result := &WatchPlanAssignmentsRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPlanAssignmentsRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPlanAssignmentsRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPlanAssignmentsRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPlanAssignmentsRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) AppendPath(path WatchPlanAssignmentsRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPlanAssignmentsRequest_FieldPath))
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) GetPaths() []WatchPlanAssignmentsRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPlanAssignmentsRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) Set(target, source *WatchPlanAssignmentsRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPlanAssignmentsRequest), source.(*WatchPlanAssignmentsRequest))
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) Project(source *WatchPlanAssignmentsRequest) *WatchPlanAssignmentsRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPlanAssignmentsRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPlanAssignmentsRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchPlanAssignmentsRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchPlanAssignmentsRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchPlanAssignmentsRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchPlanAssignmentsRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchPlanAssignmentsRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchPlanAssignmentsRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPlanAssignmentsRequest))
}

func (fieldMask *WatchPlanAssignmentsRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPlanAssignmentsResponse_FieldMask struct {
	Paths []WatchPlanAssignmentsResponse_FieldPath
}

func FullWatchPlanAssignmentsResponse_FieldMask() *WatchPlanAssignmentsResponse_FieldMask {
	res := &WatchPlanAssignmentsResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPlanAssignmentsResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPlanAssignmentsResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPlanAssignmentsResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) Subtract(other *WatchPlanAssignmentsResponse_FieldMask) *WatchPlanAssignmentsResponse_FieldMask {
	result := &WatchPlanAssignmentsResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchPlanAssignmentsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange: &WatchPlanAssignmentsResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchPlanAssignmentsResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange: &WatchPlanAssignmentsResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPlanAssignmentsResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchPlanAssignmentsResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchPlanAssignmentsResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange] = FullWatchPlanAssignmentsResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchPlanAssignmentsResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchPlanAssignmentsResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPlanAssignmentsResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) FilterInputFields() *WatchPlanAssignmentsResponse_FieldMask {
	result := &WatchPlanAssignmentsResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPlanAssignmentsResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPlanAssignmentsResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPlanAssignmentsResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPlanAssignmentsResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) AppendPath(path WatchPlanAssignmentsResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPlanAssignmentsResponse_FieldPath))
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) GetPaths() []WatchPlanAssignmentsResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPlanAssignmentsResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) Set(target, source *WatchPlanAssignmentsResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPlanAssignmentsResponse), source.(*WatchPlanAssignmentsResponse))
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) Project(source *WatchPlanAssignmentsResponse) *WatchPlanAssignmentsResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPlanAssignmentsResponse{}
	pageTokenChangeMask := &WatchPlanAssignmentsResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPlanAssignmentsResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges:
				result.PlanAssignmentChanges = source.PlanAssignmentChanges
			case WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchPlanAssignmentsResponse_FieldSubPath:
			switch tp.selector {
			case WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchPlanAssignmentsResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPlanAssignmentsResponse))
}

func (fieldMask *WatchPlanAssignmentsResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPlanAssignmentsResponse_PageTokenChange_FieldMask struct {
	Paths []WatchPlanAssignmentsResponsePageTokenChange_FieldPath
}

func FullWatchPlanAssignmentsResponse_PageTokenChange_FieldMask() *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask {
	res := &WatchPlanAssignmentsResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath{selector: WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath{selector: WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) Subtract(other *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask {
	result := &WatchPlanAssignmentsResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPlanAssignmentsResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask {
	result := &WatchPlanAssignmentsResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPlanAssignmentsResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) AppendPath(path WatchPlanAssignmentsResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPlanAssignmentsResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) GetPaths() []WatchPlanAssignmentsResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPlanAssignmentsResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) Set(target, source *WatchPlanAssignmentsResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPlanAssignmentsResponse_PageTokenChange), source.(*WatchPlanAssignmentsResponse_PageTokenChange))
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) Project(source *WatchPlanAssignmentsResponse_PageTokenChange) *WatchPlanAssignmentsResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPlanAssignmentsResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPlanAssignmentsResponse_PageTokenChange))
}

func (fieldMask *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreatePlanAssignmentRequest_FieldMask struct {
	Paths []CreatePlanAssignmentRequest_FieldPath
}

func FullCreatePlanAssignmentRequest_FieldMask() *CreatePlanAssignmentRequest_FieldMask {
	res := &CreatePlanAssignmentRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreatePlanAssignmentRequest_FieldTerminalPath{selector: CreatePlanAssignmentRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreatePlanAssignmentRequest_FieldTerminalPath{selector: CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment})
	return res
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreatePlanAssignmentRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreatePlanAssignmentRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreatePlanAssignmentRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreatePlanAssignmentRequest_FieldPath(raw)
	})
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) Subtract(other *CreatePlanAssignmentRequest_FieldMask) *CreatePlanAssignmentRequest_FieldMask {
	result := &CreatePlanAssignmentRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreatePlanAssignmentRequest_FieldPathSelector]gotenobject.FieldMask{
		CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment: &plan_assignment.PlanAssignment_FieldMask{},
	}
	mySubMasks := map[CreatePlanAssignmentRequest_FieldPathSelector]gotenobject.FieldMask{
		CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment: &plan_assignment.PlanAssignment_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreatePlanAssignmentRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreatePlanAssignmentRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreatePlanAssignmentRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
						mySubMasks[CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment] = plan_assignment.FullPlanAssignment_FieldMask()
					}
				} else if tp, ok := path.(*CreatePlanAssignmentRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreatePlanAssignmentRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreatePlanAssignmentRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreatePlanAssignmentRequest_FieldMask) FilterInputFields() *CreatePlanAssignmentRequest_FieldMask {
	result := &CreatePlanAssignmentRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
			if _, ok := path.(*CreatePlanAssignmentRequest_FieldTerminalPath); ok {
				for _, subpath := range plan_assignment.FullPlanAssignment_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreatePlanAssignmentRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreatePlanAssignmentRequest_FieldSubPath); ok {
				selectedMask := &plan_assignment.PlanAssignment_FieldMask{
					Paths: []plan_assignment.PlanAssignment_FieldPath{sub.subPath.(plan_assignment.PlanAssignment_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreatePlanAssignmentRequest_FieldSubPath{selector: CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreatePlanAssignmentRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreatePlanAssignmentRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreatePlanAssignmentRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreatePlanAssignmentRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreatePlanAssignmentRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) AppendPath(path CreatePlanAssignmentRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreatePlanAssignmentRequest_FieldPath))
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) GetPaths() []CreatePlanAssignmentRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreatePlanAssignmentRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) Set(target, source *CreatePlanAssignmentRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreatePlanAssignmentRequest), source.(*CreatePlanAssignmentRequest))
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) Project(source *CreatePlanAssignmentRequest) *CreatePlanAssignmentRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreatePlanAssignmentRequest{}
	planAssignmentMask := &plan_assignment.PlanAssignment_FieldMask{}
	wholePlanAssignmentAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreatePlanAssignmentRequest_FieldTerminalPath:
			switch tp.selector {
			case CreatePlanAssignmentRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
				result.PlanAssignment = source.PlanAssignment
				wholePlanAssignmentAccepted = true
			}
		case *CreatePlanAssignmentRequest_FieldSubPath:
			switch tp.selector {
			case CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
				planAssignmentMask.AppendPath(tp.subPath.(plan_assignment.PlanAssignment_FieldPath))
			}
		}
	}
	if wholePlanAssignmentAccepted == false && len(planAssignmentMask.Paths) > 0 {
		result.PlanAssignment = planAssignmentMask.Project(source.GetPlanAssignment())
	}
	return result
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreatePlanAssignmentRequest))
}

func (fieldMask *CreatePlanAssignmentRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdatePlanAssignmentRequest_FieldMask struct {
	Paths []UpdatePlanAssignmentRequest_FieldPath
}

func FullUpdatePlanAssignmentRequest_FieldMask() *UpdatePlanAssignmentRequest_FieldMask {
	res := &UpdatePlanAssignmentRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdatePlanAssignmentRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment})
	res.Paths = append(res.Paths, &UpdatePlanAssignmentRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdatePlanAssignmentRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdatePlanAssignmentRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdatePlanAssignmentRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdatePlanAssignmentRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) Subtract(other *UpdatePlanAssignmentRequest_FieldMask) *UpdatePlanAssignmentRequest_FieldMask {
	result := &UpdatePlanAssignmentRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdatePlanAssignmentRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment: &plan_assignment.PlanAssignment_FieldMask{},
		UpdatePlanAssignmentRequest_FieldPathSelectorCas:            &UpdatePlanAssignmentRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdatePlanAssignmentRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment: &plan_assignment.PlanAssignment_FieldMask{},
		UpdatePlanAssignmentRequest_FieldPathSelectorCas:            &UpdatePlanAssignmentRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdatePlanAssignmentRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdatePlanAssignmentRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdatePlanAssignmentRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
						mySubMasks[UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment] = plan_assignment.FullPlanAssignment_FieldMask()
					case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
						mySubMasks[UpdatePlanAssignmentRequest_FieldPathSelectorCas] = FullUpdatePlanAssignmentRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdatePlanAssignmentRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdatePlanAssignmentRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdatePlanAssignmentRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) FilterInputFields() *UpdatePlanAssignmentRequest_FieldMask {
	result := &UpdatePlanAssignmentRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
			if _, ok := path.(*UpdatePlanAssignmentRequest_FieldTerminalPath); ok {
				for _, subpath := range plan_assignment.FullPlanAssignment_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePlanAssignmentRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdatePlanAssignmentRequest_FieldSubPath); ok {
				selectedMask := &plan_assignment.PlanAssignment_FieldMask{
					Paths: []plan_assignment.PlanAssignment_FieldPath{sub.subPath.(plan_assignment.PlanAssignment_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePlanAssignmentRequest_FieldSubPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment, subPath: allowedPath})
				}
			}
		case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdatePlanAssignmentRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdatePlanAssignmentRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePlanAssignmentRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdatePlanAssignmentRequest_FieldSubPath); ok {
				selectedMask := &UpdatePlanAssignmentRequest_CAS_FieldMask{
					Paths: []UpdatePlanAssignmentRequestCAS_FieldPath{sub.subPath.(UpdatePlanAssignmentRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePlanAssignmentRequest_FieldSubPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdatePlanAssignmentRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdatePlanAssignmentRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdatePlanAssignmentRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdatePlanAssignmentRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) AppendPath(path UpdatePlanAssignmentRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdatePlanAssignmentRequest_FieldPath))
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) GetPaths() []UpdatePlanAssignmentRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdatePlanAssignmentRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) Set(target, source *UpdatePlanAssignmentRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdatePlanAssignmentRequest), source.(*UpdatePlanAssignmentRequest))
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) Project(source *UpdatePlanAssignmentRequest) *UpdatePlanAssignmentRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdatePlanAssignmentRequest{}
	planAssignmentMask := &plan_assignment.PlanAssignment_FieldMask{}
	wholePlanAssignmentAccepted := false
	casMask := &UpdatePlanAssignmentRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdatePlanAssignmentRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
				result.PlanAssignment = source.PlanAssignment
				wholePlanAssignmentAccepted = true
			case UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdatePlanAssignmentRequest_FieldSubPath:
			switch tp.selector {
			case UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
				planAssignmentMask.AppendPath(tp.subPath.(plan_assignment.PlanAssignment_FieldPath))
			case UpdatePlanAssignmentRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdatePlanAssignmentRequestCAS_FieldPath))
			}
		}
	}
	if wholePlanAssignmentAccepted == false && len(planAssignmentMask.Paths) > 0 {
		result.PlanAssignment = planAssignmentMask.Project(source.GetPlanAssignment())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdatePlanAssignmentRequest))
}

func (fieldMask *UpdatePlanAssignmentRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdatePlanAssignmentRequest_CAS_FieldMask struct {
	Paths []UpdatePlanAssignmentRequestCAS_FieldPath
}

func FullUpdatePlanAssignmentRequest_CAS_FieldMask() *UpdatePlanAssignmentRequest_CAS_FieldMask {
	res := &UpdatePlanAssignmentRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestCAS_FieldTerminalPath{selector: UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestCAS_FieldTerminalPath{selector: UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdatePlanAssignmentRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdatePlanAssignmentRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdatePlanAssignmentRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) Subtract(other *UpdatePlanAssignmentRequest_CAS_FieldMask) *UpdatePlanAssignmentRequest_CAS_FieldMask {
	result := &UpdatePlanAssignmentRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdatePlanAssignmentRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState: &plan_assignment.PlanAssignment_FieldMask{},
	}
	mySubMasks := map[UpdatePlanAssignmentRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState: &plan_assignment.PlanAssignment_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdatePlanAssignmentRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdatePlanAssignmentRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdatePlanAssignmentRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState] = plan_assignment.FullPlanAssignment_FieldMask()
					}
				} else if tp, ok := path.(*UpdatePlanAssignmentRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdatePlanAssignmentRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdatePlanAssignmentRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) FilterInputFields() *UpdatePlanAssignmentRequest_CAS_FieldMask {
	result := &UpdatePlanAssignmentRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdatePlanAssignmentRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range plan_assignment.FullPlanAssignment_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePlanAssignmentRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdatePlanAssignmentRequestCAS_FieldSubPath); ok {
				selectedMask := &plan_assignment.PlanAssignment_FieldMask{
					Paths: []plan_assignment.PlanAssignment_FieldPath{sub.subPath.(plan_assignment.PlanAssignment_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePlanAssignmentRequestCAS_FieldSubPath{selector: UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdatePlanAssignmentRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdatePlanAssignmentRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdatePlanAssignmentRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdatePlanAssignmentRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) AppendPath(path UpdatePlanAssignmentRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdatePlanAssignmentRequestCAS_FieldPath))
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) GetPaths() []UpdatePlanAssignmentRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdatePlanAssignmentRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) Set(target, source *UpdatePlanAssignmentRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdatePlanAssignmentRequest_CAS), source.(*UpdatePlanAssignmentRequest_CAS))
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) Project(source *UpdatePlanAssignmentRequest_CAS) *UpdatePlanAssignmentRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdatePlanAssignmentRequest_CAS{}
	conditionalStateMask := &plan_assignment.PlanAssignment_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdatePlanAssignmentRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdatePlanAssignmentRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(plan_assignment.PlanAssignment_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdatePlanAssignmentRequest_CAS))
}

func (fieldMask *UpdatePlanAssignmentRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeletePlanAssignmentRequest_FieldMask struct {
	Paths []DeletePlanAssignmentRequest_FieldPath
}

func FullDeletePlanAssignmentRequest_FieldMask() *DeletePlanAssignmentRequest_FieldMask {
	res := &DeletePlanAssignmentRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeletePlanAssignmentRequest_FieldTerminalPath{selector: DeletePlanAssignmentRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeletePlanAssignmentRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeletePlanAssignmentRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeletePlanAssignmentRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeletePlanAssignmentRequest_FieldPath(raw)
	})
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) Subtract(other *DeletePlanAssignmentRequest_FieldMask) *DeletePlanAssignmentRequest_FieldMask {
	result := &DeletePlanAssignmentRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeletePlanAssignmentRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeletePlanAssignmentRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeletePlanAssignmentRequest_FieldMask) FilterInputFields() *DeletePlanAssignmentRequest_FieldMask {
	result := &DeletePlanAssignmentRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeletePlanAssignmentRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeletePlanAssignmentRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeletePlanAssignmentRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeletePlanAssignmentRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeletePlanAssignmentRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) AppendPath(path DeletePlanAssignmentRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeletePlanAssignmentRequest_FieldPath))
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) GetPaths() []DeletePlanAssignmentRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeletePlanAssignmentRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) Set(target, source *DeletePlanAssignmentRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeletePlanAssignmentRequest), source.(*DeletePlanAssignmentRequest))
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) Project(source *DeletePlanAssignmentRequest) *DeletePlanAssignmentRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeletePlanAssignmentRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeletePlanAssignmentRequest_FieldTerminalPath:
			switch tp.selector {
			case DeletePlanAssignmentRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeletePlanAssignmentRequest))
}

func (fieldMask *DeletePlanAssignmentRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
