// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/plan_assignment_custom.proto
// DO NOT EDIT!!!

package plan_assignment_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	plan_assignment "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan_assignment"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &plan_assignment.PlanAssignment{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type MigratePlanAssignmentRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() MigratePlanAssignmentRequest_FieldPathSelector
	Get(source *MigratePlanAssignmentRequest) []interface{}
	GetSingle(source *MigratePlanAssignmentRequest) (interface{}, bool)
	ClearValue(item *MigratePlanAssignmentRequest)

	// Those methods build corresponding MigratePlanAssignmentRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) MigratePlanAssignmentRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) MigratePlanAssignmentRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) MigratePlanAssignmentRequest_FieldPathArrayItemValue
}

type MigratePlanAssignmentRequest_FieldPathSelector int32

const (
	MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment MigratePlanAssignmentRequest_FieldPathSelector = 0
)

func (s MigratePlanAssignmentRequest_FieldPathSelector) String() string {
	switch s {
	case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return "plan_assignment"
	default:
		panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", s))
	}
}

func BuildMigratePlanAssignmentRequest_FieldPath(fp gotenobject.RawFieldPath) (MigratePlanAssignmentRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object MigratePlanAssignmentRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "plan_assignment", "planAssignment", "plan-assignment":
			return &MigratePlanAssignmentRequest_FieldTerminalPath{selector: MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment}, nil
		}
	} else {
		switch fp[0] {
		case "plan_assignment", "planAssignment", "plan-assignment":
			if subpath, err := plan_assignment.BuildPlanAssignment_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &MigratePlanAssignmentRequest_FieldSubPath{selector: MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object MigratePlanAssignmentRequest", fp)
}

func ParseMigratePlanAssignmentRequest_FieldPath(rawField string) (MigratePlanAssignmentRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildMigratePlanAssignmentRequest_FieldPath(fp)
}

func MustParseMigratePlanAssignmentRequest_FieldPath(rawField string) MigratePlanAssignmentRequest_FieldPath {
	fp, err := ParseMigratePlanAssignmentRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type MigratePlanAssignmentRequest_FieldTerminalPath struct {
	selector MigratePlanAssignmentRequest_FieldPathSelector
}

var _ MigratePlanAssignmentRequest_FieldPath = (*MigratePlanAssignmentRequest_FieldTerminalPath)(nil)

func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) Selector() MigratePlanAssignmentRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source MigratePlanAssignmentRequest
func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) Get(source *MigratePlanAssignmentRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
			if source.PlanAssignment != nil {
				values = append(values, source.PlanAssignment)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*MigratePlanAssignmentRequest))
}

// GetSingle returns value pointed by specific field of from source MigratePlanAssignmentRequest
func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) GetSingle(source *MigratePlanAssignmentRequest) (interface{}, bool) {
	switch fp.selector {
	case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		res := source.GetPlanAssignment()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*MigratePlanAssignmentRequest))
}

// GetDefault returns a default value of the field type
func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return (*plan_assignment.PlanAssignment)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) ClearValue(item *MigratePlanAssignmentRequest) {
	if item != nil {
		switch fp.selector {
		case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
			item.PlanAssignment = nil
		default:
			panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fp.selector))
		}
	}
}

func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*MigratePlanAssignmentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) WithIValue(value interface{}) MigratePlanAssignmentRequest_FieldPathValue {
	switch fp.selector {
	case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return &MigratePlanAssignmentRequest_FieldTerminalPathValue{MigratePlanAssignmentRequest_FieldTerminalPath: *fp, value: value.(*plan_assignment.PlanAssignment)}
	default:
		panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) MigratePlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov := &MigratePlanAssignmentRequest_FieldTerminalPathArrayOfValues{MigratePlanAssignmentRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return &MigratePlanAssignmentRequest_FieldTerminalPathArrayOfValues{MigratePlanAssignmentRequest_FieldTerminalPath: *fp, values: values.([]*plan_assignment.PlanAssignment)}
	default:
		panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) MigratePlanAssignmentRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fp.selector))
	}
}

func (fp *MigratePlanAssignmentRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type MigratePlanAssignmentRequest_FieldSubPath struct {
	selector MigratePlanAssignmentRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ MigratePlanAssignmentRequest_FieldPath = (*MigratePlanAssignmentRequest_FieldSubPath)(nil)

func (fps *MigratePlanAssignmentRequest_FieldSubPath) Selector() MigratePlanAssignmentRequest_FieldPathSelector {
	return fps.selector
}
func (fps *MigratePlanAssignmentRequest_FieldSubPath) AsPlanAssignmentSubPath() (plan_assignment.PlanAssignment_FieldPath, bool) {
	res, ok := fps.subPath.(plan_assignment.PlanAssignment_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *MigratePlanAssignmentRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *MigratePlanAssignmentRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source MigratePlanAssignmentRequest
func (fps *MigratePlanAssignmentRequest_FieldSubPath) Get(source *MigratePlanAssignmentRequest) (values []interface{}) {
	if asPlanAssignmentFieldPath, ok := fps.AsPlanAssignmentSubPath(); ok {
		values = append(values, asPlanAssignmentFieldPath.Get(source.GetPlanAssignment())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fps.selector))
	}
	return
}

func (fps *MigratePlanAssignmentRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*MigratePlanAssignmentRequest))
}

// GetSingle returns value of selected field from source MigratePlanAssignmentRequest
func (fps *MigratePlanAssignmentRequest_FieldSubPath) GetSingle(source *MigratePlanAssignmentRequest) (interface{}, bool) {
	switch fps.selector {
	case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		if source.GetPlanAssignment() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPlanAssignment())
	default:
		panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fps.selector))
	}
}

func (fps *MigratePlanAssignmentRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*MigratePlanAssignmentRequest))
}

// GetDefault returns a default value of the field type
func (fps *MigratePlanAssignmentRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *MigratePlanAssignmentRequest_FieldSubPath) ClearValue(item *MigratePlanAssignmentRequest) {
	if item != nil {
		switch fps.selector {
		case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
			fps.subPath.ClearValueRaw(item.PlanAssignment)
		default:
			panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fps.selector))
		}
	}
}

func (fps *MigratePlanAssignmentRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*MigratePlanAssignmentRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *MigratePlanAssignmentRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *MigratePlanAssignmentRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&MigratePlanAssignmentRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *MigratePlanAssignmentRequest_FieldSubPath) WithIValue(value interface{}) MigratePlanAssignmentRequest_FieldPathValue {
	return &MigratePlanAssignmentRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *MigratePlanAssignmentRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *MigratePlanAssignmentRequest_FieldSubPath) WithIArrayOfValues(values interface{}) MigratePlanAssignmentRequest_FieldPathArrayOfValues {
	return &MigratePlanAssignmentRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *MigratePlanAssignmentRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *MigratePlanAssignmentRequest_FieldSubPath) WithIArrayItemValue(value interface{}) MigratePlanAssignmentRequest_FieldPathArrayItemValue {
	return &MigratePlanAssignmentRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *MigratePlanAssignmentRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// MigratePlanAssignmentRequest_FieldPathValue allows storing values for MigratePlanAssignmentRequest fields according to their type
type MigratePlanAssignmentRequest_FieldPathValue interface {
	MigratePlanAssignmentRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **MigratePlanAssignmentRequest)
	CompareWith(*MigratePlanAssignmentRequest) (cmp int, comparable bool)
}

func ParseMigratePlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) (MigratePlanAssignmentRequest_FieldPathValue, error) {
	fp, err := ParseMigratePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MigratePlanAssignmentRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(MigratePlanAssignmentRequest_FieldPathValue), nil
}

func MustParseMigratePlanAssignmentRequest_FieldPathValue(pathStr, valueStr string) MigratePlanAssignmentRequest_FieldPathValue {
	fpv, err := ParseMigratePlanAssignmentRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type MigratePlanAssignmentRequest_FieldTerminalPathValue struct {
	MigratePlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ MigratePlanAssignmentRequest_FieldPathValue = (*MigratePlanAssignmentRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'MigratePlanAssignmentRequest' as interface{}
func (fpv *MigratePlanAssignmentRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *MigratePlanAssignmentRequest_FieldTerminalPathValue) AsPlanAssignmentValue() (*plan_assignment.PlanAssignment, bool) {
	res, ok := fpv.value.(*plan_assignment.PlanAssignment)
	return res, ok
}

// SetTo stores value for selected field for object MigratePlanAssignmentRequest
func (fpv *MigratePlanAssignmentRequest_FieldTerminalPathValue) SetTo(target **MigratePlanAssignmentRequest) {
	if *target == nil {
		*target = new(MigratePlanAssignmentRequest)
	}
	switch fpv.selector {
	case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		(*target).PlanAssignment = fpv.value.(*plan_assignment.PlanAssignment)
	default:
		panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *MigratePlanAssignmentRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*MigratePlanAssignmentRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'MigratePlanAssignmentRequest_FieldTerminalPathValue' with the value under path in 'MigratePlanAssignmentRequest'.
func (fpv *MigratePlanAssignmentRequest_FieldTerminalPathValue) CompareWith(source *MigratePlanAssignmentRequest) (int, bool) {
	switch fpv.selector {
	case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fpv.selector))
	}
}

func (fpv *MigratePlanAssignmentRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*MigratePlanAssignmentRequest))
}

type MigratePlanAssignmentRequest_FieldSubPathValue struct {
	MigratePlanAssignmentRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ MigratePlanAssignmentRequest_FieldPathValue = (*MigratePlanAssignmentRequest_FieldSubPathValue)(nil)

func (fpvs *MigratePlanAssignmentRequest_FieldSubPathValue) AsPlanAssignmentPathValue() (plan_assignment.PlanAssignment_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue)
	return res, ok
}

func (fpvs *MigratePlanAssignmentRequest_FieldSubPathValue) SetTo(target **MigratePlanAssignmentRequest) {
	if *target == nil {
		*target = new(MigratePlanAssignmentRequest)
	}
	switch fpvs.Selector() {
	case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue).SetTo(&(*target).PlanAssignment)
	default:
		panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *MigratePlanAssignmentRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*MigratePlanAssignmentRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *MigratePlanAssignmentRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *MigratePlanAssignmentRequest_FieldSubPathValue) CompareWith(source *MigratePlanAssignmentRequest) (int, bool) {
	switch fpvs.Selector() {
	case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return fpvs.subPathValue.(plan_assignment.PlanAssignment_FieldPathValue).CompareWith(source.GetPlanAssignment())
	default:
		panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *MigratePlanAssignmentRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*MigratePlanAssignmentRequest))
}

// MigratePlanAssignmentRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for MigratePlanAssignmentRequest according to their type
// Present only for array (repeated) types.
type MigratePlanAssignmentRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	MigratePlanAssignmentRequest_FieldPath
	ContainsValue(*MigratePlanAssignmentRequest) bool
}

// ParseMigratePlanAssignmentRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseMigratePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) (MigratePlanAssignmentRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseMigratePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MigratePlanAssignmentRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(MigratePlanAssignmentRequest_FieldPathArrayItemValue), nil
}

func MustParseMigratePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr string) MigratePlanAssignmentRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseMigratePlanAssignmentRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type MigratePlanAssignmentRequest_FieldTerminalPathArrayItemValue struct {
	MigratePlanAssignmentRequest_FieldTerminalPath
	value interface{}
}

var _ MigratePlanAssignmentRequest_FieldPathArrayItemValue = (*MigratePlanAssignmentRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object MigratePlanAssignmentRequest as interface{}
func (fpaiv *MigratePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *MigratePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingle(source *MigratePlanAssignmentRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *MigratePlanAssignmentRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*MigratePlanAssignmentRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'MigratePlanAssignmentRequest'
func (fpaiv *MigratePlanAssignmentRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *MigratePlanAssignmentRequest) bool {
	slice := fpaiv.MigratePlanAssignmentRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type MigratePlanAssignmentRequest_FieldSubPathArrayItemValue struct {
	MigratePlanAssignmentRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *MigratePlanAssignmentRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *MigratePlanAssignmentRequest_FieldSubPathArrayItemValue) AsPlanAssignmentPathItemValue() (plan_assignment.PlanAssignment_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(plan_assignment.PlanAssignment_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'MigratePlanAssignmentRequest'
func (fpaivs *MigratePlanAssignmentRequest_FieldSubPathArrayItemValue) ContainsValue(source *MigratePlanAssignmentRequest) bool {
	switch fpaivs.Selector() {
	case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		return fpaivs.subPathItemValue.(plan_assignment.PlanAssignment_FieldPathArrayItemValue).ContainsValue(source.GetPlanAssignment())
	default:
		panic(fmt.Sprintf("Invalid selector for MigratePlanAssignmentRequest: %d", fpaivs.Selector()))
	}
}

// MigratePlanAssignmentRequest_FieldPathArrayOfValues allows storing slice of values for MigratePlanAssignmentRequest fields according to their type
type MigratePlanAssignmentRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	MigratePlanAssignmentRequest_FieldPath
}

func ParseMigratePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (MigratePlanAssignmentRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseMigratePlanAssignmentRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MigratePlanAssignmentRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(MigratePlanAssignmentRequest_FieldPathArrayOfValues), nil
}

func MustParseMigratePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr string) MigratePlanAssignmentRequest_FieldPathArrayOfValues {
	fpaov, err := ParseMigratePlanAssignmentRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type MigratePlanAssignmentRequest_FieldTerminalPathArrayOfValues struct {
	MigratePlanAssignmentRequest_FieldTerminalPath
	values interface{}
}

var _ MigratePlanAssignmentRequest_FieldPathArrayOfValues = (*MigratePlanAssignmentRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *MigratePlanAssignmentRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case MigratePlanAssignmentRequest_FieldPathSelectorPlanAssignment:
		for _, v := range fpaov.values.([]*plan_assignment.PlanAssignment) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *MigratePlanAssignmentRequest_FieldTerminalPathArrayOfValues) AsPlanAssignmentArrayOfValues() ([]*plan_assignment.PlanAssignment, bool) {
	res, ok := fpaov.values.([]*plan_assignment.PlanAssignment)
	return res, ok
}

type MigratePlanAssignmentRequest_FieldSubPathArrayOfValues struct {
	MigratePlanAssignmentRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ MigratePlanAssignmentRequest_FieldPathArrayOfValues = (*MigratePlanAssignmentRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *MigratePlanAssignmentRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *MigratePlanAssignmentRequest_FieldSubPathArrayOfValues) AsPlanAssignmentPathArrayOfValues() (plan_assignment.PlanAssignment_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(plan_assignment.PlanAssignment_FieldPathArrayOfValues)
	return res, ok
}
