// Code generated by protoc-gen-goten-client
// API: PlanAssignmentService
// DO NOT EDIT!!!

package plan_assignment_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	plan_assignment "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan_assignment"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &plan_assignment.PlanAssignment{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized            bool
	planAssignmentServiceDescriptor   *PlanAssignmentServiceDescriptor
	getPlanAssignmentDescriptor       *GetPlanAssignmentDescriptor
	batchGetPlanAssignmentsDescriptor *BatchGetPlanAssignmentsDescriptor
	listPlanAssignmentsDescriptor     *ListPlanAssignmentsDescriptor
	watchPlanAssignmentDescriptor     *WatchPlanAssignmentDescriptor
	watchPlanAssignmentsDescriptor    *WatchPlanAssignmentsDescriptor
	createPlanAssignmentDescriptor    *CreatePlanAssignmentDescriptor
	updatePlanAssignmentDescriptor    *UpdatePlanAssignmentDescriptor
	deletePlanAssignmentDescriptor    *DeletePlanAssignmentDescriptor
)

type GetPlanAssignmentDescriptor struct{}

type GetPlanAssignmentDescriptorClientMsgHandle struct{}

type GetPlanAssignmentDescriptorServerMsgHandle struct{}

func (d *GetPlanAssignmentDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetPlanAssignmentRequest{}
}

func (d *GetPlanAssignmentDescriptor) NewEmptyServerMsg() proto.Message {
	return &plan_assignment.PlanAssignment{}
}

func (d *GetPlanAssignmentDescriptor) IsUnary() bool {
	return true
}

func (d *GetPlanAssignmentDescriptor) IsClientStream() bool {
	return false
}

func (d *GetPlanAssignmentDescriptor) IsServerStream() bool {
	return false
}

func (d *GetPlanAssignmentDescriptor) IsCollection() bool {
	return false
}

func (d *GetPlanAssignmentDescriptor) IsPlural() bool {
	return false
}

func (d *GetPlanAssignmentDescriptor) HasResource() bool {
	return true
}

func (d *GetPlanAssignmentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetPlanAssignmentDescriptor) GetVerb() string {
	return "get"
}

func (d *GetPlanAssignmentDescriptor) GetMethodName() string {
	return "GetPlanAssignment"
}

func (d *GetPlanAssignmentDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentService/GetPlanAssignment"
}

func (d *GetPlanAssignmentDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *GetPlanAssignmentDescriptor) GetApiName() string {
	return "PlanAssignmentService"
}

func (d *GetPlanAssignmentDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *GetPlanAssignmentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetPlanAssignmentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentServiceDescriptor
}

func (d *GetPlanAssignmentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment.GetDescriptor()
}

func (d *GetPlanAssignmentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPlanAssignmentDescriptorClientMsgHandle{}
}

func (d *GetPlanAssignmentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPlanAssignmentDescriptorServerMsgHandle{}
}

func (h *GetPlanAssignmentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetPlanAssignmentRequest) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*plan_assignment.Name)(nil)
}

func (h *GetPlanAssignmentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetPlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetPlanAssignmentRequest) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPlanAssignmentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetPlanAssignmentRequest) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetPlanAssignmentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*plan_assignment.PlanAssignment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*plan_assignment.PlanAssignment) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*plan_assignment.Name)(nil)
}

func (h *GetPlanAssignmentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*plan_assignment.PlanAssignment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*plan_assignment.PlanAssignment) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPlanAssignmentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*plan_assignment.PlanAssignment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*plan_assignment.PlanAssignment) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetPlanAssignmentDescriptor() *GetPlanAssignmentDescriptor {
	return getPlanAssignmentDescriptor
}

type BatchGetPlanAssignmentsDescriptor struct{}

type BatchGetPlanAssignmentsDescriptorClientMsgHandle struct{}

type BatchGetPlanAssignmentsDescriptorServerMsgHandle struct{}

func (d *BatchGetPlanAssignmentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetPlanAssignmentsRequest{}
}

func (d *BatchGetPlanAssignmentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetPlanAssignmentsResponse{}
}

func (d *BatchGetPlanAssignmentsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetPlanAssignmentsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetPlanAssignmentsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetPlanAssignmentsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetPlanAssignmentsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetPlanAssignmentsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetPlanAssignmentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetPlanAssignmentsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetPlanAssignmentsDescriptor) GetMethodName() string {
	return "BatchGetPlanAssignments"
}

func (d *BatchGetPlanAssignmentsDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentService/BatchGetPlanAssignments"
}

func (d *BatchGetPlanAssignmentsDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *BatchGetPlanAssignmentsDescriptor) GetApiName() string {
	return "PlanAssignmentService"
}

func (d *BatchGetPlanAssignmentsDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *BatchGetPlanAssignmentsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetPlanAssignmentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentServiceDescriptor
}

func (d *BatchGetPlanAssignmentsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment.GetDescriptor()
}

func (d *BatchGetPlanAssignmentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPlanAssignmentsDescriptorClientMsgHandle{}
}

func (d *BatchGetPlanAssignmentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPlanAssignmentsDescriptorServerMsgHandle{}
}

func (h *BatchGetPlanAssignmentsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPlanAssignmentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPlanAssignmentsRequest) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPlanAssignmentsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPlanAssignmentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPlanAssignmentsRequest) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(plan_assignment.PlanAssignmentNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (plan_assignment.PlanAssignmentNameList)(nil)
}

func (h *BatchGetPlanAssignmentsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPlanAssignmentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPlanAssignmentsRequest) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetPlanAssignmentsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPlanAssignmentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPlanAssignmentsResponse) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPlanAssignmentsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPlanAssignmentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPlanAssignmentsResponse) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetPlanAssignments(); len(resources) > 0 {
			list := make(plan_assignment.PlanAssignmentNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (plan_assignment.PlanAssignmentNameList)(nil)
}

func (h *BatchGetPlanAssignmentsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPlanAssignmentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPlanAssignmentsResponse) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetPlanAssignmentsDescriptor() *BatchGetPlanAssignmentsDescriptor {
	return batchGetPlanAssignmentsDescriptor
}

type ListPlanAssignmentsDescriptor struct{}

type ListPlanAssignmentsDescriptorClientMsgHandle struct{}

type ListPlanAssignmentsDescriptorServerMsgHandle struct{}

func (d *ListPlanAssignmentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListPlanAssignmentsRequest{}
}

func (d *ListPlanAssignmentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListPlanAssignmentsResponse{}
}

func (d *ListPlanAssignmentsDescriptor) IsUnary() bool {
	return true
}

func (d *ListPlanAssignmentsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListPlanAssignmentsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListPlanAssignmentsDescriptor) IsCollection() bool {
	return true
}

func (d *ListPlanAssignmentsDescriptor) IsPlural() bool {
	return true
}

func (d *ListPlanAssignmentsDescriptor) HasResource() bool {
	return true
}

func (d *ListPlanAssignmentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListPlanAssignmentsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListPlanAssignmentsDescriptor) GetMethodName() string {
	return "ListPlanAssignments"
}

func (d *ListPlanAssignmentsDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentService/ListPlanAssignments"
}

func (d *ListPlanAssignmentsDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *ListPlanAssignmentsDescriptor) GetApiName() string {
	return "PlanAssignmentService"
}

func (d *ListPlanAssignmentsDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *ListPlanAssignmentsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListPlanAssignmentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentServiceDescriptor
}

func (d *ListPlanAssignmentsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment.GetDescriptor()
}

func (d *ListPlanAssignmentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPlanAssignmentsDescriptorClientMsgHandle{}
}

func (d *ListPlanAssignmentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPlanAssignmentsDescriptorServerMsgHandle{}
}

func (h *ListPlanAssignmentsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPlanAssignmentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPlanAssignmentsRequest) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPlanAssignmentsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPlanAssignmentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPlanAssignmentsRequest) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListPlanAssignmentsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPlanAssignmentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPlanAssignmentsRequest) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*plan_assignment.ParentName)(nil)
}

func (h *ListPlanAssignmentsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPlanAssignmentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPlanAssignmentsResponse) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPlanAssignmentsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPlanAssignmentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPlanAssignmentsResponse) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetPlanAssignments(); len(resources) > 0 {
			list := make(plan_assignment.PlanAssignmentNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (plan_assignment.PlanAssignmentNameList)(nil)
}

func (h *ListPlanAssignmentsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPlanAssignmentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPlanAssignmentsResponse) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListPlanAssignmentsDescriptor() *ListPlanAssignmentsDescriptor {
	return listPlanAssignmentsDescriptor
}

type WatchPlanAssignmentDescriptor struct{}

type WatchPlanAssignmentDescriptorClientMsgHandle struct{}

type WatchPlanAssignmentDescriptorServerMsgHandle struct{}

func (d *WatchPlanAssignmentDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPlanAssignmentRequest{}
}

func (d *WatchPlanAssignmentDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPlanAssignmentResponse{}
}

func (d *WatchPlanAssignmentDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPlanAssignmentDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPlanAssignmentDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPlanAssignmentDescriptor) IsCollection() bool {
	return false
}

func (d *WatchPlanAssignmentDescriptor) IsPlural() bool {
	return false
}

func (d *WatchPlanAssignmentDescriptor) HasResource() bool {
	return true
}

func (d *WatchPlanAssignmentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPlanAssignmentDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPlanAssignmentDescriptor) GetMethodName() string {
	return "WatchPlanAssignment"
}

func (d *WatchPlanAssignmentDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentService/WatchPlanAssignment"
}

func (d *WatchPlanAssignmentDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *WatchPlanAssignmentDescriptor) GetApiName() string {
	return "PlanAssignmentService"
}

func (d *WatchPlanAssignmentDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *WatchPlanAssignmentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchPlanAssignmentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentServiceDescriptor
}

func (d *WatchPlanAssignmentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment.GetDescriptor()
}

func (d *WatchPlanAssignmentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPlanAssignmentDescriptorClientMsgHandle{}
}

func (d *WatchPlanAssignmentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPlanAssignmentDescriptorServerMsgHandle{}
}

func (h *WatchPlanAssignmentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPlanAssignmentRequest) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*plan_assignment.Name)(nil)
}

func (h *WatchPlanAssignmentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPlanAssignmentRequest) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPlanAssignmentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPlanAssignmentRequest) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPlanAssignmentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPlanAssignmentResponse) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *plan_assignment.PlanAssignmentChange_Added_:
				return tResChange.Added.GetPlanAssignment().GetName()
			case *plan_assignment.PlanAssignmentChange_Modified_:
				return tResChange.Modified.GetName()
			case *plan_assignment.PlanAssignmentChange_Removed_:
				return tResChange.Removed.GetName()
			case *plan_assignment.PlanAssignmentChange_Current_:
				return tResChange.Current.GetPlanAssignment().GetName()
			}
		}
	}
	return (*plan_assignment.Name)(nil)
}

func (h *WatchPlanAssignmentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPlanAssignmentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPlanAssignmentResponse) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPlanAssignmentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPlanAssignmentResponse) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchPlanAssignmentDescriptor() *WatchPlanAssignmentDescriptor {
	return watchPlanAssignmentDescriptor
}

type WatchPlanAssignmentsDescriptor struct{}

type WatchPlanAssignmentsDescriptorClientMsgHandle struct{}

type WatchPlanAssignmentsDescriptorServerMsgHandle struct{}

func (d *WatchPlanAssignmentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPlanAssignmentsRequest{}
}

func (d *WatchPlanAssignmentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPlanAssignmentsResponse{}
}

func (d *WatchPlanAssignmentsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPlanAssignmentsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPlanAssignmentsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPlanAssignmentsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchPlanAssignmentsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchPlanAssignmentsDescriptor) HasResource() bool {
	return true
}

func (d *WatchPlanAssignmentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPlanAssignmentsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPlanAssignmentsDescriptor) GetMethodName() string {
	return "WatchPlanAssignments"
}

func (d *WatchPlanAssignmentsDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentService/WatchPlanAssignments"
}

func (d *WatchPlanAssignmentsDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *WatchPlanAssignmentsDescriptor) GetApiName() string {
	return "PlanAssignmentService"
}

func (d *WatchPlanAssignmentsDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *WatchPlanAssignmentsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchPlanAssignmentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentServiceDescriptor
}

func (d *WatchPlanAssignmentsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment.GetDescriptor()
}

func (d *WatchPlanAssignmentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPlanAssignmentsDescriptorClientMsgHandle{}
}

func (d *WatchPlanAssignmentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPlanAssignmentsDescriptorServerMsgHandle{}
}

func (h *WatchPlanAssignmentsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPlanAssignmentsRequest) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPlanAssignmentsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPlanAssignmentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPlanAssignmentsRequest) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPlanAssignmentsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPlanAssignmentsRequest) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*plan_assignment.ParentName)(nil)
}

func (h *WatchPlanAssignmentsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPlanAssignmentsResponse) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPlanAssignmentsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPlanAssignmentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPlanAssignmentsResponse) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetPlanAssignmentChanges(); len(resChanges) > 0 {
			list := make(plan_assignment.PlanAssignmentNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *plan_assignment.PlanAssignmentChange_Added_:
					list = append(list, tResChange.Added.GetPlanAssignment().GetName())
				case *plan_assignment.PlanAssignmentChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *plan_assignment.PlanAssignmentChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *plan_assignment.PlanAssignmentChange_Current_:
					list = append(list, tResChange.Current.GetPlanAssignment().GetName())
				}
			}
			return list
		}
	}
	return (plan_assignment.PlanAssignmentNameList)(nil)
}

func (h *WatchPlanAssignmentsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPlanAssignmentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPlanAssignmentsResponse) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchPlanAssignmentsDescriptor() *WatchPlanAssignmentsDescriptor {
	return watchPlanAssignmentsDescriptor
}

type CreatePlanAssignmentDescriptor struct{}

type CreatePlanAssignmentDescriptorClientMsgHandle struct{}

type CreatePlanAssignmentDescriptorServerMsgHandle struct{}

func (d *CreatePlanAssignmentDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreatePlanAssignmentRequest{}
}

func (d *CreatePlanAssignmentDescriptor) NewEmptyServerMsg() proto.Message {
	return &plan_assignment.PlanAssignment{}
}

func (d *CreatePlanAssignmentDescriptor) IsUnary() bool {
	return true
}

func (d *CreatePlanAssignmentDescriptor) IsClientStream() bool {
	return false
}

func (d *CreatePlanAssignmentDescriptor) IsServerStream() bool {
	return false
}

func (d *CreatePlanAssignmentDescriptor) IsCollection() bool {
	return true
}

func (d *CreatePlanAssignmentDescriptor) IsPlural() bool {
	return false
}

func (d *CreatePlanAssignmentDescriptor) HasResource() bool {
	return true
}

func (d *CreatePlanAssignmentDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreatePlanAssignmentDescriptor) GetVerb() string {
	return "create"
}

func (d *CreatePlanAssignmentDescriptor) GetMethodName() string {
	return "CreatePlanAssignment"
}

func (d *CreatePlanAssignmentDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentService/CreatePlanAssignment"
}

func (d *CreatePlanAssignmentDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *CreatePlanAssignmentDescriptor) GetApiName() string {
	return "PlanAssignmentService"
}

func (d *CreatePlanAssignmentDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *CreatePlanAssignmentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreatePlanAssignmentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentServiceDescriptor
}

func (d *CreatePlanAssignmentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment.GetDescriptor()
}

func (d *CreatePlanAssignmentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePlanAssignmentDescriptorClientMsgHandle{}
}

func (d *CreatePlanAssignmentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePlanAssignmentDescriptorServerMsgHandle{}
}

func (h *CreatePlanAssignmentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreatePlanAssignmentRequest) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetPlanAssignment()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*plan_assignment.Name)(nil)
}

func (h *CreatePlanAssignmentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreatePlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreatePlanAssignmentRequest) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePlanAssignmentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreatePlanAssignmentRequest) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*plan_assignment.ParentName)(nil)
}

func (h *CreatePlanAssignmentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*plan_assignment.PlanAssignment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*plan_assignment.PlanAssignment) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*plan_assignment.Name)(nil)
}

func (h *CreatePlanAssignmentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*plan_assignment.PlanAssignment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*plan_assignment.PlanAssignment) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePlanAssignmentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*plan_assignment.PlanAssignment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*plan_assignment.PlanAssignment) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreatePlanAssignmentDescriptor() *CreatePlanAssignmentDescriptor {
	return createPlanAssignmentDescriptor
}

type UpdatePlanAssignmentDescriptor struct{}

type UpdatePlanAssignmentDescriptorClientMsgHandle struct{}

type UpdatePlanAssignmentDescriptorServerMsgHandle struct{}

func (d *UpdatePlanAssignmentDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdatePlanAssignmentRequest{}
}

func (d *UpdatePlanAssignmentDescriptor) NewEmptyServerMsg() proto.Message {
	return &plan_assignment.PlanAssignment{}
}

func (d *UpdatePlanAssignmentDescriptor) IsUnary() bool {
	return true
}

func (d *UpdatePlanAssignmentDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdatePlanAssignmentDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdatePlanAssignmentDescriptor) IsCollection() bool {
	return false
}

func (d *UpdatePlanAssignmentDescriptor) IsPlural() bool {
	return false
}

func (d *UpdatePlanAssignmentDescriptor) HasResource() bool {
	return true
}

func (d *UpdatePlanAssignmentDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdatePlanAssignmentDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdatePlanAssignmentDescriptor) GetMethodName() string {
	return "UpdatePlanAssignment"
}

func (d *UpdatePlanAssignmentDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentService/UpdatePlanAssignment"
}

func (d *UpdatePlanAssignmentDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *UpdatePlanAssignmentDescriptor) GetApiName() string {
	return "PlanAssignmentService"
}

func (d *UpdatePlanAssignmentDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *UpdatePlanAssignmentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdatePlanAssignmentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentServiceDescriptor
}

func (d *UpdatePlanAssignmentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment.GetDescriptor()
}

func (d *UpdatePlanAssignmentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePlanAssignmentDescriptorClientMsgHandle{}
}

func (d *UpdatePlanAssignmentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePlanAssignmentDescriptorServerMsgHandle{}
}

func (h *UpdatePlanAssignmentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdatePlanAssignmentRequest) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetPlanAssignment()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*plan_assignment.Name)(nil)
}

func (h *UpdatePlanAssignmentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdatePlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdatePlanAssignmentRequest) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePlanAssignmentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdatePlanAssignmentRequest) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdatePlanAssignmentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*plan_assignment.PlanAssignment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*plan_assignment.PlanAssignment) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*plan_assignment.Name)(nil)
}

func (h *UpdatePlanAssignmentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*plan_assignment.PlanAssignment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*plan_assignment.PlanAssignment) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePlanAssignmentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*plan_assignment.PlanAssignment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*plan_assignment.PlanAssignment) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdatePlanAssignmentDescriptor() *UpdatePlanAssignmentDescriptor {
	return updatePlanAssignmentDescriptor
}

type DeletePlanAssignmentDescriptor struct{}

type DeletePlanAssignmentDescriptorClientMsgHandle struct{}

type DeletePlanAssignmentDescriptorServerMsgHandle struct{}

func (d *DeletePlanAssignmentDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeletePlanAssignmentRequest{}
}

func (d *DeletePlanAssignmentDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeletePlanAssignmentDescriptor) IsUnary() bool {
	return true
}

func (d *DeletePlanAssignmentDescriptor) IsClientStream() bool {
	return false
}

func (d *DeletePlanAssignmentDescriptor) IsServerStream() bool {
	return false
}

func (d *DeletePlanAssignmentDescriptor) IsCollection() bool {
	return false
}

func (d *DeletePlanAssignmentDescriptor) IsPlural() bool {
	return false
}

func (d *DeletePlanAssignmentDescriptor) HasResource() bool {
	return true
}

func (d *DeletePlanAssignmentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeletePlanAssignmentDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeletePlanAssignmentDescriptor) GetMethodName() string {
	return "DeletePlanAssignment"
}

func (d *DeletePlanAssignmentDescriptor) GetFullMethodName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentService/DeletePlanAssignment"
}

func (d *DeletePlanAssignmentDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *DeletePlanAssignmentDescriptor) GetApiName() string {
	return "PlanAssignmentService"
}

func (d *DeletePlanAssignmentDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *DeletePlanAssignmentDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeletePlanAssignmentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return planAssignmentServiceDescriptor
}

func (d *DeletePlanAssignmentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return plan_assignment.GetDescriptor()
}

func (d *DeletePlanAssignmentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePlanAssignmentDescriptorClientMsgHandle{}
}

func (d *DeletePlanAssignmentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePlanAssignmentDescriptorServerMsgHandle{}
}

func (h *DeletePlanAssignmentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeletePlanAssignmentRequest) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*plan_assignment.Name)(nil)
}

func (h *DeletePlanAssignmentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeletePlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeletePlanAssignmentRequest) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePlanAssignmentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePlanAssignmentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeletePlanAssignmentRequest) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeletePlanAssignmentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *plan_assignment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeletePlanAssignmentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*plan_assignment.Name
	})
	if ok {
		return plan_assignment.PlanAssignmentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePlanAssignmentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *plan_assignment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeletePlanAssignmentDescriptor() *DeletePlanAssignmentDescriptor {
	return deletePlanAssignmentDescriptor
}

type PlanAssignmentServiceDescriptor struct{}

func (d *PlanAssignmentServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getPlanAssignmentDescriptor,
		batchGetPlanAssignmentsDescriptor,
		listPlanAssignmentsDescriptor,
		watchPlanAssignmentDescriptor,
		watchPlanAssignmentsDescriptor,
		createPlanAssignmentDescriptor,
		updatePlanAssignmentDescriptor,
		deletePlanAssignmentDescriptor,
	}
}

func (d *PlanAssignmentServiceDescriptor) GetFullAPIName() string {
	return "/ntt.limits.v1alpha2.PlanAssignmentService"
}

func (d *PlanAssignmentServiceDescriptor) GetProtoPkgName() string {
	return "ntt.limits.v1alpha2"
}

func (d *PlanAssignmentServiceDescriptor) GetApiName() string {
	return "PlanAssignmentService"
}

func (d *PlanAssignmentServiceDescriptor) GetServiceDomain() string {
	return "limits.edgelq.com"
}

func (d *PlanAssignmentServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetPlanAssignmentServiceDescriptor() *PlanAssignmentServiceDescriptor {
	return planAssignmentServiceDescriptor
}

func initDescriptors() {
	planAssignmentServiceDescriptor = &PlanAssignmentServiceDescriptor{}
	getPlanAssignmentDescriptor = &GetPlanAssignmentDescriptor{}
	batchGetPlanAssignmentsDescriptor = &BatchGetPlanAssignmentsDescriptor{}
	listPlanAssignmentsDescriptor = &ListPlanAssignmentsDescriptor{}
	watchPlanAssignmentDescriptor = &WatchPlanAssignmentDescriptor{}
	watchPlanAssignmentsDescriptor = &WatchPlanAssignmentsDescriptor{}
	createPlanAssignmentDescriptor = &CreatePlanAssignmentDescriptor{}
	updatePlanAssignmentDescriptor = &UpdatePlanAssignmentDescriptor{}
	deletePlanAssignmentDescriptor = &DeletePlanAssignmentDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(planAssignmentServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getPlanAssignmentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetPlanAssignmentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listPlanAssignmentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPlanAssignmentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPlanAssignmentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createPlanAssignmentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updatePlanAssignmentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deletePlanAssignmentDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
