// Code generated by protoc-gen-goten-object
// File: edgelq/limits/proto/v1alpha2/plan_assignment_service.proto
// DO NOT EDIT!!!

package plan_assignment_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	plan_assignment "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan_assignment"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &plan_assignment.PlanAssignment{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetPlanAssignmentRequest) GotenObjectExt() {}

func (o *GetPlanAssignmentRequest) MakeFullFieldMask() *GetPlanAssignmentRequest_FieldMask {
	return FullGetPlanAssignmentRequest_FieldMask()
}

func (o *GetPlanAssignmentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetPlanAssignmentRequest_FieldMask()
}

func (o *GetPlanAssignmentRequest) MakeDiffFieldMask(other *GetPlanAssignmentRequest) *GetPlanAssignmentRequest_FieldMask {
	if o == nil && other == nil {
		return &GetPlanAssignmentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetPlanAssignmentRequest_FieldMask()
	}

	res := &GetPlanAssignmentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetPlanAssignmentRequest_FieldTerminalPath{selector: GetPlanAssignmentRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetPlanAssignmentRequest_FieldTerminalPath{selector: GetPlanAssignmentRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetPlanAssignmentRequest_FieldTerminalPath{selector: GetPlanAssignmentRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetPlanAssignmentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetPlanAssignmentRequest))
}

func (o *GetPlanAssignmentRequest) Clone() *GetPlanAssignmentRequest {
	if o == nil {
		return nil
	}
	result := &GetPlanAssignmentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &plan_assignment.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan_assignment.PlanAssignment_FieldMask)
	result.View = o.View
	return result
}

func (o *GetPlanAssignmentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetPlanAssignmentRequest) Merge(source *GetPlanAssignmentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &plan_assignment.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan_assignment.PlanAssignment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetPlanAssignmentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetPlanAssignmentRequest))
}

func (o *BatchGetPlanAssignmentsRequest) GotenObjectExt() {}

func (o *BatchGetPlanAssignmentsRequest) MakeFullFieldMask() *BatchGetPlanAssignmentsRequest_FieldMask {
	return FullBatchGetPlanAssignmentsRequest_FieldMask()
}

func (o *BatchGetPlanAssignmentsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPlanAssignmentsRequest_FieldMask()
}

func (o *BatchGetPlanAssignmentsRequest) MakeDiffFieldMask(other *BatchGetPlanAssignmentsRequest) *BatchGetPlanAssignmentsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPlanAssignmentsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPlanAssignmentsRequest_FieldMask()
	}

	res := &BatchGetPlanAssignmentsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPlanAssignmentsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPlanAssignmentsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetPlanAssignmentsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetPlanAssignmentsRequest_FieldTerminalPath{selector: BatchGetPlanAssignmentsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetPlanAssignmentsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPlanAssignmentsRequest))
}

func (o *BatchGetPlanAssignmentsRequest) Clone() *BatchGetPlanAssignmentsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetPlanAssignmentsRequest{}
	result.Names = make([]*plan_assignment.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &plan_assignment.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan_assignment.PlanAssignment_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetPlanAssignmentsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPlanAssignmentsRequest) Merge(source *BatchGetPlanAssignmentsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan_assignment.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &plan_assignment.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan_assignment.PlanAssignment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetPlanAssignmentsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPlanAssignmentsRequest))
}

func (o *BatchGetPlanAssignmentsResponse) GotenObjectExt() {}

func (o *BatchGetPlanAssignmentsResponse) MakeFullFieldMask() *BatchGetPlanAssignmentsResponse_FieldMask {
	return FullBatchGetPlanAssignmentsResponse_FieldMask()
}

func (o *BatchGetPlanAssignmentsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPlanAssignmentsResponse_FieldMask()
}

func (o *BatchGetPlanAssignmentsResponse) MakeDiffFieldMask(other *BatchGetPlanAssignmentsResponse) *BatchGetPlanAssignmentsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPlanAssignmentsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPlanAssignmentsResponse_FieldMask()
	}

	res := &BatchGetPlanAssignmentsResponse_FieldMask{}

	if len(o.GetPlanAssignments()) == len(other.GetPlanAssignments()) {
		for i, lValue := range o.GetPlanAssignments() {
			rValue := other.GetPlanAssignments()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetPlanAssignmentsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPlanAssignmentsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentsResponse_FieldPathSelectorPlanAssignments})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPlanAssignmentsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPlanAssignmentsResponse_FieldTerminalPath{selector: BatchGetPlanAssignmentsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetPlanAssignmentsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPlanAssignmentsResponse))
}

func (o *BatchGetPlanAssignmentsResponse) Clone() *BatchGetPlanAssignmentsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetPlanAssignmentsResponse{}
	result.PlanAssignments = make([]*plan_assignment.PlanAssignment, len(o.PlanAssignments))
	for i, sourceValue := range o.PlanAssignments {
		result.PlanAssignments[i] = sourceValue.Clone()
	}
	result.Missing = make([]*plan_assignment.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &plan_assignment.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetPlanAssignmentsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPlanAssignmentsResponse) Merge(source *BatchGetPlanAssignmentsResponse) {
	for _, sourceValue := range source.GetPlanAssignments() {
		exists := false
		for _, currentValue := range o.PlanAssignments {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan_assignment.PlanAssignment
			if sourceValue != nil {
				newDstElement = new(plan_assignment.PlanAssignment)
				newDstElement.Merge(sourceValue)
			}
			o.PlanAssignments = append(o.PlanAssignments, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan_assignment.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &plan_assignment.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetPlanAssignmentsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPlanAssignmentsResponse))
}

func (o *ListPlanAssignmentsRequest) GotenObjectExt() {}

func (o *ListPlanAssignmentsRequest) MakeFullFieldMask() *ListPlanAssignmentsRequest_FieldMask {
	return FullListPlanAssignmentsRequest_FieldMask()
}

func (o *ListPlanAssignmentsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPlanAssignmentsRequest_FieldMask()
}

func (o *ListPlanAssignmentsRequest) MakeDiffFieldMask(other *ListPlanAssignmentsRequest) *ListPlanAssignmentsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListPlanAssignmentsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPlanAssignmentsRequest_FieldMask()
	}

	res := &ListPlanAssignmentsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListPlanAssignmentsRequest_FieldTerminalPath{selector: ListPlanAssignmentsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListPlanAssignmentsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPlanAssignmentsRequest))
}

func (o *ListPlanAssignmentsRequest) Clone() *ListPlanAssignmentsRequest {
	if o == nil {
		return nil
	}
	result := &ListPlanAssignmentsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &plan_assignment.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &plan_assignment.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &plan_assignment.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &plan_assignment.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan_assignment.PlanAssignment_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListPlanAssignmentsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPlanAssignmentsRequest) Merge(source *ListPlanAssignmentsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &plan_assignment.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &plan_assignment.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &plan_assignment.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &plan_assignment.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan_assignment.PlanAssignment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListPlanAssignmentsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPlanAssignmentsRequest))
}

func (o *ListPlanAssignmentsResponse) GotenObjectExt() {}

func (o *ListPlanAssignmentsResponse) MakeFullFieldMask() *ListPlanAssignmentsResponse_FieldMask {
	return FullListPlanAssignmentsResponse_FieldMask()
}

func (o *ListPlanAssignmentsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPlanAssignmentsResponse_FieldMask()
}

func (o *ListPlanAssignmentsResponse) MakeDiffFieldMask(other *ListPlanAssignmentsResponse) *ListPlanAssignmentsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListPlanAssignmentsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPlanAssignmentsResponse_FieldMask()
	}

	res := &ListPlanAssignmentsResponse_FieldMask{}

	if len(o.GetPlanAssignments()) == len(other.GetPlanAssignments()) {
		for i, lValue := range o.GetPlanAssignments() {
			rValue := other.GetPlanAssignments()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorPlanAssignments})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListPlanAssignmentsResponse_FieldTerminalPath{selector: ListPlanAssignmentsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListPlanAssignmentsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPlanAssignmentsResponse))
}

func (o *ListPlanAssignmentsResponse) Clone() *ListPlanAssignmentsResponse {
	if o == nil {
		return nil
	}
	result := &ListPlanAssignmentsResponse{}
	result.PlanAssignments = make([]*plan_assignment.PlanAssignment, len(o.PlanAssignments))
	for i, sourceValue := range o.PlanAssignments {
		result.PlanAssignments[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &plan_assignment.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &plan_assignment.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListPlanAssignmentsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPlanAssignmentsResponse) Merge(source *ListPlanAssignmentsResponse) {
	for _, sourceValue := range source.GetPlanAssignments() {
		exists := false
		for _, currentValue := range o.PlanAssignments {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan_assignment.PlanAssignment
			if sourceValue != nil {
				newDstElement = new(plan_assignment.PlanAssignment)
				newDstElement.Merge(sourceValue)
			}
			o.PlanAssignments = append(o.PlanAssignments, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &plan_assignment.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &plan_assignment.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListPlanAssignmentsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPlanAssignmentsResponse))
}

func (o *WatchPlanAssignmentRequest) GotenObjectExt() {}

func (o *WatchPlanAssignmentRequest) MakeFullFieldMask() *WatchPlanAssignmentRequest_FieldMask {
	return FullWatchPlanAssignmentRequest_FieldMask()
}

func (o *WatchPlanAssignmentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlanAssignmentRequest_FieldMask()
}

func (o *WatchPlanAssignmentRequest) MakeDiffFieldMask(other *WatchPlanAssignmentRequest) *WatchPlanAssignmentRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPlanAssignmentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlanAssignmentRequest_FieldMask()
	}

	res := &WatchPlanAssignmentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentRequest_FieldTerminalPath{selector: WatchPlanAssignmentRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchPlanAssignmentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlanAssignmentRequest))
}

func (o *WatchPlanAssignmentRequest) Clone() *WatchPlanAssignmentRequest {
	if o == nil {
		return nil
	}
	result := &WatchPlanAssignmentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &plan_assignment.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan_assignment.PlanAssignment_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchPlanAssignmentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlanAssignmentRequest) Merge(source *WatchPlanAssignmentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &plan_assignment.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan_assignment.PlanAssignment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchPlanAssignmentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlanAssignmentRequest))
}

func (o *WatchPlanAssignmentResponse) GotenObjectExt() {}

func (o *WatchPlanAssignmentResponse) MakeFullFieldMask() *WatchPlanAssignmentResponse_FieldMask {
	return FullWatchPlanAssignmentResponse_FieldMask()
}

func (o *WatchPlanAssignmentResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlanAssignmentResponse_FieldMask()
}

func (o *WatchPlanAssignmentResponse) MakeDiffFieldMask(other *WatchPlanAssignmentResponse) *WatchPlanAssignmentResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPlanAssignmentResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlanAssignmentResponse_FieldMask()
	}

	res := &WatchPlanAssignmentResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchPlanAssignmentResponse_FieldTerminalPath{selector: WatchPlanAssignmentResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchPlanAssignmentResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlanAssignmentResponse))
}

func (o *WatchPlanAssignmentResponse) Clone() *WatchPlanAssignmentResponse {
	if o == nil {
		return nil
	}
	result := &WatchPlanAssignmentResponse{}
	result.Change = proto.Clone(o.Change).(*plan_assignment.PlanAssignmentChange)
	return result
}

func (o *WatchPlanAssignmentResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlanAssignmentResponse) Merge(source *WatchPlanAssignmentResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(plan_assignment.PlanAssignmentChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchPlanAssignmentResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlanAssignmentResponse))
}

func (o *WatchPlanAssignmentsRequest) GotenObjectExt() {}

func (o *WatchPlanAssignmentsRequest) MakeFullFieldMask() *WatchPlanAssignmentsRequest_FieldMask {
	return FullWatchPlanAssignmentsRequest_FieldMask()
}

func (o *WatchPlanAssignmentsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlanAssignmentsRequest_FieldMask()
}

func (o *WatchPlanAssignmentsRequest) MakeDiffFieldMask(other *WatchPlanAssignmentsRequest) *WatchPlanAssignmentsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPlanAssignmentsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlanAssignmentsRequest_FieldMask()
	}

	res := &WatchPlanAssignmentsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsRequest_FieldTerminalPath{selector: WatchPlanAssignmentsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchPlanAssignmentsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlanAssignmentsRequest))
}

func (o *WatchPlanAssignmentsRequest) Clone() *WatchPlanAssignmentsRequest {
	if o == nil {
		return nil
	}
	result := &WatchPlanAssignmentsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &plan_assignment.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &plan_assignment.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &plan_assignment.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &plan_assignment.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*plan_assignment.PlanAssignment_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchPlanAssignmentsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlanAssignmentsRequest) Merge(source *WatchPlanAssignmentsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &plan_assignment.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &plan_assignment.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &plan_assignment.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &plan_assignment.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan_assignment.PlanAssignment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchPlanAssignmentsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlanAssignmentsRequest))
}

func (o *WatchPlanAssignmentsResponse) GotenObjectExt() {}

func (o *WatchPlanAssignmentsResponse) MakeFullFieldMask() *WatchPlanAssignmentsResponse_FieldMask {
	return FullWatchPlanAssignmentsResponse_FieldMask()
}

func (o *WatchPlanAssignmentsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlanAssignmentsResponse_FieldMask()
}

func (o *WatchPlanAssignmentsResponse) MakeDiffFieldMask(other *WatchPlanAssignmentsResponse) *WatchPlanAssignmentsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPlanAssignmentsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlanAssignmentsResponse_FieldMask()
	}

	res := &WatchPlanAssignmentsResponse_FieldMask{}

	if len(o.GetPlanAssignmentChanges()) == len(other.GetPlanAssignmentChanges()) {
		for i, lValue := range o.GetPlanAssignmentChanges() {
			rValue := other.GetPlanAssignmentChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorPlanAssignmentChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldSubPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsResponse_FieldTerminalPath{selector: WatchPlanAssignmentsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchPlanAssignmentsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlanAssignmentsResponse))
}

func (o *WatchPlanAssignmentsResponse) Clone() *WatchPlanAssignmentsResponse {
	if o == nil {
		return nil
	}
	result := &WatchPlanAssignmentsResponse{}
	result.PlanAssignmentChanges = make([]*plan_assignment.PlanAssignmentChange, len(o.PlanAssignmentChanges))
	for i, sourceValue := range o.PlanAssignmentChanges {
		result.PlanAssignmentChanges[i] = proto.Clone(sourceValue).(*plan_assignment.PlanAssignmentChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchPlanAssignmentsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlanAssignmentsResponse) Merge(source *WatchPlanAssignmentsResponse) {
	for _, sourceValue := range source.GetPlanAssignmentChanges() {
		exists := false
		for _, currentValue := range o.PlanAssignmentChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *plan_assignment.PlanAssignmentChange
			if sourceValue != nil {
				newDstElement = new(plan_assignment.PlanAssignmentChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.PlanAssignmentChanges = append(o.PlanAssignmentChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchPlanAssignmentsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchPlanAssignmentsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlanAssignmentsResponse))
}

func (o *WatchPlanAssignmentsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchPlanAssignmentsResponse_PageTokenChange) MakeFullFieldMask() *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask {
	return FullWatchPlanAssignmentsResponse_PageTokenChange_FieldMask()
}

func (o *WatchPlanAssignmentsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPlanAssignmentsResponse_PageTokenChange_FieldMask()
}

func (o *WatchPlanAssignmentsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchPlanAssignmentsResponse_PageTokenChange) *WatchPlanAssignmentsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchPlanAssignmentsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPlanAssignmentsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchPlanAssignmentsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath{selector: WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchPlanAssignmentsResponsePageTokenChange_FieldTerminalPath{selector: WatchPlanAssignmentsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchPlanAssignmentsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPlanAssignmentsResponse_PageTokenChange))
}

func (o *WatchPlanAssignmentsResponse_PageTokenChange) Clone() *WatchPlanAssignmentsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchPlanAssignmentsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &plan_assignment.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &plan_assignment.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchPlanAssignmentsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPlanAssignmentsResponse_PageTokenChange) Merge(source *WatchPlanAssignmentsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &plan_assignment.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &plan_assignment.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchPlanAssignmentsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPlanAssignmentsResponse_PageTokenChange))
}

func (o *CreatePlanAssignmentRequest) GotenObjectExt() {}

func (o *CreatePlanAssignmentRequest) MakeFullFieldMask() *CreatePlanAssignmentRequest_FieldMask {
	return FullCreatePlanAssignmentRequest_FieldMask()
}

func (o *CreatePlanAssignmentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreatePlanAssignmentRequest_FieldMask()
}

func (o *CreatePlanAssignmentRequest) MakeDiffFieldMask(other *CreatePlanAssignmentRequest) *CreatePlanAssignmentRequest_FieldMask {
	if o == nil && other == nil {
		return &CreatePlanAssignmentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreatePlanAssignmentRequest_FieldMask()
	}

	res := &CreatePlanAssignmentRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreatePlanAssignmentRequest_FieldTerminalPath{selector: CreatePlanAssignmentRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetPlanAssignment().MakeDiffFieldMask(other.GetPlanAssignment())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreatePlanAssignmentRequest_FieldTerminalPath{selector: CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreatePlanAssignmentRequest_FieldSubPath{selector: CreatePlanAssignmentRequest_FieldPathSelectorPlanAssignment, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreatePlanAssignmentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreatePlanAssignmentRequest))
}

func (o *CreatePlanAssignmentRequest) Clone() *CreatePlanAssignmentRequest {
	if o == nil {
		return nil
	}
	result := &CreatePlanAssignmentRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &plan_assignment.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PlanAssignment = o.PlanAssignment.Clone()
	return result
}

func (o *CreatePlanAssignmentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreatePlanAssignmentRequest) Merge(source *CreatePlanAssignmentRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &plan_assignment.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetPlanAssignment() != nil {
		if o.PlanAssignment == nil {
			o.PlanAssignment = new(plan_assignment.PlanAssignment)
		}
		o.PlanAssignment.Merge(source.GetPlanAssignment())
	}
}

func (o *CreatePlanAssignmentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreatePlanAssignmentRequest))
}

func (o *UpdatePlanAssignmentRequest) GotenObjectExt() {}

func (o *UpdatePlanAssignmentRequest) MakeFullFieldMask() *UpdatePlanAssignmentRequest_FieldMask {
	return FullUpdatePlanAssignmentRequest_FieldMask()
}

func (o *UpdatePlanAssignmentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePlanAssignmentRequest_FieldMask()
}

func (o *UpdatePlanAssignmentRequest) MakeDiffFieldMask(other *UpdatePlanAssignmentRequest) *UpdatePlanAssignmentRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdatePlanAssignmentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePlanAssignmentRequest_FieldMask()
	}

	res := &UpdatePlanAssignmentRequest_FieldMask{}
	{
		subMask := o.GetPlanAssignment().MakeDiffFieldMask(other.GetPlanAssignment())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePlanAssignmentRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePlanAssignmentRequest_FieldSubPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorPlanAssignment, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdatePlanAssignmentRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePlanAssignmentRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePlanAssignmentRequest_FieldSubPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdatePlanAssignmentRequest_FieldTerminalPath{selector: UpdatePlanAssignmentRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdatePlanAssignmentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePlanAssignmentRequest))
}

func (o *UpdatePlanAssignmentRequest) Clone() *UpdatePlanAssignmentRequest {
	if o == nil {
		return nil
	}
	result := &UpdatePlanAssignmentRequest{}
	result.PlanAssignment = o.PlanAssignment.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*plan_assignment.PlanAssignment_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdatePlanAssignmentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePlanAssignmentRequest) Merge(source *UpdatePlanAssignmentRequest) {
	if source.GetPlanAssignment() != nil {
		if o.PlanAssignment == nil {
			o.PlanAssignment = new(plan_assignment.PlanAssignment)
		}
		o.PlanAssignment.Merge(source.GetPlanAssignment())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(plan_assignment.PlanAssignment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdatePlanAssignmentRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdatePlanAssignmentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePlanAssignmentRequest))
}

func (o *UpdatePlanAssignmentRequest_CAS) GotenObjectExt() {}

func (o *UpdatePlanAssignmentRequest_CAS) MakeFullFieldMask() *UpdatePlanAssignmentRequest_CAS_FieldMask {
	return FullUpdatePlanAssignmentRequest_CAS_FieldMask()
}

func (o *UpdatePlanAssignmentRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePlanAssignmentRequest_CAS_FieldMask()
}

func (o *UpdatePlanAssignmentRequest_CAS) MakeDiffFieldMask(other *UpdatePlanAssignmentRequest_CAS) *UpdatePlanAssignmentRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdatePlanAssignmentRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePlanAssignmentRequest_CAS_FieldMask()
	}

	res := &UpdatePlanAssignmentRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestCAS_FieldTerminalPath{selector: UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestCAS_FieldSubPath{selector: UpdatePlanAssignmentRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdatePlanAssignmentRequestCAS_FieldTerminalPath{selector: UpdatePlanAssignmentRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdatePlanAssignmentRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePlanAssignmentRequest_CAS))
}

func (o *UpdatePlanAssignmentRequest_CAS) Clone() *UpdatePlanAssignmentRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdatePlanAssignmentRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*plan_assignment.PlanAssignment_FieldMask)
	return result
}

func (o *UpdatePlanAssignmentRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePlanAssignmentRequest_CAS) Merge(source *UpdatePlanAssignmentRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(plan_assignment.PlanAssignment)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(plan_assignment.PlanAssignment_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdatePlanAssignmentRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePlanAssignmentRequest_CAS))
}

func (o *DeletePlanAssignmentRequest) GotenObjectExt() {}

func (o *DeletePlanAssignmentRequest) MakeFullFieldMask() *DeletePlanAssignmentRequest_FieldMask {
	return FullDeletePlanAssignmentRequest_FieldMask()
}

func (o *DeletePlanAssignmentRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeletePlanAssignmentRequest_FieldMask()
}

func (o *DeletePlanAssignmentRequest) MakeDiffFieldMask(other *DeletePlanAssignmentRequest) *DeletePlanAssignmentRequest_FieldMask {
	if o == nil && other == nil {
		return &DeletePlanAssignmentRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeletePlanAssignmentRequest_FieldMask()
	}

	res := &DeletePlanAssignmentRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeletePlanAssignmentRequest_FieldTerminalPath{selector: DeletePlanAssignmentRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeletePlanAssignmentRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeletePlanAssignmentRequest))
}

func (o *DeletePlanAssignmentRequest) Clone() *DeletePlanAssignmentRequest {
	if o == nil {
		return nil
	}
	result := &DeletePlanAssignmentRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &plan_assignment.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeletePlanAssignmentRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeletePlanAssignmentRequest) Merge(source *DeletePlanAssignmentRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &plan_assignment.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeletePlanAssignmentRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeletePlanAssignmentRequest))
}
