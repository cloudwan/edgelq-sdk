// Code generated by protoc-gen-goten-client
// API: PlanAssignmentService
// DO NOT EDIT!!!

package plan_assignment_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	plan_assignment "github.com/cloudwan/edgelq-sdk/limits/resources/v1alpha2/plan_assignment"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &plan_assignment.PlanAssignment{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PlanAssignmentServiceClient is the client API for PlanAssignmentService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlanAssignmentServiceClient interface {
	GetPlanAssignment(ctx context.Context, in *GetPlanAssignmentRequest, opts ...grpc.CallOption) (*plan_assignment.PlanAssignment, error)
	BatchGetPlanAssignments(ctx context.Context, in *BatchGetPlanAssignmentsRequest, opts ...grpc.CallOption) (*BatchGetPlanAssignmentsResponse, error)
	ListPlanAssignments(ctx context.Context, in *ListPlanAssignmentsRequest, opts ...grpc.CallOption) (*ListPlanAssignmentsResponse, error)
	WatchPlanAssignment(ctx context.Context, in *WatchPlanAssignmentRequest, opts ...grpc.CallOption) (WatchPlanAssignmentClientStream, error)
	WatchPlanAssignments(ctx context.Context, in *WatchPlanAssignmentsRequest, opts ...grpc.CallOption) (WatchPlanAssignmentsClientStream, error)
	CreatePlanAssignment(ctx context.Context, in *CreatePlanAssignmentRequest, opts ...grpc.CallOption) (*plan_assignment.PlanAssignment, error)
	UpdatePlanAssignment(ctx context.Context, in *UpdatePlanAssignmentRequest, opts ...grpc.CallOption) (*plan_assignment.PlanAssignment, error)
	DeletePlanAssignment(ctx context.Context, in *DeletePlanAssignmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewPlanAssignmentServiceClient(cc grpc.ClientConnInterface) PlanAssignmentServiceClient {
	return &client{cc}
}

func (c *client) GetPlanAssignment(ctx context.Context, in *GetPlanAssignmentRequest, opts ...grpc.CallOption) (*plan_assignment.PlanAssignment, error) {
	out := new(plan_assignment.PlanAssignment)
	err := c.cc.Invoke(ctx, "/ntt.limits.v1alpha2.PlanAssignmentService/GetPlanAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetPlanAssignments(ctx context.Context, in *BatchGetPlanAssignmentsRequest, opts ...grpc.CallOption) (*BatchGetPlanAssignmentsResponse, error) {
	out := new(BatchGetPlanAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/ntt.limits.v1alpha2.PlanAssignmentService/BatchGetPlanAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPlanAssignments(ctx context.Context, in *ListPlanAssignmentsRequest, opts ...grpc.CallOption) (*ListPlanAssignmentsResponse, error) {
	out := new(ListPlanAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/ntt.limits.v1alpha2.PlanAssignmentService/ListPlanAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchPlanAssignment(ctx context.Context, in *WatchPlanAssignmentRequest, opts ...grpc.CallOption) (WatchPlanAssignmentClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPlanAssignment",
			ServerStreams: true,
		},
		"/ntt.limits.v1alpha2.PlanAssignmentService/WatchPlanAssignment", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPlanAssignmentWatchPlanAssignmentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPlanAssignmentClientStream interface {
	Recv() (*WatchPlanAssignmentResponse, error)
	grpc.ClientStream
}

type watchPlanAssignmentWatchPlanAssignmentClient struct {
	grpc.ClientStream
}

func (x *watchPlanAssignmentWatchPlanAssignmentClient) Recv() (*WatchPlanAssignmentResponse, error) {
	m := new(WatchPlanAssignmentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchPlanAssignments(ctx context.Context, in *WatchPlanAssignmentsRequest, opts ...grpc.CallOption) (WatchPlanAssignmentsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPlanAssignments",
			ServerStreams: true,
		},
		"/ntt.limits.v1alpha2.PlanAssignmentService/WatchPlanAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPlanAssignmentsWatchPlanAssignmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPlanAssignmentsClientStream interface {
	Recv() (*WatchPlanAssignmentsResponse, error)
	grpc.ClientStream
}

type watchPlanAssignmentsWatchPlanAssignmentsClient struct {
	grpc.ClientStream
}

func (x *watchPlanAssignmentsWatchPlanAssignmentsClient) Recv() (*WatchPlanAssignmentsResponse, error) {
	m := new(WatchPlanAssignmentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreatePlanAssignment(ctx context.Context, in *CreatePlanAssignmentRequest, opts ...grpc.CallOption) (*plan_assignment.PlanAssignment, error) {
	out := new(plan_assignment.PlanAssignment)
	err := c.cc.Invoke(ctx, "/ntt.limits.v1alpha2.PlanAssignmentService/CreatePlanAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePlanAssignment(ctx context.Context, in *UpdatePlanAssignmentRequest, opts ...grpc.CallOption) (*plan_assignment.PlanAssignment, error) {
	out := new(plan_assignment.PlanAssignment)
	err := c.cc.Invoke(ctx, "/ntt.limits.v1alpha2.PlanAssignmentService/UpdatePlanAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeletePlanAssignment(ctx context.Context, in *DeletePlanAssignmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.limits.v1alpha2.PlanAssignmentService/DeletePlanAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
