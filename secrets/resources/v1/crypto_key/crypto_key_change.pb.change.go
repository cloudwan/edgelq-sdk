// Code generated by protoc-gen-goten-resource
// Resource change: CryptoKeyChange
// DO NOT EDIT!!!

package crypto_key

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/project"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &fieldmaskpb.FieldMask{}
)

func (c *CryptoKeyChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*CryptoKeyChange_Added_)
	return ok
}

func (c *CryptoKeyChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*CryptoKeyChange_Modified_)
	return ok
}

func (c *CryptoKeyChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*CryptoKeyChange_Current_)
	return ok
}

func (c *CryptoKeyChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*CryptoKeyChange_Removed_)
	return ok
}

func (c *CryptoKeyChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *CryptoKeyChange_Added_:
		return cType.Added.ViewIndex
	case *CryptoKeyChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *CryptoKeyChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *CryptoKeyChange_Removed_:
		return cType.Removed.ViewIndex
	case *CryptoKeyChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *CryptoKeyChange) GetCryptoKey() *CryptoKey {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *CryptoKeyChange_Added_:
		return cType.Added.CryptoKey
	case *CryptoKeyChange_Modified_:
		return cType.Modified.CryptoKey
	case *CryptoKeyChange_Current_:
		return cType.Current.CryptoKey
	case *CryptoKeyChange_Removed_:
		return nil
	}
	return nil
}

func (c *CryptoKeyChange) GetRawResource() gotenresource.Resource {
	return c.GetCryptoKey()
}

func (c *CryptoKeyChange) GetCryptoKeyName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *CryptoKeyChange_Added_:
		return cType.Added.CryptoKey.GetName()
	case *CryptoKeyChange_Modified_:
		return cType.Modified.Name
	case *CryptoKeyChange_Current_:
		return cType.Current.CryptoKey.GetName()
	case *CryptoKeyChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *CryptoKeyChange) GetRawName() gotenresource.Name {
	return c.GetCryptoKeyName()
}

func (c *CryptoKeyChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &CryptoKeyChange_Added_{
		Added: &CryptoKeyChange_Added{
			CryptoKey: snapshot.(*CryptoKey),
			ViewIndex: int32(idx),
		},
	}
}

func (c *CryptoKeyChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &CryptoKeyChange_Modified_{
		Modified: &CryptoKeyChange_Modified{
			Name:              name.(*Name),
			CryptoKey:         snapshot.(*CryptoKey),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *CryptoKeyChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &CryptoKeyChange_Current_{
		Current: &CryptoKeyChange_Current{
			CryptoKey: snapshot.(*CryptoKey),
		},
	}
}

func (c *CryptoKeyChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &CryptoKeyChange_Removed_{
		Removed: &CryptoKeyChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
