// Code generated by protoc-gen-goten-resource
// Resource: CryptoKey
// DO NOT EDIT!!!

package crypto_key

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &meta.Meta{}
)

type CryptoKeyList []*CryptoKey

func (l CryptoKeyList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*CryptoKey))
}

func (l CryptoKeyList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(CryptoKeyList)...)
}

func (l CryptoKeyList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CryptoKeyList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l CryptoKeyList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*CryptoKey)
}

func (l CryptoKeyList) Length() int {
	return len(l)
}

type CryptoKeyChangeList []*CryptoKeyChange

func (l CryptoKeyChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*CryptoKeyChange))
}

func (l CryptoKeyChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(CryptoKeyChangeList)...)
}

func (l CryptoKeyChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CryptoKeyChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l CryptoKeyChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*CryptoKeyChange)
}

func (l CryptoKeyChangeList) Length() int {
	return len(l)
}

type CryptoKeyNameList []*Name

func (l CryptoKeyNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l CryptoKeyNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(CryptoKeyNameList)...)
}

func (l CryptoKeyNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CryptoKeyNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l CryptoKeyNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l CryptoKeyNameList) Length() int {
	return len(l)
}

type CryptoKeyReferenceList []*Reference

func (l CryptoKeyReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l CryptoKeyReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(CryptoKeyReferenceList)...)
}

func (l CryptoKeyReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CryptoKeyReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l CryptoKeyReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l CryptoKeyReferenceList) Length() int {
	return len(l)
}

type CryptoKeyParentNameList []*ParentName

func (l CryptoKeyParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l CryptoKeyParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(CryptoKeyParentNameList)...)
}

func (l CryptoKeyParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CryptoKeyParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l CryptoKeyParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l CryptoKeyParentNameList) Length() int {
	return len(l)
}

type CryptoKeyParentReferenceList []*ParentReference

func (l CryptoKeyParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l CryptoKeyParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(CryptoKeyParentReferenceList)...)
}

func (l CryptoKeyParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l CryptoKeyParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l CryptoKeyParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l CryptoKeyParentReferenceList) Length() int {
	return len(l)
}

type CryptoKeyMap map[Name]*CryptoKey

func (m CryptoKeyMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m CryptoKeyMap) Set(res gotenresource.Resource) {
	tRes := res.(*CryptoKey)
	m[*tRes.Name] = tRes
}

func (m CryptoKeyMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m CryptoKeyMap) Length() int {
	return len(m)
}

func (m CryptoKeyMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type CryptoKeyChangeMap map[Name]*CryptoKeyChange

func (m CryptoKeyChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m CryptoKeyChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*CryptoKeyChange)
	m[*tChange.GetCryptoKeyName()] = tChange
}

func (m CryptoKeyChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m CryptoKeyChangeMap) Length() int {
	return len(m)
}

func (m CryptoKeyChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
