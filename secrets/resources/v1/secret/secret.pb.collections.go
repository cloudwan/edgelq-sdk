// Code generated by protoc-gen-goten-resource
// Resource: Secret
// DO NOT EDIT!!!

package secret

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &meta.Meta{}
)

type SecretList []*Secret

func (l SecretList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Secret))
}

func (l SecretList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(SecretList)...)
}

func (l SecretList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SecretList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l SecretList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Secret)
}

func (l SecretList) Length() int {
	return len(l)
}

type SecretChangeList []*SecretChange

func (l SecretChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*SecretChange))
}

func (l SecretChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(SecretChangeList)...)
}

func (l SecretChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SecretChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l SecretChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*SecretChange)
}

func (l SecretChangeList) Length() int {
	return len(l)
}

type SecretNameList []*Name

func (l SecretNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l SecretNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(SecretNameList)...)
}

func (l SecretNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SecretNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l SecretNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l SecretNameList) Length() int {
	return len(l)
}

type SecretReferenceList []*Reference

func (l SecretReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l SecretReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(SecretReferenceList)...)
}

func (l SecretReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SecretReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l SecretReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l SecretReferenceList) Length() int {
	return len(l)
}

type SecretParentNameList []*ParentName

func (l SecretParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l SecretParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(SecretParentNameList)...)
}

func (l SecretParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SecretParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l SecretParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l SecretParentNameList) Length() int {
	return len(l)
}

type SecretParentReferenceList []*ParentReference

func (l SecretParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l SecretParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(SecretParentReferenceList)...)
}

func (l SecretParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l SecretParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l SecretParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l SecretParentReferenceList) Length() int {
	return len(l)
}

type SecretMap map[Name]*Secret

func (m SecretMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m SecretMap) Set(res gotenresource.Resource) {
	tRes := res.(*Secret)
	m[*tRes.Name] = tRes
}

func (m SecretMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m SecretMap) Length() int {
	return len(m)
}

func (m SecretMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type SecretChangeMap map[Name]*SecretChange

func (m SecretChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m SecretChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*SecretChange)
	m[*tChange.GetSecretName()] = tChange
}

func (m SecretChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m SecretChangeMap) Length() int {
	return len(m)
}

func (m SecretChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
