// Code generated by protoc-gen-goten-object
// File: edgelq/secrets/proto/v1alpha2/secret.proto
// DO NOT EDIT!!!

package secret

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	project "github.com/cloudwan/edgelq-sdk/secrets/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &project.Project{}
)

func (o *Secret) GotenObjectExt() {}

func (o *Secret) MakeFullFieldMask() *Secret_FieldMask {
	return FullSecret_FieldMask()
}

func (o *Secret) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSecret_FieldMask()
}

func (o *Secret) MakeDiffFieldMask(other *Secret) *Secret_FieldMask {
	if o == nil && other == nil {
		return &Secret_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSecret_FieldMask()
	}

	res := &Secret_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Secret_FieldTerminalPath{selector: Secret_FieldPathSelectorName})
	}
	if string(o.GetEncData()) != string(other.GetEncData()) {
		res.Paths = append(res.Paths, &Secret_FieldTerminalPath{selector: Secret_FieldPathSelectorEncData})
	}

	if len(o.GetData()) == len(other.GetData()) {
		for i, lValue := range o.GetData() {
			rValue := other.GetData()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &Secret_FieldTerminalPath{selector: Secret_FieldPathSelectorData})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Secret_FieldTerminalPath{selector: Secret_FieldPathSelectorData})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Secret_FieldTerminalPath{selector: Secret_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Secret_FieldSubPath{selector: Secret_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Secret) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Secret))
}

func (o *Secret) Clone() *Secret {
	if o == nil {
		return nil
	}
	result := &Secret{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.EncData = make([]byte, len(o.EncData))
	for i, bt := range o.EncData {
		result.EncData[i] = bt
	}
	result.Data = map[string]string{}
	for key, sourceValue := range o.Data {
		result.Data[key] = sourceValue
	}
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *Secret) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Secret) Merge(source *Secret) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.EncData = make([]byte, len(source.GetEncData()))
	for i, bt := range source.GetEncData() {
		o.EncData[i] = bt
	}
	if source.GetData() != nil {
		if o.Data == nil {
			o.Data = make(map[string]string, len(source.GetData()))
		}
		for key, sourceValue := range source.GetData() {
			o.Data[key] = sourceValue
		}
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *Secret) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Secret))
}
