// Code generated by protoc-gen-goten-client
// API: CryptoKeyService
// DO NOT EDIT!!!

package crypto_key_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	crypto_key "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/crypto_key"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &crypto_key.CryptoKey{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CryptoKeyServiceClient is the client API for CryptoKeyService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CryptoKeyServiceClient interface {
	GetCryptoKey(ctx context.Context, in *GetCryptoKeyRequest, opts ...grpc.CallOption) (*crypto_key.CryptoKey, error)
	BatchGetCryptoKeys(ctx context.Context, in *BatchGetCryptoKeysRequest, opts ...grpc.CallOption) (*BatchGetCryptoKeysResponse, error)
	ListCryptoKeys(ctx context.Context, in *ListCryptoKeysRequest, opts ...grpc.CallOption) (*ListCryptoKeysResponse, error)
	WatchCryptoKey(ctx context.Context, in *WatchCryptoKeyRequest, opts ...grpc.CallOption) (WatchCryptoKeyClientStream, error)
	WatchCryptoKeys(ctx context.Context, in *WatchCryptoKeysRequest, opts ...grpc.CallOption) (WatchCryptoKeysClientStream, error)
	DeleteCryptoKey(ctx context.Context, in *DeleteCryptoKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewCryptoKeyServiceClient(cc grpc.ClientConnInterface) CryptoKeyServiceClient {
	return &client{cc}
}

func (c *client) GetCryptoKey(ctx context.Context, in *GetCryptoKeyRequest, opts ...grpc.CallOption) (*crypto_key.CryptoKey, error) {
	out := new(crypto_key.CryptoKey)
	err := c.cc.Invoke(ctx, "/ntt.secrets.v1.CryptoKeyService/GetCryptoKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetCryptoKeys(ctx context.Context, in *BatchGetCryptoKeysRequest, opts ...grpc.CallOption) (*BatchGetCryptoKeysResponse, error) {
	out := new(BatchGetCryptoKeysResponse)
	err := c.cc.Invoke(ctx, "/ntt.secrets.v1.CryptoKeyService/BatchGetCryptoKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListCryptoKeys(ctx context.Context, in *ListCryptoKeysRequest, opts ...grpc.CallOption) (*ListCryptoKeysResponse, error) {
	out := new(ListCryptoKeysResponse)
	err := c.cc.Invoke(ctx, "/ntt.secrets.v1.CryptoKeyService/ListCryptoKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchCryptoKey(ctx context.Context, in *WatchCryptoKeyRequest, opts ...grpc.CallOption) (WatchCryptoKeyClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchCryptoKey",
			ServerStreams: true,
		},
		"/ntt.secrets.v1.CryptoKeyService/WatchCryptoKey", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchCryptoKeyWatchCryptoKeyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchCryptoKeyClientStream interface {
	Recv() (*WatchCryptoKeyResponse, error)
	grpc.ClientStream
}

type watchCryptoKeyWatchCryptoKeyClient struct {
	grpc.ClientStream
}

func (x *watchCryptoKeyWatchCryptoKeyClient) Recv() (*WatchCryptoKeyResponse, error) {
	m := new(WatchCryptoKeyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchCryptoKeys(ctx context.Context, in *WatchCryptoKeysRequest, opts ...grpc.CallOption) (WatchCryptoKeysClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchCryptoKeys",
			ServerStreams: true,
		},
		"/ntt.secrets.v1.CryptoKeyService/WatchCryptoKeys", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchCryptoKeysWatchCryptoKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchCryptoKeysClientStream interface {
	Recv() (*WatchCryptoKeysResponse, error)
	grpc.ClientStream
}

type watchCryptoKeysWatchCryptoKeysClient struct {
	grpc.ClientStream
}

func (x *watchCryptoKeysWatchCryptoKeysClient) Recv() (*WatchCryptoKeysResponse, error) {
	m := new(WatchCryptoKeysResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) DeleteCryptoKey(ctx context.Context, in *DeleteCryptoKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.secrets.v1.CryptoKeyService/DeleteCryptoKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
