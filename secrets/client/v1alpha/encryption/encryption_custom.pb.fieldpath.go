// Code generated by protoc-gen-goten-object
// File: edgelq/secrets/proto/v1alpha/encryption_custom.proto
// DO NOT EDIT!!!

package encryption_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import ()

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var ()

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type EncryptDataRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() EncryptDataRequest_FieldPathSelector
	Get(source *EncryptDataRequest) []interface{}
	GetSingle(source *EncryptDataRequest) (interface{}, bool)
	ClearValue(item *EncryptDataRequest)

	// Those methods build corresponding EncryptDataRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) EncryptDataRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) EncryptDataRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) EncryptDataRequest_FieldPathArrayItemValue
}

type EncryptDataRequest_FieldPathSelector int32

const (
	EncryptDataRequest_FieldPathSelectorProjectName EncryptDataRequest_FieldPathSelector = 0
	EncryptDataRequest_FieldPathSelectorData        EncryptDataRequest_FieldPathSelector = 1
)

func (s EncryptDataRequest_FieldPathSelector) String() string {
	switch s {
	case EncryptDataRequest_FieldPathSelectorProjectName:
		return "project_name"
	case EncryptDataRequest_FieldPathSelectorData:
		return "data"
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataRequest: %d", s))
	}
}

func BuildEncryptDataRequest_FieldPath(fp gotenobject.RawFieldPath) (EncryptDataRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object EncryptDataRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "project_name", "projectName", "project-name":
			return &EncryptDataRequest_FieldTerminalPath{selector: EncryptDataRequest_FieldPathSelectorProjectName}, nil
		case "data":
			return &EncryptDataRequest_FieldTerminalPath{selector: EncryptDataRequest_FieldPathSelectorData}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object EncryptDataRequest", fp)
}

func ParseEncryptDataRequest_FieldPath(rawField string) (EncryptDataRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildEncryptDataRequest_FieldPath(fp)
}

func MustParseEncryptDataRequest_FieldPath(rawField string) EncryptDataRequest_FieldPath {
	fp, err := ParseEncryptDataRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type EncryptDataRequest_FieldTerminalPath struct {
	selector EncryptDataRequest_FieldPathSelector
}

var _ EncryptDataRequest_FieldPath = (*EncryptDataRequest_FieldTerminalPath)(nil)

func (fp *EncryptDataRequest_FieldTerminalPath) Selector() EncryptDataRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *EncryptDataRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *EncryptDataRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source EncryptDataRequest
func (fp *EncryptDataRequest_FieldTerminalPath) Get(source *EncryptDataRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case EncryptDataRequest_FieldPathSelectorProjectName:
			values = append(values, source.ProjectName)
		case EncryptDataRequest_FieldPathSelectorData:
			values = append(values, source.Data)
		default:
			panic(fmt.Sprintf("Invalid selector for EncryptDataRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *EncryptDataRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*EncryptDataRequest))
}

// GetSingle returns value pointed by specific field of from source EncryptDataRequest
func (fp *EncryptDataRequest_FieldTerminalPath) GetSingle(source *EncryptDataRequest) (interface{}, bool) {
	switch fp.selector {
	case EncryptDataRequest_FieldPathSelectorProjectName:
		return source.GetProjectName(), source != nil
	case EncryptDataRequest_FieldPathSelectorData:
		res := source.GetData()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataRequest: %d", fp.selector))
	}
}

func (fp *EncryptDataRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*EncryptDataRequest))
}

// GetDefault returns a default value of the field type
func (fp *EncryptDataRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case EncryptDataRequest_FieldPathSelectorProjectName:
		return ""
	case EncryptDataRequest_FieldPathSelectorData:
		return ([]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataRequest: %d", fp.selector))
	}
}

func (fp *EncryptDataRequest_FieldTerminalPath) ClearValue(item *EncryptDataRequest) {
	if item != nil {
		switch fp.selector {
		case EncryptDataRequest_FieldPathSelectorProjectName:
			item.ProjectName = ""
		case EncryptDataRequest_FieldPathSelectorData:
			item.Data = nil
		default:
			panic(fmt.Sprintf("Invalid selector for EncryptDataRequest: %d", fp.selector))
		}
	}
}

func (fp *EncryptDataRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*EncryptDataRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *EncryptDataRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == EncryptDataRequest_FieldPathSelectorProjectName ||
		fp.selector == EncryptDataRequest_FieldPathSelectorData
}

func (fp *EncryptDataRequest_FieldTerminalPath) WithIValue(value interface{}) EncryptDataRequest_FieldPathValue {
	switch fp.selector {
	case EncryptDataRequest_FieldPathSelectorProjectName:
		return &EncryptDataRequest_FieldTerminalPathValue{EncryptDataRequest_FieldTerminalPath: *fp, value: value.(string)}
	case EncryptDataRequest_FieldPathSelectorData:
		return &EncryptDataRequest_FieldTerminalPathValue{EncryptDataRequest_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataRequest: %d", fp.selector))
	}
}

func (fp *EncryptDataRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *EncryptDataRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) EncryptDataRequest_FieldPathArrayOfValues {
	fpaov := &EncryptDataRequest_FieldTerminalPathArrayOfValues{EncryptDataRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case EncryptDataRequest_FieldPathSelectorProjectName:
		return &EncryptDataRequest_FieldTerminalPathArrayOfValues{EncryptDataRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case EncryptDataRequest_FieldPathSelectorData:
		return &EncryptDataRequest_FieldTerminalPathArrayOfValues{EncryptDataRequest_FieldTerminalPath: *fp, values: values.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *EncryptDataRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *EncryptDataRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) EncryptDataRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataRequest: %d", fp.selector))
	}
}

func (fp *EncryptDataRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// EncryptDataRequest_FieldPathValue allows storing values for EncryptDataRequest fields according to their type
type EncryptDataRequest_FieldPathValue interface {
	EncryptDataRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **EncryptDataRequest)
	CompareWith(*EncryptDataRequest) (cmp int, comparable bool)
}

func ParseEncryptDataRequest_FieldPathValue(pathStr, valueStr string) (EncryptDataRequest_FieldPathValue, error) {
	fp, err := ParseEncryptDataRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing EncryptDataRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(EncryptDataRequest_FieldPathValue), nil
}

func MustParseEncryptDataRequest_FieldPathValue(pathStr, valueStr string) EncryptDataRequest_FieldPathValue {
	fpv, err := ParseEncryptDataRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type EncryptDataRequest_FieldTerminalPathValue struct {
	EncryptDataRequest_FieldTerminalPath
	value interface{}
}

var _ EncryptDataRequest_FieldPathValue = (*EncryptDataRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'EncryptDataRequest' as interface{}
func (fpv *EncryptDataRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *EncryptDataRequest_FieldTerminalPathValue) AsProjectNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *EncryptDataRequest_FieldTerminalPathValue) AsDataValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}

// SetTo stores value for selected field for object EncryptDataRequest
func (fpv *EncryptDataRequest_FieldTerminalPathValue) SetTo(target **EncryptDataRequest) {
	if *target == nil {
		*target = new(EncryptDataRequest)
	}
	switch fpv.selector {
	case EncryptDataRequest_FieldPathSelectorProjectName:
		(*target).ProjectName = fpv.value.(string)
	case EncryptDataRequest_FieldPathSelectorData:
		(*target).Data = fpv.value.([]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataRequest: %d", fpv.selector))
	}
}

func (fpv *EncryptDataRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*EncryptDataRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'EncryptDataRequest_FieldTerminalPathValue' with the value under path in 'EncryptDataRequest'.
func (fpv *EncryptDataRequest_FieldTerminalPathValue) CompareWith(source *EncryptDataRequest) (int, bool) {
	switch fpv.selector {
	case EncryptDataRequest_FieldPathSelectorProjectName:
		leftValue := fpv.value.(string)
		rightValue := source.GetProjectName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case EncryptDataRequest_FieldPathSelectorData:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataRequest: %d", fpv.selector))
	}
}

func (fpv *EncryptDataRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*EncryptDataRequest))
}

// EncryptDataRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for EncryptDataRequest according to their type
// Present only for array (repeated) types.
type EncryptDataRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	EncryptDataRequest_FieldPath
	ContainsValue(*EncryptDataRequest) bool
}

// ParseEncryptDataRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseEncryptDataRequest_FieldPathArrayItemValue(pathStr, valueStr string) (EncryptDataRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseEncryptDataRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing EncryptDataRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(EncryptDataRequest_FieldPathArrayItemValue), nil
}

func MustParseEncryptDataRequest_FieldPathArrayItemValue(pathStr, valueStr string) EncryptDataRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseEncryptDataRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type EncryptDataRequest_FieldTerminalPathArrayItemValue struct {
	EncryptDataRequest_FieldTerminalPath
	value interface{}
}

var _ EncryptDataRequest_FieldPathArrayItemValue = (*EncryptDataRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object EncryptDataRequest as interface{}
func (fpaiv *EncryptDataRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *EncryptDataRequest_FieldTerminalPathArrayItemValue) GetSingle(source *EncryptDataRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *EncryptDataRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*EncryptDataRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'EncryptDataRequest'
func (fpaiv *EncryptDataRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *EncryptDataRequest) bool {
	slice := fpaiv.EncryptDataRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// EncryptDataRequest_FieldPathArrayOfValues allows storing slice of values for EncryptDataRequest fields according to their type
type EncryptDataRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	EncryptDataRequest_FieldPath
}

func ParseEncryptDataRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (EncryptDataRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseEncryptDataRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing EncryptDataRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(EncryptDataRequest_FieldPathArrayOfValues), nil
}

func MustParseEncryptDataRequest_FieldPathArrayOfValues(pathStr, valuesStr string) EncryptDataRequest_FieldPathArrayOfValues {
	fpaov, err := ParseEncryptDataRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type EncryptDataRequest_FieldTerminalPathArrayOfValues struct {
	EncryptDataRequest_FieldTerminalPath
	values interface{}
}

var _ EncryptDataRequest_FieldPathArrayOfValues = (*EncryptDataRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *EncryptDataRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case EncryptDataRequest_FieldPathSelectorProjectName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case EncryptDataRequest_FieldPathSelectorData:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *EncryptDataRequest_FieldTerminalPathArrayOfValues) AsProjectNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *EncryptDataRequest_FieldTerminalPathArrayOfValues) AsDataArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type EncryptDataResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() EncryptDataResponse_FieldPathSelector
	Get(source *EncryptDataResponse) []interface{}
	GetSingle(source *EncryptDataResponse) (interface{}, bool)
	ClearValue(item *EncryptDataResponse)

	// Those methods build corresponding EncryptDataResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) EncryptDataResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) EncryptDataResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) EncryptDataResponse_FieldPathArrayItemValue
}

type EncryptDataResponse_FieldPathSelector int32

const (
	EncryptDataResponse_FieldPathSelectorData EncryptDataResponse_FieldPathSelector = 0
)

func (s EncryptDataResponse_FieldPathSelector) String() string {
	switch s {
	case EncryptDataResponse_FieldPathSelectorData:
		return "data"
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataResponse: %d", s))
	}
}

func BuildEncryptDataResponse_FieldPath(fp gotenobject.RawFieldPath) (EncryptDataResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object EncryptDataResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "data":
			return &EncryptDataResponse_FieldTerminalPath{selector: EncryptDataResponse_FieldPathSelectorData}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object EncryptDataResponse", fp)
}

func ParseEncryptDataResponse_FieldPath(rawField string) (EncryptDataResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildEncryptDataResponse_FieldPath(fp)
}

func MustParseEncryptDataResponse_FieldPath(rawField string) EncryptDataResponse_FieldPath {
	fp, err := ParseEncryptDataResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type EncryptDataResponse_FieldTerminalPath struct {
	selector EncryptDataResponse_FieldPathSelector
}

var _ EncryptDataResponse_FieldPath = (*EncryptDataResponse_FieldTerminalPath)(nil)

func (fp *EncryptDataResponse_FieldTerminalPath) Selector() EncryptDataResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *EncryptDataResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *EncryptDataResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source EncryptDataResponse
func (fp *EncryptDataResponse_FieldTerminalPath) Get(source *EncryptDataResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case EncryptDataResponse_FieldPathSelectorData:
			values = append(values, source.Data)
		default:
			panic(fmt.Sprintf("Invalid selector for EncryptDataResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *EncryptDataResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*EncryptDataResponse))
}

// GetSingle returns value pointed by specific field of from source EncryptDataResponse
func (fp *EncryptDataResponse_FieldTerminalPath) GetSingle(source *EncryptDataResponse) (interface{}, bool) {
	switch fp.selector {
	case EncryptDataResponse_FieldPathSelectorData:
		res := source.GetData()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataResponse: %d", fp.selector))
	}
}

func (fp *EncryptDataResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*EncryptDataResponse))
}

// GetDefault returns a default value of the field type
func (fp *EncryptDataResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case EncryptDataResponse_FieldPathSelectorData:
		return ([]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataResponse: %d", fp.selector))
	}
}

func (fp *EncryptDataResponse_FieldTerminalPath) ClearValue(item *EncryptDataResponse) {
	if item != nil {
		switch fp.selector {
		case EncryptDataResponse_FieldPathSelectorData:
			item.Data = nil
		default:
			panic(fmt.Sprintf("Invalid selector for EncryptDataResponse: %d", fp.selector))
		}
	}
}

func (fp *EncryptDataResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*EncryptDataResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *EncryptDataResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == EncryptDataResponse_FieldPathSelectorData
}

func (fp *EncryptDataResponse_FieldTerminalPath) WithIValue(value interface{}) EncryptDataResponse_FieldPathValue {
	switch fp.selector {
	case EncryptDataResponse_FieldPathSelectorData:
		return &EncryptDataResponse_FieldTerminalPathValue{EncryptDataResponse_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataResponse: %d", fp.selector))
	}
}

func (fp *EncryptDataResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *EncryptDataResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) EncryptDataResponse_FieldPathArrayOfValues {
	fpaov := &EncryptDataResponse_FieldTerminalPathArrayOfValues{EncryptDataResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case EncryptDataResponse_FieldPathSelectorData:
		return &EncryptDataResponse_FieldTerminalPathArrayOfValues{EncryptDataResponse_FieldTerminalPath: *fp, values: values.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *EncryptDataResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *EncryptDataResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) EncryptDataResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataResponse: %d", fp.selector))
	}
}

func (fp *EncryptDataResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// EncryptDataResponse_FieldPathValue allows storing values for EncryptDataResponse fields according to their type
type EncryptDataResponse_FieldPathValue interface {
	EncryptDataResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **EncryptDataResponse)
	CompareWith(*EncryptDataResponse) (cmp int, comparable bool)
}

func ParseEncryptDataResponse_FieldPathValue(pathStr, valueStr string) (EncryptDataResponse_FieldPathValue, error) {
	fp, err := ParseEncryptDataResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing EncryptDataResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(EncryptDataResponse_FieldPathValue), nil
}

func MustParseEncryptDataResponse_FieldPathValue(pathStr, valueStr string) EncryptDataResponse_FieldPathValue {
	fpv, err := ParseEncryptDataResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type EncryptDataResponse_FieldTerminalPathValue struct {
	EncryptDataResponse_FieldTerminalPath
	value interface{}
}

var _ EncryptDataResponse_FieldPathValue = (*EncryptDataResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'EncryptDataResponse' as interface{}
func (fpv *EncryptDataResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *EncryptDataResponse_FieldTerminalPathValue) AsDataValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}

// SetTo stores value for selected field for object EncryptDataResponse
func (fpv *EncryptDataResponse_FieldTerminalPathValue) SetTo(target **EncryptDataResponse) {
	if *target == nil {
		*target = new(EncryptDataResponse)
	}
	switch fpv.selector {
	case EncryptDataResponse_FieldPathSelectorData:
		(*target).Data = fpv.value.([]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataResponse: %d", fpv.selector))
	}
}

func (fpv *EncryptDataResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*EncryptDataResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'EncryptDataResponse_FieldTerminalPathValue' with the value under path in 'EncryptDataResponse'.
func (fpv *EncryptDataResponse_FieldTerminalPathValue) CompareWith(source *EncryptDataResponse) (int, bool) {
	switch fpv.selector {
	case EncryptDataResponse_FieldPathSelectorData:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for EncryptDataResponse: %d", fpv.selector))
	}
}

func (fpv *EncryptDataResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*EncryptDataResponse))
}

// EncryptDataResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for EncryptDataResponse according to their type
// Present only for array (repeated) types.
type EncryptDataResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	EncryptDataResponse_FieldPath
	ContainsValue(*EncryptDataResponse) bool
}

// ParseEncryptDataResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseEncryptDataResponse_FieldPathArrayItemValue(pathStr, valueStr string) (EncryptDataResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseEncryptDataResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing EncryptDataResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(EncryptDataResponse_FieldPathArrayItemValue), nil
}

func MustParseEncryptDataResponse_FieldPathArrayItemValue(pathStr, valueStr string) EncryptDataResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseEncryptDataResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type EncryptDataResponse_FieldTerminalPathArrayItemValue struct {
	EncryptDataResponse_FieldTerminalPath
	value interface{}
}

var _ EncryptDataResponse_FieldPathArrayItemValue = (*EncryptDataResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object EncryptDataResponse as interface{}
func (fpaiv *EncryptDataResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *EncryptDataResponse_FieldTerminalPathArrayItemValue) GetSingle(source *EncryptDataResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *EncryptDataResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*EncryptDataResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'EncryptDataResponse'
func (fpaiv *EncryptDataResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *EncryptDataResponse) bool {
	slice := fpaiv.EncryptDataResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// EncryptDataResponse_FieldPathArrayOfValues allows storing slice of values for EncryptDataResponse fields according to their type
type EncryptDataResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	EncryptDataResponse_FieldPath
}

func ParseEncryptDataResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (EncryptDataResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseEncryptDataResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing EncryptDataResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(EncryptDataResponse_FieldPathArrayOfValues), nil
}

func MustParseEncryptDataResponse_FieldPathArrayOfValues(pathStr, valuesStr string) EncryptDataResponse_FieldPathArrayOfValues {
	fpaov, err := ParseEncryptDataResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type EncryptDataResponse_FieldTerminalPathArrayOfValues struct {
	EncryptDataResponse_FieldTerminalPath
	values interface{}
}

var _ EncryptDataResponse_FieldPathArrayOfValues = (*EncryptDataResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *EncryptDataResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case EncryptDataResponse_FieldPathSelectorData:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *EncryptDataResponse_FieldTerminalPathArrayOfValues) AsDataArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DecryptDataRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DecryptDataRequest_FieldPathSelector
	Get(source *DecryptDataRequest) []interface{}
	GetSingle(source *DecryptDataRequest) (interface{}, bool)
	ClearValue(item *DecryptDataRequest)

	// Those methods build corresponding DecryptDataRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DecryptDataRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DecryptDataRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DecryptDataRequest_FieldPathArrayItemValue
}

type DecryptDataRequest_FieldPathSelector int32

const (
	DecryptDataRequest_FieldPathSelectorProjectName DecryptDataRequest_FieldPathSelector = 0
	DecryptDataRequest_FieldPathSelectorData        DecryptDataRequest_FieldPathSelector = 1
)

func (s DecryptDataRequest_FieldPathSelector) String() string {
	switch s {
	case DecryptDataRequest_FieldPathSelectorProjectName:
		return "project_name"
	case DecryptDataRequest_FieldPathSelectorData:
		return "data"
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataRequest: %d", s))
	}
}

func BuildDecryptDataRequest_FieldPath(fp gotenobject.RawFieldPath) (DecryptDataRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DecryptDataRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "project_name", "projectName", "project-name":
			return &DecryptDataRequest_FieldTerminalPath{selector: DecryptDataRequest_FieldPathSelectorProjectName}, nil
		case "data":
			return &DecryptDataRequest_FieldTerminalPath{selector: DecryptDataRequest_FieldPathSelectorData}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DecryptDataRequest", fp)
}

func ParseDecryptDataRequest_FieldPath(rawField string) (DecryptDataRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDecryptDataRequest_FieldPath(fp)
}

func MustParseDecryptDataRequest_FieldPath(rawField string) DecryptDataRequest_FieldPath {
	fp, err := ParseDecryptDataRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DecryptDataRequest_FieldTerminalPath struct {
	selector DecryptDataRequest_FieldPathSelector
}

var _ DecryptDataRequest_FieldPath = (*DecryptDataRequest_FieldTerminalPath)(nil)

func (fp *DecryptDataRequest_FieldTerminalPath) Selector() DecryptDataRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DecryptDataRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DecryptDataRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DecryptDataRequest
func (fp *DecryptDataRequest_FieldTerminalPath) Get(source *DecryptDataRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DecryptDataRequest_FieldPathSelectorProjectName:
			values = append(values, source.ProjectName)
		case DecryptDataRequest_FieldPathSelectorData:
			values = append(values, source.Data)
		default:
			panic(fmt.Sprintf("Invalid selector for DecryptDataRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DecryptDataRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DecryptDataRequest))
}

// GetSingle returns value pointed by specific field of from source DecryptDataRequest
func (fp *DecryptDataRequest_FieldTerminalPath) GetSingle(source *DecryptDataRequest) (interface{}, bool) {
	switch fp.selector {
	case DecryptDataRequest_FieldPathSelectorProjectName:
		return source.GetProjectName(), source != nil
	case DecryptDataRequest_FieldPathSelectorData:
		res := source.GetData()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataRequest: %d", fp.selector))
	}
}

func (fp *DecryptDataRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DecryptDataRequest))
}

// GetDefault returns a default value of the field type
func (fp *DecryptDataRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DecryptDataRequest_FieldPathSelectorProjectName:
		return ""
	case DecryptDataRequest_FieldPathSelectorData:
		return ([]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataRequest: %d", fp.selector))
	}
}

func (fp *DecryptDataRequest_FieldTerminalPath) ClearValue(item *DecryptDataRequest) {
	if item != nil {
		switch fp.selector {
		case DecryptDataRequest_FieldPathSelectorProjectName:
			item.ProjectName = ""
		case DecryptDataRequest_FieldPathSelectorData:
			item.Data = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DecryptDataRequest: %d", fp.selector))
		}
	}
}

func (fp *DecryptDataRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DecryptDataRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DecryptDataRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DecryptDataRequest_FieldPathSelectorProjectName ||
		fp.selector == DecryptDataRequest_FieldPathSelectorData
}

func (fp *DecryptDataRequest_FieldTerminalPath) WithIValue(value interface{}) DecryptDataRequest_FieldPathValue {
	switch fp.selector {
	case DecryptDataRequest_FieldPathSelectorProjectName:
		return &DecryptDataRequest_FieldTerminalPathValue{DecryptDataRequest_FieldTerminalPath: *fp, value: value.(string)}
	case DecryptDataRequest_FieldPathSelectorData:
		return &DecryptDataRequest_FieldTerminalPathValue{DecryptDataRequest_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataRequest: %d", fp.selector))
	}
}

func (fp *DecryptDataRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DecryptDataRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DecryptDataRequest_FieldPathArrayOfValues {
	fpaov := &DecryptDataRequest_FieldTerminalPathArrayOfValues{DecryptDataRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DecryptDataRequest_FieldPathSelectorProjectName:
		return &DecryptDataRequest_FieldTerminalPathArrayOfValues{DecryptDataRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case DecryptDataRequest_FieldPathSelectorData:
		return &DecryptDataRequest_FieldTerminalPathArrayOfValues{DecryptDataRequest_FieldTerminalPath: *fp, values: values.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DecryptDataRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DecryptDataRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DecryptDataRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataRequest: %d", fp.selector))
	}
}

func (fp *DecryptDataRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DecryptDataRequest_FieldPathValue allows storing values for DecryptDataRequest fields according to their type
type DecryptDataRequest_FieldPathValue interface {
	DecryptDataRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DecryptDataRequest)
	CompareWith(*DecryptDataRequest) (cmp int, comparable bool)
}

func ParseDecryptDataRequest_FieldPathValue(pathStr, valueStr string) (DecryptDataRequest_FieldPathValue, error) {
	fp, err := ParseDecryptDataRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DecryptDataRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DecryptDataRequest_FieldPathValue), nil
}

func MustParseDecryptDataRequest_FieldPathValue(pathStr, valueStr string) DecryptDataRequest_FieldPathValue {
	fpv, err := ParseDecryptDataRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DecryptDataRequest_FieldTerminalPathValue struct {
	DecryptDataRequest_FieldTerminalPath
	value interface{}
}

var _ DecryptDataRequest_FieldPathValue = (*DecryptDataRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DecryptDataRequest' as interface{}
func (fpv *DecryptDataRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DecryptDataRequest_FieldTerminalPathValue) AsProjectNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DecryptDataRequest_FieldTerminalPathValue) AsDataValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}

// SetTo stores value for selected field for object DecryptDataRequest
func (fpv *DecryptDataRequest_FieldTerminalPathValue) SetTo(target **DecryptDataRequest) {
	if *target == nil {
		*target = new(DecryptDataRequest)
	}
	switch fpv.selector {
	case DecryptDataRequest_FieldPathSelectorProjectName:
		(*target).ProjectName = fpv.value.(string)
	case DecryptDataRequest_FieldPathSelectorData:
		(*target).Data = fpv.value.([]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataRequest: %d", fpv.selector))
	}
}

func (fpv *DecryptDataRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DecryptDataRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DecryptDataRequest_FieldTerminalPathValue' with the value under path in 'DecryptDataRequest'.
func (fpv *DecryptDataRequest_FieldTerminalPathValue) CompareWith(source *DecryptDataRequest) (int, bool) {
	switch fpv.selector {
	case DecryptDataRequest_FieldPathSelectorProjectName:
		leftValue := fpv.value.(string)
		rightValue := source.GetProjectName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DecryptDataRequest_FieldPathSelectorData:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataRequest: %d", fpv.selector))
	}
}

func (fpv *DecryptDataRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DecryptDataRequest))
}

// DecryptDataRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DecryptDataRequest according to their type
// Present only for array (repeated) types.
type DecryptDataRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DecryptDataRequest_FieldPath
	ContainsValue(*DecryptDataRequest) bool
}

// ParseDecryptDataRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDecryptDataRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DecryptDataRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDecryptDataRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DecryptDataRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DecryptDataRequest_FieldPathArrayItemValue), nil
}

func MustParseDecryptDataRequest_FieldPathArrayItemValue(pathStr, valueStr string) DecryptDataRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDecryptDataRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DecryptDataRequest_FieldTerminalPathArrayItemValue struct {
	DecryptDataRequest_FieldTerminalPath
	value interface{}
}

var _ DecryptDataRequest_FieldPathArrayItemValue = (*DecryptDataRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DecryptDataRequest as interface{}
func (fpaiv *DecryptDataRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DecryptDataRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DecryptDataRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DecryptDataRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DecryptDataRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DecryptDataRequest'
func (fpaiv *DecryptDataRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DecryptDataRequest) bool {
	slice := fpaiv.DecryptDataRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DecryptDataRequest_FieldPathArrayOfValues allows storing slice of values for DecryptDataRequest fields according to their type
type DecryptDataRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DecryptDataRequest_FieldPath
}

func ParseDecryptDataRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DecryptDataRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDecryptDataRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DecryptDataRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DecryptDataRequest_FieldPathArrayOfValues), nil
}

func MustParseDecryptDataRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DecryptDataRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDecryptDataRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DecryptDataRequest_FieldTerminalPathArrayOfValues struct {
	DecryptDataRequest_FieldTerminalPath
	values interface{}
}

var _ DecryptDataRequest_FieldPathArrayOfValues = (*DecryptDataRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DecryptDataRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DecryptDataRequest_FieldPathSelectorProjectName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DecryptDataRequest_FieldPathSelectorData:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DecryptDataRequest_FieldTerminalPathArrayOfValues) AsProjectNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DecryptDataRequest_FieldTerminalPathArrayOfValues) AsDataArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DecryptDataResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() DecryptDataResponse_FieldPathSelector
	Get(source *DecryptDataResponse) []interface{}
	GetSingle(source *DecryptDataResponse) (interface{}, bool)
	ClearValue(item *DecryptDataResponse)

	// Those methods build corresponding DecryptDataResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DecryptDataResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) DecryptDataResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DecryptDataResponse_FieldPathArrayItemValue
}

type DecryptDataResponse_FieldPathSelector int32

const (
	DecryptDataResponse_FieldPathSelectorData DecryptDataResponse_FieldPathSelector = 0
)

func (s DecryptDataResponse_FieldPathSelector) String() string {
	switch s {
	case DecryptDataResponse_FieldPathSelectorData:
		return "data"
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataResponse: %d", s))
	}
}

func BuildDecryptDataResponse_FieldPath(fp gotenobject.RawFieldPath) (DecryptDataResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DecryptDataResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "data":
			return &DecryptDataResponse_FieldTerminalPath{selector: DecryptDataResponse_FieldPathSelectorData}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DecryptDataResponse", fp)
}

func ParseDecryptDataResponse_FieldPath(rawField string) (DecryptDataResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDecryptDataResponse_FieldPath(fp)
}

func MustParseDecryptDataResponse_FieldPath(rawField string) DecryptDataResponse_FieldPath {
	fp, err := ParseDecryptDataResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DecryptDataResponse_FieldTerminalPath struct {
	selector DecryptDataResponse_FieldPathSelector
}

var _ DecryptDataResponse_FieldPath = (*DecryptDataResponse_FieldTerminalPath)(nil)

func (fp *DecryptDataResponse_FieldTerminalPath) Selector() DecryptDataResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DecryptDataResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DecryptDataResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DecryptDataResponse
func (fp *DecryptDataResponse_FieldTerminalPath) Get(source *DecryptDataResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DecryptDataResponse_FieldPathSelectorData:
			values = append(values, source.Data)
		default:
			panic(fmt.Sprintf("Invalid selector for DecryptDataResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *DecryptDataResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DecryptDataResponse))
}

// GetSingle returns value pointed by specific field of from source DecryptDataResponse
func (fp *DecryptDataResponse_FieldTerminalPath) GetSingle(source *DecryptDataResponse) (interface{}, bool) {
	switch fp.selector {
	case DecryptDataResponse_FieldPathSelectorData:
		res := source.GetData()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataResponse: %d", fp.selector))
	}
}

func (fp *DecryptDataResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DecryptDataResponse))
}

// GetDefault returns a default value of the field type
func (fp *DecryptDataResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DecryptDataResponse_FieldPathSelectorData:
		return ([]byte)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataResponse: %d", fp.selector))
	}
}

func (fp *DecryptDataResponse_FieldTerminalPath) ClearValue(item *DecryptDataResponse) {
	if item != nil {
		switch fp.selector {
		case DecryptDataResponse_FieldPathSelectorData:
			item.Data = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DecryptDataResponse: %d", fp.selector))
		}
	}
}

func (fp *DecryptDataResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DecryptDataResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *DecryptDataResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DecryptDataResponse_FieldPathSelectorData
}

func (fp *DecryptDataResponse_FieldTerminalPath) WithIValue(value interface{}) DecryptDataResponse_FieldPathValue {
	switch fp.selector {
	case DecryptDataResponse_FieldPathSelectorData:
		return &DecryptDataResponse_FieldTerminalPathValue{DecryptDataResponse_FieldTerminalPath: *fp, value: value.([]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataResponse: %d", fp.selector))
	}
}

func (fp *DecryptDataResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DecryptDataResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) DecryptDataResponse_FieldPathArrayOfValues {
	fpaov := &DecryptDataResponse_FieldTerminalPathArrayOfValues{DecryptDataResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case DecryptDataResponse_FieldPathSelectorData:
		return &DecryptDataResponse_FieldTerminalPathArrayOfValues{DecryptDataResponse_FieldTerminalPath: *fp, values: values.([][]byte)}
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *DecryptDataResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DecryptDataResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) DecryptDataResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataResponse: %d", fp.selector))
	}
}

func (fp *DecryptDataResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DecryptDataResponse_FieldPathValue allows storing values for DecryptDataResponse fields according to their type
type DecryptDataResponse_FieldPathValue interface {
	DecryptDataResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DecryptDataResponse)
	CompareWith(*DecryptDataResponse) (cmp int, comparable bool)
}

func ParseDecryptDataResponse_FieldPathValue(pathStr, valueStr string) (DecryptDataResponse_FieldPathValue, error) {
	fp, err := ParseDecryptDataResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DecryptDataResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(DecryptDataResponse_FieldPathValue), nil
}

func MustParseDecryptDataResponse_FieldPathValue(pathStr, valueStr string) DecryptDataResponse_FieldPathValue {
	fpv, err := ParseDecryptDataResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DecryptDataResponse_FieldTerminalPathValue struct {
	DecryptDataResponse_FieldTerminalPath
	value interface{}
}

var _ DecryptDataResponse_FieldPathValue = (*DecryptDataResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DecryptDataResponse' as interface{}
func (fpv *DecryptDataResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DecryptDataResponse_FieldTerminalPathValue) AsDataValue() ([]byte, bool) {
	res, ok := fpv.value.([]byte)
	return res, ok
}

// SetTo stores value for selected field for object DecryptDataResponse
func (fpv *DecryptDataResponse_FieldTerminalPathValue) SetTo(target **DecryptDataResponse) {
	if *target == nil {
		*target = new(DecryptDataResponse)
	}
	switch fpv.selector {
	case DecryptDataResponse_FieldPathSelectorData:
		(*target).Data = fpv.value.([]byte)
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataResponse: %d", fpv.selector))
	}
}

func (fpv *DecryptDataResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DecryptDataResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DecryptDataResponse_FieldTerminalPathValue' with the value under path in 'DecryptDataResponse'.
func (fpv *DecryptDataResponse_FieldTerminalPathValue) CompareWith(source *DecryptDataResponse) (int, bool) {
	switch fpv.selector {
	case DecryptDataResponse_FieldPathSelectorData:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for DecryptDataResponse: %d", fpv.selector))
	}
}

func (fpv *DecryptDataResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DecryptDataResponse))
}

// DecryptDataResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for DecryptDataResponse according to their type
// Present only for array (repeated) types.
type DecryptDataResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DecryptDataResponse_FieldPath
	ContainsValue(*DecryptDataResponse) bool
}

// ParseDecryptDataResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDecryptDataResponse_FieldPathArrayItemValue(pathStr, valueStr string) (DecryptDataResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseDecryptDataResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DecryptDataResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DecryptDataResponse_FieldPathArrayItemValue), nil
}

func MustParseDecryptDataResponse_FieldPathArrayItemValue(pathStr, valueStr string) DecryptDataResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseDecryptDataResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DecryptDataResponse_FieldTerminalPathArrayItemValue struct {
	DecryptDataResponse_FieldTerminalPath
	value interface{}
}

var _ DecryptDataResponse_FieldPathArrayItemValue = (*DecryptDataResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DecryptDataResponse as interface{}
func (fpaiv *DecryptDataResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DecryptDataResponse_FieldTerminalPathArrayItemValue) GetSingle(source *DecryptDataResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DecryptDataResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DecryptDataResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DecryptDataResponse'
func (fpaiv *DecryptDataResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *DecryptDataResponse) bool {
	slice := fpaiv.DecryptDataResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DecryptDataResponse_FieldPathArrayOfValues allows storing slice of values for DecryptDataResponse fields according to their type
type DecryptDataResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DecryptDataResponse_FieldPath
}

func ParseDecryptDataResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (DecryptDataResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseDecryptDataResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DecryptDataResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DecryptDataResponse_FieldPathArrayOfValues), nil
}

func MustParseDecryptDataResponse_FieldPathArrayOfValues(pathStr, valuesStr string) DecryptDataResponse_FieldPathArrayOfValues {
	fpaov, err := ParseDecryptDataResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DecryptDataResponse_FieldTerminalPathArrayOfValues struct {
	DecryptDataResponse_FieldTerminalPath
	values interface{}
}

var _ DecryptDataResponse_FieldPathArrayOfValues = (*DecryptDataResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DecryptDataResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DecryptDataResponse_FieldPathSelectorData:
		for _, v := range fpaov.values.([][]byte) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DecryptDataResponse_FieldTerminalPathArrayOfValues) AsDataArrayOfValues() ([][]byte, bool) {
	res, ok := fpaov.values.([][]byte)
	return res, ok
}
