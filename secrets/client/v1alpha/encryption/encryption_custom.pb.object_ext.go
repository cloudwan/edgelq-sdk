// Code generated by protoc-gen-goten-object
// File: edgelq/secrets/proto/v1alpha/encryption_custom.proto
// DO NOT EDIT!!!

package encryption_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import ()

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var ()

func (o *EncryptDataRequest) GotenObjectExt() {}

func (o *EncryptDataRequest) MakeFullFieldMask() *EncryptDataRequest_FieldMask {
	return FullEncryptDataRequest_FieldMask()
}

func (o *EncryptDataRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullEncryptDataRequest_FieldMask()
}

func (o *EncryptDataRequest) MakeDiffFieldMask(other *EncryptDataRequest) *EncryptDataRequest_FieldMask {
	if o == nil && other == nil {
		return &EncryptDataRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullEncryptDataRequest_FieldMask()
	}

	res := &EncryptDataRequest_FieldMask{}
	if o.GetProjectName() != other.GetProjectName() {
		res.Paths = append(res.Paths, &EncryptDataRequest_FieldTerminalPath{selector: EncryptDataRequest_FieldPathSelectorProjectName})
	}
	if string(o.GetData()) != string(other.GetData()) {
		res.Paths = append(res.Paths, &EncryptDataRequest_FieldTerminalPath{selector: EncryptDataRequest_FieldPathSelectorData})
	}
	return res
}

func (o *EncryptDataRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*EncryptDataRequest))
}

func (o *EncryptDataRequest) Clone() *EncryptDataRequest {
	if o == nil {
		return nil
	}
	result := &EncryptDataRequest{}
	result.ProjectName = o.ProjectName
	result.Data = make([]byte, len(o.Data))
	for i, bt := range o.Data {
		result.Data[i] = bt
	}
	return result
}

func (o *EncryptDataRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *EncryptDataRequest) Merge(source *EncryptDataRequest) {
	o.ProjectName = source.GetProjectName()
	o.Data = make([]byte, len(source.GetData()))
	for i, bt := range source.GetData() {
		o.Data[i] = bt
	}
}

func (o *EncryptDataRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*EncryptDataRequest))
}

func (o *EncryptDataResponse) GotenObjectExt() {}

func (o *EncryptDataResponse) MakeFullFieldMask() *EncryptDataResponse_FieldMask {
	return FullEncryptDataResponse_FieldMask()
}

func (o *EncryptDataResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullEncryptDataResponse_FieldMask()
}

func (o *EncryptDataResponse) MakeDiffFieldMask(other *EncryptDataResponse) *EncryptDataResponse_FieldMask {
	if o == nil && other == nil {
		return &EncryptDataResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullEncryptDataResponse_FieldMask()
	}

	res := &EncryptDataResponse_FieldMask{}
	if string(o.GetData()) != string(other.GetData()) {
		res.Paths = append(res.Paths, &EncryptDataResponse_FieldTerminalPath{selector: EncryptDataResponse_FieldPathSelectorData})
	}
	return res
}

func (o *EncryptDataResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*EncryptDataResponse))
}

func (o *EncryptDataResponse) Clone() *EncryptDataResponse {
	if o == nil {
		return nil
	}
	result := &EncryptDataResponse{}
	result.Data = make([]byte, len(o.Data))
	for i, bt := range o.Data {
		result.Data[i] = bt
	}
	return result
}

func (o *EncryptDataResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *EncryptDataResponse) Merge(source *EncryptDataResponse) {
	o.Data = make([]byte, len(source.GetData()))
	for i, bt := range source.GetData() {
		o.Data[i] = bt
	}
}

func (o *EncryptDataResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*EncryptDataResponse))
}

func (o *DecryptDataRequest) GotenObjectExt() {}

func (o *DecryptDataRequest) MakeFullFieldMask() *DecryptDataRequest_FieldMask {
	return FullDecryptDataRequest_FieldMask()
}

func (o *DecryptDataRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDecryptDataRequest_FieldMask()
}

func (o *DecryptDataRequest) MakeDiffFieldMask(other *DecryptDataRequest) *DecryptDataRequest_FieldMask {
	if o == nil && other == nil {
		return &DecryptDataRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDecryptDataRequest_FieldMask()
	}

	res := &DecryptDataRequest_FieldMask{}
	if o.GetProjectName() != other.GetProjectName() {
		res.Paths = append(res.Paths, &DecryptDataRequest_FieldTerminalPath{selector: DecryptDataRequest_FieldPathSelectorProjectName})
	}
	if string(o.GetData()) != string(other.GetData()) {
		res.Paths = append(res.Paths, &DecryptDataRequest_FieldTerminalPath{selector: DecryptDataRequest_FieldPathSelectorData})
	}
	return res
}

func (o *DecryptDataRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DecryptDataRequest))
}

func (o *DecryptDataRequest) Clone() *DecryptDataRequest {
	if o == nil {
		return nil
	}
	result := &DecryptDataRequest{}
	result.ProjectName = o.ProjectName
	result.Data = make([]byte, len(o.Data))
	for i, bt := range o.Data {
		result.Data[i] = bt
	}
	return result
}

func (o *DecryptDataRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DecryptDataRequest) Merge(source *DecryptDataRequest) {
	o.ProjectName = source.GetProjectName()
	o.Data = make([]byte, len(source.GetData()))
	for i, bt := range source.GetData() {
		o.Data[i] = bt
	}
}

func (o *DecryptDataRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DecryptDataRequest))
}

func (o *DecryptDataResponse) GotenObjectExt() {}

func (o *DecryptDataResponse) MakeFullFieldMask() *DecryptDataResponse_FieldMask {
	return FullDecryptDataResponse_FieldMask()
}

func (o *DecryptDataResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDecryptDataResponse_FieldMask()
}

func (o *DecryptDataResponse) MakeDiffFieldMask(other *DecryptDataResponse) *DecryptDataResponse_FieldMask {
	if o == nil && other == nil {
		return &DecryptDataResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDecryptDataResponse_FieldMask()
	}

	res := &DecryptDataResponse_FieldMask{}
	if string(o.GetData()) != string(other.GetData()) {
		res.Paths = append(res.Paths, &DecryptDataResponse_FieldTerminalPath{selector: DecryptDataResponse_FieldPathSelectorData})
	}
	return res
}

func (o *DecryptDataResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DecryptDataResponse))
}

func (o *DecryptDataResponse) Clone() *DecryptDataResponse {
	if o == nil {
		return nil
	}
	result := &DecryptDataResponse{}
	result.Data = make([]byte, len(o.Data))
	for i, bt := range o.Data {
		result.Data[i] = bt
	}
	return result
}

func (o *DecryptDataResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DecryptDataResponse) Merge(source *DecryptDataResponse) {
	o.Data = make([]byte, len(source.GetData()))
	for i, bt := range source.GetData() {
		o.Data[i] = bt
	}
}

func (o *DecryptDataResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DecryptDataResponse))
}
