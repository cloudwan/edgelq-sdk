// Code generated by protoc-gen-goten-object
// File: edgelq/secrets/proto/v1alpha/project_service.proto
// DO NOT EDIT!!!

package project_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/secrets/resources/v1alpha/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetProjectRequest) GotenObjectExt() {}

func (o *GetProjectRequest) MakeFullFieldMask() *GetProjectRequest_FieldMask {
	return FullGetProjectRequest_FieldMask()
}

func (o *GetProjectRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetProjectRequest_FieldMask()
}

func (o *GetProjectRequest) MakeDiffFieldMask(other *GetProjectRequest) *GetProjectRequest_FieldMask {
	if o == nil && other == nil {
		return &GetProjectRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetProjectRequest_FieldMask()
	}

	res := &GetProjectRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetProjectRequest_FieldTerminalPath{selector: GetProjectRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetProjectRequest_FieldTerminalPath{selector: GetProjectRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetProjectRequest_FieldTerminalPath{selector: GetProjectRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetProjectRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetProjectRequest))
}

func (o *GetProjectRequest) Clone() *GetProjectRequest {
	if o == nil {
		return nil
	}
	result := &GetProjectRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &project.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*project.Project_FieldMask)
	result.View = o.View
	return result
}

func (o *GetProjectRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetProjectRequest) Merge(source *GetProjectRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &project.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(project.Project_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetProjectRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetProjectRequest))
}

func (o *BatchGetProjectsRequest) GotenObjectExt() {}

func (o *BatchGetProjectsRequest) MakeFullFieldMask() *BatchGetProjectsRequest_FieldMask {
	return FullBatchGetProjectsRequest_FieldMask()
}

func (o *BatchGetProjectsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProjectsRequest_FieldMask()
}

func (o *BatchGetProjectsRequest) MakeDiffFieldMask(other *BatchGetProjectsRequest) *BatchGetProjectsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProjectsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProjectsRequest_FieldMask()
	}

	res := &BatchGetProjectsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProjectsRequest_FieldTerminalPath{selector: BatchGetProjectsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProjectsRequest_FieldTerminalPath{selector: BatchGetProjectsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetProjectsRequest_FieldTerminalPath{selector: BatchGetProjectsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetProjectsRequest_FieldTerminalPath{selector: BatchGetProjectsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetProjectsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProjectsRequest))
}

func (o *BatchGetProjectsRequest) Clone() *BatchGetProjectsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetProjectsRequest{}
	result.Names = make([]*project.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &project.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*project.Project_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetProjectsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProjectsRequest) Merge(source *BatchGetProjectsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *project.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &project.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(project.Project_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetProjectsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProjectsRequest))
}

func (o *BatchGetProjectsResponse) GotenObjectExt() {}

func (o *BatchGetProjectsResponse) MakeFullFieldMask() *BatchGetProjectsResponse_FieldMask {
	return FullBatchGetProjectsResponse_FieldMask()
}

func (o *BatchGetProjectsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetProjectsResponse_FieldMask()
}

func (o *BatchGetProjectsResponse) MakeDiffFieldMask(other *BatchGetProjectsResponse) *BatchGetProjectsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetProjectsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetProjectsResponse_FieldMask()
	}

	res := &BatchGetProjectsResponse_FieldMask{}

	if len(o.GetProjects()) == len(other.GetProjects()) {
		for i, lValue := range o.GetProjects() {
			rValue := other.GetProjects()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetProjectsResponse_FieldTerminalPath{selector: BatchGetProjectsResponse_FieldPathSelectorProjects})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProjectsResponse_FieldTerminalPath{selector: BatchGetProjectsResponse_FieldPathSelectorProjects})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetProjectsResponse_FieldTerminalPath{selector: BatchGetProjectsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetProjectsResponse_FieldTerminalPath{selector: BatchGetProjectsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetProjectsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetProjectsResponse))
}

func (o *BatchGetProjectsResponse) Clone() *BatchGetProjectsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetProjectsResponse{}
	result.Projects = make([]*project.Project, len(o.Projects))
	for i, sourceValue := range o.Projects {
		result.Projects[i] = sourceValue.Clone()
	}
	result.Missing = make([]*project.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &project.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetProjectsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetProjectsResponse) Merge(source *BatchGetProjectsResponse) {
	for _, sourceValue := range source.GetProjects() {
		exists := false
		for _, currentValue := range o.Projects {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *project.Project
			if sourceValue != nil {
				newDstElement = new(project.Project)
				newDstElement.Merge(sourceValue)
			}
			o.Projects = append(o.Projects, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *project.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &project.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetProjectsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetProjectsResponse))
}

func (o *ListProjectsRequest) GotenObjectExt() {}

func (o *ListProjectsRequest) MakeFullFieldMask() *ListProjectsRequest_FieldMask {
	return FullListProjectsRequest_FieldMask()
}

func (o *ListProjectsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProjectsRequest_FieldMask()
}

func (o *ListProjectsRequest) MakeDiffFieldMask(other *ListProjectsRequest) *ListProjectsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListProjectsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProjectsRequest_FieldMask()
	}

	res := &ListProjectsRequest_FieldMask{}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListProjectsRequest_FieldTerminalPath{selector: ListProjectsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListProjectsRequest_FieldTerminalPath{selector: ListProjectsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListProjectsRequest_FieldTerminalPath{selector: ListProjectsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListProjectsRequest_FieldTerminalPath{selector: ListProjectsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListProjectsRequest_FieldTerminalPath{selector: ListProjectsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListProjectsRequest_FieldTerminalPath{selector: ListProjectsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListProjectsRequest_FieldTerminalPath{selector: ListProjectsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListProjectsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProjectsRequest))
}

func (o *ListProjectsRequest) Clone() *ListProjectsRequest {
	if o == nil {
		return nil
	}
	result := &ListProjectsRequest{}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &project.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &project.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &project.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*project.Project_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListProjectsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProjectsRequest) Merge(source *ListProjectsRequest) {
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &project.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &project.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &project.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(project.Project_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListProjectsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProjectsRequest))
}

func (o *ListProjectsResponse) GotenObjectExt() {}

func (o *ListProjectsResponse) MakeFullFieldMask() *ListProjectsResponse_FieldMask {
	return FullListProjectsResponse_FieldMask()
}

func (o *ListProjectsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListProjectsResponse_FieldMask()
}

func (o *ListProjectsResponse) MakeDiffFieldMask(other *ListProjectsResponse) *ListProjectsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListProjectsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListProjectsResponse_FieldMask()
	}

	res := &ListProjectsResponse_FieldMask{}

	if len(o.GetProjects()) == len(other.GetProjects()) {
		for i, lValue := range o.GetProjects() {
			rValue := other.GetProjects()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListProjectsResponse_FieldTerminalPath{selector: ListProjectsResponse_FieldPathSelectorProjects})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListProjectsResponse_FieldTerminalPath{selector: ListProjectsResponse_FieldPathSelectorProjects})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListProjectsResponse_FieldTerminalPath{selector: ListProjectsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListProjectsResponse_FieldTerminalPath{selector: ListProjectsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListProjectsResponse_FieldTerminalPath{selector: ListProjectsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListProjectsResponse_FieldTerminalPath{selector: ListProjectsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListProjectsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListProjectsResponse))
}

func (o *ListProjectsResponse) Clone() *ListProjectsResponse {
	if o == nil {
		return nil
	}
	result := &ListProjectsResponse{}
	result.Projects = make([]*project.Project, len(o.Projects))
	for i, sourceValue := range o.Projects {
		result.Projects[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &project.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &project.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListProjectsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListProjectsResponse) Merge(source *ListProjectsResponse) {
	for _, sourceValue := range source.GetProjects() {
		exists := false
		for _, currentValue := range o.Projects {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *project.Project
			if sourceValue != nil {
				newDstElement = new(project.Project)
				newDstElement.Merge(sourceValue)
			}
			o.Projects = append(o.Projects, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &project.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &project.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListProjectsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListProjectsResponse))
}

func (o *WatchProjectRequest) GotenObjectExt() {}

func (o *WatchProjectRequest) MakeFullFieldMask() *WatchProjectRequest_FieldMask {
	return FullWatchProjectRequest_FieldMask()
}

func (o *WatchProjectRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProjectRequest_FieldMask()
}

func (o *WatchProjectRequest) MakeDiffFieldMask(other *WatchProjectRequest) *WatchProjectRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProjectRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProjectRequest_FieldMask()
	}

	res := &WatchProjectRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchProjectRequest_FieldTerminalPath{selector: WatchProjectRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProjectRequest_FieldTerminalPath{selector: WatchProjectRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProjectRequest_FieldTerminalPath{selector: WatchProjectRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchProjectRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProjectRequest))
}

func (o *WatchProjectRequest) Clone() *WatchProjectRequest {
	if o == nil {
		return nil
	}
	result := &WatchProjectRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &project.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*project.Project_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchProjectRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProjectRequest) Merge(source *WatchProjectRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &project.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(project.Project_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchProjectRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProjectRequest))
}

func (o *WatchProjectResponse) GotenObjectExt() {}

func (o *WatchProjectResponse) MakeFullFieldMask() *WatchProjectResponse_FieldMask {
	return FullWatchProjectResponse_FieldMask()
}

func (o *WatchProjectResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProjectResponse_FieldMask()
}

func (o *WatchProjectResponse) MakeDiffFieldMask(other *WatchProjectResponse) *WatchProjectResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProjectResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProjectResponse_FieldMask()
	}

	res := &WatchProjectResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchProjectResponse_FieldTerminalPath{selector: WatchProjectResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchProjectResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProjectResponse))
}

func (o *WatchProjectResponse) Clone() *WatchProjectResponse {
	if o == nil {
		return nil
	}
	result := &WatchProjectResponse{}
	result.Change = proto.Clone(o.Change).(*project.ProjectChange)
	return result
}

func (o *WatchProjectResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProjectResponse) Merge(source *WatchProjectResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(project.ProjectChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchProjectResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProjectResponse))
}

func (o *WatchProjectsRequest) GotenObjectExt() {}

func (o *WatchProjectsRequest) MakeFullFieldMask() *WatchProjectsRequest_FieldMask {
	return FullWatchProjectsRequest_FieldMask()
}

func (o *WatchProjectsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProjectsRequest_FieldMask()
}

func (o *WatchProjectsRequest) MakeDiffFieldMask(other *WatchProjectsRequest) *WatchProjectsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchProjectsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProjectsRequest_FieldMask()
	}

	res := &WatchProjectsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchProjectsRequest_FieldTerminalPath{selector: WatchProjectsRequest_FieldPathSelectorType})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchProjectsRequest_FieldTerminalPath{selector: WatchProjectsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchProjectsRequest_FieldTerminalPath{selector: WatchProjectsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchProjectsRequest_FieldTerminalPath{selector: WatchProjectsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProjectsRequest_FieldTerminalPath{selector: WatchProjectsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchProjectsRequest_FieldTerminalPath{selector: WatchProjectsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchProjectsRequest_FieldTerminalPath{selector: WatchProjectsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchProjectsRequest_FieldTerminalPath{selector: WatchProjectsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchProjectsRequest_FieldTerminalPath{selector: WatchProjectsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchProjectsRequest_FieldTerminalPath{selector: WatchProjectsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchProjectsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProjectsRequest))
}

func (o *WatchProjectsRequest) Clone() *WatchProjectsRequest {
	if o == nil {
		return nil
	}
	result := &WatchProjectsRequest{}
	result.Type = o.Type
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &project.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &project.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &project.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*project.Project_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchProjectsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProjectsRequest) Merge(source *WatchProjectsRequest) {
	o.Type = source.GetType()
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &project.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &project.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &project.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(project.Project_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchProjectsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProjectsRequest))
}

func (o *WatchProjectsResponse) GotenObjectExt() {}

func (o *WatchProjectsResponse) MakeFullFieldMask() *WatchProjectsResponse_FieldMask {
	return FullWatchProjectsResponse_FieldMask()
}

func (o *WatchProjectsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProjectsResponse_FieldMask()
}

func (o *WatchProjectsResponse) MakeDiffFieldMask(other *WatchProjectsResponse) *WatchProjectsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchProjectsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProjectsResponse_FieldMask()
	}

	res := &WatchProjectsResponse_FieldMask{}

	if len(o.GetProjectChanges()) == len(other.GetProjectChanges()) {
		for i, lValue := range o.GetProjectChanges() {
			rValue := other.GetProjectChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchProjectsResponse_FieldTerminalPath{selector: WatchProjectsResponse_FieldPathSelectorProjectChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchProjectsResponse_FieldTerminalPath{selector: WatchProjectsResponse_FieldPathSelectorProjectChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchProjectsResponse_FieldTerminalPath{selector: WatchProjectsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchProjectsResponse_FieldTerminalPath{selector: WatchProjectsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchProjectsResponse_FieldSubPath{selector: WatchProjectsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchProjectsResponse_FieldTerminalPath{selector: WatchProjectsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchProjectsResponse_FieldTerminalPath{selector: WatchProjectsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchProjectsResponse_FieldTerminalPath{selector: WatchProjectsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchProjectsResponse_FieldTerminalPath{selector: WatchProjectsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchProjectsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProjectsResponse))
}

func (o *WatchProjectsResponse) Clone() *WatchProjectsResponse {
	if o == nil {
		return nil
	}
	result := &WatchProjectsResponse{}
	result.ProjectChanges = make([]*project.ProjectChange, len(o.ProjectChanges))
	for i, sourceValue := range o.ProjectChanges {
		result.ProjectChanges[i] = proto.Clone(sourceValue).(*project.ProjectChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchProjectsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProjectsResponse) Merge(source *WatchProjectsResponse) {
	for _, sourceValue := range source.GetProjectChanges() {
		exists := false
		for _, currentValue := range o.ProjectChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *project.ProjectChange
			if sourceValue != nil {
				newDstElement = new(project.ProjectChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ProjectChanges = append(o.ProjectChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchProjectsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchProjectsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProjectsResponse))
}

func (o *WatchProjectsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchProjectsResponse_PageTokenChange) MakeFullFieldMask() *WatchProjectsResponse_PageTokenChange_FieldMask {
	return FullWatchProjectsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProjectsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchProjectsResponse_PageTokenChange_FieldMask()
}

func (o *WatchProjectsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchProjectsResponse_PageTokenChange) *WatchProjectsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchProjectsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchProjectsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchProjectsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchProjectsResponsePageTokenChange_FieldTerminalPath{selector: WatchProjectsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchProjectsResponsePageTokenChange_FieldTerminalPath{selector: WatchProjectsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchProjectsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchProjectsResponse_PageTokenChange))
}

func (o *WatchProjectsResponse_PageTokenChange) Clone() *WatchProjectsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchProjectsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &project.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &project.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchProjectsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchProjectsResponse_PageTokenChange) Merge(source *WatchProjectsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &project.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &project.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchProjectsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchProjectsResponse_PageTokenChange))
}

func (o *CreateProjectRequest) GotenObjectExt() {}

func (o *CreateProjectRequest) MakeFullFieldMask() *CreateProjectRequest_FieldMask {
	return FullCreateProjectRequest_FieldMask()
}

func (o *CreateProjectRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateProjectRequest_FieldMask()
}

func (o *CreateProjectRequest) MakeDiffFieldMask(other *CreateProjectRequest) *CreateProjectRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateProjectRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateProjectRequest_FieldMask()
	}

	res := &CreateProjectRequest_FieldMask{}
	{
		subMask := o.GetProject().MakeDiffFieldMask(other.GetProject())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateProjectRequest_FieldTerminalPath{selector: CreateProjectRequest_FieldPathSelectorProject})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateProjectRequest_FieldSubPath{selector: CreateProjectRequest_FieldPathSelectorProject, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateProjectRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateProjectRequest))
}

func (o *CreateProjectRequest) Clone() *CreateProjectRequest {
	if o == nil {
		return nil
	}
	result := &CreateProjectRequest{}
	result.Project = o.Project.Clone()
	return result
}

func (o *CreateProjectRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateProjectRequest) Merge(source *CreateProjectRequest) {
	if source.GetProject() != nil {
		if o.Project == nil {
			o.Project = new(project.Project)
		}
		o.Project.Merge(source.GetProject())
	}
}

func (o *CreateProjectRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateProjectRequest))
}

func (o *UpdateProjectRequest) GotenObjectExt() {}

func (o *UpdateProjectRequest) MakeFullFieldMask() *UpdateProjectRequest_FieldMask {
	return FullUpdateProjectRequest_FieldMask()
}

func (o *UpdateProjectRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProjectRequest_FieldMask()
}

func (o *UpdateProjectRequest) MakeDiffFieldMask(other *UpdateProjectRequest) *UpdateProjectRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateProjectRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProjectRequest_FieldMask()
	}

	res := &UpdateProjectRequest_FieldMask{}
	{
		subMask := o.GetProject().MakeDiffFieldMask(other.GetProject())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProjectRequest_FieldTerminalPath{selector: UpdateProjectRequest_FieldPathSelectorProject})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProjectRequest_FieldSubPath{selector: UpdateProjectRequest_FieldPathSelectorProject, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateProjectRequest_FieldTerminalPath{selector: UpdateProjectRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProjectRequest_FieldTerminalPath{selector: UpdateProjectRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProjectRequest_FieldSubPath{selector: UpdateProjectRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateProjectRequest_FieldTerminalPath{selector: UpdateProjectRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateProjectRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProjectRequest))
}

func (o *UpdateProjectRequest) Clone() *UpdateProjectRequest {
	if o == nil {
		return nil
	}
	result := &UpdateProjectRequest{}
	result.Project = o.Project.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*project.Project_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateProjectRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProjectRequest) Merge(source *UpdateProjectRequest) {
	if source.GetProject() != nil {
		if o.Project == nil {
			o.Project = new(project.Project)
		}
		o.Project.Merge(source.GetProject())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(project.Project_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateProjectRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateProjectRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProjectRequest))
}

func (o *UpdateProjectRequest_CAS) GotenObjectExt() {}

func (o *UpdateProjectRequest_CAS) MakeFullFieldMask() *UpdateProjectRequest_CAS_FieldMask {
	return FullUpdateProjectRequest_CAS_FieldMask()
}

func (o *UpdateProjectRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateProjectRequest_CAS_FieldMask()
}

func (o *UpdateProjectRequest_CAS) MakeDiffFieldMask(other *UpdateProjectRequest_CAS) *UpdateProjectRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateProjectRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateProjectRequest_CAS_FieldMask()
	}

	res := &UpdateProjectRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateProjectRequestCAS_FieldTerminalPath{selector: UpdateProjectRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateProjectRequestCAS_FieldSubPath{selector: UpdateProjectRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateProjectRequestCAS_FieldTerminalPath{selector: UpdateProjectRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateProjectRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateProjectRequest_CAS))
}

func (o *UpdateProjectRequest_CAS) Clone() *UpdateProjectRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateProjectRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*project.Project_FieldMask)
	return result
}

func (o *UpdateProjectRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateProjectRequest_CAS) Merge(source *UpdateProjectRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(project.Project)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(project.Project_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateProjectRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateProjectRequest_CAS))
}

func (o *DeleteProjectRequest) GotenObjectExt() {}

func (o *DeleteProjectRequest) MakeFullFieldMask() *DeleteProjectRequest_FieldMask {
	return FullDeleteProjectRequest_FieldMask()
}

func (o *DeleteProjectRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteProjectRequest_FieldMask()
}

func (o *DeleteProjectRequest) MakeDiffFieldMask(other *DeleteProjectRequest) *DeleteProjectRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteProjectRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteProjectRequest_FieldMask()
	}

	res := &DeleteProjectRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteProjectRequest_FieldTerminalPath{selector: DeleteProjectRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteProjectRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteProjectRequest))
}

func (o *DeleteProjectRequest) Clone() *DeleteProjectRequest {
	if o == nil {
		return nil
	}
	result := &DeleteProjectRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &project.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteProjectRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteProjectRequest) Merge(source *DeleteProjectRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &project.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteProjectRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteProjectRequest))
}
