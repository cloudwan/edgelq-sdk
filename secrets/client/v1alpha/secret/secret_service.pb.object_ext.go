// Code generated by protoc-gen-goten-object
// File: edgelq/secrets/proto/v1alpha/secret_service.proto
// DO NOT EDIT!!!

package secret_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/secrets/resources/v1alpha/project"
	secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1alpha/secret"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &secret.Secret{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetSecretRequest) GotenObjectExt() {}

func (o *GetSecretRequest) MakeFullFieldMask() *GetSecretRequest_FieldMask {
	return FullGetSecretRequest_FieldMask()
}

func (o *GetSecretRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetSecretRequest_FieldMask()
}

func (o *GetSecretRequest) MakeDiffFieldMask(other *GetSecretRequest) *GetSecretRequest_FieldMask {
	if o == nil && other == nil {
		return &GetSecretRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetSecretRequest_FieldMask()
	}

	res := &GetSecretRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetSecretRequest_FieldTerminalPath{selector: GetSecretRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetSecretRequest_FieldTerminalPath{selector: GetSecretRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetSecretRequest_FieldTerminalPath{selector: GetSecretRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetSecretRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetSecretRequest))
}

func (o *GetSecretRequest) Clone() *GetSecretRequest {
	if o == nil {
		return nil
	}
	result := &GetSecretRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &secret.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*secret.Secret_FieldMask)
	result.View = o.View
	return result
}

func (o *GetSecretRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetSecretRequest) Merge(source *GetSecretRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &secret.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(secret.Secret_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetSecretRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetSecretRequest))
}

func (o *BatchGetSecretsRequest) GotenObjectExt() {}

func (o *BatchGetSecretsRequest) MakeFullFieldMask() *BatchGetSecretsRequest_FieldMask {
	return FullBatchGetSecretsRequest_FieldMask()
}

func (o *BatchGetSecretsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetSecretsRequest_FieldMask()
}

func (o *BatchGetSecretsRequest) MakeDiffFieldMask(other *BatchGetSecretsRequest) *BatchGetSecretsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetSecretsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetSecretsRequest_FieldMask()
	}

	res := &BatchGetSecretsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetSecretsRequest_FieldTerminalPath{selector: BatchGetSecretsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetSecretsRequest_FieldTerminalPath{selector: BatchGetSecretsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetSecretsRequest_FieldTerminalPath{selector: BatchGetSecretsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetSecretsRequest_FieldTerminalPath{selector: BatchGetSecretsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetSecretsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetSecretsRequest))
}

func (o *BatchGetSecretsRequest) Clone() *BatchGetSecretsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetSecretsRequest{}
	result.Names = make([]*secret.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &secret.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*secret.Secret_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetSecretsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetSecretsRequest) Merge(source *BatchGetSecretsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *secret.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &secret.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(secret.Secret_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetSecretsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetSecretsRequest))
}

func (o *BatchGetSecretsResponse) GotenObjectExt() {}

func (o *BatchGetSecretsResponse) MakeFullFieldMask() *BatchGetSecretsResponse_FieldMask {
	return FullBatchGetSecretsResponse_FieldMask()
}

func (o *BatchGetSecretsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetSecretsResponse_FieldMask()
}

func (o *BatchGetSecretsResponse) MakeDiffFieldMask(other *BatchGetSecretsResponse) *BatchGetSecretsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetSecretsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetSecretsResponse_FieldMask()
	}

	res := &BatchGetSecretsResponse_FieldMask{}

	if len(o.GetSecrets()) == len(other.GetSecrets()) {
		for i, lValue := range o.GetSecrets() {
			rValue := other.GetSecrets()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetSecretsResponse_FieldTerminalPath{selector: BatchGetSecretsResponse_FieldPathSelectorSecrets})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetSecretsResponse_FieldTerminalPath{selector: BatchGetSecretsResponse_FieldPathSelectorSecrets})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetSecretsResponse_FieldTerminalPath{selector: BatchGetSecretsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetSecretsResponse_FieldTerminalPath{selector: BatchGetSecretsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetSecretsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetSecretsResponse))
}

func (o *BatchGetSecretsResponse) Clone() *BatchGetSecretsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetSecretsResponse{}
	result.Secrets = make([]*secret.Secret, len(o.Secrets))
	for i, sourceValue := range o.Secrets {
		result.Secrets[i] = sourceValue.Clone()
	}
	result.Missing = make([]*secret.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &secret.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetSecretsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetSecretsResponse) Merge(source *BatchGetSecretsResponse) {
	for _, sourceValue := range source.GetSecrets() {
		exists := false
		for _, currentValue := range o.Secrets {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *secret.Secret
			if sourceValue != nil {
				newDstElement = new(secret.Secret)
				newDstElement.Merge(sourceValue)
			}
			o.Secrets = append(o.Secrets, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *secret.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &secret.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetSecretsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetSecretsResponse))
}

func (o *ListSecretsRequest) GotenObjectExt() {}

func (o *ListSecretsRequest) MakeFullFieldMask() *ListSecretsRequest_FieldMask {
	return FullListSecretsRequest_FieldMask()
}

func (o *ListSecretsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListSecretsRequest_FieldMask()
}

func (o *ListSecretsRequest) MakeDiffFieldMask(other *ListSecretsRequest) *ListSecretsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListSecretsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListSecretsRequest_FieldMask()
	}

	res := &ListSecretsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListSecretsRequest_FieldTerminalPath{selector: ListSecretsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListSecretsRequest_FieldTerminalPath{selector: ListSecretsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListSecretsRequest_FieldTerminalPath{selector: ListSecretsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListSecretsRequest_FieldTerminalPath{selector: ListSecretsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListSecretsRequest_FieldTerminalPath{selector: ListSecretsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListSecretsRequest_FieldTerminalPath{selector: ListSecretsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListSecretsRequest_FieldTerminalPath{selector: ListSecretsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListSecretsRequest_FieldTerminalPath{selector: ListSecretsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListSecretsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListSecretsRequest))
}

func (o *ListSecretsRequest) Clone() *ListSecretsRequest {
	if o == nil {
		return nil
	}
	result := &ListSecretsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &secret.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &secret.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &secret.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &secret.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*secret.Secret_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListSecretsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListSecretsRequest) Merge(source *ListSecretsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &secret.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &secret.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &secret.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &secret.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(secret.Secret_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListSecretsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListSecretsRequest))
}

func (o *ListSecretsResponse) GotenObjectExt() {}

func (o *ListSecretsResponse) MakeFullFieldMask() *ListSecretsResponse_FieldMask {
	return FullListSecretsResponse_FieldMask()
}

func (o *ListSecretsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListSecretsResponse_FieldMask()
}

func (o *ListSecretsResponse) MakeDiffFieldMask(other *ListSecretsResponse) *ListSecretsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListSecretsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListSecretsResponse_FieldMask()
	}

	res := &ListSecretsResponse_FieldMask{}

	if len(o.GetSecrets()) == len(other.GetSecrets()) {
		for i, lValue := range o.GetSecrets() {
			rValue := other.GetSecrets()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListSecretsResponse_FieldTerminalPath{selector: ListSecretsResponse_FieldPathSelectorSecrets})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListSecretsResponse_FieldTerminalPath{selector: ListSecretsResponse_FieldPathSelectorSecrets})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListSecretsResponse_FieldTerminalPath{selector: ListSecretsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListSecretsResponse_FieldTerminalPath{selector: ListSecretsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListSecretsResponse_FieldTerminalPath{selector: ListSecretsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListSecretsResponse_FieldTerminalPath{selector: ListSecretsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListSecretsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListSecretsResponse))
}

func (o *ListSecretsResponse) Clone() *ListSecretsResponse {
	if o == nil {
		return nil
	}
	result := &ListSecretsResponse{}
	result.Secrets = make([]*secret.Secret, len(o.Secrets))
	for i, sourceValue := range o.Secrets {
		result.Secrets[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &secret.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &secret.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListSecretsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListSecretsResponse) Merge(source *ListSecretsResponse) {
	for _, sourceValue := range source.GetSecrets() {
		exists := false
		for _, currentValue := range o.Secrets {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *secret.Secret
			if sourceValue != nil {
				newDstElement = new(secret.Secret)
				newDstElement.Merge(sourceValue)
			}
			o.Secrets = append(o.Secrets, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &secret.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &secret.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListSecretsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListSecretsResponse))
}

func (o *WatchSecretRequest) GotenObjectExt() {}

func (o *WatchSecretRequest) MakeFullFieldMask() *WatchSecretRequest_FieldMask {
	return FullWatchSecretRequest_FieldMask()
}

func (o *WatchSecretRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSecretRequest_FieldMask()
}

func (o *WatchSecretRequest) MakeDiffFieldMask(other *WatchSecretRequest) *WatchSecretRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchSecretRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSecretRequest_FieldMask()
	}

	res := &WatchSecretRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchSecretRequest_FieldTerminalPath{selector: WatchSecretRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchSecretRequest_FieldTerminalPath{selector: WatchSecretRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchSecretRequest_FieldTerminalPath{selector: WatchSecretRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchSecretRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSecretRequest))
}

func (o *WatchSecretRequest) Clone() *WatchSecretRequest {
	if o == nil {
		return nil
	}
	result := &WatchSecretRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &secret.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*secret.Secret_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchSecretRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSecretRequest) Merge(source *WatchSecretRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &secret.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(secret.Secret_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchSecretRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSecretRequest))
}

func (o *WatchSecretResponse) GotenObjectExt() {}

func (o *WatchSecretResponse) MakeFullFieldMask() *WatchSecretResponse_FieldMask {
	return FullWatchSecretResponse_FieldMask()
}

func (o *WatchSecretResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSecretResponse_FieldMask()
}

func (o *WatchSecretResponse) MakeDiffFieldMask(other *WatchSecretResponse) *WatchSecretResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchSecretResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSecretResponse_FieldMask()
	}

	res := &WatchSecretResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchSecretResponse_FieldTerminalPath{selector: WatchSecretResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchSecretResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSecretResponse))
}

func (o *WatchSecretResponse) Clone() *WatchSecretResponse {
	if o == nil {
		return nil
	}
	result := &WatchSecretResponse{}
	result.Change = proto.Clone(o.Change).(*secret.SecretChange)
	return result
}

func (o *WatchSecretResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSecretResponse) Merge(source *WatchSecretResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(secret.SecretChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchSecretResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSecretResponse))
}

func (o *WatchSecretsRequest) GotenObjectExt() {}

func (o *WatchSecretsRequest) MakeFullFieldMask() *WatchSecretsRequest_FieldMask {
	return FullWatchSecretsRequest_FieldMask()
}

func (o *WatchSecretsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSecretsRequest_FieldMask()
}

func (o *WatchSecretsRequest) MakeDiffFieldMask(other *WatchSecretsRequest) *WatchSecretsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchSecretsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSecretsRequest_FieldMask()
	}

	res := &WatchSecretsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchSecretsRequest_FieldTerminalPath{selector: WatchSecretsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchSecretsRequest_FieldTerminalPath{selector: WatchSecretsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchSecretsRequest_FieldTerminalPath{selector: WatchSecretsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchSecretsRequest_FieldTerminalPath{selector: WatchSecretsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchSecretsRequest_FieldTerminalPath{selector: WatchSecretsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchSecretsRequest_FieldTerminalPath{selector: WatchSecretsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchSecretsRequest_FieldTerminalPath{selector: WatchSecretsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchSecretsRequest_FieldTerminalPath{selector: WatchSecretsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchSecretsRequest_FieldTerminalPath{selector: WatchSecretsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchSecretsRequest_FieldTerminalPath{selector: WatchSecretsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchSecretsRequest_FieldTerminalPath{selector: WatchSecretsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchSecretsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSecretsRequest))
}

func (o *WatchSecretsRequest) Clone() *WatchSecretsRequest {
	if o == nil {
		return nil
	}
	result := &WatchSecretsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &secret.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &secret.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &secret.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &secret.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*secret.Secret_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchSecretsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSecretsRequest) Merge(source *WatchSecretsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &secret.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &secret.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &secret.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &secret.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(secret.Secret_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchSecretsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSecretsRequest))
}

func (o *WatchSecretsResponse) GotenObjectExt() {}

func (o *WatchSecretsResponse) MakeFullFieldMask() *WatchSecretsResponse_FieldMask {
	return FullWatchSecretsResponse_FieldMask()
}

func (o *WatchSecretsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSecretsResponse_FieldMask()
}

func (o *WatchSecretsResponse) MakeDiffFieldMask(other *WatchSecretsResponse) *WatchSecretsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchSecretsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSecretsResponse_FieldMask()
	}

	res := &WatchSecretsResponse_FieldMask{}

	if len(o.GetSecretChanges()) == len(other.GetSecretChanges()) {
		for i, lValue := range o.GetSecretChanges() {
			rValue := other.GetSecretChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchSecretsResponse_FieldTerminalPath{selector: WatchSecretsResponse_FieldPathSelectorSecretChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchSecretsResponse_FieldTerminalPath{selector: WatchSecretsResponse_FieldPathSelectorSecretChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchSecretsResponse_FieldTerminalPath{selector: WatchSecretsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchSecretsResponse_FieldTerminalPath{selector: WatchSecretsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchSecretsResponse_FieldSubPath{selector: WatchSecretsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchSecretsResponse_FieldTerminalPath{selector: WatchSecretsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchSecretsResponse_FieldTerminalPath{selector: WatchSecretsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchSecretsResponse_FieldTerminalPath{selector: WatchSecretsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchSecretsResponse_FieldTerminalPath{selector: WatchSecretsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchSecretsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSecretsResponse))
}

func (o *WatchSecretsResponse) Clone() *WatchSecretsResponse {
	if o == nil {
		return nil
	}
	result := &WatchSecretsResponse{}
	result.SecretChanges = make([]*secret.SecretChange, len(o.SecretChanges))
	for i, sourceValue := range o.SecretChanges {
		result.SecretChanges[i] = proto.Clone(sourceValue).(*secret.SecretChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchSecretsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSecretsResponse) Merge(source *WatchSecretsResponse) {
	for _, sourceValue := range source.GetSecretChanges() {
		exists := false
		for _, currentValue := range o.SecretChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *secret.SecretChange
			if sourceValue != nil {
				newDstElement = new(secret.SecretChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.SecretChanges = append(o.SecretChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchSecretsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchSecretsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSecretsResponse))
}

func (o *WatchSecretsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchSecretsResponse_PageTokenChange) MakeFullFieldMask() *WatchSecretsResponse_PageTokenChange_FieldMask {
	return FullWatchSecretsResponse_PageTokenChange_FieldMask()
}

func (o *WatchSecretsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchSecretsResponse_PageTokenChange_FieldMask()
}

func (o *WatchSecretsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchSecretsResponse_PageTokenChange) *WatchSecretsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchSecretsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchSecretsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchSecretsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchSecretsResponsePageTokenChange_FieldTerminalPath{selector: WatchSecretsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchSecretsResponsePageTokenChange_FieldTerminalPath{selector: WatchSecretsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchSecretsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchSecretsResponse_PageTokenChange))
}

func (o *WatchSecretsResponse_PageTokenChange) Clone() *WatchSecretsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchSecretsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &secret.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &secret.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchSecretsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchSecretsResponse_PageTokenChange) Merge(source *WatchSecretsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &secret.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &secret.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchSecretsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchSecretsResponse_PageTokenChange))
}

func (o *CreateSecretRequest) GotenObjectExt() {}

func (o *CreateSecretRequest) MakeFullFieldMask() *CreateSecretRequest_FieldMask {
	return FullCreateSecretRequest_FieldMask()
}

func (o *CreateSecretRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateSecretRequest_FieldMask()
}

func (o *CreateSecretRequest) MakeDiffFieldMask(other *CreateSecretRequest) *CreateSecretRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateSecretRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateSecretRequest_FieldMask()
	}

	res := &CreateSecretRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateSecretRequest_FieldTerminalPath{selector: CreateSecretRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetSecret().MakeDiffFieldMask(other.GetSecret())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateSecretRequest_FieldTerminalPath{selector: CreateSecretRequest_FieldPathSelectorSecret})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateSecretRequest_FieldSubPath{selector: CreateSecretRequest_FieldPathSelectorSecret, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateSecretRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateSecretRequest))
}

func (o *CreateSecretRequest) Clone() *CreateSecretRequest {
	if o == nil {
		return nil
	}
	result := &CreateSecretRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &secret.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Secret = o.Secret.Clone()
	return result
}

func (o *CreateSecretRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateSecretRequest) Merge(source *CreateSecretRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &secret.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetSecret() != nil {
		if o.Secret == nil {
			o.Secret = new(secret.Secret)
		}
		o.Secret.Merge(source.GetSecret())
	}
}

func (o *CreateSecretRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateSecretRequest))
}

func (o *UpdateSecretRequest) GotenObjectExt() {}

func (o *UpdateSecretRequest) MakeFullFieldMask() *UpdateSecretRequest_FieldMask {
	return FullUpdateSecretRequest_FieldMask()
}

func (o *UpdateSecretRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateSecretRequest_FieldMask()
}

func (o *UpdateSecretRequest) MakeDiffFieldMask(other *UpdateSecretRequest) *UpdateSecretRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateSecretRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateSecretRequest_FieldMask()
	}

	res := &UpdateSecretRequest_FieldMask{}
	{
		subMask := o.GetSecret().MakeDiffFieldMask(other.GetSecret())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateSecretRequest_FieldTerminalPath{selector: UpdateSecretRequest_FieldPathSelectorSecret})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateSecretRequest_FieldSubPath{selector: UpdateSecretRequest_FieldPathSelectorSecret, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateSecretRequest_FieldTerminalPath{selector: UpdateSecretRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateSecretRequest_FieldTerminalPath{selector: UpdateSecretRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateSecretRequest_FieldSubPath{selector: UpdateSecretRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	if o.GetAllowMissing() != other.GetAllowMissing() {
		res.Paths = append(res.Paths, &UpdateSecretRequest_FieldTerminalPath{selector: UpdateSecretRequest_FieldPathSelectorAllowMissing})
	}
	return res
}

func (o *UpdateSecretRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateSecretRequest))
}

func (o *UpdateSecretRequest) Clone() *UpdateSecretRequest {
	if o == nil {
		return nil
	}
	result := &UpdateSecretRequest{}
	result.Secret = o.Secret.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*secret.Secret_FieldMask)
	result.Cas = o.Cas.Clone()
	result.AllowMissing = o.AllowMissing
	return result
}

func (o *UpdateSecretRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateSecretRequest) Merge(source *UpdateSecretRequest) {
	if source.GetSecret() != nil {
		if o.Secret == nil {
			o.Secret = new(secret.Secret)
		}
		o.Secret.Merge(source.GetSecret())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(secret.Secret_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateSecretRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
	o.AllowMissing = source.GetAllowMissing()
}

func (o *UpdateSecretRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateSecretRequest))
}

func (o *UpdateSecretRequest_CAS) GotenObjectExt() {}

func (o *UpdateSecretRequest_CAS) MakeFullFieldMask() *UpdateSecretRequest_CAS_FieldMask {
	return FullUpdateSecretRequest_CAS_FieldMask()
}

func (o *UpdateSecretRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateSecretRequest_CAS_FieldMask()
}

func (o *UpdateSecretRequest_CAS) MakeDiffFieldMask(other *UpdateSecretRequest_CAS) *UpdateSecretRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateSecretRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateSecretRequest_CAS_FieldMask()
	}

	res := &UpdateSecretRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateSecretRequestCAS_FieldTerminalPath{selector: UpdateSecretRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateSecretRequestCAS_FieldSubPath{selector: UpdateSecretRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateSecretRequestCAS_FieldTerminalPath{selector: UpdateSecretRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateSecretRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateSecretRequest_CAS))
}

func (o *UpdateSecretRequest_CAS) Clone() *UpdateSecretRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateSecretRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*secret.Secret_FieldMask)
	return result
}

func (o *UpdateSecretRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateSecretRequest_CAS) Merge(source *UpdateSecretRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(secret.Secret)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(secret.Secret_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateSecretRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateSecretRequest_CAS))
}

func (o *DeleteSecretRequest) GotenObjectExt() {}

func (o *DeleteSecretRequest) MakeFullFieldMask() *DeleteSecretRequest_FieldMask {
	return FullDeleteSecretRequest_FieldMask()
}

func (o *DeleteSecretRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteSecretRequest_FieldMask()
}

func (o *DeleteSecretRequest) MakeDiffFieldMask(other *DeleteSecretRequest) *DeleteSecretRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteSecretRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteSecretRequest_FieldMask()
	}

	res := &DeleteSecretRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteSecretRequest_FieldTerminalPath{selector: DeleteSecretRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteSecretRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteSecretRequest))
}

func (o *DeleteSecretRequest) Clone() *DeleteSecretRequest {
	if o == nil {
		return nil
	}
	result := &DeleteSecretRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &secret.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteSecretRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteSecretRequest) Merge(source *DeleteSecretRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &secret.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteSecretRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteSecretRequest))
}
