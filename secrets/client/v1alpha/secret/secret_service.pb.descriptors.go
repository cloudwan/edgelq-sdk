// Code generated by protoc-gen-goten-client
// API: SecretService
// DO NOT EDIT!!!

package secret_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1alpha/secret"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &secret.Secret{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized    bool
	secretServiceDescriptor   *SecretServiceDescriptor
	getSecretDescriptor       *GetSecretDescriptor
	batchGetSecretsDescriptor *BatchGetSecretsDescriptor
	listSecretsDescriptor     *ListSecretsDescriptor
	watchSecretDescriptor     *WatchSecretDescriptor
	watchSecretsDescriptor    *WatchSecretsDescriptor
	createSecretDescriptor    *CreateSecretDescriptor
	updateSecretDescriptor    *UpdateSecretDescriptor
	deleteSecretDescriptor    *DeleteSecretDescriptor
)

type GetSecretDescriptor struct{}

type GetSecretDescriptorClientMsgHandle struct{}

type GetSecretDescriptorServerMsgHandle struct{}

func (d *GetSecretDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetSecretRequest{}
}

func (d *GetSecretDescriptor) NewEmptyServerMsg() proto.Message {
	return &secret.Secret{}
}

func (d *GetSecretDescriptor) IsUnary() bool {
	return true
}

func (d *GetSecretDescriptor) IsClientStream() bool {
	return false
}

func (d *GetSecretDescriptor) IsServerStream() bool {
	return false
}

func (d *GetSecretDescriptor) IsCollection() bool {
	return false
}

func (d *GetSecretDescriptor) IsPlural() bool {
	return false
}

func (d *GetSecretDescriptor) HasResource() bool {
	return true
}

func (d *GetSecretDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetSecretDescriptor) GetVerb() string {
	return "get"
}

func (d *GetSecretDescriptor) GetMethodName() string {
	return "GetSecret"
}

func (d *GetSecretDescriptor) GetFullMethodName() string {
	return "/ntt.secrets.v1alpha.SecretService/GetSecret"
}

func (d *GetSecretDescriptor) GetProtoPkgName() string {
	return "ntt.secrets.v1alpha"
}

func (d *GetSecretDescriptor) GetApiName() string {
	return "SecretService"
}

func (d *GetSecretDescriptor) GetServiceDomain() string {
	return "secrets.edgelq.com"
}

func (d *GetSecretDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *GetSecretDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return secretServiceDescriptor
}

func (d *GetSecretDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return secret.GetDescriptor()
}

func (d *GetSecretDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetSecretDescriptorClientMsgHandle{}
}

func (d *GetSecretDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetSecretDescriptorServerMsgHandle{}
}

func (h *GetSecretDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetSecretRequest) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*secret.Name)(nil)
}

func (h *GetSecretDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetSecretRequest) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetSecretDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetSecretRequest) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetSecretDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*secret.Secret)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*secret.Secret) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*secret.Name)(nil)
}

func (h *GetSecretDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*secret.Secret)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*secret.Secret) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetSecretDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*secret.Secret)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*secret.Secret) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetSecretDescriptor() *GetSecretDescriptor {
	return getSecretDescriptor
}

type BatchGetSecretsDescriptor struct{}

type BatchGetSecretsDescriptorClientMsgHandle struct{}

type BatchGetSecretsDescriptorServerMsgHandle struct{}

func (d *BatchGetSecretsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetSecretsRequest{}
}

func (d *BatchGetSecretsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetSecretsResponse{}
}

func (d *BatchGetSecretsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetSecretsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetSecretsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetSecretsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetSecretsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetSecretsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetSecretsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetSecretsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetSecretsDescriptor) GetMethodName() string {
	return "BatchGetSecrets"
}

func (d *BatchGetSecretsDescriptor) GetFullMethodName() string {
	return "/ntt.secrets.v1alpha.SecretService/BatchGetSecrets"
}

func (d *BatchGetSecretsDescriptor) GetProtoPkgName() string {
	return "ntt.secrets.v1alpha"
}

func (d *BatchGetSecretsDescriptor) GetApiName() string {
	return "SecretService"
}

func (d *BatchGetSecretsDescriptor) GetServiceDomain() string {
	return "secrets.edgelq.com"
}

func (d *BatchGetSecretsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *BatchGetSecretsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return secretServiceDescriptor
}

func (d *BatchGetSecretsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return secret.GetDescriptor()
}

func (d *BatchGetSecretsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetSecretsDescriptorClientMsgHandle{}
}

func (d *BatchGetSecretsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetSecretsDescriptorServerMsgHandle{}
}

func (h *BatchGetSecretsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSecretsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetSecretsRequest) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetSecretsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetSecretsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetSecretsRequest) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(secret.SecretNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (secret.SecretNameList)(nil)
}

func (h *BatchGetSecretsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSecretsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetSecretsRequest) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetSecretsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSecretsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetSecretsResponse) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetSecretsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetSecretsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetSecretsResponse) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetSecrets(); len(resources) > 0 {
			list := make(secret.SecretNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (secret.SecretNameList)(nil)
}

func (h *BatchGetSecretsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetSecretsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetSecretsResponse) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetSecretsDescriptor() *BatchGetSecretsDescriptor {
	return batchGetSecretsDescriptor
}

type ListSecretsDescriptor struct{}

type ListSecretsDescriptorClientMsgHandle struct{}

type ListSecretsDescriptorServerMsgHandle struct{}

func (d *ListSecretsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListSecretsRequest{}
}

func (d *ListSecretsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListSecretsResponse{}
}

func (d *ListSecretsDescriptor) IsUnary() bool {
	return true
}

func (d *ListSecretsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListSecretsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListSecretsDescriptor) IsCollection() bool {
	return true
}

func (d *ListSecretsDescriptor) IsPlural() bool {
	return true
}

func (d *ListSecretsDescriptor) HasResource() bool {
	return true
}

func (d *ListSecretsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListSecretsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListSecretsDescriptor) GetMethodName() string {
	return "ListSecrets"
}

func (d *ListSecretsDescriptor) GetFullMethodName() string {
	return "/ntt.secrets.v1alpha.SecretService/ListSecrets"
}

func (d *ListSecretsDescriptor) GetProtoPkgName() string {
	return "ntt.secrets.v1alpha"
}

func (d *ListSecretsDescriptor) GetApiName() string {
	return "SecretService"
}

func (d *ListSecretsDescriptor) GetServiceDomain() string {
	return "secrets.edgelq.com"
}

func (d *ListSecretsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ListSecretsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return secretServiceDescriptor
}

func (d *ListSecretsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return secret.GetDescriptor()
}

func (d *ListSecretsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListSecretsDescriptorClientMsgHandle{}
}

func (d *ListSecretsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListSecretsDescriptorServerMsgHandle{}
}

func (h *ListSecretsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSecretsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListSecretsRequest) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListSecretsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListSecretsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListSecretsRequest) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListSecretsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSecretsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListSecretsRequest) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*secret.ParentName)(nil)
}

func (h *ListSecretsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSecretsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListSecretsResponse) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListSecretsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListSecretsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListSecretsResponse) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetSecrets(); len(resources) > 0 {
			list := make(secret.SecretNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (secret.SecretNameList)(nil)
}

func (h *ListSecretsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListSecretsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListSecretsResponse) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListSecretsDescriptor() *ListSecretsDescriptor {
	return listSecretsDescriptor
}

type WatchSecretDescriptor struct{}

type WatchSecretDescriptorClientMsgHandle struct{}

type WatchSecretDescriptorServerMsgHandle struct{}

func (d *WatchSecretDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchSecretRequest{}
}

func (d *WatchSecretDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchSecretResponse{}
}

func (d *WatchSecretDescriptor) IsUnary() bool {
	return false
}

func (d *WatchSecretDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchSecretDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchSecretDescriptor) IsCollection() bool {
	return false
}

func (d *WatchSecretDescriptor) IsPlural() bool {
	return false
}

func (d *WatchSecretDescriptor) HasResource() bool {
	return true
}

func (d *WatchSecretDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchSecretDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchSecretDescriptor) GetMethodName() string {
	return "WatchSecret"
}

func (d *WatchSecretDescriptor) GetFullMethodName() string {
	return "/ntt.secrets.v1alpha.SecretService/WatchSecret"
}

func (d *WatchSecretDescriptor) GetProtoPkgName() string {
	return "ntt.secrets.v1alpha"
}

func (d *WatchSecretDescriptor) GetApiName() string {
	return "SecretService"
}

func (d *WatchSecretDescriptor) GetServiceDomain() string {
	return "secrets.edgelq.com"
}

func (d *WatchSecretDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchSecretDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return secretServiceDescriptor
}

func (d *WatchSecretDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return secret.GetDescriptor()
}

func (d *WatchSecretDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSecretDescriptorClientMsgHandle{}
}

func (d *WatchSecretDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSecretDescriptorServerMsgHandle{}
}

func (h *WatchSecretDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSecretRequest) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*secret.Name)(nil)
}

func (h *WatchSecretDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSecretRequest) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSecretDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSecretRequest) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchSecretDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSecretResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSecretResponse) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *secret.SecretChange_Added_:
				return tResChange.Added.GetSecret().GetName()
			case *secret.SecretChange_Modified_:
				return tResChange.Modified.GetName()
			case *secret.SecretChange_Removed_:
				return tResChange.Removed.GetName()
			case *secret.SecretChange_Current_:
				return tResChange.Current.GetSecret().GetName()
			}
		}
	}
	return (*secret.Name)(nil)
}

func (h *WatchSecretDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSecretResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSecretResponse) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSecretDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSecretResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSecretResponse) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchSecretDescriptor() *WatchSecretDescriptor {
	return watchSecretDescriptor
}

type WatchSecretsDescriptor struct{}

type WatchSecretsDescriptorClientMsgHandle struct{}

type WatchSecretsDescriptorServerMsgHandle struct{}

func (d *WatchSecretsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchSecretsRequest{}
}

func (d *WatchSecretsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchSecretsResponse{}
}

func (d *WatchSecretsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchSecretsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchSecretsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchSecretsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchSecretsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchSecretsDescriptor) HasResource() bool {
	return true
}

func (d *WatchSecretsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchSecretsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchSecretsDescriptor) GetMethodName() string {
	return "WatchSecrets"
}

func (d *WatchSecretsDescriptor) GetFullMethodName() string {
	return "/ntt.secrets.v1alpha.SecretService/WatchSecrets"
}

func (d *WatchSecretsDescriptor) GetProtoPkgName() string {
	return "ntt.secrets.v1alpha"
}

func (d *WatchSecretsDescriptor) GetApiName() string {
	return "SecretService"
}

func (d *WatchSecretsDescriptor) GetServiceDomain() string {
	return "secrets.edgelq.com"
}

func (d *WatchSecretsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchSecretsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return secretServiceDescriptor
}

func (d *WatchSecretsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return secret.GetDescriptor()
}

func (d *WatchSecretsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSecretsDescriptorClientMsgHandle{}
}

func (d *WatchSecretsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchSecretsDescriptorServerMsgHandle{}
}

func (h *WatchSecretsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSecretsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSecretsRequest) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchSecretsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSecretsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSecretsRequest) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchSecretsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSecretsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSecretsRequest) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*secret.ParentName)(nil)
}

func (h *WatchSecretsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSecretsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchSecretsResponse) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchSecretsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchSecretsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchSecretsResponse) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetSecretChanges(); len(resChanges) > 0 {
			list := make(secret.SecretNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *secret.SecretChange_Added_:
					list = append(list, tResChange.Added.GetSecret().GetName())
				case *secret.SecretChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *secret.SecretChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *secret.SecretChange_Current_:
					list = append(list, tResChange.Current.GetSecret().GetName())
				}
			}
			return list
		}
	}
	return (secret.SecretNameList)(nil)
}

func (h *WatchSecretsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchSecretsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchSecretsResponse) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchSecretsDescriptor() *WatchSecretsDescriptor {
	return watchSecretsDescriptor
}

type CreateSecretDescriptor struct{}

type CreateSecretDescriptorClientMsgHandle struct{}

type CreateSecretDescriptorServerMsgHandle struct{}

func (d *CreateSecretDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateSecretRequest{}
}

func (d *CreateSecretDescriptor) NewEmptyServerMsg() proto.Message {
	return &secret.Secret{}
}

func (d *CreateSecretDescriptor) IsUnary() bool {
	return true
}

func (d *CreateSecretDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateSecretDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateSecretDescriptor) IsCollection() bool {
	return true
}

func (d *CreateSecretDescriptor) IsPlural() bool {
	return false
}

func (d *CreateSecretDescriptor) HasResource() bool {
	return true
}

func (d *CreateSecretDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateSecretDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateSecretDescriptor) GetMethodName() string {
	return "CreateSecret"
}

func (d *CreateSecretDescriptor) GetFullMethodName() string {
	return "/ntt.secrets.v1alpha.SecretService/CreateSecret"
}

func (d *CreateSecretDescriptor) GetProtoPkgName() string {
	return "ntt.secrets.v1alpha"
}

func (d *CreateSecretDescriptor) GetApiName() string {
	return "SecretService"
}

func (d *CreateSecretDescriptor) GetServiceDomain() string {
	return "secrets.edgelq.com"
}

func (d *CreateSecretDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *CreateSecretDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return secretServiceDescriptor
}

func (d *CreateSecretDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return secret.GetDescriptor()
}

func (d *CreateSecretDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateSecretDescriptorClientMsgHandle{}
}

func (d *CreateSecretDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateSecretDescriptorServerMsgHandle{}
}

func (h *CreateSecretDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateSecretRequest) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetSecret()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*secret.Name)(nil)
}

func (h *CreateSecretDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateSecretRequest) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateSecretDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateSecretRequest) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*secret.ParentName)(nil)
}

func (h *CreateSecretDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*secret.Secret)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*secret.Secret) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*secret.Name)(nil)
}

func (h *CreateSecretDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*secret.Secret)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*secret.Secret) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateSecretDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*secret.Secret)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*secret.Secret) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateSecretDescriptor() *CreateSecretDescriptor {
	return createSecretDescriptor
}

type UpdateSecretDescriptor struct{}

type UpdateSecretDescriptorClientMsgHandle struct{}

type UpdateSecretDescriptorServerMsgHandle struct{}

func (d *UpdateSecretDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateSecretRequest{}
}

func (d *UpdateSecretDescriptor) NewEmptyServerMsg() proto.Message {
	return &secret.Secret{}
}

func (d *UpdateSecretDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateSecretDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateSecretDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateSecretDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateSecretDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateSecretDescriptor) HasResource() bool {
	return true
}

func (d *UpdateSecretDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateSecretDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateSecretDescriptor) GetMethodName() string {
	return "UpdateSecret"
}

func (d *UpdateSecretDescriptor) GetFullMethodName() string {
	return "/ntt.secrets.v1alpha.SecretService/UpdateSecret"
}

func (d *UpdateSecretDescriptor) GetProtoPkgName() string {
	return "ntt.secrets.v1alpha"
}

func (d *UpdateSecretDescriptor) GetApiName() string {
	return "SecretService"
}

func (d *UpdateSecretDescriptor) GetServiceDomain() string {
	return "secrets.edgelq.com"
}

func (d *UpdateSecretDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *UpdateSecretDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return secretServiceDescriptor
}

func (d *UpdateSecretDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return secret.GetDescriptor()
}

func (d *UpdateSecretDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateSecretDescriptorClientMsgHandle{}
}

func (d *UpdateSecretDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateSecretDescriptorServerMsgHandle{}
}

func (h *UpdateSecretDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateSecretRequest) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetSecret()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*secret.Name)(nil)
}

func (h *UpdateSecretDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateSecretRequest) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateSecretDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateSecretRequest) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateSecretDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*secret.Secret)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*secret.Secret) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*secret.Name)(nil)
}

func (h *UpdateSecretDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*secret.Secret)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*secret.Secret) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateSecretDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*secret.Secret)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*secret.Secret) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateSecretDescriptor() *UpdateSecretDescriptor {
	return updateSecretDescriptor
}

type DeleteSecretDescriptor struct{}

type DeleteSecretDescriptorClientMsgHandle struct{}

type DeleteSecretDescriptorServerMsgHandle struct{}

func (d *DeleteSecretDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteSecretRequest{}
}

func (d *DeleteSecretDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteSecretDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteSecretDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteSecretDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteSecretDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteSecretDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteSecretDescriptor) HasResource() bool {
	return true
}

func (d *DeleteSecretDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteSecretDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteSecretDescriptor) GetMethodName() string {
	return "DeleteSecret"
}

func (d *DeleteSecretDescriptor) GetFullMethodName() string {
	return "/ntt.secrets.v1alpha.SecretService/DeleteSecret"
}

func (d *DeleteSecretDescriptor) GetProtoPkgName() string {
	return "ntt.secrets.v1alpha"
}

func (d *DeleteSecretDescriptor) GetApiName() string {
	return "SecretService"
}

func (d *DeleteSecretDescriptor) GetServiceDomain() string {
	return "secrets.edgelq.com"
}

func (d *DeleteSecretDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *DeleteSecretDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return secretServiceDescriptor
}

func (d *DeleteSecretDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return secret.GetDescriptor()
}

func (d *DeleteSecretDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteSecretDescriptorClientMsgHandle{}
}

func (d *DeleteSecretDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteSecretDescriptorServerMsgHandle{}
}

func (h *DeleteSecretDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteSecretRequest) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*secret.Name)(nil)
}

func (h *DeleteSecretDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteSecretRequest) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteSecretDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteSecretRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteSecretRequest) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteSecretDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *secret.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteSecretDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*secret.Name
	})
	if ok {
		return secret.SecretNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteSecretDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *secret.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteSecretDescriptor() *DeleteSecretDescriptor {
	return deleteSecretDescriptor
}

type SecretServiceDescriptor struct{}

func (d *SecretServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getSecretDescriptor,
		batchGetSecretsDescriptor,
		listSecretsDescriptor,
		watchSecretDescriptor,
		watchSecretsDescriptor,
		createSecretDescriptor,
		updateSecretDescriptor,
		deleteSecretDescriptor,
	}
}

func (d *SecretServiceDescriptor) GetFullAPIName() string {
	return "/ntt.secrets.v1alpha.SecretService"
}

func (d *SecretServiceDescriptor) GetProtoPkgName() string {
	return "ntt.secrets.v1alpha"
}

func (d *SecretServiceDescriptor) GetApiName() string {
	return "SecretService"
}

func (d *SecretServiceDescriptor) GetServiceDomain() string {
	return "secrets.edgelq.com"
}

func (d *SecretServiceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func GetSecretServiceDescriptor() *SecretServiceDescriptor {
	return secretServiceDescriptor
}

func initDescriptors() {
	secretServiceDescriptor = &SecretServiceDescriptor{}
	getSecretDescriptor = &GetSecretDescriptor{}
	batchGetSecretsDescriptor = &BatchGetSecretsDescriptor{}
	listSecretsDescriptor = &ListSecretsDescriptor{}
	watchSecretDescriptor = &WatchSecretDescriptor{}
	watchSecretsDescriptor = &WatchSecretsDescriptor{}
	createSecretDescriptor = &CreateSecretDescriptor{}
	updateSecretDescriptor = &UpdateSecretDescriptor{}
	deleteSecretDescriptor = &DeleteSecretDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(secretServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getSecretDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetSecretsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listSecretsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchSecretDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchSecretsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createSecretDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateSecretDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteSecretDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
