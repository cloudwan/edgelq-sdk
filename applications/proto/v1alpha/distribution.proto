syntax = "proto3";

package ntt.applications.v1alpha;

import "edgelq-sdk/applications/proto/v1alpha/pod.proto";

import "edgelq-sdk/common/types/meta.proto";

import "google/api/resource.proto";

option java_outer_classname = "DistributionProto";

option java_multiple_files = true;

option go_package = "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha/distribution;distribution";

option java_package = "com.ntt.applications.pb.v1alpha";

// Distribution Resource
message Distribution {
  option (google.api.resource) = {
    type : "applications.edgelq.com/Distribution"
    pattern : "projects/{project}/distributions/{distribution}"
  };

  // Name of Distribution
  string name = 1;

  // Display name of Distribution
  string display_name = 2;

  ntt.types.Meta metadata = 3;

  Spec spec = 4;

  Status status = 5;

  // Spec defines the configuration of a Distribution
  message Spec {
    LabelSelector selector = 1;

    // template defines the probing config to be distributed.
    Template template = 2;

    message Template {
      ntt.types.Meta metadata = 1;

      Pod.Spec spec = 2;
    }
  }

  message Status {}
}

// A label selector is a label query over a set of resources. The result of
// matchLabels and matchExpressions are ANDed. An empty label selector matches
// all objects. A null label selector matches no objects.
message LabelSelector {
  // matchLabels is a map of {key,value} pairs. A single {key,value} in the
  // matchLabels map is equivalent to an element of matchExpressions, whose key
  // field is "key", the operator is "In", and the values array contains only
  // "value". The requirements are ANDed. +optional
  map<string, string> match_labels = 1;

  // matchExpressions is a list of label selector requirements. The requirements
  // are ANDed. +optional
  repeated LabelSelectorRequirement match_expressions = 2;
}

// A label selector requirement is a selector that contains values, a key, and
// an operator that relates the key and values.
message LabelSelectorRequirement {
  // key is the label key that the selector applies to.
  // +patchMergeKey=key
  // +patchStrategy=merge
  string key = 1;

  // operator represents a key's relationship to a set of values.
  // Valid operators are In, NotIn, Exists and DoesNotExist.
  string operator = 2;

  // values is an array of string values. If the operator is In or NotIn,
  // the values array must be non-empty. If the operator is Exists or
  // DoesNotExist, the values array must be empty. This array is replaced during
  // a strategic merge patch. +optional
  repeated string values = 3;
}
