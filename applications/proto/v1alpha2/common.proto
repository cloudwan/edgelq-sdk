syntax = "proto3";

package ntt.applications.v1alpha2;

import "edgelq-sdk/devices/proto/v1alpha2/device.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/timestamp.proto";
import "goten-sdk/types/meta.proto";

option go_package = "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/common;common";
option java_multiple_files = true;
option java_outer_classname = "PodSpecProto";
option java_package = "com.ntt.applications.pb.v1alpha2";

// PodSpec defines the configuration of a Pod
message PodSpec {
  // node is the name of the target node that the Pod is meant to be deployed
  // to.
  string node = 1;

  // containers defines list of containers that the Pod launches.
  repeated Container containers = 2;

  // Containers use the host network.
  bool host_network = 3;

  RestartPolicy restart_policy = 4;

  // ImagePullSecrets is an optional list of references to secrets in the same
  // namespace to use for pulling any of the images used by this PodSpec. If
  // specified, these secrets will be passed to individual puller
  // implementations for them to use. For example, in the case of docker, only
  // DockerConfig type secrets are honored.
  repeated LocalObjectReferenceSecret image_pull_secrets = 5;

  // List of volumes that can be mounted by containers belonging to the pod.
  repeated Volume volumes = 6;

  // Compose file as a string.
  // When this value is provided, you can manage containers directlry
  // using Docker Compose. Other values in the Spec expect `node` will be
  // ignored.
  string compose = 7;

  // HostVolumeMounts defines volumes to be mounted to the host file system.
  repeated VolumeMount host_volume_mounts = 8;

  // Container defines configuration of a Container.
  message Container {
    // args to run the command.
    repeated string args = 1;

    // command to run the container.
    // The image default command will be used when it's not given.
    repeated string command = 2;

    // env is additional environment variables passed to the container.
    repeated EnvVar env = 3;

    // image is the URL of the container image.
    string image = 4 [ (google.api.field_behavior) = REQUIRED ];

    string image_pull_policy = 5;

    // name is the name of the container. Must be unique in the Pod.
    string name = 6 [ (google.api.field_behavior) = REQUIRED ];

    ResourceRequirements resources = 7;

    // Security options the pod should run with.
    SecurityContext security_context = 8;

    // Pod volumes to mount into the container's filesystem.
    // Cannot be updated.
    repeated VolumeMount volume_mounts = 9;

    // List of sources to populate environment variables in the container.
    // The keys defined within a source must be a C_IDENTIFIER. All invalid
    // keys will be reported as an event when the container is starting. When
    // a key exists in multiple sources, the value associated with the last
    // source will take precedence. Values defined by an Env with a duplicate
    // key will take precedence. Cannot be updated.
    EnvFromSource envFrom = 19;

    message ResourceRequirements {
      // todo: change to k8s.io.apimachinery.pkg.api.resource.
      map<string, int64> limits = 1;

      map<string, int64> requests = 2;
    }
  }

  enum RestartPolicy {
    RESTART_POLICY_UNSPECIFIED = 0;

    ALWAYS = 1;

    ON_FAILURE = 2;

    NEVER = 3;
  }
}

// EnvFromSource represents the source of a set of ConfigMaps
message EnvFromSource {
  // An optional identifier to prepend to each key in the ConfigMap. Must be a
  // C_IDENTIFIER.
  string prefix = 1;

  // The ConfigMap to select from
  ConfigMapEnvSource config_map_ref = 2;

  // The Secret to select from
  SecretEnvSource secret_ref = 3;
}

// EnvVar is a key value pair for environment variables.
message EnvVar {
  // name is the name of the environment variable.
  string name = 1;

  // value is the value of the environment variable.
  string value = 2;

  // Source for the environment variable's value. Cannot be used if value is not
  // empty.
  EnvVarSource value_from = 3;
}

// ConfigMapEnvSource selects a ConfigMap to populate the environment
// variables with.
//
// The contents of the target ConfigMap's Data field will represent the
// key-value pairs as environment variables.
message ConfigMapEnvSource {
  // The ConfigMap to select from.
  string name = 1;

  // Specify whether the ConfigMap must be defined
  bool optional = 2;
}

// SecretEnvSource selects a Secret to populate the environment
// variables with.
//
// The contents of the target Secret's Data field will represent the
// key-value pairs as environment variables.
message SecretEnvSource {
  // The Secret to select from.
  string name = 1;

  // Specify whether the Secret must be defined
  bool optional = 2;
}

// EnvVarSource represents a source for the value of an EnvVar.
message EnvVarSource {
  // Selects a key of a ConfigMap.
  ConfigMapKeySelector config_map_key_ref = 3;

  // Selects a key of a secret in the pod's namespace
  SecretKeySelector secret_key_ref = 4;
}

message ConfigMapKeySelector {
  // The ConfigMap to select from.
  string name = 1;

  // The key to select.
  string key = 2;

  // Specify whether the ConfigMap or its key must be defined
  bool optional = 3;
}

// SecretKeySelector selects a key of a Secret.
message SecretKeySelector {
  // The name of the secret in the pod's namespace to select from.
  string name = 1;

  // The key of the secret to select from.  Must be a valid secret key.
  string key = 2;

  // Specify whether the Secret or its key must be defined
  bool optional = 3;
}

// LocalObjectReference contains enough information to let you locate the
// referenced object inside the same namespace.
message LocalObjectReferenceSecret {
  // Name of the referent.
  string name = 1;
}

// PodSecurityContext holds pod-level security attributes and common container
// settings. Some fields are also present in container.securityContext.  Field
// values of container.securityContext take precedence over field values of
// PodSecurityContext.
message SecurityContext {
  // Run container in privileged mode.
  // Processes in privileged containers are essentially equivalent to root on
  // the host. Defaults to false.
  bool privileged = 2;
}

// Volume represents a named volume in a pod that may be accessed by any
// container in the pod.
message Volume {
  // Volume's name.
  // Must be a DNS_LABEL and unique within the pod.
  string name = 1;

  // HostPath represents a pre-existing file or directory on the host
  // machine that is directly exposed to the container. This is generally
  // used for system agents or other privileged things that are allowed
  // to see the host machine. Most containers will NOT need this.
  HostPathVolumeSource host_path = 101;

  // Secret represents a secret that should populate this volume.
  // More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
  SecretVolumeSource secret = 106;

  // ConfigMap represents a configMap that should populate this volume
  ConfigMapVolumeSource config_map = 119;
}

// VolumeMount describes a mounting of a Volume within a container.
message VolumeMount {
  // This must match the Name of a Volume.
  string name = 1;

  // Mounted read-only if true, read-write otherwise (false or unspecified).
  // Defaults to false.
  bool read_only = 2;

  // Path within the container at which the volume should be mounted.  Must
  // not contain ':'.
  string mount_path = 3;

  // Path within the volume from which the container's volume should be mounted.
  // Defaults to "" (volume's root).
  string sub_path = 4;
}

// Represents a host path mapped into a pod.
message HostPathVolumeSource {
  // Path of the directory on the host.
  // If the path is a symlink, it will follow the link to the real path.
  string path = 1;

  // Type for HostPath Volume
  Type type = 2;

  enum Type {
    // TYPE_UNSPECIFIED is not used. Type must be set to one of the concreate
    // values.
    TYPE_UNSPECIFIED = 0;

    // If nothing exists at the given path, an empty directory will be created
    // there as needed with permission set to 0755, having the same group and
    // ownership with Droplet.
    DIRECTORY_OR_CREATE = 1;

    // A directory must exist at the given path
    DIRECTORY = 2;

    // If nothing exists at the given path, an empty file will be created there
    // as needed with permission set to 0644, having the same group and
    // ownership with Droplet.
    FILE_OR_CREATE = 3;

    // A file must exist at the given path
    FILE = 4;

    // A UNIX socket must exist at the given path
    SOCKET = 5;

    // A character device must exist at the given path
    CHAR_DEVICE = 6;

    // A block device must exist at the given path
    BLOCK_DEVICE = 7;
  }
}

// Adapts a Secret into a volume.
//
// The contents of the target Secret's Data field will be presented in a volume
// as files using the keys in the Data field as the file names.
// Secret volumes support ownership management and SELinux relabeling.
message SecretVolumeSource {
  // Name of the secret in the pod's namespace to use.
  // More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
  string secret_name = 1;

  // If unspecified, each key-value pair in the Data field of the referenced
  // Secret will be projected into the volume as a file whose name is the
  // key and content is the value. If specified, the listed keys will be
  // projected into the specified paths, and unlisted keys will not be
  // present. If a key is specified which is not present in the Secret,
  // the volume setup will error unless it is marked optional. Paths must be
  // relative and may not contain the '..' path or start with '..'.
  // +optional
  repeated KeyToPath items = 2;

  // Optional: mode bits used to set permissions on created files by default.
  // Must be an octal value between 0000 and 0777 or a decimal value between 0
  // and 511. YAML accepts both octal and decimal values, JSON requires decimal
  // values for mode bits. Defaults to 0644. Directories within the path are not
  // affected by this setting. This might be in conflict with other options that
  // affect the file mode, like fsGroup, and the result can be other mode bits
  // set.
  int32 default_mode = 3;

  // Specify whether the Secret or its keys must be defined
  bool optional = 4;
}

// Maps a string key to a path within a volume.
message KeyToPath {
  // The key to project.
  string key = 1;

  // The relative path of the file to map the key to.
  // May not be an absolute path.
  // May not contain the path element '..'.
  // May not start with the string '..'.
  string path = 2;

  // Optional: mode bits used to set permissions on this file.
  // Must be an octal value between 0000 and 0777 or a decimal value between 0
  // and 511. YAML accepts both octal and decimal values, JSON requires decimal
  // values for mode bits. If not specified, the volume defaultMode will be
  // used. This might be in conflict with other options that affect the file
  // mode, like fsGroup, and the result can be other mode bits set.
  int32 mode = 3;
}

// Adapts a ConfigMap into a volume.
//
// The contents of the target ConfigMap's Data field will be presented in a
// volume as files using the keys in the Data field as the file names, unless
// the items element is populated with specific mappings of keys to paths.
// ConfigMap volumes support ownership management and SELinux relabeling.
message ConfigMapVolumeSource {
  string name = 1;

  // If unspecified, each key-value pair in the Data field of the referenced
  // ConfigMap will be projected into the volume as a file whose name is the
  // key and content is the value. If specified, the listed keys will be
  // projected into the specified paths, and unlisted keys will not be
  // present. If a key is specified which is not present in the ConfigMap,
  // the volume setup will error unless it is marked optional. Paths must be
  // relative and may not contain the '..' path or start with '..'.
  repeated KeyToPath items = 2;

  // Optional: mode bits used to set permissions on created files by default.
  // Must be an octal value between 0000 and 0777 or a decimal value between 0
  // and 511. YAML accepts both octal and decimal values, JSON requires decimal
  // values for mode bits. Defaults to 0644. Directories within the path are not
  // affected by this setting. This might be in conflict with other options that
  // affect the file mode, like fsGroup, and the result can be other mode bits
  // set.
  int32 default_mode = 3;

  // Specify whether the ConfigMap or its keys must be defined
  bool optional = 4;
}
