// Code generated by protoc-gen-goten-object
// File: edgelq/applications/proto/v1alpha2/config_map_service.proto
// DO NOT EDIT!!!

package config_map_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	config_map "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/config_map"
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &config_map.ConfigMap{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetConfigMapRequest) GotenObjectExt() {}

func (o *GetConfigMapRequest) MakeFullFieldMask() *GetConfigMapRequest_FieldMask {
	return FullGetConfigMapRequest_FieldMask()
}

func (o *GetConfigMapRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetConfigMapRequest_FieldMask()
}

func (o *GetConfigMapRequest) MakeDiffFieldMask(other *GetConfigMapRequest) *GetConfigMapRequest_FieldMask {
	if o == nil && other == nil {
		return &GetConfigMapRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetConfigMapRequest_FieldMask()
	}

	res := &GetConfigMapRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetConfigMapRequest_FieldTerminalPath{selector: GetConfigMapRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetConfigMapRequest_FieldTerminalPath{selector: GetConfigMapRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetConfigMapRequest_FieldTerminalPath{selector: GetConfigMapRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetConfigMapRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetConfigMapRequest))
}

func (o *GetConfigMapRequest) Clone() *GetConfigMapRequest {
	if o == nil {
		return nil
	}
	result := &GetConfigMapRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &config_map.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*config_map.ConfigMap_FieldMask)
	result.View = o.View
	return result
}

func (o *GetConfigMapRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetConfigMapRequest) Merge(source *GetConfigMapRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &config_map.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(config_map.ConfigMap_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetConfigMapRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetConfigMapRequest))
}

func (o *BatchGetConfigMapsRequest) GotenObjectExt() {}

func (o *BatchGetConfigMapsRequest) MakeFullFieldMask() *BatchGetConfigMapsRequest_FieldMask {
	return FullBatchGetConfigMapsRequest_FieldMask()
}

func (o *BatchGetConfigMapsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetConfigMapsRequest_FieldMask()
}

func (o *BatchGetConfigMapsRequest) MakeDiffFieldMask(other *BatchGetConfigMapsRequest) *BatchGetConfigMapsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetConfigMapsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetConfigMapsRequest_FieldMask()
	}

	res := &BatchGetConfigMapsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetConfigMapsRequest_FieldTerminalPath{selector: BatchGetConfigMapsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetConfigMapsRequest_FieldTerminalPath{selector: BatchGetConfigMapsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetConfigMapsRequest_FieldTerminalPath{selector: BatchGetConfigMapsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetConfigMapsRequest_FieldTerminalPath{selector: BatchGetConfigMapsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetConfigMapsRequest_FieldTerminalPath{selector: BatchGetConfigMapsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetConfigMapsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetConfigMapsRequest))
}

func (o *BatchGetConfigMapsRequest) Clone() *BatchGetConfigMapsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetConfigMapsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &config_map.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*config_map.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &config_map.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*config_map.ConfigMap_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetConfigMapsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetConfigMapsRequest) Merge(source *BatchGetConfigMapsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &config_map.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *config_map.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &config_map.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(config_map.ConfigMap_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetConfigMapsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetConfigMapsRequest))
}

func (o *BatchGetConfigMapsResponse) GotenObjectExt() {}

func (o *BatchGetConfigMapsResponse) MakeFullFieldMask() *BatchGetConfigMapsResponse_FieldMask {
	return FullBatchGetConfigMapsResponse_FieldMask()
}

func (o *BatchGetConfigMapsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetConfigMapsResponse_FieldMask()
}

func (o *BatchGetConfigMapsResponse) MakeDiffFieldMask(other *BatchGetConfigMapsResponse) *BatchGetConfigMapsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetConfigMapsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetConfigMapsResponse_FieldMask()
	}

	res := &BatchGetConfigMapsResponse_FieldMask{}

	if len(o.GetConfigMaps()) == len(other.GetConfigMaps()) {
		for i, lValue := range o.GetConfigMaps() {
			rValue := other.GetConfigMaps()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetConfigMapsResponse_FieldTerminalPath{selector: BatchGetConfigMapsResponse_FieldPathSelectorConfigMaps})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetConfigMapsResponse_FieldTerminalPath{selector: BatchGetConfigMapsResponse_FieldPathSelectorConfigMaps})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetConfigMapsResponse_FieldTerminalPath{selector: BatchGetConfigMapsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetConfigMapsResponse_FieldTerminalPath{selector: BatchGetConfigMapsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetConfigMapsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetConfigMapsResponse))
}

func (o *BatchGetConfigMapsResponse) Clone() *BatchGetConfigMapsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetConfigMapsResponse{}
	result.ConfigMaps = make([]*config_map.ConfigMap, len(o.ConfigMaps))
	for i, sourceValue := range o.ConfigMaps {
		result.ConfigMaps[i] = sourceValue.Clone()
	}
	result.Missing = make([]*config_map.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &config_map.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetConfigMapsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetConfigMapsResponse) Merge(source *BatchGetConfigMapsResponse) {
	for _, sourceValue := range source.GetConfigMaps() {
		exists := false
		for _, currentValue := range o.ConfigMaps {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *config_map.ConfigMap
			if sourceValue != nil {
				newDstElement = new(config_map.ConfigMap)
				newDstElement.Merge(sourceValue)
			}
			o.ConfigMaps = append(o.ConfigMaps, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *config_map.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &config_map.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetConfigMapsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetConfigMapsResponse))
}

func (o *ListConfigMapsRequest) GotenObjectExt() {}

func (o *ListConfigMapsRequest) MakeFullFieldMask() *ListConfigMapsRequest_FieldMask {
	return FullListConfigMapsRequest_FieldMask()
}

func (o *ListConfigMapsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListConfigMapsRequest_FieldMask()
}

func (o *ListConfigMapsRequest) MakeDiffFieldMask(other *ListConfigMapsRequest) *ListConfigMapsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListConfigMapsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListConfigMapsRequest_FieldMask()
	}

	res := &ListConfigMapsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListConfigMapsRequest_FieldTerminalPath{selector: ListConfigMapsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListConfigMapsRequest_FieldTerminalPath{selector: ListConfigMapsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListConfigMapsRequest_FieldTerminalPath{selector: ListConfigMapsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListConfigMapsRequest_FieldTerminalPath{selector: ListConfigMapsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListConfigMapsRequest_FieldTerminalPath{selector: ListConfigMapsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListConfigMapsRequest_FieldTerminalPath{selector: ListConfigMapsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListConfigMapsRequest_FieldTerminalPath{selector: ListConfigMapsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListConfigMapsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListConfigMapsRequest))
}

func (o *ListConfigMapsRequest) Clone() *ListConfigMapsRequest {
	if o == nil {
		return nil
	}
	result := &ListConfigMapsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &config_map.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &config_map.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &config_map.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &config_map.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*config_map.ConfigMap_FieldMask)
	result.View = o.View
	return result
}

func (o *ListConfigMapsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListConfigMapsRequest) Merge(source *ListConfigMapsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &config_map.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &config_map.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &config_map.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &config_map.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(config_map.ConfigMap_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListConfigMapsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListConfigMapsRequest))
}

func (o *ListConfigMapsResponse) GotenObjectExt() {}

func (o *ListConfigMapsResponse) MakeFullFieldMask() *ListConfigMapsResponse_FieldMask {
	return FullListConfigMapsResponse_FieldMask()
}

func (o *ListConfigMapsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListConfigMapsResponse_FieldMask()
}

func (o *ListConfigMapsResponse) MakeDiffFieldMask(other *ListConfigMapsResponse) *ListConfigMapsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListConfigMapsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListConfigMapsResponse_FieldMask()
	}

	res := &ListConfigMapsResponse_FieldMask{}

	if len(o.GetConfigMaps()) == len(other.GetConfigMaps()) {
		for i, lValue := range o.GetConfigMaps() {
			rValue := other.GetConfigMaps()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListConfigMapsResponse_FieldTerminalPath{selector: ListConfigMapsResponse_FieldPathSelectorConfigMaps})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListConfigMapsResponse_FieldTerminalPath{selector: ListConfigMapsResponse_FieldPathSelectorConfigMaps})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListConfigMapsResponse_FieldTerminalPath{selector: ListConfigMapsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListConfigMapsResponse_FieldTerminalPath{selector: ListConfigMapsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListConfigMapsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListConfigMapsResponse))
}

func (o *ListConfigMapsResponse) Clone() *ListConfigMapsResponse {
	if o == nil {
		return nil
	}
	result := &ListConfigMapsResponse{}
	result.ConfigMaps = make([]*config_map.ConfigMap, len(o.ConfigMaps))
	for i, sourceValue := range o.ConfigMaps {
		result.ConfigMaps[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &config_map.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &config_map.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListConfigMapsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListConfigMapsResponse) Merge(source *ListConfigMapsResponse) {
	for _, sourceValue := range source.GetConfigMaps() {
		exists := false
		for _, currentValue := range o.ConfigMaps {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *config_map.ConfigMap
			if sourceValue != nil {
				newDstElement = new(config_map.ConfigMap)
				newDstElement.Merge(sourceValue)
			}
			o.ConfigMaps = append(o.ConfigMaps, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &config_map.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &config_map.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListConfigMapsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListConfigMapsResponse))
}

func (o *WatchConfigMapRequest) GotenObjectExt() {}

func (o *WatchConfigMapRequest) MakeFullFieldMask() *WatchConfigMapRequest_FieldMask {
	return FullWatchConfigMapRequest_FieldMask()
}

func (o *WatchConfigMapRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchConfigMapRequest_FieldMask()
}

func (o *WatchConfigMapRequest) MakeDiffFieldMask(other *WatchConfigMapRequest) *WatchConfigMapRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchConfigMapRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchConfigMapRequest_FieldMask()
	}

	res := &WatchConfigMapRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchConfigMapRequest_FieldTerminalPath{selector: WatchConfigMapRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchConfigMapRequest_FieldTerminalPath{selector: WatchConfigMapRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchConfigMapRequest_FieldTerminalPath{selector: WatchConfigMapRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchConfigMapRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchConfigMapRequest))
}

func (o *WatchConfigMapRequest) Clone() *WatchConfigMapRequest {
	if o == nil {
		return nil
	}
	result := &WatchConfigMapRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &config_map.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*config_map.ConfigMap_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchConfigMapRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchConfigMapRequest) Merge(source *WatchConfigMapRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &config_map.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(config_map.ConfigMap_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchConfigMapRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchConfigMapRequest))
}

func (o *WatchConfigMapResponse) GotenObjectExt() {}

func (o *WatchConfigMapResponse) MakeFullFieldMask() *WatchConfigMapResponse_FieldMask {
	return FullWatchConfigMapResponse_FieldMask()
}

func (o *WatchConfigMapResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchConfigMapResponse_FieldMask()
}

func (o *WatchConfigMapResponse) MakeDiffFieldMask(other *WatchConfigMapResponse) *WatchConfigMapResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchConfigMapResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchConfigMapResponse_FieldMask()
	}

	res := &WatchConfigMapResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchConfigMapResponse_FieldTerminalPath{selector: WatchConfigMapResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchConfigMapResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchConfigMapResponse))
}

func (o *WatchConfigMapResponse) Clone() *WatchConfigMapResponse {
	if o == nil {
		return nil
	}
	result := &WatchConfigMapResponse{}
	result.Change = proto.Clone(o.Change).(*config_map.ConfigMapChange)
	return result
}

func (o *WatchConfigMapResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchConfigMapResponse) Merge(source *WatchConfigMapResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(config_map.ConfigMapChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchConfigMapResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchConfigMapResponse))
}

func (o *WatchConfigMapsRequest) GotenObjectExt() {}

func (o *WatchConfigMapsRequest) MakeFullFieldMask() *WatchConfigMapsRequest_FieldMask {
	return FullWatchConfigMapsRequest_FieldMask()
}

func (o *WatchConfigMapsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchConfigMapsRequest_FieldMask()
}

func (o *WatchConfigMapsRequest) MakeDiffFieldMask(other *WatchConfigMapsRequest) *WatchConfigMapsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchConfigMapsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchConfigMapsRequest_FieldMask()
	}

	res := &WatchConfigMapsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchConfigMapsRequest_FieldTerminalPath{selector: WatchConfigMapsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchConfigMapsRequest_FieldTerminalPath{selector: WatchConfigMapsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchConfigMapsRequest_FieldTerminalPath{selector: WatchConfigMapsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchConfigMapsRequest_FieldTerminalPath{selector: WatchConfigMapsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchConfigMapsRequest_FieldTerminalPath{selector: WatchConfigMapsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchConfigMapsRequest_FieldTerminalPath{selector: WatchConfigMapsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchConfigMapsRequest_FieldTerminalPath{selector: WatchConfigMapsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchConfigMapsRequest_FieldTerminalPath{selector: WatchConfigMapsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchConfigMapsRequest_FieldTerminalPath{selector: WatchConfigMapsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchConfigMapsRequest_FieldTerminalPath{selector: WatchConfigMapsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchConfigMapsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchConfigMapsRequest))
}

func (o *WatchConfigMapsRequest) Clone() *WatchConfigMapsRequest {
	if o == nil {
		return nil
	}
	result := &WatchConfigMapsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &config_map.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &config_map.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &config_map.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &config_map.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*config_map.ConfigMap_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchConfigMapsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchConfigMapsRequest) Merge(source *WatchConfigMapsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &config_map.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &config_map.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &config_map.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &config_map.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(config_map.ConfigMap_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchConfigMapsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchConfigMapsRequest))
}

func (o *WatchConfigMapsResponse) GotenObjectExt() {}

func (o *WatchConfigMapsResponse) MakeFullFieldMask() *WatchConfigMapsResponse_FieldMask {
	return FullWatchConfigMapsResponse_FieldMask()
}

func (o *WatchConfigMapsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchConfigMapsResponse_FieldMask()
}

func (o *WatchConfigMapsResponse) MakeDiffFieldMask(other *WatchConfigMapsResponse) *WatchConfigMapsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchConfigMapsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchConfigMapsResponse_FieldMask()
	}

	res := &WatchConfigMapsResponse_FieldMask{}

	if len(o.GetConfigMapChanges()) == len(other.GetConfigMapChanges()) {
		for i, lValue := range o.GetConfigMapChanges() {
			rValue := other.GetConfigMapChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchConfigMapsResponse_FieldTerminalPath{selector: WatchConfigMapsResponse_FieldPathSelectorConfigMapChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchConfigMapsResponse_FieldTerminalPath{selector: WatchConfigMapsResponse_FieldPathSelectorConfigMapChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchConfigMapsResponse_FieldTerminalPath{selector: WatchConfigMapsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchConfigMapsResponse_FieldTerminalPath{selector: WatchConfigMapsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchConfigMapsResponse_FieldSubPath{selector: WatchConfigMapsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchConfigMapsResponse_FieldTerminalPath{selector: WatchConfigMapsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchConfigMapsResponse_FieldTerminalPath{selector: WatchConfigMapsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchConfigMapsResponse_FieldTerminalPath{selector: WatchConfigMapsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchConfigMapsResponse_FieldTerminalPath{selector: WatchConfigMapsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchConfigMapsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchConfigMapsResponse))
}

func (o *WatchConfigMapsResponse) Clone() *WatchConfigMapsResponse {
	if o == nil {
		return nil
	}
	result := &WatchConfigMapsResponse{}
	result.ConfigMapChanges = make([]*config_map.ConfigMapChange, len(o.ConfigMapChanges))
	for i, sourceValue := range o.ConfigMapChanges {
		result.ConfigMapChanges[i] = proto.Clone(sourceValue).(*config_map.ConfigMapChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchConfigMapsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchConfigMapsResponse) Merge(source *WatchConfigMapsResponse) {
	for _, sourceValue := range source.GetConfigMapChanges() {
		exists := false
		for _, currentValue := range o.ConfigMapChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *config_map.ConfigMapChange
			if sourceValue != nil {
				newDstElement = new(config_map.ConfigMapChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.ConfigMapChanges = append(o.ConfigMapChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchConfigMapsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchConfigMapsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchConfigMapsResponse))
}

func (o *WatchConfigMapsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchConfigMapsResponse_PageTokenChange) MakeFullFieldMask() *WatchConfigMapsResponse_PageTokenChange_FieldMask {
	return FullWatchConfigMapsResponse_PageTokenChange_FieldMask()
}

func (o *WatchConfigMapsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchConfigMapsResponse_PageTokenChange_FieldMask()
}

func (o *WatchConfigMapsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchConfigMapsResponse_PageTokenChange) *WatchConfigMapsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchConfigMapsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchConfigMapsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchConfigMapsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchConfigMapsResponsePageTokenChange_FieldTerminalPath{selector: WatchConfigMapsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchConfigMapsResponsePageTokenChange_FieldTerminalPath{selector: WatchConfigMapsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchConfigMapsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchConfigMapsResponse_PageTokenChange))
}

func (o *WatchConfigMapsResponse_PageTokenChange) Clone() *WatchConfigMapsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchConfigMapsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &config_map.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &config_map.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchConfigMapsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchConfigMapsResponse_PageTokenChange) Merge(source *WatchConfigMapsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &config_map.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &config_map.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchConfigMapsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchConfigMapsResponse_PageTokenChange))
}

func (o *CreateConfigMapRequest) GotenObjectExt() {}

func (o *CreateConfigMapRequest) MakeFullFieldMask() *CreateConfigMapRequest_FieldMask {
	return FullCreateConfigMapRequest_FieldMask()
}

func (o *CreateConfigMapRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateConfigMapRequest_FieldMask()
}

func (o *CreateConfigMapRequest) MakeDiffFieldMask(other *CreateConfigMapRequest) *CreateConfigMapRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateConfigMapRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateConfigMapRequest_FieldMask()
	}

	res := &CreateConfigMapRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateConfigMapRequest_FieldTerminalPath{selector: CreateConfigMapRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetConfigMap().MakeDiffFieldMask(other.GetConfigMap())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateConfigMapRequest_FieldTerminalPath{selector: CreateConfigMapRequest_FieldPathSelectorConfigMap})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateConfigMapRequest_FieldSubPath{selector: CreateConfigMapRequest_FieldPathSelectorConfigMap, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateConfigMapRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateConfigMapRequest))
}

func (o *CreateConfigMapRequest) Clone() *CreateConfigMapRequest {
	if o == nil {
		return nil
	}
	result := &CreateConfigMapRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &config_map.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ConfigMap = o.ConfigMap.Clone()
	return result
}

func (o *CreateConfigMapRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateConfigMapRequest) Merge(source *CreateConfigMapRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &config_map.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetConfigMap() != nil {
		if o.ConfigMap == nil {
			o.ConfigMap = new(config_map.ConfigMap)
		}
		o.ConfigMap.Merge(source.GetConfigMap())
	}
}

func (o *CreateConfigMapRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateConfigMapRequest))
}

func (o *UpdateConfigMapRequest) GotenObjectExt() {}

func (o *UpdateConfigMapRequest) MakeFullFieldMask() *UpdateConfigMapRequest_FieldMask {
	return FullUpdateConfigMapRequest_FieldMask()
}

func (o *UpdateConfigMapRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateConfigMapRequest_FieldMask()
}

func (o *UpdateConfigMapRequest) MakeDiffFieldMask(other *UpdateConfigMapRequest) *UpdateConfigMapRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateConfigMapRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateConfigMapRequest_FieldMask()
	}

	res := &UpdateConfigMapRequest_FieldMask{}
	{
		subMask := o.GetConfigMap().MakeDiffFieldMask(other.GetConfigMap())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateConfigMapRequest_FieldTerminalPath{selector: UpdateConfigMapRequest_FieldPathSelectorConfigMap})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateConfigMapRequest_FieldSubPath{selector: UpdateConfigMapRequest_FieldPathSelectorConfigMap, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateConfigMapRequest_FieldTerminalPath{selector: UpdateConfigMapRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateConfigMapRequest_FieldTerminalPath{selector: UpdateConfigMapRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateConfigMapRequest_FieldSubPath{selector: UpdateConfigMapRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateConfigMapRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateConfigMapRequest))
}

func (o *UpdateConfigMapRequest) Clone() *UpdateConfigMapRequest {
	if o == nil {
		return nil
	}
	result := &UpdateConfigMapRequest{}
	result.ConfigMap = o.ConfigMap.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*config_map.ConfigMap_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateConfigMapRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateConfigMapRequest) Merge(source *UpdateConfigMapRequest) {
	if source.GetConfigMap() != nil {
		if o.ConfigMap == nil {
			o.ConfigMap = new(config_map.ConfigMap)
		}
		o.ConfigMap.Merge(source.GetConfigMap())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(config_map.ConfigMap_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateConfigMapRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateConfigMapRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateConfigMapRequest))
}

func (o *UpdateConfigMapRequest_CAS) GotenObjectExt() {}

func (o *UpdateConfigMapRequest_CAS) MakeFullFieldMask() *UpdateConfigMapRequest_CAS_FieldMask {
	return FullUpdateConfigMapRequest_CAS_FieldMask()
}

func (o *UpdateConfigMapRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateConfigMapRequest_CAS_FieldMask()
}

func (o *UpdateConfigMapRequest_CAS) MakeDiffFieldMask(other *UpdateConfigMapRequest_CAS) *UpdateConfigMapRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateConfigMapRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateConfigMapRequest_CAS_FieldMask()
	}

	res := &UpdateConfigMapRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateConfigMapRequestCAS_FieldTerminalPath{selector: UpdateConfigMapRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateConfigMapRequestCAS_FieldSubPath{selector: UpdateConfigMapRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateConfigMapRequestCAS_FieldTerminalPath{selector: UpdateConfigMapRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateConfigMapRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateConfigMapRequest_CAS))
}

func (o *UpdateConfigMapRequest_CAS) Clone() *UpdateConfigMapRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateConfigMapRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*config_map.ConfigMap_FieldMask)
	return result
}

func (o *UpdateConfigMapRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateConfigMapRequest_CAS) Merge(source *UpdateConfigMapRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(config_map.ConfigMap)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(config_map.ConfigMap_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateConfigMapRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateConfigMapRequest_CAS))
}

func (o *DeleteConfigMapRequest) GotenObjectExt() {}

func (o *DeleteConfigMapRequest) MakeFullFieldMask() *DeleteConfigMapRequest_FieldMask {
	return FullDeleteConfigMapRequest_FieldMask()
}

func (o *DeleteConfigMapRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteConfigMapRequest_FieldMask()
}

func (o *DeleteConfigMapRequest) MakeDiffFieldMask(other *DeleteConfigMapRequest) *DeleteConfigMapRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteConfigMapRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteConfigMapRequest_FieldMask()
	}

	res := &DeleteConfigMapRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteConfigMapRequest_FieldTerminalPath{selector: DeleteConfigMapRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteConfigMapRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteConfigMapRequest))
}

func (o *DeleteConfigMapRequest) Clone() *DeleteConfigMapRequest {
	if o == nil {
		return nil
	}
	result := &DeleteConfigMapRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &config_map.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteConfigMapRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteConfigMapRequest) Merge(source *DeleteConfigMapRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &config_map.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteConfigMapRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteConfigMapRequest))
}
