// Code generated by protoc-gen-goten-client
// API: ConfigMapService
// DO NOT EDIT!!!

package config_map_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	config_map "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/config_map"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &config_map.ConfigMap{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized       bool
	configMapServiceDescriptor   *ConfigMapServiceDescriptor
	getConfigMapDescriptor       *GetConfigMapDescriptor
	batchGetConfigMapsDescriptor *BatchGetConfigMapsDescriptor
	listConfigMapsDescriptor     *ListConfigMapsDescriptor
	watchConfigMapDescriptor     *WatchConfigMapDescriptor
	watchConfigMapsDescriptor    *WatchConfigMapsDescriptor
	createConfigMapDescriptor    *CreateConfigMapDescriptor
	updateConfigMapDescriptor    *UpdateConfigMapDescriptor
	deleteConfigMapDescriptor    *DeleteConfigMapDescriptor
)

type GetConfigMapDescriptor struct{}

type GetConfigMapDescriptorClientMsgHandle struct{}

type GetConfigMapDescriptorServerMsgHandle struct{}

func (d *GetConfigMapDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetConfigMapRequest{}
}

func (d *GetConfigMapDescriptor) NewEmptyServerMsg() proto.Message {
	return &config_map.ConfigMap{}
}

func (d *GetConfigMapDescriptor) IsUnary() bool {
	return true
}

func (d *GetConfigMapDescriptor) IsClientStream() bool {
	return false
}

func (d *GetConfigMapDescriptor) IsServerStream() bool {
	return false
}

func (d *GetConfigMapDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetConfigMapDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetConfigMapDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetConfigMapDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetConfigMapDescriptor) GetVerb() string {
	return "get"
}

func (d *GetConfigMapDescriptor) GetMethodName() string {
	return "GetConfigMap"
}

func (d *GetConfigMapDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.ConfigMapService/GetConfigMap"
}

func (d *GetConfigMapDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *GetConfigMapDescriptor) GetApiName() string {
	return "ConfigMapService"
}

func (d *GetConfigMapDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *GetConfigMapDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetConfigMapDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return configMapServiceDescriptor
}

func (d *GetConfigMapDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return config_map.GetDescriptor()
}

func (d *GetConfigMapDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetConfigMapDescriptorClientMsgHandle{}
}

func (d *GetConfigMapDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetConfigMapDescriptorServerMsgHandle{}
}

func (h *GetConfigMapDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetConfigMapRequest) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*config_map.Name)(nil)
}

func (h *GetConfigMapDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetConfigMapRequest) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetConfigMapDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetConfigMapRequest) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetConfigMapDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*config_map.ConfigMap)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*config_map.ConfigMap) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetConfigMapDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*config_map.ConfigMap)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*config_map.ConfigMap) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetConfigMapDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*config_map.ConfigMap)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*config_map.ConfigMap) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetConfigMapDescriptor() *GetConfigMapDescriptor {
	return getConfigMapDescriptor
}

type BatchGetConfigMapsDescriptor struct{}

type BatchGetConfigMapsDescriptorClientMsgHandle struct{}

type BatchGetConfigMapsDescriptorServerMsgHandle struct{}

func (d *BatchGetConfigMapsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetConfigMapsRequest{}
}

func (d *BatchGetConfigMapsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetConfigMapsResponse{}
}

func (d *BatchGetConfigMapsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetConfigMapsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetConfigMapsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetConfigMapsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetConfigMapsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetConfigMapsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetConfigMapsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetConfigMapsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetConfigMapsDescriptor) GetMethodName() string {
	return "BatchGetConfigMaps"
}

func (d *BatchGetConfigMapsDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.ConfigMapService/BatchGetConfigMaps"
}

func (d *BatchGetConfigMapsDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *BatchGetConfigMapsDescriptor) GetApiName() string {
	return "ConfigMapService"
}

func (d *BatchGetConfigMapsDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *BatchGetConfigMapsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetConfigMapsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return configMapServiceDescriptor
}

func (d *BatchGetConfigMapsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return config_map.GetDescriptor()
}

func (d *BatchGetConfigMapsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetConfigMapsDescriptorClientMsgHandle{}
}

func (d *BatchGetConfigMapsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetConfigMapsDescriptorServerMsgHandle{}
}

func (h *BatchGetConfigMapsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConfigMapsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetConfigMapsRequest) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetConfigMapsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetConfigMapsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetConfigMapsRequest) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(config_map.ConfigMapNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (config_map.ConfigMapNameList)(nil)
}

func (h *BatchGetConfigMapsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConfigMapsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetConfigMapsRequest) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetConfigMapsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConfigMapsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetConfigMapsResponse) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetConfigMapsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetConfigMapsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetConfigMapsResponse) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetConfigMaps()
	list := make(config_map.ConfigMapNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetConfigMapsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetConfigMapsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetConfigMapsResponse) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetConfigMapsDescriptor() *BatchGetConfigMapsDescriptor {
	return batchGetConfigMapsDescriptor
}

type ListConfigMapsDescriptor struct{}

type ListConfigMapsDescriptorClientMsgHandle struct{}

type ListConfigMapsDescriptorServerMsgHandle struct{}

func (d *ListConfigMapsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListConfigMapsRequest{}
}

func (d *ListConfigMapsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListConfigMapsResponse{}
}

func (d *ListConfigMapsDescriptor) IsUnary() bool {
	return true
}

func (d *ListConfigMapsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListConfigMapsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListConfigMapsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListConfigMapsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListConfigMapsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListConfigMapsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListConfigMapsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListConfigMapsDescriptor) GetMethodName() string {
	return "ListConfigMaps"
}

func (d *ListConfigMapsDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.ConfigMapService/ListConfigMaps"
}

func (d *ListConfigMapsDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *ListConfigMapsDescriptor) GetApiName() string {
	return "ConfigMapService"
}

func (d *ListConfigMapsDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *ListConfigMapsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListConfigMapsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return configMapServiceDescriptor
}

func (d *ListConfigMapsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return config_map.GetDescriptor()
}

func (d *ListConfigMapsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListConfigMapsDescriptorClientMsgHandle{}
}

func (d *ListConfigMapsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListConfigMapsDescriptorServerMsgHandle{}
}

func (h *ListConfigMapsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConfigMapsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListConfigMapsRequest) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListConfigMapsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListConfigMapsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListConfigMapsRequest) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListConfigMapsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConfigMapsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListConfigMapsRequest) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListConfigMapsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConfigMapsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListConfigMapsResponse) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListConfigMapsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListConfigMapsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListConfigMapsResponse) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetConfigMaps()
	list := make(config_map.ConfigMapNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListConfigMapsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListConfigMapsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListConfigMapsResponse) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListConfigMapsDescriptor() *ListConfigMapsDescriptor {
	return listConfigMapsDescriptor
}

type WatchConfigMapDescriptor struct{}

type WatchConfigMapDescriptorClientMsgHandle struct{}

type WatchConfigMapDescriptorServerMsgHandle struct{}

func (d *WatchConfigMapDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchConfigMapRequest{}
}

func (d *WatchConfigMapDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchConfigMapResponse{}
}

func (d *WatchConfigMapDescriptor) IsUnary() bool {
	return false
}

func (d *WatchConfigMapDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchConfigMapDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchConfigMapDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchConfigMapDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchConfigMapDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchConfigMapDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchConfigMapDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchConfigMapDescriptor) GetMethodName() string {
	return "WatchConfigMap"
}

func (d *WatchConfigMapDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.ConfigMapService/WatchConfigMap"
}

func (d *WatchConfigMapDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *WatchConfigMapDescriptor) GetApiName() string {
	return "ConfigMapService"
}

func (d *WatchConfigMapDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *WatchConfigMapDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchConfigMapDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return configMapServiceDescriptor
}

func (d *WatchConfigMapDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return config_map.GetDescriptor()
}

func (d *WatchConfigMapDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConfigMapDescriptorClientMsgHandle{}
}

func (d *WatchConfigMapDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConfigMapDescriptorServerMsgHandle{}
}

func (h *WatchConfigMapDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchConfigMapRequest) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*config_map.Name)(nil)
}

func (h *WatchConfigMapDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchConfigMapRequest) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchConfigMapDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchConfigMapRequest) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchConfigMapDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConfigMapResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchConfigMapResponse) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *config_map.ConfigMapChange_Added_:
			return tResChange.Added.GetConfigMap().GetName()
		case *config_map.ConfigMapChange_Modified_:
			return tResChange.Modified.GetName()
		case *config_map.ConfigMapChange_Removed_:
			return tResChange.Removed.GetName()
		case *config_map.ConfigMapChange_Current_:
			return tResChange.Current.GetConfigMap().GetName()
		}
	}
	return (*config_map.Name)(nil)
}

func (h *WatchConfigMapDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConfigMapResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchConfigMapResponse) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchConfigMapDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConfigMapResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchConfigMapResponse) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchConfigMapDescriptor() *WatchConfigMapDescriptor {
	return watchConfigMapDescriptor
}

type WatchConfigMapsDescriptor struct{}

type WatchConfigMapsDescriptorClientMsgHandle struct{}

type WatchConfigMapsDescriptorServerMsgHandle struct{}

func (d *WatchConfigMapsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchConfigMapsRequest{}
}

func (d *WatchConfigMapsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchConfigMapsResponse{}
}

func (d *WatchConfigMapsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchConfigMapsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchConfigMapsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchConfigMapsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchConfigMapsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchConfigMapsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchConfigMapsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchConfigMapsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchConfigMapsDescriptor) GetMethodName() string {
	return "WatchConfigMaps"
}

func (d *WatchConfigMapsDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.ConfigMapService/WatchConfigMaps"
}

func (d *WatchConfigMapsDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *WatchConfigMapsDescriptor) GetApiName() string {
	return "ConfigMapService"
}

func (d *WatchConfigMapsDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *WatchConfigMapsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchConfigMapsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return configMapServiceDescriptor
}

func (d *WatchConfigMapsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return config_map.GetDescriptor()
}

func (d *WatchConfigMapsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConfigMapsDescriptorClientMsgHandle{}
}

func (d *WatchConfigMapsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchConfigMapsDescriptorServerMsgHandle{}
}

func (h *WatchConfigMapsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConfigMapsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchConfigMapsRequest) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchConfigMapsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConfigMapsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchConfigMapsRequest) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchConfigMapsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConfigMapsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchConfigMapsRequest) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*config_map.ParentName)(nil)
}

func (h *WatchConfigMapsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConfigMapsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchConfigMapsResponse) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchConfigMapsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchConfigMapsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchConfigMapsResponse) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetConfigMapChanges()
	list := make(config_map.ConfigMapNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *config_map.ConfigMapChange_Added_:
			list = append(list, tResChange.Added.GetConfigMap().GetName())
		case *config_map.ConfigMapChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *config_map.ConfigMapChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *config_map.ConfigMapChange_Current_:
			list = append(list, tResChange.Current.GetConfigMap().GetName())
		}
	}
	return list
}

func (h *WatchConfigMapsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchConfigMapsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchConfigMapsResponse) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchConfigMapsDescriptor() *WatchConfigMapsDescriptor {
	return watchConfigMapsDescriptor
}

type CreateConfigMapDescriptor struct{}

type CreateConfigMapDescriptorClientMsgHandle struct{}

type CreateConfigMapDescriptorServerMsgHandle struct{}

func (d *CreateConfigMapDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateConfigMapRequest{}
}

func (d *CreateConfigMapDescriptor) NewEmptyServerMsg() proto.Message {
	return &config_map.ConfigMap{}
}

func (d *CreateConfigMapDescriptor) IsUnary() bool {
	return true
}

func (d *CreateConfigMapDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateConfigMapDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateConfigMapDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateConfigMapDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateConfigMapDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateConfigMapDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateConfigMapDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateConfigMapDescriptor) GetMethodName() string {
	return "CreateConfigMap"
}

func (d *CreateConfigMapDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.ConfigMapService/CreateConfigMap"
}

func (d *CreateConfigMapDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *CreateConfigMapDescriptor) GetApiName() string {
	return "ConfigMapService"
}

func (d *CreateConfigMapDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *CreateConfigMapDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateConfigMapDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return configMapServiceDescriptor
}

func (d *CreateConfigMapDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return config_map.GetDescriptor()
}

func (d *CreateConfigMapDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateConfigMapDescriptorClientMsgHandle{}
}

func (d *CreateConfigMapDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateConfigMapDescriptorServerMsgHandle{}
}

func (h *CreateConfigMapDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateConfigMapRequest) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetConfigMap().GetName()
}

func (h *CreateConfigMapDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateConfigMapRequest) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateConfigMapDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateConfigMapRequest) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*config_map.ParentName)(nil)
}

func (h *CreateConfigMapDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*config_map.ConfigMap)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*config_map.ConfigMap) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateConfigMapDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*config_map.ConfigMap)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*config_map.ConfigMap) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateConfigMapDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*config_map.ConfigMap)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*config_map.ConfigMap) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateConfigMapDescriptor() *CreateConfigMapDescriptor {
	return createConfigMapDescriptor
}

type UpdateConfigMapDescriptor struct{}

type UpdateConfigMapDescriptorClientMsgHandle struct{}

type UpdateConfigMapDescriptorServerMsgHandle struct{}

func (d *UpdateConfigMapDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateConfigMapRequest{}
}

func (d *UpdateConfigMapDescriptor) NewEmptyServerMsg() proto.Message {
	return &config_map.ConfigMap{}
}

func (d *UpdateConfigMapDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateConfigMapDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateConfigMapDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateConfigMapDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateConfigMapDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateConfigMapDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateConfigMapDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateConfigMapDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateConfigMapDescriptor) GetMethodName() string {
	return "UpdateConfigMap"
}

func (d *UpdateConfigMapDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.ConfigMapService/UpdateConfigMap"
}

func (d *UpdateConfigMapDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *UpdateConfigMapDescriptor) GetApiName() string {
	return "ConfigMapService"
}

func (d *UpdateConfigMapDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *UpdateConfigMapDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateConfigMapDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return configMapServiceDescriptor
}

func (d *UpdateConfigMapDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return config_map.GetDescriptor()
}

func (d *UpdateConfigMapDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateConfigMapDescriptorClientMsgHandle{}
}

func (d *UpdateConfigMapDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateConfigMapDescriptorServerMsgHandle{}
}

func (h *UpdateConfigMapDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateConfigMapRequest) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetConfigMap().GetName()
}

func (h *UpdateConfigMapDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateConfigMapRequest) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateConfigMapDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateConfigMapRequest) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateConfigMapDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*config_map.ConfigMap)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*config_map.ConfigMap) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateConfigMapDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*config_map.ConfigMap)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*config_map.ConfigMap) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateConfigMapDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*config_map.ConfigMap)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*config_map.ConfigMap) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateConfigMapDescriptor() *UpdateConfigMapDescriptor {
	return updateConfigMapDescriptor
}

type DeleteConfigMapDescriptor struct{}

type DeleteConfigMapDescriptorClientMsgHandle struct{}

type DeleteConfigMapDescriptorServerMsgHandle struct{}

func (d *DeleteConfigMapDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteConfigMapRequest{}
}

func (d *DeleteConfigMapDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteConfigMapDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteConfigMapDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteConfigMapDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteConfigMapDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteConfigMapDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteConfigMapDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteConfigMapDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteConfigMapDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteConfigMapDescriptor) GetMethodName() string {
	return "DeleteConfigMap"
}

func (d *DeleteConfigMapDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.ConfigMapService/DeleteConfigMap"
}

func (d *DeleteConfigMapDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *DeleteConfigMapDescriptor) GetApiName() string {
	return "ConfigMapService"
}

func (d *DeleteConfigMapDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *DeleteConfigMapDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteConfigMapDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return configMapServiceDescriptor
}

func (d *DeleteConfigMapDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return config_map.GetDescriptor()
}

func (d *DeleteConfigMapDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteConfigMapDescriptorClientMsgHandle{}
}

func (d *DeleteConfigMapDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteConfigMapDescriptorServerMsgHandle{}
}

func (h *DeleteConfigMapDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteConfigMapRequest) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*config_map.Name)(nil)
}

func (h *DeleteConfigMapDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteConfigMapRequest) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteConfigMapDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteConfigMapRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteConfigMapRequest) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteConfigMapDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *config_map.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteConfigMapDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*config_map.Name
	})
	if ok {
		return config_map.ConfigMapNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteConfigMapDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *config_map.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteConfigMapDescriptor() *DeleteConfigMapDescriptor {
	return deleteConfigMapDescriptor
}

type ConfigMapServiceDescriptor struct{}

func (d *ConfigMapServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getConfigMapDescriptor,
		batchGetConfigMapsDescriptor,
		listConfigMapsDescriptor,
		watchConfigMapDescriptor,
		watchConfigMapsDescriptor,
		createConfigMapDescriptor,
		updateConfigMapDescriptor,
		deleteConfigMapDescriptor,
	}
}

func (d *ConfigMapServiceDescriptor) GetFullAPIName() string {
	return "/ntt.applications.v1alpha2.ConfigMapService"
}

func (d *ConfigMapServiceDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *ConfigMapServiceDescriptor) GetApiName() string {
	return "ConfigMapService"
}

func (d *ConfigMapServiceDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *ConfigMapServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetConfigMapServiceDescriptor() *ConfigMapServiceDescriptor {
	return configMapServiceDescriptor
}

func initDescriptors() {
	configMapServiceDescriptor = &ConfigMapServiceDescriptor{}
	getConfigMapDescriptor = &GetConfigMapDescriptor{}
	batchGetConfigMapsDescriptor = &BatchGetConfigMapsDescriptor{}
	listConfigMapsDescriptor = &ListConfigMapsDescriptor{}
	watchConfigMapDescriptor = &WatchConfigMapDescriptor{}
	watchConfigMapsDescriptor = &WatchConfigMapsDescriptor{}
	createConfigMapDescriptor = &CreateConfigMapDescriptor{}
	updateConfigMapDescriptor = &UpdateConfigMapDescriptor{}
	deleteConfigMapDescriptor = &DeleteConfigMapDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(configMapServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getConfigMapDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetConfigMapsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listConfigMapsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchConfigMapDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchConfigMapsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createConfigMapDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateConfigMapDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteConfigMapDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
