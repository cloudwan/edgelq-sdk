// Code generated by protoc-gen-goten-object
// File: edgelq/applications/proto/v1alpha2/distribution_service.proto
// DO NOT EDIT!!!

package distribution_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	distribution "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/distribution"
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &distribution.Distribution{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetDistributionRequest) GotenObjectExt() {}

func (o *GetDistributionRequest) MakeFullFieldMask() *GetDistributionRequest_FieldMask {
	return FullGetDistributionRequest_FieldMask()
}

func (o *GetDistributionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetDistributionRequest_FieldMask()
}

func (o *GetDistributionRequest) MakeDiffFieldMask(other *GetDistributionRequest) *GetDistributionRequest_FieldMask {
	if o == nil && other == nil {
		return &GetDistributionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetDistributionRequest_FieldMask()
	}

	res := &GetDistributionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetDistributionRequest_FieldTerminalPath{selector: GetDistributionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetDistributionRequest_FieldTerminalPath{selector: GetDistributionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetDistributionRequest_FieldTerminalPath{selector: GetDistributionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetDistributionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetDistributionRequest))
}

func (o *GetDistributionRequest) Clone() *GetDistributionRequest {
	if o == nil {
		return nil
	}
	result := &GetDistributionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &distribution.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*distribution.Distribution_FieldMask)
	result.View = o.View
	return result
}

func (o *GetDistributionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetDistributionRequest) Merge(source *GetDistributionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &distribution.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(distribution.Distribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetDistributionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetDistributionRequest))
}

func (o *BatchGetDistributionsRequest) GotenObjectExt() {}

func (o *BatchGetDistributionsRequest) MakeFullFieldMask() *BatchGetDistributionsRequest_FieldMask {
	return FullBatchGetDistributionsRequest_FieldMask()
}

func (o *BatchGetDistributionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetDistributionsRequest_FieldMask()
}

func (o *BatchGetDistributionsRequest) MakeDiffFieldMask(other *BatchGetDistributionsRequest) *BatchGetDistributionsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetDistributionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetDistributionsRequest_FieldMask()
	}

	res := &BatchGetDistributionsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetDistributionsRequest_FieldTerminalPath{selector: BatchGetDistributionsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDistributionsRequest_FieldTerminalPath{selector: BatchGetDistributionsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetDistributionsRequest_FieldTerminalPath{selector: BatchGetDistributionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetDistributionsRequest_FieldTerminalPath{selector: BatchGetDistributionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetDistributionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetDistributionsRequest))
}

func (o *BatchGetDistributionsRequest) Clone() *BatchGetDistributionsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetDistributionsRequest{}
	result.Names = make([]*distribution.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &distribution.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*distribution.Distribution_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetDistributionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetDistributionsRequest) Merge(source *BatchGetDistributionsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *distribution.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &distribution.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(distribution.Distribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetDistributionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetDistributionsRequest))
}

func (o *BatchGetDistributionsResponse) GotenObjectExt() {}

func (o *BatchGetDistributionsResponse) MakeFullFieldMask() *BatchGetDistributionsResponse_FieldMask {
	return FullBatchGetDistributionsResponse_FieldMask()
}

func (o *BatchGetDistributionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetDistributionsResponse_FieldMask()
}

func (o *BatchGetDistributionsResponse) MakeDiffFieldMask(other *BatchGetDistributionsResponse) *BatchGetDistributionsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetDistributionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetDistributionsResponse_FieldMask()
	}

	res := &BatchGetDistributionsResponse_FieldMask{}

	if len(o.GetDistributions()) == len(other.GetDistributions()) {
		for i, lValue := range o.GetDistributions() {
			rValue := other.GetDistributions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetDistributionsResponse_FieldTerminalPath{selector: BatchGetDistributionsResponse_FieldPathSelectorDistributions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDistributionsResponse_FieldTerminalPath{selector: BatchGetDistributionsResponse_FieldPathSelectorDistributions})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetDistributionsResponse_FieldTerminalPath{selector: BatchGetDistributionsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetDistributionsResponse_FieldTerminalPath{selector: BatchGetDistributionsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetDistributionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetDistributionsResponse))
}

func (o *BatchGetDistributionsResponse) Clone() *BatchGetDistributionsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetDistributionsResponse{}
	result.Distributions = make([]*distribution.Distribution, len(o.Distributions))
	for i, sourceValue := range o.Distributions {
		result.Distributions[i] = sourceValue.Clone()
	}
	result.Missing = make([]*distribution.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &distribution.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetDistributionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetDistributionsResponse) Merge(source *BatchGetDistributionsResponse) {
	for _, sourceValue := range source.GetDistributions() {
		exists := false
		for _, currentValue := range o.Distributions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *distribution.Distribution
			if sourceValue != nil {
				newDstElement = new(distribution.Distribution)
				newDstElement.Merge(sourceValue)
			}
			o.Distributions = append(o.Distributions, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *distribution.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &distribution.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetDistributionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetDistributionsResponse))
}

func (o *ListDistributionsRequest) GotenObjectExt() {}

func (o *ListDistributionsRequest) MakeFullFieldMask() *ListDistributionsRequest_FieldMask {
	return FullListDistributionsRequest_FieldMask()
}

func (o *ListDistributionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListDistributionsRequest_FieldMask()
}

func (o *ListDistributionsRequest) MakeDiffFieldMask(other *ListDistributionsRequest) *ListDistributionsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListDistributionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListDistributionsRequest_FieldMask()
	}

	res := &ListDistributionsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListDistributionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListDistributionsRequest))
}

func (o *ListDistributionsRequest) Clone() *ListDistributionsRequest {
	if o == nil {
		return nil
	}
	result := &ListDistributionsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &distribution.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &distribution.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &distribution.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &distribution.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*distribution.Distribution_FieldMask)
	result.View = o.View
	return result
}

func (o *ListDistributionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListDistributionsRequest) Merge(source *ListDistributionsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &distribution.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &distribution.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &distribution.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &distribution.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(distribution.Distribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListDistributionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListDistributionsRequest))
}

func (o *ListDistributionsResponse) GotenObjectExt() {}

func (o *ListDistributionsResponse) MakeFullFieldMask() *ListDistributionsResponse_FieldMask {
	return FullListDistributionsResponse_FieldMask()
}

func (o *ListDistributionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListDistributionsResponse_FieldMask()
}

func (o *ListDistributionsResponse) MakeDiffFieldMask(other *ListDistributionsResponse) *ListDistributionsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListDistributionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListDistributionsResponse_FieldMask()
	}

	res := &ListDistributionsResponse_FieldMask{}

	if len(o.GetDistributions()) == len(other.GetDistributions()) {
		for i, lValue := range o.GetDistributions() {
			rValue := other.GetDistributions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListDistributionsResponse_FieldTerminalPath{selector: ListDistributionsResponse_FieldPathSelectorDistributions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListDistributionsResponse_FieldTerminalPath{selector: ListDistributionsResponse_FieldPathSelectorDistributions})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListDistributionsResponse_FieldTerminalPath{selector: ListDistributionsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListDistributionsResponse_FieldTerminalPath{selector: ListDistributionsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListDistributionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListDistributionsResponse))
}

func (o *ListDistributionsResponse) Clone() *ListDistributionsResponse {
	if o == nil {
		return nil
	}
	result := &ListDistributionsResponse{}
	result.Distributions = make([]*distribution.Distribution, len(o.Distributions))
	for i, sourceValue := range o.Distributions {
		result.Distributions[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &distribution.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &distribution.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListDistributionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListDistributionsResponse) Merge(source *ListDistributionsResponse) {
	for _, sourceValue := range source.GetDistributions() {
		exists := false
		for _, currentValue := range o.Distributions {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *distribution.Distribution
			if sourceValue != nil {
				newDstElement = new(distribution.Distribution)
				newDstElement.Merge(sourceValue)
			}
			o.Distributions = append(o.Distributions, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &distribution.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &distribution.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListDistributionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListDistributionsResponse))
}

func (o *WatchDistributionRequest) GotenObjectExt() {}

func (o *WatchDistributionRequest) MakeFullFieldMask() *WatchDistributionRequest_FieldMask {
	return FullWatchDistributionRequest_FieldMask()
}

func (o *WatchDistributionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDistributionRequest_FieldMask()
}

func (o *WatchDistributionRequest) MakeDiffFieldMask(other *WatchDistributionRequest) *WatchDistributionRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchDistributionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDistributionRequest_FieldMask()
	}

	res := &WatchDistributionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchDistributionRequest_FieldTerminalPath{selector: WatchDistributionRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchDistributionRequest_FieldTerminalPath{selector: WatchDistributionRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchDistributionRequest_FieldTerminalPath{selector: WatchDistributionRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchDistributionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDistributionRequest))
}

func (o *WatchDistributionRequest) Clone() *WatchDistributionRequest {
	if o == nil {
		return nil
	}
	result := &WatchDistributionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &distribution.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*distribution.Distribution_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchDistributionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDistributionRequest) Merge(source *WatchDistributionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &distribution.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(distribution.Distribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchDistributionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDistributionRequest))
}

func (o *WatchDistributionResponse) GotenObjectExt() {}

func (o *WatchDistributionResponse) MakeFullFieldMask() *WatchDistributionResponse_FieldMask {
	return FullWatchDistributionResponse_FieldMask()
}

func (o *WatchDistributionResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDistributionResponse_FieldMask()
}

func (o *WatchDistributionResponse) MakeDiffFieldMask(other *WatchDistributionResponse) *WatchDistributionResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchDistributionResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDistributionResponse_FieldMask()
	}

	res := &WatchDistributionResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchDistributionResponse_FieldTerminalPath{selector: WatchDistributionResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchDistributionResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDistributionResponse))
}

func (o *WatchDistributionResponse) Clone() *WatchDistributionResponse {
	if o == nil {
		return nil
	}
	result := &WatchDistributionResponse{}
	result.Change = proto.Clone(o.Change).(*distribution.DistributionChange)
	return result
}

func (o *WatchDistributionResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDistributionResponse) Merge(source *WatchDistributionResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(distribution.DistributionChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchDistributionResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDistributionResponse))
}

func (o *WatchDistributionsRequest) GotenObjectExt() {}

func (o *WatchDistributionsRequest) MakeFullFieldMask() *WatchDistributionsRequest_FieldMask {
	return FullWatchDistributionsRequest_FieldMask()
}

func (o *WatchDistributionsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDistributionsRequest_FieldMask()
}

func (o *WatchDistributionsRequest) MakeDiffFieldMask(other *WatchDistributionsRequest) *WatchDistributionsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchDistributionsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDistributionsRequest_FieldMask()
	}

	res := &WatchDistributionsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchDistributionsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDistributionsRequest))
}

func (o *WatchDistributionsRequest) Clone() *WatchDistributionsRequest {
	if o == nil {
		return nil
	}
	result := &WatchDistributionsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &distribution.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &distribution.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &distribution.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &distribution.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*distribution.Distribution_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchDistributionsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDistributionsRequest) Merge(source *WatchDistributionsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &distribution.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &distribution.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &distribution.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &distribution.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(distribution.Distribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchDistributionsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDistributionsRequest))
}

func (o *WatchDistributionsResponse) GotenObjectExt() {}

func (o *WatchDistributionsResponse) MakeFullFieldMask() *WatchDistributionsResponse_FieldMask {
	return FullWatchDistributionsResponse_FieldMask()
}

func (o *WatchDistributionsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDistributionsResponse_FieldMask()
}

func (o *WatchDistributionsResponse) MakeDiffFieldMask(other *WatchDistributionsResponse) *WatchDistributionsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchDistributionsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDistributionsResponse_FieldMask()
	}

	res := &WatchDistributionsResponse_FieldMask{}

	if len(o.GetDistributionChanges()) == len(other.GetDistributionChanges()) {
		for i, lValue := range o.GetDistributionChanges() {
			rValue := other.GetDistributionChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorDistributionChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorDistributionChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchDistributionsResponse_FieldSubPath{selector: WatchDistributionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchDistributionsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDistributionsResponse))
}

func (o *WatchDistributionsResponse) Clone() *WatchDistributionsResponse {
	if o == nil {
		return nil
	}
	result := &WatchDistributionsResponse{}
	result.DistributionChanges = make([]*distribution.DistributionChange, len(o.DistributionChanges))
	for i, sourceValue := range o.DistributionChanges {
		result.DistributionChanges[i] = proto.Clone(sourceValue).(*distribution.DistributionChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchDistributionsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDistributionsResponse) Merge(source *WatchDistributionsResponse) {
	for _, sourceValue := range source.GetDistributionChanges() {
		exists := false
		for _, currentValue := range o.DistributionChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *distribution.DistributionChange
			if sourceValue != nil {
				newDstElement = new(distribution.DistributionChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.DistributionChanges = append(o.DistributionChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchDistributionsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchDistributionsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDistributionsResponse))
}

func (o *WatchDistributionsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchDistributionsResponse_PageTokenChange) MakeFullFieldMask() *WatchDistributionsResponse_PageTokenChange_FieldMask {
	return FullWatchDistributionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchDistributionsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchDistributionsResponse_PageTokenChange_FieldMask()
}

func (o *WatchDistributionsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchDistributionsResponse_PageTokenChange) *WatchDistributionsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchDistributionsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchDistributionsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchDistributionsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchDistributionsResponsePageTokenChange_FieldTerminalPath{selector: WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchDistributionsResponsePageTokenChange_FieldTerminalPath{selector: WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchDistributionsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchDistributionsResponse_PageTokenChange))
}

func (o *WatchDistributionsResponse_PageTokenChange) Clone() *WatchDistributionsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchDistributionsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &distribution.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &distribution.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchDistributionsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchDistributionsResponse_PageTokenChange) Merge(source *WatchDistributionsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &distribution.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &distribution.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchDistributionsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchDistributionsResponse_PageTokenChange))
}

func (o *CreateDistributionRequest) GotenObjectExt() {}

func (o *CreateDistributionRequest) MakeFullFieldMask() *CreateDistributionRequest_FieldMask {
	return FullCreateDistributionRequest_FieldMask()
}

func (o *CreateDistributionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateDistributionRequest_FieldMask()
}

func (o *CreateDistributionRequest) MakeDiffFieldMask(other *CreateDistributionRequest) *CreateDistributionRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateDistributionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateDistributionRequest_FieldMask()
	}

	res := &CreateDistributionRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateDistributionRequest_FieldTerminalPath{selector: CreateDistributionRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetDistribution().MakeDiffFieldMask(other.GetDistribution())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateDistributionRequest_FieldTerminalPath{selector: CreateDistributionRequest_FieldPathSelectorDistribution})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateDistributionRequest_FieldSubPath{selector: CreateDistributionRequest_FieldPathSelectorDistribution, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateDistributionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateDistributionRequest))
}

func (o *CreateDistributionRequest) Clone() *CreateDistributionRequest {
	if o == nil {
		return nil
	}
	result := &CreateDistributionRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &distribution.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Distribution = o.Distribution.Clone()
	return result
}

func (o *CreateDistributionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateDistributionRequest) Merge(source *CreateDistributionRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &distribution.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetDistribution() != nil {
		if o.Distribution == nil {
			o.Distribution = new(distribution.Distribution)
		}
		o.Distribution.Merge(source.GetDistribution())
	}
}

func (o *CreateDistributionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateDistributionRequest))
}

func (o *UpdateDistributionRequest) GotenObjectExt() {}

func (o *UpdateDistributionRequest) MakeFullFieldMask() *UpdateDistributionRequest_FieldMask {
	return FullUpdateDistributionRequest_FieldMask()
}

func (o *UpdateDistributionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateDistributionRequest_FieldMask()
}

func (o *UpdateDistributionRequest) MakeDiffFieldMask(other *UpdateDistributionRequest) *UpdateDistributionRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateDistributionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateDistributionRequest_FieldMask()
	}

	res := &UpdateDistributionRequest_FieldMask{}
	{
		subMask := o.GetDistribution().MakeDiffFieldMask(other.GetDistribution())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDistributionRequest_FieldTerminalPath{selector: UpdateDistributionRequest_FieldPathSelectorDistribution})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDistributionRequest_FieldSubPath{selector: UpdateDistributionRequest_FieldPathSelectorDistribution, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateDistributionRequest_FieldTerminalPath{selector: UpdateDistributionRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDistributionRequest_FieldTerminalPath{selector: UpdateDistributionRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDistributionRequest_FieldSubPath{selector: UpdateDistributionRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateDistributionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateDistributionRequest))
}

func (o *UpdateDistributionRequest) Clone() *UpdateDistributionRequest {
	if o == nil {
		return nil
	}
	result := &UpdateDistributionRequest{}
	result.Distribution = o.Distribution.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*distribution.Distribution_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateDistributionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateDistributionRequest) Merge(source *UpdateDistributionRequest) {
	if source.GetDistribution() != nil {
		if o.Distribution == nil {
			o.Distribution = new(distribution.Distribution)
		}
		o.Distribution.Merge(source.GetDistribution())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(distribution.Distribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateDistributionRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateDistributionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateDistributionRequest))
}

func (o *UpdateDistributionRequest_CAS) GotenObjectExt() {}

func (o *UpdateDistributionRequest_CAS) MakeFullFieldMask() *UpdateDistributionRequest_CAS_FieldMask {
	return FullUpdateDistributionRequest_CAS_FieldMask()
}

func (o *UpdateDistributionRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateDistributionRequest_CAS_FieldMask()
}

func (o *UpdateDistributionRequest_CAS) MakeDiffFieldMask(other *UpdateDistributionRequest_CAS) *UpdateDistributionRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateDistributionRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateDistributionRequest_CAS_FieldMask()
	}

	res := &UpdateDistributionRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateDistributionRequestCAS_FieldTerminalPath{selector: UpdateDistributionRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateDistributionRequestCAS_FieldSubPath{selector: UpdateDistributionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateDistributionRequestCAS_FieldTerminalPath{selector: UpdateDistributionRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateDistributionRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateDistributionRequest_CAS))
}

func (o *UpdateDistributionRequest_CAS) Clone() *UpdateDistributionRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateDistributionRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*distribution.Distribution_FieldMask)
	return result
}

func (o *UpdateDistributionRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateDistributionRequest_CAS) Merge(source *UpdateDistributionRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(distribution.Distribution)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(distribution.Distribution_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateDistributionRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateDistributionRequest_CAS))
}

func (o *DeleteDistributionRequest) GotenObjectExt() {}

func (o *DeleteDistributionRequest) MakeFullFieldMask() *DeleteDistributionRequest_FieldMask {
	return FullDeleteDistributionRequest_FieldMask()
}

func (o *DeleteDistributionRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteDistributionRequest_FieldMask()
}

func (o *DeleteDistributionRequest) MakeDiffFieldMask(other *DeleteDistributionRequest) *DeleteDistributionRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteDistributionRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteDistributionRequest_FieldMask()
	}

	res := &DeleteDistributionRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteDistributionRequest_FieldTerminalPath{selector: DeleteDistributionRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteDistributionRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteDistributionRequest))
}

func (o *DeleteDistributionRequest) Clone() *DeleteDistributionRequest {
	if o == nil {
		return nil
	}
	result := &DeleteDistributionRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &distribution.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteDistributionRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteDistributionRequest) Merge(source *DeleteDistributionRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &distribution.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteDistributionRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteDistributionRequest))
}
