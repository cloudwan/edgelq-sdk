// Code generated by protoc-gen-goten-client
// API: DistributionService
// DO NOT EDIT!!!

package distribution_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	distribution "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/distribution"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &distribution.Distribution{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized          bool
	distributionServiceDescriptor   *DistributionServiceDescriptor
	getDistributionDescriptor       *GetDistributionDescriptor
	batchGetDistributionsDescriptor *BatchGetDistributionsDescriptor
	listDistributionsDescriptor     *ListDistributionsDescriptor
	watchDistributionDescriptor     *WatchDistributionDescriptor
	watchDistributionsDescriptor    *WatchDistributionsDescriptor
	createDistributionDescriptor    *CreateDistributionDescriptor
	updateDistributionDescriptor    *UpdateDistributionDescriptor
	deleteDistributionDescriptor    *DeleteDistributionDescriptor
)

type GetDistributionDescriptor struct{}

type GetDistributionDescriptorClientMsgHandle struct{}

type GetDistributionDescriptorServerMsgHandle struct{}

func (d *GetDistributionDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetDistributionRequest{}
}

func (d *GetDistributionDescriptor) NewEmptyServerMsg() proto.Message {
	return &distribution.Distribution{}
}

func (d *GetDistributionDescriptor) IsUnary() bool {
	return true
}

func (d *GetDistributionDescriptor) IsClientStream() bool {
	return false
}

func (d *GetDistributionDescriptor) IsServerStream() bool {
	return false
}

func (d *GetDistributionDescriptor) IsCollection() bool {
	return false
}

func (d *GetDistributionDescriptor) IsPlural() bool {
	return false
}

func (d *GetDistributionDescriptor) HasResource() bool {
	return true
}

func (d *GetDistributionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetDistributionDescriptor) GetVerb() string {
	return "get"
}

func (d *GetDistributionDescriptor) GetMethodName() string {
	return "GetDistribution"
}

func (d *GetDistributionDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.DistributionService/GetDistribution"
}

func (d *GetDistributionDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *GetDistributionDescriptor) GetApiName() string {
	return "DistributionService"
}

func (d *GetDistributionDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *GetDistributionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetDistributionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return distributionServiceDescriptor
}

func (d *GetDistributionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return distribution.GetDescriptor()
}

func (d *GetDistributionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDistributionDescriptorClientMsgHandle{}
}

func (d *GetDistributionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDistributionDescriptorServerMsgHandle{}
}

func (h *GetDistributionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetDistributionRequest) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*distribution.Name)(nil)
}

func (h *GetDistributionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetDistributionRequest) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDistributionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetDistributionRequest) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDistributionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetDistributionRequest) *distribution.Distribution
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetDistributionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetDistributionRequest) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetDistributionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*distribution.Distribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*distribution.Distribution) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*distribution.Name)(nil)
}

func (h *GetDistributionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*distribution.Distribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*distribution.Distribution) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDistributionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*distribution.Distribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*distribution.Distribution) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDistributionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*distribution.Distribution)
}

func (h *GetDistributionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*distribution.Distribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*distribution.Distribution) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetDistributionDescriptor() *GetDistributionDescriptor {
	return getDistributionDescriptor
}

type BatchGetDistributionsDescriptor struct{}

type BatchGetDistributionsDescriptorClientMsgHandle struct{}

type BatchGetDistributionsDescriptorServerMsgHandle struct{}

func (d *BatchGetDistributionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetDistributionsRequest{}
}

func (d *BatchGetDistributionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetDistributionsResponse{}
}

func (d *BatchGetDistributionsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetDistributionsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetDistributionsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetDistributionsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetDistributionsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetDistributionsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetDistributionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetDistributionsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetDistributionsDescriptor) GetMethodName() string {
	return "BatchGetDistributions"
}

func (d *BatchGetDistributionsDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.DistributionService/BatchGetDistributions"
}

func (d *BatchGetDistributionsDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *BatchGetDistributionsDescriptor) GetApiName() string {
	return "DistributionService"
}

func (d *BatchGetDistributionsDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *BatchGetDistributionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetDistributionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return distributionServiceDescriptor
}

func (d *BatchGetDistributionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return distribution.GetDescriptor()
}

func (d *BatchGetDistributionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDistributionsDescriptorClientMsgHandle{}
}

func (d *BatchGetDistributionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDistributionsDescriptorServerMsgHandle{}
}

func (h *BatchGetDistributionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDistributionsRequest) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDistributionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDistributionsRequest) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return distribution.DistributionNameList(names)
		}
	}
	return (distribution.DistributionNameList)(nil)
}

func (h *BatchGetDistributionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDistributionsRequest) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDistributionsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetDistributionsRequest) *distribution.Distribution
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetDistributionsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetDistributionsRequest) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetDistributionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDistributionsResponse) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDistributionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDistributionsResponse) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDistributions(); len(resources) > 0 {
			list := make(distribution.DistributionNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (distribution.DistributionNameList)(nil)
}

func (h *BatchGetDistributionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDistributionsResponse) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDistributionsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetDistributionsResponse) *distribution.Distribution
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetDistributionsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetDistributionsResponse) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetDistributions(); len(resources) > 0 {
			return distribution.DistributionList(resources)
		}
	}
	return (distribution.DistributionList)(nil)
}

func GetBatchGetDistributionsDescriptor() *BatchGetDistributionsDescriptor {
	return batchGetDistributionsDescriptor
}

type ListDistributionsDescriptor struct{}

type ListDistributionsDescriptorClientMsgHandle struct{}

type ListDistributionsDescriptorServerMsgHandle struct{}

func (d *ListDistributionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListDistributionsRequest{}
}

func (d *ListDistributionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListDistributionsResponse{}
}

func (d *ListDistributionsDescriptor) IsUnary() bool {
	return true
}

func (d *ListDistributionsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListDistributionsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListDistributionsDescriptor) IsCollection() bool {
	return true
}

func (d *ListDistributionsDescriptor) IsPlural() bool {
	return true
}

func (d *ListDistributionsDescriptor) HasResource() bool {
	return true
}

func (d *ListDistributionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListDistributionsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListDistributionsDescriptor) GetMethodName() string {
	return "ListDistributions"
}

func (d *ListDistributionsDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.DistributionService/ListDistributions"
}

func (d *ListDistributionsDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *ListDistributionsDescriptor) GetApiName() string {
	return "DistributionService"
}

func (d *ListDistributionsDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *ListDistributionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListDistributionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return distributionServiceDescriptor
}

func (d *ListDistributionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return distribution.GetDescriptor()
}

func (d *ListDistributionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDistributionsDescriptorClientMsgHandle{}
}

func (d *ListDistributionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDistributionsDescriptorServerMsgHandle{}
}

func (h *ListDistributionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDistributionsRequest) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDistributionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDistributionsRequest) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListDistributionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDistributionsRequest) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*distribution.ParentName)(nil)
}

func (h *ListDistributionsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListDistributionsRequest) *distribution.Distribution
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListDistributionsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListDistributionsRequest) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListDistributionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDistributionsResponse) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDistributionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDistributionsResponse) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDistributions(); len(resources) > 0 {
			list := make(distribution.DistributionNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (distribution.DistributionNameList)(nil)
}

func (h *ListDistributionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDistributionsResponse) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListDistributionsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListDistributionsResponse) *distribution.Distribution
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListDistributionsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListDistributionsResponse) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetDistributions(); len(resources) > 0 {
			return distribution.DistributionList(resources)
		}
	}
	return (distribution.DistributionList)(nil)
}

func GetListDistributionsDescriptor() *ListDistributionsDescriptor {
	return listDistributionsDescriptor
}

type WatchDistributionDescriptor struct{}

type WatchDistributionDescriptorClientMsgHandle struct{}

type WatchDistributionDescriptorServerMsgHandle struct{}

func (d *WatchDistributionDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDistributionRequest{}
}

func (d *WatchDistributionDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDistributionResponse{}
}

func (d *WatchDistributionDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDistributionDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDistributionDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDistributionDescriptor) IsCollection() bool {
	return false
}

func (d *WatchDistributionDescriptor) IsPlural() bool {
	return false
}

func (d *WatchDistributionDescriptor) HasResource() bool {
	return true
}

func (d *WatchDistributionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDistributionDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDistributionDescriptor) GetMethodName() string {
	return "WatchDistribution"
}

func (d *WatchDistributionDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.DistributionService/WatchDistribution"
}

func (d *WatchDistributionDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *WatchDistributionDescriptor) GetApiName() string {
	return "DistributionService"
}

func (d *WatchDistributionDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *WatchDistributionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchDistributionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return distributionServiceDescriptor
}

func (d *WatchDistributionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return distribution.GetDescriptor()
}

func (d *WatchDistributionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDistributionDescriptorClientMsgHandle{}
}

func (d *WatchDistributionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDistributionDescriptorServerMsgHandle{}
}

func (h *WatchDistributionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDistributionRequest) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*distribution.Name)(nil)
}

func (h *WatchDistributionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDistributionRequest) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDistributionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDistributionRequest) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDistributionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDistributionRequest) *distribution.Distribution
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDistributionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDistributionRequest) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchDistributionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDistributionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDistributionResponse) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *distribution.DistributionChange_Added_:
				return tResChange.Added.GetDistribution().GetName()
			case *distribution.DistributionChange_Modified_:
				return tResChange.Modified.GetName()
			case *distribution.DistributionChange_Removed_:
				return tResChange.Removed.GetName()
			case *distribution.DistributionChange_Current_:
				return tResChange.Current.GetDistribution().GetName()
			}
		}
	}
	return (*distribution.Name)(nil)
}

func (h *WatchDistributionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDistributionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDistributionResponse) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDistributionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDistributionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDistributionResponse) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDistributionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDistributionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDistributionResponse) *distribution.Distribution
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *distribution.DistributionChange_Added_:
				return tResChange.Added.GetDistribution()
			case *distribution.DistributionChange_Modified_:
				return tResChange.Modified.GetDistribution()
			case *distribution.DistributionChange_Current_:
				return tResChange.Current.GetDistribution()
			}
		}
	}
	return (*distribution.Distribution)(nil)
}

func (h *WatchDistributionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDistributionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDistributionResponse) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchDistributionDescriptor() *WatchDistributionDescriptor {
	return watchDistributionDescriptor
}

type WatchDistributionsDescriptor struct{}

type WatchDistributionsDescriptorClientMsgHandle struct{}

type WatchDistributionsDescriptorServerMsgHandle struct{}

func (d *WatchDistributionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDistributionsRequest{}
}

func (d *WatchDistributionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDistributionsResponse{}
}

func (d *WatchDistributionsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDistributionsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDistributionsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDistributionsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchDistributionsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchDistributionsDescriptor) HasResource() bool {
	return true
}

func (d *WatchDistributionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDistributionsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDistributionsDescriptor) GetMethodName() string {
	return "WatchDistributions"
}

func (d *WatchDistributionsDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.DistributionService/WatchDistributions"
}

func (d *WatchDistributionsDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *WatchDistributionsDescriptor) GetApiName() string {
	return "DistributionService"
}

func (d *WatchDistributionsDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *WatchDistributionsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchDistributionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return distributionServiceDescriptor
}

func (d *WatchDistributionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return distribution.GetDescriptor()
}

func (d *WatchDistributionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDistributionsDescriptorClientMsgHandle{}
}

func (d *WatchDistributionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDistributionsDescriptorServerMsgHandle{}
}

func (h *WatchDistributionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDistributionsRequest) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDistributionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDistributionsRequest) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDistributionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDistributionsRequest) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*distribution.ParentName)(nil)
}

func (h *WatchDistributionsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDistributionsRequest) *distribution.Distribution
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDistributionsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDistributionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDistributionsRequest) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchDistributionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDistributionsResponse) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDistributionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDistributionsResponse) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDistributionChanges(); len(resChanges) > 0 {
			list := make(distribution.DistributionNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *distribution.DistributionChange_Added_:
					list = append(list, tResChange.Added.GetDistribution().GetName())
				case *distribution.DistributionChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *distribution.DistributionChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *distribution.DistributionChange_Current_:
					list = append(list, tResChange.Current.GetDistribution().GetName())
				}
			}
			return list
		}
	}
	return (distribution.DistributionNameList)(nil)
}

func (h *WatchDistributionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDistributionsResponse) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDistributionsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDistributionsResponse) *distribution.Distribution
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDistributionsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDistributionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDistributionsResponse) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDistributionChanges(); len(resChanges) > 0 {
			list := make(distribution.DistributionList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *distribution.DistributionChange_Added_:
					list = append(list, tResChange.Added.GetDistribution())
				case *distribution.DistributionChange_Modified_:
					list = append(list, tResChange.Modified.GetDistribution())
				case *distribution.DistributionChange_Current_:
					list = append(list, tResChange.Current.GetDistribution())
				}
			}
			return list
		}
	}
	return (distribution.DistributionList)(nil)
}

func GetWatchDistributionsDescriptor() *WatchDistributionsDescriptor {
	return watchDistributionsDescriptor
}

type CreateDistributionDescriptor struct{}

type CreateDistributionDescriptorClientMsgHandle struct{}

type CreateDistributionDescriptorServerMsgHandle struct{}

func (d *CreateDistributionDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateDistributionRequest{}
}

func (d *CreateDistributionDescriptor) NewEmptyServerMsg() proto.Message {
	return &distribution.Distribution{}
}

func (d *CreateDistributionDescriptor) IsUnary() bool {
	return true
}

func (d *CreateDistributionDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateDistributionDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateDistributionDescriptor) IsCollection() bool {
	return true
}

func (d *CreateDistributionDescriptor) IsPlural() bool {
	return false
}

func (d *CreateDistributionDescriptor) HasResource() bool {
	return true
}

func (d *CreateDistributionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateDistributionDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateDistributionDescriptor) GetMethodName() string {
	return "CreateDistribution"
}

func (d *CreateDistributionDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.DistributionService/CreateDistribution"
}

func (d *CreateDistributionDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *CreateDistributionDescriptor) GetApiName() string {
	return "DistributionService"
}

func (d *CreateDistributionDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *CreateDistributionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreateDistributionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return distributionServiceDescriptor
}

func (d *CreateDistributionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return distribution.GetDescriptor()
}

func (d *CreateDistributionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDistributionDescriptorClientMsgHandle{}
}

func (d *CreateDistributionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDistributionDescriptorServerMsgHandle{}
}

func (h *CreateDistributionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateDistributionRequest) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDistribution()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*distribution.Name)(nil)
}

func (h *CreateDistributionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateDistributionRequest) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDistributionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateDistributionRequest) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*distribution.ParentName)(nil)
}

func (h *CreateDistributionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateDistributionRequest) *distribution.Distribution
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetDistribution()
	}
	return (*distribution.Distribution)(nil)
}

func (h *CreateDistributionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateDistributionRequest) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateDistributionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*distribution.Distribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*distribution.Distribution) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*distribution.Name)(nil)
}

func (h *CreateDistributionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*distribution.Distribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*distribution.Distribution) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDistributionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*distribution.Distribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*distribution.Distribution) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateDistributionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*distribution.Distribution)
}

func (h *CreateDistributionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*distribution.Distribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*distribution.Distribution) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateDistributionDescriptor() *CreateDistributionDescriptor {
	return createDistributionDescriptor
}

type UpdateDistributionDescriptor struct{}

type UpdateDistributionDescriptorClientMsgHandle struct{}

type UpdateDistributionDescriptorServerMsgHandle struct{}

func (d *UpdateDistributionDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateDistributionRequest{}
}

func (d *UpdateDistributionDescriptor) NewEmptyServerMsg() proto.Message {
	return &distribution.Distribution{}
}

func (d *UpdateDistributionDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateDistributionDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateDistributionDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateDistributionDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateDistributionDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateDistributionDescriptor) HasResource() bool {
	return true
}

func (d *UpdateDistributionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateDistributionDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateDistributionDescriptor) GetMethodName() string {
	return "UpdateDistribution"
}

func (d *UpdateDistributionDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.DistributionService/UpdateDistribution"
}

func (d *UpdateDistributionDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *UpdateDistributionDescriptor) GetApiName() string {
	return "DistributionService"
}

func (d *UpdateDistributionDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *UpdateDistributionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdateDistributionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return distributionServiceDescriptor
}

func (d *UpdateDistributionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return distribution.GetDescriptor()
}

func (d *UpdateDistributionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDistributionDescriptorClientMsgHandle{}
}

func (d *UpdateDistributionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDistributionDescriptorServerMsgHandle{}
}

func (h *UpdateDistributionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateDistributionRequest) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDistribution()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*distribution.Name)(nil)
}

func (h *UpdateDistributionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateDistributionRequest) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDistributionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateDistributionRequest) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDistributionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateDistributionRequest) *distribution.Distribution
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetDistribution()
	}
	return (*distribution.Distribution)(nil)
}

func (h *UpdateDistributionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateDistributionRequest) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateDistributionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*distribution.Distribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*distribution.Distribution) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*distribution.Name)(nil)
}

func (h *UpdateDistributionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*distribution.Distribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*distribution.Distribution) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDistributionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*distribution.Distribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*distribution.Distribution) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDistributionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*distribution.Distribution)
}

func (h *UpdateDistributionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*distribution.Distribution)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*distribution.Distribution) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateDistributionDescriptor() *UpdateDistributionDescriptor {
	return updateDistributionDescriptor
}

type DeleteDistributionDescriptor struct{}

type DeleteDistributionDescriptorClientMsgHandle struct{}

type DeleteDistributionDescriptorServerMsgHandle struct{}

func (d *DeleteDistributionDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteDistributionRequest{}
}

func (d *DeleteDistributionDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteDistributionDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteDistributionDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteDistributionDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteDistributionDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteDistributionDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteDistributionDescriptor) HasResource() bool {
	return true
}

func (d *DeleteDistributionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteDistributionDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteDistributionDescriptor) GetMethodName() string {
	return "DeleteDistribution"
}

func (d *DeleteDistributionDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.DistributionService/DeleteDistribution"
}

func (d *DeleteDistributionDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *DeleteDistributionDescriptor) GetApiName() string {
	return "DistributionService"
}

func (d *DeleteDistributionDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *DeleteDistributionDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeleteDistributionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return distributionServiceDescriptor
}

func (d *DeleteDistributionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return distribution.GetDescriptor()
}

func (d *DeleteDistributionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDistributionDescriptorClientMsgHandle{}
}

func (d *DeleteDistributionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDistributionDescriptorServerMsgHandle{}
}

func (h *DeleteDistributionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteDistributionRequest) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*distribution.Name)(nil)
}

func (h *DeleteDistributionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteDistributionRequest) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDistributionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteDistributionRequest) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteDistributionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteDistributionRequest) *distribution.Distribution
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteDistributionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteDistributionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteDistributionRequest) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteDistributionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *distribution.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteDistributionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*distribution.Name
	})
	if ok {
		return distribution.DistributionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDistributionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *distribution.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteDistributionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *distribution.Distribution
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteDistributionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*distribution.Distribution
	})
	if ok {
		return distribution.DistributionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteDistributionDescriptor() *DeleteDistributionDescriptor {
	return deleteDistributionDescriptor
}

type DistributionServiceDescriptor struct{}

func (d *DistributionServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getDistributionDescriptor,
		batchGetDistributionsDescriptor,
		listDistributionsDescriptor,
		watchDistributionDescriptor,
		watchDistributionsDescriptor,
		createDistributionDescriptor,
		updateDistributionDescriptor,
		deleteDistributionDescriptor,
	}
}

func (d *DistributionServiceDescriptor) GetFullAPIName() string {
	return "/ntt.applications.v1alpha2.DistributionService"
}

func (d *DistributionServiceDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *DistributionServiceDescriptor) GetApiName() string {
	return "DistributionService"
}

func (d *DistributionServiceDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *DistributionServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetDistributionServiceDescriptor() *DistributionServiceDescriptor {
	return distributionServiceDescriptor
}

func initDescriptors() {
	distributionServiceDescriptor = &DistributionServiceDescriptor{}
	getDistributionDescriptor = &GetDistributionDescriptor{}
	batchGetDistributionsDescriptor = &BatchGetDistributionsDescriptor{}
	listDistributionsDescriptor = &ListDistributionsDescriptor{}
	watchDistributionDescriptor = &WatchDistributionDescriptor{}
	watchDistributionsDescriptor = &WatchDistributionsDescriptor{}
	createDistributionDescriptor = &CreateDistributionDescriptor{}
	updateDistributionDescriptor = &UpdateDistributionDescriptor{}
	deleteDistributionDescriptor = &DeleteDistributionDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(distributionServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getDistributionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetDistributionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listDistributionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDistributionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDistributionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createDistributionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateDistributionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteDistributionDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
