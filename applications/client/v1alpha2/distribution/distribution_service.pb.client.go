// Code generated by protoc-gen-goten-client
// API: DistributionService
// DO NOT EDIT!!!

package distribution_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	distribution "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/distribution"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &distribution.Distribution{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DistributionServiceClient is the client API for DistributionService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DistributionServiceClient interface {
	GetDistribution(ctx context.Context, in *GetDistributionRequest, opts ...grpc.CallOption) (*distribution.Distribution, error)
	BatchGetDistributions(ctx context.Context, in *BatchGetDistributionsRequest, opts ...grpc.CallOption) (*BatchGetDistributionsResponse, error)
	ListDistributions(ctx context.Context, in *ListDistributionsRequest, opts ...grpc.CallOption) (*ListDistributionsResponse, error)
	WatchDistribution(ctx context.Context, in *WatchDistributionRequest, opts ...grpc.CallOption) (WatchDistributionClientStream, error)
	WatchDistributions(ctx context.Context, in *WatchDistributionsRequest, opts ...grpc.CallOption) (WatchDistributionsClientStream, error)
	CreateDistribution(ctx context.Context, in *CreateDistributionRequest, opts ...grpc.CallOption) (*distribution.Distribution, error)
	UpdateDistribution(ctx context.Context, in *UpdateDistributionRequest, opts ...grpc.CallOption) (*distribution.Distribution, error)
	DeleteDistribution(ctx context.Context, in *DeleteDistributionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewDistributionServiceClient(cc grpc.ClientConnInterface) DistributionServiceClient {
	return &client{cc}
}

func (c *client) GetDistribution(ctx context.Context, in *GetDistributionRequest, opts ...grpc.CallOption) (*distribution.Distribution, error) {
	out := new(distribution.Distribution)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1alpha2.DistributionService/GetDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetDistributions(ctx context.Context, in *BatchGetDistributionsRequest, opts ...grpc.CallOption) (*BatchGetDistributionsResponse, error) {
	out := new(BatchGetDistributionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1alpha2.DistributionService/BatchGetDistributions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListDistributions(ctx context.Context, in *ListDistributionsRequest, opts ...grpc.CallOption) (*ListDistributionsResponse, error) {
	out := new(ListDistributionsResponse)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1alpha2.DistributionService/ListDistributions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchDistribution(ctx context.Context, in *WatchDistributionRequest, opts ...grpc.CallOption) (WatchDistributionClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchDistribution",
			ServerStreams: true,
		},
		"/ntt.applications.v1alpha2.DistributionService/WatchDistribution", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchDistributionWatchDistributionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchDistributionClientStream interface {
	Recv() (*WatchDistributionResponse, error)
	grpc.ClientStream
}

type watchDistributionWatchDistributionClient struct {
	grpc.ClientStream
}

func (x *watchDistributionWatchDistributionClient) Recv() (*WatchDistributionResponse, error) {
	m := new(WatchDistributionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchDistributions(ctx context.Context, in *WatchDistributionsRequest, opts ...grpc.CallOption) (WatchDistributionsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchDistributions",
			ServerStreams: true,
		},
		"/ntt.applications.v1alpha2.DistributionService/WatchDistributions", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchDistributionsWatchDistributionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchDistributionsClientStream interface {
	Recv() (*WatchDistributionsResponse, error)
	grpc.ClientStream
}

type watchDistributionsWatchDistributionsClient struct {
	grpc.ClientStream
}

func (x *watchDistributionsWatchDistributionsClient) Recv() (*WatchDistributionsResponse, error) {
	m := new(WatchDistributionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateDistribution(ctx context.Context, in *CreateDistributionRequest, opts ...grpc.CallOption) (*distribution.Distribution, error) {
	out := new(distribution.Distribution)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1alpha2.DistributionService/CreateDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateDistribution(ctx context.Context, in *UpdateDistributionRequest, opts ...grpc.CallOption) (*distribution.Distribution, error) {
	out := new(distribution.Distribution)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1alpha2.DistributionService/UpdateDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteDistribution(ctx context.Context, in *DeleteDistributionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1alpha2.DistributionService/DeleteDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
