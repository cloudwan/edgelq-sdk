// Code generated by protoc-gen-goten-client
// API: PodService
// DO NOT EDIT!!!

package pod_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	pod "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/pod"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &pod.Pod{}
	_ = &empty.Empty{}
)

var (
	descriptorsInitialized bool
	podServiceDescriptor   *PodServiceDescriptor
	getPodDescriptor       *GetPodDescriptor
	batchGetPodsDescriptor *BatchGetPodsDescriptor
	listPodsDescriptor     *ListPodsDescriptor
	watchPodDescriptor     *WatchPodDescriptor
	watchPodsDescriptor    *WatchPodsDescriptor
	createPodDescriptor    *CreatePodDescriptor
	updatePodDescriptor    *UpdatePodDescriptor
	deletePodDescriptor    *DeletePodDescriptor
)

type GetPodDescriptor struct{}

type GetPodDescriptorClientMsgHandle struct{}

type GetPodDescriptorServerMsgHandle struct{}

func (d *GetPodDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetPodRequest{}
}

func (d *GetPodDescriptor) NewEmptyServerMsg() proto.Message {
	return &pod.Pod{}
}

func (d *GetPodDescriptor) IsUnary() bool {
	return true
}

func (d *GetPodDescriptor) IsClientStream() bool {
	return false
}

func (d *GetPodDescriptor) IsServerStream() bool {
	return false
}

func (d *GetPodDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetPodDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetPodDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetPodDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetPodDescriptor) GetVerb() string {
	return "get"
}

func (d *GetPodDescriptor) GetMethodName() string {
	return "GetPod"
}

func (d *GetPodDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.PodService/GetPod"
}

func (d *GetPodDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *GetPodDescriptor) GetApiName() string {
	return "PodService"
}

func (d *GetPodDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *GetPodDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *GetPodDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *GetPodDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *GetPodDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPodDescriptorClientMsgHandle{}
}

func (d *GetPodDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPodDescriptorServerMsgHandle{}
}

func (h *GetPodDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetPodRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*pod.Name)(nil)
}

func (h *GetPodDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetPodRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPodDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetPodRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetPodDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*pod.Pod) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetPodDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*pod.Pod) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPodDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*pod.Pod) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetPodDescriptor() *GetPodDescriptor {
	return getPodDescriptor
}

type BatchGetPodsDescriptor struct{}

type BatchGetPodsDescriptorClientMsgHandle struct{}

type BatchGetPodsDescriptorServerMsgHandle struct{}

func (d *BatchGetPodsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetPodsRequest{}
}

func (d *BatchGetPodsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetPodsResponse{}
}

func (d *BatchGetPodsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetPodsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetPodsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetPodsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetPodsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetPodsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetPodsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetPodsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetPodsDescriptor) GetMethodName() string {
	return "BatchGetPods"
}

func (d *BatchGetPodsDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.PodService/BatchGetPods"
}

func (d *BatchGetPodsDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *BatchGetPodsDescriptor) GetApiName() string {
	return "PodService"
}

func (d *BatchGetPodsDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *BatchGetPodsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *BatchGetPodsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *BatchGetPodsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *BatchGetPodsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPodsDescriptorClientMsgHandle{}
}

func (d *BatchGetPodsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPodsDescriptorServerMsgHandle{}
}

func (h *BatchGetPodsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetPodsRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPodsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetPodsRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(pod.PodNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (pod.PodNameList)(nil)
}

func (h *BatchGetPodsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetPodsRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetPodsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetPodsResponse) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPodsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetPodsResponse) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetPods()
	list := make(pod.PodNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetPodsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetPodsResponse) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetPodsDescriptor() *BatchGetPodsDescriptor {
	return batchGetPodsDescriptor
}

type ListPodsDescriptor struct{}

type ListPodsDescriptorClientMsgHandle struct{}

type ListPodsDescriptorServerMsgHandle struct{}

func (d *ListPodsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListPodsRequest{}
}

func (d *ListPodsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListPodsResponse{}
}

func (d *ListPodsDescriptor) IsUnary() bool {
	return true
}

func (d *ListPodsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListPodsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListPodsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListPodsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListPodsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListPodsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListPodsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListPodsDescriptor) GetMethodName() string {
	return "ListPods"
}

func (d *ListPodsDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.PodService/ListPods"
}

func (d *ListPodsDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *ListPodsDescriptor) GetApiName() string {
	return "PodService"
}

func (d *ListPodsDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *ListPodsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *ListPodsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *ListPodsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *ListPodsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPodsDescriptorClientMsgHandle{}
}

func (d *ListPodsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPodsDescriptorServerMsgHandle{}
}

func (h *ListPodsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListPodsRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListPodsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListPodsRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListPodsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListPodsRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListPodsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListPodsResponse) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListPodsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListPodsResponse) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetPods()
	list := make(pod.PodNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListPodsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListPodsResponse) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListPodsDescriptor() *ListPodsDescriptor {
	return listPodsDescriptor
}

type WatchPodDescriptor struct{}

type WatchPodDescriptorClientMsgHandle struct{}

type WatchPodDescriptorServerMsgHandle struct{}

func (d *WatchPodDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPodRequest{}
}

func (d *WatchPodDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPodResponse{}
}

func (d *WatchPodDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPodDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPodDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPodDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchPodDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchPodDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchPodDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPodDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPodDescriptor) GetMethodName() string {
	return "WatchPod"
}

func (d *WatchPodDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.PodService/WatchPod"
}

func (d *WatchPodDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *WatchPodDescriptor) GetApiName() string {
	return "PodService"
}

func (d *WatchPodDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *WatchPodDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchPodDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *WatchPodDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *WatchPodDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPodDescriptorClientMsgHandle{}
}

func (d *WatchPodDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPodDescriptorServerMsgHandle{}
}

func (h *WatchPodDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchPodRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*pod.Name)(nil)
}

func (h *WatchPodDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchPodRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPodDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchPodRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPodDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchPodResponse) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *pod.PodChange_Added_:
			return tResChange.Added.GetPod().GetName()
		case *pod.PodChange_Modified_:
			return tResChange.Modified.GetName()
		case *pod.PodChange_Removed_:
			return tResChange.Removed.GetName()
		case *pod.PodChange_Current_:
			return tResChange.Current.GetPod().GetName()
		}
	}
	return (*pod.Name)(nil)
}

func (h *WatchPodDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPodResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchPodResponse) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPodDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchPodResponse) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchPodDescriptor() *WatchPodDescriptor {
	return watchPodDescriptor
}

type WatchPodsDescriptor struct{}

type WatchPodsDescriptorClientMsgHandle struct{}

type WatchPodsDescriptorServerMsgHandle struct{}

func (d *WatchPodsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPodsRequest{}
}

func (d *WatchPodsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPodsResponse{}
}

func (d *WatchPodsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPodsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPodsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPodsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchPodsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchPodsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchPodsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPodsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPodsDescriptor) GetMethodName() string {
	return "WatchPods"
}

func (d *WatchPodsDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.PodService/WatchPods"
}

func (d *WatchPodsDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *WatchPodsDescriptor) GetApiName() string {
	return "PodService"
}

func (d *WatchPodsDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *WatchPodsDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *WatchPodsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *WatchPodsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *WatchPodsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPodsDescriptorClientMsgHandle{}
}

func (d *WatchPodsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPodsDescriptorServerMsgHandle{}
}

func (h *WatchPodsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchPodsRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPodsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchPodsRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPodsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchPodsRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*pod.ParentName)(nil)
}

func (h *WatchPodsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchPodsResponse) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPodsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchPodsResponse) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetPodChanges()
	list := make(pod.PodNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *pod.PodChange_Added_:
			list = append(list, tResChange.Added.GetPod().GetName())
		case *pod.PodChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *pod.PodChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *pod.PodChange_Current_:
			list = append(list, tResChange.Current.GetPod().GetName())
		}
	}
	return list
}

func (h *WatchPodsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchPodsResponse) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchPodsDescriptor() *WatchPodsDescriptor {
	return watchPodsDescriptor
}

type CreatePodDescriptor struct{}

type CreatePodDescriptorClientMsgHandle struct{}

type CreatePodDescriptorServerMsgHandle struct{}

func (d *CreatePodDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreatePodRequest{}
}

func (d *CreatePodDescriptor) NewEmptyServerMsg() proto.Message {
	return &pod.Pod{}
}

func (d *CreatePodDescriptor) IsUnary() bool {
	return true
}

func (d *CreatePodDescriptor) IsClientStream() bool {
	return false
}

func (d *CreatePodDescriptor) IsServerStream() bool {
	return false
}

func (d *CreatePodDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreatePodDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreatePodDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreatePodDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreatePodDescriptor) GetVerb() string {
	return "create"
}

func (d *CreatePodDescriptor) GetMethodName() string {
	return "CreatePod"
}

func (d *CreatePodDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.PodService/CreatePod"
}

func (d *CreatePodDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *CreatePodDescriptor) GetApiName() string {
	return "PodService"
}

func (d *CreatePodDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *CreatePodDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *CreatePodDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *CreatePodDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *CreatePodDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePodDescriptorClientMsgHandle{}
}

func (d *CreatePodDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePodDescriptorServerMsgHandle{}
}

func (h *CreatePodDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreatePodRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetPod().GetName()
}

func (h *CreatePodDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreatePodRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePodDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreatePodRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*pod.ParentName)(nil)
}

func (h *CreatePodDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*pod.Pod) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreatePodDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*pod.Pod) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePodDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*pod.Pod) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreatePodDescriptor() *CreatePodDescriptor {
	return createPodDescriptor
}

type UpdatePodDescriptor struct{}

type UpdatePodDescriptorClientMsgHandle struct{}

type UpdatePodDescriptorServerMsgHandle struct{}

func (d *UpdatePodDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdatePodRequest{}
}

func (d *UpdatePodDescriptor) NewEmptyServerMsg() proto.Message {
	return &pod.Pod{}
}

func (d *UpdatePodDescriptor) IsUnary() bool {
	return true
}

func (d *UpdatePodDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdatePodDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdatePodDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdatePodDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdatePodDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdatePodDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdatePodDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdatePodDescriptor) GetMethodName() string {
	return "UpdatePod"
}

func (d *UpdatePodDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.PodService/UpdatePod"
}

func (d *UpdatePodDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *UpdatePodDescriptor) GetApiName() string {
	return "PodService"
}

func (d *UpdatePodDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *UpdatePodDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *UpdatePodDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *UpdatePodDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *UpdatePodDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePodDescriptorClientMsgHandle{}
}

func (d *UpdatePodDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePodDescriptorServerMsgHandle{}
}

func (h *UpdatePodDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdatePodRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetPod().GetName()
}

func (h *UpdatePodDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdatePodRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePodDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdatePodRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdatePodDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*pod.Pod) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdatePodDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*pod.Pod) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePodDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*pod.Pod) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdatePodDescriptor() *UpdatePodDescriptor {
	return updatePodDescriptor
}

type DeletePodDescriptor struct{}

type DeletePodDescriptorClientMsgHandle struct{}

type DeletePodDescriptorServerMsgHandle struct{}

func (d *DeletePodDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeletePodRequest{}
}

func (d *DeletePodDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeletePodDescriptor) IsUnary() bool {
	return true
}

func (d *DeletePodDescriptor) IsClientStream() bool {
	return false
}

func (d *DeletePodDescriptor) IsServerStream() bool {
	return false
}

func (d *DeletePodDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeletePodDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeletePodDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeletePodDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeletePodDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeletePodDescriptor) GetMethodName() string {
	return "DeletePod"
}

func (d *DeletePodDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1alpha2.PodService/DeletePod"
}

func (d *DeletePodDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *DeletePodDescriptor) GetApiName() string {
	return "PodService"
}

func (d *DeletePodDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *DeletePodDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func (d *DeletePodDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *DeletePodDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *DeletePodDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePodDescriptorClientMsgHandle{}
}

func (d *DeletePodDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePodDescriptorServerMsgHandle{}
}

func (h *DeletePodDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeletePodRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*pod.Name)(nil)
}

func (h *DeletePodDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeletePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeletePodRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePodDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeletePodRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeletePodDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *pod.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeletePodDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePodDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeletePodDescriptor() *DeletePodDescriptor {
	return deletePodDescriptor
}

type PodServiceDescriptor struct{}

func (d *PodServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getPodDescriptor,
		batchGetPodsDescriptor,
		listPodsDescriptor,
		watchPodDescriptor,
		watchPodsDescriptor,
		createPodDescriptor,
		updatePodDescriptor,
		deletePodDescriptor,
	}
}

func (d *PodServiceDescriptor) GetFullAPIName() string {
	return "/ntt.applications.v1alpha2.PodService"
}

func (d *PodServiceDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1alpha2"
}

func (d *PodServiceDescriptor) GetApiName() string {
	return "PodService"
}

func (d *PodServiceDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *PodServiceDescriptor) GetServiceVersion() string {
	return "v1alpha2"
}

func GetPodServiceDescriptor() *PodServiceDescriptor {
	return podServiceDescriptor
}

func initDescriptors() {
	podServiceDescriptor = &PodServiceDescriptor{}
	getPodDescriptor = &GetPodDescriptor{}
	batchGetPodsDescriptor = &BatchGetPodsDescriptor{}
	listPodsDescriptor = &ListPodsDescriptor{}
	watchPodDescriptor = &WatchPodDescriptor{}
	watchPodsDescriptor = &WatchPodsDescriptor{}
	createPodDescriptor = &CreatePodDescriptor{}
	updatePodDescriptor = &UpdatePodDescriptor{}
	deletePodDescriptor = &DeletePodDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(podServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getPodDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetPodsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listPodsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPodDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPodsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createPodDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updatePodDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deletePodDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
