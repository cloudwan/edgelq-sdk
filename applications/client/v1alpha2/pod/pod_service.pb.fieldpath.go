// Code generated by protoc-gen-goten-object
// File: edgelq/applications/proto/v1alpha2/pod_service.proto
// DO NOT EDIT!!!

package pod_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	pod "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/pod"
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &pod.Pod{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetPodRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetPodRequest_FieldPathSelector
	Get(source *GetPodRequest) []interface{}
	GetSingle(source *GetPodRequest) (interface{}, bool)
	ClearValue(item *GetPodRequest)

	// Those methods build corresponding GetPodRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetPodRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetPodRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetPodRequest_FieldPathArrayItemValue
}

type GetPodRequest_FieldPathSelector int32

const (
	GetPodRequest_FieldPathSelectorName      GetPodRequest_FieldPathSelector = 0
	GetPodRequest_FieldPathSelectorFieldMask GetPodRequest_FieldPathSelector = 1
	GetPodRequest_FieldPathSelectorView      GetPodRequest_FieldPathSelector = 2
)

func (s GetPodRequest_FieldPathSelector) String() string {
	switch s {
	case GetPodRequest_FieldPathSelectorName:
		return "name"
	case GetPodRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetPodRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetPodRequest: %d", s))
	}
}

func BuildGetPodRequest_FieldPath(fp gotenobject.RawFieldPath) (GetPodRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetPodRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetPodRequest_FieldTerminalPath{selector: GetPodRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetPodRequest_FieldTerminalPath{selector: GetPodRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetPodRequest_FieldTerminalPath{selector: GetPodRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetPodRequest", fp)
}

func ParseGetPodRequest_FieldPath(rawField string) (GetPodRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetPodRequest_FieldPath(fp)
}

func MustParseGetPodRequest_FieldPath(rawField string) GetPodRequest_FieldPath {
	fp, err := ParseGetPodRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetPodRequest_FieldTerminalPath struct {
	selector GetPodRequest_FieldPathSelector
}

var _ GetPodRequest_FieldPath = (*GetPodRequest_FieldTerminalPath)(nil)

func (fp *GetPodRequest_FieldTerminalPath) Selector() GetPodRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetPodRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetPodRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetPodRequest
func (fp *GetPodRequest_FieldTerminalPath) Get(source *GetPodRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetPodRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetPodRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetPodRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetPodRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetPodRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetPodRequest))
}

// GetSingle returns value pointed by specific field of from source GetPodRequest
func (fp *GetPodRequest_FieldTerminalPath) GetSingle(source *GetPodRequest) (interface{}, bool) {
	switch fp.selector {
	case GetPodRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetPodRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetPodRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetPodRequest: %d", fp.selector))
	}
}

func (fp *GetPodRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetPodRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetPodRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetPodRequest_FieldPathSelectorName:
		return (*pod.Reference)(nil)
	case GetPodRequest_FieldPathSelectorFieldMask:
		return (*pod.Pod_FieldMask)(nil)
	case GetPodRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetPodRequest: %d", fp.selector))
	}
}

func (fp *GetPodRequest_FieldTerminalPath) ClearValue(item *GetPodRequest) {
	if item != nil {
		switch fp.selector {
		case GetPodRequest_FieldPathSelectorName:
			item.Name = nil
		case GetPodRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetPodRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetPodRequest: %d", fp.selector))
		}
	}
}

func (fp *GetPodRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetPodRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetPodRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetPodRequest_FieldPathSelectorName ||
		fp.selector == GetPodRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetPodRequest_FieldPathSelectorView
}

func (fp *GetPodRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *GetPodRequest_FieldTerminalPath) WithIValue(value interface{}) GetPodRequest_FieldPathValue {
	switch fp.selector {
	case GetPodRequest_FieldPathSelectorName:
		return &GetPodRequest_FieldTerminalPathValue{GetPodRequest_FieldTerminalPath: *fp, value: value.(*pod.Reference)}
	case GetPodRequest_FieldPathSelectorFieldMask:
		return &GetPodRequest_FieldTerminalPathValue{GetPodRequest_FieldTerminalPath: *fp, value: value.(*pod.Pod_FieldMask)}
	case GetPodRequest_FieldPathSelectorView:
		return &GetPodRequest_FieldTerminalPathValue{GetPodRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPodRequest: %d", fp.selector))
	}
}

func (fp *GetPodRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetPodRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetPodRequest_FieldPathArrayOfValues {
	fpaov := &GetPodRequest_FieldTerminalPathArrayOfValues{GetPodRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetPodRequest_FieldPathSelectorName:
		return &GetPodRequest_FieldTerminalPathArrayOfValues{GetPodRequest_FieldTerminalPath: *fp, values: values.([]*pod.Reference)}
	case GetPodRequest_FieldPathSelectorFieldMask:
		return &GetPodRequest_FieldTerminalPathArrayOfValues{GetPodRequest_FieldTerminalPath: *fp, values: values.([]*pod.Pod_FieldMask)}
	case GetPodRequest_FieldPathSelectorView:
		return &GetPodRequest_FieldTerminalPathArrayOfValues{GetPodRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPodRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetPodRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetPodRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetPodRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetPodRequest: %d", fp.selector))
	}
}

func (fp *GetPodRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetPodRequest_FieldPathValue allows storing values for GetPodRequest fields according to their type
type GetPodRequest_FieldPathValue interface {
	GetPodRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetPodRequest)
	CompareWith(*GetPodRequest) (cmp int, comparable bool)
}

func ParseGetPodRequest_FieldPathValue(pathStr, valueStr string) (GetPodRequest_FieldPathValue, error) {
	fp, err := ParseGetPodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPodRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetPodRequest_FieldPathValue), nil
}

func MustParseGetPodRequest_FieldPathValue(pathStr, valueStr string) GetPodRequest_FieldPathValue {
	fpv, err := ParseGetPodRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetPodRequest_FieldTerminalPathValue struct {
	GetPodRequest_FieldTerminalPath
	value interface{}
}

var _ GetPodRequest_FieldPathValue = (*GetPodRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetPodRequest' as interface{}
func (fpv *GetPodRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetPodRequest_FieldTerminalPathValue) AsNameValue() (*pod.Reference, bool) {
	res, ok := fpv.value.(*pod.Reference)
	return res, ok
}
func (fpv *GetPodRequest_FieldTerminalPathValue) AsFieldMaskValue() (*pod.Pod_FieldMask, bool) {
	res, ok := fpv.value.(*pod.Pod_FieldMask)
	return res, ok
}
func (fpv *GetPodRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetPodRequest
func (fpv *GetPodRequest_FieldTerminalPathValue) SetTo(target **GetPodRequest) {
	if *target == nil {
		*target = new(GetPodRequest)
	}
	switch fpv.selector {
	case GetPodRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*pod.Reference)
	case GetPodRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*pod.Pod_FieldMask)
	case GetPodRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPodRequest: %d", fpv.selector))
	}
}

func (fpv *GetPodRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetPodRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetPodRequest_FieldTerminalPathValue' with the value under path in 'GetPodRequest'.
func (fpv *GetPodRequest_FieldTerminalPathValue) CompareWith(source *GetPodRequest) (int, bool) {
	switch fpv.selector {
	case GetPodRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*pod.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetPodRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetPodRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPodRequest: %d", fpv.selector))
	}
}

func (fpv *GetPodRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetPodRequest))
}

// GetPodRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetPodRequest according to their type
// Present only for array (repeated) types.
type GetPodRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetPodRequest_FieldPath
	ContainsValue(*GetPodRequest) bool
}

// ParseGetPodRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetPodRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetPodRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetPodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPodRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetPodRequest_FieldPathArrayItemValue), nil
}

func MustParseGetPodRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetPodRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetPodRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetPodRequest_FieldTerminalPathArrayItemValue struct {
	GetPodRequest_FieldTerminalPath
	value interface{}
}

var _ GetPodRequest_FieldPathArrayItemValue = (*GetPodRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetPodRequest as interface{}
func (fpaiv *GetPodRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetPodRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetPodRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetPodRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetPodRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetPodRequest'
func (fpaiv *GetPodRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetPodRequest) bool {
	slice := fpaiv.GetPodRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetPodRequest_FieldPathArrayOfValues allows storing slice of values for GetPodRequest fields according to their type
type GetPodRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetPodRequest_FieldPath
}

func ParseGetPodRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetPodRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetPodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPodRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetPodRequest_FieldPathArrayOfValues), nil
}

func MustParseGetPodRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetPodRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetPodRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetPodRequest_FieldTerminalPathArrayOfValues struct {
	GetPodRequest_FieldTerminalPath
	values interface{}
}

var _ GetPodRequest_FieldPathArrayOfValues = (*GetPodRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetPodRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetPodRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*pod.Reference) {
			values = append(values, v)
		}
	case GetPodRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*pod.Pod_FieldMask) {
			values = append(values, v)
		}
	case GetPodRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetPodRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*pod.Reference, bool) {
	res, ok := fpaov.values.([]*pod.Reference)
	return res, ok
}
func (fpaov *GetPodRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*pod.Pod_FieldMask, bool) {
	res, ok := fpaov.values.([]*pod.Pod_FieldMask)
	return res, ok
}
func (fpaov *GetPodRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPodsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPodsRequest_FieldPathSelector
	Get(source *BatchGetPodsRequest) []interface{}
	GetSingle(source *BatchGetPodsRequest) (interface{}, bool)
	ClearValue(item *BatchGetPodsRequest)

	// Those methods build corresponding BatchGetPodsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPodsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPodsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPodsRequest_FieldPathArrayItemValue
}

type BatchGetPodsRequest_FieldPathSelector int32

const (
	BatchGetPodsRequest_FieldPathSelectorNames     BatchGetPodsRequest_FieldPathSelector = 0
	BatchGetPodsRequest_FieldPathSelectorFieldMask BatchGetPodsRequest_FieldPathSelector = 1
	BatchGetPodsRequest_FieldPathSelectorView      BatchGetPodsRequest_FieldPathSelector = 2
)

func (s BatchGetPodsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetPodsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetPodsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetPodsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsRequest: %d", s))
	}
}

func BuildBatchGetPodsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPodsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPodsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetPodsRequest_FieldTerminalPath{selector: BatchGetPodsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetPodsRequest_FieldTerminalPath{selector: BatchGetPodsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetPodsRequest_FieldTerminalPath{selector: BatchGetPodsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPodsRequest", fp)
}

func ParseBatchGetPodsRequest_FieldPath(rawField string) (BatchGetPodsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPodsRequest_FieldPath(fp)
}

func MustParseBatchGetPodsRequest_FieldPath(rawField string) BatchGetPodsRequest_FieldPath {
	fp, err := ParseBatchGetPodsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPodsRequest_FieldTerminalPath struct {
	selector BatchGetPodsRequest_FieldPathSelector
}

var _ BatchGetPodsRequest_FieldPath = (*BatchGetPodsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetPodsRequest_FieldTerminalPath) Selector() BatchGetPodsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPodsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPodsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPodsRequest
func (fp *BatchGetPodsRequest_FieldTerminalPath) Get(source *BatchGetPodsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPodsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetPodsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetPodsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPodsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPodsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPodsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetPodsRequest
func (fp *BatchGetPodsRequest_FieldTerminalPath) GetSingle(source *BatchGetPodsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPodsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetPodsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetPodsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPodsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPodsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPodsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPodsRequest_FieldPathSelectorNames:
		return ([]*pod.Reference)(nil)
	case BatchGetPodsRequest_FieldPathSelectorFieldMask:
		return (*pod.Pod_FieldMask)(nil)
	case BatchGetPodsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPodsRequest_FieldTerminalPath) ClearValue(item *BatchGetPodsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetPodsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetPodsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetPodsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPodsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPodsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPodsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPodsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPodsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetPodsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetPodsRequest_FieldPathSelectorView
}

func (fp *BatchGetPodsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetPodsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetPodsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetPodsRequest_FieldPathSelectorNames:
		return &BatchGetPodsRequest_FieldTerminalPathValue{BatchGetPodsRequest_FieldTerminalPath: *fp, value: value.([]*pod.Reference)}
	case BatchGetPodsRequest_FieldPathSelectorFieldMask:
		return &BatchGetPodsRequest_FieldTerminalPathValue{BatchGetPodsRequest_FieldTerminalPath: *fp, value: value.(*pod.Pod_FieldMask)}
	case BatchGetPodsRequest_FieldPathSelectorView:
		return &BatchGetPodsRequest_FieldTerminalPathValue{BatchGetPodsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPodsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPodsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPodsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetPodsRequest_FieldTerminalPathArrayOfValues{BatchGetPodsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPodsRequest_FieldPathSelectorNames:
		return &BatchGetPodsRequest_FieldTerminalPathArrayOfValues{BatchGetPodsRequest_FieldTerminalPath: *fp, values: values.([][]*pod.Reference)}
	case BatchGetPodsRequest_FieldPathSelectorFieldMask:
		return &BatchGetPodsRequest_FieldTerminalPathArrayOfValues{BatchGetPodsRequest_FieldTerminalPath: *fp, values: values.([]*pod.Pod_FieldMask)}
	case BatchGetPodsRequest_FieldPathSelectorView:
		return &BatchGetPodsRequest_FieldTerminalPathArrayOfValues{BatchGetPodsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPodsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPodsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPodsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPodsRequest_FieldPathSelectorNames:
		return &BatchGetPodsRequest_FieldTerminalPathArrayItemValue{BatchGetPodsRequest_FieldTerminalPath: *fp, value: value.(*pod.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPodsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetPodsRequest_FieldPathValue allows storing values for BatchGetPodsRequest fields according to their type
type BatchGetPodsRequest_FieldPathValue interface {
	BatchGetPodsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPodsRequest)
	CompareWith(*BatchGetPodsRequest) (cmp int, comparable bool)
}

func ParseBatchGetPodsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetPodsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetPodsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPodsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPodsRequest_FieldPathValue), nil
}

func MustParseBatchGetPodsRequest_FieldPathValue(pathStr, valueStr string) BatchGetPodsRequest_FieldPathValue {
	fpv, err := ParseBatchGetPodsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPodsRequest_FieldTerminalPathValue struct {
	BatchGetPodsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPodsRequest_FieldPathValue = (*BatchGetPodsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPodsRequest' as interface{}
func (fpv *BatchGetPodsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPodsRequest_FieldTerminalPathValue) AsNamesValue() ([]*pod.Reference, bool) {
	res, ok := fpv.value.([]*pod.Reference)
	return res, ok
}
func (fpv *BatchGetPodsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*pod.Pod_FieldMask, bool) {
	res, ok := fpv.value.(*pod.Pod_FieldMask)
	return res, ok
}
func (fpv *BatchGetPodsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPodsRequest
func (fpv *BatchGetPodsRequest_FieldTerminalPathValue) SetTo(target **BatchGetPodsRequest) {
	if *target == nil {
		*target = new(BatchGetPodsRequest)
	}
	switch fpv.selector {
	case BatchGetPodsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*pod.Reference)
	case BatchGetPodsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*pod.Pod_FieldMask)
	case BatchGetPodsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPodsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPodsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPodsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetPodsRequest'.
func (fpv *BatchGetPodsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetPodsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetPodsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetPodsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetPodsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPodsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPodsRequest))
}

// BatchGetPodsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPodsRequest according to their type
// Present only for array (repeated) types.
type BatchGetPodsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPodsRequest_FieldPath
	ContainsValue(*BatchGetPodsRequest) bool
}

// ParseBatchGetPodsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPodsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPodsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPodsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPodsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPodsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPodsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPodsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPodsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPodsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetPodsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPodsRequest_FieldPathArrayItemValue = (*BatchGetPodsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPodsRequest as interface{}
func (fpaiv *BatchGetPodsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPodsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*pod.Reference, bool) {
	res, ok := fpaiv.value.(*pod.Reference)
	return res, ok
}

func (fpaiv *BatchGetPodsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPodsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPodsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPodsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPodsRequest'
func (fpaiv *BatchGetPodsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPodsRequest) bool {
	slice := fpaiv.BatchGetPodsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetPodsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetPodsRequest fields according to their type
type BatchGetPodsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPodsRequest_FieldPath
}

func ParseBatchGetPodsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPodsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPodsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPodsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPodsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPodsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPodsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPodsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPodsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetPodsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetPodsRequest_FieldPathArrayOfValues = (*BatchGetPodsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPodsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPodsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*pod.Reference) {
			values = append(values, v)
		}
	case BatchGetPodsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*pod.Pod_FieldMask) {
			values = append(values, v)
		}
	case BatchGetPodsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPodsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*pod.Reference, bool) {
	res, ok := fpaov.values.([][]*pod.Reference)
	return res, ok
}
func (fpaov *BatchGetPodsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*pod.Pod_FieldMask, bool) {
	res, ok := fpaov.values.([]*pod.Pod_FieldMask)
	return res, ok
}
func (fpaov *BatchGetPodsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPodsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPodsResponse_FieldPathSelector
	Get(source *BatchGetPodsResponse) []interface{}
	GetSingle(source *BatchGetPodsResponse) (interface{}, bool)
	ClearValue(item *BatchGetPodsResponse)

	// Those methods build corresponding BatchGetPodsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPodsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPodsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPodsResponse_FieldPathArrayItemValue
}

type BatchGetPodsResponse_FieldPathSelector int32

const (
	BatchGetPodsResponse_FieldPathSelectorPods    BatchGetPodsResponse_FieldPathSelector = 0
	BatchGetPodsResponse_FieldPathSelectorMissing BatchGetPodsResponse_FieldPathSelector = 1
)

func (s BatchGetPodsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		return "pods"
	case BatchGetPodsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", s))
	}
}

func BuildBatchGetPodsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPodsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPodsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "pods":
			return &BatchGetPodsResponse_FieldTerminalPath{selector: BatchGetPodsResponse_FieldPathSelectorPods}, nil
		case "missing":
			return &BatchGetPodsResponse_FieldTerminalPath{selector: BatchGetPodsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "pods":
			if subpath, err := pod.BuildPod_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetPodsResponse_FieldSubPath{selector: BatchGetPodsResponse_FieldPathSelectorPods, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPodsResponse", fp)
}

func ParseBatchGetPodsResponse_FieldPath(rawField string) (BatchGetPodsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPodsResponse_FieldPath(fp)
}

func MustParseBatchGetPodsResponse_FieldPath(rawField string) BatchGetPodsResponse_FieldPath {
	fp, err := ParseBatchGetPodsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPodsResponse_FieldTerminalPath struct {
	selector BatchGetPodsResponse_FieldPathSelector
}

var _ BatchGetPodsResponse_FieldPath = (*BatchGetPodsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetPodsResponse_FieldTerminalPath) Selector() BatchGetPodsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPodsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPodsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPodsResponse
func (fp *BatchGetPodsResponse_FieldTerminalPath) Get(source *BatchGetPodsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPodsResponse_FieldPathSelectorPods:
			for _, value := range source.GetPods() {
				values = append(values, value)
			}
		case BatchGetPodsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPodsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPodsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetPodsResponse
func (fp *BatchGetPodsResponse_FieldTerminalPath) GetSingle(source *BatchGetPodsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		res := source.GetPods()
		return res, res != nil
	case BatchGetPodsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPodsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPodsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPodsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		return ([]*pod.Pod)(nil)
	case BatchGetPodsResponse_FieldPathSelectorMissing:
		return ([]*pod.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPodsResponse_FieldTerminalPath) ClearValue(item *BatchGetPodsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetPodsResponse_FieldPathSelectorPods:
			item.Pods = nil
		case BatchGetPodsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPodsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPodsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPodsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPodsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetPodsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *BatchGetPodsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetPodsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		return &BatchGetPodsResponse_FieldTerminalPathValue{BatchGetPodsResponse_FieldTerminalPath: *fp, value: value.([]*pod.Pod)}
	case BatchGetPodsResponse_FieldPathSelectorMissing:
		return &BatchGetPodsResponse_FieldTerminalPathValue{BatchGetPodsResponse_FieldTerminalPath: *fp, value: value.([]*pod.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPodsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPodsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPodsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetPodsResponse_FieldTerminalPathArrayOfValues{BatchGetPodsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		return &BatchGetPodsResponse_FieldTerminalPathArrayOfValues{BatchGetPodsResponse_FieldTerminalPath: *fp, values: values.([][]*pod.Pod)}
	case BatchGetPodsResponse_FieldPathSelectorMissing:
		return &BatchGetPodsResponse_FieldTerminalPathArrayOfValues{BatchGetPodsResponse_FieldTerminalPath: *fp, values: values.([][]*pod.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPodsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPodsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPodsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		return &BatchGetPodsResponse_FieldTerminalPathArrayItemValue{BatchGetPodsResponse_FieldTerminalPath: *fp, value: value.(*pod.Pod)}
	case BatchGetPodsResponse_FieldPathSelectorMissing:
		return &BatchGetPodsResponse_FieldTerminalPathArrayItemValue{BatchGetPodsResponse_FieldTerminalPath: *fp, value: value.(*pod.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPodsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetPodsResponse_FieldSubPath struct {
	selector BatchGetPodsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetPodsResponse_FieldPath = (*BatchGetPodsResponse_FieldSubPath)(nil)

func (fps *BatchGetPodsResponse_FieldSubPath) Selector() BatchGetPodsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetPodsResponse_FieldSubPath) AsPodsSubPath() (pod.Pod_FieldPath, bool) {
	res, ok := fps.subPath.(pod.Pod_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetPodsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetPodsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetPodsResponse
func (fps *BatchGetPodsResponse_FieldSubPath) Get(source *BatchGetPodsResponse) (values []interface{}) {
	switch fps.selector {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		for _, item := range source.GetPods() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetPodsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetPodsResponse))
}

// GetSingle returns value of selected field from source BatchGetPodsResponse
func (fps *BatchGetPodsResponse_FieldSubPath) GetSingle(source *BatchGetPodsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		if len(source.GetPods()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPods()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetPodsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetPodsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetPodsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetPodsResponse_FieldSubPath) ClearValue(item *BatchGetPodsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetPodsResponse_FieldPathSelectorPods:
			for _, subItem := range item.Pods {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetPodsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetPodsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetPodsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetPodsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&BatchGetPodsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *BatchGetPodsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetPodsResponse_FieldPathValue {
	return &BatchGetPodsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetPodsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetPodsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetPodsResponse_FieldPathArrayOfValues {
	return &BatchGetPodsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetPodsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetPodsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetPodsResponse_FieldPathArrayItemValue {
	return &BatchGetPodsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetPodsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetPodsResponse_FieldPathValue allows storing values for BatchGetPodsResponse fields according to their type
type BatchGetPodsResponse_FieldPathValue interface {
	BatchGetPodsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPodsResponse)
	CompareWith(*BatchGetPodsResponse) (cmp int, comparable bool)
}

func ParseBatchGetPodsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetPodsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetPodsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPodsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPodsResponse_FieldPathValue), nil
}

func MustParseBatchGetPodsResponse_FieldPathValue(pathStr, valueStr string) BatchGetPodsResponse_FieldPathValue {
	fpv, err := ParseBatchGetPodsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPodsResponse_FieldTerminalPathValue struct {
	BatchGetPodsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPodsResponse_FieldPathValue = (*BatchGetPodsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPodsResponse' as interface{}
func (fpv *BatchGetPodsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPodsResponse_FieldTerminalPathValue) AsPodsValue() ([]*pod.Pod, bool) {
	res, ok := fpv.value.([]*pod.Pod)
	return res, ok
}
func (fpv *BatchGetPodsResponse_FieldTerminalPathValue) AsMissingValue() ([]*pod.Reference, bool) {
	res, ok := fpv.value.([]*pod.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPodsResponse
func (fpv *BatchGetPodsResponse_FieldTerminalPathValue) SetTo(target **BatchGetPodsResponse) {
	if *target == nil {
		*target = new(BatchGetPodsResponse)
	}
	switch fpv.selector {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		(*target).Pods = fpv.value.([]*pod.Pod)
	case BatchGetPodsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*pod.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPodsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPodsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPodsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetPodsResponse'.
func (fpv *BatchGetPodsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetPodsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		return 0, false
	case BatchGetPodsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPodsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPodsResponse))
}

type BatchGetPodsResponse_FieldSubPathValue struct {
	BatchGetPodsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetPodsResponse_FieldPathValue = (*BatchGetPodsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetPodsResponse_FieldSubPathValue) AsPodsPathValue() (pod.Pod_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(pod.Pod_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetPodsResponse_FieldSubPathValue) SetTo(target **BatchGetPodsResponse) {
	if *target == nil {
		*target = new(BatchGetPodsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPodsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPodsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetPodsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetPodsResponse_FieldSubPathValue) CompareWith(source *BatchGetPodsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPodsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetPodsResponse))
}

// BatchGetPodsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPodsResponse according to their type
// Present only for array (repeated) types.
type BatchGetPodsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPodsResponse_FieldPath
	ContainsValue(*BatchGetPodsResponse) bool
}

// ParseBatchGetPodsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPodsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPodsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPodsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPodsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPodsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPodsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPodsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPodsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPodsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetPodsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPodsResponse_FieldPathArrayItemValue = (*BatchGetPodsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPodsResponse as interface{}
func (fpaiv *BatchGetPodsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPodsResponse_FieldTerminalPathArrayItemValue) AsPodsItemValue() (*pod.Pod, bool) {
	res, ok := fpaiv.value.(*pod.Pod)
	return res, ok
}
func (fpaiv *BatchGetPodsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*pod.Reference, bool) {
	res, ok := fpaiv.value.(*pod.Reference)
	return res, ok
}

func (fpaiv *BatchGetPodsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPodsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPodsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPodsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPodsResponse'
func (fpaiv *BatchGetPodsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPodsResponse) bool {
	slice := fpaiv.BatchGetPodsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetPodsResponse_FieldSubPathArrayItemValue struct {
	BatchGetPodsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetPodsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetPodsResponse_FieldSubPathArrayItemValue) AsPodsPathItemValue() (pod.Pod_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(pod.Pod_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPodsResponse'
func (fpaivs *BatchGetPodsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetPodsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPodsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetPodsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetPodsResponse fields according to their type
type BatchGetPodsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPodsResponse_FieldPath
}

func ParseBatchGetPodsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPodsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPodsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPodsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPodsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPodsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPodsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPodsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPodsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetPodsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetPodsResponse_FieldPathArrayOfValues = (*BatchGetPodsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPodsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPodsResponse_FieldPathSelectorPods:
		for _, v := range fpaov.values.([][]*pod.Pod) {
			values = append(values, v)
		}
	case BatchGetPodsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*pod.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPodsResponse_FieldTerminalPathArrayOfValues) AsPodsArrayOfValues() ([][]*pod.Pod, bool) {
	res, ok := fpaov.values.([][]*pod.Pod)
	return res, ok
}
func (fpaov *BatchGetPodsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*pod.Reference, bool) {
	res, ok := fpaov.values.([][]*pod.Reference)
	return res, ok
}

type BatchGetPodsResponse_FieldSubPathArrayOfValues struct {
	BatchGetPodsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetPodsResponse_FieldPathArrayOfValues = (*BatchGetPodsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetPodsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetPodsResponse_FieldSubPathArrayOfValues) AsPodsPathArrayOfValues() (pod.Pod_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(pod.Pod_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPodsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPodsRequest_FieldPathSelector
	Get(source *ListPodsRequest) []interface{}
	GetSingle(source *ListPodsRequest) (interface{}, bool)
	ClearValue(item *ListPodsRequest)

	// Those methods build corresponding ListPodsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPodsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPodsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPodsRequest_FieldPathArrayItemValue
}

type ListPodsRequest_FieldPathSelector int32

const (
	ListPodsRequest_FieldPathSelectorParent            ListPodsRequest_FieldPathSelector = 0
	ListPodsRequest_FieldPathSelectorPageSize          ListPodsRequest_FieldPathSelector = 1
	ListPodsRequest_FieldPathSelectorPageToken         ListPodsRequest_FieldPathSelector = 2
	ListPodsRequest_FieldPathSelectorOrderBy           ListPodsRequest_FieldPathSelector = 3
	ListPodsRequest_FieldPathSelectorFilter            ListPodsRequest_FieldPathSelector = 4
	ListPodsRequest_FieldPathSelectorFieldMask         ListPodsRequest_FieldPathSelector = 5
	ListPodsRequest_FieldPathSelectorView              ListPodsRequest_FieldPathSelector = 6
	ListPodsRequest_FieldPathSelectorIncludePagingInfo ListPodsRequest_FieldPathSelector = 7
)

func (s ListPodsRequest_FieldPathSelector) String() string {
	switch s {
	case ListPodsRequest_FieldPathSelectorParent:
		return "parent"
	case ListPodsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListPodsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListPodsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListPodsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListPodsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListPodsRequest_FieldPathSelectorView:
		return "view"
	case ListPodsRequest_FieldPathSelectorIncludePagingInfo:
		return "include_paging_info"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsRequest: %d", s))
	}
}

func BuildListPodsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListPodsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPodsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorView}, nil
		case "include_paging_info", "includePagingInfo", "include-paging-info":
			return &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorIncludePagingInfo}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPodsRequest", fp)
}

func ParseListPodsRequest_FieldPath(rawField string) (ListPodsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPodsRequest_FieldPath(fp)
}

func MustParseListPodsRequest_FieldPath(rawField string) ListPodsRequest_FieldPath {
	fp, err := ParseListPodsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPodsRequest_FieldTerminalPath struct {
	selector ListPodsRequest_FieldPathSelector
}

var _ ListPodsRequest_FieldPath = (*ListPodsRequest_FieldTerminalPath)(nil)

func (fp *ListPodsRequest_FieldTerminalPath) Selector() ListPodsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPodsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPodsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPodsRequest
func (fp *ListPodsRequest_FieldTerminalPath) Get(source *ListPodsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPodsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListPodsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListPodsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListPodsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListPodsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListPodsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListPodsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case ListPodsRequest_FieldPathSelectorIncludePagingInfo:
			values = append(values, source.IncludePagingInfo)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPodsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPodsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPodsRequest))
}

// GetSingle returns value pointed by specific field of from source ListPodsRequest
func (fp *ListPodsRequest_FieldTerminalPath) GetSingle(source *ListPodsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListPodsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListPodsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListPodsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListPodsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListPodsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListPodsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListPodsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case ListPodsRequest_FieldPathSelectorIncludePagingInfo:
		return source.GetIncludePagingInfo(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsRequest: %d", fp.selector))
	}
}

func (fp *ListPodsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPodsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListPodsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPodsRequest_FieldPathSelectorParent:
		return (*pod.ParentName)(nil)
	case ListPodsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListPodsRequest_FieldPathSelectorPageToken:
		return (*pod.PagerCursor)(nil)
	case ListPodsRequest_FieldPathSelectorOrderBy:
		return (*pod.OrderBy)(nil)
	case ListPodsRequest_FieldPathSelectorFilter:
		return (*pod.Filter)(nil)
	case ListPodsRequest_FieldPathSelectorFieldMask:
		return (*pod.Pod_FieldMask)(nil)
	case ListPodsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case ListPodsRequest_FieldPathSelectorIncludePagingInfo:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsRequest: %d", fp.selector))
	}
}

func (fp *ListPodsRequest_FieldTerminalPath) ClearValue(item *ListPodsRequest) {
	if item != nil {
		switch fp.selector {
		case ListPodsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListPodsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListPodsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListPodsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListPodsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListPodsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListPodsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case ListPodsRequest_FieldPathSelectorIncludePagingInfo:
			item.IncludePagingInfo = false
		default:
			panic(fmt.Sprintf("Invalid selector for ListPodsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListPodsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPodsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPodsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPodsRequest_FieldPathSelectorParent ||
		fp.selector == ListPodsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListPodsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListPodsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListPodsRequest_FieldPathSelectorFilter ||
		fp.selector == ListPodsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListPodsRequest_FieldPathSelectorView ||
		fp.selector == ListPodsRequest_FieldPathSelectorIncludePagingInfo
}

func (fp *ListPodsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPodsRequest_FieldTerminalPath) WithIValue(value interface{}) ListPodsRequest_FieldPathValue {
	switch fp.selector {
	case ListPodsRequest_FieldPathSelectorParent:
		return &ListPodsRequest_FieldTerminalPathValue{ListPodsRequest_FieldTerminalPath: *fp, value: value.(*pod.ParentName)}
	case ListPodsRequest_FieldPathSelectorPageSize:
		return &ListPodsRequest_FieldTerminalPathValue{ListPodsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListPodsRequest_FieldPathSelectorPageToken:
		return &ListPodsRequest_FieldTerminalPathValue{ListPodsRequest_FieldTerminalPath: *fp, value: value.(*pod.PagerCursor)}
	case ListPodsRequest_FieldPathSelectorOrderBy:
		return &ListPodsRequest_FieldTerminalPathValue{ListPodsRequest_FieldTerminalPath: *fp, value: value.(*pod.OrderBy)}
	case ListPodsRequest_FieldPathSelectorFilter:
		return &ListPodsRequest_FieldTerminalPathValue{ListPodsRequest_FieldTerminalPath: *fp, value: value.(*pod.Filter)}
	case ListPodsRequest_FieldPathSelectorFieldMask:
		return &ListPodsRequest_FieldTerminalPathValue{ListPodsRequest_FieldTerminalPath: *fp, value: value.(*pod.Pod_FieldMask)}
	case ListPodsRequest_FieldPathSelectorView:
		return &ListPodsRequest_FieldTerminalPathValue{ListPodsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case ListPodsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListPodsRequest_FieldTerminalPathValue{ListPodsRequest_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsRequest: %d", fp.selector))
	}
}

func (fp *ListPodsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPodsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPodsRequest_FieldPathArrayOfValues {
	fpaov := &ListPodsRequest_FieldTerminalPathArrayOfValues{ListPodsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPodsRequest_FieldPathSelectorParent:
		return &ListPodsRequest_FieldTerminalPathArrayOfValues{ListPodsRequest_FieldTerminalPath: *fp, values: values.([]*pod.ParentName)}
	case ListPodsRequest_FieldPathSelectorPageSize:
		return &ListPodsRequest_FieldTerminalPathArrayOfValues{ListPodsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListPodsRequest_FieldPathSelectorPageToken:
		return &ListPodsRequest_FieldTerminalPathArrayOfValues{ListPodsRequest_FieldTerminalPath: *fp, values: values.([]*pod.PagerCursor)}
	case ListPodsRequest_FieldPathSelectorOrderBy:
		return &ListPodsRequest_FieldTerminalPathArrayOfValues{ListPodsRequest_FieldTerminalPath: *fp, values: values.([]*pod.OrderBy)}
	case ListPodsRequest_FieldPathSelectorFilter:
		return &ListPodsRequest_FieldTerminalPathArrayOfValues{ListPodsRequest_FieldTerminalPath: *fp, values: values.([]*pod.Filter)}
	case ListPodsRequest_FieldPathSelectorFieldMask:
		return &ListPodsRequest_FieldTerminalPathArrayOfValues{ListPodsRequest_FieldTerminalPath: *fp, values: values.([]*pod.Pod_FieldMask)}
	case ListPodsRequest_FieldPathSelectorView:
		return &ListPodsRequest_FieldTerminalPathArrayOfValues{ListPodsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case ListPodsRequest_FieldPathSelectorIncludePagingInfo:
		return &ListPodsRequest_FieldTerminalPathArrayOfValues{ListPodsRequest_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPodsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPodsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPodsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsRequest: %d", fp.selector))
	}
}

func (fp *ListPodsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListPodsRequest_FieldPathValue allows storing values for ListPodsRequest fields according to their type
type ListPodsRequest_FieldPathValue interface {
	ListPodsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPodsRequest)
	CompareWith(*ListPodsRequest) (cmp int, comparable bool)
}

func ParseListPodsRequest_FieldPathValue(pathStr, valueStr string) (ListPodsRequest_FieldPathValue, error) {
	fp, err := ParseListPodsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPodsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPodsRequest_FieldPathValue), nil
}

func MustParseListPodsRequest_FieldPathValue(pathStr, valueStr string) ListPodsRequest_FieldPathValue {
	fpv, err := ParseListPodsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPodsRequest_FieldTerminalPathValue struct {
	ListPodsRequest_FieldTerminalPath
	value interface{}
}

var _ ListPodsRequest_FieldPathValue = (*ListPodsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPodsRequest' as interface{}
func (fpv *ListPodsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPodsRequest_FieldTerminalPathValue) AsParentValue() (*pod.ParentName, bool) {
	res, ok := fpv.value.(*pod.ParentName)
	return res, ok
}
func (fpv *ListPodsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListPodsRequest_FieldTerminalPathValue) AsPageTokenValue() (*pod.PagerCursor, bool) {
	res, ok := fpv.value.(*pod.PagerCursor)
	return res, ok
}
func (fpv *ListPodsRequest_FieldTerminalPathValue) AsOrderByValue() (*pod.OrderBy, bool) {
	res, ok := fpv.value.(*pod.OrderBy)
	return res, ok
}
func (fpv *ListPodsRequest_FieldTerminalPathValue) AsFilterValue() (*pod.Filter, bool) {
	res, ok := fpv.value.(*pod.Filter)
	return res, ok
}
func (fpv *ListPodsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*pod.Pod_FieldMask, bool) {
	res, ok := fpv.value.(*pod.Pod_FieldMask)
	return res, ok
}
func (fpv *ListPodsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *ListPodsRequest_FieldTerminalPathValue) AsIncludePagingInfoValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ListPodsRequest
func (fpv *ListPodsRequest_FieldTerminalPathValue) SetTo(target **ListPodsRequest) {
	if *target == nil {
		*target = new(ListPodsRequest)
	}
	switch fpv.selector {
	case ListPodsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*pod.ParentName)
	case ListPodsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListPodsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*pod.PagerCursor)
	case ListPodsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*pod.OrderBy)
	case ListPodsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*pod.Filter)
	case ListPodsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*pod.Pod_FieldMask)
	case ListPodsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case ListPodsRequest_FieldPathSelectorIncludePagingInfo:
		(*target).IncludePagingInfo = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsRequest: %d", fpv.selector))
	}
}

func (fpv *ListPodsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPodsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPodsRequest_FieldTerminalPathValue' with the value under path in 'ListPodsRequest'.
func (fpv *ListPodsRequest_FieldTerminalPathValue) CompareWith(source *ListPodsRequest) (int, bool) {
	switch fpv.selector {
	case ListPodsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*pod.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListPodsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPodsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListPodsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListPodsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListPodsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListPodsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPodsRequest_FieldPathSelectorIncludePagingInfo:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIncludePagingInfo()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsRequest: %d", fpv.selector))
	}
}

func (fpv *ListPodsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPodsRequest))
}

// ListPodsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPodsRequest according to their type
// Present only for array (repeated) types.
type ListPodsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPodsRequest_FieldPath
	ContainsValue(*ListPodsRequest) bool
}

// ParseListPodsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPodsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListPodsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListPodsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPodsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPodsRequest_FieldPathArrayItemValue), nil
}

func MustParseListPodsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListPodsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListPodsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPodsRequest_FieldTerminalPathArrayItemValue struct {
	ListPodsRequest_FieldTerminalPath
	value interface{}
}

var _ ListPodsRequest_FieldPathArrayItemValue = (*ListPodsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPodsRequest as interface{}
func (fpaiv *ListPodsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListPodsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListPodsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPodsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPodsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPodsRequest'
func (fpaiv *ListPodsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPodsRequest) bool {
	slice := fpaiv.ListPodsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListPodsRequest_FieldPathArrayOfValues allows storing slice of values for ListPodsRequest fields according to their type
type ListPodsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPodsRequest_FieldPath
}

func ParseListPodsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPodsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListPodsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPodsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPodsRequest_FieldPathArrayOfValues), nil
}

func MustParseListPodsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListPodsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListPodsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPodsRequest_FieldTerminalPathArrayOfValues struct {
	ListPodsRequest_FieldTerminalPath
	values interface{}
}

var _ ListPodsRequest_FieldPathArrayOfValues = (*ListPodsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPodsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPodsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*pod.ParentName) {
			values = append(values, v)
		}
	case ListPodsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListPodsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*pod.PagerCursor) {
			values = append(values, v)
		}
	case ListPodsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*pod.OrderBy) {
			values = append(values, v)
		}
	case ListPodsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*pod.Filter) {
			values = append(values, v)
		}
	case ListPodsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*pod.Pod_FieldMask) {
			values = append(values, v)
		}
	case ListPodsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case ListPodsRequest_FieldPathSelectorIncludePagingInfo:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPodsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*pod.ParentName, bool) {
	res, ok := fpaov.values.([]*pod.ParentName)
	return res, ok
}
func (fpaov *ListPodsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListPodsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*pod.PagerCursor, bool) {
	res, ok := fpaov.values.([]*pod.PagerCursor)
	return res, ok
}
func (fpaov *ListPodsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*pod.OrderBy, bool) {
	res, ok := fpaov.values.([]*pod.OrderBy)
	return res, ok
}
func (fpaov *ListPodsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*pod.Filter, bool) {
	res, ok := fpaov.values.([]*pod.Filter)
	return res, ok
}
func (fpaov *ListPodsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*pod.Pod_FieldMask, bool) {
	res, ok := fpaov.values.([]*pod.Pod_FieldMask)
	return res, ok
}
func (fpaov *ListPodsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *ListPodsRequest_FieldTerminalPathArrayOfValues) AsIncludePagingInfoArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPodsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPodsResponse_FieldPathSelector
	Get(source *ListPodsResponse) []interface{}
	GetSingle(source *ListPodsResponse) (interface{}, bool)
	ClearValue(item *ListPodsResponse)

	// Those methods build corresponding ListPodsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPodsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPodsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPodsResponse_FieldPathArrayItemValue
}

type ListPodsResponse_FieldPathSelector int32

const (
	ListPodsResponse_FieldPathSelectorPods              ListPodsResponse_FieldPathSelector = 0
	ListPodsResponse_FieldPathSelectorPrevPageToken     ListPodsResponse_FieldPathSelector = 1
	ListPodsResponse_FieldPathSelectorNextPageToken     ListPodsResponse_FieldPathSelector = 2
	ListPodsResponse_FieldPathSelectorCurrentOffset     ListPodsResponse_FieldPathSelector = 3
	ListPodsResponse_FieldPathSelectorTotalResultsCount ListPodsResponse_FieldPathSelector = 4
)

func (s ListPodsResponse_FieldPathSelector) String() string {
	switch s {
	case ListPodsResponse_FieldPathSelectorPods:
		return "pods"
	case ListPodsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListPodsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	case ListPodsResponse_FieldPathSelectorCurrentOffset:
		return "current_offset"
	case ListPodsResponse_FieldPathSelectorTotalResultsCount:
		return "total_results_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", s))
	}
}

func BuildListPodsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListPodsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPodsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "pods":
			return &ListPodsResponse_FieldTerminalPath{selector: ListPodsResponse_FieldPathSelectorPods}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListPodsResponse_FieldTerminalPath{selector: ListPodsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListPodsResponse_FieldTerminalPath{selector: ListPodsResponse_FieldPathSelectorNextPageToken}, nil
		case "current_offset", "currentOffset", "current-offset":
			return &ListPodsResponse_FieldTerminalPath{selector: ListPodsResponse_FieldPathSelectorCurrentOffset}, nil
		case "total_results_count", "totalResultsCount", "total-results-count":
			return &ListPodsResponse_FieldTerminalPath{selector: ListPodsResponse_FieldPathSelectorTotalResultsCount}, nil
		}
	} else {
		switch fp[0] {
		case "pods":
			if subpath, err := pod.BuildPod_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListPodsResponse_FieldSubPath{selector: ListPodsResponse_FieldPathSelectorPods, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPodsResponse", fp)
}

func ParseListPodsResponse_FieldPath(rawField string) (ListPodsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPodsResponse_FieldPath(fp)
}

func MustParseListPodsResponse_FieldPath(rawField string) ListPodsResponse_FieldPath {
	fp, err := ParseListPodsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPodsResponse_FieldTerminalPath struct {
	selector ListPodsResponse_FieldPathSelector
}

var _ ListPodsResponse_FieldPath = (*ListPodsResponse_FieldTerminalPath)(nil)

func (fp *ListPodsResponse_FieldTerminalPath) Selector() ListPodsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPodsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPodsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPodsResponse
func (fp *ListPodsResponse_FieldTerminalPath) Get(source *ListPodsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPodsResponse_FieldPathSelectorPods:
			for _, value := range source.GetPods() {
				values = append(values, value)
			}
		case ListPodsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListPodsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		case ListPodsResponse_FieldPathSelectorCurrentOffset:
			values = append(values, source.CurrentOffset)
		case ListPodsResponse_FieldPathSelectorTotalResultsCount:
			values = append(values, source.TotalResultsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPodsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPodsResponse))
}

// GetSingle returns value pointed by specific field of from source ListPodsResponse
func (fp *ListPodsResponse_FieldTerminalPath) GetSingle(source *ListPodsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListPodsResponse_FieldPathSelectorPods:
		res := source.GetPods()
		return res, res != nil
	case ListPodsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListPodsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	case ListPodsResponse_FieldPathSelectorCurrentOffset:
		return source.GetCurrentOffset(), source != nil
	case ListPodsResponse_FieldPathSelectorTotalResultsCount:
		return source.GetTotalResultsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fp.selector))
	}
}

func (fp *ListPodsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPodsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListPodsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPodsResponse_FieldPathSelectorPods:
		return ([]*pod.Pod)(nil)
	case ListPodsResponse_FieldPathSelectorPrevPageToken:
		return (*pod.PagerCursor)(nil)
	case ListPodsResponse_FieldPathSelectorNextPageToken:
		return (*pod.PagerCursor)(nil)
	case ListPodsResponse_FieldPathSelectorCurrentOffset:
		return int32(0)
	case ListPodsResponse_FieldPathSelectorTotalResultsCount:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fp.selector))
	}
}

func (fp *ListPodsResponse_FieldTerminalPath) ClearValue(item *ListPodsResponse) {
	if item != nil {
		switch fp.selector {
		case ListPodsResponse_FieldPathSelectorPods:
			item.Pods = nil
		case ListPodsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListPodsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		case ListPodsResponse_FieldPathSelectorCurrentOffset:
			item.CurrentOffset = int32(0)
		case ListPodsResponse_FieldPathSelectorTotalResultsCount:
			item.TotalResultsCount = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListPodsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPodsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPodsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPodsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListPodsResponse_FieldPathSelectorNextPageToken ||
		fp.selector == ListPodsResponse_FieldPathSelectorCurrentOffset ||
		fp.selector == ListPodsResponse_FieldPathSelectorTotalResultsCount
}

func (fp *ListPodsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ListPodsResponse_FieldTerminalPath) WithIValue(value interface{}) ListPodsResponse_FieldPathValue {
	switch fp.selector {
	case ListPodsResponse_FieldPathSelectorPods:
		return &ListPodsResponse_FieldTerminalPathValue{ListPodsResponse_FieldTerminalPath: *fp, value: value.([]*pod.Pod)}
	case ListPodsResponse_FieldPathSelectorPrevPageToken:
		return &ListPodsResponse_FieldTerminalPathValue{ListPodsResponse_FieldTerminalPath: *fp, value: value.(*pod.PagerCursor)}
	case ListPodsResponse_FieldPathSelectorNextPageToken:
		return &ListPodsResponse_FieldTerminalPathValue{ListPodsResponse_FieldTerminalPath: *fp, value: value.(*pod.PagerCursor)}
	case ListPodsResponse_FieldPathSelectorCurrentOffset:
		return &ListPodsResponse_FieldTerminalPathValue{ListPodsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	case ListPodsResponse_FieldPathSelectorTotalResultsCount:
		return &ListPodsResponse_FieldTerminalPathValue{ListPodsResponse_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fp.selector))
	}
}

func (fp *ListPodsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPodsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPodsResponse_FieldPathArrayOfValues {
	fpaov := &ListPodsResponse_FieldTerminalPathArrayOfValues{ListPodsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPodsResponse_FieldPathSelectorPods:
		return &ListPodsResponse_FieldTerminalPathArrayOfValues{ListPodsResponse_FieldTerminalPath: *fp, values: values.([][]*pod.Pod)}
	case ListPodsResponse_FieldPathSelectorPrevPageToken:
		return &ListPodsResponse_FieldTerminalPathArrayOfValues{ListPodsResponse_FieldTerminalPath: *fp, values: values.([]*pod.PagerCursor)}
	case ListPodsResponse_FieldPathSelectorNextPageToken:
		return &ListPodsResponse_FieldTerminalPathArrayOfValues{ListPodsResponse_FieldTerminalPath: *fp, values: values.([]*pod.PagerCursor)}
	case ListPodsResponse_FieldPathSelectorCurrentOffset:
		return &ListPodsResponse_FieldTerminalPathArrayOfValues{ListPodsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListPodsResponse_FieldPathSelectorTotalResultsCount:
		return &ListPodsResponse_FieldTerminalPathArrayOfValues{ListPodsResponse_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPodsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPodsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPodsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListPodsResponse_FieldPathSelectorPods:
		return &ListPodsResponse_FieldTerminalPathArrayItemValue{ListPodsResponse_FieldTerminalPath: *fp, value: value.(*pod.Pod)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fp.selector))
	}
}

func (fp *ListPodsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListPodsResponse_FieldSubPath struct {
	selector ListPodsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListPodsResponse_FieldPath = (*ListPodsResponse_FieldSubPath)(nil)

func (fps *ListPodsResponse_FieldSubPath) Selector() ListPodsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListPodsResponse_FieldSubPath) AsPodsSubPath() (pod.Pod_FieldPath, bool) {
	res, ok := fps.subPath.(pod.Pod_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListPodsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListPodsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListPodsResponse
func (fps *ListPodsResponse_FieldSubPath) Get(source *ListPodsResponse) (values []interface{}) {
	switch fps.selector {
	case ListPodsResponse_FieldPathSelectorPods:
		for _, item := range source.GetPods() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListPodsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListPodsResponse))
}

// GetSingle returns value of selected field from source ListPodsResponse
func (fps *ListPodsResponse_FieldSubPath) GetSingle(source *ListPodsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListPodsResponse_FieldPathSelectorPods:
		if len(source.GetPods()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPods()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fps.selector))
	}
}

func (fps *ListPodsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListPodsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListPodsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListPodsResponse_FieldSubPath) ClearValue(item *ListPodsResponse) {
	if item != nil {
		switch fps.selector {
		case ListPodsResponse_FieldPathSelectorPods:
			for _, subItem := range item.Pods {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListPodsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListPodsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListPodsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListPodsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ListPodsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ListPodsResponse_FieldSubPath) WithIValue(value interface{}) ListPodsResponse_FieldPathValue {
	return &ListPodsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListPodsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListPodsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListPodsResponse_FieldPathArrayOfValues {
	return &ListPodsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListPodsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListPodsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListPodsResponse_FieldPathArrayItemValue {
	return &ListPodsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListPodsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListPodsResponse_FieldPathValue allows storing values for ListPodsResponse fields according to their type
type ListPodsResponse_FieldPathValue interface {
	ListPodsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPodsResponse)
	CompareWith(*ListPodsResponse) (cmp int, comparable bool)
}

func ParseListPodsResponse_FieldPathValue(pathStr, valueStr string) (ListPodsResponse_FieldPathValue, error) {
	fp, err := ParseListPodsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPodsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPodsResponse_FieldPathValue), nil
}

func MustParseListPodsResponse_FieldPathValue(pathStr, valueStr string) ListPodsResponse_FieldPathValue {
	fpv, err := ParseListPodsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPodsResponse_FieldTerminalPathValue struct {
	ListPodsResponse_FieldTerminalPath
	value interface{}
}

var _ ListPodsResponse_FieldPathValue = (*ListPodsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPodsResponse' as interface{}
func (fpv *ListPodsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPodsResponse_FieldTerminalPathValue) AsPodsValue() ([]*pod.Pod, bool) {
	res, ok := fpv.value.([]*pod.Pod)
	return res, ok
}
func (fpv *ListPodsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*pod.PagerCursor, bool) {
	res, ok := fpv.value.(*pod.PagerCursor)
	return res, ok
}
func (fpv *ListPodsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*pod.PagerCursor, bool) {
	res, ok := fpv.value.(*pod.PagerCursor)
	return res, ok
}
func (fpv *ListPodsResponse_FieldTerminalPathValue) AsCurrentOffsetValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListPodsResponse_FieldTerminalPathValue) AsTotalResultsCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ListPodsResponse
func (fpv *ListPodsResponse_FieldTerminalPathValue) SetTo(target **ListPodsResponse) {
	if *target == nil {
		*target = new(ListPodsResponse)
	}
	switch fpv.selector {
	case ListPodsResponse_FieldPathSelectorPods:
		(*target).Pods = fpv.value.([]*pod.Pod)
	case ListPodsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*pod.PagerCursor)
	case ListPodsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*pod.PagerCursor)
	case ListPodsResponse_FieldPathSelectorCurrentOffset:
		(*target).CurrentOffset = fpv.value.(int32)
	case ListPodsResponse_FieldPathSelectorTotalResultsCount:
		(*target).TotalResultsCount = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fpv.selector))
	}
}

func (fpv *ListPodsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPodsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPodsResponse_FieldTerminalPathValue' with the value under path in 'ListPodsResponse'.
func (fpv *ListPodsResponse_FieldTerminalPathValue) CompareWith(source *ListPodsResponse) (int, bool) {
	switch fpv.selector {
	case ListPodsResponse_FieldPathSelectorPods:
		return 0, false
	case ListPodsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListPodsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	case ListPodsResponse_FieldPathSelectorCurrentOffset:
		leftValue := fpv.value.(int32)
		rightValue := source.GetCurrentOffset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPodsResponse_FieldPathSelectorTotalResultsCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTotalResultsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fpv.selector))
	}
}

func (fpv *ListPodsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPodsResponse))
}

type ListPodsResponse_FieldSubPathValue struct {
	ListPodsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListPodsResponse_FieldPathValue = (*ListPodsResponse_FieldSubPathValue)(nil)

func (fpvs *ListPodsResponse_FieldSubPathValue) AsPodsPathValue() (pod.Pod_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(pod.Pod_FieldPathValue)
	return res, ok
}

func (fpvs *ListPodsResponse_FieldSubPathValue) SetTo(target **ListPodsResponse) {
	if *target == nil {
		*target = new(ListPodsResponse)
	}
	switch fpvs.Selector() {
	case ListPodsResponse_FieldPathSelectorPods:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPodsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPodsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListPodsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListPodsResponse_FieldSubPathValue) CompareWith(source *ListPodsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListPodsResponse_FieldPathSelectorPods:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPodsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListPodsResponse))
}

// ListPodsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPodsResponse according to their type
// Present only for array (repeated) types.
type ListPodsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPodsResponse_FieldPath
	ContainsValue(*ListPodsResponse) bool
}

// ParseListPodsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPodsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListPodsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListPodsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPodsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPodsResponse_FieldPathArrayItemValue), nil
}

func MustParseListPodsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListPodsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListPodsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPodsResponse_FieldTerminalPathArrayItemValue struct {
	ListPodsResponse_FieldTerminalPath
	value interface{}
}

var _ ListPodsResponse_FieldPathArrayItemValue = (*ListPodsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPodsResponse as interface{}
func (fpaiv *ListPodsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListPodsResponse_FieldTerminalPathArrayItemValue) AsPodsItemValue() (*pod.Pod, bool) {
	res, ok := fpaiv.value.(*pod.Pod)
	return res, ok
}

func (fpaiv *ListPodsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListPodsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPodsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPodsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPodsResponse'
func (fpaiv *ListPodsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPodsResponse) bool {
	slice := fpaiv.ListPodsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListPodsResponse_FieldSubPathArrayItemValue struct {
	ListPodsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListPodsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListPodsResponse_FieldSubPathArrayItemValue) AsPodsPathItemValue() (pod.Pod_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(pod.Pod_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPodsResponse'
func (fpaivs *ListPodsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListPodsResponse) bool {
	switch fpaivs.Selector() {
	case ListPodsResponse_FieldPathSelectorPods:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPodsResponse: %d", fpaivs.Selector()))
	}
}

// ListPodsResponse_FieldPathArrayOfValues allows storing slice of values for ListPodsResponse fields according to their type
type ListPodsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPodsResponse_FieldPath
}

func ParseListPodsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPodsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListPodsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPodsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPodsResponse_FieldPathArrayOfValues), nil
}

func MustParseListPodsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListPodsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListPodsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPodsResponse_FieldTerminalPathArrayOfValues struct {
	ListPodsResponse_FieldTerminalPath
	values interface{}
}

var _ ListPodsResponse_FieldPathArrayOfValues = (*ListPodsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPodsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPodsResponse_FieldPathSelectorPods:
		for _, v := range fpaov.values.([][]*pod.Pod) {
			values = append(values, v)
		}
	case ListPodsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*pod.PagerCursor) {
			values = append(values, v)
		}
	case ListPodsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*pod.PagerCursor) {
			values = append(values, v)
		}
	case ListPodsResponse_FieldPathSelectorCurrentOffset:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListPodsResponse_FieldPathSelectorTotalResultsCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPodsResponse_FieldTerminalPathArrayOfValues) AsPodsArrayOfValues() ([][]*pod.Pod, bool) {
	res, ok := fpaov.values.([][]*pod.Pod)
	return res, ok
}
func (fpaov *ListPodsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*pod.PagerCursor, bool) {
	res, ok := fpaov.values.([]*pod.PagerCursor)
	return res, ok
}
func (fpaov *ListPodsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*pod.PagerCursor, bool) {
	res, ok := fpaov.values.([]*pod.PagerCursor)
	return res, ok
}
func (fpaov *ListPodsResponse_FieldTerminalPathArrayOfValues) AsCurrentOffsetArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListPodsResponse_FieldTerminalPathArrayOfValues) AsTotalResultsCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ListPodsResponse_FieldSubPathArrayOfValues struct {
	ListPodsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListPodsResponse_FieldPathArrayOfValues = (*ListPodsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListPodsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListPodsResponse_FieldSubPathArrayOfValues) AsPodsPathArrayOfValues() (pod.Pod_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(pod.Pod_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPodRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPodRequest_FieldPathSelector
	Get(source *WatchPodRequest) []interface{}
	GetSingle(source *WatchPodRequest) (interface{}, bool)
	ClearValue(item *WatchPodRequest)

	// Those methods build corresponding WatchPodRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPodRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPodRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPodRequest_FieldPathArrayItemValue
}

type WatchPodRequest_FieldPathSelector int32

const (
	WatchPodRequest_FieldPathSelectorName      WatchPodRequest_FieldPathSelector = 0
	WatchPodRequest_FieldPathSelectorFieldMask WatchPodRequest_FieldPathSelector = 1
	WatchPodRequest_FieldPathSelectorView      WatchPodRequest_FieldPathSelector = 2
)

func (s WatchPodRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPodRequest_FieldPathSelectorName:
		return "name"
	case WatchPodRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPodRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodRequest: %d", s))
	}
}

func BuildWatchPodRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPodRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPodRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchPodRequest_FieldTerminalPath{selector: WatchPodRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPodRequest_FieldTerminalPath{selector: WatchPodRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPodRequest_FieldTerminalPath{selector: WatchPodRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPodRequest", fp)
}

func ParseWatchPodRequest_FieldPath(rawField string) (WatchPodRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPodRequest_FieldPath(fp)
}

func MustParseWatchPodRequest_FieldPath(rawField string) WatchPodRequest_FieldPath {
	fp, err := ParseWatchPodRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPodRequest_FieldTerminalPath struct {
	selector WatchPodRequest_FieldPathSelector
}

var _ WatchPodRequest_FieldPath = (*WatchPodRequest_FieldTerminalPath)(nil)

func (fp *WatchPodRequest_FieldTerminalPath) Selector() WatchPodRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPodRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPodRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPodRequest
func (fp *WatchPodRequest_FieldTerminalPath) Get(source *WatchPodRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPodRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchPodRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPodRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPodRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPodRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPodRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPodRequest
func (fp *WatchPodRequest_FieldTerminalPath) GetSingle(source *WatchPodRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPodRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchPodRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPodRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodRequest: %d", fp.selector))
	}
}

func (fp *WatchPodRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPodRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPodRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPodRequest_FieldPathSelectorName:
		return (*pod.Reference)(nil)
	case WatchPodRequest_FieldPathSelectorFieldMask:
		return (*pod.Pod_FieldMask)(nil)
	case WatchPodRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodRequest: %d", fp.selector))
	}
}

func (fp *WatchPodRequest_FieldTerminalPath) ClearValue(item *WatchPodRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPodRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchPodRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPodRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPodRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPodRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPodRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPodRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPodRequest_FieldPathSelectorName ||
		fp.selector == WatchPodRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPodRequest_FieldPathSelectorView
}

func (fp *WatchPodRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPodRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPodRequest_FieldPathValue {
	switch fp.selector {
	case WatchPodRequest_FieldPathSelectorName:
		return &WatchPodRequest_FieldTerminalPathValue{WatchPodRequest_FieldTerminalPath: *fp, value: value.(*pod.Reference)}
	case WatchPodRequest_FieldPathSelectorFieldMask:
		return &WatchPodRequest_FieldTerminalPathValue{WatchPodRequest_FieldTerminalPath: *fp, value: value.(*pod.Pod_FieldMask)}
	case WatchPodRequest_FieldPathSelectorView:
		return &WatchPodRequest_FieldTerminalPathValue{WatchPodRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodRequest: %d", fp.selector))
	}
}

func (fp *WatchPodRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPodRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPodRequest_FieldPathArrayOfValues {
	fpaov := &WatchPodRequest_FieldTerminalPathArrayOfValues{WatchPodRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPodRequest_FieldPathSelectorName:
		return &WatchPodRequest_FieldTerminalPathArrayOfValues{WatchPodRequest_FieldTerminalPath: *fp, values: values.([]*pod.Reference)}
	case WatchPodRequest_FieldPathSelectorFieldMask:
		return &WatchPodRequest_FieldTerminalPathArrayOfValues{WatchPodRequest_FieldTerminalPath: *fp, values: values.([]*pod.Pod_FieldMask)}
	case WatchPodRequest_FieldPathSelectorView:
		return &WatchPodRequest_FieldTerminalPathArrayOfValues{WatchPodRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPodRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPodRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPodRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodRequest: %d", fp.selector))
	}
}

func (fp *WatchPodRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPodRequest_FieldPathValue allows storing values for WatchPodRequest fields according to their type
type WatchPodRequest_FieldPathValue interface {
	WatchPodRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPodRequest)
	CompareWith(*WatchPodRequest) (cmp int, comparable bool)
}

func ParseWatchPodRequest_FieldPathValue(pathStr, valueStr string) (WatchPodRequest_FieldPathValue, error) {
	fp, err := ParseWatchPodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPodRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPodRequest_FieldPathValue), nil
}

func MustParseWatchPodRequest_FieldPathValue(pathStr, valueStr string) WatchPodRequest_FieldPathValue {
	fpv, err := ParseWatchPodRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPodRequest_FieldTerminalPathValue struct {
	WatchPodRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPodRequest_FieldPathValue = (*WatchPodRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPodRequest' as interface{}
func (fpv *WatchPodRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPodRequest_FieldTerminalPathValue) AsNameValue() (*pod.Reference, bool) {
	res, ok := fpv.value.(*pod.Reference)
	return res, ok
}
func (fpv *WatchPodRequest_FieldTerminalPathValue) AsFieldMaskValue() (*pod.Pod_FieldMask, bool) {
	res, ok := fpv.value.(*pod.Pod_FieldMask)
	return res, ok
}
func (fpv *WatchPodRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchPodRequest
func (fpv *WatchPodRequest_FieldTerminalPathValue) SetTo(target **WatchPodRequest) {
	if *target == nil {
		*target = new(WatchPodRequest)
	}
	switch fpv.selector {
	case WatchPodRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*pod.Reference)
	case WatchPodRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*pod.Pod_FieldMask)
	case WatchPodRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPodRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPodRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPodRequest_FieldTerminalPathValue' with the value under path in 'WatchPodRequest'.
func (fpv *WatchPodRequest_FieldTerminalPathValue) CompareWith(source *WatchPodRequest) (int, bool) {
	switch fpv.selector {
	case WatchPodRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*pod.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPodRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPodRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPodRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPodRequest))
}

// WatchPodRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPodRequest according to their type
// Present only for array (repeated) types.
type WatchPodRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPodRequest_FieldPath
	ContainsValue(*WatchPodRequest) bool
}

// ParseWatchPodRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPodRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPodRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPodRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPodRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPodRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPodRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPodRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPodRequest_FieldTerminalPathArrayItemValue struct {
	WatchPodRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPodRequest_FieldPathArrayItemValue = (*WatchPodRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPodRequest as interface{}
func (fpaiv *WatchPodRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPodRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPodRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPodRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPodRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPodRequest'
func (fpaiv *WatchPodRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPodRequest) bool {
	slice := fpaiv.WatchPodRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPodRequest_FieldPathArrayOfValues allows storing slice of values for WatchPodRequest fields according to their type
type WatchPodRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPodRequest_FieldPath
}

func ParseWatchPodRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPodRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPodRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPodRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPodRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPodRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPodRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPodRequest_FieldTerminalPathArrayOfValues struct {
	WatchPodRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPodRequest_FieldPathArrayOfValues = (*WatchPodRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPodRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPodRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*pod.Reference) {
			values = append(values, v)
		}
	case WatchPodRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*pod.Pod_FieldMask) {
			values = append(values, v)
		}
	case WatchPodRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPodRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*pod.Reference, bool) {
	res, ok := fpaov.values.([]*pod.Reference)
	return res, ok
}
func (fpaov *WatchPodRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*pod.Pod_FieldMask, bool) {
	res, ok := fpaov.values.([]*pod.Pod_FieldMask)
	return res, ok
}
func (fpaov *WatchPodRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPodResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPodResponse_FieldPathSelector
	Get(source *WatchPodResponse) []interface{}
	GetSingle(source *WatchPodResponse) (interface{}, bool)
	ClearValue(item *WatchPodResponse)

	// Those methods build corresponding WatchPodResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPodResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPodResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPodResponse_FieldPathArrayItemValue
}

type WatchPodResponse_FieldPathSelector int32

const (
	WatchPodResponse_FieldPathSelectorChange WatchPodResponse_FieldPathSelector = 0
)

func (s WatchPodResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPodResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodResponse: %d", s))
	}
}

func BuildWatchPodResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPodResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPodResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchPodResponse_FieldTerminalPath{selector: WatchPodResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPodResponse", fp)
}

func ParseWatchPodResponse_FieldPath(rawField string) (WatchPodResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPodResponse_FieldPath(fp)
}

func MustParseWatchPodResponse_FieldPath(rawField string) WatchPodResponse_FieldPath {
	fp, err := ParseWatchPodResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPodResponse_FieldTerminalPath struct {
	selector WatchPodResponse_FieldPathSelector
}

var _ WatchPodResponse_FieldPath = (*WatchPodResponse_FieldTerminalPath)(nil)

func (fp *WatchPodResponse_FieldTerminalPath) Selector() WatchPodResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPodResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPodResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPodResponse
func (fp *WatchPodResponse_FieldTerminalPath) Get(source *WatchPodResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPodResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPodResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPodResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPodResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPodResponse
func (fp *WatchPodResponse_FieldTerminalPath) GetSingle(source *WatchPodResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPodResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodResponse: %d", fp.selector))
	}
}

func (fp *WatchPodResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPodResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPodResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPodResponse_FieldPathSelectorChange:
		return (*pod.PodChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodResponse: %d", fp.selector))
	}
}

func (fp *WatchPodResponse_FieldTerminalPath) ClearValue(item *WatchPodResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPodResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPodResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPodResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPodResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPodResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPodResponse_FieldPathSelectorChange
}

func (fp *WatchPodResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPodResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPodResponse_FieldPathValue {
	switch fp.selector {
	case WatchPodResponse_FieldPathSelectorChange:
		return &WatchPodResponse_FieldTerminalPathValue{WatchPodResponse_FieldTerminalPath: *fp, value: value.(*pod.PodChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodResponse: %d", fp.selector))
	}
}

func (fp *WatchPodResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPodResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPodResponse_FieldPathArrayOfValues {
	fpaov := &WatchPodResponse_FieldTerminalPathArrayOfValues{WatchPodResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPodResponse_FieldPathSelectorChange:
		return &WatchPodResponse_FieldTerminalPathArrayOfValues{WatchPodResponse_FieldTerminalPath: *fp, values: values.([]*pod.PodChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPodResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPodResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPodResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodResponse: %d", fp.selector))
	}
}

func (fp *WatchPodResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPodResponse_FieldPathValue allows storing values for WatchPodResponse fields according to their type
type WatchPodResponse_FieldPathValue interface {
	WatchPodResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPodResponse)
	CompareWith(*WatchPodResponse) (cmp int, comparable bool)
}

func ParseWatchPodResponse_FieldPathValue(pathStr, valueStr string) (WatchPodResponse_FieldPathValue, error) {
	fp, err := ParseWatchPodResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPodResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPodResponse_FieldPathValue), nil
}

func MustParseWatchPodResponse_FieldPathValue(pathStr, valueStr string) WatchPodResponse_FieldPathValue {
	fpv, err := ParseWatchPodResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPodResponse_FieldTerminalPathValue struct {
	WatchPodResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPodResponse_FieldPathValue = (*WatchPodResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPodResponse' as interface{}
func (fpv *WatchPodResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPodResponse_FieldTerminalPathValue) AsChangeValue() (*pod.PodChange, bool) {
	res, ok := fpv.value.(*pod.PodChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchPodResponse
func (fpv *WatchPodResponse_FieldTerminalPathValue) SetTo(target **WatchPodResponse) {
	if *target == nil {
		*target = new(WatchPodResponse)
	}
	switch fpv.selector {
	case WatchPodResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*pod.PodChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPodResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPodResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPodResponse_FieldTerminalPathValue' with the value under path in 'WatchPodResponse'.
func (fpv *WatchPodResponse_FieldTerminalPathValue) CompareWith(source *WatchPodResponse) (int, bool) {
	switch fpv.selector {
	case WatchPodResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPodResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPodResponse))
}

// WatchPodResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPodResponse according to their type
// Present only for array (repeated) types.
type WatchPodResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPodResponse_FieldPath
	ContainsValue(*WatchPodResponse) bool
}

// ParseWatchPodResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPodResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPodResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPodResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPodResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPodResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPodResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPodResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPodResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPodResponse_FieldTerminalPathArrayItemValue struct {
	WatchPodResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPodResponse_FieldPathArrayItemValue = (*WatchPodResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPodResponse as interface{}
func (fpaiv *WatchPodResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPodResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPodResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPodResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPodResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPodResponse'
func (fpaiv *WatchPodResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPodResponse) bool {
	slice := fpaiv.WatchPodResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPodResponse_FieldPathArrayOfValues allows storing slice of values for WatchPodResponse fields according to their type
type WatchPodResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPodResponse_FieldPath
}

func ParseWatchPodResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPodResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPodResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPodResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPodResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPodResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPodResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPodResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPodResponse_FieldTerminalPathArrayOfValues struct {
	WatchPodResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPodResponse_FieldPathArrayOfValues = (*WatchPodResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPodResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPodResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*pod.PodChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPodResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*pod.PodChange, bool) {
	res, ok := fpaov.values.([]*pod.PodChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPodsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPodsRequest_FieldPathSelector
	Get(source *WatchPodsRequest) []interface{}
	GetSingle(source *WatchPodsRequest) (interface{}, bool)
	ClearValue(item *WatchPodsRequest)

	// Those methods build corresponding WatchPodsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPodsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPodsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPodsRequest_FieldPathArrayItemValue
}

type WatchPodsRequest_FieldPathSelector int32

const (
	WatchPodsRequest_FieldPathSelectorType         WatchPodsRequest_FieldPathSelector = 0
	WatchPodsRequest_FieldPathSelectorParent       WatchPodsRequest_FieldPathSelector = 1
	WatchPodsRequest_FieldPathSelectorPageSize     WatchPodsRequest_FieldPathSelector = 2
	WatchPodsRequest_FieldPathSelectorPageToken    WatchPodsRequest_FieldPathSelector = 3
	WatchPodsRequest_FieldPathSelectorOrderBy      WatchPodsRequest_FieldPathSelector = 4
	WatchPodsRequest_FieldPathSelectorResumeToken  WatchPodsRequest_FieldPathSelector = 5
	WatchPodsRequest_FieldPathSelectorStartingTime WatchPodsRequest_FieldPathSelector = 6
	WatchPodsRequest_FieldPathSelectorFilter       WatchPodsRequest_FieldPathSelector = 7
	WatchPodsRequest_FieldPathSelectorFieldMask    WatchPodsRequest_FieldPathSelector = 8
	WatchPodsRequest_FieldPathSelectorView         WatchPodsRequest_FieldPathSelector = 9
	WatchPodsRequest_FieldPathSelectorMaxChunkSize WatchPodsRequest_FieldPathSelector = 10
)

func (s WatchPodsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPodsRequest_FieldPathSelectorType:
		return "type"
	case WatchPodsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchPodsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchPodsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchPodsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchPodsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPodsRequest_FieldPathSelectorStartingTime:
		return "starting_time"
	case WatchPodsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchPodsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPodsRequest_FieldPathSelectorView:
		return "view"
	case WatchPodsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsRequest: %d", s))
	}
}

func BuildWatchPodsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPodsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPodsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorResumeToken}, nil
		case "starting_time", "startingTime", "starting-time":
			return &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorStartingTime}, nil
		case "filter":
			return &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPodsRequest", fp)
}

func ParseWatchPodsRequest_FieldPath(rawField string) (WatchPodsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPodsRequest_FieldPath(fp)
}

func MustParseWatchPodsRequest_FieldPath(rawField string) WatchPodsRequest_FieldPath {
	fp, err := ParseWatchPodsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPodsRequest_FieldTerminalPath struct {
	selector WatchPodsRequest_FieldPathSelector
}

var _ WatchPodsRequest_FieldPath = (*WatchPodsRequest_FieldTerminalPath)(nil)

func (fp *WatchPodsRequest_FieldTerminalPath) Selector() WatchPodsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPodsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPodsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPodsRequest
func (fp *WatchPodsRequest_FieldTerminalPath) Get(source *WatchPodsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPodsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchPodsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchPodsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchPodsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchPodsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchPodsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPodsRequest_FieldPathSelectorStartingTime:
			if source.StartingTime != nil {
				values = append(values, source.StartingTime)
			}
		case WatchPodsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchPodsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPodsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchPodsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPodsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPodsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPodsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPodsRequest
func (fp *WatchPodsRequest_FieldTerminalPath) GetSingle(source *WatchPodsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPodsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchPodsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchPodsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchPodsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchPodsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchPodsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPodsRequest_FieldPathSelectorStartingTime:
		res := source.GetStartingTime()
		return res, res != nil
	case WatchPodsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchPodsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPodsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchPodsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsRequest: %d", fp.selector))
	}
}

func (fp *WatchPodsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPodsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPodsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPodsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchPodsRequest_FieldPathSelectorParent:
		return (*pod.ParentReference)(nil)
	case WatchPodsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchPodsRequest_FieldPathSelectorPageToken:
		return (*pod.PagerCursor)(nil)
	case WatchPodsRequest_FieldPathSelectorOrderBy:
		return (*pod.OrderBy)(nil)
	case WatchPodsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchPodsRequest_FieldPathSelectorStartingTime:
		return (*timestamp.Timestamp)(nil)
	case WatchPodsRequest_FieldPathSelectorFilter:
		return (*pod.Filter)(nil)
	case WatchPodsRequest_FieldPathSelectorFieldMask:
		return (*pod.Pod_FieldMask)(nil)
	case WatchPodsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchPodsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsRequest: %d", fp.selector))
	}
}

func (fp *WatchPodsRequest_FieldTerminalPath) ClearValue(item *WatchPodsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPodsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchPodsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchPodsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchPodsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchPodsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchPodsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPodsRequest_FieldPathSelectorStartingTime:
			item.StartingTime = nil
		case WatchPodsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchPodsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPodsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchPodsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPodsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPodsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPodsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPodsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPodsRequest_FieldPathSelectorType ||
		fp.selector == WatchPodsRequest_FieldPathSelectorParent ||
		fp.selector == WatchPodsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchPodsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchPodsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchPodsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchPodsRequest_FieldPathSelectorStartingTime ||
		fp.selector == WatchPodsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchPodsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPodsRequest_FieldPathSelectorView ||
		fp.selector == WatchPodsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchPodsRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPodsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPodsRequest_FieldPathValue {
	switch fp.selector {
	case WatchPodsRequest_FieldPathSelectorType:
		return &WatchPodsRequest_FieldTerminalPathValue{WatchPodsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchPodsRequest_FieldPathSelectorParent:
		return &WatchPodsRequest_FieldTerminalPathValue{WatchPodsRequest_FieldTerminalPath: *fp, value: value.(*pod.ParentReference)}
	case WatchPodsRequest_FieldPathSelectorPageSize:
		return &WatchPodsRequest_FieldTerminalPathValue{WatchPodsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchPodsRequest_FieldPathSelectorPageToken:
		return &WatchPodsRequest_FieldTerminalPathValue{WatchPodsRequest_FieldTerminalPath: *fp, value: value.(*pod.PagerCursor)}
	case WatchPodsRequest_FieldPathSelectorOrderBy:
		return &WatchPodsRequest_FieldTerminalPathValue{WatchPodsRequest_FieldTerminalPath: *fp, value: value.(*pod.OrderBy)}
	case WatchPodsRequest_FieldPathSelectorResumeToken:
		return &WatchPodsRequest_FieldTerminalPathValue{WatchPodsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPodsRequest_FieldPathSelectorStartingTime:
		return &WatchPodsRequest_FieldTerminalPathValue{WatchPodsRequest_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case WatchPodsRequest_FieldPathSelectorFilter:
		return &WatchPodsRequest_FieldTerminalPathValue{WatchPodsRequest_FieldTerminalPath: *fp, value: value.(*pod.Filter)}
	case WatchPodsRequest_FieldPathSelectorFieldMask:
		return &WatchPodsRequest_FieldTerminalPathValue{WatchPodsRequest_FieldTerminalPath: *fp, value: value.(*pod.Pod_FieldMask)}
	case WatchPodsRequest_FieldPathSelectorView:
		return &WatchPodsRequest_FieldTerminalPathValue{WatchPodsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchPodsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPodsRequest_FieldTerminalPathValue{WatchPodsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsRequest: %d", fp.selector))
	}
}

func (fp *WatchPodsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPodsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPodsRequest_FieldPathArrayOfValues {
	fpaov := &WatchPodsRequest_FieldTerminalPathArrayOfValues{WatchPodsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPodsRequest_FieldPathSelectorType:
		return &WatchPodsRequest_FieldTerminalPathArrayOfValues{WatchPodsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchPodsRequest_FieldPathSelectorParent:
		return &WatchPodsRequest_FieldTerminalPathArrayOfValues{WatchPodsRequest_FieldTerminalPath: *fp, values: values.([]*pod.ParentReference)}
	case WatchPodsRequest_FieldPathSelectorPageSize:
		return &WatchPodsRequest_FieldTerminalPathArrayOfValues{WatchPodsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchPodsRequest_FieldPathSelectorPageToken:
		return &WatchPodsRequest_FieldTerminalPathArrayOfValues{WatchPodsRequest_FieldTerminalPath: *fp, values: values.([]*pod.PagerCursor)}
	case WatchPodsRequest_FieldPathSelectorOrderBy:
		return &WatchPodsRequest_FieldTerminalPathArrayOfValues{WatchPodsRequest_FieldTerminalPath: *fp, values: values.([]*pod.OrderBy)}
	case WatchPodsRequest_FieldPathSelectorResumeToken:
		return &WatchPodsRequest_FieldTerminalPathArrayOfValues{WatchPodsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPodsRequest_FieldPathSelectorStartingTime:
		return &WatchPodsRequest_FieldTerminalPathArrayOfValues{WatchPodsRequest_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case WatchPodsRequest_FieldPathSelectorFilter:
		return &WatchPodsRequest_FieldTerminalPathArrayOfValues{WatchPodsRequest_FieldTerminalPath: *fp, values: values.([]*pod.Filter)}
	case WatchPodsRequest_FieldPathSelectorFieldMask:
		return &WatchPodsRequest_FieldTerminalPathArrayOfValues{WatchPodsRequest_FieldTerminalPath: *fp, values: values.([]*pod.Pod_FieldMask)}
	case WatchPodsRequest_FieldPathSelectorView:
		return &WatchPodsRequest_FieldTerminalPathArrayOfValues{WatchPodsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchPodsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPodsRequest_FieldTerminalPathArrayOfValues{WatchPodsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPodsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPodsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPodsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsRequest: %d", fp.selector))
	}
}

func (fp *WatchPodsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPodsRequest_FieldPathValue allows storing values for WatchPodsRequest fields according to their type
type WatchPodsRequest_FieldPathValue interface {
	WatchPodsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPodsRequest)
	CompareWith(*WatchPodsRequest) (cmp int, comparable bool)
}

func ParseWatchPodsRequest_FieldPathValue(pathStr, valueStr string) (WatchPodsRequest_FieldPathValue, error) {
	fp, err := ParseWatchPodsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPodsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPodsRequest_FieldPathValue), nil
}

func MustParseWatchPodsRequest_FieldPathValue(pathStr, valueStr string) WatchPodsRequest_FieldPathValue {
	fpv, err := ParseWatchPodsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPodsRequest_FieldTerminalPathValue struct {
	WatchPodsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPodsRequest_FieldPathValue = (*WatchPodsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPodsRequest' as interface{}
func (fpv *WatchPodsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPodsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchPodsRequest_FieldTerminalPathValue) AsParentValue() (*pod.ParentReference, bool) {
	res, ok := fpv.value.(*pod.ParentReference)
	return res, ok
}
func (fpv *WatchPodsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchPodsRequest_FieldTerminalPathValue) AsPageTokenValue() (*pod.PagerCursor, bool) {
	res, ok := fpv.value.(*pod.PagerCursor)
	return res, ok
}
func (fpv *WatchPodsRequest_FieldTerminalPathValue) AsOrderByValue() (*pod.OrderBy, bool) {
	res, ok := fpv.value.(*pod.OrderBy)
	return res, ok
}
func (fpv *WatchPodsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPodsRequest_FieldTerminalPathValue) AsStartingTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *WatchPodsRequest_FieldTerminalPathValue) AsFilterValue() (*pod.Filter, bool) {
	res, ok := fpv.value.(*pod.Filter)
	return res, ok
}
func (fpv *WatchPodsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*pod.Pod_FieldMask, bool) {
	res, ok := fpv.value.(*pod.Pod_FieldMask)
	return res, ok
}
func (fpv *WatchPodsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchPodsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchPodsRequest
func (fpv *WatchPodsRequest_FieldTerminalPathValue) SetTo(target **WatchPodsRequest) {
	if *target == nil {
		*target = new(WatchPodsRequest)
	}
	switch fpv.selector {
	case WatchPodsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchPodsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*pod.ParentReference)
	case WatchPodsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchPodsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*pod.PagerCursor)
	case WatchPodsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*pod.OrderBy)
	case WatchPodsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPodsRequest_FieldPathSelectorStartingTime:
		(*target).StartingTime = fpv.value.(*timestamp.Timestamp)
	case WatchPodsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*pod.Filter)
	case WatchPodsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*pod.Pod_FieldMask)
	case WatchPodsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchPodsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPodsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPodsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPodsRequest_FieldTerminalPathValue' with the value under path in 'WatchPodsRequest'.
func (fpv *WatchPodsRequest_FieldTerminalPathValue) CompareWith(source *WatchPodsRequest) (int, bool) {
	switch fpv.selector {
	case WatchPodsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPodsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*pod.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPodsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPodsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchPodsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchPodsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPodsRequest_FieldPathSelectorStartingTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetStartingTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPodsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchPodsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPodsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPodsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPodsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPodsRequest))
}

// WatchPodsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPodsRequest according to their type
// Present only for array (repeated) types.
type WatchPodsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPodsRequest_FieldPath
	ContainsValue(*WatchPodsRequest) bool
}

// ParseWatchPodsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPodsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPodsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPodsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPodsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPodsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPodsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPodsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPodsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPodsRequest_FieldTerminalPathArrayItemValue struct {
	WatchPodsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPodsRequest_FieldPathArrayItemValue = (*WatchPodsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPodsRequest as interface{}
func (fpaiv *WatchPodsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPodsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPodsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPodsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPodsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPodsRequest'
func (fpaiv *WatchPodsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPodsRequest) bool {
	slice := fpaiv.WatchPodsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPodsRequest_FieldPathArrayOfValues allows storing slice of values for WatchPodsRequest fields according to their type
type WatchPodsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPodsRequest_FieldPath
}

func ParseWatchPodsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPodsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPodsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPodsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPodsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPodsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPodsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPodsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPodsRequest_FieldTerminalPathArrayOfValues struct {
	WatchPodsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPodsRequest_FieldPathArrayOfValues = (*WatchPodsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPodsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPodsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchPodsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*pod.ParentReference) {
			values = append(values, v)
		}
	case WatchPodsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchPodsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*pod.PagerCursor) {
			values = append(values, v)
		}
	case WatchPodsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*pod.OrderBy) {
			values = append(values, v)
		}
	case WatchPodsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPodsRequest_FieldPathSelectorStartingTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case WatchPodsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*pod.Filter) {
			values = append(values, v)
		}
	case WatchPodsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*pod.Pod_FieldMask) {
			values = append(values, v)
		}
	case WatchPodsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchPodsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPodsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchPodsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*pod.ParentReference, bool) {
	res, ok := fpaov.values.([]*pod.ParentReference)
	return res, ok
}
func (fpaov *WatchPodsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchPodsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*pod.PagerCursor, bool) {
	res, ok := fpaov.values.([]*pod.PagerCursor)
	return res, ok
}
func (fpaov *WatchPodsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*pod.OrderBy, bool) {
	res, ok := fpaov.values.([]*pod.OrderBy)
	return res, ok
}
func (fpaov *WatchPodsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPodsRequest_FieldTerminalPathArrayOfValues) AsStartingTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *WatchPodsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*pod.Filter, bool) {
	res, ok := fpaov.values.([]*pod.Filter)
	return res, ok
}
func (fpaov *WatchPodsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*pod.Pod_FieldMask, bool) {
	res, ok := fpaov.values.([]*pod.Pod_FieldMask)
	return res, ok
}
func (fpaov *WatchPodsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchPodsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPodsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPodsResponse_FieldPathSelector
	Get(source *WatchPodsResponse) []interface{}
	GetSingle(source *WatchPodsResponse) (interface{}, bool)
	ClearValue(item *WatchPodsResponse)

	// Those methods build corresponding WatchPodsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPodsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPodsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPodsResponse_FieldPathArrayItemValue
}

type WatchPodsResponse_FieldPathSelector int32

const (
	WatchPodsResponse_FieldPathSelectorPodChanges      WatchPodsResponse_FieldPathSelector = 0
	WatchPodsResponse_FieldPathSelectorIsCurrent       WatchPodsResponse_FieldPathSelector = 1
	WatchPodsResponse_FieldPathSelectorPageTokenChange WatchPodsResponse_FieldPathSelector = 2
	WatchPodsResponse_FieldPathSelectorResumeToken     WatchPodsResponse_FieldPathSelector = 3
	WatchPodsResponse_FieldPathSelectorSnapshotSize    WatchPodsResponse_FieldPathSelector = 4
	WatchPodsResponse_FieldPathSelectorIsSoftReset     WatchPodsResponse_FieldPathSelector = 5
	WatchPodsResponse_FieldPathSelectorIsHardReset     WatchPodsResponse_FieldPathSelector = 6
)

func (s WatchPodsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPodsResponse_FieldPathSelectorPodChanges:
		return "pod_changes"
	case WatchPodsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchPodsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchPodsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPodsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchPodsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchPodsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", s))
	}
}

func BuildWatchPodsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPodsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPodsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "pod_changes", "podChanges", "pod-changes":
			return &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorPodChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchPodsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchPodsResponse_FieldSubPath{selector: WatchPodsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPodsResponse", fp)
}

func ParseWatchPodsResponse_FieldPath(rawField string) (WatchPodsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPodsResponse_FieldPath(fp)
}

func MustParseWatchPodsResponse_FieldPath(rawField string) WatchPodsResponse_FieldPath {
	fp, err := ParseWatchPodsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPodsResponse_FieldTerminalPath struct {
	selector WatchPodsResponse_FieldPathSelector
}

var _ WatchPodsResponse_FieldPath = (*WatchPodsResponse_FieldTerminalPath)(nil)

func (fp *WatchPodsResponse_FieldTerminalPath) Selector() WatchPodsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPodsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPodsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPodsResponse
func (fp *WatchPodsResponse_FieldTerminalPath) Get(source *WatchPodsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPodsResponse_FieldPathSelectorPodChanges:
			for _, value := range source.GetPodChanges() {
				values = append(values, value)
			}
		case WatchPodsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchPodsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchPodsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPodsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchPodsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchPodsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPodsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPodsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPodsResponse
func (fp *WatchPodsResponse_FieldTerminalPath) GetSingle(source *WatchPodsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPodsResponse_FieldPathSelectorPodChanges:
		res := source.GetPodChanges()
		return res, res != nil
	case WatchPodsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchPodsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchPodsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPodsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchPodsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchPodsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fp.selector))
	}
}

func (fp *WatchPodsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPodsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPodsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPodsResponse_FieldPathSelectorPodChanges:
		return ([]*pod.PodChange)(nil)
	case WatchPodsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchPodsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchPodsResponse_PageTokenChange)(nil)
	case WatchPodsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchPodsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchPodsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchPodsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fp.selector))
	}
}

func (fp *WatchPodsResponse_FieldTerminalPath) ClearValue(item *WatchPodsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPodsResponse_FieldPathSelectorPodChanges:
			item.PodChanges = nil
		case WatchPodsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchPodsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchPodsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPodsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchPodsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchPodsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPodsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPodsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPodsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPodsResponse_FieldPathSelectorPodChanges ||
		fp.selector == WatchPodsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchPodsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchPodsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchPodsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchPodsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchPodsResponse_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPodsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPodsResponse_FieldPathValue {
	switch fp.selector {
	case WatchPodsResponse_FieldPathSelectorPodChanges:
		return &WatchPodsResponse_FieldTerminalPathValue{WatchPodsResponse_FieldTerminalPath: *fp, value: value.([]*pod.PodChange)}
	case WatchPodsResponse_FieldPathSelectorIsCurrent:
		return &WatchPodsResponse_FieldTerminalPathValue{WatchPodsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPodsResponse_FieldPathSelectorPageTokenChange:
		return &WatchPodsResponse_FieldTerminalPathValue{WatchPodsResponse_FieldTerminalPath: *fp, value: value.(*WatchPodsResponse_PageTokenChange)}
	case WatchPodsResponse_FieldPathSelectorResumeToken:
		return &WatchPodsResponse_FieldTerminalPathValue{WatchPodsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPodsResponse_FieldPathSelectorSnapshotSize:
		return &WatchPodsResponse_FieldTerminalPathValue{WatchPodsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchPodsResponse_FieldPathSelectorIsSoftReset:
		return &WatchPodsResponse_FieldTerminalPathValue{WatchPodsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPodsResponse_FieldPathSelectorIsHardReset:
		return &WatchPodsResponse_FieldTerminalPathValue{WatchPodsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fp.selector))
	}
}

func (fp *WatchPodsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPodsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPodsResponse_FieldPathArrayOfValues {
	fpaov := &WatchPodsResponse_FieldTerminalPathArrayOfValues{WatchPodsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPodsResponse_FieldPathSelectorPodChanges:
		return &WatchPodsResponse_FieldTerminalPathArrayOfValues{WatchPodsResponse_FieldTerminalPath: *fp, values: values.([][]*pod.PodChange)}
	case WatchPodsResponse_FieldPathSelectorIsCurrent:
		return &WatchPodsResponse_FieldTerminalPathArrayOfValues{WatchPodsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPodsResponse_FieldPathSelectorPageTokenChange:
		return &WatchPodsResponse_FieldTerminalPathArrayOfValues{WatchPodsResponse_FieldTerminalPath: *fp, values: values.([]*WatchPodsResponse_PageTokenChange)}
	case WatchPodsResponse_FieldPathSelectorResumeToken:
		return &WatchPodsResponse_FieldTerminalPathArrayOfValues{WatchPodsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPodsResponse_FieldPathSelectorSnapshotSize:
		return &WatchPodsResponse_FieldTerminalPathArrayOfValues{WatchPodsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchPodsResponse_FieldPathSelectorIsSoftReset:
		return &WatchPodsResponse_FieldTerminalPathArrayOfValues{WatchPodsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPodsResponse_FieldPathSelectorIsHardReset:
		return &WatchPodsResponse_FieldTerminalPathArrayOfValues{WatchPodsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPodsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPodsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPodsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchPodsResponse_FieldPathSelectorPodChanges:
		return &WatchPodsResponse_FieldTerminalPathArrayItemValue{WatchPodsResponse_FieldTerminalPath: *fp, value: value.(*pod.PodChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fp.selector))
	}
}

func (fp *WatchPodsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchPodsResponse_FieldSubPath struct {
	selector WatchPodsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchPodsResponse_FieldPath = (*WatchPodsResponse_FieldSubPath)(nil)

func (fps *WatchPodsResponse_FieldSubPath) Selector() WatchPodsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchPodsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchPodsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchPodsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchPodsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchPodsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchPodsResponse
func (fps *WatchPodsResponse_FieldSubPath) Get(source *WatchPodsResponse) (values []interface{}) {
	switch fps.selector {
	case WatchPodsResponse_FieldPathSelectorPageTokenChange:
		values = append(values, fps.subPath.GetRaw(source.GetPageTokenChange())...)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchPodsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchPodsResponse))
}

// GetSingle returns value of selected field from source WatchPodsResponse
func (fps *WatchPodsResponse_FieldSubPath) GetSingle(source *WatchPodsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchPodsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fps.selector))
	}
}

func (fps *WatchPodsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchPodsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchPodsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchPodsResponse_FieldSubPath) ClearValue(item *WatchPodsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchPodsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchPodsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchPodsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchPodsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchPodsResponse_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&WatchPodsResponse_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *WatchPodsResponse_FieldSubPath) WithIValue(value interface{}) WatchPodsResponse_FieldPathValue {
	return &WatchPodsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchPodsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchPodsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchPodsResponse_FieldPathArrayOfValues {
	return &WatchPodsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchPodsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchPodsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchPodsResponse_FieldPathArrayItemValue {
	return &WatchPodsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchPodsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchPodsResponse_FieldPathValue allows storing values for WatchPodsResponse fields according to their type
type WatchPodsResponse_FieldPathValue interface {
	WatchPodsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPodsResponse)
	CompareWith(*WatchPodsResponse) (cmp int, comparable bool)
}

func ParseWatchPodsResponse_FieldPathValue(pathStr, valueStr string) (WatchPodsResponse_FieldPathValue, error) {
	fp, err := ParseWatchPodsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPodsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPodsResponse_FieldPathValue), nil
}

func MustParseWatchPodsResponse_FieldPathValue(pathStr, valueStr string) WatchPodsResponse_FieldPathValue {
	fpv, err := ParseWatchPodsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPodsResponse_FieldTerminalPathValue struct {
	WatchPodsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPodsResponse_FieldPathValue = (*WatchPodsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPodsResponse' as interface{}
func (fpv *WatchPodsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPodsResponse_FieldTerminalPathValue) AsPodChangesValue() ([]*pod.PodChange, bool) {
	res, ok := fpv.value.([]*pod.PodChange)
	return res, ok
}
func (fpv *WatchPodsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPodsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchPodsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchPodsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchPodsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPodsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchPodsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPodsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchPodsResponse
func (fpv *WatchPodsResponse_FieldTerminalPathValue) SetTo(target **WatchPodsResponse) {
	if *target == nil {
		*target = new(WatchPodsResponse)
	}
	switch fpv.selector {
	case WatchPodsResponse_FieldPathSelectorPodChanges:
		(*target).PodChanges = fpv.value.([]*pod.PodChange)
	case WatchPodsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchPodsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchPodsResponse_PageTokenChange)
	case WatchPodsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPodsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchPodsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchPodsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPodsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPodsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPodsResponse_FieldTerminalPathValue' with the value under path in 'WatchPodsResponse'.
func (fpv *WatchPodsResponse_FieldTerminalPathValue) CompareWith(source *WatchPodsResponse) (int, bool) {
	switch fpv.selector {
	case WatchPodsResponse_FieldPathSelectorPodChanges:
		return 0, false
	case WatchPodsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPodsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchPodsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPodsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPodsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPodsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPodsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPodsResponse))
}

type WatchPodsResponse_FieldSubPathValue struct {
	WatchPodsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchPodsResponse_FieldPathValue = (*WatchPodsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchPodsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchPodsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchPodsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchPodsResponse_FieldSubPathValue) SetTo(target **WatchPodsResponse) {
	if *target == nil {
		*target = new(WatchPodsResponse)
	}
	switch fpvs.Selector() {
	case WatchPodsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchPodsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPodsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPodsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchPodsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchPodsResponse_FieldSubPathValue) CompareWith(source *WatchPodsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchPodsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchPodsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPodsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchPodsResponse))
}

// WatchPodsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPodsResponse according to their type
// Present only for array (repeated) types.
type WatchPodsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPodsResponse_FieldPath
	ContainsValue(*WatchPodsResponse) bool
}

// ParseWatchPodsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPodsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPodsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPodsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPodsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPodsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPodsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPodsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPodsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPodsResponse_FieldTerminalPathArrayItemValue struct {
	WatchPodsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPodsResponse_FieldPathArrayItemValue = (*WatchPodsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPodsResponse as interface{}
func (fpaiv *WatchPodsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchPodsResponse_FieldTerminalPathArrayItemValue) AsPodChangesItemValue() (*pod.PodChange, bool) {
	res, ok := fpaiv.value.(*pod.PodChange)
	return res, ok
}

func (fpaiv *WatchPodsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPodsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPodsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPodsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPodsResponse'
func (fpaiv *WatchPodsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPodsResponse) bool {
	slice := fpaiv.WatchPodsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchPodsResponse_FieldSubPathArrayItemValue struct {
	WatchPodsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchPodsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchPodsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchPodsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchPodsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPodsResponse'
func (fpaivs *WatchPodsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchPodsResponse) bool {
	switch fpaivs.Selector() {
	case WatchPodsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchPodsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse: %d", fpaivs.Selector()))
	}
}

// WatchPodsResponse_FieldPathArrayOfValues allows storing slice of values for WatchPodsResponse fields according to their type
type WatchPodsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPodsResponse_FieldPath
}

func ParseWatchPodsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPodsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPodsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPodsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPodsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPodsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPodsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPodsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPodsResponse_FieldTerminalPathArrayOfValues struct {
	WatchPodsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPodsResponse_FieldPathArrayOfValues = (*WatchPodsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPodsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPodsResponse_FieldPathSelectorPodChanges:
		for _, v := range fpaov.values.([][]*pod.PodChange) {
			values = append(values, v)
		}
	case WatchPodsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPodsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchPodsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchPodsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPodsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchPodsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPodsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPodsResponse_FieldTerminalPathArrayOfValues) AsPodChangesArrayOfValues() ([][]*pod.PodChange, bool) {
	res, ok := fpaov.values.([][]*pod.PodChange)
	return res, ok
}
func (fpaov *WatchPodsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPodsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchPodsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchPodsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchPodsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPodsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchPodsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPodsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchPodsResponse_FieldSubPathArrayOfValues struct {
	WatchPodsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchPodsResponse_FieldPathArrayOfValues = (*WatchPodsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchPodsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchPodsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchPodsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchPodsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPodsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPodsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchPodsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchPodsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchPodsResponse_PageTokenChange)

	// Those methods build corresponding WatchPodsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPodsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPodsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPodsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchPodsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchPodsResponsePageTokenChange_FieldPathSelector = 0
	WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchPodsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchPodsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchPodsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchPodsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPodsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchPodsResponsePageTokenChange_FieldTerminalPath{selector: WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchPodsResponsePageTokenChange_FieldTerminalPath{selector: WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPodsResponse_PageTokenChange", fp)
}

func ParseWatchPodsResponsePageTokenChange_FieldPath(rawField string) (WatchPodsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPodsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchPodsResponsePageTokenChange_FieldPath(rawField string) WatchPodsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchPodsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPodsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchPodsResponsePageTokenChange_FieldPathSelector
}

var _ WatchPodsResponsePageTokenChange_FieldPath = (*WatchPodsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) Selector() WatchPodsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPodsResponse_PageTokenChange
func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchPodsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPodsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPodsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchPodsResponse_PageTokenChange
func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchPodsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPodsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*pod.PagerCursor)(nil)
	case WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*pod.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchPodsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPodsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPodsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchPodsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPodsResponsePageTokenChange_FieldTerminalPathValue{WatchPodsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*pod.PagerCursor)}
	case WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPodsResponsePageTokenChange_FieldTerminalPathValue{WatchPodsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*pod.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPodsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchPodsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPodsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPodsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPodsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*pod.PagerCursor)}
	case WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPodsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPodsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*pod.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPodsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPodsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPodsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchPodsResponsePageTokenChange_FieldPathValue interface {
	WatchPodsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPodsResponse_PageTokenChange)
	CompareWith(*WatchPodsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchPodsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchPodsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchPodsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPodsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchPodsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchPodsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchPodsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPodsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchPodsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPodsResponsePageTokenChange_FieldPathValue = (*WatchPodsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchPodsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPodsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*pod.PagerCursor, bool) {
	res, ok := fpv.value.(*pod.PagerCursor)
	return res, ok
}
func (fpv *WatchPodsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*pod.PagerCursor, bool) {
	res, ok := fpv.value.(*pod.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchPodsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchPodsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchPodsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*pod.PagerCursor)
	case WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*pod.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPodsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPodsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPodsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchPodsResponse_PageTokenChange'.
func (fpv *WatchPodsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchPodsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPodsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPodsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPodsResponse_PageTokenChange))
}

// WatchPodsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchPodsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPodsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchPodsResponse_PageTokenChange) bool
}

// ParseWatchPodsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPodsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPodsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPodsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPodsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchPodsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchPodsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPodsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPodsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchPodsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPodsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchPodsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPodsResponse_PageTokenChange as interface{}
func (fpaiv *WatchPodsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPodsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPodsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPodsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPodsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchPodsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPodsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchPodsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPodsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchPodsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPodsResponsePageTokenChange_FieldPath
}

func ParseWatchPodsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPodsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPodsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPodsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchPodsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPodsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPodsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPodsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchPodsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchPodsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchPodsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPodsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*pod.PagerCursor) {
			values = append(values, v)
		}
	case WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*pod.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPodsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*pod.PagerCursor, bool) {
	res, ok := fpaov.values.([]*pod.PagerCursor)
	return res, ok
}
func (fpaov *WatchPodsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*pod.PagerCursor, bool) {
	res, ok := fpaov.values.([]*pod.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreatePodRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreatePodRequest_FieldPathSelector
	Get(source *CreatePodRequest) []interface{}
	GetSingle(source *CreatePodRequest) (interface{}, bool)
	ClearValue(item *CreatePodRequest)

	// Those methods build corresponding CreatePodRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreatePodRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreatePodRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreatePodRequest_FieldPathArrayItemValue
}

type CreatePodRequest_FieldPathSelector int32

const (
	CreatePodRequest_FieldPathSelectorParent CreatePodRequest_FieldPathSelector = 0
	CreatePodRequest_FieldPathSelectorPod    CreatePodRequest_FieldPathSelector = 1
)

func (s CreatePodRequest_FieldPathSelector) String() string {
	switch s {
	case CreatePodRequest_FieldPathSelectorParent:
		return "parent"
	case CreatePodRequest_FieldPathSelectorPod:
		return "pod"
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", s))
	}
}

func BuildCreatePodRequest_FieldPath(fp gotenobject.RawFieldPath) (CreatePodRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreatePodRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreatePodRequest_FieldTerminalPath{selector: CreatePodRequest_FieldPathSelectorParent}, nil
		case "pod":
			return &CreatePodRequest_FieldTerminalPath{selector: CreatePodRequest_FieldPathSelectorPod}, nil
		}
	} else {
		switch fp[0] {
		case "pod":
			if subpath, err := pod.BuildPod_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreatePodRequest_FieldSubPath{selector: CreatePodRequest_FieldPathSelectorPod, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreatePodRequest", fp)
}

func ParseCreatePodRequest_FieldPath(rawField string) (CreatePodRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreatePodRequest_FieldPath(fp)
}

func MustParseCreatePodRequest_FieldPath(rawField string) CreatePodRequest_FieldPath {
	fp, err := ParseCreatePodRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreatePodRequest_FieldTerminalPath struct {
	selector CreatePodRequest_FieldPathSelector
}

var _ CreatePodRequest_FieldPath = (*CreatePodRequest_FieldTerminalPath)(nil)

func (fp *CreatePodRequest_FieldTerminalPath) Selector() CreatePodRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreatePodRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreatePodRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreatePodRequest
func (fp *CreatePodRequest_FieldTerminalPath) Get(source *CreatePodRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreatePodRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreatePodRequest_FieldPathSelectorPod:
			if source.Pod != nil {
				values = append(values, source.Pod)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreatePodRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreatePodRequest))
}

// GetSingle returns value pointed by specific field of from source CreatePodRequest
func (fp *CreatePodRequest_FieldTerminalPath) GetSingle(source *CreatePodRequest) (interface{}, bool) {
	switch fp.selector {
	case CreatePodRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreatePodRequest_FieldPathSelectorPod:
		res := source.GetPod()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fp.selector))
	}
}

func (fp *CreatePodRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreatePodRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreatePodRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreatePodRequest_FieldPathSelectorParent:
		return (*pod.ParentReference)(nil)
	case CreatePodRequest_FieldPathSelectorPod:
		return (*pod.Pod)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fp.selector))
	}
}

func (fp *CreatePodRequest_FieldTerminalPath) ClearValue(item *CreatePodRequest) {
	if item != nil {
		switch fp.selector {
		case CreatePodRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreatePodRequest_FieldPathSelectorPod:
			item.Pod = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fp.selector))
		}
	}
}

func (fp *CreatePodRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreatePodRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreatePodRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreatePodRequest_FieldPathSelectorParent
}

func (fp *CreatePodRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *CreatePodRequest_FieldTerminalPath) WithIValue(value interface{}) CreatePodRequest_FieldPathValue {
	switch fp.selector {
	case CreatePodRequest_FieldPathSelectorParent:
		return &CreatePodRequest_FieldTerminalPathValue{CreatePodRequest_FieldTerminalPath: *fp, value: value.(*pod.ParentReference)}
	case CreatePodRequest_FieldPathSelectorPod:
		return &CreatePodRequest_FieldTerminalPathValue{CreatePodRequest_FieldTerminalPath: *fp, value: value.(*pod.Pod)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fp.selector))
	}
}

func (fp *CreatePodRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreatePodRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreatePodRequest_FieldPathArrayOfValues {
	fpaov := &CreatePodRequest_FieldTerminalPathArrayOfValues{CreatePodRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreatePodRequest_FieldPathSelectorParent:
		return &CreatePodRequest_FieldTerminalPathArrayOfValues{CreatePodRequest_FieldTerminalPath: *fp, values: values.([]*pod.ParentReference)}
	case CreatePodRequest_FieldPathSelectorPod:
		return &CreatePodRequest_FieldTerminalPathArrayOfValues{CreatePodRequest_FieldTerminalPath: *fp, values: values.([]*pod.Pod)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreatePodRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreatePodRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreatePodRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fp.selector))
	}
}

func (fp *CreatePodRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreatePodRequest_FieldSubPath struct {
	selector CreatePodRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreatePodRequest_FieldPath = (*CreatePodRequest_FieldSubPath)(nil)

func (fps *CreatePodRequest_FieldSubPath) Selector() CreatePodRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreatePodRequest_FieldSubPath) AsPodSubPath() (pod.Pod_FieldPath, bool) {
	res, ok := fps.subPath.(pod.Pod_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreatePodRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreatePodRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreatePodRequest
func (fps *CreatePodRequest_FieldSubPath) Get(source *CreatePodRequest) (values []interface{}) {
	switch fps.selector {
	case CreatePodRequest_FieldPathSelectorPod:
		values = append(values, fps.subPath.GetRaw(source.GetPod())...)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fps.selector))
	}
	return
}

func (fps *CreatePodRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreatePodRequest))
}

// GetSingle returns value of selected field from source CreatePodRequest
func (fps *CreatePodRequest_FieldSubPath) GetSingle(source *CreatePodRequest) (interface{}, bool) {
	switch fps.selector {
	case CreatePodRequest_FieldPathSelectorPod:
		if source.GetPod() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPod())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fps.selector))
	}
}

func (fps *CreatePodRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreatePodRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreatePodRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreatePodRequest_FieldSubPath) ClearValue(item *CreatePodRequest) {
	if item != nil {
		switch fps.selector {
		case CreatePodRequest_FieldPathSelectorPod:
			fps.subPath.ClearValueRaw(item.Pod)
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fps.selector))
		}
	}
}

func (fps *CreatePodRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreatePodRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreatePodRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreatePodRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&CreatePodRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *CreatePodRequest_FieldSubPath) WithIValue(value interface{}) CreatePodRequest_FieldPathValue {
	return &CreatePodRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreatePodRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreatePodRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreatePodRequest_FieldPathArrayOfValues {
	return &CreatePodRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreatePodRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreatePodRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreatePodRequest_FieldPathArrayItemValue {
	return &CreatePodRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreatePodRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreatePodRequest_FieldPathValue allows storing values for CreatePodRequest fields according to their type
type CreatePodRequest_FieldPathValue interface {
	CreatePodRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreatePodRequest)
	CompareWith(*CreatePodRequest) (cmp int, comparable bool)
}

func ParseCreatePodRequest_FieldPathValue(pathStr, valueStr string) (CreatePodRequest_FieldPathValue, error) {
	fp, err := ParseCreatePodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePodRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreatePodRequest_FieldPathValue), nil
}

func MustParseCreatePodRequest_FieldPathValue(pathStr, valueStr string) CreatePodRequest_FieldPathValue {
	fpv, err := ParseCreatePodRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreatePodRequest_FieldTerminalPathValue struct {
	CreatePodRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePodRequest_FieldPathValue = (*CreatePodRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreatePodRequest' as interface{}
func (fpv *CreatePodRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreatePodRequest_FieldTerminalPathValue) AsParentValue() (*pod.ParentReference, bool) {
	res, ok := fpv.value.(*pod.ParentReference)
	return res, ok
}
func (fpv *CreatePodRequest_FieldTerminalPathValue) AsPodValue() (*pod.Pod, bool) {
	res, ok := fpv.value.(*pod.Pod)
	return res, ok
}

// SetTo stores value for selected field for object CreatePodRequest
func (fpv *CreatePodRequest_FieldTerminalPathValue) SetTo(target **CreatePodRequest) {
	if *target == nil {
		*target = new(CreatePodRequest)
	}
	switch fpv.selector {
	case CreatePodRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*pod.ParentReference)
	case CreatePodRequest_FieldPathSelectorPod:
		(*target).Pod = fpv.value.(*pod.Pod)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePodRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePodRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreatePodRequest_FieldTerminalPathValue' with the value under path in 'CreatePodRequest'.
func (fpv *CreatePodRequest_FieldTerminalPathValue) CompareWith(source *CreatePodRequest) (int, bool) {
	switch fpv.selector {
	case CreatePodRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*pod.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreatePodRequest_FieldPathSelectorPod:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePodRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreatePodRequest))
}

type CreatePodRequest_FieldSubPathValue struct {
	CreatePodRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreatePodRequest_FieldPathValue = (*CreatePodRequest_FieldSubPathValue)(nil)

func (fpvs *CreatePodRequest_FieldSubPathValue) AsPodPathValue() (pod.Pod_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(pod.Pod_FieldPathValue)
	return res, ok
}

func (fpvs *CreatePodRequest_FieldSubPathValue) SetTo(target **CreatePodRequest) {
	if *target == nil {
		*target = new(CreatePodRequest)
	}
	switch fpvs.Selector() {
	case CreatePodRequest_FieldPathSelectorPod:
		fpvs.subPathValue.(pod.Pod_FieldPathValue).SetTo(&(*target).Pod)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePodRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePodRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreatePodRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreatePodRequest_FieldSubPathValue) CompareWith(source *CreatePodRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreatePodRequest_FieldPathSelectorPod:
		return fpvs.subPathValue.(pod.Pod_FieldPathValue).CompareWith(source.GetPod())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePodRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreatePodRequest))
}

// CreatePodRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreatePodRequest according to their type
// Present only for array (repeated) types.
type CreatePodRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreatePodRequest_FieldPath
	ContainsValue(*CreatePodRequest) bool
}

// ParseCreatePodRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreatePodRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreatePodRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreatePodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePodRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreatePodRequest_FieldPathArrayItemValue), nil
}

func MustParseCreatePodRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreatePodRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreatePodRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreatePodRequest_FieldTerminalPathArrayItemValue struct {
	CreatePodRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePodRequest_FieldPathArrayItemValue = (*CreatePodRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreatePodRequest as interface{}
func (fpaiv *CreatePodRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreatePodRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreatePodRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreatePodRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreatePodRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePodRequest'
func (fpaiv *CreatePodRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreatePodRequest) bool {
	slice := fpaiv.CreatePodRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreatePodRequest_FieldSubPathArrayItemValue struct {
	CreatePodRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreatePodRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreatePodRequest_FieldSubPathArrayItemValue) AsPodPathItemValue() (pod.Pod_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(pod.Pod_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePodRequest'
func (fpaivs *CreatePodRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreatePodRequest) bool {
	switch fpaivs.Selector() {
	case CreatePodRequest_FieldPathSelectorPod:
		return fpaivs.subPathItemValue.(pod.Pod_FieldPathArrayItemValue).ContainsValue(source.GetPod())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePodRequest: %d", fpaivs.Selector()))
	}
}

// CreatePodRequest_FieldPathArrayOfValues allows storing slice of values for CreatePodRequest fields according to their type
type CreatePodRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreatePodRequest_FieldPath
}

func ParseCreatePodRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreatePodRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreatePodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePodRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreatePodRequest_FieldPathArrayOfValues), nil
}

func MustParseCreatePodRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreatePodRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreatePodRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreatePodRequest_FieldTerminalPathArrayOfValues struct {
	CreatePodRequest_FieldTerminalPath
	values interface{}
}

var _ CreatePodRequest_FieldPathArrayOfValues = (*CreatePodRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreatePodRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreatePodRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*pod.ParentReference) {
			values = append(values, v)
		}
	case CreatePodRequest_FieldPathSelectorPod:
		for _, v := range fpaov.values.([]*pod.Pod) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreatePodRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*pod.ParentReference, bool) {
	res, ok := fpaov.values.([]*pod.ParentReference)
	return res, ok
}
func (fpaov *CreatePodRequest_FieldTerminalPathArrayOfValues) AsPodArrayOfValues() ([]*pod.Pod, bool) {
	res, ok := fpaov.values.([]*pod.Pod)
	return res, ok
}

type CreatePodRequest_FieldSubPathArrayOfValues struct {
	CreatePodRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreatePodRequest_FieldPathArrayOfValues = (*CreatePodRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreatePodRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreatePodRequest_FieldSubPathArrayOfValues) AsPodPathArrayOfValues() (pod.Pod_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(pod.Pod_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePodRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePodRequest_FieldPathSelector
	Get(source *UpdatePodRequest) []interface{}
	GetSingle(source *UpdatePodRequest) (interface{}, bool)
	ClearValue(item *UpdatePodRequest)

	// Those methods build corresponding UpdatePodRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePodRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePodRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePodRequest_FieldPathArrayItemValue
}

type UpdatePodRequest_FieldPathSelector int32

const (
	UpdatePodRequest_FieldPathSelectorPod        UpdatePodRequest_FieldPathSelector = 0
	UpdatePodRequest_FieldPathSelectorUpdateMask UpdatePodRequest_FieldPathSelector = 1
	UpdatePodRequest_FieldPathSelectorCas        UpdatePodRequest_FieldPathSelector = 2
)

func (s UpdatePodRequest_FieldPathSelector) String() string {
	switch s {
	case UpdatePodRequest_FieldPathSelectorPod:
		return "pod"
	case UpdatePodRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdatePodRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", s))
	}
}

func BuildUpdatePodRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdatePodRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePodRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "pod":
			return &UpdatePodRequest_FieldTerminalPath{selector: UpdatePodRequest_FieldPathSelectorPod}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdatePodRequest_FieldTerminalPath{selector: UpdatePodRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdatePodRequest_FieldTerminalPath{selector: UpdatePodRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "pod":
			if subpath, err := pod.BuildPod_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePodRequest_FieldSubPath{selector: UpdatePodRequest_FieldPathSelectorPod, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdatePodRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePodRequest_FieldSubPath{selector: UpdatePodRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePodRequest", fp)
}

func ParseUpdatePodRequest_FieldPath(rawField string) (UpdatePodRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePodRequest_FieldPath(fp)
}

func MustParseUpdatePodRequest_FieldPath(rawField string) UpdatePodRequest_FieldPath {
	fp, err := ParseUpdatePodRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePodRequest_FieldTerminalPath struct {
	selector UpdatePodRequest_FieldPathSelector
}

var _ UpdatePodRequest_FieldPath = (*UpdatePodRequest_FieldTerminalPath)(nil)

func (fp *UpdatePodRequest_FieldTerminalPath) Selector() UpdatePodRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePodRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePodRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePodRequest
func (fp *UpdatePodRequest_FieldTerminalPath) Get(source *UpdatePodRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePodRequest_FieldPathSelectorPod:
			if source.Pod != nil {
				values = append(values, source.Pod)
			}
		case UpdatePodRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdatePodRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePodRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePodRequest))
}

// GetSingle returns value pointed by specific field of from source UpdatePodRequest
func (fp *UpdatePodRequest_FieldTerminalPath) GetSingle(source *UpdatePodRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdatePodRequest_FieldPathSelectorPod:
		res := source.GetPod()
		return res, res != nil
	case UpdatePodRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdatePodRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fp.selector))
	}
}

func (fp *UpdatePodRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePodRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePodRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePodRequest_FieldPathSelectorPod:
		return (*pod.Pod)(nil)
	case UpdatePodRequest_FieldPathSelectorUpdateMask:
		return (*pod.Pod_FieldMask)(nil)
	case UpdatePodRequest_FieldPathSelectorCas:
		return (*UpdatePodRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fp.selector))
	}
}

func (fp *UpdatePodRequest_FieldTerminalPath) ClearValue(item *UpdatePodRequest) {
	if item != nil {
		switch fp.selector {
		case UpdatePodRequest_FieldPathSelectorPod:
			item.Pod = nil
		case UpdatePodRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdatePodRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdatePodRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePodRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePodRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePodRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdatePodRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdatePodRequest_FieldTerminalPath) WithIValue(value interface{}) UpdatePodRequest_FieldPathValue {
	switch fp.selector {
	case UpdatePodRequest_FieldPathSelectorPod:
		return &UpdatePodRequest_FieldTerminalPathValue{UpdatePodRequest_FieldTerminalPath: *fp, value: value.(*pod.Pod)}
	case UpdatePodRequest_FieldPathSelectorUpdateMask:
		return &UpdatePodRequest_FieldTerminalPathValue{UpdatePodRequest_FieldTerminalPath: *fp, value: value.(*pod.Pod_FieldMask)}
	case UpdatePodRequest_FieldPathSelectorCas:
		return &UpdatePodRequest_FieldTerminalPathValue{UpdatePodRequest_FieldTerminalPath: *fp, value: value.(*UpdatePodRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fp.selector))
	}
}

func (fp *UpdatePodRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePodRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePodRequest_FieldPathArrayOfValues {
	fpaov := &UpdatePodRequest_FieldTerminalPathArrayOfValues{UpdatePodRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePodRequest_FieldPathSelectorPod:
		return &UpdatePodRequest_FieldTerminalPathArrayOfValues{UpdatePodRequest_FieldTerminalPath: *fp, values: values.([]*pod.Pod)}
	case UpdatePodRequest_FieldPathSelectorUpdateMask:
		return &UpdatePodRequest_FieldTerminalPathArrayOfValues{UpdatePodRequest_FieldTerminalPath: *fp, values: values.([]*pod.Pod_FieldMask)}
	case UpdatePodRequest_FieldPathSelectorCas:
		return &UpdatePodRequest_FieldTerminalPathArrayOfValues{UpdatePodRequest_FieldTerminalPath: *fp, values: values.([]*UpdatePodRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePodRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePodRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePodRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fp.selector))
	}
}

func (fp *UpdatePodRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePodRequest_FieldSubPath struct {
	selector UpdatePodRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePodRequest_FieldPath = (*UpdatePodRequest_FieldSubPath)(nil)

func (fps *UpdatePodRequest_FieldSubPath) Selector() UpdatePodRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePodRequest_FieldSubPath) AsPodSubPath() (pod.Pod_FieldPath, bool) {
	res, ok := fps.subPath.(pod.Pod_FieldPath)
	return res, ok
}
func (fps *UpdatePodRequest_FieldSubPath) AsCasSubPath() (UpdatePodRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdatePodRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePodRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePodRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePodRequest
func (fps *UpdatePodRequest_FieldSubPath) Get(source *UpdatePodRequest) (values []interface{}) {
	switch fps.selector {
	case UpdatePodRequest_FieldPathSelectorPod:
		values = append(values, fps.subPath.GetRaw(source.GetPod())...)
	case UpdatePodRequest_FieldPathSelectorCas:
		values = append(values, fps.subPath.GetRaw(source.GetCas())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdatePodRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePodRequest))
}

// GetSingle returns value of selected field from source UpdatePodRequest
func (fps *UpdatePodRequest_FieldSubPath) GetSingle(source *UpdatePodRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdatePodRequest_FieldPathSelectorPod:
		if source.GetPod() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPod())
	case UpdatePodRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fps.selector))
	}
}

func (fps *UpdatePodRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePodRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePodRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePodRequest_FieldSubPath) ClearValue(item *UpdatePodRequest) {
	if item != nil {
		switch fps.selector {
		case UpdatePodRequest_FieldPathSelectorPod:
			fps.subPath.ClearValueRaw(item.Pod)
		case UpdatePodRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdatePodRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePodRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePodRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePodRequest_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdatePodRequest_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdatePodRequest_FieldSubPath) WithIValue(value interface{}) UpdatePodRequest_FieldPathValue {
	return &UpdatePodRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePodRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePodRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePodRequest_FieldPathArrayOfValues {
	return &UpdatePodRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePodRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePodRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePodRequest_FieldPathArrayItemValue {
	return &UpdatePodRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePodRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePodRequest_FieldPathValue allows storing values for UpdatePodRequest fields according to their type
type UpdatePodRequest_FieldPathValue interface {
	UpdatePodRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePodRequest)
	CompareWith(*UpdatePodRequest) (cmp int, comparable bool)
}

func ParseUpdatePodRequest_FieldPathValue(pathStr, valueStr string) (UpdatePodRequest_FieldPathValue, error) {
	fp, err := ParseUpdatePodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePodRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePodRequest_FieldPathValue), nil
}

func MustParseUpdatePodRequest_FieldPathValue(pathStr, valueStr string) UpdatePodRequest_FieldPathValue {
	fpv, err := ParseUpdatePodRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePodRequest_FieldTerminalPathValue struct {
	UpdatePodRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePodRequest_FieldPathValue = (*UpdatePodRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdatePodRequest' as interface{}
func (fpv *UpdatePodRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePodRequest_FieldTerminalPathValue) AsPodValue() (*pod.Pod, bool) {
	res, ok := fpv.value.(*pod.Pod)
	return res, ok
}
func (fpv *UpdatePodRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*pod.Pod_FieldMask, bool) {
	res, ok := fpv.value.(*pod.Pod_FieldMask)
	return res, ok
}
func (fpv *UpdatePodRequest_FieldTerminalPathValue) AsCasValue() (*UpdatePodRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdatePodRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdatePodRequest
func (fpv *UpdatePodRequest_FieldTerminalPathValue) SetTo(target **UpdatePodRequest) {
	if *target == nil {
		*target = new(UpdatePodRequest)
	}
	switch fpv.selector {
	case UpdatePodRequest_FieldPathSelectorPod:
		(*target).Pod = fpv.value.(*pod.Pod)
	case UpdatePodRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*pod.Pod_FieldMask)
	case UpdatePodRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdatePodRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePodRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePodRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePodRequest_FieldTerminalPathValue' with the value under path in 'UpdatePodRequest'.
func (fpv *UpdatePodRequest_FieldTerminalPathValue) CompareWith(source *UpdatePodRequest) (int, bool) {
	switch fpv.selector {
	case UpdatePodRequest_FieldPathSelectorPod:
		return 0, false
	case UpdatePodRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdatePodRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePodRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePodRequest))
}

type UpdatePodRequest_FieldSubPathValue struct {
	UpdatePodRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePodRequest_FieldPathValue = (*UpdatePodRequest_FieldSubPathValue)(nil)

func (fpvs *UpdatePodRequest_FieldSubPathValue) AsPodPathValue() (pod.Pod_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(pod.Pod_FieldPathValue)
	return res, ok
}
func (fpvs *UpdatePodRequest_FieldSubPathValue) AsCasPathValue() (UpdatePodRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdatePodRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePodRequest_FieldSubPathValue) SetTo(target **UpdatePodRequest) {
	if *target == nil {
		*target = new(UpdatePodRequest)
	}
	switch fpvs.Selector() {
	case UpdatePodRequest_FieldPathSelectorPod:
		fpvs.subPathValue.(pod.Pod_FieldPathValue).SetTo(&(*target).Pod)
	case UpdatePodRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdatePodRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePodRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePodRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePodRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePodRequest_FieldSubPathValue) CompareWith(source *UpdatePodRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePodRequest_FieldPathSelectorPod:
		return fpvs.subPathValue.(pod.Pod_FieldPathValue).CompareWith(source.GetPod())
	case UpdatePodRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdatePodRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePodRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePodRequest))
}

// UpdatePodRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdatePodRequest according to their type
// Present only for array (repeated) types.
type UpdatePodRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePodRequest_FieldPath
	ContainsValue(*UpdatePodRequest) bool
}

// ParseUpdatePodRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePodRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePodRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePodRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePodRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdatePodRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePodRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePodRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePodRequest_FieldTerminalPathArrayItemValue struct {
	UpdatePodRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePodRequest_FieldPathArrayItemValue = (*UpdatePodRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePodRequest as interface{}
func (fpaiv *UpdatePodRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePodRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePodRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePodRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePodRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePodRequest'
func (fpaiv *UpdatePodRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePodRequest) bool {
	slice := fpaiv.UpdatePodRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePodRequest_FieldSubPathArrayItemValue struct {
	UpdatePodRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePodRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePodRequest_FieldSubPathArrayItemValue) AsPodPathItemValue() (pod.Pod_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(pod.Pod_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdatePodRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdatePodRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdatePodRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePodRequest'
func (fpaivs *UpdatePodRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePodRequest) bool {
	switch fpaivs.Selector() {
	case UpdatePodRequest_FieldPathSelectorPod:
		return fpaivs.subPathItemValue.(pod.Pod_FieldPathArrayItemValue).ContainsValue(source.GetPod())
	case UpdatePodRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdatePodRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest: %d", fpaivs.Selector()))
	}
}

// UpdatePodRequest_FieldPathArrayOfValues allows storing slice of values for UpdatePodRequest fields according to their type
type UpdatePodRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePodRequest_FieldPath
}

func ParseUpdatePodRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePodRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePodRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePodRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdatePodRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePodRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePodRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePodRequest_FieldTerminalPathArrayOfValues struct {
	UpdatePodRequest_FieldTerminalPath
	values interface{}
}

var _ UpdatePodRequest_FieldPathArrayOfValues = (*UpdatePodRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePodRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePodRequest_FieldPathSelectorPod:
		for _, v := range fpaov.values.([]*pod.Pod) {
			values = append(values, v)
		}
	case UpdatePodRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*pod.Pod_FieldMask) {
			values = append(values, v)
		}
	case UpdatePodRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdatePodRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePodRequest_FieldTerminalPathArrayOfValues) AsPodArrayOfValues() ([]*pod.Pod, bool) {
	res, ok := fpaov.values.([]*pod.Pod)
	return res, ok
}
func (fpaov *UpdatePodRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*pod.Pod_FieldMask, bool) {
	res, ok := fpaov.values.([]*pod.Pod_FieldMask)
	return res, ok
}
func (fpaov *UpdatePodRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdatePodRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdatePodRequest_CAS)
	return res, ok
}

type UpdatePodRequest_FieldSubPathArrayOfValues struct {
	UpdatePodRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePodRequest_FieldPathArrayOfValues = (*UpdatePodRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePodRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePodRequest_FieldSubPathArrayOfValues) AsPodPathArrayOfValues() (pod.Pod_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(pod.Pod_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdatePodRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdatePodRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdatePodRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePodRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePodRequestCAS_FieldPathSelector
	Get(source *UpdatePodRequest_CAS) []interface{}
	GetSingle(source *UpdatePodRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdatePodRequest_CAS)

	// Those methods build corresponding UpdatePodRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePodRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePodRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePodRequestCAS_FieldPathArrayItemValue
}

type UpdatePodRequestCAS_FieldPathSelector int32

const (
	UpdatePodRequestCAS_FieldPathSelectorConditionalState UpdatePodRequestCAS_FieldPathSelector = 0
	UpdatePodRequestCAS_FieldPathSelectorFieldMask        UpdatePodRequestCAS_FieldPathSelector = 1
)

func (s UpdatePodRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdatePodRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", s))
	}
}

func BuildUpdatePodRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdatePodRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePodRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdatePodRequestCAS_FieldTerminalPath{selector: UpdatePodRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdatePodRequestCAS_FieldTerminalPath{selector: UpdatePodRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := pod.BuildPod_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePodRequestCAS_FieldSubPath{selector: UpdatePodRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePodRequest_CAS", fp)
}

func ParseUpdatePodRequestCAS_FieldPath(rawField string) (UpdatePodRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePodRequestCAS_FieldPath(fp)
}

func MustParseUpdatePodRequestCAS_FieldPath(rawField string) UpdatePodRequestCAS_FieldPath {
	fp, err := ParseUpdatePodRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePodRequestCAS_FieldTerminalPath struct {
	selector UpdatePodRequestCAS_FieldPathSelector
}

var _ UpdatePodRequestCAS_FieldPath = (*UpdatePodRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdatePodRequestCAS_FieldTerminalPath) Selector() UpdatePodRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePodRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePodRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePodRequest_CAS
func (fp *UpdatePodRequestCAS_FieldTerminalPath) Get(source *UpdatePodRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdatePodRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePodRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePodRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdatePodRequest_CAS
func (fp *UpdatePodRequestCAS_FieldTerminalPath) GetSingle(source *UpdatePodRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdatePodRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePodRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePodRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePodRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
		return (*pod.Pod)(nil)
	case UpdatePodRequestCAS_FieldPathSelectorFieldMask:
		return (*pod.Pod_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePodRequestCAS_FieldTerminalPath) ClearValue(item *UpdatePodRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdatePodRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdatePodRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePodRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePodRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePodRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdatePodRequestCAS_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *UpdatePodRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdatePodRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePodRequestCAS_FieldTerminalPathValue{UpdatePodRequestCAS_FieldTerminalPath: *fp, value: value.(*pod.Pod)}
	case UpdatePodRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePodRequestCAS_FieldTerminalPathValue{UpdatePodRequestCAS_FieldTerminalPath: *fp, value: value.(*pod.Pod_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePodRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePodRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePodRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdatePodRequestCAS_FieldTerminalPathArrayOfValues{UpdatePodRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePodRequestCAS_FieldTerminalPathArrayOfValues{UpdatePodRequestCAS_FieldTerminalPath: *fp, values: values.([]*pod.Pod)}
	case UpdatePodRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePodRequestCAS_FieldTerminalPathArrayOfValues{UpdatePodRequestCAS_FieldTerminalPath: *fp, values: values.([]*pod.Pod_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePodRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePodRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePodRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePodRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePodRequestCAS_FieldSubPath struct {
	selector UpdatePodRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePodRequestCAS_FieldPath = (*UpdatePodRequestCAS_FieldSubPath)(nil)

func (fps *UpdatePodRequestCAS_FieldSubPath) Selector() UpdatePodRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePodRequestCAS_FieldSubPath) AsConditionalStateSubPath() (pod.Pod_FieldPath, bool) {
	res, ok := fps.subPath.(pod.Pod_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePodRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePodRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePodRequest_CAS
func (fps *UpdatePodRequestCAS_FieldSubPath) Get(source *UpdatePodRequest_CAS) (values []interface{}) {
	switch fps.selector {
	case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
		values = append(values, fps.subPath.GetRaw(source.GetConditionalState())...)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdatePodRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePodRequest_CAS))
}

// GetSingle returns value of selected field from source UpdatePodRequest_CAS
func (fps *UpdatePodRequestCAS_FieldSubPath) GetSingle(source *UpdatePodRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdatePodRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePodRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePodRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePodRequestCAS_FieldSubPath) ClearValue(item *UpdatePodRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdatePodRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePodRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePodRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePodRequestCAS_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&UpdatePodRequestCAS_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *UpdatePodRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdatePodRequestCAS_FieldPathValue {
	return &UpdatePodRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePodRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePodRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePodRequestCAS_FieldPathArrayOfValues {
	return &UpdatePodRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePodRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePodRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePodRequestCAS_FieldPathArrayItemValue {
	return &UpdatePodRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePodRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePodRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdatePodRequestCAS_FieldPathValue interface {
	UpdatePodRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePodRequest_CAS)
	CompareWith(*UpdatePodRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdatePodRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdatePodRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdatePodRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePodRequestCAS_FieldPathValue), nil
}

func MustParseUpdatePodRequestCAS_FieldPathValue(pathStr, valueStr string) UpdatePodRequestCAS_FieldPathValue {
	fpv, err := ParseUpdatePodRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePodRequestCAS_FieldTerminalPathValue struct {
	UpdatePodRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePodRequestCAS_FieldPathValue = (*UpdatePodRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdatePodRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePodRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*pod.Pod, bool) {
	res, ok := fpv.value.(*pod.Pod)
	return res, ok
}
func (fpv *UpdatePodRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*pod.Pod_FieldMask, bool) {
	res, ok := fpv.value.(*pod.Pod_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdatePodRequestCAS_FieldTerminalPathValue) SetTo(target **UpdatePodRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePodRequest_CAS)
	}
	switch fpv.selector {
	case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*pod.Pod)
	case UpdatePodRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*pod.Pod_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePodRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePodRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePodRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdatePodRequest_CAS'.
func (fpv *UpdatePodRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdatePodRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdatePodRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePodRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePodRequest_CAS))
}

type UpdatePodRequestCAS_FieldSubPathValue struct {
	UpdatePodRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePodRequestCAS_FieldPathValue = (*UpdatePodRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdatePodRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (pod.Pod_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(pod.Pod_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePodRequestCAS_FieldSubPathValue) SetTo(target **UpdatePodRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePodRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(pod.Pod_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePodRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePodRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePodRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePodRequestCAS_FieldSubPathValue) CompareWith(source *UpdatePodRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(pod.Pod_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePodRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePodRequest_CAS))
}

// UpdatePodRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdatePodRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePodRequestCAS_FieldPath
	ContainsValue(*UpdatePodRequest_CAS) bool
}

// ParseUpdatePodRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePodRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePodRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePodRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePodRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdatePodRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePodRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePodRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePodRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdatePodRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePodRequestCAS_FieldPathArrayItemValue = (*UpdatePodRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePodRequest_CAS as interface{}
func (fpaiv *UpdatePodRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePodRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePodRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePodRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePodRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdatePodRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePodRequest_CAS) bool {
	slice := fpaiv.UpdatePodRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePodRequestCAS_FieldSubPathArrayItemValue struct {
	UpdatePodRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePodRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePodRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (pod.Pod_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(pod.Pod_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdatePodRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePodRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(pod.Pod_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePodRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdatePodRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdatePodRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePodRequestCAS_FieldPath
}

func ParseUpdatePodRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePodRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePodRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePodRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdatePodRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePodRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePodRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePodRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdatePodRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdatePodRequestCAS_FieldPathArrayOfValues = (*UpdatePodRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePodRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePodRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*pod.Pod) {
			values = append(values, v)
		}
	case UpdatePodRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*pod.Pod_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePodRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*pod.Pod, bool) {
	res, ok := fpaov.values.([]*pod.Pod)
	return res, ok
}
func (fpaov *UpdatePodRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*pod.Pod_FieldMask, bool) {
	res, ok := fpaov.values.([]*pod.Pod_FieldMask)
	return res, ok
}

type UpdatePodRequestCAS_FieldSubPathArrayOfValues struct {
	UpdatePodRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePodRequestCAS_FieldPathArrayOfValues = (*UpdatePodRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePodRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePodRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (pod.Pod_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(pod.Pod_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeletePodRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeletePodRequest_FieldPathSelector
	Get(source *DeletePodRequest) []interface{}
	GetSingle(source *DeletePodRequest) (interface{}, bool)
	ClearValue(item *DeletePodRequest)

	// Those methods build corresponding DeletePodRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeletePodRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeletePodRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeletePodRequest_FieldPathArrayItemValue
}

type DeletePodRequest_FieldPathSelector int32

const (
	DeletePodRequest_FieldPathSelectorName DeletePodRequest_FieldPathSelector = 0
)

func (s DeletePodRequest_FieldPathSelector) String() string {
	switch s {
	case DeletePodRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePodRequest: %d", s))
	}
}

func BuildDeletePodRequest_FieldPath(fp gotenobject.RawFieldPath) (DeletePodRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeletePodRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeletePodRequest_FieldTerminalPath{selector: DeletePodRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeletePodRequest", fp)
}

func ParseDeletePodRequest_FieldPath(rawField string) (DeletePodRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeletePodRequest_FieldPath(fp)
}

func MustParseDeletePodRequest_FieldPath(rawField string) DeletePodRequest_FieldPath {
	fp, err := ParseDeletePodRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeletePodRequest_FieldTerminalPath struct {
	selector DeletePodRequest_FieldPathSelector
}

var _ DeletePodRequest_FieldPath = (*DeletePodRequest_FieldTerminalPath)(nil)

func (fp *DeletePodRequest_FieldTerminalPath) Selector() DeletePodRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeletePodRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeletePodRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeletePodRequest
func (fp *DeletePodRequest_FieldTerminalPath) Get(source *DeletePodRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeletePodRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePodRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeletePodRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeletePodRequest))
}

// GetSingle returns value pointed by specific field of from source DeletePodRequest
func (fp *DeletePodRequest_FieldTerminalPath) GetSingle(source *DeletePodRequest) (interface{}, bool) {
	switch fp.selector {
	case DeletePodRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePodRequest: %d", fp.selector))
	}
}

func (fp *DeletePodRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeletePodRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeletePodRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeletePodRequest_FieldPathSelectorName:
		return (*pod.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePodRequest: %d", fp.selector))
	}
}

func (fp *DeletePodRequest_FieldTerminalPath) ClearValue(item *DeletePodRequest) {
	if item != nil {
		switch fp.selector {
		case DeletePodRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePodRequest: %d", fp.selector))
		}
	}
}

func (fp *DeletePodRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeletePodRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeletePodRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeletePodRequest_FieldPathSelectorName
}

func (fp *DeletePodRequest_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeletePodRequest_FieldTerminalPath) WithIValue(value interface{}) DeletePodRequest_FieldPathValue {
	switch fp.selector {
	case DeletePodRequest_FieldPathSelectorName:
		return &DeletePodRequest_FieldTerminalPathValue{DeletePodRequest_FieldTerminalPath: *fp, value: value.(*pod.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePodRequest: %d", fp.selector))
	}
}

func (fp *DeletePodRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeletePodRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeletePodRequest_FieldPathArrayOfValues {
	fpaov := &DeletePodRequest_FieldTerminalPathArrayOfValues{DeletePodRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeletePodRequest_FieldPathSelectorName:
		return &DeletePodRequest_FieldTerminalPathArrayOfValues{DeletePodRequest_FieldTerminalPath: *fp, values: values.([]*pod.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePodRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeletePodRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeletePodRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeletePodRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePodRequest: %d", fp.selector))
	}
}

func (fp *DeletePodRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeletePodRequest_FieldPathValue allows storing values for DeletePodRequest fields according to their type
type DeletePodRequest_FieldPathValue interface {
	DeletePodRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeletePodRequest)
	CompareWith(*DeletePodRequest) (cmp int, comparable bool)
}

func ParseDeletePodRequest_FieldPathValue(pathStr, valueStr string) (DeletePodRequest_FieldPathValue, error) {
	fp, err := ParseDeletePodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePodRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeletePodRequest_FieldPathValue), nil
}

func MustParseDeletePodRequest_FieldPathValue(pathStr, valueStr string) DeletePodRequest_FieldPathValue {
	fpv, err := ParseDeletePodRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeletePodRequest_FieldTerminalPathValue struct {
	DeletePodRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePodRequest_FieldPathValue = (*DeletePodRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeletePodRequest' as interface{}
func (fpv *DeletePodRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeletePodRequest_FieldTerminalPathValue) AsNameValue() (*pod.Reference, bool) {
	res, ok := fpv.value.(*pod.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeletePodRequest
func (fpv *DeletePodRequest_FieldTerminalPathValue) SetTo(target **DeletePodRequest) {
	if *target == nil {
		*target = new(DeletePodRequest)
	}
	switch fpv.selector {
	case DeletePodRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*pod.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePodRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePodRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeletePodRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeletePodRequest_FieldTerminalPathValue' with the value under path in 'DeletePodRequest'.
func (fpv *DeletePodRequest_FieldTerminalPathValue) CompareWith(source *DeletePodRequest) (int, bool) {
	switch fpv.selector {
	case DeletePodRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*pod.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePodRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePodRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeletePodRequest))
}

// DeletePodRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeletePodRequest according to their type
// Present only for array (repeated) types.
type DeletePodRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeletePodRequest_FieldPath
	ContainsValue(*DeletePodRequest) bool
}

// ParseDeletePodRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeletePodRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeletePodRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeletePodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePodRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeletePodRequest_FieldPathArrayItemValue), nil
}

func MustParseDeletePodRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeletePodRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeletePodRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeletePodRequest_FieldTerminalPathArrayItemValue struct {
	DeletePodRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePodRequest_FieldPathArrayItemValue = (*DeletePodRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeletePodRequest as interface{}
func (fpaiv *DeletePodRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeletePodRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeletePodRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeletePodRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeletePodRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeletePodRequest'
func (fpaiv *DeletePodRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeletePodRequest) bool {
	slice := fpaiv.DeletePodRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeletePodRequest_FieldPathArrayOfValues allows storing slice of values for DeletePodRequest fields according to their type
type DeletePodRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeletePodRequest_FieldPath
}

func ParseDeletePodRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeletePodRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeletePodRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePodRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeletePodRequest_FieldPathArrayOfValues), nil
}

func MustParseDeletePodRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeletePodRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeletePodRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeletePodRequest_FieldTerminalPathArrayOfValues struct {
	DeletePodRequest_FieldTerminalPath
	values interface{}
}

var _ DeletePodRequest_FieldPathArrayOfValues = (*DeletePodRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeletePodRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeletePodRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*pod.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeletePodRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*pod.Reference, bool) {
	res, ok := fpaov.values.([]*pod.Reference)
	return res, ok
}
