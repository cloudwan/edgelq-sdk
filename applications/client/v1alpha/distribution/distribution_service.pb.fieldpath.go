// Code generated by protoc-gen-goten-object
// File: edgelq/applications/proto/v1alpha/distribution_service.proto
// DO NOT EDIT!!!

package distribution_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	distribution "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha/distribution"
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &distribution.Distribution{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetDistributionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetDistributionRequest_FieldPathSelector
	Get(source *GetDistributionRequest) []interface{}
	GetSingle(source *GetDistributionRequest) (interface{}, bool)
	ClearValue(item *GetDistributionRequest)

	// Those methods build corresponding GetDistributionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetDistributionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetDistributionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetDistributionRequest_FieldPathArrayItemValue
}

type GetDistributionRequest_FieldPathSelector int32

const (
	GetDistributionRequest_FieldPathSelectorName      GetDistributionRequest_FieldPathSelector = 0
	GetDistributionRequest_FieldPathSelectorFieldMask GetDistributionRequest_FieldPathSelector = 1
	GetDistributionRequest_FieldPathSelectorView      GetDistributionRequest_FieldPathSelector = 2
)

func (s GetDistributionRequest_FieldPathSelector) String() string {
	switch s {
	case GetDistributionRequest_FieldPathSelectorName:
		return "name"
	case GetDistributionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetDistributionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetDistributionRequest: %d", s))
	}
}

func BuildGetDistributionRequest_FieldPath(fp gotenobject.RawFieldPath) (GetDistributionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetDistributionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetDistributionRequest_FieldTerminalPath{selector: GetDistributionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetDistributionRequest_FieldTerminalPath{selector: GetDistributionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetDistributionRequest_FieldTerminalPath{selector: GetDistributionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetDistributionRequest", fp)
}

func ParseGetDistributionRequest_FieldPath(rawField string) (GetDistributionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetDistributionRequest_FieldPath(fp)
}

func MustParseGetDistributionRequest_FieldPath(rawField string) GetDistributionRequest_FieldPath {
	fp, err := ParseGetDistributionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetDistributionRequest_FieldTerminalPath struct {
	selector GetDistributionRequest_FieldPathSelector
}

var _ GetDistributionRequest_FieldPath = (*GetDistributionRequest_FieldTerminalPath)(nil)

func (fp *GetDistributionRequest_FieldTerminalPath) Selector() GetDistributionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetDistributionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetDistributionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetDistributionRequest
func (fp *GetDistributionRequest_FieldTerminalPath) Get(source *GetDistributionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetDistributionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetDistributionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetDistributionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetDistributionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetDistributionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetDistributionRequest))
}

// GetSingle returns value pointed by specific field of from source GetDistributionRequest
func (fp *GetDistributionRequest_FieldTerminalPath) GetSingle(source *GetDistributionRequest) (interface{}, bool) {
	switch fp.selector {
	case GetDistributionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetDistributionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetDistributionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetDistributionRequest: %d", fp.selector))
	}
}

func (fp *GetDistributionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetDistributionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetDistributionRequest_FieldPathSelectorName:
		return (*distribution.Reference)(nil)
	case GetDistributionRequest_FieldPathSelectorFieldMask:
		return (*distribution.Distribution_FieldMask)(nil)
	case GetDistributionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetDistributionRequest: %d", fp.selector))
	}
}

func (fp *GetDistributionRequest_FieldTerminalPath) ClearValue(item *GetDistributionRequest) {
	if item != nil {
		switch fp.selector {
		case GetDistributionRequest_FieldPathSelectorName:
			item.Name = nil
		case GetDistributionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetDistributionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetDistributionRequest: %d", fp.selector))
		}
	}
}

func (fp *GetDistributionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetDistributionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetDistributionRequest_FieldPathSelectorName ||
		fp.selector == GetDistributionRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetDistributionRequest_FieldPathSelectorView
}

func (fp *GetDistributionRequest_FieldTerminalPath) WithIValue(value interface{}) GetDistributionRequest_FieldPathValue {
	switch fp.selector {
	case GetDistributionRequest_FieldPathSelectorName:
		return &GetDistributionRequest_FieldTerminalPathValue{GetDistributionRequest_FieldTerminalPath: *fp, value: value.(*distribution.Reference)}
	case GetDistributionRequest_FieldPathSelectorFieldMask:
		return &GetDistributionRequest_FieldTerminalPathValue{GetDistributionRequest_FieldTerminalPath: *fp, value: value.(*distribution.Distribution_FieldMask)}
	case GetDistributionRequest_FieldPathSelectorView:
		return &GetDistributionRequest_FieldTerminalPathValue{GetDistributionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDistributionRequest: %d", fp.selector))
	}
}

func (fp *GetDistributionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetDistributionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetDistributionRequest_FieldPathArrayOfValues {
	fpaov := &GetDistributionRequest_FieldTerminalPathArrayOfValues{GetDistributionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetDistributionRequest_FieldPathSelectorName:
		return &GetDistributionRequest_FieldTerminalPathArrayOfValues{GetDistributionRequest_FieldTerminalPath: *fp, values: values.([]*distribution.Reference)}
	case GetDistributionRequest_FieldPathSelectorFieldMask:
		return &GetDistributionRequest_FieldTerminalPathArrayOfValues{GetDistributionRequest_FieldTerminalPath: *fp, values: values.([]*distribution.Distribution_FieldMask)}
	case GetDistributionRequest_FieldPathSelectorView:
		return &GetDistributionRequest_FieldTerminalPathArrayOfValues{GetDistributionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDistributionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetDistributionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetDistributionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetDistributionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetDistributionRequest: %d", fp.selector))
	}
}

func (fp *GetDistributionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetDistributionRequest_FieldPathValue allows storing values for GetDistributionRequest fields according to their type
type GetDistributionRequest_FieldPathValue interface {
	GetDistributionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetDistributionRequest)
	CompareWith(*GetDistributionRequest) (cmp int, comparable bool)
}

func ParseGetDistributionRequest_FieldPathValue(pathStr, valueStr string) (GetDistributionRequest_FieldPathValue, error) {
	fp, err := ParseGetDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDistributionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetDistributionRequest_FieldPathValue), nil
}

func MustParseGetDistributionRequest_FieldPathValue(pathStr, valueStr string) GetDistributionRequest_FieldPathValue {
	fpv, err := ParseGetDistributionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetDistributionRequest_FieldTerminalPathValue struct {
	GetDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ GetDistributionRequest_FieldPathValue = (*GetDistributionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetDistributionRequest' as interface{}
func (fpv *GetDistributionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetDistributionRequest_FieldTerminalPathValue) AsNameValue() (*distribution.Reference, bool) {
	res, ok := fpv.value.(*distribution.Reference)
	return res, ok
}
func (fpv *GetDistributionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*distribution.Distribution_FieldMask, bool) {
	res, ok := fpv.value.(*distribution.Distribution_FieldMask)
	return res, ok
}
func (fpv *GetDistributionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetDistributionRequest
func (fpv *GetDistributionRequest_FieldTerminalPathValue) SetTo(target **GetDistributionRequest) {
	if *target == nil {
		*target = new(GetDistributionRequest)
	}
	switch fpv.selector {
	case GetDistributionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*distribution.Reference)
	case GetDistributionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*distribution.Distribution_FieldMask)
	case GetDistributionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *GetDistributionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetDistributionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetDistributionRequest_FieldTerminalPathValue' with the value under path in 'GetDistributionRequest'.
func (fpv *GetDistributionRequest_FieldTerminalPathValue) CompareWith(source *GetDistributionRequest) (int, bool) {
	switch fpv.selector {
	case GetDistributionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*distribution.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetDistributionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetDistributionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *GetDistributionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetDistributionRequest))
}

// GetDistributionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetDistributionRequest according to their type
// Present only for array (repeated) types.
type GetDistributionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetDistributionRequest_FieldPath
	ContainsValue(*GetDistributionRequest) bool
}

// ParseGetDistributionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetDistributionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDistributionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetDistributionRequest_FieldPathArrayItemValue), nil
}

func MustParseGetDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetDistributionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetDistributionRequest_FieldTerminalPathArrayItemValue struct {
	GetDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ GetDistributionRequest_FieldPathArrayItemValue = (*GetDistributionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetDistributionRequest as interface{}
func (fpaiv *GetDistributionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetDistributionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetDistributionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetDistributionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetDistributionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetDistributionRequest'
func (fpaiv *GetDistributionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetDistributionRequest) bool {
	slice := fpaiv.GetDistributionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetDistributionRequest_FieldPathArrayOfValues allows storing slice of values for GetDistributionRequest fields according to their type
type GetDistributionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetDistributionRequest_FieldPath
}

func ParseGetDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetDistributionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetDistributionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetDistributionRequest_FieldPathArrayOfValues), nil
}

func MustParseGetDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetDistributionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetDistributionRequest_FieldTerminalPathArrayOfValues struct {
	GetDistributionRequest_FieldTerminalPath
	values interface{}
}

var _ GetDistributionRequest_FieldPathArrayOfValues = (*GetDistributionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetDistributionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetDistributionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*distribution.Reference) {
			values = append(values, v)
		}
	case GetDistributionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*distribution.Distribution_FieldMask) {
			values = append(values, v)
		}
	case GetDistributionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetDistributionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*distribution.Reference, bool) {
	res, ok := fpaov.values.([]*distribution.Reference)
	return res, ok
}
func (fpaov *GetDistributionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*distribution.Distribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*distribution.Distribution_FieldMask)
	return res, ok
}
func (fpaov *GetDistributionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetDistributionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetDistributionsRequest_FieldPathSelector
	Get(source *BatchGetDistributionsRequest) []interface{}
	GetSingle(source *BatchGetDistributionsRequest) (interface{}, bool)
	ClearValue(item *BatchGetDistributionsRequest)

	// Those methods build corresponding BatchGetDistributionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetDistributionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetDistributionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetDistributionsRequest_FieldPathArrayItemValue
}

type BatchGetDistributionsRequest_FieldPathSelector int32

const (
	BatchGetDistributionsRequest_FieldPathSelectorNames     BatchGetDistributionsRequest_FieldPathSelector = 0
	BatchGetDistributionsRequest_FieldPathSelectorFieldMask BatchGetDistributionsRequest_FieldPathSelector = 1
	BatchGetDistributionsRequest_FieldPathSelectorView      BatchGetDistributionsRequest_FieldPathSelector = 2
)

func (s BatchGetDistributionsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetDistributionsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetDistributionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetDistributionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsRequest: %d", s))
	}
}

func BuildBatchGetDistributionsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetDistributionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetDistributionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "names":
			return &BatchGetDistributionsRequest_FieldTerminalPath{selector: BatchGetDistributionsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetDistributionsRequest_FieldTerminalPath{selector: BatchGetDistributionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetDistributionsRequest_FieldTerminalPath{selector: BatchGetDistributionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetDistributionsRequest", fp)
}

func ParseBatchGetDistributionsRequest_FieldPath(rawField string) (BatchGetDistributionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetDistributionsRequest_FieldPath(fp)
}

func MustParseBatchGetDistributionsRequest_FieldPath(rawField string) BatchGetDistributionsRequest_FieldPath {
	fp, err := ParseBatchGetDistributionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetDistributionsRequest_FieldTerminalPath struct {
	selector BatchGetDistributionsRequest_FieldPathSelector
}

var _ BatchGetDistributionsRequest_FieldPath = (*BatchGetDistributionsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetDistributionsRequest_FieldTerminalPath) Selector() BatchGetDistributionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetDistributionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetDistributionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetDistributionsRequest
func (fp *BatchGetDistributionsRequest_FieldTerminalPath) Get(source *BatchGetDistributionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetDistributionsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetDistributionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetDistributionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetDistributionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetDistributionsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetDistributionsRequest
func (fp *BatchGetDistributionsRequest_FieldTerminalPath) GetSingle(source *BatchGetDistributionsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetDistributionsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetDistributionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetDistributionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDistributionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetDistributionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetDistributionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetDistributionsRequest_FieldPathSelectorNames:
		return ([]*distribution.Reference)(nil)
	case BatchGetDistributionsRequest_FieldPathSelectorFieldMask:
		return (*distribution.Distribution_FieldMask)(nil)
	case BatchGetDistributionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDistributionsRequest_FieldTerminalPath) ClearValue(item *BatchGetDistributionsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetDistributionsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetDistributionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetDistributionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetDistributionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetDistributionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetDistributionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetDistributionsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetDistributionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetDistributionsRequest_FieldPathSelectorView
}

func (fp *BatchGetDistributionsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetDistributionsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetDistributionsRequest_FieldPathSelectorNames:
		return &BatchGetDistributionsRequest_FieldTerminalPathValue{BatchGetDistributionsRequest_FieldTerminalPath: *fp, value: value.([]*distribution.Reference)}
	case BatchGetDistributionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetDistributionsRequest_FieldTerminalPathValue{BatchGetDistributionsRequest_FieldTerminalPath: *fp, value: value.(*distribution.Distribution_FieldMask)}
	case BatchGetDistributionsRequest_FieldPathSelectorView:
		return &BatchGetDistributionsRequest_FieldTerminalPathValue{BatchGetDistributionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDistributionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetDistributionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetDistributionsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetDistributionsRequest_FieldTerminalPathArrayOfValues{BatchGetDistributionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetDistributionsRequest_FieldPathSelectorNames:
		return &BatchGetDistributionsRequest_FieldTerminalPathArrayOfValues{BatchGetDistributionsRequest_FieldTerminalPath: *fp, values: values.([][]*distribution.Reference)}
	case BatchGetDistributionsRequest_FieldPathSelectorFieldMask:
		return &BatchGetDistributionsRequest_FieldTerminalPathArrayOfValues{BatchGetDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*distribution.Distribution_FieldMask)}
	case BatchGetDistributionsRequest_FieldPathSelectorView:
		return &BatchGetDistributionsRequest_FieldTerminalPathArrayOfValues{BatchGetDistributionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetDistributionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetDistributionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetDistributionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetDistributionsRequest_FieldPathSelectorNames:
		return &BatchGetDistributionsRequest_FieldTerminalPathArrayItemValue{BatchGetDistributionsRequest_FieldTerminalPath: *fp, value: value.(*distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetDistributionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetDistributionsRequest_FieldPathValue allows storing values for BatchGetDistributionsRequest fields according to their type
type BatchGetDistributionsRequest_FieldPathValue interface {
	BatchGetDistributionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetDistributionsRequest)
	CompareWith(*BatchGetDistributionsRequest) (cmp int, comparable bool)
}

func ParseBatchGetDistributionsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetDistributionsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDistributionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetDistributionsRequest_FieldPathValue), nil
}

func MustParseBatchGetDistributionsRequest_FieldPathValue(pathStr, valueStr string) BatchGetDistributionsRequest_FieldPathValue {
	fpv, err := ParseBatchGetDistributionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetDistributionsRequest_FieldTerminalPathValue struct {
	BatchGetDistributionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetDistributionsRequest_FieldPathValue = (*BatchGetDistributionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetDistributionsRequest' as interface{}
func (fpv *BatchGetDistributionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetDistributionsRequest_FieldTerminalPathValue) AsNamesValue() ([]*distribution.Reference, bool) {
	res, ok := fpv.value.([]*distribution.Reference)
	return res, ok
}
func (fpv *BatchGetDistributionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*distribution.Distribution_FieldMask, bool) {
	res, ok := fpv.value.(*distribution.Distribution_FieldMask)
	return res, ok
}
func (fpv *BatchGetDistributionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetDistributionsRequest
func (fpv *BatchGetDistributionsRequest_FieldTerminalPathValue) SetTo(target **BatchGetDistributionsRequest) {
	if *target == nil {
		*target = new(BatchGetDistributionsRequest)
	}
	switch fpv.selector {
	case BatchGetDistributionsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*distribution.Reference)
	case BatchGetDistributionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*distribution.Distribution_FieldMask)
	case BatchGetDistributionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetDistributionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDistributionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetDistributionsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetDistributionsRequest'.
func (fpv *BatchGetDistributionsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetDistributionsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetDistributionsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetDistributionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetDistributionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetDistributionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetDistributionsRequest))
}

// BatchGetDistributionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetDistributionsRequest according to their type
// Present only for array (repeated) types.
type BatchGetDistributionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetDistributionsRequest_FieldPath
	ContainsValue(*BatchGetDistributionsRequest) bool
}

// ParseBatchGetDistributionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetDistributionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDistributionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetDistributionsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetDistributionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetDistributionsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetDistributionsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetDistributionsRequest_FieldPathArrayItemValue = (*BatchGetDistributionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetDistributionsRequest as interface{}
func (fpaiv *BatchGetDistributionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetDistributionsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*distribution.Reference, bool) {
	res, ok := fpaiv.value.(*distribution.Reference)
	return res, ok
}

func (fpaiv *BatchGetDistributionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetDistributionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetDistributionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetDistributionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDistributionsRequest'
func (fpaiv *BatchGetDistributionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetDistributionsRequest) bool {
	slice := fpaiv.BatchGetDistributionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetDistributionsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetDistributionsRequest fields according to their type
type BatchGetDistributionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetDistributionsRequest_FieldPath
}

func ParseBatchGetDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetDistributionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDistributionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetDistributionsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetDistributionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetDistributionsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetDistributionsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetDistributionsRequest_FieldPathArrayOfValues = (*BatchGetDistributionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetDistributionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetDistributionsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*distribution.Reference) {
			values = append(values, v)
		}
	case BatchGetDistributionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*distribution.Distribution_FieldMask) {
			values = append(values, v)
		}
	case BatchGetDistributionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetDistributionsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*distribution.Reference, bool) {
	res, ok := fpaov.values.([][]*distribution.Reference)
	return res, ok
}
func (fpaov *BatchGetDistributionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*distribution.Distribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*distribution.Distribution_FieldMask)
	return res, ok
}
func (fpaov *BatchGetDistributionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetDistributionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetDistributionsResponse_FieldPathSelector
	Get(source *BatchGetDistributionsResponse) []interface{}
	GetSingle(source *BatchGetDistributionsResponse) (interface{}, bool)
	ClearValue(item *BatchGetDistributionsResponse)

	// Those methods build corresponding BatchGetDistributionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetDistributionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetDistributionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetDistributionsResponse_FieldPathArrayItemValue
}

type BatchGetDistributionsResponse_FieldPathSelector int32

const (
	BatchGetDistributionsResponse_FieldPathSelectorDistributions BatchGetDistributionsResponse_FieldPathSelector = 0
	BatchGetDistributionsResponse_FieldPathSelectorMissing       BatchGetDistributionsResponse_FieldPathSelector = 1
)

func (s BatchGetDistributionsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
		return "distributions"
	case BatchGetDistributionsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", s))
	}
}

func BuildBatchGetDistributionsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetDistributionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetDistributionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "distributions":
			return &BatchGetDistributionsResponse_FieldTerminalPath{selector: BatchGetDistributionsResponse_FieldPathSelectorDistributions}, nil
		case "missing":
			return &BatchGetDistributionsResponse_FieldTerminalPath{selector: BatchGetDistributionsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "distributions":
			if subpath, err := distribution.BuildDistribution_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetDistributionsResponse_FieldSubPath{selector: BatchGetDistributionsResponse_FieldPathSelectorDistributions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetDistributionsResponse", fp)
}

func ParseBatchGetDistributionsResponse_FieldPath(rawField string) (BatchGetDistributionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetDistributionsResponse_FieldPath(fp)
}

func MustParseBatchGetDistributionsResponse_FieldPath(rawField string) BatchGetDistributionsResponse_FieldPath {
	fp, err := ParseBatchGetDistributionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetDistributionsResponse_FieldTerminalPath struct {
	selector BatchGetDistributionsResponse_FieldPathSelector
}

var _ BatchGetDistributionsResponse_FieldPath = (*BatchGetDistributionsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetDistributionsResponse_FieldTerminalPath) Selector() BatchGetDistributionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetDistributionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetDistributionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetDistributionsResponse
func (fp *BatchGetDistributionsResponse_FieldTerminalPath) Get(source *BatchGetDistributionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
			for _, value := range source.GetDistributions() {
				values = append(values, value)
			}
		case BatchGetDistributionsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetDistributionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetDistributionsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetDistributionsResponse
func (fp *BatchGetDistributionsResponse_FieldTerminalPath) GetSingle(source *BatchGetDistributionsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
		res := source.GetDistributions()
		return res, res != nil
	case BatchGetDistributionsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDistributionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetDistributionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetDistributionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
		return ([]*distribution.Distribution)(nil)
	case BatchGetDistributionsResponse_FieldPathSelectorMissing:
		return ([]*distribution.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDistributionsResponse_FieldTerminalPath) ClearValue(item *BatchGetDistributionsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
			item.Distributions = nil
		case BatchGetDistributionsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetDistributionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetDistributionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetDistributionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetDistributionsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetDistributionsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetDistributionsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
		return &BatchGetDistributionsResponse_FieldTerminalPathValue{BatchGetDistributionsResponse_FieldTerminalPath: *fp, value: value.([]*distribution.Distribution)}
	case BatchGetDistributionsResponse_FieldPathSelectorMissing:
		return &BatchGetDistributionsResponse_FieldTerminalPathValue{BatchGetDistributionsResponse_FieldTerminalPath: *fp, value: value.([]*distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDistributionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetDistributionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetDistributionsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetDistributionsResponse_FieldTerminalPathArrayOfValues{BatchGetDistributionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
		return &BatchGetDistributionsResponse_FieldTerminalPathArrayOfValues{BatchGetDistributionsResponse_FieldTerminalPath: *fp, values: values.([][]*distribution.Distribution)}
	case BatchGetDistributionsResponse_FieldPathSelectorMissing:
		return &BatchGetDistributionsResponse_FieldTerminalPathArrayOfValues{BatchGetDistributionsResponse_FieldTerminalPath: *fp, values: values.([][]*distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetDistributionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetDistributionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetDistributionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
		return &BatchGetDistributionsResponse_FieldTerminalPathArrayItemValue{BatchGetDistributionsResponse_FieldTerminalPath: *fp, value: value.(*distribution.Distribution)}
	case BatchGetDistributionsResponse_FieldPathSelectorMissing:
		return &BatchGetDistributionsResponse_FieldTerminalPathArrayItemValue{BatchGetDistributionsResponse_FieldTerminalPath: *fp, value: value.(*distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetDistributionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetDistributionsResponse_FieldSubPath struct {
	selector BatchGetDistributionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetDistributionsResponse_FieldPath = (*BatchGetDistributionsResponse_FieldSubPath)(nil)

func (fps *BatchGetDistributionsResponse_FieldSubPath) Selector() BatchGetDistributionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetDistributionsResponse_FieldSubPath) AsDistributionsSubPath() (distribution.Distribution_FieldPath, bool) {
	res, ok := fps.subPath.(distribution.Distribution_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetDistributionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetDistributionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetDistributionsResponse
func (fps *BatchGetDistributionsResponse_FieldSubPath) Get(source *BatchGetDistributionsResponse) (values []interface{}) {
	if asDistributionFieldPath, ok := fps.AsDistributionsSubPath(); ok {
		for _, item := range source.GetDistributions() {
			values = append(values, asDistributionFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetDistributionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetDistributionsResponse))
}

// GetSingle returns value of selected field from source BatchGetDistributionsResponse
func (fps *BatchGetDistributionsResponse_FieldSubPath) GetSingle(source *BatchGetDistributionsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
		if len(source.GetDistributions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDistributions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetDistributionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetDistributionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetDistributionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetDistributionsResponse_FieldSubPath) ClearValue(item *BatchGetDistributionsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
			for _, subItem := range item.Distributions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetDistributionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetDistributionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetDistributionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetDistributionsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetDistributionsResponse_FieldPathValue {
	return &BatchGetDistributionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetDistributionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetDistributionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetDistributionsResponse_FieldPathArrayOfValues {
	return &BatchGetDistributionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetDistributionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetDistributionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetDistributionsResponse_FieldPathArrayItemValue {
	return &BatchGetDistributionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetDistributionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetDistributionsResponse_FieldPathValue allows storing values for BatchGetDistributionsResponse fields according to their type
type BatchGetDistributionsResponse_FieldPathValue interface {
	BatchGetDistributionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetDistributionsResponse)
	CompareWith(*BatchGetDistributionsResponse) (cmp int, comparable bool)
}

func ParseBatchGetDistributionsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetDistributionsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDistributionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetDistributionsResponse_FieldPathValue), nil
}

func MustParseBatchGetDistributionsResponse_FieldPathValue(pathStr, valueStr string) BatchGetDistributionsResponse_FieldPathValue {
	fpv, err := ParseBatchGetDistributionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetDistributionsResponse_FieldTerminalPathValue struct {
	BatchGetDistributionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetDistributionsResponse_FieldPathValue = (*BatchGetDistributionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetDistributionsResponse' as interface{}
func (fpv *BatchGetDistributionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetDistributionsResponse_FieldTerminalPathValue) AsDistributionsValue() ([]*distribution.Distribution, bool) {
	res, ok := fpv.value.([]*distribution.Distribution)
	return res, ok
}
func (fpv *BatchGetDistributionsResponse_FieldTerminalPathValue) AsMissingValue() ([]*distribution.Reference, bool) {
	res, ok := fpv.value.([]*distribution.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetDistributionsResponse
func (fpv *BatchGetDistributionsResponse_FieldTerminalPathValue) SetTo(target **BatchGetDistributionsResponse) {
	if *target == nil {
		*target = new(BatchGetDistributionsResponse)
	}
	switch fpv.selector {
	case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
		(*target).Distributions = fpv.value.([]*distribution.Distribution)
	case BatchGetDistributionsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*distribution.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetDistributionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDistributionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetDistributionsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetDistributionsResponse'.
func (fpv *BatchGetDistributionsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetDistributionsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
		return 0, false
	case BatchGetDistributionsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetDistributionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetDistributionsResponse))
}

type BatchGetDistributionsResponse_FieldSubPathValue struct {
	BatchGetDistributionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetDistributionsResponse_FieldPathValue = (*BatchGetDistributionsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetDistributionsResponse_FieldSubPathValue) AsDistributionsPathValue() (distribution.Distribution_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(distribution.Distribution_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetDistributionsResponse_FieldSubPathValue) SetTo(target **BatchGetDistributionsResponse) {
	if *target == nil {
		*target = new(BatchGetDistributionsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetDistributionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetDistributionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetDistributionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetDistributionsResponse_FieldSubPathValue) CompareWith(source *BatchGetDistributionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetDistributionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetDistributionsResponse))
}

// BatchGetDistributionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetDistributionsResponse according to their type
// Present only for array (repeated) types.
type BatchGetDistributionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetDistributionsResponse_FieldPath
	ContainsValue(*BatchGetDistributionsResponse) bool
}

// ParseBatchGetDistributionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetDistributionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDistributionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetDistributionsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetDistributionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetDistributionsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetDistributionsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetDistributionsResponse_FieldPathArrayItemValue = (*BatchGetDistributionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetDistributionsResponse as interface{}
func (fpaiv *BatchGetDistributionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetDistributionsResponse_FieldTerminalPathArrayItemValue) AsDistributionsItemValue() (*distribution.Distribution, bool) {
	res, ok := fpaiv.value.(*distribution.Distribution)
	return res, ok
}
func (fpaiv *BatchGetDistributionsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*distribution.Reference, bool) {
	res, ok := fpaiv.value.(*distribution.Reference)
	return res, ok
}

func (fpaiv *BatchGetDistributionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetDistributionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetDistributionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetDistributionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDistributionsResponse'
func (fpaiv *BatchGetDistributionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetDistributionsResponse) bool {
	slice := fpaiv.BatchGetDistributionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetDistributionsResponse_FieldSubPathArrayItemValue struct {
	BatchGetDistributionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetDistributionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetDistributionsResponse_FieldSubPathArrayItemValue) AsDistributionsPathItemValue() (distribution.Distribution_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(distribution.Distribution_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetDistributionsResponse'
func (fpaivs *BatchGetDistributionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetDistributionsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetDistributionsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetDistributionsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetDistributionsResponse fields according to their type
type BatchGetDistributionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetDistributionsResponse_FieldPath
}

func ParseBatchGetDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetDistributionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetDistributionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetDistributionsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetDistributionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetDistributionsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetDistributionsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetDistributionsResponse_FieldPathArrayOfValues = (*BatchGetDistributionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetDistributionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetDistributionsResponse_FieldPathSelectorDistributions:
		for _, v := range fpaov.values.([][]*distribution.Distribution) {
			values = append(values, v)
		}
	case BatchGetDistributionsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*distribution.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetDistributionsResponse_FieldTerminalPathArrayOfValues) AsDistributionsArrayOfValues() ([][]*distribution.Distribution, bool) {
	res, ok := fpaov.values.([][]*distribution.Distribution)
	return res, ok
}
func (fpaov *BatchGetDistributionsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*distribution.Reference, bool) {
	res, ok := fpaov.values.([][]*distribution.Reference)
	return res, ok
}

type BatchGetDistributionsResponse_FieldSubPathArrayOfValues struct {
	BatchGetDistributionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetDistributionsResponse_FieldPathArrayOfValues = (*BatchGetDistributionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetDistributionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetDistributionsResponse_FieldSubPathArrayOfValues) AsDistributionsPathArrayOfValues() (distribution.Distribution_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(distribution.Distribution_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListDistributionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListDistributionsRequest_FieldPathSelector
	Get(source *ListDistributionsRequest) []interface{}
	GetSingle(source *ListDistributionsRequest) (interface{}, bool)
	ClearValue(item *ListDistributionsRequest)

	// Those methods build corresponding ListDistributionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListDistributionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListDistributionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListDistributionsRequest_FieldPathArrayItemValue
}

type ListDistributionsRequest_FieldPathSelector int32

const (
	ListDistributionsRequest_FieldPathSelectorParent    ListDistributionsRequest_FieldPathSelector = 0
	ListDistributionsRequest_FieldPathSelectorPageSize  ListDistributionsRequest_FieldPathSelector = 1
	ListDistributionsRequest_FieldPathSelectorPageToken ListDistributionsRequest_FieldPathSelector = 2
	ListDistributionsRequest_FieldPathSelectorOrderBy   ListDistributionsRequest_FieldPathSelector = 3
	ListDistributionsRequest_FieldPathSelectorFilter    ListDistributionsRequest_FieldPathSelector = 4
	ListDistributionsRequest_FieldPathSelectorFieldMask ListDistributionsRequest_FieldPathSelector = 5
	ListDistributionsRequest_FieldPathSelectorView      ListDistributionsRequest_FieldPathSelector = 6
)

func (s ListDistributionsRequest_FieldPathSelector) String() string {
	switch s {
	case ListDistributionsRequest_FieldPathSelectorParent:
		return "parent"
	case ListDistributionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListDistributionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListDistributionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListDistributionsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListDistributionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListDistributionsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsRequest: %d", s))
	}
}

func BuildListDistributionsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListDistributionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListDistributionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListDistributionsRequest_FieldTerminalPath{selector: ListDistributionsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListDistributionsRequest", fp)
}

func ParseListDistributionsRequest_FieldPath(rawField string) (ListDistributionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListDistributionsRequest_FieldPath(fp)
}

func MustParseListDistributionsRequest_FieldPath(rawField string) ListDistributionsRequest_FieldPath {
	fp, err := ParseListDistributionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListDistributionsRequest_FieldTerminalPath struct {
	selector ListDistributionsRequest_FieldPathSelector
}

var _ ListDistributionsRequest_FieldPath = (*ListDistributionsRequest_FieldTerminalPath)(nil)

func (fp *ListDistributionsRequest_FieldTerminalPath) Selector() ListDistributionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListDistributionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListDistributionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListDistributionsRequest
func (fp *ListDistributionsRequest_FieldTerminalPath) Get(source *ListDistributionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListDistributionsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListDistributionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListDistributionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListDistributionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListDistributionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListDistributionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListDistributionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListDistributionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListDistributionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListDistributionsRequest))
}

// GetSingle returns value pointed by specific field of from source ListDistributionsRequest
func (fp *ListDistributionsRequest_FieldTerminalPath) GetSingle(source *ListDistributionsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListDistributionsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListDistributionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListDistributionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListDistributionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListDistributionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListDistributionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListDistributionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsRequest: %d", fp.selector))
	}
}

func (fp *ListDistributionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListDistributionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListDistributionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListDistributionsRequest_FieldPathSelectorParent:
		return (*distribution.ParentName)(nil)
	case ListDistributionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListDistributionsRequest_FieldPathSelectorPageToken:
		return (*distribution.PagerCursor)(nil)
	case ListDistributionsRequest_FieldPathSelectorOrderBy:
		return (*distribution.OrderBy)(nil)
	case ListDistributionsRequest_FieldPathSelectorFilter:
		return (*distribution.Filter)(nil)
	case ListDistributionsRequest_FieldPathSelectorFieldMask:
		return (*distribution.Distribution_FieldMask)(nil)
	case ListDistributionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsRequest: %d", fp.selector))
	}
}

func (fp *ListDistributionsRequest_FieldTerminalPath) ClearValue(item *ListDistributionsRequest) {
	if item != nil {
		switch fp.selector {
		case ListDistributionsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListDistributionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListDistributionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListDistributionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListDistributionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListDistributionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListDistributionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListDistributionsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListDistributionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListDistributionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListDistributionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListDistributionsRequest_FieldPathSelectorParent ||
		fp.selector == ListDistributionsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListDistributionsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListDistributionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListDistributionsRequest_FieldPathSelectorFilter ||
		fp.selector == ListDistributionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListDistributionsRequest_FieldPathSelectorView
}

func (fp *ListDistributionsRequest_FieldTerminalPath) WithIValue(value interface{}) ListDistributionsRequest_FieldPathValue {
	switch fp.selector {
	case ListDistributionsRequest_FieldPathSelectorParent:
		return &ListDistributionsRequest_FieldTerminalPathValue{ListDistributionsRequest_FieldTerminalPath: *fp, value: value.(*distribution.ParentName)}
	case ListDistributionsRequest_FieldPathSelectorPageSize:
		return &ListDistributionsRequest_FieldTerminalPathValue{ListDistributionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListDistributionsRequest_FieldPathSelectorPageToken:
		return &ListDistributionsRequest_FieldTerminalPathValue{ListDistributionsRequest_FieldTerminalPath: *fp, value: value.(*distribution.PagerCursor)}
	case ListDistributionsRequest_FieldPathSelectorOrderBy:
		return &ListDistributionsRequest_FieldTerminalPathValue{ListDistributionsRequest_FieldTerminalPath: *fp, value: value.(*distribution.OrderBy)}
	case ListDistributionsRequest_FieldPathSelectorFilter:
		return &ListDistributionsRequest_FieldTerminalPathValue{ListDistributionsRequest_FieldTerminalPath: *fp, value: value.(*distribution.Filter)}
	case ListDistributionsRequest_FieldPathSelectorFieldMask:
		return &ListDistributionsRequest_FieldTerminalPathValue{ListDistributionsRequest_FieldTerminalPath: *fp, value: value.(*distribution.Distribution_FieldMask)}
	case ListDistributionsRequest_FieldPathSelectorView:
		return &ListDistributionsRequest_FieldTerminalPathValue{ListDistributionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsRequest: %d", fp.selector))
	}
}

func (fp *ListDistributionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListDistributionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListDistributionsRequest_FieldPathArrayOfValues {
	fpaov := &ListDistributionsRequest_FieldTerminalPathArrayOfValues{ListDistributionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListDistributionsRequest_FieldPathSelectorParent:
		return &ListDistributionsRequest_FieldTerminalPathArrayOfValues{ListDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*distribution.ParentName)}
	case ListDistributionsRequest_FieldPathSelectorPageSize:
		return &ListDistributionsRequest_FieldTerminalPathArrayOfValues{ListDistributionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListDistributionsRequest_FieldPathSelectorPageToken:
		return &ListDistributionsRequest_FieldTerminalPathArrayOfValues{ListDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*distribution.PagerCursor)}
	case ListDistributionsRequest_FieldPathSelectorOrderBy:
		return &ListDistributionsRequest_FieldTerminalPathArrayOfValues{ListDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*distribution.OrderBy)}
	case ListDistributionsRequest_FieldPathSelectorFilter:
		return &ListDistributionsRequest_FieldTerminalPathArrayOfValues{ListDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*distribution.Filter)}
	case ListDistributionsRequest_FieldPathSelectorFieldMask:
		return &ListDistributionsRequest_FieldTerminalPathArrayOfValues{ListDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*distribution.Distribution_FieldMask)}
	case ListDistributionsRequest_FieldPathSelectorView:
		return &ListDistributionsRequest_FieldTerminalPathArrayOfValues{ListDistributionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListDistributionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListDistributionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListDistributionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsRequest: %d", fp.selector))
	}
}

func (fp *ListDistributionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListDistributionsRequest_FieldPathValue allows storing values for ListDistributionsRequest fields according to their type
type ListDistributionsRequest_FieldPathValue interface {
	ListDistributionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListDistributionsRequest)
	CompareWith(*ListDistributionsRequest) (cmp int, comparable bool)
}

func ParseListDistributionsRequest_FieldPathValue(pathStr, valueStr string) (ListDistributionsRequest_FieldPathValue, error) {
	fp, err := ParseListDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDistributionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListDistributionsRequest_FieldPathValue), nil
}

func MustParseListDistributionsRequest_FieldPathValue(pathStr, valueStr string) ListDistributionsRequest_FieldPathValue {
	fpv, err := ParseListDistributionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListDistributionsRequest_FieldTerminalPathValue struct {
	ListDistributionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListDistributionsRequest_FieldPathValue = (*ListDistributionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListDistributionsRequest' as interface{}
func (fpv *ListDistributionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListDistributionsRequest_FieldTerminalPathValue) AsParentValue() (*distribution.ParentName, bool) {
	res, ok := fpv.value.(*distribution.ParentName)
	return res, ok
}
func (fpv *ListDistributionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListDistributionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*distribution.PagerCursor, bool) {
	res, ok := fpv.value.(*distribution.PagerCursor)
	return res, ok
}
func (fpv *ListDistributionsRequest_FieldTerminalPathValue) AsOrderByValue() (*distribution.OrderBy, bool) {
	res, ok := fpv.value.(*distribution.OrderBy)
	return res, ok
}
func (fpv *ListDistributionsRequest_FieldTerminalPathValue) AsFilterValue() (*distribution.Filter, bool) {
	res, ok := fpv.value.(*distribution.Filter)
	return res, ok
}
func (fpv *ListDistributionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*distribution.Distribution_FieldMask, bool) {
	res, ok := fpv.value.(*distribution.Distribution_FieldMask)
	return res, ok
}
func (fpv *ListDistributionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListDistributionsRequest
func (fpv *ListDistributionsRequest_FieldTerminalPathValue) SetTo(target **ListDistributionsRequest) {
	if *target == nil {
		*target = new(ListDistributionsRequest)
	}
	switch fpv.selector {
	case ListDistributionsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*distribution.ParentName)
	case ListDistributionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListDistributionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*distribution.PagerCursor)
	case ListDistributionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*distribution.OrderBy)
	case ListDistributionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*distribution.Filter)
	case ListDistributionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*distribution.Distribution_FieldMask)
	case ListDistributionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListDistributionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDistributionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListDistributionsRequest_FieldTerminalPathValue' with the value under path in 'ListDistributionsRequest'.
func (fpv *ListDistributionsRequest_FieldTerminalPathValue) CompareWith(source *ListDistributionsRequest) (int, bool) {
	switch fpv.selector {
	case ListDistributionsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*distribution.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListDistributionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListDistributionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListDistributionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListDistributionsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListDistributionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListDistributionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsRequest: %d", fpv.selector))
	}
}

func (fpv *ListDistributionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListDistributionsRequest))
}

// ListDistributionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListDistributionsRequest according to their type
// Present only for array (repeated) types.
type ListDistributionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListDistributionsRequest_FieldPath
	ContainsValue(*ListDistributionsRequest) bool
}

// ParseListDistributionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListDistributionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDistributionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListDistributionsRequest_FieldPathArrayItemValue), nil
}

func MustParseListDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListDistributionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListDistributionsRequest_FieldTerminalPathArrayItemValue struct {
	ListDistributionsRequest_FieldTerminalPath
	value interface{}
}

var _ ListDistributionsRequest_FieldPathArrayItemValue = (*ListDistributionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListDistributionsRequest as interface{}
func (fpaiv *ListDistributionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListDistributionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListDistributionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListDistributionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListDistributionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDistributionsRequest'
func (fpaiv *ListDistributionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListDistributionsRequest) bool {
	slice := fpaiv.ListDistributionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListDistributionsRequest_FieldPathArrayOfValues allows storing slice of values for ListDistributionsRequest fields according to their type
type ListDistributionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListDistributionsRequest_FieldPath
}

func ParseListDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListDistributionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDistributionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListDistributionsRequest_FieldPathArrayOfValues), nil
}

func MustParseListDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListDistributionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListDistributionsRequest_FieldTerminalPathArrayOfValues struct {
	ListDistributionsRequest_FieldTerminalPath
	values interface{}
}

var _ ListDistributionsRequest_FieldPathArrayOfValues = (*ListDistributionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListDistributionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListDistributionsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*distribution.ParentName) {
			values = append(values, v)
		}
	case ListDistributionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListDistributionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*distribution.PagerCursor) {
			values = append(values, v)
		}
	case ListDistributionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*distribution.OrderBy) {
			values = append(values, v)
		}
	case ListDistributionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*distribution.Filter) {
			values = append(values, v)
		}
	case ListDistributionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*distribution.Distribution_FieldMask) {
			values = append(values, v)
		}
	case ListDistributionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListDistributionsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*distribution.ParentName, bool) {
	res, ok := fpaov.values.([]*distribution.ParentName)
	return res, ok
}
func (fpaov *ListDistributionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListDistributionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*distribution.PagerCursor, bool) {
	res, ok := fpaov.values.([]*distribution.PagerCursor)
	return res, ok
}
func (fpaov *ListDistributionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*distribution.OrderBy, bool) {
	res, ok := fpaov.values.([]*distribution.OrderBy)
	return res, ok
}
func (fpaov *ListDistributionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*distribution.Filter, bool) {
	res, ok := fpaov.values.([]*distribution.Filter)
	return res, ok
}
func (fpaov *ListDistributionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*distribution.Distribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*distribution.Distribution_FieldMask)
	return res, ok
}
func (fpaov *ListDistributionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListDistributionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListDistributionsResponse_FieldPathSelector
	Get(source *ListDistributionsResponse) []interface{}
	GetSingle(source *ListDistributionsResponse) (interface{}, bool)
	ClearValue(item *ListDistributionsResponse)

	// Those methods build corresponding ListDistributionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListDistributionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListDistributionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListDistributionsResponse_FieldPathArrayItemValue
}

type ListDistributionsResponse_FieldPathSelector int32

const (
	ListDistributionsResponse_FieldPathSelectorDistributions ListDistributionsResponse_FieldPathSelector = 0
	ListDistributionsResponse_FieldPathSelectorPrevPageToken ListDistributionsResponse_FieldPathSelector = 1
	ListDistributionsResponse_FieldPathSelectorNextPageToken ListDistributionsResponse_FieldPathSelector = 2
)

func (s ListDistributionsResponse_FieldPathSelector) String() string {
	switch s {
	case ListDistributionsResponse_FieldPathSelectorDistributions:
		return "distributions"
	case ListDistributionsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListDistributionsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", s))
	}
}

func BuildListDistributionsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListDistributionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListDistributionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "distributions":
			return &ListDistributionsResponse_FieldTerminalPath{selector: ListDistributionsResponse_FieldPathSelectorDistributions}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListDistributionsResponse_FieldTerminalPath{selector: ListDistributionsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListDistributionsResponse_FieldTerminalPath{selector: ListDistributionsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "distributions":
			if subpath, err := distribution.BuildDistribution_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListDistributionsResponse_FieldSubPath{selector: ListDistributionsResponse_FieldPathSelectorDistributions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListDistributionsResponse", fp)
}

func ParseListDistributionsResponse_FieldPath(rawField string) (ListDistributionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListDistributionsResponse_FieldPath(fp)
}

func MustParseListDistributionsResponse_FieldPath(rawField string) ListDistributionsResponse_FieldPath {
	fp, err := ParseListDistributionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListDistributionsResponse_FieldTerminalPath struct {
	selector ListDistributionsResponse_FieldPathSelector
}

var _ ListDistributionsResponse_FieldPath = (*ListDistributionsResponse_FieldTerminalPath)(nil)

func (fp *ListDistributionsResponse_FieldTerminalPath) Selector() ListDistributionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListDistributionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListDistributionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListDistributionsResponse
func (fp *ListDistributionsResponse_FieldTerminalPath) Get(source *ListDistributionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListDistributionsResponse_FieldPathSelectorDistributions:
			for _, value := range source.GetDistributions() {
				values = append(values, value)
			}
		case ListDistributionsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListDistributionsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListDistributionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListDistributionsResponse))
}

// GetSingle returns value pointed by specific field of from source ListDistributionsResponse
func (fp *ListDistributionsResponse_FieldTerminalPath) GetSingle(source *ListDistributionsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListDistributionsResponse_FieldPathSelectorDistributions:
		res := source.GetDistributions()
		return res, res != nil
	case ListDistributionsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListDistributionsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fp.selector))
	}
}

func (fp *ListDistributionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListDistributionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListDistributionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListDistributionsResponse_FieldPathSelectorDistributions:
		return ([]*distribution.Distribution)(nil)
	case ListDistributionsResponse_FieldPathSelectorPrevPageToken:
		return (*distribution.PagerCursor)(nil)
	case ListDistributionsResponse_FieldPathSelectorNextPageToken:
		return (*distribution.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fp.selector))
	}
}

func (fp *ListDistributionsResponse_FieldTerminalPath) ClearValue(item *ListDistributionsResponse) {
	if item != nil {
		switch fp.selector {
		case ListDistributionsResponse_FieldPathSelectorDistributions:
			item.Distributions = nil
		case ListDistributionsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListDistributionsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListDistributionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListDistributionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListDistributionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListDistributionsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListDistributionsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListDistributionsResponse_FieldTerminalPath) WithIValue(value interface{}) ListDistributionsResponse_FieldPathValue {
	switch fp.selector {
	case ListDistributionsResponse_FieldPathSelectorDistributions:
		return &ListDistributionsResponse_FieldTerminalPathValue{ListDistributionsResponse_FieldTerminalPath: *fp, value: value.([]*distribution.Distribution)}
	case ListDistributionsResponse_FieldPathSelectorPrevPageToken:
		return &ListDistributionsResponse_FieldTerminalPathValue{ListDistributionsResponse_FieldTerminalPath: *fp, value: value.(*distribution.PagerCursor)}
	case ListDistributionsResponse_FieldPathSelectorNextPageToken:
		return &ListDistributionsResponse_FieldTerminalPathValue{ListDistributionsResponse_FieldTerminalPath: *fp, value: value.(*distribution.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fp.selector))
	}
}

func (fp *ListDistributionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListDistributionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListDistributionsResponse_FieldPathArrayOfValues {
	fpaov := &ListDistributionsResponse_FieldTerminalPathArrayOfValues{ListDistributionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListDistributionsResponse_FieldPathSelectorDistributions:
		return &ListDistributionsResponse_FieldTerminalPathArrayOfValues{ListDistributionsResponse_FieldTerminalPath: *fp, values: values.([][]*distribution.Distribution)}
	case ListDistributionsResponse_FieldPathSelectorPrevPageToken:
		return &ListDistributionsResponse_FieldTerminalPathArrayOfValues{ListDistributionsResponse_FieldTerminalPath: *fp, values: values.([]*distribution.PagerCursor)}
	case ListDistributionsResponse_FieldPathSelectorNextPageToken:
		return &ListDistributionsResponse_FieldTerminalPathArrayOfValues{ListDistributionsResponse_FieldTerminalPath: *fp, values: values.([]*distribution.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListDistributionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListDistributionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListDistributionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListDistributionsResponse_FieldPathSelectorDistributions:
		return &ListDistributionsResponse_FieldTerminalPathArrayItemValue{ListDistributionsResponse_FieldTerminalPath: *fp, value: value.(*distribution.Distribution)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fp.selector))
	}
}

func (fp *ListDistributionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListDistributionsResponse_FieldSubPath struct {
	selector ListDistributionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListDistributionsResponse_FieldPath = (*ListDistributionsResponse_FieldSubPath)(nil)

func (fps *ListDistributionsResponse_FieldSubPath) Selector() ListDistributionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListDistributionsResponse_FieldSubPath) AsDistributionsSubPath() (distribution.Distribution_FieldPath, bool) {
	res, ok := fps.subPath.(distribution.Distribution_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListDistributionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListDistributionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListDistributionsResponse
func (fps *ListDistributionsResponse_FieldSubPath) Get(source *ListDistributionsResponse) (values []interface{}) {
	if asDistributionFieldPath, ok := fps.AsDistributionsSubPath(); ok {
		for _, item := range source.GetDistributions() {
			values = append(values, asDistributionFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListDistributionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListDistributionsResponse))
}

// GetSingle returns value of selected field from source ListDistributionsResponse
func (fps *ListDistributionsResponse_FieldSubPath) GetSingle(source *ListDistributionsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListDistributionsResponse_FieldPathSelectorDistributions:
		if len(source.GetDistributions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDistributions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fps.selector))
	}
}

func (fps *ListDistributionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListDistributionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListDistributionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListDistributionsResponse_FieldSubPath) ClearValue(item *ListDistributionsResponse) {
	if item != nil {
		switch fps.selector {
		case ListDistributionsResponse_FieldPathSelectorDistributions:
			for _, subItem := range item.Distributions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListDistributionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListDistributionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListDistributionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListDistributionsResponse_FieldSubPath) WithIValue(value interface{}) ListDistributionsResponse_FieldPathValue {
	return &ListDistributionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListDistributionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListDistributionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListDistributionsResponse_FieldPathArrayOfValues {
	return &ListDistributionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListDistributionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListDistributionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListDistributionsResponse_FieldPathArrayItemValue {
	return &ListDistributionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListDistributionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListDistributionsResponse_FieldPathValue allows storing values for ListDistributionsResponse fields according to their type
type ListDistributionsResponse_FieldPathValue interface {
	ListDistributionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListDistributionsResponse)
	CompareWith(*ListDistributionsResponse) (cmp int, comparable bool)
}

func ParseListDistributionsResponse_FieldPathValue(pathStr, valueStr string) (ListDistributionsResponse_FieldPathValue, error) {
	fp, err := ParseListDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDistributionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListDistributionsResponse_FieldPathValue), nil
}

func MustParseListDistributionsResponse_FieldPathValue(pathStr, valueStr string) ListDistributionsResponse_FieldPathValue {
	fpv, err := ParseListDistributionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListDistributionsResponse_FieldTerminalPathValue struct {
	ListDistributionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListDistributionsResponse_FieldPathValue = (*ListDistributionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListDistributionsResponse' as interface{}
func (fpv *ListDistributionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListDistributionsResponse_FieldTerminalPathValue) AsDistributionsValue() ([]*distribution.Distribution, bool) {
	res, ok := fpv.value.([]*distribution.Distribution)
	return res, ok
}
func (fpv *ListDistributionsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*distribution.PagerCursor, bool) {
	res, ok := fpv.value.(*distribution.PagerCursor)
	return res, ok
}
func (fpv *ListDistributionsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*distribution.PagerCursor, bool) {
	res, ok := fpv.value.(*distribution.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListDistributionsResponse
func (fpv *ListDistributionsResponse_FieldTerminalPathValue) SetTo(target **ListDistributionsResponse) {
	if *target == nil {
		*target = new(ListDistributionsResponse)
	}
	switch fpv.selector {
	case ListDistributionsResponse_FieldPathSelectorDistributions:
		(*target).Distributions = fpv.value.([]*distribution.Distribution)
	case ListDistributionsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*distribution.PagerCursor)
	case ListDistributionsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*distribution.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListDistributionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDistributionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListDistributionsResponse_FieldTerminalPathValue' with the value under path in 'ListDistributionsResponse'.
func (fpv *ListDistributionsResponse_FieldTerminalPathValue) CompareWith(source *ListDistributionsResponse) (int, bool) {
	switch fpv.selector {
	case ListDistributionsResponse_FieldPathSelectorDistributions:
		return 0, false
	case ListDistributionsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListDistributionsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fpv.selector))
	}
}

func (fpv *ListDistributionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListDistributionsResponse))
}

type ListDistributionsResponse_FieldSubPathValue struct {
	ListDistributionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListDistributionsResponse_FieldPathValue = (*ListDistributionsResponse_FieldSubPathValue)(nil)

func (fpvs *ListDistributionsResponse_FieldSubPathValue) AsDistributionsPathValue() (distribution.Distribution_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(distribution.Distribution_FieldPathValue)
	return res, ok
}

func (fpvs *ListDistributionsResponse_FieldSubPathValue) SetTo(target **ListDistributionsResponse) {
	if *target == nil {
		*target = new(ListDistributionsResponse)
	}
	switch fpvs.Selector() {
	case ListDistributionsResponse_FieldPathSelectorDistributions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListDistributionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListDistributionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListDistributionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListDistributionsResponse_FieldSubPathValue) CompareWith(source *ListDistributionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListDistributionsResponse_FieldPathSelectorDistributions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListDistributionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListDistributionsResponse))
}

// ListDistributionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListDistributionsResponse according to their type
// Present only for array (repeated) types.
type ListDistributionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListDistributionsResponse_FieldPath
	ContainsValue(*ListDistributionsResponse) bool
}

// ParseListDistributionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListDistributionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDistributionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListDistributionsResponse_FieldPathArrayItemValue), nil
}

func MustParseListDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListDistributionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListDistributionsResponse_FieldTerminalPathArrayItemValue struct {
	ListDistributionsResponse_FieldTerminalPath
	value interface{}
}

var _ ListDistributionsResponse_FieldPathArrayItemValue = (*ListDistributionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListDistributionsResponse as interface{}
func (fpaiv *ListDistributionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListDistributionsResponse_FieldTerminalPathArrayItemValue) AsDistributionsItemValue() (*distribution.Distribution, bool) {
	res, ok := fpaiv.value.(*distribution.Distribution)
	return res, ok
}

func (fpaiv *ListDistributionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListDistributionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListDistributionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListDistributionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDistributionsResponse'
func (fpaiv *ListDistributionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListDistributionsResponse) bool {
	slice := fpaiv.ListDistributionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListDistributionsResponse_FieldSubPathArrayItemValue struct {
	ListDistributionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListDistributionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListDistributionsResponse_FieldSubPathArrayItemValue) AsDistributionsPathItemValue() (distribution.Distribution_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(distribution.Distribution_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListDistributionsResponse'
func (fpaivs *ListDistributionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListDistributionsResponse) bool {
	switch fpaivs.Selector() {
	case ListDistributionsResponse_FieldPathSelectorDistributions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListDistributionsResponse: %d", fpaivs.Selector()))
	}
}

// ListDistributionsResponse_FieldPathArrayOfValues allows storing slice of values for ListDistributionsResponse fields according to their type
type ListDistributionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListDistributionsResponse_FieldPath
}

func ParseListDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListDistributionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListDistributionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListDistributionsResponse_FieldPathArrayOfValues), nil
}

func MustParseListDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListDistributionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListDistributionsResponse_FieldTerminalPathArrayOfValues struct {
	ListDistributionsResponse_FieldTerminalPath
	values interface{}
}

var _ ListDistributionsResponse_FieldPathArrayOfValues = (*ListDistributionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListDistributionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListDistributionsResponse_FieldPathSelectorDistributions:
		for _, v := range fpaov.values.([][]*distribution.Distribution) {
			values = append(values, v)
		}
	case ListDistributionsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*distribution.PagerCursor) {
			values = append(values, v)
		}
	case ListDistributionsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*distribution.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListDistributionsResponse_FieldTerminalPathArrayOfValues) AsDistributionsArrayOfValues() ([][]*distribution.Distribution, bool) {
	res, ok := fpaov.values.([][]*distribution.Distribution)
	return res, ok
}
func (fpaov *ListDistributionsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*distribution.PagerCursor, bool) {
	res, ok := fpaov.values.([]*distribution.PagerCursor)
	return res, ok
}
func (fpaov *ListDistributionsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*distribution.PagerCursor, bool) {
	res, ok := fpaov.values.([]*distribution.PagerCursor)
	return res, ok
}

type ListDistributionsResponse_FieldSubPathArrayOfValues struct {
	ListDistributionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListDistributionsResponse_FieldPathArrayOfValues = (*ListDistributionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListDistributionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListDistributionsResponse_FieldSubPathArrayOfValues) AsDistributionsPathArrayOfValues() (distribution.Distribution_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(distribution.Distribution_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDistributionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDistributionRequest_FieldPathSelector
	Get(source *WatchDistributionRequest) []interface{}
	GetSingle(source *WatchDistributionRequest) (interface{}, bool)
	ClearValue(item *WatchDistributionRequest)

	// Those methods build corresponding WatchDistributionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDistributionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDistributionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDistributionRequest_FieldPathArrayItemValue
}

type WatchDistributionRequest_FieldPathSelector int32

const (
	WatchDistributionRequest_FieldPathSelectorName      WatchDistributionRequest_FieldPathSelector = 0
	WatchDistributionRequest_FieldPathSelectorFieldMask WatchDistributionRequest_FieldPathSelector = 1
	WatchDistributionRequest_FieldPathSelectorView      WatchDistributionRequest_FieldPathSelector = 2
)

func (s WatchDistributionRequest_FieldPathSelector) String() string {
	switch s {
	case WatchDistributionRequest_FieldPathSelectorName:
		return "name"
	case WatchDistributionRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchDistributionRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionRequest: %d", s))
	}
}

func BuildWatchDistributionRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchDistributionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDistributionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchDistributionRequest_FieldTerminalPath{selector: WatchDistributionRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchDistributionRequest_FieldTerminalPath{selector: WatchDistributionRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchDistributionRequest_FieldTerminalPath{selector: WatchDistributionRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDistributionRequest", fp)
}

func ParseWatchDistributionRequest_FieldPath(rawField string) (WatchDistributionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDistributionRequest_FieldPath(fp)
}

func MustParseWatchDistributionRequest_FieldPath(rawField string) WatchDistributionRequest_FieldPath {
	fp, err := ParseWatchDistributionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDistributionRequest_FieldTerminalPath struct {
	selector WatchDistributionRequest_FieldPathSelector
}

var _ WatchDistributionRequest_FieldPath = (*WatchDistributionRequest_FieldTerminalPath)(nil)

func (fp *WatchDistributionRequest_FieldTerminalPath) Selector() WatchDistributionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDistributionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDistributionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDistributionRequest
func (fp *WatchDistributionRequest_FieldTerminalPath) Get(source *WatchDistributionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDistributionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchDistributionRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchDistributionRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDistributionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDistributionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDistributionRequest))
}

// GetSingle returns value pointed by specific field of from source WatchDistributionRequest
func (fp *WatchDistributionRequest_FieldTerminalPath) GetSingle(source *WatchDistributionRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchDistributionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchDistributionRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchDistributionRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionRequest: %d", fp.selector))
	}
}

func (fp *WatchDistributionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchDistributionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDistributionRequest_FieldPathSelectorName:
		return (*distribution.Reference)(nil)
	case WatchDistributionRequest_FieldPathSelectorFieldMask:
		return (*distribution.Distribution_FieldMask)(nil)
	case WatchDistributionRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionRequest: %d", fp.selector))
	}
}

func (fp *WatchDistributionRequest_FieldTerminalPath) ClearValue(item *WatchDistributionRequest) {
	if item != nil {
		switch fp.selector {
		case WatchDistributionRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchDistributionRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchDistributionRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDistributionRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchDistributionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDistributionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDistributionRequest_FieldPathSelectorName ||
		fp.selector == WatchDistributionRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchDistributionRequest_FieldPathSelectorView
}

func (fp *WatchDistributionRequest_FieldTerminalPath) WithIValue(value interface{}) WatchDistributionRequest_FieldPathValue {
	switch fp.selector {
	case WatchDistributionRequest_FieldPathSelectorName:
		return &WatchDistributionRequest_FieldTerminalPathValue{WatchDistributionRequest_FieldTerminalPath: *fp, value: value.(*distribution.Reference)}
	case WatchDistributionRequest_FieldPathSelectorFieldMask:
		return &WatchDistributionRequest_FieldTerminalPathValue{WatchDistributionRequest_FieldTerminalPath: *fp, value: value.(*distribution.Distribution_FieldMask)}
	case WatchDistributionRequest_FieldPathSelectorView:
		return &WatchDistributionRequest_FieldTerminalPathValue{WatchDistributionRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionRequest: %d", fp.selector))
	}
}

func (fp *WatchDistributionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDistributionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDistributionRequest_FieldPathArrayOfValues {
	fpaov := &WatchDistributionRequest_FieldTerminalPathArrayOfValues{WatchDistributionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDistributionRequest_FieldPathSelectorName:
		return &WatchDistributionRequest_FieldTerminalPathArrayOfValues{WatchDistributionRequest_FieldTerminalPath: *fp, values: values.([]*distribution.Reference)}
	case WatchDistributionRequest_FieldPathSelectorFieldMask:
		return &WatchDistributionRequest_FieldTerminalPathArrayOfValues{WatchDistributionRequest_FieldTerminalPath: *fp, values: values.([]*distribution.Distribution_FieldMask)}
	case WatchDistributionRequest_FieldPathSelectorView:
		return &WatchDistributionRequest_FieldTerminalPathArrayOfValues{WatchDistributionRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDistributionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDistributionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDistributionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionRequest: %d", fp.selector))
	}
}

func (fp *WatchDistributionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDistributionRequest_FieldPathValue allows storing values for WatchDistributionRequest fields according to their type
type WatchDistributionRequest_FieldPathValue interface {
	WatchDistributionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDistributionRequest)
	CompareWith(*WatchDistributionRequest) (cmp int, comparable bool)
}

func ParseWatchDistributionRequest_FieldPathValue(pathStr, valueStr string) (WatchDistributionRequest_FieldPathValue, error) {
	fp, err := ParseWatchDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDistributionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDistributionRequest_FieldPathValue), nil
}

func MustParseWatchDistributionRequest_FieldPathValue(pathStr, valueStr string) WatchDistributionRequest_FieldPathValue {
	fpv, err := ParseWatchDistributionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDistributionRequest_FieldTerminalPathValue struct {
	WatchDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDistributionRequest_FieldPathValue = (*WatchDistributionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDistributionRequest' as interface{}
func (fpv *WatchDistributionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDistributionRequest_FieldTerminalPathValue) AsNameValue() (*distribution.Reference, bool) {
	res, ok := fpv.value.(*distribution.Reference)
	return res, ok
}
func (fpv *WatchDistributionRequest_FieldTerminalPathValue) AsFieldMaskValue() (*distribution.Distribution_FieldMask, bool) {
	res, ok := fpv.value.(*distribution.Distribution_FieldMask)
	return res, ok
}
func (fpv *WatchDistributionRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchDistributionRequest
func (fpv *WatchDistributionRequest_FieldTerminalPathValue) SetTo(target **WatchDistributionRequest) {
	if *target == nil {
		*target = new(WatchDistributionRequest)
	}
	switch fpv.selector {
	case WatchDistributionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*distribution.Reference)
	case WatchDistributionRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*distribution.Distribution_FieldMask)
	case WatchDistributionRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDistributionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDistributionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDistributionRequest_FieldTerminalPathValue' with the value under path in 'WatchDistributionRequest'.
func (fpv *WatchDistributionRequest_FieldTerminalPathValue) CompareWith(source *WatchDistributionRequest) (int, bool) {
	switch fpv.selector {
	case WatchDistributionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*distribution.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDistributionRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchDistributionRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDistributionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDistributionRequest))
}

// WatchDistributionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDistributionRequest according to their type
// Present only for array (repeated) types.
type WatchDistributionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDistributionRequest_FieldPath
	ContainsValue(*WatchDistributionRequest) bool
}

// ParseWatchDistributionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDistributionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDistributionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDistributionRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchDistributionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDistributionRequest_FieldTerminalPathArrayItemValue struct {
	WatchDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDistributionRequest_FieldPathArrayItemValue = (*WatchDistributionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDistributionRequest as interface{}
func (fpaiv *WatchDistributionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDistributionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDistributionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDistributionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDistributionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDistributionRequest'
func (fpaiv *WatchDistributionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDistributionRequest) bool {
	slice := fpaiv.WatchDistributionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDistributionRequest_FieldPathArrayOfValues allows storing slice of values for WatchDistributionRequest fields according to their type
type WatchDistributionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDistributionRequest_FieldPath
}

func ParseWatchDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDistributionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDistributionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDistributionRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDistributionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDistributionRequest_FieldTerminalPathArrayOfValues struct {
	WatchDistributionRequest_FieldTerminalPath
	values interface{}
}

var _ WatchDistributionRequest_FieldPathArrayOfValues = (*WatchDistributionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDistributionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDistributionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*distribution.Reference) {
			values = append(values, v)
		}
	case WatchDistributionRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*distribution.Distribution_FieldMask) {
			values = append(values, v)
		}
	case WatchDistributionRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDistributionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*distribution.Reference, bool) {
	res, ok := fpaov.values.([]*distribution.Reference)
	return res, ok
}
func (fpaov *WatchDistributionRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*distribution.Distribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*distribution.Distribution_FieldMask)
	return res, ok
}
func (fpaov *WatchDistributionRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDistributionResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDistributionResponse_FieldPathSelector
	Get(source *WatchDistributionResponse) []interface{}
	GetSingle(source *WatchDistributionResponse) (interface{}, bool)
	ClearValue(item *WatchDistributionResponse)

	// Those methods build corresponding WatchDistributionResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDistributionResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDistributionResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDistributionResponse_FieldPathArrayItemValue
}

type WatchDistributionResponse_FieldPathSelector int32

const (
	WatchDistributionResponse_FieldPathSelectorChange WatchDistributionResponse_FieldPathSelector = 0
)

func (s WatchDistributionResponse_FieldPathSelector) String() string {
	switch s {
	case WatchDistributionResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionResponse: %d", s))
	}
}

func BuildWatchDistributionResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchDistributionResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDistributionResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchDistributionResponse_FieldTerminalPath{selector: WatchDistributionResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDistributionResponse", fp)
}

func ParseWatchDistributionResponse_FieldPath(rawField string) (WatchDistributionResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDistributionResponse_FieldPath(fp)
}

func MustParseWatchDistributionResponse_FieldPath(rawField string) WatchDistributionResponse_FieldPath {
	fp, err := ParseWatchDistributionResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDistributionResponse_FieldTerminalPath struct {
	selector WatchDistributionResponse_FieldPathSelector
}

var _ WatchDistributionResponse_FieldPath = (*WatchDistributionResponse_FieldTerminalPath)(nil)

func (fp *WatchDistributionResponse_FieldTerminalPath) Selector() WatchDistributionResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDistributionResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDistributionResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDistributionResponse
func (fp *WatchDistributionResponse_FieldTerminalPath) Get(source *WatchDistributionResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDistributionResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDistributionResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDistributionResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDistributionResponse))
}

// GetSingle returns value pointed by specific field of from source WatchDistributionResponse
func (fp *WatchDistributionResponse_FieldTerminalPath) GetSingle(source *WatchDistributionResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchDistributionResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionResponse: %d", fp.selector))
	}
}

func (fp *WatchDistributionResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDistributionResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchDistributionResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDistributionResponse_FieldPathSelectorChange:
		return (*distribution.DistributionChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionResponse: %d", fp.selector))
	}
}

func (fp *WatchDistributionResponse_FieldTerminalPath) ClearValue(item *WatchDistributionResponse) {
	if item != nil {
		switch fp.selector {
		case WatchDistributionResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDistributionResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchDistributionResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDistributionResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDistributionResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDistributionResponse_FieldPathSelectorChange
}

func (fp *WatchDistributionResponse_FieldTerminalPath) WithIValue(value interface{}) WatchDistributionResponse_FieldPathValue {
	switch fp.selector {
	case WatchDistributionResponse_FieldPathSelectorChange:
		return &WatchDistributionResponse_FieldTerminalPathValue{WatchDistributionResponse_FieldTerminalPath: *fp, value: value.(*distribution.DistributionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionResponse: %d", fp.selector))
	}
}

func (fp *WatchDistributionResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDistributionResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDistributionResponse_FieldPathArrayOfValues {
	fpaov := &WatchDistributionResponse_FieldTerminalPathArrayOfValues{WatchDistributionResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDistributionResponse_FieldPathSelectorChange:
		return &WatchDistributionResponse_FieldTerminalPathArrayOfValues{WatchDistributionResponse_FieldTerminalPath: *fp, values: values.([]*distribution.DistributionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDistributionResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDistributionResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDistributionResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionResponse: %d", fp.selector))
	}
}

func (fp *WatchDistributionResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDistributionResponse_FieldPathValue allows storing values for WatchDistributionResponse fields according to their type
type WatchDistributionResponse_FieldPathValue interface {
	WatchDistributionResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDistributionResponse)
	CompareWith(*WatchDistributionResponse) (cmp int, comparable bool)
}

func ParseWatchDistributionResponse_FieldPathValue(pathStr, valueStr string) (WatchDistributionResponse_FieldPathValue, error) {
	fp, err := ParseWatchDistributionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDistributionResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDistributionResponse_FieldPathValue), nil
}

func MustParseWatchDistributionResponse_FieldPathValue(pathStr, valueStr string) WatchDistributionResponse_FieldPathValue {
	fpv, err := ParseWatchDistributionResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDistributionResponse_FieldTerminalPathValue struct {
	WatchDistributionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDistributionResponse_FieldPathValue = (*WatchDistributionResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDistributionResponse' as interface{}
func (fpv *WatchDistributionResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDistributionResponse_FieldTerminalPathValue) AsChangeValue() (*distribution.DistributionChange, bool) {
	res, ok := fpv.value.(*distribution.DistributionChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchDistributionResponse
func (fpv *WatchDistributionResponse_FieldTerminalPathValue) SetTo(target **WatchDistributionResponse) {
	if *target == nil {
		*target = new(WatchDistributionResponse)
	}
	switch fpv.selector {
	case WatchDistributionResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*distribution.DistributionChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDistributionResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDistributionResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDistributionResponse_FieldTerminalPathValue' with the value under path in 'WatchDistributionResponse'.
func (fpv *WatchDistributionResponse_FieldTerminalPathValue) CompareWith(source *WatchDistributionResponse) (int, bool) {
	switch fpv.selector {
	case WatchDistributionResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDistributionResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDistributionResponse))
}

// WatchDistributionResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDistributionResponse according to their type
// Present only for array (repeated) types.
type WatchDistributionResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDistributionResponse_FieldPath
	ContainsValue(*WatchDistributionResponse) bool
}

// ParseWatchDistributionResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDistributionResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDistributionResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDistributionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDistributionResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDistributionResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchDistributionResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchDistributionResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDistributionResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDistributionResponse_FieldTerminalPathArrayItemValue struct {
	WatchDistributionResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDistributionResponse_FieldPathArrayItemValue = (*WatchDistributionResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDistributionResponse as interface{}
func (fpaiv *WatchDistributionResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDistributionResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDistributionResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDistributionResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDistributionResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDistributionResponse'
func (fpaiv *WatchDistributionResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDistributionResponse) bool {
	slice := fpaiv.WatchDistributionResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDistributionResponse_FieldPathArrayOfValues allows storing slice of values for WatchDistributionResponse fields according to their type
type WatchDistributionResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDistributionResponse_FieldPath
}

func ParseWatchDistributionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDistributionResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDistributionResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDistributionResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDistributionResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchDistributionResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDistributionResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDistributionResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDistributionResponse_FieldTerminalPathArrayOfValues struct {
	WatchDistributionResponse_FieldTerminalPath
	values interface{}
}

var _ WatchDistributionResponse_FieldPathArrayOfValues = (*WatchDistributionResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDistributionResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDistributionResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*distribution.DistributionChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDistributionResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*distribution.DistributionChange, bool) {
	res, ok := fpaov.values.([]*distribution.DistributionChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDistributionsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDistributionsRequest_FieldPathSelector
	Get(source *WatchDistributionsRequest) []interface{}
	GetSingle(source *WatchDistributionsRequest) (interface{}, bool)
	ClearValue(item *WatchDistributionsRequest)

	// Those methods build corresponding WatchDistributionsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDistributionsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDistributionsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDistributionsRequest_FieldPathArrayItemValue
}

type WatchDistributionsRequest_FieldPathSelector int32

const (
	WatchDistributionsRequest_FieldPathSelectorType         WatchDistributionsRequest_FieldPathSelector = 0
	WatchDistributionsRequest_FieldPathSelectorParent       WatchDistributionsRequest_FieldPathSelector = 1
	WatchDistributionsRequest_FieldPathSelectorPageSize     WatchDistributionsRequest_FieldPathSelector = 2
	WatchDistributionsRequest_FieldPathSelectorPageToken    WatchDistributionsRequest_FieldPathSelector = 3
	WatchDistributionsRequest_FieldPathSelectorOrderBy      WatchDistributionsRequest_FieldPathSelector = 4
	WatchDistributionsRequest_FieldPathSelectorResumeToken  WatchDistributionsRequest_FieldPathSelector = 5
	WatchDistributionsRequest_FieldPathSelectorFilter       WatchDistributionsRequest_FieldPathSelector = 6
	WatchDistributionsRequest_FieldPathSelectorFieldMask    WatchDistributionsRequest_FieldPathSelector = 7
	WatchDistributionsRequest_FieldPathSelectorView         WatchDistributionsRequest_FieldPathSelector = 8
	WatchDistributionsRequest_FieldPathSelectorMaxChunkSize WatchDistributionsRequest_FieldPathSelector = 9
)

func (s WatchDistributionsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchDistributionsRequest_FieldPathSelectorType:
		return "type"
	case WatchDistributionsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchDistributionsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchDistributionsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchDistributionsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchDistributionsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchDistributionsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchDistributionsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchDistributionsRequest_FieldPathSelectorView:
		return "view"
	case WatchDistributionsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsRequest: %d", s))
	}
}

func BuildWatchDistributionsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchDistributionsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDistributionsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchDistributionsRequest_FieldTerminalPath{selector: WatchDistributionsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDistributionsRequest", fp)
}

func ParseWatchDistributionsRequest_FieldPath(rawField string) (WatchDistributionsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDistributionsRequest_FieldPath(fp)
}

func MustParseWatchDistributionsRequest_FieldPath(rawField string) WatchDistributionsRequest_FieldPath {
	fp, err := ParseWatchDistributionsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDistributionsRequest_FieldTerminalPath struct {
	selector WatchDistributionsRequest_FieldPathSelector
}

var _ WatchDistributionsRequest_FieldPath = (*WatchDistributionsRequest_FieldTerminalPath)(nil)

func (fp *WatchDistributionsRequest_FieldTerminalPath) Selector() WatchDistributionsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDistributionsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDistributionsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDistributionsRequest
func (fp *WatchDistributionsRequest_FieldTerminalPath) Get(source *WatchDistributionsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDistributionsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchDistributionsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchDistributionsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchDistributionsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchDistributionsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchDistributionsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchDistributionsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchDistributionsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchDistributionsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchDistributionsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDistributionsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDistributionsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDistributionsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchDistributionsRequest
func (fp *WatchDistributionsRequest_FieldTerminalPath) GetSingle(source *WatchDistributionsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchDistributionsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchDistributionsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchDistributionsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchDistributionsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchDistributionsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchDistributionsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchDistributionsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchDistributionsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchDistributionsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchDistributionsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsRequest: %d", fp.selector))
	}
}

func (fp *WatchDistributionsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDistributionsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchDistributionsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDistributionsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchDistributionsRequest_FieldPathSelectorParent:
		return (*distribution.ParentReference)(nil)
	case WatchDistributionsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchDistributionsRequest_FieldPathSelectorPageToken:
		return (*distribution.PagerCursor)(nil)
	case WatchDistributionsRequest_FieldPathSelectorOrderBy:
		return (*distribution.OrderBy)(nil)
	case WatchDistributionsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchDistributionsRequest_FieldPathSelectorFilter:
		return (*distribution.Filter)(nil)
	case WatchDistributionsRequest_FieldPathSelectorFieldMask:
		return (*distribution.Distribution_FieldMask)(nil)
	case WatchDistributionsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchDistributionsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsRequest: %d", fp.selector))
	}
}

func (fp *WatchDistributionsRequest_FieldTerminalPath) ClearValue(item *WatchDistributionsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchDistributionsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchDistributionsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchDistributionsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchDistributionsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchDistributionsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchDistributionsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchDistributionsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchDistributionsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchDistributionsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchDistributionsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDistributionsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchDistributionsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDistributionsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDistributionsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDistributionsRequest_FieldPathSelectorType ||
		fp.selector == WatchDistributionsRequest_FieldPathSelectorParent ||
		fp.selector == WatchDistributionsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchDistributionsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchDistributionsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchDistributionsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchDistributionsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchDistributionsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchDistributionsRequest_FieldPathSelectorView ||
		fp.selector == WatchDistributionsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchDistributionsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchDistributionsRequest_FieldPathValue {
	switch fp.selector {
	case WatchDistributionsRequest_FieldPathSelectorType:
		return &WatchDistributionsRequest_FieldTerminalPathValue{WatchDistributionsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchDistributionsRequest_FieldPathSelectorParent:
		return &WatchDistributionsRequest_FieldTerminalPathValue{WatchDistributionsRequest_FieldTerminalPath: *fp, value: value.(*distribution.ParentReference)}
	case WatchDistributionsRequest_FieldPathSelectorPageSize:
		return &WatchDistributionsRequest_FieldTerminalPathValue{WatchDistributionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchDistributionsRequest_FieldPathSelectorPageToken:
		return &WatchDistributionsRequest_FieldTerminalPathValue{WatchDistributionsRequest_FieldTerminalPath: *fp, value: value.(*distribution.PagerCursor)}
	case WatchDistributionsRequest_FieldPathSelectorOrderBy:
		return &WatchDistributionsRequest_FieldTerminalPathValue{WatchDistributionsRequest_FieldTerminalPath: *fp, value: value.(*distribution.OrderBy)}
	case WatchDistributionsRequest_FieldPathSelectorResumeToken:
		return &WatchDistributionsRequest_FieldTerminalPathValue{WatchDistributionsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchDistributionsRequest_FieldPathSelectorFilter:
		return &WatchDistributionsRequest_FieldTerminalPathValue{WatchDistributionsRequest_FieldTerminalPath: *fp, value: value.(*distribution.Filter)}
	case WatchDistributionsRequest_FieldPathSelectorFieldMask:
		return &WatchDistributionsRequest_FieldTerminalPathValue{WatchDistributionsRequest_FieldTerminalPath: *fp, value: value.(*distribution.Distribution_FieldMask)}
	case WatchDistributionsRequest_FieldPathSelectorView:
		return &WatchDistributionsRequest_FieldTerminalPathValue{WatchDistributionsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchDistributionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchDistributionsRequest_FieldTerminalPathValue{WatchDistributionsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsRequest: %d", fp.selector))
	}
}

func (fp *WatchDistributionsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDistributionsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDistributionsRequest_FieldPathArrayOfValues {
	fpaov := &WatchDistributionsRequest_FieldTerminalPathArrayOfValues{WatchDistributionsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDistributionsRequest_FieldPathSelectorType:
		return &WatchDistributionsRequest_FieldTerminalPathArrayOfValues{WatchDistributionsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchDistributionsRequest_FieldPathSelectorParent:
		return &WatchDistributionsRequest_FieldTerminalPathArrayOfValues{WatchDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*distribution.ParentReference)}
	case WatchDistributionsRequest_FieldPathSelectorPageSize:
		return &WatchDistributionsRequest_FieldTerminalPathArrayOfValues{WatchDistributionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchDistributionsRequest_FieldPathSelectorPageToken:
		return &WatchDistributionsRequest_FieldTerminalPathArrayOfValues{WatchDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*distribution.PagerCursor)}
	case WatchDistributionsRequest_FieldPathSelectorOrderBy:
		return &WatchDistributionsRequest_FieldTerminalPathArrayOfValues{WatchDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*distribution.OrderBy)}
	case WatchDistributionsRequest_FieldPathSelectorResumeToken:
		return &WatchDistributionsRequest_FieldTerminalPathArrayOfValues{WatchDistributionsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchDistributionsRequest_FieldPathSelectorFilter:
		return &WatchDistributionsRequest_FieldTerminalPathArrayOfValues{WatchDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*distribution.Filter)}
	case WatchDistributionsRequest_FieldPathSelectorFieldMask:
		return &WatchDistributionsRequest_FieldTerminalPathArrayOfValues{WatchDistributionsRequest_FieldTerminalPath: *fp, values: values.([]*distribution.Distribution_FieldMask)}
	case WatchDistributionsRequest_FieldPathSelectorView:
		return &WatchDistributionsRequest_FieldTerminalPathArrayOfValues{WatchDistributionsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchDistributionsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchDistributionsRequest_FieldTerminalPathArrayOfValues{WatchDistributionsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDistributionsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDistributionsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDistributionsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsRequest: %d", fp.selector))
	}
}

func (fp *WatchDistributionsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDistributionsRequest_FieldPathValue allows storing values for WatchDistributionsRequest fields according to their type
type WatchDistributionsRequest_FieldPathValue interface {
	WatchDistributionsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDistributionsRequest)
	CompareWith(*WatchDistributionsRequest) (cmp int, comparable bool)
}

func ParseWatchDistributionsRequest_FieldPathValue(pathStr, valueStr string) (WatchDistributionsRequest_FieldPathValue, error) {
	fp, err := ParseWatchDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDistributionsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDistributionsRequest_FieldPathValue), nil
}

func MustParseWatchDistributionsRequest_FieldPathValue(pathStr, valueStr string) WatchDistributionsRequest_FieldPathValue {
	fpv, err := ParseWatchDistributionsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDistributionsRequest_FieldTerminalPathValue struct {
	WatchDistributionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDistributionsRequest_FieldPathValue = (*WatchDistributionsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDistributionsRequest' as interface{}
func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) AsParentValue() (*distribution.ParentReference, bool) {
	res, ok := fpv.value.(*distribution.ParentReference)
	return res, ok
}
func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) AsPageTokenValue() (*distribution.PagerCursor, bool) {
	res, ok := fpv.value.(*distribution.PagerCursor)
	return res, ok
}
func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) AsOrderByValue() (*distribution.OrderBy, bool) {
	res, ok := fpv.value.(*distribution.OrderBy)
	return res, ok
}
func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) AsFilterValue() (*distribution.Filter, bool) {
	res, ok := fpv.value.(*distribution.Filter)
	return res, ok
}
func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*distribution.Distribution_FieldMask, bool) {
	res, ok := fpv.value.(*distribution.Distribution_FieldMask)
	return res, ok
}
func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchDistributionsRequest
func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) SetTo(target **WatchDistributionsRequest) {
	if *target == nil {
		*target = new(WatchDistributionsRequest)
	}
	switch fpv.selector {
	case WatchDistributionsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchDistributionsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*distribution.ParentReference)
	case WatchDistributionsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchDistributionsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*distribution.PagerCursor)
	case WatchDistributionsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*distribution.OrderBy)
	case WatchDistributionsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchDistributionsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*distribution.Filter)
	case WatchDistributionsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*distribution.Distribution_FieldMask)
	case WatchDistributionsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchDistributionsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDistributionsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDistributionsRequest_FieldTerminalPathValue' with the value under path in 'WatchDistributionsRequest'.
func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) CompareWith(source *WatchDistributionsRequest) (int, bool) {
	switch fpv.selector {
	case WatchDistributionsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDistributionsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*distribution.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDistributionsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDistributionsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchDistributionsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchDistributionsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDistributionsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchDistributionsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchDistributionsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDistributionsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchDistributionsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDistributionsRequest))
}

// WatchDistributionsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDistributionsRequest according to their type
// Present only for array (repeated) types.
type WatchDistributionsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDistributionsRequest_FieldPath
	ContainsValue(*WatchDistributionsRequest) bool
}

// ParseWatchDistributionsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDistributionsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDistributionsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDistributionsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchDistributionsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDistributionsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDistributionsRequest_FieldTerminalPathArrayItemValue struct {
	WatchDistributionsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchDistributionsRequest_FieldPathArrayItemValue = (*WatchDistributionsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDistributionsRequest as interface{}
func (fpaiv *WatchDistributionsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDistributionsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDistributionsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDistributionsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDistributionsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDistributionsRequest'
func (fpaiv *WatchDistributionsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDistributionsRequest) bool {
	slice := fpaiv.WatchDistributionsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDistributionsRequest_FieldPathArrayOfValues allows storing slice of values for WatchDistributionsRequest fields according to their type
type WatchDistributionsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDistributionsRequest_FieldPath
}

func ParseWatchDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDistributionsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDistributionsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDistributionsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDistributionsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDistributionsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDistributionsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDistributionsRequest_FieldTerminalPathArrayOfValues struct {
	WatchDistributionsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchDistributionsRequest_FieldPathArrayOfValues = (*WatchDistributionsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDistributionsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDistributionsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchDistributionsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*distribution.ParentReference) {
			values = append(values, v)
		}
	case WatchDistributionsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchDistributionsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*distribution.PagerCursor) {
			values = append(values, v)
		}
	case WatchDistributionsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*distribution.OrderBy) {
			values = append(values, v)
		}
	case WatchDistributionsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchDistributionsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*distribution.Filter) {
			values = append(values, v)
		}
	case WatchDistributionsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*distribution.Distribution_FieldMask) {
			values = append(values, v)
		}
	case WatchDistributionsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchDistributionsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDistributionsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchDistributionsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*distribution.ParentReference, bool) {
	res, ok := fpaov.values.([]*distribution.ParentReference)
	return res, ok
}
func (fpaov *WatchDistributionsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchDistributionsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*distribution.PagerCursor, bool) {
	res, ok := fpaov.values.([]*distribution.PagerCursor)
	return res, ok
}
func (fpaov *WatchDistributionsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*distribution.OrderBy, bool) {
	res, ok := fpaov.values.([]*distribution.OrderBy)
	return res, ok
}
func (fpaov *WatchDistributionsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchDistributionsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*distribution.Filter, bool) {
	res, ok := fpaov.values.([]*distribution.Filter)
	return res, ok
}
func (fpaov *WatchDistributionsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*distribution.Distribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*distribution.Distribution_FieldMask)
	return res, ok
}
func (fpaov *WatchDistributionsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchDistributionsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDistributionsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDistributionsResponse_FieldPathSelector
	Get(source *WatchDistributionsResponse) []interface{}
	GetSingle(source *WatchDistributionsResponse) (interface{}, bool)
	ClearValue(item *WatchDistributionsResponse)

	// Those methods build corresponding WatchDistributionsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDistributionsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDistributionsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDistributionsResponse_FieldPathArrayItemValue
}

type WatchDistributionsResponse_FieldPathSelector int32

const (
	WatchDistributionsResponse_FieldPathSelectorDistributionChanges WatchDistributionsResponse_FieldPathSelector = 0
	WatchDistributionsResponse_FieldPathSelectorIsCurrent           WatchDistributionsResponse_FieldPathSelector = 1
	WatchDistributionsResponse_FieldPathSelectorPageTokenChange     WatchDistributionsResponse_FieldPathSelector = 2
	WatchDistributionsResponse_FieldPathSelectorResumeToken         WatchDistributionsResponse_FieldPathSelector = 3
	WatchDistributionsResponse_FieldPathSelectorSnapshotSize        WatchDistributionsResponse_FieldPathSelector = 4
	WatchDistributionsResponse_FieldPathSelectorIsSoftReset         WatchDistributionsResponse_FieldPathSelector = 5
	WatchDistributionsResponse_FieldPathSelectorIsHardReset         WatchDistributionsResponse_FieldPathSelector = 6
)

func (s WatchDistributionsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchDistributionsResponse_FieldPathSelectorDistributionChanges:
		return "distribution_changes"
	case WatchDistributionsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchDistributionsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchDistributionsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchDistributionsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchDistributionsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", s))
	}
}

func BuildWatchDistributionsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchDistributionsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDistributionsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "distribution_changes", "distributionChanges", "distribution-changes":
			return &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorDistributionChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchDistributionsResponse_FieldTerminalPath{selector: WatchDistributionsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchDistributionsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchDistributionsResponse_FieldSubPath{selector: WatchDistributionsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDistributionsResponse", fp)
}

func ParseWatchDistributionsResponse_FieldPath(rawField string) (WatchDistributionsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDistributionsResponse_FieldPath(fp)
}

func MustParseWatchDistributionsResponse_FieldPath(rawField string) WatchDistributionsResponse_FieldPath {
	fp, err := ParseWatchDistributionsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDistributionsResponse_FieldTerminalPath struct {
	selector WatchDistributionsResponse_FieldPathSelector
}

var _ WatchDistributionsResponse_FieldPath = (*WatchDistributionsResponse_FieldTerminalPath)(nil)

func (fp *WatchDistributionsResponse_FieldTerminalPath) Selector() WatchDistributionsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDistributionsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDistributionsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDistributionsResponse
func (fp *WatchDistributionsResponse_FieldTerminalPath) Get(source *WatchDistributionsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDistributionsResponse_FieldPathSelectorDistributionChanges:
			for _, value := range source.GetDistributionChanges() {
				values = append(values, value)
			}
		case WatchDistributionsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchDistributionsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchDistributionsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchDistributionsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchDistributionsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDistributionsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDistributionsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchDistributionsResponse
func (fp *WatchDistributionsResponse_FieldTerminalPath) GetSingle(source *WatchDistributionsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchDistributionsResponse_FieldPathSelectorDistributionChanges:
		res := source.GetDistributionChanges()
		return res, res != nil
	case WatchDistributionsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchDistributionsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchDistributionsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchDistributionsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchDistributionsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fp.selector))
	}
}

func (fp *WatchDistributionsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDistributionsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchDistributionsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDistributionsResponse_FieldPathSelectorDistributionChanges:
		return ([]*distribution.DistributionChange)(nil)
	case WatchDistributionsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchDistributionsResponse_PageTokenChange)(nil)
	case WatchDistributionsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchDistributionsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchDistributionsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchDistributionsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fp.selector))
	}
}

func (fp *WatchDistributionsResponse_FieldTerminalPath) ClearValue(item *WatchDistributionsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchDistributionsResponse_FieldPathSelectorDistributionChanges:
			item.DistributionChanges = nil
		case WatchDistributionsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchDistributionsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchDistributionsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchDistributionsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchDistributionsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchDistributionsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDistributionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDistributionsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDistributionsResponse_FieldPathSelectorDistributionChanges ||
		fp.selector == WatchDistributionsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchDistributionsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchDistributionsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchDistributionsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchDistributionsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchDistributionsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchDistributionsResponse_FieldPathValue {
	switch fp.selector {
	case WatchDistributionsResponse_FieldPathSelectorDistributionChanges:
		return &WatchDistributionsResponse_FieldTerminalPathValue{WatchDistributionsResponse_FieldTerminalPath: *fp, value: value.([]*distribution.DistributionChange)}
	case WatchDistributionsResponse_FieldPathSelectorIsCurrent:
		return &WatchDistributionsResponse_FieldTerminalPathValue{WatchDistributionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchDistributionsResponse_FieldTerminalPathValue{WatchDistributionsResponse_FieldTerminalPath: *fp, value: value.(*WatchDistributionsResponse_PageTokenChange)}
	case WatchDistributionsResponse_FieldPathSelectorResumeToken:
		return &WatchDistributionsResponse_FieldTerminalPathValue{WatchDistributionsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchDistributionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchDistributionsResponse_FieldTerminalPathValue{WatchDistributionsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchDistributionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchDistributionsResponse_FieldTerminalPathValue{WatchDistributionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchDistributionsResponse_FieldPathSelectorIsHardReset:
		return &WatchDistributionsResponse_FieldTerminalPathValue{WatchDistributionsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fp.selector))
	}
}

func (fp *WatchDistributionsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDistributionsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDistributionsResponse_FieldPathArrayOfValues {
	fpaov := &WatchDistributionsResponse_FieldTerminalPathArrayOfValues{WatchDistributionsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDistributionsResponse_FieldPathSelectorDistributionChanges:
		return &WatchDistributionsResponse_FieldTerminalPathArrayOfValues{WatchDistributionsResponse_FieldTerminalPath: *fp, values: values.([][]*distribution.DistributionChange)}
	case WatchDistributionsResponse_FieldPathSelectorIsCurrent:
		return &WatchDistributionsResponse_FieldTerminalPathArrayOfValues{WatchDistributionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
		return &WatchDistributionsResponse_FieldTerminalPathArrayOfValues{WatchDistributionsResponse_FieldTerminalPath: *fp, values: values.([]*WatchDistributionsResponse_PageTokenChange)}
	case WatchDistributionsResponse_FieldPathSelectorResumeToken:
		return &WatchDistributionsResponse_FieldTerminalPathArrayOfValues{WatchDistributionsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchDistributionsResponse_FieldPathSelectorSnapshotSize:
		return &WatchDistributionsResponse_FieldTerminalPathArrayOfValues{WatchDistributionsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchDistributionsResponse_FieldPathSelectorIsSoftReset:
		return &WatchDistributionsResponse_FieldTerminalPathArrayOfValues{WatchDistributionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchDistributionsResponse_FieldPathSelectorIsHardReset:
		return &WatchDistributionsResponse_FieldTerminalPathArrayOfValues{WatchDistributionsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDistributionsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDistributionsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDistributionsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchDistributionsResponse_FieldPathSelectorDistributionChanges:
		return &WatchDistributionsResponse_FieldTerminalPathArrayItemValue{WatchDistributionsResponse_FieldTerminalPath: *fp, value: value.(*distribution.DistributionChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fp.selector))
	}
}

func (fp *WatchDistributionsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchDistributionsResponse_FieldSubPath struct {
	selector WatchDistributionsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchDistributionsResponse_FieldPath = (*WatchDistributionsResponse_FieldSubPath)(nil)

func (fps *WatchDistributionsResponse_FieldSubPath) Selector() WatchDistributionsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchDistributionsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchDistributionsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchDistributionsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchDistributionsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchDistributionsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchDistributionsResponse
func (fps *WatchDistributionsResponse_FieldSubPath) Get(source *WatchDistributionsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchDistributionsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchDistributionsResponse))
}

// GetSingle returns value of selected field from source WatchDistributionsResponse
func (fps *WatchDistributionsResponse_FieldSubPath) GetSingle(source *WatchDistributionsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fps.selector))
	}
}

func (fps *WatchDistributionsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchDistributionsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchDistributionsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchDistributionsResponse_FieldSubPath) ClearValue(item *WatchDistributionsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchDistributionsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchDistributionsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchDistributionsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchDistributionsResponse_FieldSubPath) WithIValue(value interface{}) WatchDistributionsResponse_FieldPathValue {
	return &WatchDistributionsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchDistributionsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchDistributionsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchDistributionsResponse_FieldPathArrayOfValues {
	return &WatchDistributionsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchDistributionsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchDistributionsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchDistributionsResponse_FieldPathArrayItemValue {
	return &WatchDistributionsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchDistributionsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchDistributionsResponse_FieldPathValue allows storing values for WatchDistributionsResponse fields according to their type
type WatchDistributionsResponse_FieldPathValue interface {
	WatchDistributionsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDistributionsResponse)
	CompareWith(*WatchDistributionsResponse) (cmp int, comparable bool)
}

func ParseWatchDistributionsResponse_FieldPathValue(pathStr, valueStr string) (WatchDistributionsResponse_FieldPathValue, error) {
	fp, err := ParseWatchDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDistributionsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDistributionsResponse_FieldPathValue), nil
}

func MustParseWatchDistributionsResponse_FieldPathValue(pathStr, valueStr string) WatchDistributionsResponse_FieldPathValue {
	fpv, err := ParseWatchDistributionsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDistributionsResponse_FieldTerminalPathValue struct {
	WatchDistributionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDistributionsResponse_FieldPathValue = (*WatchDistributionsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchDistributionsResponse' as interface{}
func (fpv *WatchDistributionsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDistributionsResponse_FieldTerminalPathValue) AsDistributionChangesValue() ([]*distribution.DistributionChange, bool) {
	res, ok := fpv.value.([]*distribution.DistributionChange)
	return res, ok
}
func (fpv *WatchDistributionsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchDistributionsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchDistributionsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchDistributionsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchDistributionsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchDistributionsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchDistributionsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchDistributionsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchDistributionsResponse
func (fpv *WatchDistributionsResponse_FieldTerminalPathValue) SetTo(target **WatchDistributionsResponse) {
	if *target == nil {
		*target = new(WatchDistributionsResponse)
	}
	switch fpv.selector {
	case WatchDistributionsResponse_FieldPathSelectorDistributionChanges:
		(*target).DistributionChanges = fpv.value.([]*distribution.DistributionChange)
	case WatchDistributionsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchDistributionsResponse_PageTokenChange)
	case WatchDistributionsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchDistributionsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchDistributionsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchDistributionsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDistributionsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDistributionsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDistributionsResponse_FieldTerminalPathValue' with the value under path in 'WatchDistributionsResponse'.
func (fpv *WatchDistributionsResponse_FieldTerminalPathValue) CompareWith(source *WatchDistributionsResponse) (int, bool) {
	switch fpv.selector {
	case WatchDistributionsResponse_FieldPathSelectorDistributionChanges:
		return 0, false
	case WatchDistributionsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchDistributionsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDistributionsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDistributionsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchDistributionsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchDistributionsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDistributionsResponse))
}

type WatchDistributionsResponse_FieldSubPathValue struct {
	WatchDistributionsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchDistributionsResponse_FieldPathValue = (*WatchDistributionsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchDistributionsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchDistributionsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchDistributionsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchDistributionsResponse_FieldSubPathValue) SetTo(target **WatchDistributionsResponse) {
	if *target == nil {
		*target = new(WatchDistributionsResponse)
	}
	switch fpvs.Selector() {
	case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchDistributionsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchDistributionsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDistributionsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchDistributionsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchDistributionsResponse_FieldSubPathValue) CompareWith(source *WatchDistributionsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchDistributionsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchDistributionsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchDistributionsResponse))
}

// WatchDistributionsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchDistributionsResponse according to their type
// Present only for array (repeated) types.
type WatchDistributionsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDistributionsResponse_FieldPath
	ContainsValue(*WatchDistributionsResponse) bool
}

// ParseWatchDistributionsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDistributionsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDistributionsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDistributionsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchDistributionsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDistributionsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDistributionsResponse_FieldTerminalPathArrayItemValue struct {
	WatchDistributionsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchDistributionsResponse_FieldPathArrayItemValue = (*WatchDistributionsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDistributionsResponse as interface{}
func (fpaiv *WatchDistributionsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchDistributionsResponse_FieldTerminalPathArrayItemValue) AsDistributionChangesItemValue() (*distribution.DistributionChange, bool) {
	res, ok := fpaiv.value.(*distribution.DistributionChange)
	return res, ok
}

func (fpaiv *WatchDistributionsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDistributionsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDistributionsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDistributionsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDistributionsResponse'
func (fpaiv *WatchDistributionsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDistributionsResponse) bool {
	slice := fpaiv.WatchDistributionsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchDistributionsResponse_FieldSubPathArrayItemValue struct {
	WatchDistributionsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchDistributionsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchDistributionsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchDistributionsResponse'
func (fpaivs *WatchDistributionsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchDistributionsResponse) bool {
	switch fpaivs.Selector() {
	case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse: %d", fpaivs.Selector()))
	}
}

// WatchDistributionsResponse_FieldPathArrayOfValues allows storing slice of values for WatchDistributionsResponse fields according to their type
type WatchDistributionsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDistributionsResponse_FieldPath
}

func ParseWatchDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDistributionsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDistributionsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchDistributionsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDistributionsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDistributionsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDistributionsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDistributionsResponse_FieldTerminalPathArrayOfValues struct {
	WatchDistributionsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchDistributionsResponse_FieldPathArrayOfValues = (*WatchDistributionsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDistributionsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDistributionsResponse_FieldPathSelectorDistributionChanges:
		for _, v := range fpaov.values.([][]*distribution.DistributionChange) {
			values = append(values, v)
		}
	case WatchDistributionsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchDistributionsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchDistributionsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchDistributionsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchDistributionsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchDistributionsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchDistributionsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDistributionsResponse_FieldTerminalPathArrayOfValues) AsDistributionChangesArrayOfValues() ([][]*distribution.DistributionChange, bool) {
	res, ok := fpaov.values.([][]*distribution.DistributionChange)
	return res, ok
}
func (fpaov *WatchDistributionsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchDistributionsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchDistributionsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchDistributionsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchDistributionsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchDistributionsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchDistributionsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchDistributionsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchDistributionsResponse_FieldSubPathArrayOfValues struct {
	WatchDistributionsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchDistributionsResponse_FieldPathArrayOfValues = (*WatchDistributionsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchDistributionsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchDistributionsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchDistributionsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchDistributionsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchDistributionsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchDistributionsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchDistributionsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchDistributionsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchDistributionsResponse_PageTokenChange)

	// Those methods build corresponding WatchDistributionsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchDistributionsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchDistributionsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchDistributionsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchDistributionsResponsePageTokenChange_FieldPathSelector = 0
	WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchDistributionsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchDistributionsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchDistributionsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchDistributionsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchDistributionsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchDistributionsResponsePageTokenChange_FieldTerminalPath{selector: WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchDistributionsResponsePageTokenChange_FieldTerminalPath{selector: WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchDistributionsResponse_PageTokenChange", fp)
}

func ParseWatchDistributionsResponsePageTokenChange_FieldPath(rawField string) (WatchDistributionsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchDistributionsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchDistributionsResponsePageTokenChange_FieldPath(rawField string) WatchDistributionsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchDistributionsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchDistributionsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchDistributionsResponsePageTokenChange_FieldPathSelector
}

var _ WatchDistributionsResponsePageTokenChange_FieldPath = (*WatchDistributionsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) Selector() WatchDistributionsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchDistributionsResponse_PageTokenChange
func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchDistributionsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchDistributionsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchDistributionsResponse_PageTokenChange
func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchDistributionsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchDistributionsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*distribution.PagerCursor)(nil)
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*distribution.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchDistributionsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchDistributionsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchDistributionsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchDistributionsResponsePageTokenChange_FieldTerminalPathValue{WatchDistributionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*distribution.PagerCursor)}
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchDistributionsResponsePageTokenChange_FieldTerminalPathValue{WatchDistributionsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*distribution.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchDistributionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDistributionsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDistributionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*distribution.PagerCursor)}
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchDistributionsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*distribution.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchDistributionsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchDistributionsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchDistributionsResponsePageTokenChange_FieldPathValue interface {
	WatchDistributionsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchDistributionsResponse_PageTokenChange)
	CompareWith(*WatchDistributionsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchDistributionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchDistributionsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchDistributionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchDistributionsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchDistributionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchDistributionsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchDistributionsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchDistributionsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchDistributionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchDistributionsResponsePageTokenChange_FieldPathValue = (*WatchDistributionsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchDistributionsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchDistributionsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*distribution.PagerCursor, bool) {
	res, ok := fpv.value.(*distribution.PagerCursor)
	return res, ok
}
func (fpv *WatchDistributionsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*distribution.PagerCursor, bool) {
	res, ok := fpv.value.(*distribution.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchDistributionsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchDistributionsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchDistributionsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*distribution.PagerCursor)
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*distribution.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchDistributionsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchDistributionsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchDistributionsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchDistributionsResponse_PageTokenChange'.
func (fpv *WatchDistributionsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchDistributionsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchDistributionsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchDistributionsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchDistributionsResponse_PageTokenChange))
}

// WatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchDistributionsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchDistributionsResponse_PageTokenChange) bool
}

// ParseWatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchDistributionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchDistributionsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchDistributionsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchDistributionsResponse_PageTokenChange as interface{}
func (fpaiv *WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchDistributionsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchDistributionsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchDistributionsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchDistributionsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchDistributionsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchDistributionsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchDistributionsResponsePageTokenChange_FieldPath
}

func ParseWatchDistributionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchDistributionsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchDistributionsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchDistributionsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchDistributionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchDistributionsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchDistributionsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchDistributionsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchDistributionsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*distribution.PagerCursor) {
			values = append(values, v)
		}
	case WatchDistributionsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*distribution.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*distribution.PagerCursor, bool) {
	res, ok := fpaov.values.([]*distribution.PagerCursor)
	return res, ok
}
func (fpaov *WatchDistributionsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*distribution.PagerCursor, bool) {
	res, ok := fpaov.values.([]*distribution.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateDistributionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateDistributionRequest_FieldPathSelector
	Get(source *CreateDistributionRequest) []interface{}
	GetSingle(source *CreateDistributionRequest) (interface{}, bool)
	ClearValue(item *CreateDistributionRequest)

	// Those methods build corresponding CreateDistributionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateDistributionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateDistributionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateDistributionRequest_FieldPathArrayItemValue
}

type CreateDistributionRequest_FieldPathSelector int32

const (
	CreateDistributionRequest_FieldPathSelectorParent       CreateDistributionRequest_FieldPathSelector = 0
	CreateDistributionRequest_FieldPathSelectorDistribution CreateDistributionRequest_FieldPathSelector = 1
)

func (s CreateDistributionRequest_FieldPathSelector) String() string {
	switch s {
	case CreateDistributionRequest_FieldPathSelectorParent:
		return "parent"
	case CreateDistributionRequest_FieldPathSelectorDistribution:
		return "distribution"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", s))
	}
}

func BuildCreateDistributionRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateDistributionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateDistributionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateDistributionRequest_FieldTerminalPath{selector: CreateDistributionRequest_FieldPathSelectorParent}, nil
		case "distribution":
			return &CreateDistributionRequest_FieldTerminalPath{selector: CreateDistributionRequest_FieldPathSelectorDistribution}, nil
		}
	} else {
		switch fp[0] {
		case "distribution":
			if subpath, err := distribution.BuildDistribution_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateDistributionRequest_FieldSubPath{selector: CreateDistributionRequest_FieldPathSelectorDistribution, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateDistributionRequest", fp)
}

func ParseCreateDistributionRequest_FieldPath(rawField string) (CreateDistributionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateDistributionRequest_FieldPath(fp)
}

func MustParseCreateDistributionRequest_FieldPath(rawField string) CreateDistributionRequest_FieldPath {
	fp, err := ParseCreateDistributionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateDistributionRequest_FieldTerminalPath struct {
	selector CreateDistributionRequest_FieldPathSelector
}

var _ CreateDistributionRequest_FieldPath = (*CreateDistributionRequest_FieldTerminalPath)(nil)

func (fp *CreateDistributionRequest_FieldTerminalPath) Selector() CreateDistributionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateDistributionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateDistributionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateDistributionRequest
func (fp *CreateDistributionRequest_FieldTerminalPath) Get(source *CreateDistributionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateDistributionRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateDistributionRequest_FieldPathSelectorDistribution:
			if source.Distribution != nil {
				values = append(values, source.Distribution)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateDistributionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateDistributionRequest))
}

// GetSingle returns value pointed by specific field of from source CreateDistributionRequest
func (fp *CreateDistributionRequest_FieldTerminalPath) GetSingle(source *CreateDistributionRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateDistributionRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateDistributionRequest_FieldPathSelectorDistribution:
		res := source.GetDistribution()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fp.selector))
	}
}

func (fp *CreateDistributionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateDistributionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateDistributionRequest_FieldPathSelectorParent:
		return (*distribution.ParentReference)(nil)
	case CreateDistributionRequest_FieldPathSelectorDistribution:
		return (*distribution.Distribution)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fp.selector))
	}
}

func (fp *CreateDistributionRequest_FieldTerminalPath) ClearValue(item *CreateDistributionRequest) {
	if item != nil {
		switch fp.selector {
		case CreateDistributionRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateDistributionRequest_FieldPathSelectorDistribution:
			item.Distribution = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateDistributionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateDistributionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateDistributionRequest_FieldPathSelectorParent
}

func (fp *CreateDistributionRequest_FieldTerminalPath) WithIValue(value interface{}) CreateDistributionRequest_FieldPathValue {
	switch fp.selector {
	case CreateDistributionRequest_FieldPathSelectorParent:
		return &CreateDistributionRequest_FieldTerminalPathValue{CreateDistributionRequest_FieldTerminalPath: *fp, value: value.(*distribution.ParentReference)}
	case CreateDistributionRequest_FieldPathSelectorDistribution:
		return &CreateDistributionRequest_FieldTerminalPathValue{CreateDistributionRequest_FieldTerminalPath: *fp, value: value.(*distribution.Distribution)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fp.selector))
	}
}

func (fp *CreateDistributionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateDistributionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateDistributionRequest_FieldPathArrayOfValues {
	fpaov := &CreateDistributionRequest_FieldTerminalPathArrayOfValues{CreateDistributionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateDistributionRequest_FieldPathSelectorParent:
		return &CreateDistributionRequest_FieldTerminalPathArrayOfValues{CreateDistributionRequest_FieldTerminalPath: *fp, values: values.([]*distribution.ParentReference)}
	case CreateDistributionRequest_FieldPathSelectorDistribution:
		return &CreateDistributionRequest_FieldTerminalPathArrayOfValues{CreateDistributionRequest_FieldTerminalPath: *fp, values: values.([]*distribution.Distribution)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateDistributionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateDistributionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateDistributionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fp.selector))
	}
}

func (fp *CreateDistributionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateDistributionRequest_FieldSubPath struct {
	selector CreateDistributionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateDistributionRequest_FieldPath = (*CreateDistributionRequest_FieldSubPath)(nil)

func (fps *CreateDistributionRequest_FieldSubPath) Selector() CreateDistributionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateDistributionRequest_FieldSubPath) AsDistributionSubPath() (distribution.Distribution_FieldPath, bool) {
	res, ok := fps.subPath.(distribution.Distribution_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateDistributionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateDistributionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateDistributionRequest
func (fps *CreateDistributionRequest_FieldSubPath) Get(source *CreateDistributionRequest) (values []interface{}) {
	if asDistributionFieldPath, ok := fps.AsDistributionSubPath(); ok {
		values = append(values, asDistributionFieldPath.Get(source.GetDistribution())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateDistributionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateDistributionRequest))
}

// GetSingle returns value of selected field from source CreateDistributionRequest
func (fps *CreateDistributionRequest_FieldSubPath) GetSingle(source *CreateDistributionRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateDistributionRequest_FieldPathSelectorDistribution:
		if source.GetDistribution() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDistribution())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fps.selector))
	}
}

func (fps *CreateDistributionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateDistributionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateDistributionRequest_FieldSubPath) ClearValue(item *CreateDistributionRequest) {
	if item != nil {
		switch fps.selector {
		case CreateDistributionRequest_FieldPathSelectorDistribution:
			fps.subPath.ClearValueRaw(item.Distribution)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateDistributionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateDistributionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateDistributionRequest_FieldSubPath) WithIValue(value interface{}) CreateDistributionRequest_FieldPathValue {
	return &CreateDistributionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateDistributionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateDistributionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateDistributionRequest_FieldPathArrayOfValues {
	return &CreateDistributionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateDistributionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateDistributionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateDistributionRequest_FieldPathArrayItemValue {
	return &CreateDistributionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateDistributionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateDistributionRequest_FieldPathValue allows storing values for CreateDistributionRequest fields according to their type
type CreateDistributionRequest_FieldPathValue interface {
	CreateDistributionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateDistributionRequest)
	CompareWith(*CreateDistributionRequest) (cmp int, comparable bool)
}

func ParseCreateDistributionRequest_FieldPathValue(pathStr, valueStr string) (CreateDistributionRequest_FieldPathValue, error) {
	fp, err := ParseCreateDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDistributionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateDistributionRequest_FieldPathValue), nil
}

func MustParseCreateDistributionRequest_FieldPathValue(pathStr, valueStr string) CreateDistributionRequest_FieldPathValue {
	fpv, err := ParseCreateDistributionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateDistributionRequest_FieldTerminalPathValue struct {
	CreateDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateDistributionRequest_FieldPathValue = (*CreateDistributionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateDistributionRequest' as interface{}
func (fpv *CreateDistributionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateDistributionRequest_FieldTerminalPathValue) AsParentValue() (*distribution.ParentReference, bool) {
	res, ok := fpv.value.(*distribution.ParentReference)
	return res, ok
}
func (fpv *CreateDistributionRequest_FieldTerminalPathValue) AsDistributionValue() (*distribution.Distribution, bool) {
	res, ok := fpv.value.(*distribution.Distribution)
	return res, ok
}

// SetTo stores value for selected field for object CreateDistributionRequest
func (fpv *CreateDistributionRequest_FieldTerminalPathValue) SetTo(target **CreateDistributionRequest) {
	if *target == nil {
		*target = new(CreateDistributionRequest)
	}
	switch fpv.selector {
	case CreateDistributionRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*distribution.ParentReference)
	case CreateDistributionRequest_FieldPathSelectorDistribution:
		(*target).Distribution = fpv.value.(*distribution.Distribution)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateDistributionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateDistributionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateDistributionRequest_FieldTerminalPathValue' with the value under path in 'CreateDistributionRequest'.
func (fpv *CreateDistributionRequest_FieldTerminalPathValue) CompareWith(source *CreateDistributionRequest) (int, bool) {
	switch fpv.selector {
	case CreateDistributionRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*distribution.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateDistributionRequest_FieldPathSelectorDistribution:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *CreateDistributionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateDistributionRequest))
}

type CreateDistributionRequest_FieldSubPathValue struct {
	CreateDistributionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateDistributionRequest_FieldPathValue = (*CreateDistributionRequest_FieldSubPathValue)(nil)

func (fpvs *CreateDistributionRequest_FieldSubPathValue) AsDistributionPathValue() (distribution.Distribution_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(distribution.Distribution_FieldPathValue)
	return res, ok
}

func (fpvs *CreateDistributionRequest_FieldSubPathValue) SetTo(target **CreateDistributionRequest) {
	if *target == nil {
		*target = new(CreateDistributionRequest)
	}
	switch fpvs.Selector() {
	case CreateDistributionRequest_FieldPathSelectorDistribution:
		fpvs.subPathValue.(distribution.Distribution_FieldPathValue).SetTo(&(*target).Distribution)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateDistributionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateDistributionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateDistributionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateDistributionRequest_FieldSubPathValue) CompareWith(source *CreateDistributionRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateDistributionRequest_FieldPathSelectorDistribution:
		return fpvs.subPathValue.(distribution.Distribution_FieldPathValue).CompareWith(source.GetDistribution())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateDistributionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateDistributionRequest))
}

// CreateDistributionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateDistributionRequest according to their type
// Present only for array (repeated) types.
type CreateDistributionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateDistributionRequest_FieldPath
	ContainsValue(*CreateDistributionRequest) bool
}

// ParseCreateDistributionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateDistributionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDistributionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateDistributionRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateDistributionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateDistributionRequest_FieldTerminalPathArrayItemValue struct {
	CreateDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ CreateDistributionRequest_FieldPathArrayItemValue = (*CreateDistributionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateDistributionRequest as interface{}
func (fpaiv *CreateDistributionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateDistributionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateDistributionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateDistributionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateDistributionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateDistributionRequest'
func (fpaiv *CreateDistributionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateDistributionRequest) bool {
	slice := fpaiv.CreateDistributionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateDistributionRequest_FieldSubPathArrayItemValue struct {
	CreateDistributionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateDistributionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateDistributionRequest_FieldSubPathArrayItemValue) AsDistributionPathItemValue() (distribution.Distribution_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(distribution.Distribution_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateDistributionRequest'
func (fpaivs *CreateDistributionRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateDistributionRequest) bool {
	switch fpaivs.Selector() {
	case CreateDistributionRequest_FieldPathSelectorDistribution:
		return fpaivs.subPathItemValue.(distribution.Distribution_FieldPathArrayItemValue).ContainsValue(source.GetDistribution())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateDistributionRequest: %d", fpaivs.Selector()))
	}
}

// CreateDistributionRequest_FieldPathArrayOfValues allows storing slice of values for CreateDistributionRequest fields according to their type
type CreateDistributionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateDistributionRequest_FieldPath
}

func ParseCreateDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateDistributionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateDistributionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateDistributionRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateDistributionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateDistributionRequest_FieldTerminalPathArrayOfValues struct {
	CreateDistributionRequest_FieldTerminalPath
	values interface{}
}

var _ CreateDistributionRequest_FieldPathArrayOfValues = (*CreateDistributionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateDistributionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateDistributionRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*distribution.ParentReference) {
			values = append(values, v)
		}
	case CreateDistributionRequest_FieldPathSelectorDistribution:
		for _, v := range fpaov.values.([]*distribution.Distribution) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateDistributionRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*distribution.ParentReference, bool) {
	res, ok := fpaov.values.([]*distribution.ParentReference)
	return res, ok
}
func (fpaov *CreateDistributionRequest_FieldTerminalPathArrayOfValues) AsDistributionArrayOfValues() ([]*distribution.Distribution, bool) {
	res, ok := fpaov.values.([]*distribution.Distribution)
	return res, ok
}

type CreateDistributionRequest_FieldSubPathArrayOfValues struct {
	CreateDistributionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateDistributionRequest_FieldPathArrayOfValues = (*CreateDistributionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateDistributionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateDistributionRequest_FieldSubPathArrayOfValues) AsDistributionPathArrayOfValues() (distribution.Distribution_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(distribution.Distribution_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateDistributionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateDistributionRequest_FieldPathSelector
	Get(source *UpdateDistributionRequest) []interface{}
	GetSingle(source *UpdateDistributionRequest) (interface{}, bool)
	ClearValue(item *UpdateDistributionRequest)

	// Those methods build corresponding UpdateDistributionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateDistributionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateDistributionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateDistributionRequest_FieldPathArrayItemValue
}

type UpdateDistributionRequest_FieldPathSelector int32

const (
	UpdateDistributionRequest_FieldPathSelectorDistribution UpdateDistributionRequest_FieldPathSelector = 0
	UpdateDistributionRequest_FieldPathSelectorUpdateMask   UpdateDistributionRequest_FieldPathSelector = 1
	UpdateDistributionRequest_FieldPathSelectorCas          UpdateDistributionRequest_FieldPathSelector = 2
)

func (s UpdateDistributionRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateDistributionRequest_FieldPathSelectorDistribution:
		return "distribution"
	case UpdateDistributionRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateDistributionRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", s))
	}
}

func BuildUpdateDistributionRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateDistributionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateDistributionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "distribution":
			return &UpdateDistributionRequest_FieldTerminalPath{selector: UpdateDistributionRequest_FieldPathSelectorDistribution}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateDistributionRequest_FieldTerminalPath{selector: UpdateDistributionRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateDistributionRequest_FieldTerminalPath{selector: UpdateDistributionRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "distribution":
			if subpath, err := distribution.BuildDistribution_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDistributionRequest_FieldSubPath{selector: UpdateDistributionRequest_FieldPathSelectorDistribution, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateDistributionRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDistributionRequest_FieldSubPath{selector: UpdateDistributionRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateDistributionRequest", fp)
}

func ParseUpdateDistributionRequest_FieldPath(rawField string) (UpdateDistributionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateDistributionRequest_FieldPath(fp)
}

func MustParseUpdateDistributionRequest_FieldPath(rawField string) UpdateDistributionRequest_FieldPath {
	fp, err := ParseUpdateDistributionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateDistributionRequest_FieldTerminalPath struct {
	selector UpdateDistributionRequest_FieldPathSelector
}

var _ UpdateDistributionRequest_FieldPath = (*UpdateDistributionRequest_FieldTerminalPath)(nil)

func (fp *UpdateDistributionRequest_FieldTerminalPath) Selector() UpdateDistributionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateDistributionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateDistributionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateDistributionRequest
func (fp *UpdateDistributionRequest_FieldTerminalPath) Get(source *UpdateDistributionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateDistributionRequest_FieldPathSelectorDistribution:
			if source.Distribution != nil {
				values = append(values, source.Distribution)
			}
		case UpdateDistributionRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateDistributionRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateDistributionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateDistributionRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateDistributionRequest
func (fp *UpdateDistributionRequest_FieldTerminalPath) GetSingle(source *UpdateDistributionRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateDistributionRequest_FieldPathSelectorDistribution:
		res := source.GetDistribution()
		return res, res != nil
	case UpdateDistributionRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateDistributionRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fp.selector))
	}
}

func (fp *UpdateDistributionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateDistributionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateDistributionRequest_FieldPathSelectorDistribution:
		return (*distribution.Distribution)(nil)
	case UpdateDistributionRequest_FieldPathSelectorUpdateMask:
		return (*distribution.Distribution_FieldMask)(nil)
	case UpdateDistributionRequest_FieldPathSelectorCas:
		return (*UpdateDistributionRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fp.selector))
	}
}

func (fp *UpdateDistributionRequest_FieldTerminalPath) ClearValue(item *UpdateDistributionRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateDistributionRequest_FieldPathSelectorDistribution:
			item.Distribution = nil
		case UpdateDistributionRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateDistributionRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateDistributionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateDistributionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateDistributionRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateDistributionRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateDistributionRequest_FieldPathValue {
	switch fp.selector {
	case UpdateDistributionRequest_FieldPathSelectorDistribution:
		return &UpdateDistributionRequest_FieldTerminalPathValue{UpdateDistributionRequest_FieldTerminalPath: *fp, value: value.(*distribution.Distribution)}
	case UpdateDistributionRequest_FieldPathSelectorUpdateMask:
		return &UpdateDistributionRequest_FieldTerminalPathValue{UpdateDistributionRequest_FieldTerminalPath: *fp, value: value.(*distribution.Distribution_FieldMask)}
	case UpdateDistributionRequest_FieldPathSelectorCas:
		return &UpdateDistributionRequest_FieldTerminalPathValue{UpdateDistributionRequest_FieldTerminalPath: *fp, value: value.(*UpdateDistributionRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fp.selector))
	}
}

func (fp *UpdateDistributionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateDistributionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateDistributionRequest_FieldPathArrayOfValues {
	fpaov := &UpdateDistributionRequest_FieldTerminalPathArrayOfValues{UpdateDistributionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateDistributionRequest_FieldPathSelectorDistribution:
		return &UpdateDistributionRequest_FieldTerminalPathArrayOfValues{UpdateDistributionRequest_FieldTerminalPath: *fp, values: values.([]*distribution.Distribution)}
	case UpdateDistributionRequest_FieldPathSelectorUpdateMask:
		return &UpdateDistributionRequest_FieldTerminalPathArrayOfValues{UpdateDistributionRequest_FieldTerminalPath: *fp, values: values.([]*distribution.Distribution_FieldMask)}
	case UpdateDistributionRequest_FieldPathSelectorCas:
		return &UpdateDistributionRequest_FieldTerminalPathArrayOfValues{UpdateDistributionRequest_FieldTerminalPath: *fp, values: values.([]*UpdateDistributionRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateDistributionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateDistributionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateDistributionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fp.selector))
	}
}

func (fp *UpdateDistributionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateDistributionRequest_FieldSubPath struct {
	selector UpdateDistributionRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateDistributionRequest_FieldPath = (*UpdateDistributionRequest_FieldSubPath)(nil)

func (fps *UpdateDistributionRequest_FieldSubPath) Selector() UpdateDistributionRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateDistributionRequest_FieldSubPath) AsDistributionSubPath() (distribution.Distribution_FieldPath, bool) {
	res, ok := fps.subPath.(distribution.Distribution_FieldPath)
	return res, ok
}
func (fps *UpdateDistributionRequest_FieldSubPath) AsCasSubPath() (UpdateDistributionRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateDistributionRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateDistributionRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateDistributionRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateDistributionRequest
func (fps *UpdateDistributionRequest_FieldSubPath) Get(source *UpdateDistributionRequest) (values []interface{}) {
	if asDistributionFieldPath, ok := fps.AsDistributionSubPath(); ok {
		values = append(values, asDistributionFieldPath.Get(source.GetDistribution())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateDistributionRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateDistributionRequest))
}

// GetSingle returns value of selected field from source UpdateDistributionRequest
func (fps *UpdateDistributionRequest_FieldSubPath) GetSingle(source *UpdateDistributionRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateDistributionRequest_FieldPathSelectorDistribution:
		if source.GetDistribution() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDistribution())
	case UpdateDistributionRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fps.selector))
	}
}

func (fps *UpdateDistributionRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateDistributionRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateDistributionRequest_FieldSubPath) ClearValue(item *UpdateDistributionRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateDistributionRequest_FieldPathSelectorDistribution:
			fps.subPath.ClearValueRaw(item.Distribution)
		case UpdateDistributionRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateDistributionRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateDistributionRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateDistributionRequest_FieldSubPath) WithIValue(value interface{}) UpdateDistributionRequest_FieldPathValue {
	return &UpdateDistributionRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateDistributionRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateDistributionRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateDistributionRequest_FieldPathArrayOfValues {
	return &UpdateDistributionRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateDistributionRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateDistributionRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateDistributionRequest_FieldPathArrayItemValue {
	return &UpdateDistributionRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateDistributionRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateDistributionRequest_FieldPathValue allows storing values for UpdateDistributionRequest fields according to their type
type UpdateDistributionRequest_FieldPathValue interface {
	UpdateDistributionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateDistributionRequest)
	CompareWith(*UpdateDistributionRequest) (cmp int, comparable bool)
}

func ParseUpdateDistributionRequest_FieldPathValue(pathStr, valueStr string) (UpdateDistributionRequest_FieldPathValue, error) {
	fp, err := ParseUpdateDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDistributionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateDistributionRequest_FieldPathValue), nil
}

func MustParseUpdateDistributionRequest_FieldPathValue(pathStr, valueStr string) UpdateDistributionRequest_FieldPathValue {
	fpv, err := ParseUpdateDistributionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateDistributionRequest_FieldTerminalPathValue struct {
	UpdateDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateDistributionRequest_FieldPathValue = (*UpdateDistributionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateDistributionRequest' as interface{}
func (fpv *UpdateDistributionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateDistributionRequest_FieldTerminalPathValue) AsDistributionValue() (*distribution.Distribution, bool) {
	res, ok := fpv.value.(*distribution.Distribution)
	return res, ok
}
func (fpv *UpdateDistributionRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*distribution.Distribution_FieldMask, bool) {
	res, ok := fpv.value.(*distribution.Distribution_FieldMask)
	return res, ok
}
func (fpv *UpdateDistributionRequest_FieldTerminalPathValue) AsCasValue() (*UpdateDistributionRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateDistributionRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateDistributionRequest
func (fpv *UpdateDistributionRequest_FieldTerminalPathValue) SetTo(target **UpdateDistributionRequest) {
	if *target == nil {
		*target = new(UpdateDistributionRequest)
	}
	switch fpv.selector {
	case UpdateDistributionRequest_FieldPathSelectorDistribution:
		(*target).Distribution = fpv.value.(*distribution.Distribution)
	case UpdateDistributionRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*distribution.Distribution_FieldMask)
	case UpdateDistributionRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateDistributionRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateDistributionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDistributionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateDistributionRequest_FieldTerminalPathValue' with the value under path in 'UpdateDistributionRequest'.
func (fpv *UpdateDistributionRequest_FieldTerminalPathValue) CompareWith(source *UpdateDistributionRequest) (int, bool) {
	switch fpv.selector {
	case UpdateDistributionRequest_FieldPathSelectorDistribution:
		return 0, false
	case UpdateDistributionRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateDistributionRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateDistributionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateDistributionRequest))
}

type UpdateDistributionRequest_FieldSubPathValue struct {
	UpdateDistributionRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateDistributionRequest_FieldPathValue = (*UpdateDistributionRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateDistributionRequest_FieldSubPathValue) AsDistributionPathValue() (distribution.Distribution_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(distribution.Distribution_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateDistributionRequest_FieldSubPathValue) AsCasPathValue() (UpdateDistributionRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateDistributionRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateDistributionRequest_FieldSubPathValue) SetTo(target **UpdateDistributionRequest) {
	if *target == nil {
		*target = new(UpdateDistributionRequest)
	}
	switch fpvs.Selector() {
	case UpdateDistributionRequest_FieldPathSelectorDistribution:
		fpvs.subPathValue.(distribution.Distribution_FieldPathValue).SetTo(&(*target).Distribution)
	case UpdateDistributionRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateDistributionRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDistributionRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDistributionRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateDistributionRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateDistributionRequest_FieldSubPathValue) CompareWith(source *UpdateDistributionRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateDistributionRequest_FieldPathSelectorDistribution:
		return fpvs.subPathValue.(distribution.Distribution_FieldPathValue).CompareWith(source.GetDistribution())
	case UpdateDistributionRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateDistributionRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDistributionRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateDistributionRequest))
}

// UpdateDistributionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateDistributionRequest according to their type
// Present only for array (repeated) types.
type UpdateDistributionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateDistributionRequest_FieldPath
	ContainsValue(*UpdateDistributionRequest) bool
}

// ParseUpdateDistributionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateDistributionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDistributionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateDistributionRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateDistributionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateDistributionRequest_FieldTerminalPathArrayItemValue struct {
	UpdateDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateDistributionRequest_FieldPathArrayItemValue = (*UpdateDistributionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateDistributionRequest as interface{}
func (fpaiv *UpdateDistributionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateDistributionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateDistributionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateDistributionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateDistributionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateDistributionRequest'
func (fpaiv *UpdateDistributionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateDistributionRequest) bool {
	slice := fpaiv.UpdateDistributionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateDistributionRequest_FieldSubPathArrayItemValue struct {
	UpdateDistributionRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateDistributionRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateDistributionRequest_FieldSubPathArrayItemValue) AsDistributionPathItemValue() (distribution.Distribution_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(distribution.Distribution_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateDistributionRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateDistributionRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateDistributionRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateDistributionRequest'
func (fpaivs *UpdateDistributionRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateDistributionRequest) bool {
	switch fpaivs.Selector() {
	case UpdateDistributionRequest_FieldPathSelectorDistribution:
		return fpaivs.subPathItemValue.(distribution.Distribution_FieldPathArrayItemValue).ContainsValue(source.GetDistribution())
	case UpdateDistributionRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateDistributionRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest: %d", fpaivs.Selector()))
	}
}

// UpdateDistributionRequest_FieldPathArrayOfValues allows storing slice of values for UpdateDistributionRequest fields according to their type
type UpdateDistributionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateDistributionRequest_FieldPath
}

func ParseUpdateDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateDistributionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateDistributionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateDistributionRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateDistributionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateDistributionRequest_FieldTerminalPathArrayOfValues struct {
	UpdateDistributionRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateDistributionRequest_FieldPathArrayOfValues = (*UpdateDistributionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateDistributionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateDistributionRequest_FieldPathSelectorDistribution:
		for _, v := range fpaov.values.([]*distribution.Distribution) {
			values = append(values, v)
		}
	case UpdateDistributionRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*distribution.Distribution_FieldMask) {
			values = append(values, v)
		}
	case UpdateDistributionRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateDistributionRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateDistributionRequest_FieldTerminalPathArrayOfValues) AsDistributionArrayOfValues() ([]*distribution.Distribution, bool) {
	res, ok := fpaov.values.([]*distribution.Distribution)
	return res, ok
}
func (fpaov *UpdateDistributionRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*distribution.Distribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*distribution.Distribution_FieldMask)
	return res, ok
}
func (fpaov *UpdateDistributionRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateDistributionRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateDistributionRequest_CAS)
	return res, ok
}

type UpdateDistributionRequest_FieldSubPathArrayOfValues struct {
	UpdateDistributionRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateDistributionRequest_FieldPathArrayOfValues = (*UpdateDistributionRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateDistributionRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateDistributionRequest_FieldSubPathArrayOfValues) AsDistributionPathArrayOfValues() (distribution.Distribution_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(distribution.Distribution_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateDistributionRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateDistributionRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateDistributionRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateDistributionRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateDistributionRequestCAS_FieldPathSelector
	Get(source *UpdateDistributionRequest_CAS) []interface{}
	GetSingle(source *UpdateDistributionRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateDistributionRequest_CAS)

	// Those methods build corresponding UpdateDistributionRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateDistributionRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateDistributionRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateDistributionRequestCAS_FieldPathArrayItemValue
}

type UpdateDistributionRequestCAS_FieldPathSelector int32

const (
	UpdateDistributionRequestCAS_FieldPathSelectorConditionalState UpdateDistributionRequestCAS_FieldPathSelector = 0
	UpdateDistributionRequestCAS_FieldPathSelectorFieldMask        UpdateDistributionRequestCAS_FieldPathSelector = 1
)

func (s UpdateDistributionRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateDistributionRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", s))
	}
}

func BuildUpdateDistributionRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateDistributionRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateDistributionRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateDistributionRequestCAS_FieldTerminalPath{selector: UpdateDistributionRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateDistributionRequestCAS_FieldTerminalPath{selector: UpdateDistributionRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := distribution.BuildDistribution_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateDistributionRequestCAS_FieldSubPath{selector: UpdateDistributionRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateDistributionRequest_CAS", fp)
}

func ParseUpdateDistributionRequestCAS_FieldPath(rawField string) (UpdateDistributionRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateDistributionRequestCAS_FieldPath(fp)
}

func MustParseUpdateDistributionRequestCAS_FieldPath(rawField string) UpdateDistributionRequestCAS_FieldPath {
	fp, err := ParseUpdateDistributionRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateDistributionRequestCAS_FieldTerminalPath struct {
	selector UpdateDistributionRequestCAS_FieldPathSelector
}

var _ UpdateDistributionRequestCAS_FieldPath = (*UpdateDistributionRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) Selector() UpdateDistributionRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateDistributionRequest_CAS
func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) Get(source *UpdateDistributionRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateDistributionRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateDistributionRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateDistributionRequest_CAS
func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) GetSingle(source *UpdateDistributionRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateDistributionRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateDistributionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
		return (*distribution.Distribution)(nil)
	case UpdateDistributionRequestCAS_FieldPathSelectorFieldMask:
		return (*distribution.Distribution_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) ClearValue(item *UpdateDistributionRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateDistributionRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateDistributionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateDistributionRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateDistributionRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateDistributionRequestCAS_FieldTerminalPathValue{UpdateDistributionRequestCAS_FieldTerminalPath: *fp, value: value.(*distribution.Distribution)}
	case UpdateDistributionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateDistributionRequestCAS_FieldTerminalPathValue{UpdateDistributionRequestCAS_FieldTerminalPath: *fp, value: value.(*distribution.Distribution_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateDistributionRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateDistributionRequestCAS_FieldTerminalPathArrayOfValues{UpdateDistributionRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateDistributionRequestCAS_FieldTerminalPathArrayOfValues{UpdateDistributionRequestCAS_FieldTerminalPath: *fp, values: values.([]*distribution.Distribution)}
	case UpdateDistributionRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateDistributionRequestCAS_FieldTerminalPathArrayOfValues{UpdateDistributionRequestCAS_FieldTerminalPath: *fp, values: values.([]*distribution.Distribution_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateDistributionRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateDistributionRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateDistributionRequestCAS_FieldSubPath struct {
	selector UpdateDistributionRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateDistributionRequestCAS_FieldPath = (*UpdateDistributionRequestCAS_FieldSubPath)(nil)

func (fps *UpdateDistributionRequestCAS_FieldSubPath) Selector() UpdateDistributionRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateDistributionRequestCAS_FieldSubPath) AsConditionalStateSubPath() (distribution.Distribution_FieldPath, bool) {
	res, ok := fps.subPath.(distribution.Distribution_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateDistributionRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateDistributionRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateDistributionRequest_CAS
func (fps *UpdateDistributionRequestCAS_FieldSubPath) Get(source *UpdateDistributionRequest_CAS) (values []interface{}) {
	if asDistributionFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asDistributionFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateDistributionRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateDistributionRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateDistributionRequest_CAS
func (fps *UpdateDistributionRequestCAS_FieldSubPath) GetSingle(source *UpdateDistributionRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateDistributionRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateDistributionRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateDistributionRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateDistributionRequestCAS_FieldSubPath) ClearValue(item *UpdateDistributionRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateDistributionRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateDistributionRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateDistributionRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateDistributionRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateDistributionRequestCAS_FieldPathValue {
	return &UpdateDistributionRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateDistributionRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateDistributionRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateDistributionRequestCAS_FieldPathArrayOfValues {
	return &UpdateDistributionRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateDistributionRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateDistributionRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateDistributionRequestCAS_FieldPathArrayItemValue {
	return &UpdateDistributionRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateDistributionRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateDistributionRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateDistributionRequestCAS_FieldPathValue interface {
	UpdateDistributionRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateDistributionRequest_CAS)
	CompareWith(*UpdateDistributionRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateDistributionRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateDistributionRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateDistributionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateDistributionRequestCAS_FieldPathValue), nil
}

func MustParseUpdateDistributionRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateDistributionRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateDistributionRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateDistributionRequestCAS_FieldTerminalPathValue struct {
	UpdateDistributionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateDistributionRequestCAS_FieldPathValue = (*UpdateDistributionRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateDistributionRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateDistributionRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*distribution.Distribution, bool) {
	res, ok := fpv.value.(*distribution.Distribution)
	return res, ok
}
func (fpv *UpdateDistributionRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*distribution.Distribution_FieldMask, bool) {
	res, ok := fpv.value.(*distribution.Distribution_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateDistributionRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateDistributionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateDistributionRequest_CAS)
	}
	switch fpv.selector {
	case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*distribution.Distribution)
	case UpdateDistributionRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*distribution.Distribution_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateDistributionRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDistributionRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateDistributionRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateDistributionRequest_CAS'.
func (fpv *UpdateDistributionRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateDistributionRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateDistributionRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateDistributionRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateDistributionRequest_CAS))
}

type UpdateDistributionRequestCAS_FieldSubPathValue struct {
	UpdateDistributionRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateDistributionRequestCAS_FieldPathValue = (*UpdateDistributionRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateDistributionRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (distribution.Distribution_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(distribution.Distribution_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateDistributionRequestCAS_FieldSubPathValue) SetTo(target **UpdateDistributionRequest_CAS) {
	if *target == nil {
		*target = new(UpdateDistributionRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(distribution.Distribution_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDistributionRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateDistributionRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateDistributionRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateDistributionRequestCAS_FieldSubPathValue) CompareWith(source *UpdateDistributionRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(distribution.Distribution_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateDistributionRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateDistributionRequest_CAS))
}

// UpdateDistributionRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateDistributionRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateDistributionRequestCAS_FieldPath
	ContainsValue(*UpdateDistributionRequest_CAS) bool
}

// ParseUpdateDistributionRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateDistributionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateDistributionRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateDistributionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateDistributionRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateDistributionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateDistributionRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateDistributionRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateDistributionRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateDistributionRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateDistributionRequestCAS_FieldPathArrayItemValue = (*UpdateDistributionRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateDistributionRequest_CAS as interface{}
func (fpaiv *UpdateDistributionRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateDistributionRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateDistributionRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateDistributionRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateDistributionRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateDistributionRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateDistributionRequest_CAS) bool {
	slice := fpaiv.UpdateDistributionRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateDistributionRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateDistributionRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateDistributionRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateDistributionRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (distribution.Distribution_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(distribution.Distribution_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateDistributionRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateDistributionRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(distribution.Distribution_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateDistributionRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateDistributionRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateDistributionRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateDistributionRequestCAS_FieldPath
}

func ParseUpdateDistributionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateDistributionRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateDistributionRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateDistributionRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateDistributionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateDistributionRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateDistributionRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateDistributionRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateDistributionRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateDistributionRequestCAS_FieldPathArrayOfValues = (*UpdateDistributionRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateDistributionRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateDistributionRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*distribution.Distribution) {
			values = append(values, v)
		}
	case UpdateDistributionRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*distribution.Distribution_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateDistributionRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*distribution.Distribution, bool) {
	res, ok := fpaov.values.([]*distribution.Distribution)
	return res, ok
}
func (fpaov *UpdateDistributionRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*distribution.Distribution_FieldMask, bool) {
	res, ok := fpaov.values.([]*distribution.Distribution_FieldMask)
	return res, ok
}

type UpdateDistributionRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateDistributionRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateDistributionRequestCAS_FieldPathArrayOfValues = (*UpdateDistributionRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateDistributionRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateDistributionRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (distribution.Distribution_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(distribution.Distribution_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteDistributionRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteDistributionRequest_FieldPathSelector
	Get(source *DeleteDistributionRequest) []interface{}
	GetSingle(source *DeleteDistributionRequest) (interface{}, bool)
	ClearValue(item *DeleteDistributionRequest)

	// Those methods build corresponding DeleteDistributionRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteDistributionRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteDistributionRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteDistributionRequest_FieldPathArrayItemValue
}

type DeleteDistributionRequest_FieldPathSelector int32

const (
	DeleteDistributionRequest_FieldPathSelectorName DeleteDistributionRequest_FieldPathSelector = 0
)

func (s DeleteDistributionRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteDistributionRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDistributionRequest: %d", s))
	}
}

func BuildDeleteDistributionRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteDistributionRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteDistributionRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteDistributionRequest_FieldTerminalPath{selector: DeleteDistributionRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteDistributionRequest", fp)
}

func ParseDeleteDistributionRequest_FieldPath(rawField string) (DeleteDistributionRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteDistributionRequest_FieldPath(fp)
}

func MustParseDeleteDistributionRequest_FieldPath(rawField string) DeleteDistributionRequest_FieldPath {
	fp, err := ParseDeleteDistributionRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteDistributionRequest_FieldTerminalPath struct {
	selector DeleteDistributionRequest_FieldPathSelector
}

var _ DeleteDistributionRequest_FieldPath = (*DeleteDistributionRequest_FieldTerminalPath)(nil)

func (fp *DeleteDistributionRequest_FieldTerminalPath) Selector() DeleteDistributionRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteDistributionRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteDistributionRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteDistributionRequest
func (fp *DeleteDistributionRequest_FieldTerminalPath) Get(source *DeleteDistributionRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteDistributionRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteDistributionRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteDistributionRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteDistributionRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteDistributionRequest
func (fp *DeleteDistributionRequest_FieldTerminalPath) GetSingle(source *DeleteDistributionRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteDistributionRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDistributionRequest: %d", fp.selector))
	}
}

func (fp *DeleteDistributionRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteDistributionRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteDistributionRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteDistributionRequest_FieldPathSelectorName:
		return (*distribution.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDistributionRequest: %d", fp.selector))
	}
}

func (fp *DeleteDistributionRequest_FieldTerminalPath) ClearValue(item *DeleteDistributionRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteDistributionRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteDistributionRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteDistributionRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteDistributionRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteDistributionRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteDistributionRequest_FieldPathSelectorName
}

func (fp *DeleteDistributionRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteDistributionRequest_FieldPathValue {
	switch fp.selector {
	case DeleteDistributionRequest_FieldPathSelectorName:
		return &DeleteDistributionRequest_FieldTerminalPathValue{DeleteDistributionRequest_FieldTerminalPath: *fp, value: value.(*distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDistributionRequest: %d", fp.selector))
	}
}

func (fp *DeleteDistributionRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteDistributionRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteDistributionRequest_FieldPathArrayOfValues {
	fpaov := &DeleteDistributionRequest_FieldTerminalPathArrayOfValues{DeleteDistributionRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteDistributionRequest_FieldPathSelectorName:
		return &DeleteDistributionRequest_FieldTerminalPathArrayOfValues{DeleteDistributionRequest_FieldTerminalPath: *fp, values: values.([]*distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDistributionRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteDistributionRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteDistributionRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteDistributionRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDistributionRequest: %d", fp.selector))
	}
}

func (fp *DeleteDistributionRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteDistributionRequest_FieldPathValue allows storing values for DeleteDistributionRequest fields according to their type
type DeleteDistributionRequest_FieldPathValue interface {
	DeleteDistributionRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteDistributionRequest)
	CompareWith(*DeleteDistributionRequest) (cmp int, comparable bool)
}

func ParseDeleteDistributionRequest_FieldPathValue(pathStr, valueStr string) (DeleteDistributionRequest_FieldPathValue, error) {
	fp, err := ParseDeleteDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDistributionRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteDistributionRequest_FieldPathValue), nil
}

func MustParseDeleteDistributionRequest_FieldPathValue(pathStr, valueStr string) DeleteDistributionRequest_FieldPathValue {
	fpv, err := ParseDeleteDistributionRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteDistributionRequest_FieldTerminalPathValue struct {
	DeleteDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteDistributionRequest_FieldPathValue = (*DeleteDistributionRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteDistributionRequest' as interface{}
func (fpv *DeleteDistributionRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteDistributionRequest_FieldTerminalPathValue) AsNameValue() (*distribution.Reference, bool) {
	res, ok := fpv.value.(*distribution.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteDistributionRequest
func (fpv *DeleteDistributionRequest_FieldTerminalPathValue) SetTo(target **DeleteDistributionRequest) {
	if *target == nil {
		*target = new(DeleteDistributionRequest)
	}
	switch fpv.selector {
	case DeleteDistributionRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*distribution.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteDistributionRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteDistributionRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteDistributionRequest_FieldTerminalPathValue' with the value under path in 'DeleteDistributionRequest'.
func (fpv *DeleteDistributionRequest_FieldTerminalPathValue) CompareWith(source *DeleteDistributionRequest) (int, bool) {
	switch fpv.selector {
	case DeleteDistributionRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*distribution.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteDistributionRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteDistributionRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteDistributionRequest))
}

// DeleteDistributionRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteDistributionRequest according to their type
// Present only for array (repeated) types.
type DeleteDistributionRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteDistributionRequest_FieldPath
	ContainsValue(*DeleteDistributionRequest) bool
}

// ParseDeleteDistributionRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteDistributionRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDistributionRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteDistributionRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteDistributionRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteDistributionRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteDistributionRequest_FieldTerminalPathArrayItemValue struct {
	DeleteDistributionRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteDistributionRequest_FieldPathArrayItemValue = (*DeleteDistributionRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteDistributionRequest as interface{}
func (fpaiv *DeleteDistributionRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteDistributionRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteDistributionRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteDistributionRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteDistributionRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteDistributionRequest'
func (fpaiv *DeleteDistributionRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteDistributionRequest) bool {
	slice := fpaiv.DeleteDistributionRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteDistributionRequest_FieldPathArrayOfValues allows storing slice of values for DeleteDistributionRequest fields according to their type
type DeleteDistributionRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteDistributionRequest_FieldPath
}

func ParseDeleteDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteDistributionRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteDistributionRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteDistributionRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteDistributionRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteDistributionRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteDistributionRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteDistributionRequest_FieldTerminalPathArrayOfValues struct {
	DeleteDistributionRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteDistributionRequest_FieldPathArrayOfValues = (*DeleteDistributionRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteDistributionRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteDistributionRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*distribution.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteDistributionRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*distribution.Reference, bool) {
	res, ok := fpaov.values.([]*distribution.Reference)
	return res, ok
}
