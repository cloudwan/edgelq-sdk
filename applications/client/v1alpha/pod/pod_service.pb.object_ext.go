// Code generated by protoc-gen-goten-object
// File: edgelq/applications/proto/v1alpha/pod_service.proto
// DO NOT EDIT!!!

package pod_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	pod "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha/pod"
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &pod.Pod{}
	_ = &project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
)

func (o *GetPodRequest) GotenObjectExt() {}

func (o *GetPodRequest) MakeFullFieldMask() *GetPodRequest_FieldMask {
	return FullGetPodRequest_FieldMask()
}

func (o *GetPodRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetPodRequest_FieldMask()
}

func (o *GetPodRequest) MakeDiffFieldMask(other *GetPodRequest) *GetPodRequest_FieldMask {
	if o == nil && other == nil {
		return &GetPodRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetPodRequest_FieldMask()
	}

	res := &GetPodRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetPodRequest_FieldTerminalPath{selector: GetPodRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetPodRequest_FieldTerminalPath{selector: GetPodRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetPodRequest_FieldTerminalPath{selector: GetPodRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetPodRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetPodRequest))
}

func (o *GetPodRequest) Clone() *GetPodRequest {
	if o == nil {
		return nil
	}
	result := &GetPodRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &pod.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*pod.Pod_FieldMask)
	result.View = o.View
	return result
}

func (o *GetPodRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetPodRequest) Merge(source *GetPodRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &pod.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(pod.Pod_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetPodRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetPodRequest))
}

func (o *BatchGetPodsRequest) GotenObjectExt() {}

func (o *BatchGetPodsRequest) MakeFullFieldMask() *BatchGetPodsRequest_FieldMask {
	return FullBatchGetPodsRequest_FieldMask()
}

func (o *BatchGetPodsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPodsRequest_FieldMask()
}

func (o *BatchGetPodsRequest) MakeDiffFieldMask(other *BatchGetPodsRequest) *BatchGetPodsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPodsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPodsRequest_FieldMask()
	}

	res := &BatchGetPodsRequest_FieldMask{}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPodsRequest_FieldTerminalPath{selector: BatchGetPodsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPodsRequest_FieldTerminalPath{selector: BatchGetPodsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetPodsRequest_FieldTerminalPath{selector: BatchGetPodsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetPodsRequest_FieldTerminalPath{selector: BatchGetPodsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetPodsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPodsRequest))
}

func (o *BatchGetPodsRequest) Clone() *BatchGetPodsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetPodsRequest{}
	result.Names = make([]*pod.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &pod.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*pod.Pod_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetPodsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPodsRequest) Merge(source *BatchGetPodsRequest) {
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *pod.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &pod.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(pod.Pod_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetPodsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPodsRequest))
}

func (o *BatchGetPodsResponse) GotenObjectExt() {}

func (o *BatchGetPodsResponse) MakeFullFieldMask() *BatchGetPodsResponse_FieldMask {
	return FullBatchGetPodsResponse_FieldMask()
}

func (o *BatchGetPodsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPodsResponse_FieldMask()
}

func (o *BatchGetPodsResponse) MakeDiffFieldMask(other *BatchGetPodsResponse) *BatchGetPodsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPodsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPodsResponse_FieldMask()
	}

	res := &BatchGetPodsResponse_FieldMask{}

	if len(o.GetPods()) == len(other.GetPods()) {
		for i, lValue := range o.GetPods() {
			rValue := other.GetPods()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetPodsResponse_FieldTerminalPath{selector: BatchGetPodsResponse_FieldPathSelectorPods})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPodsResponse_FieldTerminalPath{selector: BatchGetPodsResponse_FieldPathSelectorPods})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPodsResponse_FieldTerminalPath{selector: BatchGetPodsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPodsResponse_FieldTerminalPath{selector: BatchGetPodsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetPodsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPodsResponse))
}

func (o *BatchGetPodsResponse) Clone() *BatchGetPodsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetPodsResponse{}
	result.Pods = make([]*pod.Pod, len(o.Pods))
	for i, sourceValue := range o.Pods {
		result.Pods[i] = sourceValue.Clone()
	}
	result.Missing = make([]*pod.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &pod.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetPodsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPodsResponse) Merge(source *BatchGetPodsResponse) {
	for _, sourceValue := range source.GetPods() {
		exists := false
		for _, currentValue := range o.Pods {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *pod.Pod
			if sourceValue != nil {
				newDstElement = new(pod.Pod)
				newDstElement.Merge(sourceValue)
			}
			o.Pods = append(o.Pods, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *pod.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &pod.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetPodsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPodsResponse))
}

func (o *ListPodsRequest) GotenObjectExt() {}

func (o *ListPodsRequest) MakeFullFieldMask() *ListPodsRequest_FieldMask {
	return FullListPodsRequest_FieldMask()
}

func (o *ListPodsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPodsRequest_FieldMask()
}

func (o *ListPodsRequest) MakeDiffFieldMask(other *ListPodsRequest) *ListPodsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListPodsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPodsRequest_FieldMask()
	}

	res := &ListPodsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorView})
	}
	if o.GetIncludePagingInfo() != other.GetIncludePagingInfo() {
		res.Paths = append(res.Paths, &ListPodsRequest_FieldTerminalPath{selector: ListPodsRequest_FieldPathSelectorIncludePagingInfo})
	}
	return res
}

func (o *ListPodsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPodsRequest))
}

func (o *ListPodsRequest) Clone() *ListPodsRequest {
	if o == nil {
		return nil
	}
	result := &ListPodsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &pod.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &pod.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &pod.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &pod.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*pod.Pod_FieldMask)
	result.View = o.View
	result.IncludePagingInfo = o.IncludePagingInfo
	return result
}

func (o *ListPodsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPodsRequest) Merge(source *ListPodsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &pod.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &pod.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &pod.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &pod.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(pod.Pod_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.IncludePagingInfo = source.GetIncludePagingInfo()
}

func (o *ListPodsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPodsRequest))
}

func (o *ListPodsResponse) GotenObjectExt() {}

func (o *ListPodsResponse) MakeFullFieldMask() *ListPodsResponse_FieldMask {
	return FullListPodsResponse_FieldMask()
}

func (o *ListPodsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPodsResponse_FieldMask()
}

func (o *ListPodsResponse) MakeDiffFieldMask(other *ListPodsResponse) *ListPodsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListPodsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPodsResponse_FieldMask()
	}

	res := &ListPodsResponse_FieldMask{}

	if len(o.GetPods()) == len(other.GetPods()) {
		for i, lValue := range o.GetPods() {
			rValue := other.GetPods()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListPodsResponse_FieldTerminalPath{selector: ListPodsResponse_FieldPathSelectorPods})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListPodsResponse_FieldTerminalPath{selector: ListPodsResponse_FieldPathSelectorPods})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListPodsResponse_FieldTerminalPath{selector: ListPodsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListPodsResponse_FieldTerminalPath{selector: ListPodsResponse_FieldPathSelectorNextPageToken})
	}
	if o.GetCurrentOffset() != other.GetCurrentOffset() {
		res.Paths = append(res.Paths, &ListPodsResponse_FieldTerminalPath{selector: ListPodsResponse_FieldPathSelectorCurrentOffset})
	}
	if o.GetTotalResultsCount() != other.GetTotalResultsCount() {
		res.Paths = append(res.Paths, &ListPodsResponse_FieldTerminalPath{selector: ListPodsResponse_FieldPathSelectorTotalResultsCount})
	}
	return res
}

func (o *ListPodsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPodsResponse))
}

func (o *ListPodsResponse) Clone() *ListPodsResponse {
	if o == nil {
		return nil
	}
	result := &ListPodsResponse{}
	result.Pods = make([]*pod.Pod, len(o.Pods))
	for i, sourceValue := range o.Pods {
		result.Pods[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &pod.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &pod.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.CurrentOffset = o.CurrentOffset
	result.TotalResultsCount = o.TotalResultsCount
	return result
}

func (o *ListPodsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPodsResponse) Merge(source *ListPodsResponse) {
	for _, sourceValue := range source.GetPods() {
		exists := false
		for _, currentValue := range o.Pods {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *pod.Pod
			if sourceValue != nil {
				newDstElement = new(pod.Pod)
				newDstElement.Merge(sourceValue)
			}
			o.Pods = append(o.Pods, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &pod.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &pod.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
	o.CurrentOffset = source.GetCurrentOffset()
	o.TotalResultsCount = source.GetTotalResultsCount()
}

func (o *ListPodsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPodsResponse))
}

func (o *WatchPodRequest) GotenObjectExt() {}

func (o *WatchPodRequest) MakeFullFieldMask() *WatchPodRequest_FieldMask {
	return FullWatchPodRequest_FieldMask()
}

func (o *WatchPodRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPodRequest_FieldMask()
}

func (o *WatchPodRequest) MakeDiffFieldMask(other *WatchPodRequest) *WatchPodRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPodRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPodRequest_FieldMask()
	}

	res := &WatchPodRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchPodRequest_FieldTerminalPath{selector: WatchPodRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPodRequest_FieldTerminalPath{selector: WatchPodRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPodRequest_FieldTerminalPath{selector: WatchPodRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchPodRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPodRequest))
}

func (o *WatchPodRequest) Clone() *WatchPodRequest {
	if o == nil {
		return nil
	}
	result := &WatchPodRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &pod.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*pod.Pod_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchPodRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPodRequest) Merge(source *WatchPodRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &pod.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(pod.Pod_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchPodRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPodRequest))
}

func (o *WatchPodResponse) GotenObjectExt() {}

func (o *WatchPodResponse) MakeFullFieldMask() *WatchPodResponse_FieldMask {
	return FullWatchPodResponse_FieldMask()
}

func (o *WatchPodResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPodResponse_FieldMask()
}

func (o *WatchPodResponse) MakeDiffFieldMask(other *WatchPodResponse) *WatchPodResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPodResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPodResponse_FieldMask()
	}

	res := &WatchPodResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchPodResponse_FieldTerminalPath{selector: WatchPodResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchPodResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPodResponse))
}

func (o *WatchPodResponse) Clone() *WatchPodResponse {
	if o == nil {
		return nil
	}
	result := &WatchPodResponse{}
	result.Change = proto.Clone(o.Change).(*pod.PodChange)
	return result
}

func (o *WatchPodResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPodResponse) Merge(source *WatchPodResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(pod.PodChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchPodResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPodResponse))
}

func (o *WatchPodsRequest) GotenObjectExt() {}

func (o *WatchPodsRequest) MakeFullFieldMask() *WatchPodsRequest_FieldMask {
	return FullWatchPodsRequest_FieldMask()
}

func (o *WatchPodsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPodsRequest_FieldMask()
}

func (o *WatchPodsRequest) MakeDiffFieldMask(other *WatchPodsRequest) *WatchPodsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPodsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPodsRequest_FieldMask()
	}

	res := &WatchPodsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorResumeToken})
	}
	if !proto.Equal(o.GetStartingTime(), other.GetStartingTime()) {
		res.Paths = append(res.Paths, &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorStartingTime})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchPodsRequest_FieldTerminalPath{selector: WatchPodsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchPodsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPodsRequest))
}

func (o *WatchPodsRequest) Clone() *WatchPodsRequest {
	if o == nil {
		return nil
	}
	result := &WatchPodsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &pod.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &pod.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &pod.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	result.StartingTime = proto.Clone(o.StartingTime).(*timestamp.Timestamp)
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &pod.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*pod.Pod_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchPodsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPodsRequest) Merge(source *WatchPodsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &pod.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &pod.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &pod.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetStartingTime() != nil {
		if o.StartingTime == nil {
			o.StartingTime = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartingTime, source.GetStartingTime())
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &pod.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(pod.Pod_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchPodsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPodsRequest))
}

func (o *WatchPodsResponse) GotenObjectExt() {}

func (o *WatchPodsResponse) MakeFullFieldMask() *WatchPodsResponse_FieldMask {
	return FullWatchPodsResponse_FieldMask()
}

func (o *WatchPodsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPodsResponse_FieldMask()
}

func (o *WatchPodsResponse) MakeDiffFieldMask(other *WatchPodsResponse) *WatchPodsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPodsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPodsResponse_FieldMask()
	}

	res := &WatchPodsResponse_FieldMask{}

	if len(o.GetPodChanges()) == len(other.GetPodChanges()) {
		for i, lValue := range o.GetPodChanges() {
			rValue := other.GetPodChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorPodChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorPodChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchPodsResponse_FieldSubPath{selector: WatchPodsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchPodsResponse_FieldTerminalPath{selector: WatchPodsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchPodsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPodsResponse))
}

func (o *WatchPodsResponse) Clone() *WatchPodsResponse {
	if o == nil {
		return nil
	}
	result := &WatchPodsResponse{}
	result.PodChanges = make([]*pod.PodChange, len(o.PodChanges))
	for i, sourceValue := range o.PodChanges {
		result.PodChanges[i] = proto.Clone(sourceValue).(*pod.PodChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchPodsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPodsResponse) Merge(source *WatchPodsResponse) {
	for _, sourceValue := range source.GetPodChanges() {
		exists := false
		for _, currentValue := range o.PodChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *pod.PodChange
			if sourceValue != nil {
				newDstElement = new(pod.PodChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.PodChanges = append(o.PodChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchPodsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchPodsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPodsResponse))
}

func (o *WatchPodsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchPodsResponse_PageTokenChange) MakeFullFieldMask() *WatchPodsResponse_PageTokenChange_FieldMask {
	return FullWatchPodsResponse_PageTokenChange_FieldMask()
}

func (o *WatchPodsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPodsResponse_PageTokenChange_FieldMask()
}

func (o *WatchPodsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchPodsResponse_PageTokenChange) *WatchPodsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchPodsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPodsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchPodsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchPodsResponsePageTokenChange_FieldTerminalPath{selector: WatchPodsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchPodsResponsePageTokenChange_FieldTerminalPath{selector: WatchPodsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchPodsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPodsResponse_PageTokenChange))
}

func (o *WatchPodsResponse_PageTokenChange) Clone() *WatchPodsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchPodsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &pod.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &pod.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchPodsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPodsResponse_PageTokenChange) Merge(source *WatchPodsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &pod.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &pod.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchPodsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPodsResponse_PageTokenChange))
}

func (o *CreatePodRequest) GotenObjectExt() {}

func (o *CreatePodRequest) MakeFullFieldMask() *CreatePodRequest_FieldMask {
	return FullCreatePodRequest_FieldMask()
}

func (o *CreatePodRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreatePodRequest_FieldMask()
}

func (o *CreatePodRequest) MakeDiffFieldMask(other *CreatePodRequest) *CreatePodRequest_FieldMask {
	if o == nil && other == nil {
		return &CreatePodRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreatePodRequest_FieldMask()
	}

	res := &CreatePodRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreatePodRequest_FieldTerminalPath{selector: CreatePodRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetPod().MakeDiffFieldMask(other.GetPod())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreatePodRequest_FieldTerminalPath{selector: CreatePodRequest_FieldPathSelectorPod})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreatePodRequest_FieldSubPath{selector: CreatePodRequest_FieldPathSelectorPod, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreatePodRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreatePodRequest))
}

func (o *CreatePodRequest) Clone() *CreatePodRequest {
	if o == nil {
		return nil
	}
	result := &CreatePodRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &pod.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Pod = o.Pod.Clone()
	return result
}

func (o *CreatePodRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreatePodRequest) Merge(source *CreatePodRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &pod.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetPod() != nil {
		if o.Pod == nil {
			o.Pod = new(pod.Pod)
		}
		o.Pod.Merge(source.GetPod())
	}
}

func (o *CreatePodRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreatePodRequest))
}

func (o *UpdatePodRequest) GotenObjectExt() {}

func (o *UpdatePodRequest) MakeFullFieldMask() *UpdatePodRequest_FieldMask {
	return FullUpdatePodRequest_FieldMask()
}

func (o *UpdatePodRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePodRequest_FieldMask()
}

func (o *UpdatePodRequest) MakeDiffFieldMask(other *UpdatePodRequest) *UpdatePodRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdatePodRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePodRequest_FieldMask()
	}

	res := &UpdatePodRequest_FieldMask{}
	{
		subMask := o.GetPod().MakeDiffFieldMask(other.GetPod())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePodRequest_FieldTerminalPath{selector: UpdatePodRequest_FieldPathSelectorPod})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePodRequest_FieldSubPath{selector: UpdatePodRequest_FieldPathSelectorPod, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdatePodRequest_FieldTerminalPath{selector: UpdatePodRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePodRequest_FieldTerminalPath{selector: UpdatePodRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePodRequest_FieldSubPath{selector: UpdatePodRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdatePodRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePodRequest))
}

func (o *UpdatePodRequest) Clone() *UpdatePodRequest {
	if o == nil {
		return nil
	}
	result := &UpdatePodRequest{}
	result.Pod = o.Pod.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*pod.Pod_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdatePodRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePodRequest) Merge(source *UpdatePodRequest) {
	if source.GetPod() != nil {
		if o.Pod == nil {
			o.Pod = new(pod.Pod)
		}
		o.Pod.Merge(source.GetPod())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(pod.Pod_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdatePodRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdatePodRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePodRequest))
}

func (o *UpdatePodRequest_CAS) GotenObjectExt() {}

func (o *UpdatePodRequest_CAS) MakeFullFieldMask() *UpdatePodRequest_CAS_FieldMask {
	return FullUpdatePodRequest_CAS_FieldMask()
}

func (o *UpdatePodRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePodRequest_CAS_FieldMask()
}

func (o *UpdatePodRequest_CAS) MakeDiffFieldMask(other *UpdatePodRequest_CAS) *UpdatePodRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdatePodRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePodRequest_CAS_FieldMask()
	}

	res := &UpdatePodRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePodRequestCAS_FieldTerminalPath{selector: UpdatePodRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePodRequestCAS_FieldSubPath{selector: UpdatePodRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdatePodRequestCAS_FieldTerminalPath{selector: UpdatePodRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdatePodRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePodRequest_CAS))
}

func (o *UpdatePodRequest_CAS) Clone() *UpdatePodRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdatePodRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*pod.Pod_FieldMask)
	return result
}

func (o *UpdatePodRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePodRequest_CAS) Merge(source *UpdatePodRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(pod.Pod)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(pod.Pod_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdatePodRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePodRequest_CAS))
}

func (o *DeletePodRequest) GotenObjectExt() {}

func (o *DeletePodRequest) MakeFullFieldMask() *DeletePodRequest_FieldMask {
	return FullDeletePodRequest_FieldMask()
}

func (o *DeletePodRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeletePodRequest_FieldMask()
}

func (o *DeletePodRequest) MakeDiffFieldMask(other *DeletePodRequest) *DeletePodRequest_FieldMask {
	if o == nil && other == nil {
		return &DeletePodRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeletePodRequest_FieldMask()
	}

	res := &DeletePodRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeletePodRequest_FieldTerminalPath{selector: DeletePodRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeletePodRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeletePodRequest))
}

func (o *DeletePodRequest) Clone() *DeletePodRequest {
	if o == nil {
		return nil
	}
	result := &DeletePodRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &pod.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeletePodRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeletePodRequest) Merge(source *DeletePodRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &pod.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeletePodRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeletePodRequest))
}
