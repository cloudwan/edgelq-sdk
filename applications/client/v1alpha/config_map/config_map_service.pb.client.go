// Code generated by protoc-gen-goten-client
// API: ConfigMapService
// DO NOT EDIT!!!

package config_map_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	config_map "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha/config_map"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &config_map.ConfigMap{}
	_ = &empty.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConfigMapServiceClient is the client API for ConfigMapService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigMapServiceClient interface {
	GetConfigMap(ctx context.Context, in *GetConfigMapRequest, opts ...grpc.CallOption) (*config_map.ConfigMap, error)
	BatchGetConfigMaps(ctx context.Context, in *BatchGetConfigMapsRequest, opts ...grpc.CallOption) (*BatchGetConfigMapsResponse, error)
	ListConfigMaps(ctx context.Context, in *ListConfigMapsRequest, opts ...grpc.CallOption) (*ListConfigMapsResponse, error)
	WatchConfigMap(ctx context.Context, in *WatchConfigMapRequest, opts ...grpc.CallOption) (WatchConfigMapClientStream, error)
	WatchConfigMaps(ctx context.Context, in *WatchConfigMapsRequest, opts ...grpc.CallOption) (WatchConfigMapsClientStream, error)
	CreateConfigMap(ctx context.Context, in *CreateConfigMapRequest, opts ...grpc.CallOption) (*config_map.ConfigMap, error)
	UpdateConfigMap(ctx context.Context, in *UpdateConfigMapRequest, opts ...grpc.CallOption) (*config_map.ConfigMap, error)
	DeleteConfigMap(ctx context.Context, in *DeleteConfigMapRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewConfigMapServiceClient(cc grpc.ClientConnInterface) ConfigMapServiceClient {
	return &client{cc}
}

func (c *client) GetConfigMap(ctx context.Context, in *GetConfigMapRequest, opts ...grpc.CallOption) (*config_map.ConfigMap, error) {
	out := new(config_map.ConfigMap)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1alpha.ConfigMapService/GetConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetConfigMaps(ctx context.Context, in *BatchGetConfigMapsRequest, opts ...grpc.CallOption) (*BatchGetConfigMapsResponse, error) {
	out := new(BatchGetConfigMapsResponse)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1alpha.ConfigMapService/BatchGetConfigMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListConfigMaps(ctx context.Context, in *ListConfigMapsRequest, opts ...grpc.CallOption) (*ListConfigMapsResponse, error) {
	out := new(ListConfigMapsResponse)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1alpha.ConfigMapService/ListConfigMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchConfigMap(ctx context.Context, in *WatchConfigMapRequest, opts ...grpc.CallOption) (WatchConfigMapClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchConfigMap",
			ServerStreams: true,
		},
		"/ntt.applications.v1alpha.ConfigMapService/WatchConfigMap", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchConfigMapWatchConfigMapClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchConfigMapClientStream interface {
	Recv() (*WatchConfigMapResponse, error)
	grpc.ClientStream
}

type watchConfigMapWatchConfigMapClient struct {
	grpc.ClientStream
}

func (x *watchConfigMapWatchConfigMapClient) Recv() (*WatchConfigMapResponse, error) {
	m := new(WatchConfigMapResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchConfigMaps(ctx context.Context, in *WatchConfigMapsRequest, opts ...grpc.CallOption) (WatchConfigMapsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchConfigMaps",
			ServerStreams: true,
		},
		"/ntt.applications.v1alpha.ConfigMapService/WatchConfigMaps", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchConfigMapsWatchConfigMapsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchConfigMapsClientStream interface {
	Recv() (*WatchConfigMapsResponse, error)
	grpc.ClientStream
}

type watchConfigMapsWatchConfigMapsClient struct {
	grpc.ClientStream
}

func (x *watchConfigMapsWatchConfigMapsClient) Recv() (*WatchConfigMapsResponse, error) {
	m := new(WatchConfigMapsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateConfigMap(ctx context.Context, in *CreateConfigMapRequest, opts ...grpc.CallOption) (*config_map.ConfigMap, error) {
	out := new(config_map.ConfigMap)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1alpha.ConfigMapService/CreateConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateConfigMap(ctx context.Context, in *UpdateConfigMapRequest, opts ...grpc.CallOption) (*config_map.ConfigMap, error) {
	out := new(config_map.ConfigMap)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1alpha.ConfigMapService/UpdateConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteConfigMap(ctx context.Context, in *DeleteConfigMapRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1alpha.ConfigMapService/DeleteConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
