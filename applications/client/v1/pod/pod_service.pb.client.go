// Code generated by protoc-gen-goten-client
// API: PodService
// DO NOT EDIT!!!

package pod_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	pod "github.com/cloudwan/edgelq-sdk/applications/resources/v1/pod"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = new(context.Context)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &pod.Pod{}
	_ = &emptypb.Empty{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PodServiceClient is the client API for PodService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PodServiceClient interface {
	GetPod(ctx context.Context, in *GetPodRequest, opts ...grpc.CallOption) (*pod.Pod, error)
	BatchGetPods(ctx context.Context, in *BatchGetPodsRequest, opts ...grpc.CallOption) (*BatchGetPodsResponse, error)
	ListPods(ctx context.Context, in *ListPodsRequest, opts ...grpc.CallOption) (*ListPodsResponse, error)
	WatchPod(ctx context.Context, in *WatchPodRequest, opts ...grpc.CallOption) (WatchPodClientStream, error)
	WatchPods(ctx context.Context, in *WatchPodsRequest, opts ...grpc.CallOption) (WatchPodsClientStream, error)
	CreatePod(ctx context.Context, in *CreatePodRequest, opts ...grpc.CallOption) (*pod.Pod, error)
	UpdatePod(ctx context.Context, in *UpdatePodRequest, opts ...grpc.CallOption) (*pod.Pod, error)
	DeletePod(ctx context.Context, in *DeletePodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewPodServiceClient(cc grpc.ClientConnInterface) PodServiceClient {
	return &client{cc}
}

func (c *client) GetPod(ctx context.Context, in *GetPodRequest, opts ...grpc.CallOption) (*pod.Pod, error) {
	out := new(pod.Pod)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1.PodService/GetPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetPods(ctx context.Context, in *BatchGetPodsRequest, opts ...grpc.CallOption) (*BatchGetPodsResponse, error) {
	out := new(BatchGetPodsResponse)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1.PodService/BatchGetPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPods(ctx context.Context, in *ListPodsRequest, opts ...grpc.CallOption) (*ListPodsResponse, error) {
	out := new(ListPodsResponse)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1.PodService/ListPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchPod(ctx context.Context, in *WatchPodRequest, opts ...grpc.CallOption) (WatchPodClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPod",
			ServerStreams: true,
		},
		"/ntt.applications.v1.PodService/WatchPod", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPodWatchPodClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPodClientStream interface {
	Recv() (*WatchPodResponse, error)
	grpc.ClientStream
}

type watchPodWatchPodClient struct {
	grpc.ClientStream
}

func (x *watchPodWatchPodClient) Recv() (*WatchPodResponse, error) {
	m := new(WatchPodResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchPods(ctx context.Context, in *WatchPodsRequest, opts ...grpc.CallOption) (WatchPodsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPods",
			ServerStreams: true,
		},
		"/ntt.applications.v1.PodService/WatchPods", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPodsWatchPodsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPodsClientStream interface {
	Recv() (*WatchPodsResponse, error)
	grpc.ClientStream
}

type watchPodsWatchPodsClient struct {
	grpc.ClientStream
}

func (x *watchPodsWatchPodsClient) Recv() (*WatchPodsResponse, error) {
	m := new(WatchPodsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreatePod(ctx context.Context, in *CreatePodRequest, opts ...grpc.CallOption) (*pod.Pod, error) {
	out := new(pod.Pod)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1.PodService/CreatePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePod(ctx context.Context, in *UpdatePodRequest, opts ...grpc.CallOption) (*pod.Pod, error) {
	out := new(pod.Pod)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1.PodService/UpdatePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeletePod(ctx context.Context, in *DeletePodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ntt.applications.v1.PodService/DeletePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
