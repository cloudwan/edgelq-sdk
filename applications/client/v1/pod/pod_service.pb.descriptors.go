// Code generated by protoc-gen-goten-client
// API: PodService
// DO NOT EDIT!!!

package pod_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	pod "github.com/cloudwan/edgelq-sdk/applications/resources/v1/pod"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &pod.Pod{}
	_ = &emptypb.Empty{}
)

var (
	descriptorsInitialized bool
	podServiceDescriptor   *PodServiceDescriptor
	getPodDescriptor       *GetPodDescriptor
	batchGetPodsDescriptor *BatchGetPodsDescriptor
	listPodsDescriptor     *ListPodsDescriptor
	watchPodDescriptor     *WatchPodDescriptor
	watchPodsDescriptor    *WatchPodsDescriptor
	createPodDescriptor    *CreatePodDescriptor
	updatePodDescriptor    *UpdatePodDescriptor
	deletePodDescriptor    *DeletePodDescriptor
)

type GetPodDescriptor struct{}

type GetPodDescriptorClientMsgHandle struct{}

type GetPodDescriptorServerMsgHandle struct{}

func (d *GetPodDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetPodRequest{}
}

func (d *GetPodDescriptor) NewEmptyServerMsg() proto.Message {
	return &pod.Pod{}
}

func (d *GetPodDescriptor) IsUnary() bool {
	return true
}

func (d *GetPodDescriptor) IsClientStream() bool {
	return false
}

func (d *GetPodDescriptor) IsServerStream() bool {
	return false
}

func (d *GetPodDescriptor) IsCollection() bool {
	return false
}

func (d *GetPodDescriptor) IsPlural() bool {
	return false
}

func (d *GetPodDescriptor) HasResource() bool {
	return true
}

func (d *GetPodDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetPodDescriptor) GetVerb() string {
	return "get"
}

func (d *GetPodDescriptor) GetMethodName() string {
	return "GetPod"
}

func (d *GetPodDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1.PodService/GetPod"
}

func (d *GetPodDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1"
}

func (d *GetPodDescriptor) GetApiName() string {
	return "PodService"
}

func (d *GetPodDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *GetPodDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetPodDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *GetPodDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *GetPodDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPodDescriptorClientMsgHandle{}
}

func (d *GetPodDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetPodDescriptorServerMsgHandle{}
}

func (h *GetPodDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetPodRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*pod.Name)(nil)
}

func (h *GetPodDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetPodRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPodDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetPodRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetPodDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetPodRequest) *pod.Pod
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetPodDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetPodRequest) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetPodDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*pod.Pod) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*pod.Name)(nil)
}

func (h *GetPodDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*pod.Pod) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetPodDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*pod.Pod) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetPodDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*pod.Pod)
}

func (h *GetPodDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*pod.Pod) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetPodDescriptor() *GetPodDescriptor {
	return getPodDescriptor
}

type BatchGetPodsDescriptor struct{}

type BatchGetPodsDescriptorClientMsgHandle struct{}

type BatchGetPodsDescriptorServerMsgHandle struct{}

func (d *BatchGetPodsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetPodsRequest{}
}

func (d *BatchGetPodsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetPodsResponse{}
}

func (d *BatchGetPodsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetPodsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetPodsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetPodsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetPodsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetPodsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetPodsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetPodsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetPodsDescriptor) GetMethodName() string {
	return "BatchGetPods"
}

func (d *BatchGetPodsDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1.PodService/BatchGetPods"
}

func (d *BatchGetPodsDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1"
}

func (d *BatchGetPodsDescriptor) GetApiName() string {
	return "PodService"
}

func (d *BatchGetPodsDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *BatchGetPodsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetPodsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *BatchGetPodsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *BatchGetPodsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPodsDescriptorClientMsgHandle{}
}

func (d *BatchGetPodsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetPodsDescriptorServerMsgHandle{}
}

func (h *BatchGetPodsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPodsRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPodsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPodsRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return pod.PodNameList(names)
		}
	}
	return (pod.PodNameList)(nil)
}

func (h *BatchGetPodsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPodsRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetPodsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetPodsRequest) *pod.Pod
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetPodsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetPodsRequest) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetPodsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetPodsResponse) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetPodsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetPodsResponse) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetPods(); len(resources) > 0 {
			list := make(pod.PodNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (pod.PodNameList)(nil)
}

func (h *BatchGetPodsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetPodsResponse) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetPodsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetPodsResponse) *pod.Pod
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetPodsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetPodsResponse) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetPods(); len(resources) > 0 {
			return pod.PodList(resources)
		}
	}
	return (pod.PodList)(nil)
}

func GetBatchGetPodsDescriptor() *BatchGetPodsDescriptor {
	return batchGetPodsDescriptor
}

type ListPodsDescriptor struct{}

type ListPodsDescriptorClientMsgHandle struct{}

type ListPodsDescriptorServerMsgHandle struct{}

func (d *ListPodsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListPodsRequest{}
}

func (d *ListPodsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListPodsResponse{}
}

func (d *ListPodsDescriptor) IsUnary() bool {
	return true
}

func (d *ListPodsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListPodsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListPodsDescriptor) IsCollection() bool {
	return true
}

func (d *ListPodsDescriptor) IsPlural() bool {
	return true
}

func (d *ListPodsDescriptor) HasResource() bool {
	return true
}

func (d *ListPodsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListPodsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListPodsDescriptor) GetMethodName() string {
	return "ListPods"
}

func (d *ListPodsDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1.PodService/ListPods"
}

func (d *ListPodsDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1"
}

func (d *ListPodsDescriptor) GetApiName() string {
	return "PodService"
}

func (d *ListPodsDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *ListPodsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListPodsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *ListPodsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *ListPodsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPodsDescriptorClientMsgHandle{}
}

func (d *ListPodsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListPodsDescriptorServerMsgHandle{}
}

func (h *ListPodsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPodsRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPodsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPodsRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListPodsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPodsRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*pod.ParentName)(nil)
}

func (h *ListPodsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListPodsRequest) *pod.Pod
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListPodsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListPodsRequest) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListPodsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListPodsResponse) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListPodsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListPodsResponse) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetPods(); len(resources) > 0 {
			list := make(pod.PodNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (pod.PodNameList)(nil)
}

func (h *ListPodsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListPodsResponse) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListPodsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListPodsResponse) *pod.Pod
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListPodsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListPodsResponse) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetPods(); len(resources) > 0 {
			return pod.PodList(resources)
		}
	}
	return (pod.PodList)(nil)
}

func GetListPodsDescriptor() *ListPodsDescriptor {
	return listPodsDescriptor
}

type WatchPodDescriptor struct{}

type WatchPodDescriptorClientMsgHandle struct{}

type WatchPodDescriptorServerMsgHandle struct{}

func (d *WatchPodDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPodRequest{}
}

func (d *WatchPodDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPodResponse{}
}

func (d *WatchPodDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPodDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPodDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPodDescriptor) IsCollection() bool {
	return false
}

func (d *WatchPodDescriptor) IsPlural() bool {
	return false
}

func (d *WatchPodDescriptor) HasResource() bool {
	return true
}

func (d *WatchPodDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPodDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPodDescriptor) GetMethodName() string {
	return "WatchPod"
}

func (d *WatchPodDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1.PodService/WatchPod"
}

func (d *WatchPodDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1"
}

func (d *WatchPodDescriptor) GetApiName() string {
	return "PodService"
}

func (d *WatchPodDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *WatchPodDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchPodDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *WatchPodDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *WatchPodDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPodDescriptorClientMsgHandle{}
}

func (d *WatchPodDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPodDescriptorServerMsgHandle{}
}

func (h *WatchPodDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPodRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*pod.Name)(nil)
}

func (h *WatchPodDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPodRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPodDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPodRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPodDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchPodRequest) *pod.Pod
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchPodDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchPodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchPodRequest) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchPodDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPodResponse) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *pod.PodChange_Added_:
				return tResChange.Added.GetPod().GetName()
			case *pod.PodChange_Modified_:
				return tResChange.Modified.GetName()
			case *pod.PodChange_Removed_:
				return tResChange.Removed.GetName()
			case *pod.PodChange_Current_:
				return tResChange.Current.GetPod().GetName()
			}
		}
	}
	return (*pod.Name)(nil)
}

func (h *WatchPodDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPodResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPodResponse) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPodDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPodResponse) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPodDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchPodResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchPodResponse) *pod.Pod
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *pod.PodChange_Added_:
				return tResChange.Added.GetPod()
			case *pod.PodChange_Modified_:
				return tResChange.Modified.GetPod()
			case *pod.PodChange_Current_:
				return tResChange.Current.GetPod()
			}
		}
	}
	return (*pod.Pod)(nil)
}

func (h *WatchPodDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchPodResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchPodResponse) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchPodDescriptor() *WatchPodDescriptor {
	return watchPodDescriptor
}

type WatchPodsDescriptor struct{}

type WatchPodsDescriptorClientMsgHandle struct{}

type WatchPodsDescriptorServerMsgHandle struct{}

func (d *WatchPodsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchPodsRequest{}
}

func (d *WatchPodsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchPodsResponse{}
}

func (d *WatchPodsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchPodsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchPodsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchPodsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchPodsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchPodsDescriptor) HasResource() bool {
	return true
}

func (d *WatchPodsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchPodsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchPodsDescriptor) GetMethodName() string {
	return "WatchPods"
}

func (d *WatchPodsDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1.PodService/WatchPods"
}

func (d *WatchPodsDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1"
}

func (d *WatchPodsDescriptor) GetApiName() string {
	return "PodService"
}

func (d *WatchPodsDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *WatchPodsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchPodsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *WatchPodsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *WatchPodsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPodsDescriptorClientMsgHandle{}
}

func (d *WatchPodsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchPodsDescriptorServerMsgHandle{}
}

func (h *WatchPodsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPodsRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPodsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPodsRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchPodsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPodsRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*pod.ParentName)(nil)
}

func (h *WatchPodsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchPodsRequest) *pod.Pod
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchPodsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchPodsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchPodsRequest) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchPodsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchPodsResponse) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchPodsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchPodsResponse) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetPodChanges(); len(resChanges) > 0 {
			list := make(pod.PodNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *pod.PodChange_Added_:
					list = append(list, tResChange.Added.GetPod().GetName())
				case *pod.PodChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *pod.PodChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *pod.PodChange_Current_:
					list = append(list, tResChange.Current.GetPod().GetName())
				}
			}
			return list
		}
	}
	return (pod.PodNameList)(nil)
}

func (h *WatchPodsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchPodsResponse) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchPodsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchPodsResponse) *pod.Pod
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchPodsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchPodsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchPodsResponse) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetPodChanges(); len(resChanges) > 0 {
			list := make(pod.PodList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *pod.PodChange_Added_:
					list = append(list, tResChange.Added.GetPod())
				case *pod.PodChange_Modified_:
					list = append(list, tResChange.Modified.GetPod())
				case *pod.PodChange_Current_:
					list = append(list, tResChange.Current.GetPod())
				}
			}
			return list
		}
	}
	return (pod.PodList)(nil)
}

func GetWatchPodsDescriptor() *WatchPodsDescriptor {
	return watchPodsDescriptor
}

type CreatePodDescriptor struct{}

type CreatePodDescriptorClientMsgHandle struct{}

type CreatePodDescriptorServerMsgHandle struct{}

func (d *CreatePodDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreatePodRequest{}
}

func (d *CreatePodDescriptor) NewEmptyServerMsg() proto.Message {
	return &pod.Pod{}
}

func (d *CreatePodDescriptor) IsUnary() bool {
	return true
}

func (d *CreatePodDescriptor) IsClientStream() bool {
	return false
}

func (d *CreatePodDescriptor) IsServerStream() bool {
	return false
}

func (d *CreatePodDescriptor) IsCollection() bool {
	return true
}

func (d *CreatePodDescriptor) IsPlural() bool {
	return false
}

func (d *CreatePodDescriptor) HasResource() bool {
	return true
}

func (d *CreatePodDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreatePodDescriptor) GetVerb() string {
	return "create"
}

func (d *CreatePodDescriptor) GetMethodName() string {
	return "CreatePod"
}

func (d *CreatePodDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1.PodService/CreatePod"
}

func (d *CreatePodDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1"
}

func (d *CreatePodDescriptor) GetApiName() string {
	return "PodService"
}

func (d *CreatePodDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *CreatePodDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreatePodDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *CreatePodDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *CreatePodDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePodDescriptorClientMsgHandle{}
}

func (d *CreatePodDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreatePodDescriptorServerMsgHandle{}
}

func (h *CreatePodDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreatePodRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetPod()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*pod.Name)(nil)
}

func (h *CreatePodDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreatePodRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePodDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreatePodRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*pod.ParentName)(nil)
}

func (h *CreatePodDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreatePodRequest) *pod.Pod
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetPod()
	}
	return (*pod.Pod)(nil)
}

func (h *CreatePodDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreatePodRequest) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreatePodDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*pod.Pod) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*pod.Name)(nil)
}

func (h *CreatePodDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*pod.Pod) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreatePodDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*pod.Pod) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreatePodDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*pod.Pod)
}

func (h *CreatePodDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*pod.Pod) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreatePodDescriptor() *CreatePodDescriptor {
	return createPodDescriptor
}

type UpdatePodDescriptor struct{}

type UpdatePodDescriptorClientMsgHandle struct{}

type UpdatePodDescriptorServerMsgHandle struct{}

func (d *UpdatePodDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdatePodRequest{}
}

func (d *UpdatePodDescriptor) NewEmptyServerMsg() proto.Message {
	return &pod.Pod{}
}

func (d *UpdatePodDescriptor) IsUnary() bool {
	return true
}

func (d *UpdatePodDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdatePodDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdatePodDescriptor) IsCollection() bool {
	return false
}

func (d *UpdatePodDescriptor) IsPlural() bool {
	return false
}

func (d *UpdatePodDescriptor) HasResource() bool {
	return true
}

func (d *UpdatePodDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdatePodDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdatePodDescriptor) GetMethodName() string {
	return "UpdatePod"
}

func (d *UpdatePodDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1.PodService/UpdatePod"
}

func (d *UpdatePodDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1"
}

func (d *UpdatePodDescriptor) GetApiName() string {
	return "PodService"
}

func (d *UpdatePodDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *UpdatePodDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdatePodDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *UpdatePodDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *UpdatePodDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePodDescriptorClientMsgHandle{}
}

func (d *UpdatePodDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdatePodDescriptorServerMsgHandle{}
}

func (h *UpdatePodDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdatePodRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetPod()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*pod.Name)(nil)
}

func (h *UpdatePodDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdatePodRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePodDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdatePodRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdatePodDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdatePodRequest) *pod.Pod
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetPod()
	}
	return (*pod.Pod)(nil)
}

func (h *UpdatePodDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdatePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdatePodRequest) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdatePodDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*pod.Pod) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*pod.Name)(nil)
}

func (h *UpdatePodDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*pod.Pod) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdatePodDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*pod.Pod) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdatePodDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*pod.Pod)
}

func (h *UpdatePodDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*pod.Pod)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*pod.Pod) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdatePodDescriptor() *UpdatePodDescriptor {
	return updatePodDescriptor
}

type DeletePodDescriptor struct{}

type DeletePodDescriptorClientMsgHandle struct{}

type DeletePodDescriptorServerMsgHandle struct{}

func (d *DeletePodDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeletePodRequest{}
}

func (d *DeletePodDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeletePodDescriptor) IsUnary() bool {
	return true
}

func (d *DeletePodDescriptor) IsClientStream() bool {
	return false
}

func (d *DeletePodDescriptor) IsServerStream() bool {
	return false
}

func (d *DeletePodDescriptor) IsCollection() bool {
	return false
}

func (d *DeletePodDescriptor) IsPlural() bool {
	return false
}

func (d *DeletePodDescriptor) HasResource() bool {
	return true
}

func (d *DeletePodDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeletePodDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeletePodDescriptor) GetMethodName() string {
	return "DeletePod"
}

func (d *DeletePodDescriptor) GetFullMethodName() string {
	return "/ntt.applications.v1.PodService/DeletePod"
}

func (d *DeletePodDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1"
}

func (d *DeletePodDescriptor) GetApiName() string {
	return "PodService"
}

func (d *DeletePodDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *DeletePodDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeletePodDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return podServiceDescriptor
}

func (d *DeletePodDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return pod.GetDescriptor()
}

func (d *DeletePodDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePodDescriptorClientMsgHandle{}
}

func (d *DeletePodDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeletePodDescriptorServerMsgHandle{}
}

func (h *DeletePodDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeletePodRequest) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*pod.Name)(nil)
}

func (h *DeletePodDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeletePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeletePodRequest) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePodDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeletePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeletePodRequest) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeletePodDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeletePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeletePodRequest) *pod.Pod
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeletePodDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeletePodRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeletePodRequest) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeletePodDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *pod.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeletePodDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*pod.Name
	})
	if ok {
		return pod.PodNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeletePodDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *pod.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeletePodDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *pod.Pod
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeletePodDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*pod.Pod
	})
	if ok {
		return pod.PodList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeletePodDescriptor() *DeletePodDescriptor {
	return deletePodDescriptor
}

type PodServiceDescriptor struct{}

func (d *PodServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getPodDescriptor,
		batchGetPodsDescriptor,
		listPodsDescriptor,
		watchPodDescriptor,
		watchPodsDescriptor,
		createPodDescriptor,
		updatePodDescriptor,
		deletePodDescriptor,
	}
}

func (d *PodServiceDescriptor) GetFullAPIName() string {
	return "/ntt.applications.v1.PodService"
}

func (d *PodServiceDescriptor) GetProtoPkgName() string {
	return "ntt.applications.v1"
}

func (d *PodServiceDescriptor) GetApiName() string {
	return "PodService"
}

func (d *PodServiceDescriptor) GetServiceDomain() string {
	return "applications.edgelq.com"
}

func (d *PodServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetPodServiceDescriptor() *PodServiceDescriptor {
	return podServiceDescriptor
}

func initDescriptors() {
	podServiceDescriptor = &PodServiceDescriptor{}
	getPodDescriptor = &GetPodDescriptor{}
	batchGetPodsDescriptor = &BatchGetPodsDescriptor{}
	listPodsDescriptor = &ListPodsDescriptor{}
	watchPodDescriptor = &WatchPodDescriptor{}
	watchPodsDescriptor = &WatchPodsDescriptor{}
	createPodDescriptor = &CreatePodDescriptor{}
	updatePodDescriptor = &UpdatePodDescriptor{}
	deletePodDescriptor = &DeletePodDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(podServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getPodDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetPodsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listPodsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPodDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchPodsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createPodDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updatePodDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deletePodDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
