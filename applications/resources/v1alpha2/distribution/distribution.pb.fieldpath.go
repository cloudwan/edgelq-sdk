// Code generated by protoc-gen-goten-object
// File: edgelq/applications/proto/v1alpha2/distribution.proto
// DO NOT EDIT!!!

package distribution

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/common"
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &common.PodSpec{}
	_ = &project.Project{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Distribution_FieldPath interface {
	gotenobject.FieldPath
	Selector() Distribution_FieldPathSelector
	Get(source *Distribution) []interface{}
	GetSingle(source *Distribution) (interface{}, bool)
	ClearValue(item *Distribution)

	// Those methods build corresponding Distribution_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Distribution_FieldPathValue
	WithIArrayOfValues(values interface{}) Distribution_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Distribution_FieldPathArrayItemValue
}

type Distribution_FieldPathSelector int32

const (
	Distribution_FieldPathSelectorName        Distribution_FieldPathSelector = 0
	Distribution_FieldPathSelectorDisplayName Distribution_FieldPathSelector = 1
	Distribution_FieldPathSelectorMetadata    Distribution_FieldPathSelector = 2
	Distribution_FieldPathSelectorSpec        Distribution_FieldPathSelector = 3
	Distribution_FieldPathSelectorStatus      Distribution_FieldPathSelector = 4
)

func (s Distribution_FieldPathSelector) String() string {
	switch s {
	case Distribution_FieldPathSelectorName:
		return "name"
	case Distribution_FieldPathSelectorDisplayName:
		return "display_name"
	case Distribution_FieldPathSelectorMetadata:
		return "metadata"
	case Distribution_FieldPathSelectorSpec:
		return "spec"
	case Distribution_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution: %d", s))
	}
}

func BuildDistribution_FieldPath(fp gotenobject.RawFieldPath) (Distribution_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Distribution")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Distribution_FieldTerminalPath{selector: Distribution_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &Distribution_FieldTerminalPath{selector: Distribution_FieldPathSelectorDisplayName}, nil
		case "metadata":
			return &Distribution_FieldTerminalPath{selector: Distribution_FieldPathSelectorMetadata}, nil
		case "spec":
			return &Distribution_FieldTerminalPath{selector: Distribution_FieldPathSelectorSpec}, nil
		case "status":
			return &Distribution_FieldTerminalPath{selector: Distribution_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Distribution_FieldSubPath{selector: Distribution_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildDistributionSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Distribution_FieldSubPath{selector: Distribution_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildDistributionStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Distribution_FieldSubPath{selector: Distribution_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Distribution", fp)
}

func ParseDistribution_FieldPath(rawField string) (Distribution_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDistribution_FieldPath(fp)
}

func MustParseDistribution_FieldPath(rawField string) Distribution_FieldPath {
	fp, err := ParseDistribution_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Distribution_FieldTerminalPath struct {
	selector Distribution_FieldPathSelector
}

var _ Distribution_FieldPath = (*Distribution_FieldTerminalPath)(nil)

func (fp *Distribution_FieldTerminalPath) Selector() Distribution_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Distribution_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Distribution_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Distribution
func (fp *Distribution_FieldTerminalPath) Get(source *Distribution) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Distribution_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Distribution_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Distribution_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Distribution_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case Distribution_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Distribution: %d", fp.selector))
		}
	}
	return
}

func (fp *Distribution_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Distribution))
}

// GetSingle returns value pointed by specific field of from source Distribution
func (fp *Distribution_FieldTerminalPath) GetSingle(source *Distribution) (interface{}, bool) {
	switch fp.selector {
	case Distribution_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Distribution_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Distribution_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Distribution_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case Distribution_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution: %d", fp.selector))
	}
}

func (fp *Distribution_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Distribution))
}

// GetDefault returns a default value of the field type
func (fp *Distribution_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Distribution_FieldPathSelectorName:
		return (*Name)(nil)
	case Distribution_FieldPathSelectorDisplayName:
		return ""
	case Distribution_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case Distribution_FieldPathSelectorSpec:
		return (*Distribution_Spec)(nil)
	case Distribution_FieldPathSelectorStatus:
		return (*Distribution_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution: %d", fp.selector))
	}
}

func (fp *Distribution_FieldTerminalPath) ClearValue(item *Distribution) {
	if item != nil {
		switch fp.selector {
		case Distribution_FieldPathSelectorName:
			item.Name = nil
		case Distribution_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Distribution_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Distribution_FieldPathSelectorSpec:
			item.Spec = nil
		case Distribution_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Distribution: %d", fp.selector))
		}
	}
}

func (fp *Distribution_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Distribution))
}

// IsLeaf - whether field path is holds simple value
func (fp *Distribution_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Distribution_FieldPathSelectorName ||
		fp.selector == Distribution_FieldPathSelectorDisplayName
}

func (fp *Distribution_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Distribution_FieldTerminalPath) WithIValue(value interface{}) Distribution_FieldPathValue {
	switch fp.selector {
	case Distribution_FieldPathSelectorName:
		return &Distribution_FieldTerminalPathValue{Distribution_FieldTerminalPath: *fp, value: value.(*Name)}
	case Distribution_FieldPathSelectorDisplayName:
		return &Distribution_FieldTerminalPathValue{Distribution_FieldTerminalPath: *fp, value: value.(string)}
	case Distribution_FieldPathSelectorMetadata:
		return &Distribution_FieldTerminalPathValue{Distribution_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case Distribution_FieldPathSelectorSpec:
		return &Distribution_FieldTerminalPathValue{Distribution_FieldTerminalPath: *fp, value: value.(*Distribution_Spec)}
	case Distribution_FieldPathSelectorStatus:
		return &Distribution_FieldTerminalPathValue{Distribution_FieldTerminalPath: *fp, value: value.(*Distribution_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution: %d", fp.selector))
	}
}

func (fp *Distribution_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Distribution_FieldTerminalPath) WithIArrayOfValues(values interface{}) Distribution_FieldPathArrayOfValues {
	fpaov := &Distribution_FieldTerminalPathArrayOfValues{Distribution_FieldTerminalPath: *fp}
	switch fp.selector {
	case Distribution_FieldPathSelectorName:
		return &Distribution_FieldTerminalPathArrayOfValues{Distribution_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Distribution_FieldPathSelectorDisplayName:
		return &Distribution_FieldTerminalPathArrayOfValues{Distribution_FieldTerminalPath: *fp, values: values.([]string)}
	case Distribution_FieldPathSelectorMetadata:
		return &Distribution_FieldTerminalPathArrayOfValues{Distribution_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case Distribution_FieldPathSelectorSpec:
		return &Distribution_FieldTerminalPathArrayOfValues{Distribution_FieldTerminalPath: *fp, values: values.([]*Distribution_Spec)}
	case Distribution_FieldPathSelectorStatus:
		return &Distribution_FieldTerminalPathArrayOfValues{Distribution_FieldTerminalPath: *fp, values: values.([]*Distribution_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution: %d", fp.selector))
	}
	return fpaov
}

func (fp *Distribution_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Distribution_FieldTerminalPath) WithIArrayItemValue(value interface{}) Distribution_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution: %d", fp.selector))
	}
}

func (fp *Distribution_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Distribution_FieldSubPath struct {
	selector Distribution_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Distribution_FieldPath = (*Distribution_FieldSubPath)(nil)

func (fps *Distribution_FieldSubPath) Selector() Distribution_FieldPathSelector {
	return fps.selector
}
func (fps *Distribution_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *Distribution_FieldSubPath) AsSpecSubPath() (DistributionSpec_FieldPath, bool) {
	res, ok := fps.subPath.(DistributionSpec_FieldPath)
	return res, ok
}
func (fps *Distribution_FieldSubPath) AsStatusSubPath() (DistributionStatus_FieldPath, bool) {
	res, ok := fps.subPath.(DistributionStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Distribution_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Distribution_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Distribution
func (fps *Distribution_FieldSubPath) Get(source *Distribution) (values []interface{}) {
	switch fps.selector {
	case Distribution_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case Distribution_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	case Distribution_FieldPathSelectorStatus:
		values = append(values, fps.subPath.GetRaw(source.GetStatus())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution: %d", fps.selector))
	}
	return
}

func (fps *Distribution_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Distribution))
}

// GetSingle returns value of selected field from source Distribution
func (fps *Distribution_FieldSubPath) GetSingle(source *Distribution) (interface{}, bool) {
	switch fps.selector {
	case Distribution_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Distribution_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case Distribution_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution: %d", fps.selector))
	}
}

func (fps *Distribution_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Distribution))
}

// GetDefault returns a default value of the field type
func (fps *Distribution_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Distribution_FieldSubPath) ClearValue(item *Distribution) {
	if item != nil {
		switch fps.selector {
		case Distribution_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Distribution_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case Distribution_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for Distribution: %d", fps.selector))
		}
	}
}

func (fps *Distribution_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Distribution))
}

// IsLeaf - whether field path is holds simple value
func (fps *Distribution_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Distribution_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Distribution_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Distribution_FieldSubPath) WithIValue(value interface{}) Distribution_FieldPathValue {
	return &Distribution_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Distribution_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Distribution_FieldSubPath) WithIArrayOfValues(values interface{}) Distribution_FieldPathArrayOfValues {
	return &Distribution_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Distribution_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Distribution_FieldSubPath) WithIArrayItemValue(value interface{}) Distribution_FieldPathArrayItemValue {
	return &Distribution_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Distribution_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Distribution_FieldPathValue allows storing values for Distribution fields according to their type
type Distribution_FieldPathValue interface {
	Distribution_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Distribution)
	CompareWith(*Distribution) (cmp int, comparable bool)
}

func ParseDistribution_FieldPathValue(pathStr, valueStr string) (Distribution_FieldPathValue, error) {
	fp, err := ParseDistribution_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Distribution field path value from %s: %v", valueStr, err)
	}
	return fpv.(Distribution_FieldPathValue), nil
}

func MustParseDistribution_FieldPathValue(pathStr, valueStr string) Distribution_FieldPathValue {
	fpv, err := ParseDistribution_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Distribution_FieldTerminalPathValue struct {
	Distribution_FieldTerminalPath
	value interface{}
}

var _ Distribution_FieldPathValue = (*Distribution_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Distribution' as interface{}
func (fpv *Distribution_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Distribution_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Distribution_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Distribution_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *Distribution_FieldTerminalPathValue) AsSpecValue() (*Distribution_Spec, bool) {
	res, ok := fpv.value.(*Distribution_Spec)
	return res, ok
}
func (fpv *Distribution_FieldTerminalPathValue) AsStatusValue() (*Distribution_Status, bool) {
	res, ok := fpv.value.(*Distribution_Status)
	return res, ok
}

// SetTo stores value for selected field for object Distribution
func (fpv *Distribution_FieldTerminalPathValue) SetTo(target **Distribution) {
	if *target == nil {
		*target = new(Distribution)
	}
	switch fpv.selector {
	case Distribution_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Distribution_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Distribution_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case Distribution_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*Distribution_Spec)
	case Distribution_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*Distribution_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution: %d", fpv.selector))
	}
}

func (fpv *Distribution_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Distribution)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Distribution_FieldTerminalPathValue' with the value under path in 'Distribution'.
func (fpv *Distribution_FieldTerminalPathValue) CompareWith(source *Distribution) (int, bool) {
	switch fpv.selector {
	case Distribution_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Distribution_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Distribution_FieldPathSelectorMetadata:
		return 0, false
	case Distribution_FieldPathSelectorSpec:
		return 0, false
	case Distribution_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution: %d", fpv.selector))
	}
}

func (fpv *Distribution_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Distribution))
}

type Distribution_FieldSubPathValue struct {
	Distribution_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Distribution_FieldPathValue = (*Distribution_FieldSubPathValue)(nil)

func (fpvs *Distribution_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Distribution_FieldSubPathValue) AsSpecPathValue() (DistributionSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DistributionSpec_FieldPathValue)
	return res, ok
}
func (fpvs *Distribution_FieldSubPathValue) AsStatusPathValue() (DistributionStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DistributionStatus_FieldPathValue)
	return res, ok
}

func (fpvs *Distribution_FieldSubPathValue) SetTo(target **Distribution) {
	if *target == nil {
		*target = new(Distribution)
	}
	switch fpvs.Selector() {
	case Distribution_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Distribution_FieldPathSelectorSpec:
		fpvs.subPathValue.(DistributionSpec_FieldPathValue).SetTo(&(*target).Spec)
	case Distribution_FieldPathSelectorStatus:
		fpvs.subPathValue.(DistributionStatus_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution: %d", fpvs.Selector()))
	}
}

func (fpvs *Distribution_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Distribution)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Distribution_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Distribution_FieldSubPathValue) CompareWith(source *Distribution) (int, bool) {
	switch fpvs.Selector() {
	case Distribution_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Distribution_FieldPathSelectorSpec:
		return fpvs.subPathValue.(DistributionSpec_FieldPathValue).CompareWith(source.GetSpec())
	case Distribution_FieldPathSelectorStatus:
		return fpvs.subPathValue.(DistributionStatus_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution: %d", fpvs.Selector()))
	}
}

func (fpvs *Distribution_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Distribution))
}

// Distribution_FieldPathArrayItemValue allows storing single item in Path-specific values for Distribution according to their type
// Present only for array (repeated) types.
type Distribution_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Distribution_FieldPath
	ContainsValue(*Distribution) bool
}

// ParseDistribution_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDistribution_FieldPathArrayItemValue(pathStr, valueStr string) (Distribution_FieldPathArrayItemValue, error) {
	fp, err := ParseDistribution_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Distribution field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Distribution_FieldPathArrayItemValue), nil
}

func MustParseDistribution_FieldPathArrayItemValue(pathStr, valueStr string) Distribution_FieldPathArrayItemValue {
	fpaiv, err := ParseDistribution_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Distribution_FieldTerminalPathArrayItemValue struct {
	Distribution_FieldTerminalPath
	value interface{}
}

var _ Distribution_FieldPathArrayItemValue = (*Distribution_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Distribution as interface{}
func (fpaiv *Distribution_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Distribution_FieldTerminalPathArrayItemValue) GetSingle(source *Distribution) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Distribution_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Distribution))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Distribution'
func (fpaiv *Distribution_FieldTerminalPathArrayItemValue) ContainsValue(source *Distribution) bool {
	slice := fpaiv.Distribution_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Distribution_FieldSubPathArrayItemValue struct {
	Distribution_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Distribution_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Distribution_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Distribution_FieldSubPathArrayItemValue) AsSpecPathItemValue() (DistributionSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DistributionSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Distribution_FieldSubPathArrayItemValue) AsStatusPathItemValue() (DistributionStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DistributionStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Distribution'
func (fpaivs *Distribution_FieldSubPathArrayItemValue) ContainsValue(source *Distribution) bool {
	switch fpaivs.Selector() {
	case Distribution_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Distribution_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(DistributionSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case Distribution_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(DistributionStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution: %d", fpaivs.Selector()))
	}
}

// Distribution_FieldPathArrayOfValues allows storing slice of values for Distribution fields according to their type
type Distribution_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Distribution_FieldPath
}

func ParseDistribution_FieldPathArrayOfValues(pathStr, valuesStr string) (Distribution_FieldPathArrayOfValues, error) {
	fp, err := ParseDistribution_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Distribution field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Distribution_FieldPathArrayOfValues), nil
}

func MustParseDistribution_FieldPathArrayOfValues(pathStr, valuesStr string) Distribution_FieldPathArrayOfValues {
	fpaov, err := ParseDistribution_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Distribution_FieldTerminalPathArrayOfValues struct {
	Distribution_FieldTerminalPath
	values interface{}
}

var _ Distribution_FieldPathArrayOfValues = (*Distribution_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Distribution_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Distribution_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Distribution_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Distribution_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case Distribution_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*Distribution_Spec) {
			values = append(values, v)
		}
	case Distribution_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*Distribution_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Distribution_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Distribution_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Distribution_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *Distribution_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*Distribution_Spec, bool) {
	res, ok := fpaov.values.([]*Distribution_Spec)
	return res, ok
}
func (fpaov *Distribution_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*Distribution_Status, bool) {
	res, ok := fpaov.values.([]*Distribution_Status)
	return res, ok
}

type Distribution_FieldSubPathArrayOfValues struct {
	Distribution_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Distribution_FieldPathArrayOfValues = (*Distribution_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Distribution_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Distribution_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Distribution_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (DistributionSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DistributionSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Distribution_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (DistributionStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DistributionStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DistributionSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() DistributionSpec_FieldPathSelector
	Get(source *Distribution_Spec) []interface{}
	GetSingle(source *Distribution_Spec) (interface{}, bool)
	ClearValue(item *Distribution_Spec)

	// Those methods build corresponding DistributionSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DistributionSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) DistributionSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DistributionSpec_FieldPathArrayItemValue
}

type DistributionSpec_FieldPathSelector int32

const (
	DistributionSpec_FieldPathSelectorSelector DistributionSpec_FieldPathSelector = 0
	DistributionSpec_FieldPathSelectorTemplate DistributionSpec_FieldPathSelector = 1
)

func (s DistributionSpec_FieldPathSelector) String() string {
	switch s {
	case DistributionSpec_FieldPathSelectorSelector:
		return "selector"
	case DistributionSpec_FieldPathSelectorTemplate:
		return "template"
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", s))
	}
}

func BuildDistributionSpec_FieldPath(fp gotenobject.RawFieldPath) (DistributionSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Distribution_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "selector":
			return &DistributionSpec_FieldTerminalPath{selector: DistributionSpec_FieldPathSelectorSelector}, nil
		case "template":
			return &DistributionSpec_FieldTerminalPath{selector: DistributionSpec_FieldPathSelectorTemplate}, nil
		}
	} else {
		switch fp[0] {
		case "selector":
			if subpath, err := BuildLabelSelector_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DistributionSpec_FieldSubPath{selector: DistributionSpec_FieldPathSelectorSelector, subPath: subpath}, nil
			}
		case "template":
			if subpath, err := BuildDistributionSpecTemplate_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DistributionSpec_FieldSubPath{selector: DistributionSpec_FieldPathSelectorTemplate, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Distribution_Spec", fp)
}

func ParseDistributionSpec_FieldPath(rawField string) (DistributionSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDistributionSpec_FieldPath(fp)
}

func MustParseDistributionSpec_FieldPath(rawField string) DistributionSpec_FieldPath {
	fp, err := ParseDistributionSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DistributionSpec_FieldTerminalPath struct {
	selector DistributionSpec_FieldPathSelector
}

var _ DistributionSpec_FieldPath = (*DistributionSpec_FieldTerminalPath)(nil)

func (fp *DistributionSpec_FieldTerminalPath) Selector() DistributionSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DistributionSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DistributionSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Distribution_Spec
func (fp *DistributionSpec_FieldTerminalPath) Get(source *Distribution_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DistributionSpec_FieldPathSelectorSelector:
			if source.Selector != nil {
				values = append(values, source.Selector)
			}
		case DistributionSpec_FieldPathSelectorTemplate:
			if source.Template != nil {
				values = append(values, source.Template)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *DistributionSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Distribution_Spec))
}

// GetSingle returns value pointed by specific field of from source Distribution_Spec
func (fp *DistributionSpec_FieldTerminalPath) GetSingle(source *Distribution_Spec) (interface{}, bool) {
	switch fp.selector {
	case DistributionSpec_FieldPathSelectorSelector:
		res := source.GetSelector()
		return res, res != nil
	case DistributionSpec_FieldPathSelectorTemplate:
		res := source.GetTemplate()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fp.selector))
	}
}

func (fp *DistributionSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Distribution_Spec))
}

// GetDefault returns a default value of the field type
func (fp *DistributionSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DistributionSpec_FieldPathSelectorSelector:
		return (*LabelSelector)(nil)
	case DistributionSpec_FieldPathSelectorTemplate:
		return (*Distribution_Spec_Template)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fp.selector))
	}
}

func (fp *DistributionSpec_FieldTerminalPath) ClearValue(item *Distribution_Spec) {
	if item != nil {
		switch fp.selector {
		case DistributionSpec_FieldPathSelectorSelector:
			item.Selector = nil
		case DistributionSpec_FieldPathSelectorTemplate:
			item.Template = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fp.selector))
		}
	}
}

func (fp *DistributionSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Distribution_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *DistributionSpec_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *DistributionSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DistributionSpec_FieldTerminalPath) WithIValue(value interface{}) DistributionSpec_FieldPathValue {
	switch fp.selector {
	case DistributionSpec_FieldPathSelectorSelector:
		return &DistributionSpec_FieldTerminalPathValue{DistributionSpec_FieldTerminalPath: *fp, value: value.(*LabelSelector)}
	case DistributionSpec_FieldPathSelectorTemplate:
		return &DistributionSpec_FieldTerminalPathValue{DistributionSpec_FieldTerminalPath: *fp, value: value.(*Distribution_Spec_Template)}
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fp.selector))
	}
}

func (fp *DistributionSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DistributionSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) DistributionSpec_FieldPathArrayOfValues {
	fpaov := &DistributionSpec_FieldTerminalPathArrayOfValues{DistributionSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case DistributionSpec_FieldPathSelectorSelector:
		return &DistributionSpec_FieldTerminalPathArrayOfValues{DistributionSpec_FieldTerminalPath: *fp, values: values.([]*LabelSelector)}
	case DistributionSpec_FieldPathSelectorTemplate:
		return &DistributionSpec_FieldTerminalPathArrayOfValues{DistributionSpec_FieldTerminalPath: *fp, values: values.([]*Distribution_Spec_Template)}
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *DistributionSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DistributionSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) DistributionSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fp.selector))
	}
}

func (fp *DistributionSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DistributionSpec_FieldSubPath struct {
	selector DistributionSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DistributionSpec_FieldPath = (*DistributionSpec_FieldSubPath)(nil)

func (fps *DistributionSpec_FieldSubPath) Selector() DistributionSpec_FieldPathSelector {
	return fps.selector
}
func (fps *DistributionSpec_FieldSubPath) AsSelectorSubPath() (LabelSelector_FieldPath, bool) {
	res, ok := fps.subPath.(LabelSelector_FieldPath)
	return res, ok
}
func (fps *DistributionSpec_FieldSubPath) AsTemplateSubPath() (DistributionSpecTemplate_FieldPath, bool) {
	res, ok := fps.subPath.(DistributionSpecTemplate_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DistributionSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DistributionSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Distribution_Spec
func (fps *DistributionSpec_FieldSubPath) Get(source *Distribution_Spec) (values []interface{}) {
	switch fps.selector {
	case DistributionSpec_FieldPathSelectorSelector:
		values = append(values, fps.subPath.GetRaw(source.GetSelector())...)
	case DistributionSpec_FieldPathSelectorTemplate:
		values = append(values, fps.subPath.GetRaw(source.GetTemplate())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fps.selector))
	}
	return
}

func (fps *DistributionSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Distribution_Spec))
}

// GetSingle returns value of selected field from source Distribution_Spec
func (fps *DistributionSpec_FieldSubPath) GetSingle(source *Distribution_Spec) (interface{}, bool) {
	switch fps.selector {
	case DistributionSpec_FieldPathSelectorSelector:
		if source.GetSelector() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSelector())
	case DistributionSpec_FieldPathSelectorTemplate:
		if source.GetTemplate() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTemplate())
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fps.selector))
	}
}

func (fps *DistributionSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Distribution_Spec))
}

// GetDefault returns a default value of the field type
func (fps *DistributionSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DistributionSpec_FieldSubPath) ClearValue(item *Distribution_Spec) {
	if item != nil {
		switch fps.selector {
		case DistributionSpec_FieldPathSelectorSelector:
			fps.subPath.ClearValueRaw(item.Selector)
		case DistributionSpec_FieldPathSelectorTemplate:
			fps.subPath.ClearValueRaw(item.Template)
		default:
			panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fps.selector))
		}
	}
}

func (fps *DistributionSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Distribution_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fps *DistributionSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DistributionSpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DistributionSpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DistributionSpec_FieldSubPath) WithIValue(value interface{}) DistributionSpec_FieldPathValue {
	return &DistributionSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DistributionSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DistributionSpec_FieldSubPath) WithIArrayOfValues(values interface{}) DistributionSpec_FieldPathArrayOfValues {
	return &DistributionSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DistributionSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DistributionSpec_FieldSubPath) WithIArrayItemValue(value interface{}) DistributionSpec_FieldPathArrayItemValue {
	return &DistributionSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DistributionSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DistributionSpec_FieldPathValue allows storing values for Spec fields according to their type
type DistributionSpec_FieldPathValue interface {
	DistributionSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Distribution_Spec)
	CompareWith(*Distribution_Spec) (cmp int, comparable bool)
}

func ParseDistributionSpec_FieldPathValue(pathStr, valueStr string) (DistributionSpec_FieldPathValue, error) {
	fp, err := ParseDistributionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(DistributionSpec_FieldPathValue), nil
}

func MustParseDistributionSpec_FieldPathValue(pathStr, valueStr string) DistributionSpec_FieldPathValue {
	fpv, err := ParseDistributionSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DistributionSpec_FieldTerminalPathValue struct {
	DistributionSpec_FieldTerminalPath
	value interface{}
}

var _ DistributionSpec_FieldPathValue = (*DistributionSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *DistributionSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DistributionSpec_FieldTerminalPathValue) AsSelectorValue() (*LabelSelector, bool) {
	res, ok := fpv.value.(*LabelSelector)
	return res, ok
}
func (fpv *DistributionSpec_FieldTerminalPathValue) AsTemplateValue() (*Distribution_Spec_Template, bool) {
	res, ok := fpv.value.(*Distribution_Spec_Template)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *DistributionSpec_FieldTerminalPathValue) SetTo(target **Distribution_Spec) {
	if *target == nil {
		*target = new(Distribution_Spec)
	}
	switch fpv.selector {
	case DistributionSpec_FieldPathSelectorSelector:
		(*target).Selector = fpv.value.(*LabelSelector)
	case DistributionSpec_FieldPathSelectorTemplate:
		(*target).Template = fpv.value.(*Distribution_Spec_Template)
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fpv.selector))
	}
}

func (fpv *DistributionSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Distribution_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DistributionSpec_FieldTerminalPathValue' with the value under path in 'Distribution_Spec'.
func (fpv *DistributionSpec_FieldTerminalPathValue) CompareWith(source *Distribution_Spec) (int, bool) {
	switch fpv.selector {
	case DistributionSpec_FieldPathSelectorSelector:
		return 0, false
	case DistributionSpec_FieldPathSelectorTemplate:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fpv.selector))
	}
}

func (fpv *DistributionSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Distribution_Spec))
}

type DistributionSpec_FieldSubPathValue struct {
	DistributionSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DistributionSpec_FieldPathValue = (*DistributionSpec_FieldSubPathValue)(nil)

func (fpvs *DistributionSpec_FieldSubPathValue) AsSelectorPathValue() (LabelSelector_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(LabelSelector_FieldPathValue)
	return res, ok
}
func (fpvs *DistributionSpec_FieldSubPathValue) AsTemplatePathValue() (DistributionSpecTemplate_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DistributionSpecTemplate_FieldPathValue)
	return res, ok
}

func (fpvs *DistributionSpec_FieldSubPathValue) SetTo(target **Distribution_Spec) {
	if *target == nil {
		*target = new(Distribution_Spec)
	}
	switch fpvs.Selector() {
	case DistributionSpec_FieldPathSelectorSelector:
		fpvs.subPathValue.(LabelSelector_FieldPathValue).SetTo(&(*target).Selector)
	case DistributionSpec_FieldPathSelectorTemplate:
		fpvs.subPathValue.(DistributionSpecTemplate_FieldPathValue).SetTo(&(*target).Template)
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *DistributionSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Distribution_Spec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DistributionSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DistributionSpec_FieldSubPathValue) CompareWith(source *Distribution_Spec) (int, bool) {
	switch fpvs.Selector() {
	case DistributionSpec_FieldPathSelectorSelector:
		return fpvs.subPathValue.(LabelSelector_FieldPathValue).CompareWith(source.GetSelector())
	case DistributionSpec_FieldPathSelectorTemplate:
		return fpvs.subPathValue.(DistributionSpecTemplate_FieldPathValue).CompareWith(source.GetTemplate())
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *DistributionSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Distribution_Spec))
}

// DistributionSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type DistributionSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DistributionSpec_FieldPath
	ContainsValue(*Distribution_Spec) bool
}

// ParseDistributionSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDistributionSpec_FieldPathArrayItemValue(pathStr, valueStr string) (DistributionSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseDistributionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DistributionSpec_FieldPathArrayItemValue), nil
}

func MustParseDistributionSpec_FieldPathArrayItemValue(pathStr, valueStr string) DistributionSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseDistributionSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DistributionSpec_FieldTerminalPathArrayItemValue struct {
	DistributionSpec_FieldTerminalPath
	value interface{}
}

var _ DistributionSpec_FieldPathArrayItemValue = (*DistributionSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Distribution_Spec as interface{}
func (fpaiv *DistributionSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DistributionSpec_FieldTerminalPathArrayItemValue) GetSingle(source *Distribution_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DistributionSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Distribution_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *DistributionSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *Distribution_Spec) bool {
	slice := fpaiv.DistributionSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DistributionSpec_FieldSubPathArrayItemValue struct {
	DistributionSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DistributionSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DistributionSpec_FieldSubPathArrayItemValue) AsSelectorPathItemValue() (LabelSelector_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(LabelSelector_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DistributionSpec_FieldSubPathArrayItemValue) AsTemplatePathItemValue() (DistributionSpecTemplate_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DistributionSpecTemplate_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaivs *DistributionSpec_FieldSubPathArrayItemValue) ContainsValue(source *Distribution_Spec) bool {
	switch fpaivs.Selector() {
	case DistributionSpec_FieldPathSelectorSelector:
		return fpaivs.subPathItemValue.(LabelSelector_FieldPathArrayItemValue).ContainsValue(source.GetSelector())
	case DistributionSpec_FieldPathSelectorTemplate:
		return fpaivs.subPathItemValue.(DistributionSpecTemplate_FieldPathArrayItemValue).ContainsValue(source.GetTemplate())
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec: %d", fpaivs.Selector()))
	}
}

// DistributionSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type DistributionSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DistributionSpec_FieldPath
}

func ParseDistributionSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (DistributionSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseDistributionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DistributionSpec_FieldPathArrayOfValues), nil
}

func MustParseDistributionSpec_FieldPathArrayOfValues(pathStr, valuesStr string) DistributionSpec_FieldPathArrayOfValues {
	fpaov, err := ParseDistributionSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DistributionSpec_FieldTerminalPathArrayOfValues struct {
	DistributionSpec_FieldTerminalPath
	values interface{}
}

var _ DistributionSpec_FieldPathArrayOfValues = (*DistributionSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DistributionSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DistributionSpec_FieldPathSelectorSelector:
		for _, v := range fpaov.values.([]*LabelSelector) {
			values = append(values, v)
		}
	case DistributionSpec_FieldPathSelectorTemplate:
		for _, v := range fpaov.values.([]*Distribution_Spec_Template) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DistributionSpec_FieldTerminalPathArrayOfValues) AsSelectorArrayOfValues() ([]*LabelSelector, bool) {
	res, ok := fpaov.values.([]*LabelSelector)
	return res, ok
}
func (fpaov *DistributionSpec_FieldTerminalPathArrayOfValues) AsTemplateArrayOfValues() ([]*Distribution_Spec_Template, bool) {
	res, ok := fpaov.values.([]*Distribution_Spec_Template)
	return res, ok
}

type DistributionSpec_FieldSubPathArrayOfValues struct {
	DistributionSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DistributionSpec_FieldPathArrayOfValues = (*DistributionSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DistributionSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DistributionSpec_FieldSubPathArrayOfValues) AsSelectorPathArrayOfValues() (LabelSelector_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(LabelSelector_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DistributionSpec_FieldSubPathArrayOfValues) AsTemplatePathArrayOfValues() (DistributionSpecTemplate_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DistributionSpecTemplate_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DistributionStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() DistributionStatus_FieldPathSelector
	Get(source *Distribution_Status) []interface{}
	GetSingle(source *Distribution_Status) (interface{}, bool)
	ClearValue(item *Distribution_Status)

	// Those methods build corresponding DistributionStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DistributionStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) DistributionStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DistributionStatus_FieldPathArrayItemValue
}

type DistributionStatus_FieldPathSelector int32

func (s DistributionStatus_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Status: %d", s))
	}
}

func BuildDistributionStatus_FieldPath(fp gotenobject.RawFieldPath) (DistributionStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Distribution_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Distribution_Status", fp)
}

func ParseDistributionStatus_FieldPath(rawField string) (DistributionStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDistributionStatus_FieldPath(fp)
}

func MustParseDistributionStatus_FieldPath(rawField string) DistributionStatus_FieldPath {
	fp, err := ParseDistributionStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DistributionStatus_FieldTerminalPath struct {
	selector DistributionStatus_FieldPathSelector
}

var _ DistributionStatus_FieldPath = (*DistributionStatus_FieldTerminalPath)(nil)

func (fp *DistributionStatus_FieldTerminalPath) Selector() DistributionStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DistributionStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DistributionStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Distribution_Status
func (fp *DistributionStatus_FieldTerminalPath) Get(source *Distribution_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for Distribution_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *DistributionStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Distribution_Status))
}

// GetSingle returns value pointed by specific field of from source Distribution_Status
func (fp *DistributionStatus_FieldTerminalPath) GetSingle(source *Distribution_Status) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Status: %d", fp.selector))
	}
}

func (fp *DistributionStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Distribution_Status))
}

// GetDefault returns a default value of the field type
func (fp *DistributionStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Status: %d", fp.selector))
	}
}

func (fp *DistributionStatus_FieldTerminalPath) ClearValue(item *Distribution_Status) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for Distribution_Status: %d", fp.selector))
		}
	}
}

func (fp *DistributionStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Distribution_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *DistributionStatus_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *DistributionStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DistributionStatus_FieldTerminalPath) WithIValue(value interface{}) DistributionStatus_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Status: %d", fp.selector))
	}
}

func (fp *DistributionStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DistributionStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) DistributionStatus_FieldPathArrayOfValues {
	fpaov := &DistributionStatus_FieldTerminalPathArrayOfValues{DistributionStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *DistributionStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DistributionStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) DistributionStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Status: %d", fp.selector))
	}
}

func (fp *DistributionStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DistributionStatus_FieldPathValue allows storing values for Status fields according to their type
type DistributionStatus_FieldPathValue interface {
	DistributionStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Distribution_Status)
	CompareWith(*Distribution_Status) (cmp int, comparable bool)
}

func ParseDistributionStatus_FieldPathValue(pathStr, valueStr string) (DistributionStatus_FieldPathValue, error) {
	fp, err := ParseDistributionStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(DistributionStatus_FieldPathValue), nil
}

func MustParseDistributionStatus_FieldPathValue(pathStr, valueStr string) DistributionStatus_FieldPathValue {
	fpv, err := ParseDistributionStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DistributionStatus_FieldTerminalPathValue struct {
	DistributionStatus_FieldTerminalPath
	value interface{}
}

var _ DistributionStatus_FieldPathValue = (*DistributionStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *DistributionStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object Status
func (fpv *DistributionStatus_FieldTerminalPathValue) SetTo(target **Distribution_Status) {
	if *target == nil {
		*target = new(Distribution_Status)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Status: %d", fpv.selector))
	}
}

func (fpv *DistributionStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Distribution_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DistributionStatus_FieldTerminalPathValue' with the value under path in 'Distribution_Status'.
func (fpv *DistributionStatus_FieldTerminalPathValue) CompareWith(source *Distribution_Status) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Status: %d", fpv.selector))
	}
}

func (fpv *DistributionStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Distribution_Status))
}

// DistributionStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type DistributionStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DistributionStatus_FieldPath
	ContainsValue(*Distribution_Status) bool
}

// ParseDistributionStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDistributionStatus_FieldPathArrayItemValue(pathStr, valueStr string) (DistributionStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseDistributionStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DistributionStatus_FieldPathArrayItemValue), nil
}

func MustParseDistributionStatus_FieldPathArrayItemValue(pathStr, valueStr string) DistributionStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseDistributionStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DistributionStatus_FieldTerminalPathArrayItemValue struct {
	DistributionStatus_FieldTerminalPath
	value interface{}
}

var _ DistributionStatus_FieldPathArrayItemValue = (*DistributionStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Distribution_Status as interface{}
func (fpaiv *DistributionStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DistributionStatus_FieldTerminalPathArrayItemValue) GetSingle(source *Distribution_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DistributionStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Distribution_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *DistributionStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *Distribution_Status) bool {
	slice := fpaiv.DistributionStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DistributionStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type DistributionStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DistributionStatus_FieldPath
}

func ParseDistributionStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (DistributionStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseDistributionStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DistributionStatus_FieldPathArrayOfValues), nil
}

func MustParseDistributionStatus_FieldPathArrayOfValues(pathStr, valuesStr string) DistributionStatus_FieldPathArrayOfValues {
	fpaov, err := ParseDistributionStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DistributionStatus_FieldTerminalPathArrayOfValues struct {
	DistributionStatus_FieldTerminalPath
	values interface{}
}

var _ DistributionStatus_FieldPathArrayOfValues = (*DistributionStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DistributionStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DistributionSpecTemplate_FieldPath interface {
	gotenobject.FieldPath
	Selector() DistributionSpecTemplate_FieldPathSelector
	Get(source *Distribution_Spec_Template) []interface{}
	GetSingle(source *Distribution_Spec_Template) (interface{}, bool)
	ClearValue(item *Distribution_Spec_Template)

	// Those methods build corresponding DistributionSpecTemplate_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DistributionSpecTemplate_FieldPathValue
	WithIArrayOfValues(values interface{}) DistributionSpecTemplate_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DistributionSpecTemplate_FieldPathArrayItemValue
}

type DistributionSpecTemplate_FieldPathSelector int32

const (
	DistributionSpecTemplate_FieldPathSelectorMetadata DistributionSpecTemplate_FieldPathSelector = 0
	DistributionSpecTemplate_FieldPathSelectorSpec     DistributionSpecTemplate_FieldPathSelector = 1
)

func (s DistributionSpecTemplate_FieldPathSelector) String() string {
	switch s {
	case DistributionSpecTemplate_FieldPathSelectorMetadata:
		return "metadata"
	case DistributionSpecTemplate_FieldPathSelectorSpec:
		return "spec"
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", s))
	}
}

func BuildDistributionSpecTemplate_FieldPath(fp gotenobject.RawFieldPath) (DistributionSpecTemplate_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Distribution_Spec_Template")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "metadata":
			return &DistributionSpecTemplate_FieldTerminalPath{selector: DistributionSpecTemplate_FieldPathSelectorMetadata}, nil
		case "spec":
			return &DistributionSpecTemplate_FieldTerminalPath{selector: DistributionSpecTemplate_FieldPathSelectorSpec}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DistributionSpecTemplate_FieldSubPath{selector: DistributionSpecTemplate_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := common.BuildPodSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &DistributionSpecTemplate_FieldSubPath{selector: DistributionSpecTemplate_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Distribution_Spec_Template", fp)
}

func ParseDistributionSpecTemplate_FieldPath(rawField string) (DistributionSpecTemplate_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDistributionSpecTemplate_FieldPath(fp)
}

func MustParseDistributionSpecTemplate_FieldPath(rawField string) DistributionSpecTemplate_FieldPath {
	fp, err := ParseDistributionSpecTemplate_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DistributionSpecTemplate_FieldTerminalPath struct {
	selector DistributionSpecTemplate_FieldPathSelector
}

var _ DistributionSpecTemplate_FieldPath = (*DistributionSpecTemplate_FieldTerminalPath)(nil)

func (fp *DistributionSpecTemplate_FieldTerminalPath) Selector() DistributionSpecTemplate_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DistributionSpecTemplate_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DistributionSpecTemplate_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Distribution_Spec_Template
func (fp *DistributionSpecTemplate_FieldTerminalPath) Get(source *Distribution_Spec_Template) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DistributionSpecTemplate_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case DistributionSpecTemplate_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fp.selector))
		}
	}
	return
}

func (fp *DistributionSpecTemplate_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Distribution_Spec_Template))
}

// GetSingle returns value pointed by specific field of from source Distribution_Spec_Template
func (fp *DistributionSpecTemplate_FieldTerminalPath) GetSingle(source *Distribution_Spec_Template) (interface{}, bool) {
	switch fp.selector {
	case DistributionSpecTemplate_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case DistributionSpecTemplate_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fp.selector))
	}
}

func (fp *DistributionSpecTemplate_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Distribution_Spec_Template))
}

// GetDefault returns a default value of the field type
func (fp *DistributionSpecTemplate_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DistributionSpecTemplate_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case DistributionSpecTemplate_FieldPathSelectorSpec:
		return (*common.PodSpec)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fp.selector))
	}
}

func (fp *DistributionSpecTemplate_FieldTerminalPath) ClearValue(item *Distribution_Spec_Template) {
	if item != nil {
		switch fp.selector {
		case DistributionSpecTemplate_FieldPathSelectorMetadata:
			item.Metadata = nil
		case DistributionSpecTemplate_FieldPathSelectorSpec:
			item.Spec = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fp.selector))
		}
	}
}

func (fp *DistributionSpecTemplate_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Distribution_Spec_Template))
}

// IsLeaf - whether field path is holds simple value
func (fp *DistributionSpecTemplate_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *DistributionSpecTemplate_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DistributionSpecTemplate_FieldTerminalPath) WithIValue(value interface{}) DistributionSpecTemplate_FieldPathValue {
	switch fp.selector {
	case DistributionSpecTemplate_FieldPathSelectorMetadata:
		return &DistributionSpecTemplate_FieldTerminalPathValue{DistributionSpecTemplate_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case DistributionSpecTemplate_FieldPathSelectorSpec:
		return &DistributionSpecTemplate_FieldTerminalPathValue{DistributionSpecTemplate_FieldTerminalPath: *fp, value: value.(*common.PodSpec)}
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fp.selector))
	}
}

func (fp *DistributionSpecTemplate_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DistributionSpecTemplate_FieldTerminalPath) WithIArrayOfValues(values interface{}) DistributionSpecTemplate_FieldPathArrayOfValues {
	fpaov := &DistributionSpecTemplate_FieldTerminalPathArrayOfValues{DistributionSpecTemplate_FieldTerminalPath: *fp}
	switch fp.selector {
	case DistributionSpecTemplate_FieldPathSelectorMetadata:
		return &DistributionSpecTemplate_FieldTerminalPathArrayOfValues{DistributionSpecTemplate_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case DistributionSpecTemplate_FieldPathSelectorSpec:
		return &DistributionSpecTemplate_FieldTerminalPathArrayOfValues{DistributionSpecTemplate_FieldTerminalPath: *fp, values: values.([]*common.PodSpec)}
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fp.selector))
	}
	return fpaov
}

func (fp *DistributionSpecTemplate_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DistributionSpecTemplate_FieldTerminalPath) WithIArrayItemValue(value interface{}) DistributionSpecTemplate_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fp.selector))
	}
}

func (fp *DistributionSpecTemplate_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type DistributionSpecTemplate_FieldSubPath struct {
	selector DistributionSpecTemplate_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ DistributionSpecTemplate_FieldPath = (*DistributionSpecTemplate_FieldSubPath)(nil)

func (fps *DistributionSpecTemplate_FieldSubPath) Selector() DistributionSpecTemplate_FieldPathSelector {
	return fps.selector
}
func (fps *DistributionSpecTemplate_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *DistributionSpecTemplate_FieldSubPath) AsSpecSubPath() (common.PodSpec_FieldPath, bool) {
	res, ok := fps.subPath.(common.PodSpec_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *DistributionSpecTemplate_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *DistributionSpecTemplate_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Distribution_Spec_Template
func (fps *DistributionSpecTemplate_FieldSubPath) Get(source *Distribution_Spec_Template) (values []interface{}) {
	switch fps.selector {
	case DistributionSpecTemplate_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case DistributionSpecTemplate_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fps.selector))
	}
	return
}

func (fps *DistributionSpecTemplate_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Distribution_Spec_Template))
}

// GetSingle returns value of selected field from source Distribution_Spec_Template
func (fps *DistributionSpecTemplate_FieldSubPath) GetSingle(source *Distribution_Spec_Template) (interface{}, bool) {
	switch fps.selector {
	case DistributionSpecTemplate_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case DistributionSpecTemplate_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fps.selector))
	}
}

func (fps *DistributionSpecTemplate_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Distribution_Spec_Template))
}

// GetDefault returns a default value of the field type
func (fps *DistributionSpecTemplate_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *DistributionSpecTemplate_FieldSubPath) ClearValue(item *Distribution_Spec_Template) {
	if item != nil {
		switch fps.selector {
		case DistributionSpecTemplate_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case DistributionSpecTemplate_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		default:
			panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fps.selector))
		}
	}
}

func (fps *DistributionSpecTemplate_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Distribution_Spec_Template))
}

// IsLeaf - whether field path is holds simple value
func (fps *DistributionSpecTemplate_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *DistributionSpecTemplate_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&DistributionSpecTemplate_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *DistributionSpecTemplate_FieldSubPath) WithIValue(value interface{}) DistributionSpecTemplate_FieldPathValue {
	return &DistributionSpecTemplate_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *DistributionSpecTemplate_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *DistributionSpecTemplate_FieldSubPath) WithIArrayOfValues(values interface{}) DistributionSpecTemplate_FieldPathArrayOfValues {
	return &DistributionSpecTemplate_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *DistributionSpecTemplate_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *DistributionSpecTemplate_FieldSubPath) WithIArrayItemValue(value interface{}) DistributionSpecTemplate_FieldPathArrayItemValue {
	return &DistributionSpecTemplate_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *DistributionSpecTemplate_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// DistributionSpecTemplate_FieldPathValue allows storing values for Template fields according to their type
type DistributionSpecTemplate_FieldPathValue interface {
	DistributionSpecTemplate_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Distribution_Spec_Template)
	CompareWith(*Distribution_Spec_Template) (cmp int, comparable bool)
}

func ParseDistributionSpecTemplate_FieldPathValue(pathStr, valueStr string) (DistributionSpecTemplate_FieldPathValue, error) {
	fp, err := ParseDistributionSpecTemplate_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Template field path value from %s: %v", valueStr, err)
	}
	return fpv.(DistributionSpecTemplate_FieldPathValue), nil
}

func MustParseDistributionSpecTemplate_FieldPathValue(pathStr, valueStr string) DistributionSpecTemplate_FieldPathValue {
	fpv, err := ParseDistributionSpecTemplate_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DistributionSpecTemplate_FieldTerminalPathValue struct {
	DistributionSpecTemplate_FieldTerminalPath
	value interface{}
}

var _ DistributionSpecTemplate_FieldPathValue = (*DistributionSpecTemplate_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Template' as interface{}
func (fpv *DistributionSpecTemplate_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DistributionSpecTemplate_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *DistributionSpecTemplate_FieldTerminalPathValue) AsSpecValue() (*common.PodSpec, bool) {
	res, ok := fpv.value.(*common.PodSpec)
	return res, ok
}

// SetTo stores value for selected field for object Template
func (fpv *DistributionSpecTemplate_FieldTerminalPathValue) SetTo(target **Distribution_Spec_Template) {
	if *target == nil {
		*target = new(Distribution_Spec_Template)
	}
	switch fpv.selector {
	case DistributionSpecTemplate_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case DistributionSpecTemplate_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*common.PodSpec)
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fpv.selector))
	}
}

func (fpv *DistributionSpecTemplate_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Distribution_Spec_Template)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DistributionSpecTemplate_FieldTerminalPathValue' with the value under path in 'Distribution_Spec_Template'.
func (fpv *DistributionSpecTemplate_FieldTerminalPathValue) CompareWith(source *Distribution_Spec_Template) (int, bool) {
	switch fpv.selector {
	case DistributionSpecTemplate_FieldPathSelectorMetadata:
		return 0, false
	case DistributionSpecTemplate_FieldPathSelectorSpec:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fpv.selector))
	}
}

func (fpv *DistributionSpecTemplate_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Distribution_Spec_Template))
}

type DistributionSpecTemplate_FieldSubPathValue struct {
	DistributionSpecTemplate_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ DistributionSpecTemplate_FieldPathValue = (*DistributionSpecTemplate_FieldSubPathValue)(nil)

func (fpvs *DistributionSpecTemplate_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *DistributionSpecTemplate_FieldSubPathValue) AsSpecPathValue() (common.PodSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.PodSpec_FieldPathValue)
	return res, ok
}

func (fpvs *DistributionSpecTemplate_FieldSubPathValue) SetTo(target **Distribution_Spec_Template) {
	if *target == nil {
		*target = new(Distribution_Spec_Template)
	}
	switch fpvs.Selector() {
	case DistributionSpecTemplate_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case DistributionSpecTemplate_FieldPathSelectorSpec:
		fpvs.subPathValue.(common.PodSpec_FieldPathValue).SetTo(&(*target).Spec)
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fpvs.Selector()))
	}
}

func (fpvs *DistributionSpecTemplate_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Distribution_Spec_Template)
	fpvs.SetTo(&typedObject)
}

func (fpvs *DistributionSpecTemplate_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *DistributionSpecTemplate_FieldSubPathValue) CompareWith(source *Distribution_Spec_Template) (int, bool) {
	switch fpvs.Selector() {
	case DistributionSpecTemplate_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case DistributionSpecTemplate_FieldPathSelectorSpec:
		return fpvs.subPathValue.(common.PodSpec_FieldPathValue).CompareWith(source.GetSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fpvs.Selector()))
	}
}

func (fpvs *DistributionSpecTemplate_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Distribution_Spec_Template))
}

// DistributionSpecTemplate_FieldPathArrayItemValue allows storing single item in Path-specific values for Template according to their type
// Present only for array (repeated) types.
type DistributionSpecTemplate_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DistributionSpecTemplate_FieldPath
	ContainsValue(*Distribution_Spec_Template) bool
}

// ParseDistributionSpecTemplate_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDistributionSpecTemplate_FieldPathArrayItemValue(pathStr, valueStr string) (DistributionSpecTemplate_FieldPathArrayItemValue, error) {
	fp, err := ParseDistributionSpecTemplate_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Template field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DistributionSpecTemplate_FieldPathArrayItemValue), nil
}

func MustParseDistributionSpecTemplate_FieldPathArrayItemValue(pathStr, valueStr string) DistributionSpecTemplate_FieldPathArrayItemValue {
	fpaiv, err := ParseDistributionSpecTemplate_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DistributionSpecTemplate_FieldTerminalPathArrayItemValue struct {
	DistributionSpecTemplate_FieldTerminalPath
	value interface{}
}

var _ DistributionSpecTemplate_FieldPathArrayItemValue = (*DistributionSpecTemplate_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Distribution_Spec_Template as interface{}
func (fpaiv *DistributionSpecTemplate_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DistributionSpecTemplate_FieldTerminalPathArrayItemValue) GetSingle(source *Distribution_Spec_Template) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DistributionSpecTemplate_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Distribution_Spec_Template))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Template'
func (fpaiv *DistributionSpecTemplate_FieldTerminalPathArrayItemValue) ContainsValue(source *Distribution_Spec_Template) bool {
	slice := fpaiv.DistributionSpecTemplate_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type DistributionSpecTemplate_FieldSubPathArrayItemValue struct {
	DistributionSpecTemplate_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *DistributionSpecTemplate_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *DistributionSpecTemplate_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *DistributionSpecTemplate_FieldSubPathArrayItemValue) AsSpecPathItemValue() (common.PodSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.PodSpec_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Template'
func (fpaivs *DistributionSpecTemplate_FieldSubPathArrayItemValue) ContainsValue(source *Distribution_Spec_Template) bool {
	switch fpaivs.Selector() {
	case DistributionSpecTemplate_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case DistributionSpecTemplate_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(common.PodSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for Distribution_Spec_Template: %d", fpaivs.Selector()))
	}
}

// DistributionSpecTemplate_FieldPathArrayOfValues allows storing slice of values for Template fields according to their type
type DistributionSpecTemplate_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DistributionSpecTemplate_FieldPath
}

func ParseDistributionSpecTemplate_FieldPathArrayOfValues(pathStr, valuesStr string) (DistributionSpecTemplate_FieldPathArrayOfValues, error) {
	fp, err := ParseDistributionSpecTemplate_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Template field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DistributionSpecTemplate_FieldPathArrayOfValues), nil
}

func MustParseDistributionSpecTemplate_FieldPathArrayOfValues(pathStr, valuesStr string) DistributionSpecTemplate_FieldPathArrayOfValues {
	fpaov, err := ParseDistributionSpecTemplate_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DistributionSpecTemplate_FieldTerminalPathArrayOfValues struct {
	DistributionSpecTemplate_FieldTerminalPath
	values interface{}
}

var _ DistributionSpecTemplate_FieldPathArrayOfValues = (*DistributionSpecTemplate_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DistributionSpecTemplate_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DistributionSpecTemplate_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case DistributionSpecTemplate_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*common.PodSpec) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DistributionSpecTemplate_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *DistributionSpecTemplate_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*common.PodSpec, bool) {
	res, ok := fpaov.values.([]*common.PodSpec)
	return res, ok
}

type DistributionSpecTemplate_FieldSubPathArrayOfValues struct {
	DistributionSpecTemplate_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ DistributionSpecTemplate_FieldPathArrayOfValues = (*DistributionSpecTemplate_FieldSubPathArrayOfValues)(nil)

func (fpsaov *DistributionSpecTemplate_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *DistributionSpecTemplate_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *DistributionSpecTemplate_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (common.PodSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.PodSpec_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type LabelSelector_FieldPath interface {
	gotenobject.FieldPath
	Selector() LabelSelector_FieldPathSelector
	Get(source *LabelSelector) []interface{}
	GetSingle(source *LabelSelector) (interface{}, bool)
	ClearValue(item *LabelSelector)

	// Those methods build corresponding LabelSelector_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) LabelSelector_FieldPathValue
	WithIArrayOfValues(values interface{}) LabelSelector_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) LabelSelector_FieldPathArrayItemValue
}

type LabelSelector_FieldPathSelector int32

const (
	LabelSelector_FieldPathSelectorMatchLabels      LabelSelector_FieldPathSelector = 0
	LabelSelector_FieldPathSelectorMatchExpressions LabelSelector_FieldPathSelector = 1
)

func (s LabelSelector_FieldPathSelector) String() string {
	switch s {
	case LabelSelector_FieldPathSelectorMatchLabels:
		return "match_labels"
	case LabelSelector_FieldPathSelectorMatchExpressions:
		return "match_expressions"
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", s))
	}
}

func BuildLabelSelector_FieldPath(fp gotenobject.RawFieldPath) (LabelSelector_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object LabelSelector")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "match_labels", "matchLabels", "match-labels":
			return &LabelSelector_FieldTerminalPath{selector: LabelSelector_FieldPathSelectorMatchLabels}, nil
		case "match_expressions", "matchExpressions", "match-expressions":
			return &LabelSelector_FieldTerminalPath{selector: LabelSelector_FieldPathSelectorMatchExpressions}, nil
		}
	} else {
		switch fp[0] {
		case "match_expressions", "matchExpressions", "match-expressions":
			if subpath, err := BuildLabelSelectorRequirement_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &LabelSelector_FieldSubPath{selector: LabelSelector_FieldPathSelectorMatchExpressions, subPath: subpath}, nil
			}
		case "match_labels", "matchLabels", "match-labels":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object LabelSelector)", fp)
			}
			return &LabelSelector_FieldPathMap{selector: LabelSelector_FieldPathSelectorMatchLabels, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object LabelSelector", fp)
}

func ParseLabelSelector_FieldPath(rawField string) (LabelSelector_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildLabelSelector_FieldPath(fp)
}

func MustParseLabelSelector_FieldPath(rawField string) LabelSelector_FieldPath {
	fp, err := ParseLabelSelector_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type LabelSelector_FieldTerminalPath struct {
	selector LabelSelector_FieldPathSelector
}

var _ LabelSelector_FieldPath = (*LabelSelector_FieldTerminalPath)(nil)

func (fp *LabelSelector_FieldTerminalPath) Selector() LabelSelector_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *LabelSelector_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *LabelSelector_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source LabelSelector
func (fp *LabelSelector_FieldTerminalPath) Get(source *LabelSelector) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case LabelSelector_FieldPathSelectorMatchLabels:
			values = append(values, source.MatchLabels)
		case LabelSelector_FieldPathSelectorMatchExpressions:
			for _, value := range source.GetMatchExpressions() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fp.selector))
		}
	}
	return
}

func (fp *LabelSelector_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*LabelSelector))
}

// GetSingle returns value pointed by specific field of from source LabelSelector
func (fp *LabelSelector_FieldTerminalPath) GetSingle(source *LabelSelector) (interface{}, bool) {
	switch fp.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		res := source.GetMatchLabels()
		return res, res != nil
	case LabelSelector_FieldPathSelectorMatchExpressions:
		res := source.GetMatchExpressions()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fp.selector))
	}
}

func (fp *LabelSelector_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*LabelSelector))
}

// GetDefault returns a default value of the field type
func (fp *LabelSelector_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		return (map[string]string)(nil)
	case LabelSelector_FieldPathSelectorMatchExpressions:
		return ([]*LabelSelectorRequirement)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fp.selector))
	}
}

func (fp *LabelSelector_FieldTerminalPath) ClearValue(item *LabelSelector) {
	if item != nil {
		switch fp.selector {
		case LabelSelector_FieldPathSelectorMatchLabels:
			item.MatchLabels = nil
		case LabelSelector_FieldPathSelectorMatchExpressions:
			item.MatchExpressions = nil
		default:
			panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fp.selector))
		}
	}
}

func (fp *LabelSelector_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*LabelSelector))
}

// IsLeaf - whether field path is holds simple value
func (fp *LabelSelector_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == LabelSelector_FieldPathSelectorMatchLabels
}

func (fp *LabelSelector_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *LabelSelector_FieldTerminalPath) WithIValue(value interface{}) LabelSelector_FieldPathValue {
	switch fp.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		return &LabelSelector_FieldTerminalPathValue{LabelSelector_FieldTerminalPath: *fp, value: value.(map[string]string)}
	case LabelSelector_FieldPathSelectorMatchExpressions:
		return &LabelSelector_FieldTerminalPathValue{LabelSelector_FieldTerminalPath: *fp, value: value.([]*LabelSelectorRequirement)}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fp.selector))
	}
}

func (fp *LabelSelector_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *LabelSelector_FieldTerminalPath) WithIArrayOfValues(values interface{}) LabelSelector_FieldPathArrayOfValues {
	fpaov := &LabelSelector_FieldTerminalPathArrayOfValues{LabelSelector_FieldTerminalPath: *fp}
	switch fp.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		return &LabelSelector_FieldTerminalPathArrayOfValues{LabelSelector_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	case LabelSelector_FieldPathSelectorMatchExpressions:
		return &LabelSelector_FieldTerminalPathArrayOfValues{LabelSelector_FieldTerminalPath: *fp, values: values.([][]*LabelSelectorRequirement)}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fp.selector))
	}
	return fpaov
}

func (fp *LabelSelector_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *LabelSelector_FieldTerminalPath) WithIArrayItemValue(value interface{}) LabelSelector_FieldPathArrayItemValue {
	switch fp.selector {
	case LabelSelector_FieldPathSelectorMatchExpressions:
		return &LabelSelector_FieldTerminalPathArrayItemValue{LabelSelector_FieldTerminalPath: *fp, value: value.(*LabelSelectorRequirement)}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fp.selector))
	}
}

func (fp *LabelSelector_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type LabelSelector_FieldPathMap struct {
	key      string
	selector LabelSelector_FieldPathSelector
}

var _ LabelSelector_FieldPath = (*LabelSelector_FieldPathMap)(nil)

func (fpm *LabelSelector_FieldPathMap) Selector() LabelSelector_FieldPathSelector {
	return fpm.selector
}

func (fpm *LabelSelector_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *LabelSelector_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *LabelSelector_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source LabelSelector
func (fpm *LabelSelector_FieldPathMap) Get(source *LabelSelector) (values []interface{}) {
	switch fpm.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		if value, ok := source.GetMatchLabels()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpm.selector))
	}
	return
}

func (fpm *LabelSelector_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*LabelSelector))
}

// GetSingle returns value by selected field map key from source LabelSelector
func (fpm *LabelSelector_FieldPathMap) GetSingle(source *LabelSelector) (interface{}, bool) {
	switch fpm.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		res, ok := source.GetMatchLabels()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpm.selector))
	}
}

func (fpm *LabelSelector_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*LabelSelector))
}

// GetDefault returns a default value of the field type
func (fpm *LabelSelector_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpm.selector))
	}
}

func (fpm *LabelSelector_FieldPathMap) ClearValue(item *LabelSelector) {
	if item != nil {
		switch fpm.selector {
		case LabelSelector_FieldPathSelectorMatchLabels:
			delete(item.MatchLabels, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpm.selector))
		}
	}
}

func (fpm *LabelSelector_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*LabelSelector))
}

// IsLeaf - whether field path is holds simple value
func (fpm *LabelSelector_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpm.selector))
	}
}

func (fpm *LabelSelector_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *LabelSelector_FieldPathMap) WithIValue(value interface{}) LabelSelector_FieldPathValue {
	switch fpm.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		return &LabelSelector_FieldPathMapValue{LabelSelector_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpm.selector))
	}
}

func (fpm *LabelSelector_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *LabelSelector_FieldPathMap) WithIArrayOfValues(values interface{}) LabelSelector_FieldPathArrayOfValues {
	switch fpm.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		return &LabelSelector_FieldPathMapArrayOfValues{LabelSelector_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpm.selector))
	}
}

func (fpm *LabelSelector_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *LabelSelector_FieldPathMap) WithIArrayItemValue(value interface{}) LabelSelector_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *LabelSelector_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type LabelSelector_FieldSubPath struct {
	selector LabelSelector_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ LabelSelector_FieldPath = (*LabelSelector_FieldSubPath)(nil)

func (fps *LabelSelector_FieldSubPath) Selector() LabelSelector_FieldPathSelector {
	return fps.selector
}
func (fps *LabelSelector_FieldSubPath) AsMatchExpressionsSubPath() (LabelSelectorRequirement_FieldPath, bool) {
	res, ok := fps.subPath.(LabelSelectorRequirement_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *LabelSelector_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *LabelSelector_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source LabelSelector
func (fps *LabelSelector_FieldSubPath) Get(source *LabelSelector) (values []interface{}) {
	switch fps.selector {
	case LabelSelector_FieldPathSelectorMatchExpressions:
		for _, item := range source.GetMatchExpressions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fps.selector))
	}
	return
}

func (fps *LabelSelector_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*LabelSelector))
}

// GetSingle returns value of selected field from source LabelSelector
func (fps *LabelSelector_FieldSubPath) GetSingle(source *LabelSelector) (interface{}, bool) {
	switch fps.selector {
	case LabelSelector_FieldPathSelectorMatchExpressions:
		if len(source.GetMatchExpressions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMatchExpressions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fps.selector))
	}
}

func (fps *LabelSelector_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*LabelSelector))
}

// GetDefault returns a default value of the field type
func (fps *LabelSelector_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *LabelSelector_FieldSubPath) ClearValue(item *LabelSelector) {
	if item != nil {
		switch fps.selector {
		case LabelSelector_FieldPathSelectorMatchExpressions:
			for _, subItem := range item.MatchExpressions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fps.selector))
		}
	}
}

func (fps *LabelSelector_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*LabelSelector))
}

// IsLeaf - whether field path is holds simple value
func (fps *LabelSelector_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *LabelSelector_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&LabelSelector_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *LabelSelector_FieldSubPath) WithIValue(value interface{}) LabelSelector_FieldPathValue {
	return &LabelSelector_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *LabelSelector_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *LabelSelector_FieldSubPath) WithIArrayOfValues(values interface{}) LabelSelector_FieldPathArrayOfValues {
	return &LabelSelector_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *LabelSelector_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *LabelSelector_FieldSubPath) WithIArrayItemValue(value interface{}) LabelSelector_FieldPathArrayItemValue {
	return &LabelSelector_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *LabelSelector_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// LabelSelector_FieldPathValue allows storing values for LabelSelector fields according to their type
type LabelSelector_FieldPathValue interface {
	LabelSelector_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **LabelSelector)
	CompareWith(*LabelSelector) (cmp int, comparable bool)
}

func ParseLabelSelector_FieldPathValue(pathStr, valueStr string) (LabelSelector_FieldPathValue, error) {
	fp, err := ParseLabelSelector_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LabelSelector field path value from %s: %v", valueStr, err)
	}
	return fpv.(LabelSelector_FieldPathValue), nil
}

func MustParseLabelSelector_FieldPathValue(pathStr, valueStr string) LabelSelector_FieldPathValue {
	fpv, err := ParseLabelSelector_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type LabelSelector_FieldTerminalPathValue struct {
	LabelSelector_FieldTerminalPath
	value interface{}
}

var _ LabelSelector_FieldPathValue = (*LabelSelector_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'LabelSelector' as interface{}
func (fpv *LabelSelector_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *LabelSelector_FieldTerminalPathValue) AsMatchLabelsValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}
func (fpv *LabelSelector_FieldTerminalPathValue) AsMatchExpressionsValue() ([]*LabelSelectorRequirement, bool) {
	res, ok := fpv.value.([]*LabelSelectorRequirement)
	return res, ok
}

// SetTo stores value for selected field for object LabelSelector
func (fpv *LabelSelector_FieldTerminalPathValue) SetTo(target **LabelSelector) {
	if *target == nil {
		*target = new(LabelSelector)
	}
	switch fpv.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		(*target).MatchLabels = fpv.value.(map[string]string)
	case LabelSelector_FieldPathSelectorMatchExpressions:
		(*target).MatchExpressions = fpv.value.([]*LabelSelectorRequirement)
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpv.selector))
	}
}

func (fpv *LabelSelector_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*LabelSelector)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'LabelSelector_FieldTerminalPathValue' with the value under path in 'LabelSelector'.
func (fpv *LabelSelector_FieldTerminalPathValue) CompareWith(source *LabelSelector) (int, bool) {
	switch fpv.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		return 0, false
	case LabelSelector_FieldPathSelectorMatchExpressions:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpv.selector))
	}
}

func (fpv *LabelSelector_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*LabelSelector))
}

type LabelSelector_FieldPathMapValue struct {
	LabelSelector_FieldPathMap
	value interface{}
}

var _ LabelSelector_FieldPathValue = (*LabelSelector_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in LabelSelector as interface{}
func (fpmv *LabelSelector_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *LabelSelector_FieldPathMapValue) AsMatchLabelsElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in LabelSelector
func (fpmv *LabelSelector_FieldPathMapValue) SetTo(target **LabelSelector) {
	if *target == nil {
		*target = new(LabelSelector)
	}
	switch fpmv.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		if (*target).MatchLabels == nil {
			(*target).MatchLabels = make(map[string]string)
		}
		(*target).MatchLabels[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpmv.selector))
	}
}

func (fpmv *LabelSelector_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*LabelSelector)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'LabelSelector_FieldPathMapValue' with the value under path in 'LabelSelector'.
func (fpmv *LabelSelector_FieldPathMapValue) CompareWith(source *LabelSelector) (int, bool) {
	switch fpmv.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		leftValue := fpmv.value.(string)
		rightValue := source.GetMatchLabels()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpmv.selector))
	}
}

func (fpmv *LabelSelector_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*LabelSelector))
}

type LabelSelector_FieldSubPathValue struct {
	LabelSelector_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ LabelSelector_FieldPathValue = (*LabelSelector_FieldSubPathValue)(nil)

func (fpvs *LabelSelector_FieldSubPathValue) AsMatchExpressionsPathValue() (LabelSelectorRequirement_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(LabelSelectorRequirement_FieldPathValue)
	return res, ok
}

func (fpvs *LabelSelector_FieldSubPathValue) SetTo(target **LabelSelector) {
	if *target == nil {
		*target = new(LabelSelector)
	}
	switch fpvs.Selector() {
	case LabelSelector_FieldPathSelectorMatchExpressions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpvs.Selector()))
	}
}

func (fpvs *LabelSelector_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*LabelSelector)
	fpvs.SetTo(&typedObject)
}

func (fpvs *LabelSelector_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *LabelSelector_FieldSubPathValue) CompareWith(source *LabelSelector) (int, bool) {
	switch fpvs.Selector() {
	case LabelSelector_FieldPathSelectorMatchExpressions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpvs.Selector()))
	}
}

func (fpvs *LabelSelector_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*LabelSelector))
}

// LabelSelector_FieldPathArrayItemValue allows storing single item in Path-specific values for LabelSelector according to their type
// Present only for array (repeated) types.
type LabelSelector_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	LabelSelector_FieldPath
	ContainsValue(*LabelSelector) bool
}

// ParseLabelSelector_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseLabelSelector_FieldPathArrayItemValue(pathStr, valueStr string) (LabelSelector_FieldPathArrayItemValue, error) {
	fp, err := ParseLabelSelector_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LabelSelector field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(LabelSelector_FieldPathArrayItemValue), nil
}

func MustParseLabelSelector_FieldPathArrayItemValue(pathStr, valueStr string) LabelSelector_FieldPathArrayItemValue {
	fpaiv, err := ParseLabelSelector_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type LabelSelector_FieldTerminalPathArrayItemValue struct {
	LabelSelector_FieldTerminalPath
	value interface{}
}

var _ LabelSelector_FieldPathArrayItemValue = (*LabelSelector_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object LabelSelector as interface{}
func (fpaiv *LabelSelector_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *LabelSelector_FieldTerminalPathArrayItemValue) AsMatchExpressionsItemValue() (*LabelSelectorRequirement, bool) {
	res, ok := fpaiv.value.(*LabelSelectorRequirement)
	return res, ok
}

func (fpaiv *LabelSelector_FieldTerminalPathArrayItemValue) GetSingle(source *LabelSelector) (interface{}, bool) {
	return nil, false
}

func (fpaiv *LabelSelector_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*LabelSelector))
}

// Contains returns a boolean indicating if value that is being held is present in given 'LabelSelector'
func (fpaiv *LabelSelector_FieldTerminalPathArrayItemValue) ContainsValue(source *LabelSelector) bool {
	slice := fpaiv.LabelSelector_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type LabelSelector_FieldSubPathArrayItemValue struct {
	LabelSelector_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *LabelSelector_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *LabelSelector_FieldSubPathArrayItemValue) AsMatchExpressionsPathItemValue() (LabelSelectorRequirement_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(LabelSelectorRequirement_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'LabelSelector'
func (fpaivs *LabelSelector_FieldSubPathArrayItemValue) ContainsValue(source *LabelSelector) bool {
	switch fpaivs.Selector() {
	case LabelSelector_FieldPathSelectorMatchExpressions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelector: %d", fpaivs.Selector()))
	}
}

// LabelSelector_FieldPathArrayOfValues allows storing slice of values for LabelSelector fields according to their type
type LabelSelector_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	LabelSelector_FieldPath
}

func ParseLabelSelector_FieldPathArrayOfValues(pathStr, valuesStr string) (LabelSelector_FieldPathArrayOfValues, error) {
	fp, err := ParseLabelSelector_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LabelSelector field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(LabelSelector_FieldPathArrayOfValues), nil
}

func MustParseLabelSelector_FieldPathArrayOfValues(pathStr, valuesStr string) LabelSelector_FieldPathArrayOfValues {
	fpaov, err := ParseLabelSelector_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type LabelSelector_FieldTerminalPathArrayOfValues struct {
	LabelSelector_FieldTerminalPath
	values interface{}
}

var _ LabelSelector_FieldPathArrayOfValues = (*LabelSelector_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *LabelSelector_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	case LabelSelector_FieldPathSelectorMatchExpressions:
		for _, v := range fpaov.values.([][]*LabelSelectorRequirement) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *LabelSelector_FieldTerminalPathArrayOfValues) AsMatchLabelsArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}
func (fpaov *LabelSelector_FieldTerminalPathArrayOfValues) AsMatchExpressionsArrayOfValues() ([][]*LabelSelectorRequirement, bool) {
	res, ok := fpaov.values.([][]*LabelSelectorRequirement)
	return res, ok
}

type LabelSelector_FieldPathMapArrayOfValues struct {
	LabelSelector_FieldPathMap
	values interface{}
}

var _ LabelSelector_FieldPathArrayOfValues = (*LabelSelector_FieldPathMapArrayOfValues)(nil)

func (fpmaov *LabelSelector_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case LabelSelector_FieldPathSelectorMatchLabels:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *LabelSelector_FieldPathMapArrayOfValues) AsMatchLabelsArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

type LabelSelector_FieldSubPathArrayOfValues struct {
	LabelSelector_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ LabelSelector_FieldPathArrayOfValues = (*LabelSelector_FieldSubPathArrayOfValues)(nil)

func (fpsaov *LabelSelector_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *LabelSelector_FieldSubPathArrayOfValues) AsMatchExpressionsPathArrayOfValues() (LabelSelectorRequirement_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(LabelSelectorRequirement_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type LabelSelectorRequirement_FieldPath interface {
	gotenobject.FieldPath
	Selector() LabelSelectorRequirement_FieldPathSelector
	Get(source *LabelSelectorRequirement) []interface{}
	GetSingle(source *LabelSelectorRequirement) (interface{}, bool)
	ClearValue(item *LabelSelectorRequirement)

	// Those methods build corresponding LabelSelectorRequirement_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) LabelSelectorRequirement_FieldPathValue
	WithIArrayOfValues(values interface{}) LabelSelectorRequirement_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) LabelSelectorRequirement_FieldPathArrayItemValue
}

type LabelSelectorRequirement_FieldPathSelector int32

const (
	LabelSelectorRequirement_FieldPathSelectorKey      LabelSelectorRequirement_FieldPathSelector = 0
	LabelSelectorRequirement_FieldPathSelectorOperator LabelSelectorRequirement_FieldPathSelector = 1
	LabelSelectorRequirement_FieldPathSelectorValues   LabelSelectorRequirement_FieldPathSelector = 2
)

func (s LabelSelectorRequirement_FieldPathSelector) String() string {
	switch s {
	case LabelSelectorRequirement_FieldPathSelectorKey:
		return "key"
	case LabelSelectorRequirement_FieldPathSelectorOperator:
		return "operator"
	case LabelSelectorRequirement_FieldPathSelectorValues:
		return "values"
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelectorRequirement: %d", s))
	}
}

func BuildLabelSelectorRequirement_FieldPath(fp gotenobject.RawFieldPath) (LabelSelectorRequirement_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object LabelSelectorRequirement")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "key":
			return &LabelSelectorRequirement_FieldTerminalPath{selector: LabelSelectorRequirement_FieldPathSelectorKey}, nil
		case "operator":
			return &LabelSelectorRequirement_FieldTerminalPath{selector: LabelSelectorRequirement_FieldPathSelectorOperator}, nil
		case "values":
			return &LabelSelectorRequirement_FieldTerminalPath{selector: LabelSelectorRequirement_FieldPathSelectorValues}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object LabelSelectorRequirement", fp)
}

func ParseLabelSelectorRequirement_FieldPath(rawField string) (LabelSelectorRequirement_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildLabelSelectorRequirement_FieldPath(fp)
}

func MustParseLabelSelectorRequirement_FieldPath(rawField string) LabelSelectorRequirement_FieldPath {
	fp, err := ParseLabelSelectorRequirement_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type LabelSelectorRequirement_FieldTerminalPath struct {
	selector LabelSelectorRequirement_FieldPathSelector
}

var _ LabelSelectorRequirement_FieldPath = (*LabelSelectorRequirement_FieldTerminalPath)(nil)

func (fp *LabelSelectorRequirement_FieldTerminalPath) Selector() LabelSelectorRequirement_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *LabelSelectorRequirement_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *LabelSelectorRequirement_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source LabelSelectorRequirement
func (fp *LabelSelectorRequirement_FieldTerminalPath) Get(source *LabelSelectorRequirement) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case LabelSelectorRequirement_FieldPathSelectorKey:
			values = append(values, source.Key)
		case LabelSelectorRequirement_FieldPathSelectorOperator:
			values = append(values, source.Operator)
		case LabelSelectorRequirement_FieldPathSelectorValues:
			for _, value := range source.GetValues() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for LabelSelectorRequirement: %d", fp.selector))
		}
	}
	return
}

func (fp *LabelSelectorRequirement_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*LabelSelectorRequirement))
}

// GetSingle returns value pointed by specific field of from source LabelSelectorRequirement
func (fp *LabelSelectorRequirement_FieldTerminalPath) GetSingle(source *LabelSelectorRequirement) (interface{}, bool) {
	switch fp.selector {
	case LabelSelectorRequirement_FieldPathSelectorKey:
		return source.GetKey(), source != nil
	case LabelSelectorRequirement_FieldPathSelectorOperator:
		return source.GetOperator(), source != nil
	case LabelSelectorRequirement_FieldPathSelectorValues:
		res := source.GetValues()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelectorRequirement: %d", fp.selector))
	}
}

func (fp *LabelSelectorRequirement_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*LabelSelectorRequirement))
}

// GetDefault returns a default value of the field type
func (fp *LabelSelectorRequirement_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case LabelSelectorRequirement_FieldPathSelectorKey:
		return ""
	case LabelSelectorRequirement_FieldPathSelectorOperator:
		return ""
	case LabelSelectorRequirement_FieldPathSelectorValues:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelectorRequirement: %d", fp.selector))
	}
}

func (fp *LabelSelectorRequirement_FieldTerminalPath) ClearValue(item *LabelSelectorRequirement) {
	if item != nil {
		switch fp.selector {
		case LabelSelectorRequirement_FieldPathSelectorKey:
			item.Key = ""
		case LabelSelectorRequirement_FieldPathSelectorOperator:
			item.Operator = ""
		case LabelSelectorRequirement_FieldPathSelectorValues:
			item.Values = nil
		default:
			panic(fmt.Sprintf("Invalid selector for LabelSelectorRequirement: %d", fp.selector))
		}
	}
}

func (fp *LabelSelectorRequirement_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*LabelSelectorRequirement))
}

// IsLeaf - whether field path is holds simple value
func (fp *LabelSelectorRequirement_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == LabelSelectorRequirement_FieldPathSelectorKey ||
		fp.selector == LabelSelectorRequirement_FieldPathSelectorOperator ||
		fp.selector == LabelSelectorRequirement_FieldPathSelectorValues
}

func (fp *LabelSelectorRequirement_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *LabelSelectorRequirement_FieldTerminalPath) WithIValue(value interface{}) LabelSelectorRequirement_FieldPathValue {
	switch fp.selector {
	case LabelSelectorRequirement_FieldPathSelectorKey:
		return &LabelSelectorRequirement_FieldTerminalPathValue{LabelSelectorRequirement_FieldTerminalPath: *fp, value: value.(string)}
	case LabelSelectorRequirement_FieldPathSelectorOperator:
		return &LabelSelectorRequirement_FieldTerminalPathValue{LabelSelectorRequirement_FieldTerminalPath: *fp, value: value.(string)}
	case LabelSelectorRequirement_FieldPathSelectorValues:
		return &LabelSelectorRequirement_FieldTerminalPathValue{LabelSelectorRequirement_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelectorRequirement: %d", fp.selector))
	}
}

func (fp *LabelSelectorRequirement_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *LabelSelectorRequirement_FieldTerminalPath) WithIArrayOfValues(values interface{}) LabelSelectorRequirement_FieldPathArrayOfValues {
	fpaov := &LabelSelectorRequirement_FieldTerminalPathArrayOfValues{LabelSelectorRequirement_FieldTerminalPath: *fp}
	switch fp.selector {
	case LabelSelectorRequirement_FieldPathSelectorKey:
		return &LabelSelectorRequirement_FieldTerminalPathArrayOfValues{LabelSelectorRequirement_FieldTerminalPath: *fp, values: values.([]string)}
	case LabelSelectorRequirement_FieldPathSelectorOperator:
		return &LabelSelectorRequirement_FieldTerminalPathArrayOfValues{LabelSelectorRequirement_FieldTerminalPath: *fp, values: values.([]string)}
	case LabelSelectorRequirement_FieldPathSelectorValues:
		return &LabelSelectorRequirement_FieldTerminalPathArrayOfValues{LabelSelectorRequirement_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelectorRequirement: %d", fp.selector))
	}
	return fpaov
}

func (fp *LabelSelectorRequirement_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *LabelSelectorRequirement_FieldTerminalPath) WithIArrayItemValue(value interface{}) LabelSelectorRequirement_FieldPathArrayItemValue {
	switch fp.selector {
	case LabelSelectorRequirement_FieldPathSelectorValues:
		return &LabelSelectorRequirement_FieldTerminalPathArrayItemValue{LabelSelectorRequirement_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelectorRequirement: %d", fp.selector))
	}
}

func (fp *LabelSelectorRequirement_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// LabelSelectorRequirement_FieldPathValue allows storing values for LabelSelectorRequirement fields according to their type
type LabelSelectorRequirement_FieldPathValue interface {
	LabelSelectorRequirement_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **LabelSelectorRequirement)
	CompareWith(*LabelSelectorRequirement) (cmp int, comparable bool)
}

func ParseLabelSelectorRequirement_FieldPathValue(pathStr, valueStr string) (LabelSelectorRequirement_FieldPathValue, error) {
	fp, err := ParseLabelSelectorRequirement_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LabelSelectorRequirement field path value from %s: %v", valueStr, err)
	}
	return fpv.(LabelSelectorRequirement_FieldPathValue), nil
}

func MustParseLabelSelectorRequirement_FieldPathValue(pathStr, valueStr string) LabelSelectorRequirement_FieldPathValue {
	fpv, err := ParseLabelSelectorRequirement_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type LabelSelectorRequirement_FieldTerminalPathValue struct {
	LabelSelectorRequirement_FieldTerminalPath
	value interface{}
}

var _ LabelSelectorRequirement_FieldPathValue = (*LabelSelectorRequirement_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'LabelSelectorRequirement' as interface{}
func (fpv *LabelSelectorRequirement_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *LabelSelectorRequirement_FieldTerminalPathValue) AsKeyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *LabelSelectorRequirement_FieldTerminalPathValue) AsOperatorValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *LabelSelectorRequirement_FieldTerminalPathValue) AsValuesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object LabelSelectorRequirement
func (fpv *LabelSelectorRequirement_FieldTerminalPathValue) SetTo(target **LabelSelectorRequirement) {
	if *target == nil {
		*target = new(LabelSelectorRequirement)
	}
	switch fpv.selector {
	case LabelSelectorRequirement_FieldPathSelectorKey:
		(*target).Key = fpv.value.(string)
	case LabelSelectorRequirement_FieldPathSelectorOperator:
		(*target).Operator = fpv.value.(string)
	case LabelSelectorRequirement_FieldPathSelectorValues:
		(*target).Values = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelectorRequirement: %d", fpv.selector))
	}
}

func (fpv *LabelSelectorRequirement_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*LabelSelectorRequirement)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'LabelSelectorRequirement_FieldTerminalPathValue' with the value under path in 'LabelSelectorRequirement'.
func (fpv *LabelSelectorRequirement_FieldTerminalPathValue) CompareWith(source *LabelSelectorRequirement) (int, bool) {
	switch fpv.selector {
	case LabelSelectorRequirement_FieldPathSelectorKey:
		leftValue := fpv.value.(string)
		rightValue := source.GetKey()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case LabelSelectorRequirement_FieldPathSelectorOperator:
		leftValue := fpv.value.(string)
		rightValue := source.GetOperator()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case LabelSelectorRequirement_FieldPathSelectorValues:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for LabelSelectorRequirement: %d", fpv.selector))
	}
}

func (fpv *LabelSelectorRequirement_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*LabelSelectorRequirement))
}

// LabelSelectorRequirement_FieldPathArrayItemValue allows storing single item in Path-specific values for LabelSelectorRequirement according to their type
// Present only for array (repeated) types.
type LabelSelectorRequirement_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	LabelSelectorRequirement_FieldPath
	ContainsValue(*LabelSelectorRequirement) bool
}

// ParseLabelSelectorRequirement_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseLabelSelectorRequirement_FieldPathArrayItemValue(pathStr, valueStr string) (LabelSelectorRequirement_FieldPathArrayItemValue, error) {
	fp, err := ParseLabelSelectorRequirement_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LabelSelectorRequirement field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(LabelSelectorRequirement_FieldPathArrayItemValue), nil
}

func MustParseLabelSelectorRequirement_FieldPathArrayItemValue(pathStr, valueStr string) LabelSelectorRequirement_FieldPathArrayItemValue {
	fpaiv, err := ParseLabelSelectorRequirement_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type LabelSelectorRequirement_FieldTerminalPathArrayItemValue struct {
	LabelSelectorRequirement_FieldTerminalPath
	value interface{}
}

var _ LabelSelectorRequirement_FieldPathArrayItemValue = (*LabelSelectorRequirement_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object LabelSelectorRequirement as interface{}
func (fpaiv *LabelSelectorRequirement_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *LabelSelectorRequirement_FieldTerminalPathArrayItemValue) AsValuesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *LabelSelectorRequirement_FieldTerminalPathArrayItemValue) GetSingle(source *LabelSelectorRequirement) (interface{}, bool) {
	return nil, false
}

func (fpaiv *LabelSelectorRequirement_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*LabelSelectorRequirement))
}

// Contains returns a boolean indicating if value that is being held is present in given 'LabelSelectorRequirement'
func (fpaiv *LabelSelectorRequirement_FieldTerminalPathArrayItemValue) ContainsValue(source *LabelSelectorRequirement) bool {
	slice := fpaiv.LabelSelectorRequirement_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// LabelSelectorRequirement_FieldPathArrayOfValues allows storing slice of values for LabelSelectorRequirement fields according to their type
type LabelSelectorRequirement_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	LabelSelectorRequirement_FieldPath
}

func ParseLabelSelectorRequirement_FieldPathArrayOfValues(pathStr, valuesStr string) (LabelSelectorRequirement_FieldPathArrayOfValues, error) {
	fp, err := ParseLabelSelectorRequirement_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing LabelSelectorRequirement field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(LabelSelectorRequirement_FieldPathArrayOfValues), nil
}

func MustParseLabelSelectorRequirement_FieldPathArrayOfValues(pathStr, valuesStr string) LabelSelectorRequirement_FieldPathArrayOfValues {
	fpaov, err := ParseLabelSelectorRequirement_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type LabelSelectorRequirement_FieldTerminalPathArrayOfValues struct {
	LabelSelectorRequirement_FieldTerminalPath
	values interface{}
}

var _ LabelSelectorRequirement_FieldPathArrayOfValues = (*LabelSelectorRequirement_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *LabelSelectorRequirement_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case LabelSelectorRequirement_FieldPathSelectorKey:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case LabelSelectorRequirement_FieldPathSelectorOperator:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case LabelSelectorRequirement_FieldPathSelectorValues:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *LabelSelectorRequirement_FieldTerminalPathArrayOfValues) AsKeyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *LabelSelectorRequirement_FieldTerminalPathArrayOfValues) AsOperatorArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *LabelSelectorRequirement_FieldTerminalPathArrayOfValues) AsValuesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
