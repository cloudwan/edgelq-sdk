// Code generated by protoc-gen-goten-resource
// Resource: Distribution
// DO NOT EDIT!!!

package distribution

import (
	"context"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	pod "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/pod"
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/project"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
)

// ensure the imports are used
var (
	_ = new(context.Context)

	_ = codes.Internal
	_ = status.Status{}

	_ = watch_type.WatchType_STATEFUL
	_ = new(gotenobject.FieldPath)
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &pod.Pod{}
	_ = &project.Project{}
	_ = &ntt_meta.Meta{}
)

type DistributionAccess interface {
	GetDistribution(context.Context, *GetQuery) (*Distribution, error)
	BatchGetDistributions(context.Context, []*Reference, ...gotenresource.BatchGetOption) error
	QueryDistributions(context.Context, *ListQuery) (*QueryResultSnapshot, error)
	WatchDistribution(context.Context, *GetQuery, func(*DistributionChange) error) error
	WatchDistributions(context.Context, *WatchQuery, func(*QueryResultChange) error) error
	SaveDistribution(context.Context, *Distribution, ...gotenresource.SaveOption) error
	DeleteDistribution(context.Context, *Reference, ...gotenresource.DeleteOption) error
}

type anyCastAccess struct {
	DistributionAccess
}

func AsAnyCastAccess(access DistributionAccess) gotenresource.Access {
	return &anyCastAccess{DistributionAccess: access}
}

func (a *anyCastAccess) Get(ctx context.Context, q gotenresource.GetQuery) (gotenresource.Resource, error) {
	if asDistributionQuery, ok := q.(*GetQuery); ok {
		return a.GetDistribution(ctx, asDistributionQuery)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected Distribution, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Query(ctx context.Context, q gotenresource.ListQuery) (gotenresource.QueryResultSnapshot, error) {
	if asDistributionQuery, ok := q.(*ListQuery); ok {
		return a.QueryDistributions(ctx, asDistributionQuery)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected Distribution, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Search(ctx context.Context, q gotenresource.SearchQuery) (gotenresource.QueryResultSnapshot, error) {
	return nil, status.Errorf(codes.Internal, "Search is not available for Distribution")
}

func (a *anyCastAccess) Watch(ctx context.Context, q gotenresource.GetQuery, cb func(ch gotenresource.ResourceChange) error) error {
	if asDistributionQuery, ok := q.(*GetQuery); ok {
		return a.WatchDistribution(ctx, asDistributionQuery, func(change *DistributionChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected Distribution, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) WatchQuery(ctx context.Context, q gotenresource.WatchQuery, cb func(ch gotenresource.QueryResultChange) error) error {
	if asDistributionQuery, ok := q.(*WatchQuery); ok {
		return a.WatchDistributions(ctx, asDistributionQuery, func(change *QueryResultChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected Distribution, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Save(ctx context.Context, res gotenresource.Resource, opts ...gotenresource.SaveOption) error {
	if asDistributionRes, ok := res.(*Distribution); ok {
		return a.SaveDistribution(ctx, asDistributionRes, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected Distribution, got: %s",
		res.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Delete(ctx context.Context, ref gotenresource.Reference, opts ...gotenresource.DeleteOption) error {
	if asDistributionRef, ok := ref.(*Reference); ok {
		return a.DeleteDistribution(ctx, asDistributionRef, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected Distribution, got: %s",
		ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) BatchGet(ctx context.Context, toGet []gotenresource.Reference, opts ...gotenresource.BatchGetOption) error {
	distributionRefs := make([]*Reference, 0, len(toGet))
	for _, ref := range toGet {
		if asDistributionRef, ok := ref.(*Reference); !ok {
			return status.Errorf(codes.Internal,
				"Unrecognized descriptor, expected Distribution, got: %s",
				ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
		} else {
			distributionRefs = append(distributionRefs, asDistributionRef)
		}
	}
	return a.BatchGetDistributions(ctx, distributionRefs, opts...)
}

func (a *anyCastAccess) GetResourceDescriptors() []gotenresource.Descriptor {
	return []gotenresource.Descriptor{
		GetDescriptor(),
	}
}
