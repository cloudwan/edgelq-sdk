// Code generated by protoc-gen-goten-object
// File: edgelq/applications/proto/v1alpha2/distribution.proto
// DO NOT EDIT!!!

package distribution

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/common"
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/project"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &common.PodSpec{}
	_ = &project.Project{}
	_ = &ntt_meta.Meta{}
)

type Distribution_FieldMask struct {
	Paths []Distribution_FieldPath
}

func FullDistribution_FieldMask() *Distribution_FieldMask {
	res := &Distribution_FieldMask{}
	res.Paths = append(res.Paths, &Distribution_FieldTerminalPath{selector: Distribution_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Distribution_FieldTerminalPath{selector: Distribution_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &Distribution_FieldTerminalPath{selector: Distribution_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &Distribution_FieldTerminalPath{selector: Distribution_FieldPathSelectorSpec})
	res.Paths = append(res.Paths, &Distribution_FieldTerminalPath{selector: Distribution_FieldPathSelectorStatus})
	return res
}

func (fieldMask *Distribution_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Distribution_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Distribution_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDistribution_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Distribution_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Distribution_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Distribution_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDistribution_FieldPath(raw)
	})
}

func (fieldMask *Distribution_FieldMask) ProtoMessage() {}

func (fieldMask *Distribution_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Distribution_FieldMask) Subtract(other *Distribution_FieldMask) *Distribution_FieldMask {
	result := &Distribution_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[Distribution_FieldPathSelector]gotenobject.FieldMask{
		Distribution_FieldPathSelectorMetadata: &ntt_meta.Meta_FieldMask{},
		Distribution_FieldPathSelectorSpec:     &Distribution_Spec_FieldMask{},
		Distribution_FieldPathSelectorStatus:   &Distribution_Status_FieldMask{},
	}
	mySubMasks := map[Distribution_FieldPathSelector]gotenobject.FieldMask{
		Distribution_FieldPathSelectorMetadata: &ntt_meta.Meta_FieldMask{},
		Distribution_FieldPathSelectorSpec:     &Distribution_Spec_FieldMask{},
		Distribution_FieldPathSelectorStatus:   &Distribution_Status_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Distribution_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Distribution_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Distribution_FieldTerminalPath); ok {
					switch tp.selector {
					case Distribution_FieldPathSelectorMetadata:
						mySubMasks[Distribution_FieldPathSelectorMetadata] = ntt_meta.FullMeta_FieldMask()
					case Distribution_FieldPathSelectorSpec:
						mySubMasks[Distribution_FieldPathSelectorSpec] = FullDistribution_Spec_FieldMask()
					case Distribution_FieldPathSelectorStatus:
						mySubMasks[Distribution_FieldPathSelectorStatus] = FullDistribution_Status_FieldMask()
					}
				} else if tp, ok := path.(*Distribution_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Distribution_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Distribution_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Distribution_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Distribution_FieldMask) FilterInputFields() *Distribution_FieldMask {
	result := &Distribution_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Distribution_FieldPathSelectorMetadata:
			if _, ok := path.(*Distribution_FieldTerminalPath); ok {
				for _, subpath := range ntt_meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Distribution_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Distribution_FieldSubPath); ok {
				selectedMask := &ntt_meta.Meta_FieldMask{
					Paths: []ntt_meta.Meta_FieldPath{sub.subPath.(ntt_meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Distribution_FieldSubPath{selector: Distribution_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		case Distribution_FieldPathSelectorSpec:
			if _, ok := path.(*Distribution_FieldTerminalPath); ok {
				for _, subpath := range FullDistribution_Spec_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Distribution_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Distribution_FieldSubPath); ok {
				selectedMask := &Distribution_Spec_FieldMask{
					Paths: []DistributionSpec_FieldPath{sub.subPath.(DistributionSpec_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Distribution_FieldSubPath{selector: Distribution_FieldPathSelectorSpec, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Distribution_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Distribution_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Distribution_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDistribution_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Distribution_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Distribution_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Distribution_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Distribution_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Distribution_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Distribution_FieldMask) AppendPath(path Distribution_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Distribution_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Distribution_FieldPath))
}

func (fieldMask *Distribution_FieldMask) GetPaths() []Distribution_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Distribution_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Distribution_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDistribution_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Distribution_FieldMask) Set(target, source *Distribution) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Distribution_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Distribution), source.(*Distribution))
}

func (fieldMask *Distribution_FieldMask) Project(source *Distribution) *Distribution {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Distribution{}
	metadataMask := &ntt_meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	specMask := &Distribution_Spec_FieldMask{}
	wholeSpecAccepted := false
	statusMask := &Distribution_Status_FieldMask{}
	wholeStatusAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Distribution_FieldTerminalPath:
			switch tp.selector {
			case Distribution_FieldPathSelectorName:
				result.Name = source.Name
			case Distribution_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case Distribution_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case Distribution_FieldPathSelectorSpec:
				result.Spec = source.Spec
				wholeSpecAccepted = true
			case Distribution_FieldPathSelectorStatus:
				result.Status = source.Status
				wholeStatusAccepted = true
			}
		case *Distribution_FieldSubPath:
			switch tp.selector {
			case Distribution_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(ntt_meta.Meta_FieldPath))
			case Distribution_FieldPathSelectorSpec:
				specMask.AppendPath(tp.subPath.(DistributionSpec_FieldPath))
			case Distribution_FieldPathSelectorStatus:
				statusMask.AppendPath(tp.subPath.(DistributionStatus_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeSpecAccepted == false && len(specMask.Paths) > 0 {
		result.Spec = specMask.Project(source.GetSpec())
	}
	if wholeStatusAccepted == false && len(statusMask.Paths) > 0 {
		result.Status = statusMask.Project(source.GetStatus())
	}
	return result
}

func (fieldMask *Distribution_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Distribution))
}

func (fieldMask *Distribution_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Distribution_Spec_FieldMask struct {
	Paths []DistributionSpec_FieldPath
}

func FullDistribution_Spec_FieldMask() *Distribution_Spec_FieldMask {
	res := &Distribution_Spec_FieldMask{}
	res.Paths = append(res.Paths, &DistributionSpec_FieldTerminalPath{selector: DistributionSpec_FieldPathSelectorSelector})
	res.Paths = append(res.Paths, &DistributionSpec_FieldTerminalPath{selector: DistributionSpec_FieldPathSelectorTemplate})
	return res
}

func (fieldMask *Distribution_Spec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Distribution_Spec_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Distribution_Spec_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDistributionSpec_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Distribution_Spec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DistributionSpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Distribution_Spec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDistributionSpec_FieldPath(raw)
	})
}

func (fieldMask *Distribution_Spec_FieldMask) ProtoMessage() {}

func (fieldMask *Distribution_Spec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Distribution_Spec_FieldMask) Subtract(other *Distribution_Spec_FieldMask) *Distribution_Spec_FieldMask {
	result := &Distribution_Spec_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[DistributionSpec_FieldPathSelector]gotenobject.FieldMask{
		DistributionSpec_FieldPathSelectorSelector: &LabelSelector_FieldMask{},
		DistributionSpec_FieldPathSelectorTemplate: &Distribution_Spec_Template_FieldMask{},
	}
	mySubMasks := map[DistributionSpec_FieldPathSelector]gotenobject.FieldMask{
		DistributionSpec_FieldPathSelectorSelector: &LabelSelector_FieldMask{},
		DistributionSpec_FieldPathSelectorTemplate: &Distribution_Spec_Template_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DistributionSpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *DistributionSpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*DistributionSpec_FieldTerminalPath); ok {
					switch tp.selector {
					case DistributionSpec_FieldPathSelectorSelector:
						mySubMasks[DistributionSpec_FieldPathSelectorSelector] = FullLabelSelector_FieldMask()
					case DistributionSpec_FieldPathSelectorTemplate:
						mySubMasks[DistributionSpec_FieldPathSelectorTemplate] = FullDistribution_Spec_Template_FieldMask()
					}
				} else if tp, ok := path.(*DistributionSpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &DistributionSpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Distribution_Spec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Distribution_Spec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Distribution_Spec_FieldMask) FilterInputFields() *Distribution_Spec_FieldMask {
	result := &Distribution_Spec_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case DistributionSpec_FieldPathSelectorTemplate:
			if _, ok := path.(*DistributionSpec_FieldTerminalPath); ok {
				for _, subpath := range FullDistribution_Spec_Template_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &DistributionSpec_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*DistributionSpec_FieldSubPath); ok {
				selectedMask := &Distribution_Spec_Template_FieldMask{
					Paths: []DistributionSpecTemplate_FieldPath{sub.subPath.(DistributionSpecTemplate_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &DistributionSpec_FieldSubPath{selector: DistributionSpec_FieldPathSelectorTemplate, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Distribution_Spec_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Distribution_Spec_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DistributionSpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDistributionSpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Distribution_Spec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Distribution_Spec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Distribution_Spec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Distribution_Spec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Distribution_Spec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Distribution_Spec_FieldMask) AppendPath(path DistributionSpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Distribution_Spec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DistributionSpec_FieldPath))
}

func (fieldMask *Distribution_Spec_FieldMask) GetPaths() []DistributionSpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Distribution_Spec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Distribution_Spec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDistributionSpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Distribution_Spec_FieldMask) Set(target, source *Distribution_Spec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Distribution_Spec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Distribution_Spec), source.(*Distribution_Spec))
}

func (fieldMask *Distribution_Spec_FieldMask) Project(source *Distribution_Spec) *Distribution_Spec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Distribution_Spec{}
	selectorMask := &LabelSelector_FieldMask{}
	wholeSelectorAccepted := false
	templateMask := &Distribution_Spec_Template_FieldMask{}
	wholeTemplateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DistributionSpec_FieldTerminalPath:
			switch tp.selector {
			case DistributionSpec_FieldPathSelectorSelector:
				result.Selector = source.Selector
				wholeSelectorAccepted = true
			case DistributionSpec_FieldPathSelectorTemplate:
				result.Template = source.Template
				wholeTemplateAccepted = true
			}
		case *DistributionSpec_FieldSubPath:
			switch tp.selector {
			case DistributionSpec_FieldPathSelectorSelector:
				selectorMask.AppendPath(tp.subPath.(LabelSelector_FieldPath))
			case DistributionSpec_FieldPathSelectorTemplate:
				templateMask.AppendPath(tp.subPath.(DistributionSpecTemplate_FieldPath))
			}
		}
	}
	if wholeSelectorAccepted == false && len(selectorMask.Paths) > 0 {
		result.Selector = selectorMask.Project(source.GetSelector())
	}
	if wholeTemplateAccepted == false && len(templateMask.Paths) > 0 {
		result.Template = templateMask.Project(source.GetTemplate())
	}
	return result
}

func (fieldMask *Distribution_Spec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Distribution_Spec))
}

func (fieldMask *Distribution_Spec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Distribution_Status_FieldMask struct {
	Paths []DistributionStatus_FieldPath
}

func FullDistribution_Status_FieldMask() *Distribution_Status_FieldMask {
	res := &Distribution_Status_FieldMask{}
	return res
}

func (fieldMask *Distribution_Status_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Distribution_Status_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Distribution_Status_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDistributionStatus_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Distribution_Status_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 0)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DistributionStatus_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Distribution_Status_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDistributionStatus_FieldPath(raw)
	})
}

func (fieldMask *Distribution_Status_FieldMask) ProtoMessage() {}

func (fieldMask *Distribution_Status_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Distribution_Status_FieldMask) Subtract(other *Distribution_Status_FieldMask) *Distribution_Status_FieldMask {
	result := &Distribution_Status_FieldMask{}
	removedSelectors := make([]bool, 0)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DistributionStatus_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Distribution_Status_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Distribution_Status_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Distribution_Status_FieldMask) FilterInputFields() *Distribution_Status_FieldMask {
	result := &Distribution_Status_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Distribution_Status_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Distribution_Status_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DistributionStatus_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDistributionStatus_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Distribution_Status_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Distribution_Status_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Distribution_Status_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Distribution_Status_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Distribution_Status_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Distribution_Status_FieldMask) AppendPath(path DistributionStatus_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Distribution_Status_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DistributionStatus_FieldPath))
}

func (fieldMask *Distribution_Status_FieldMask) GetPaths() []DistributionStatus_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Distribution_Status_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Distribution_Status_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDistributionStatus_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Distribution_Status_FieldMask) Set(target, source *Distribution_Status) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Distribution_Status_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Distribution_Status), source.(*Distribution_Status))
}

func (fieldMask *Distribution_Status_FieldMask) Project(source *Distribution_Status) *Distribution_Status {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Distribution_Status{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DistributionStatus_FieldTerminalPath:
			switch tp.selector {
			}
		}
	}
	return result
}

func (fieldMask *Distribution_Status_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Distribution_Status))
}

func (fieldMask *Distribution_Status_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Distribution_Spec_Template_FieldMask struct {
	Paths []DistributionSpecTemplate_FieldPath
}

func FullDistribution_Spec_Template_FieldMask() *Distribution_Spec_Template_FieldMask {
	res := &Distribution_Spec_Template_FieldMask{}
	res.Paths = append(res.Paths, &DistributionSpecTemplate_FieldTerminalPath{selector: DistributionSpecTemplate_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &DistributionSpecTemplate_FieldTerminalPath{selector: DistributionSpecTemplate_FieldPathSelectorSpec})
	return res
}

func (fieldMask *Distribution_Spec_Template_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Distribution_Spec_Template_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Distribution_Spec_Template_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDistributionSpecTemplate_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Distribution_Spec_Template_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DistributionSpecTemplate_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Distribution_Spec_Template_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDistributionSpecTemplate_FieldPath(raw)
	})
}

func (fieldMask *Distribution_Spec_Template_FieldMask) ProtoMessage() {}

func (fieldMask *Distribution_Spec_Template_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Distribution_Spec_Template_FieldMask) Subtract(other *Distribution_Spec_Template_FieldMask) *Distribution_Spec_Template_FieldMask {
	result := &Distribution_Spec_Template_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[DistributionSpecTemplate_FieldPathSelector]gotenobject.FieldMask{
		DistributionSpecTemplate_FieldPathSelectorMetadata: &ntt_meta.Meta_FieldMask{},
		DistributionSpecTemplate_FieldPathSelectorSpec:     &common.PodSpec_FieldMask{},
	}
	mySubMasks := map[DistributionSpecTemplate_FieldPathSelector]gotenobject.FieldMask{
		DistributionSpecTemplate_FieldPathSelectorMetadata: &ntt_meta.Meta_FieldMask{},
		DistributionSpecTemplate_FieldPathSelectorSpec:     &common.PodSpec_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DistributionSpecTemplate_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *DistributionSpecTemplate_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*DistributionSpecTemplate_FieldTerminalPath); ok {
					switch tp.selector {
					case DistributionSpecTemplate_FieldPathSelectorMetadata:
						mySubMasks[DistributionSpecTemplate_FieldPathSelectorMetadata] = ntt_meta.FullMeta_FieldMask()
					case DistributionSpecTemplate_FieldPathSelectorSpec:
						mySubMasks[DistributionSpecTemplate_FieldPathSelectorSpec] = common.FullPodSpec_FieldMask()
					}
				} else if tp, ok := path.(*DistributionSpecTemplate_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &DistributionSpecTemplate_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Distribution_Spec_Template_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Distribution_Spec_Template_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Distribution_Spec_Template_FieldMask) FilterInputFields() *Distribution_Spec_Template_FieldMask {
	result := &Distribution_Spec_Template_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case DistributionSpecTemplate_FieldPathSelectorMetadata:
			if _, ok := path.(*DistributionSpecTemplate_FieldTerminalPath); ok {
				for _, subpath := range ntt_meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &DistributionSpecTemplate_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*DistributionSpecTemplate_FieldSubPath); ok {
				selectedMask := &ntt_meta.Meta_FieldMask{
					Paths: []ntt_meta.Meta_FieldPath{sub.subPath.(ntt_meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &DistributionSpecTemplate_FieldSubPath{selector: DistributionSpecTemplate_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Distribution_Spec_Template_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Distribution_Spec_Template_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DistributionSpecTemplate_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDistributionSpecTemplate_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Distribution_Spec_Template_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Distribution_Spec_Template_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Distribution_Spec_Template_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Distribution_Spec_Template_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Distribution_Spec_Template_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Distribution_Spec_Template_FieldMask) AppendPath(path DistributionSpecTemplate_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Distribution_Spec_Template_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DistributionSpecTemplate_FieldPath))
}

func (fieldMask *Distribution_Spec_Template_FieldMask) GetPaths() []DistributionSpecTemplate_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Distribution_Spec_Template_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Distribution_Spec_Template_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDistributionSpecTemplate_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Distribution_Spec_Template_FieldMask) Set(target, source *Distribution_Spec_Template) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Distribution_Spec_Template_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Distribution_Spec_Template), source.(*Distribution_Spec_Template))
}

func (fieldMask *Distribution_Spec_Template_FieldMask) Project(source *Distribution_Spec_Template) *Distribution_Spec_Template {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Distribution_Spec_Template{}
	metadataMask := &ntt_meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	specMask := &common.PodSpec_FieldMask{}
	wholeSpecAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DistributionSpecTemplate_FieldTerminalPath:
			switch tp.selector {
			case DistributionSpecTemplate_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case DistributionSpecTemplate_FieldPathSelectorSpec:
				result.Spec = source.Spec
				wholeSpecAccepted = true
			}
		case *DistributionSpecTemplate_FieldSubPath:
			switch tp.selector {
			case DistributionSpecTemplate_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(ntt_meta.Meta_FieldPath))
			case DistributionSpecTemplate_FieldPathSelectorSpec:
				specMask.AppendPath(tp.subPath.(common.PodSpec_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeSpecAccepted == false && len(specMask.Paths) > 0 {
		result.Spec = specMask.Project(source.GetSpec())
	}
	return result
}

func (fieldMask *Distribution_Spec_Template_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Distribution_Spec_Template))
}

func (fieldMask *Distribution_Spec_Template_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type LabelSelector_FieldMask struct {
	Paths []LabelSelector_FieldPath
}

func FullLabelSelector_FieldMask() *LabelSelector_FieldMask {
	res := &LabelSelector_FieldMask{}
	res.Paths = append(res.Paths, &LabelSelector_FieldTerminalPath{selector: LabelSelector_FieldPathSelectorMatchLabels})
	res.Paths = append(res.Paths, &LabelSelector_FieldTerminalPath{selector: LabelSelector_FieldPathSelectorMatchExpressions})
	return res
}

func (fieldMask *LabelSelector_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *LabelSelector_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *LabelSelector_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseLabelSelector_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *LabelSelector_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*LabelSelector_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *LabelSelector_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseLabelSelector_FieldPath(raw)
	})
}

func (fieldMask *LabelSelector_FieldMask) ProtoMessage() {}

func (fieldMask *LabelSelector_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *LabelSelector_FieldMask) Subtract(other *LabelSelector_FieldMask) *LabelSelector_FieldMask {
	result := &LabelSelector_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[LabelSelector_FieldPathSelector]gotenobject.FieldMask{
		LabelSelector_FieldPathSelectorMatchExpressions: &LabelSelectorRequirement_FieldMask{},
	}
	mySubMasks := map[LabelSelector_FieldPathSelector]gotenobject.FieldMask{
		LabelSelector_FieldPathSelectorMatchExpressions: &LabelSelectorRequirement_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *LabelSelector_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *LabelSelector_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*LabelSelector_FieldTerminalPath); ok {
					switch tp.selector {
					case LabelSelector_FieldPathSelectorMatchExpressions:
						mySubMasks[LabelSelector_FieldPathSelectorMatchExpressions] = FullLabelSelectorRequirement_FieldMask()
					}
				} else if tp, ok := path.(*LabelSelector_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &LabelSelector_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *LabelSelector_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*LabelSelector_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *LabelSelector_FieldMask) FilterInputFields() *LabelSelector_FieldMask {
	result := &LabelSelector_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *LabelSelector_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *LabelSelector_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]LabelSelector_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseLabelSelector_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask LabelSelector_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *LabelSelector_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LabelSelector_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask LabelSelector_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *LabelSelector_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LabelSelector_FieldMask) AppendPath(path LabelSelector_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *LabelSelector_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(LabelSelector_FieldPath))
}

func (fieldMask *LabelSelector_FieldMask) GetPaths() []LabelSelector_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *LabelSelector_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *LabelSelector_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseLabelSelector_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *LabelSelector_FieldMask) Set(target, source *LabelSelector) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *LabelSelector_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*LabelSelector), source.(*LabelSelector))
}

func (fieldMask *LabelSelector_FieldMask) Project(source *LabelSelector) *LabelSelector {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &LabelSelector{}
	matchExpressionsMask := &LabelSelectorRequirement_FieldMask{}
	wholeMatchExpressionsAccepted := false
	var matchLabelsMapKeys []string
	wholeMatchLabelsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *LabelSelector_FieldTerminalPath:
			switch tp.selector {
			case LabelSelector_FieldPathSelectorMatchLabels:
				result.MatchLabels = source.MatchLabels
				wholeMatchLabelsAccepted = true
			case LabelSelector_FieldPathSelectorMatchExpressions:
				result.MatchExpressions = source.MatchExpressions
				wholeMatchExpressionsAccepted = true
			}
		case *LabelSelector_FieldSubPath:
			switch tp.selector {
			case LabelSelector_FieldPathSelectorMatchExpressions:
				matchExpressionsMask.AppendPath(tp.subPath.(LabelSelectorRequirement_FieldPath))
			}
		case *LabelSelector_FieldPathMap:
			switch tp.selector {
			case LabelSelector_FieldPathSelectorMatchLabels:
				matchLabelsMapKeys = append(matchLabelsMapKeys, tp.key)
			}
		}
	}
	if wholeMatchLabelsAccepted == false && len(matchLabelsMapKeys) > 0 && source.GetMatchLabels() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetMatchLabels()
		for _, key := range matchLabelsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.MatchLabels = copiedMap
	}
	if wholeMatchExpressionsAccepted == false && len(matchExpressionsMask.Paths) > 0 {
		for _, sourceItem := range source.GetMatchExpressions() {
			result.MatchExpressions = append(result.MatchExpressions, matchExpressionsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *LabelSelector_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*LabelSelector))
}

func (fieldMask *LabelSelector_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type LabelSelectorRequirement_FieldMask struct {
	Paths []LabelSelectorRequirement_FieldPath
}

func FullLabelSelectorRequirement_FieldMask() *LabelSelectorRequirement_FieldMask {
	res := &LabelSelectorRequirement_FieldMask{}
	res.Paths = append(res.Paths, &LabelSelectorRequirement_FieldTerminalPath{selector: LabelSelectorRequirement_FieldPathSelectorKey})
	res.Paths = append(res.Paths, &LabelSelectorRequirement_FieldTerminalPath{selector: LabelSelectorRequirement_FieldPathSelectorOperator})
	res.Paths = append(res.Paths, &LabelSelectorRequirement_FieldTerminalPath{selector: LabelSelectorRequirement_FieldPathSelectorValues})
	return res
}

func (fieldMask *LabelSelectorRequirement_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *LabelSelectorRequirement_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *LabelSelectorRequirement_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseLabelSelectorRequirement_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *LabelSelectorRequirement_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*LabelSelectorRequirement_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *LabelSelectorRequirement_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseLabelSelectorRequirement_FieldPath(raw)
	})
}

func (fieldMask *LabelSelectorRequirement_FieldMask) ProtoMessage() {}

func (fieldMask *LabelSelectorRequirement_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *LabelSelectorRequirement_FieldMask) Subtract(other *LabelSelectorRequirement_FieldMask) *LabelSelectorRequirement_FieldMask {
	result := &LabelSelectorRequirement_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *LabelSelectorRequirement_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *LabelSelectorRequirement_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*LabelSelectorRequirement_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *LabelSelectorRequirement_FieldMask) FilterInputFields() *LabelSelectorRequirement_FieldMask {
	result := &LabelSelectorRequirement_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *LabelSelectorRequirement_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *LabelSelectorRequirement_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]LabelSelectorRequirement_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseLabelSelectorRequirement_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask LabelSelectorRequirement_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *LabelSelectorRequirement_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LabelSelectorRequirement_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask LabelSelectorRequirement_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *LabelSelectorRequirement_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LabelSelectorRequirement_FieldMask) AppendPath(path LabelSelectorRequirement_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *LabelSelectorRequirement_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(LabelSelectorRequirement_FieldPath))
}

func (fieldMask *LabelSelectorRequirement_FieldMask) GetPaths() []LabelSelectorRequirement_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *LabelSelectorRequirement_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *LabelSelectorRequirement_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseLabelSelectorRequirement_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *LabelSelectorRequirement_FieldMask) Set(target, source *LabelSelectorRequirement) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *LabelSelectorRequirement_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*LabelSelectorRequirement), source.(*LabelSelectorRequirement))
}

func (fieldMask *LabelSelectorRequirement_FieldMask) Project(source *LabelSelectorRequirement) *LabelSelectorRequirement {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &LabelSelectorRequirement{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *LabelSelectorRequirement_FieldTerminalPath:
			switch tp.selector {
			case LabelSelectorRequirement_FieldPathSelectorKey:
				result.Key = source.Key
			case LabelSelectorRequirement_FieldPathSelectorOperator:
				result.Operator = source.Operator
			case LabelSelectorRequirement_FieldPathSelectorValues:
				result.Values = source.Values
			}
		}
	}
	return result
}

func (fieldMask *LabelSelectorRequirement_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*LabelSelectorRequirement))
}

func (fieldMask *LabelSelectorRequirement_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
