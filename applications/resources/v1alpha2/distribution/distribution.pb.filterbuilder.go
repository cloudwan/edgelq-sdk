// Code generated by protoc-gen-goten-resource
// Resource: Distribution
// DO NOT EDIT!!!

package distribution

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/common"
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/project"
	devices_device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	devices_project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	secrets_project "github.com/cloudwan/edgelq-sdk/secrets/resources/v1alpha2/project"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1alpha2/secret"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &common.PodSpec{}
	_ = &project.Project{}
	_ = &devices_device.Device{}
	_ = &devices_project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.PCR{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &meta_service.Service{}
	_ = &secrets_project.Project{}
	_ = &secrets_secret.Secret{}
	_ = &durationpb.Duration{}
	_ = &fieldmaskpb.FieldMask{}
	_ = &timestamppb.Timestamp{}
	_ = &latlng.LatLng{}
	_ = &meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

type FilterBuilderOrCondition interface {
	_IsDistributionFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsDistributionFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp Distribution_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      Distribution_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) Contains(value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: b.fp,
		Value:     b.fp.WithIArrayItemValue(value),
	})
}

func (b *filterCndBuilderAnyPath) ContainsAnyOf(values []interface{}) *FilterBuilder {
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) ContainsAll(values []interface{}) *FilterBuilder {
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, b.fp.WithIArrayItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: b.fp,
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) Spec() *filterCndBuilderSpec {
	return &filterCndBuilderSpec{builder: b.builder}
}

func (b *filterCndBuilder) Status() *filterCndBuilderStatus {
	return &filterCndBuilderStatus{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) DeleteTime() *filterCndBuilderMetadataDeleteTime {
	return &filterCndBuilderMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Lifecycle() *filterCndBuilderMetadataLifecycle {
	return &filterCndBuilderMetadataLifecycle{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Services() *filterCndBuilderMetadataServices {
	return &filterCndBuilderMetadataServices{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataDeleteTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Metadata().Tags()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Metadata().Tags()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Version() *filterCndBuilderMetadataOwnerReferencesVersion {
	return &filterCndBuilderMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Region() *filterCndBuilderMetadataOwnerReferencesRegion {
	return &filterCndBuilderMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) UnsetOnDelete() *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete {
	return &filterCndBuilderMetadataOwnerReferencesUnsetOnDelete{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUnsetOnDelete struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUnsetOnDelete) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().OwnerReferences().UnsetOnDelete().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycle) Eq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Neq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycle) In(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) NotIn(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLifecycle) State() *filterCndBuilderMetadataLifecycleState {
	return &filterCndBuilderMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderMetadataLifecycle) BlockDeletion() *filterCndBuilderMetadataLifecycleBlockDeletion {
	return &filterCndBuilderMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleState) Eq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Neq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) In(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) NotIn(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServices) Eq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServices) Neq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServices) Gt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServices) Gte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServices) Lt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServices) Lte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServices) In(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) NotIn(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServices) compare(op gotenfilter.CompareOperator, value *meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Services().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataServices) OwningService() *filterCndBuilderMetadataServicesOwningService {
	return &filterCndBuilderMetadataServicesOwningService{builder: b.builder}
}

func (b *filterCndBuilderMetadataServices) AllowedServices() *filterCndBuilderMetadataServicesAllowedServices {
	return &filterCndBuilderMetadataServicesAllowedServices{builder: b.builder}
}

type filterCndBuilderMetadataServicesOwningService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesOwningService) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesOwningService) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesOwningService) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Services().OwningService().WithValue(value),
	})
}

type filterCndBuilderMetadataServicesAllowedServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataServicesAllowedServices) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Metadata().Services().AllowedServices().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Metadata().Services().AllowedServices()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataServicesAllowedServices) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Metadata().Services().AllowedServices().WithValue(value),
	})
}

type filterCndBuilderSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpec) Eq(value *Distribution_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpec) Neq(value *Distribution_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpec) Gt(value *Distribution_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpec) Gte(value *Distribution_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpec) Lt(value *Distribution_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpec) Lte(value *Distribution_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpec) In(values []*Distribution_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) NotIn(values []*Distribution_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) compare(op gotenfilter.CompareOperator, value *Distribution_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpec) Selector() *filterCndBuilderSpecSelector {
	return &filterCndBuilderSpecSelector{builder: b.builder}
}

func (b *filterCndBuilderSpec) Template() *filterCndBuilderSpecTemplate {
	return &filterCndBuilderSpecTemplate{builder: b.builder}
}

type filterCndBuilderSpecSelector struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSelector) Eq(value *LabelSelector) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSelector) Neq(value *LabelSelector) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSelector) Gt(value *LabelSelector) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSelector) Gte(value *LabelSelector) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSelector) Lt(value *LabelSelector) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSelector) Lte(value *LabelSelector) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSelector) In(values []*LabelSelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSelector) NotIn(values []*LabelSelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSelector) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSelector) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSelector) compare(op gotenfilter.CompareOperator, value *LabelSelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Selector().WithValue(value),
	})
}

func (b *filterCndBuilderSpecSelector) MatchLabels() *filterCndBuilderSpecSelectorMatchLabels {
	return &filterCndBuilderSpecSelectorMatchLabels{builder: b.builder}
}

func (b *filterCndBuilderSpecSelector) MatchExpressions() *filterCndBuilderSpecSelectorMatchExpressions {
	return &filterCndBuilderSpecSelectorMatchExpressions{builder: b.builder}
}

type filterCndBuilderSpecSelectorMatchLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSelectorMatchLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSelectorMatchLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSelectorMatchLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSelectorMatchLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSelectorMatchLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSelectorMatchLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSelectorMatchLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().MatchLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSelectorMatchLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().MatchLabels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSelectorMatchLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchLabels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSelectorMatchLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchLabels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSelectorMatchLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Selector().MatchLabels().WithValue(value),
	})
}

func (b *filterCndBuilderSpecSelectorMatchLabels) WithKey(key string) *mapFilterCndBuilderSpecSelectorMatchLabels {
	return &mapFilterCndBuilderSpecSelectorMatchLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecSelectorMatchLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecSelectorMatchLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecSelectorMatchLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecSelectorMatchLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecSelectorMatchLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecSelectorMatchLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecSelectorMatchLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecSelectorMatchLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().MatchLabels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecSelectorMatchLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().MatchLabels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecSelectorMatchLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchLabels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecSelectorMatchLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchLabels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecSelectorMatchLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Selector().MatchLabels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecSelectorMatchExpressions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) Eq(value []*LabelSelectorRequirement) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) Neq(value []*LabelSelectorRequirement) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) Gt(value []*LabelSelectorRequirement) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) Gte(value []*LabelSelectorRequirement) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) Lt(value []*LabelSelectorRequirement) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) Lte(value []*LabelSelectorRequirement) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) In(values [][]*LabelSelectorRequirement) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) NotIn(values [][]*LabelSelectorRequirement) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) Contains(value *LabelSelectorRequirement) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) ContainsAnyOf(values []*LabelSelectorRequirement) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) ContainsAll(values []*LabelSelectorRequirement) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) compare(op gotenfilter.CompareOperator, value []*LabelSelectorRequirement) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().WithValue(value),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) Key() *filterCndBuilderSpecSelectorMatchExpressionsKey {
	return &filterCndBuilderSpecSelectorMatchExpressionsKey{builder: b.builder}
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) Operator() *filterCndBuilderSpecSelectorMatchExpressionsOperator {
	return &filterCndBuilderSpecSelectorMatchExpressionsOperator{builder: b.builder}
}

func (b *filterCndBuilderSpecSelectorMatchExpressions) Values() *filterCndBuilderSpecSelectorMatchExpressionsValues {
	return &filterCndBuilderSpecSelectorMatchExpressionsValues{builder: b.builder}
}

type filterCndBuilderSpecSelectorMatchExpressionsKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Key().WithValue(value),
	})
}

type filterCndBuilderSpecSelectorMatchExpressionsOperator struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsOperator) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsOperator) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsOperator) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsOperator) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsOperator) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsOperator) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsOperator) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Operator().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsOperator) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Operator().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsOperator) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Operator().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsOperator) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Operator().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsOperator) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Operator().WithValue(value),
	})
}

type filterCndBuilderSpecSelectorMatchExpressionsValues struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Values().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Values().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Values().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Values().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Values().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Values().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Values()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Values().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Values()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Values().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSelectorMatchExpressionsValues) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Selector().MatchExpressions().Values().WithValue(value),
	})
}

type filterCndBuilderSpecTemplate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplate) Eq(value *Distribution_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplate) Neq(value *Distribution_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplate) Gt(value *Distribution_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplate) Gte(value *Distribution_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplate) Lt(value *Distribution_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplate) Lte(value *Distribution_Spec_Template) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplate) In(values []*Distribution_Spec_Template) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplate) NotIn(values []*Distribution_Spec_Template) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplate) compare(op gotenfilter.CompareOperator, value *Distribution_Spec_Template) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplate) Metadata() *filterCndBuilderSpecTemplateMetadata {
	return &filterCndBuilderSpecTemplateMetadata{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplate) Spec() *filterCndBuilderSpecTemplateSpec {
	return &filterCndBuilderSpecTemplateSpec{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadata) Eq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Neq(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Gt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Gte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Lt(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) Lte(value *meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadata) In(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) NotIn(values []*meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) compare(op gotenfilter.CompareOperator, value *meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadata) CreateTime() *filterCndBuilderSpecTemplateMetadataCreateTime {
	return &filterCndBuilderSpecTemplateMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) UpdateTime() *filterCndBuilderSpecTemplateMetadataUpdateTime {
	return &filterCndBuilderSpecTemplateMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) DeleteTime() *filterCndBuilderSpecTemplateMetadataDeleteTime {
	return &filterCndBuilderSpecTemplateMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Uuid() *filterCndBuilderSpecTemplateMetadataUuid {
	return &filterCndBuilderSpecTemplateMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Tags() *filterCndBuilderSpecTemplateMetadataTags {
	return &filterCndBuilderSpecTemplateMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Labels() *filterCndBuilderSpecTemplateMetadataLabels {
	return &filterCndBuilderSpecTemplateMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Annotations() *filterCndBuilderSpecTemplateMetadataAnnotations {
	return &filterCndBuilderSpecTemplateMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Generation() *filterCndBuilderSpecTemplateMetadataGeneration {
	return &filterCndBuilderSpecTemplateMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) ResourceVersion() *filterCndBuilderSpecTemplateMetadataResourceVersion {
	return &filterCndBuilderSpecTemplateMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) OwnerReferences() *filterCndBuilderSpecTemplateMetadataOwnerReferences {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Shards() *filterCndBuilderSpecTemplateMetadataShards {
	return &filterCndBuilderSpecTemplateMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Syncing() *filterCndBuilderSpecTemplateMetadataSyncing {
	return &filterCndBuilderSpecTemplateMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Lifecycle() *filterCndBuilderSpecTemplateMetadataLifecycle {
	return &filterCndBuilderSpecTemplateMetadataLifecycle{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadata) Services() *filterCndBuilderSpecTemplateMetadataServices {
	return &filterCndBuilderSpecTemplateMetadataServices{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) Eq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) Neq(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) Gt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) Gte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) Lt(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) Lte(value *timestamppb.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) In(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) NotIn(values []*timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamppb.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Metadata().Tags()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Metadata().Tags()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLabels) WithKey(key string) *mapFilterCndBuilderSpecTemplateMetadataLabels {
	return &mapFilterCndBuilderSpecTemplateMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTemplateMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderSpecTemplateMetadataAnnotations {
	return &mapFilterCndBuilderSpecTemplateMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTemplateMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Eq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Neq(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Gt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Gte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Lt(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Lte(value []*meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) In(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) NotIn(values [][]*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Contains(value *meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) ContainsAnyOf(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) ContainsAll(values []*meta.OwnerReference) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Kind() *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Version() *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Name() *filterCndBuilderSpecTemplateMetadataOwnerReferencesName {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Region() *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) Controller() *filterCndBuilderSpecTemplateMetadataOwnerReferencesController {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferences) UnsetOnDelete() *filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete {
	return &filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().UnsetOnDelete().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().UnsetOnDelete().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataOwnerReferencesUnsetOnDelete) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().OwnerReferences().UnsetOnDelete().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataShards) WithKey(key string) *mapFilterCndBuilderSpecTemplateMetadataShards {
	return &mapFilterCndBuilderSpecTemplateMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTemplateMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Eq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Neq(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Gt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Gte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Lt(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Lte(value *meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) In(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) NotIn(values []*meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) compare(op gotenfilter.CompareOperator, value *meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) OwningRegion() *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion {
	return &filterCndBuilderSpecTemplateMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataSyncing) Regions() *filterCndBuilderSpecTemplateMetadataSyncingRegions {
	return &filterCndBuilderSpecTemplateMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) Eq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) Neq(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) Gt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) Gte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) Lt(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) Lte(value *meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) In(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) NotIn(values []*meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) State() *filterCndBuilderSpecTemplateMetadataLifecycleState {
	return &filterCndBuilderSpecTemplateMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycle) BlockDeletion() *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion {
	return &filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) Eq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) Neq(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) Gt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) Gte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) Lt(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) Lte(value meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) In(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) NotIn(values []meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataServices) Eq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServices) Neq(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServices) Gt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServices) Gte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServices) Lt(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServices) Lte(value *meta.ServicesInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServices) In(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServices) NotIn(values []*meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServices) compare(op gotenfilter.CompareOperator, value *meta.ServicesInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServices) OwningService() *filterCndBuilderSpecTemplateMetadataServicesOwningService {
	return &filterCndBuilderSpecTemplateMetadataServicesOwningService{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateMetadataServices) AllowedServices() *filterCndBuilderSpecTemplateMetadataServicesAllowedServices {
	return &filterCndBuilderSpecTemplateMetadataServicesAllowedServices{builder: b.builder}
}

type filterCndBuilderSpecTemplateMetadataServicesOwningService struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().OwningService().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().OwningService().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesOwningService) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().OwningService().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateMetadataServicesAllowedServices struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateMetadataServicesAllowedServices) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Metadata().Services().AllowedServices().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpec) Eq(value *common.PodSpec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Neq(value *common.PodSpec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Gt(value *common.PodSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Gte(value *common.PodSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Lt(value *common.PodSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpec) Lte(value *common.PodSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpec) In(values []*common.PodSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) NotIn(values []*common.PodSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) compare(op gotenfilter.CompareOperator, value *common.PodSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpec) Node() *filterCndBuilderSpecTemplateSpecNode {
	return &filterCndBuilderSpecTemplateSpecNode{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) Containers() *filterCndBuilderSpecTemplateSpecContainers {
	return &filterCndBuilderSpecTemplateSpecContainers{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) HostNetwork() *filterCndBuilderSpecTemplateSpecHostNetwork {
	return &filterCndBuilderSpecTemplateSpecHostNetwork{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) RestartPolicy() *filterCndBuilderSpecTemplateSpecRestartPolicy {
	return &filterCndBuilderSpecTemplateSpecRestartPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) ImagePullSecrets() *filterCndBuilderSpecTemplateSpecImagePullSecrets {
	return &filterCndBuilderSpecTemplateSpecImagePullSecrets{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) Volumes() *filterCndBuilderSpecTemplateSpecVolumes {
	return &filterCndBuilderSpecTemplateSpecVolumes{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) Compose() *filterCndBuilderSpecTemplateSpecCompose {
	return &filterCndBuilderSpecTemplateSpecCompose{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpec) HostVolumeMounts() *filterCndBuilderSpecTemplateSpecHostVolumeMounts {
	return &filterCndBuilderSpecTemplateSpecHostVolumeMounts{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecNode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecNode) Eq(value *devices_device.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNode) Neq(value *devices_device.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecNode) Gt(value *devices_device.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNode) Gte(value *devices_device.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNode) Lt(value *devices_device.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecNode) Lte(value *devices_device.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecNode) In(values []*devices_device.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Node().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNode) NotIn(values []*devices_device.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Node().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Node().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Node().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecNode) compare(op gotenfilter.CompareOperator, value *devices_device.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Node().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainers) Eq(value []*common.PodSpec_Container) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainers) Neq(value []*common.PodSpec_Container) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainers) Gt(value []*common.PodSpec_Container) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainers) Gte(value []*common.PodSpec_Container) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainers) Lt(value []*common.PodSpec_Container) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainers) Lte(value []*common.PodSpec_Container) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainers) In(values [][]*common.PodSpec_Container) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainers) NotIn(values [][]*common.PodSpec_Container) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainers) Contains(value *common.PodSpec_Container) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainers) ContainsAnyOf(values []*common.PodSpec_Container) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainers) ContainsAll(values []*common.PodSpec_Container) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainers) compare(op gotenfilter.CompareOperator, value []*common.PodSpec_Container) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainers) Args() *filterCndBuilderSpecTemplateSpecContainersArgs {
	return &filterCndBuilderSpecTemplateSpecContainersArgs{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainers) Command() *filterCndBuilderSpecTemplateSpecContainersCommand {
	return &filterCndBuilderSpecTemplateSpecContainersCommand{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainers) Env() *filterCndBuilderSpecTemplateSpecContainersEnv {
	return &filterCndBuilderSpecTemplateSpecContainersEnv{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainers) Image() *filterCndBuilderSpecTemplateSpecContainersImage {
	return &filterCndBuilderSpecTemplateSpecContainersImage{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainers) ImagePullPolicy() *filterCndBuilderSpecTemplateSpecContainersImagePullPolicy {
	return &filterCndBuilderSpecTemplateSpecContainersImagePullPolicy{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainers) Name() *filterCndBuilderSpecTemplateSpecContainersName {
	return &filterCndBuilderSpecTemplateSpecContainersName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainers) Resources() *filterCndBuilderSpecTemplateSpecContainersResources {
	return &filterCndBuilderSpecTemplateSpecContainersResources{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainers) SecurityContext() *filterCndBuilderSpecTemplateSpecContainersSecurityContext {
	return &filterCndBuilderSpecTemplateSpecContainersSecurityContext{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainers) VolumeMounts() *filterCndBuilderSpecTemplateSpecContainersVolumeMounts {
	return &filterCndBuilderSpecTemplateSpecContainersVolumeMounts{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainers) EnvFrom() *filterCndBuilderSpecTemplateSpecContainersEnvFrom {
	return &filterCndBuilderSpecTemplateSpecContainersEnvFrom{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecContainersArgs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Args().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Args().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Args().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Args().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Args().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Args().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Args()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Args().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Args()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Args().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersArgs) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Args().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersCommand struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Command().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Command().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Command().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Command().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Command().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Command().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Command()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Command().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Command()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Command().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersCommand) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Command().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersEnv struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) Eq(value []*common.EnvVar) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) Neq(value []*common.EnvVar) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) Gt(value []*common.EnvVar) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) Gte(value []*common.EnvVar) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) Lt(value []*common.EnvVar) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) Lte(value []*common.EnvVar) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) In(values [][]*common.EnvVar) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) NotIn(values [][]*common.EnvVar) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) Contains(value *common.EnvVar) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) ContainsAnyOf(values []*common.EnvVar) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) ContainsAll(values []*common.EnvVar) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) compare(op gotenfilter.CompareOperator, value []*common.EnvVar) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) Name() *filterCndBuilderSpecTemplateSpecContainersEnvName {
	return &filterCndBuilderSpecTemplateSpecContainersEnvName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) Value() *filterCndBuilderSpecTemplateSpecContainersEnvValue {
	return &filterCndBuilderSpecTemplateSpecContainersEnvValue{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnv) ValueFrom() *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom {
	return &filterCndBuilderSpecTemplateSpecContainersEnvValueFrom{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecContainersEnvName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersEnvValue struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValue) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValue) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValue) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValue) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValue) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValue) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValue) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValue) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().Value().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValue) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValue) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().Value().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValue) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().Value().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersEnvValueFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom) Eq(value *common.EnvVarSource) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom) Neq(value *common.EnvVarSource) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom) Gt(value *common.EnvVarSource) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom) Gte(value *common.EnvVarSource) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom) Lt(value *common.EnvVarSource) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom) Lte(value *common.EnvVarSource) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom) In(values []*common.EnvVarSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom) NotIn(values []*common.EnvVarSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom) compare(op gotenfilter.CompareOperator, value *common.EnvVarSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom) ConfigMapKeyRef() *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef {
	return &filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFrom) SecretKeyRef() *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef {
	return &filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) Eq(value *common.ConfigMapKeySelector) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) Neq(value *common.ConfigMapKeySelector) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) Gt(value *common.ConfigMapKeySelector) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) Gte(value *common.ConfigMapKeySelector) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) Lt(value *common.ConfigMapKeySelector) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) Lte(value *common.ConfigMapKeySelector) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) In(values []*common.ConfigMapKeySelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) NotIn(values []*common.ConfigMapKeySelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) compare(op gotenfilter.CompareOperator, value *common.ConfigMapKeySelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) Name() *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName {
	return &filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) Key() *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey {
	return &filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRef) Optional() *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional {
	return &filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Key().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromConfigMapKeyRefOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().ConfigMapKeyRef().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) Eq(value *common.SecretKeySelector) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) Neq(value *common.SecretKeySelector) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) Gt(value *common.SecretKeySelector) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) Gte(value *common.SecretKeySelector) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) Lt(value *common.SecretKeySelector) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) Lte(value *common.SecretKeySelector) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) In(values []*common.SecretKeySelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) NotIn(values []*common.SecretKeySelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) compare(op gotenfilter.CompareOperator, value *common.SecretKeySelector) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) Name() *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName {
	return &filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) Key() *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey {
	return &filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRef) Optional() *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional {
	return &filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Key().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvValueFromSecretKeyRefOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Env().ValueFrom().SecretKeyRef().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersImage struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersImage) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersImage) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersImage) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersImage) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersImage) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersImage) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersImage) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Image().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersImage) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Image().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersImage) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Image().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersImage) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Image().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersImage) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Image().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersImagePullPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersImagePullPolicy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersImagePullPolicy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersImagePullPolicy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersImagePullPolicy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersImagePullPolicy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersImagePullPolicy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersImagePullPolicy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().ImagePullPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersImagePullPolicy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().ImagePullPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersImagePullPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().ImagePullPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersImagePullPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().ImagePullPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersImagePullPolicy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().ImagePullPolicy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersResources struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersResources) Eq(value *common.PodSpec_Container_ResourceRequirements) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResources) Neq(value *common.PodSpec_Container_ResourceRequirements) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResources) Gt(value *common.PodSpec_Container_ResourceRequirements) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResources) Gte(value *common.PodSpec_Container_ResourceRequirements) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResources) Lt(value *common.PodSpec_Container_ResourceRequirements) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResources) Lte(value *common.PodSpec_Container_ResourceRequirements) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResources) In(values []*common.PodSpec_Container_ResourceRequirements) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResources) NotIn(values []*common.PodSpec_Container_ResourceRequirements) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResources) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResources) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResources) compare(op gotenfilter.CompareOperator, value *common.PodSpec_Container_ResourceRequirements) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResources) Limits() *filterCndBuilderSpecTemplateSpecContainersResourcesLimits {
	return &filterCndBuilderSpecTemplateSpecContainersResourcesLimits{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersResources) Requests() *filterCndBuilderSpecTemplateSpecContainersResourcesRequests {
	return &filterCndBuilderSpecTemplateSpecContainersResourcesRequests{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecContainersResourcesLimits struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesLimits) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesLimits) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesLimits) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesLimits) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesLimits) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesLimits) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesLimits) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Limits().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesLimits) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Limits().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesLimits) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Limits().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesLimits) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Limits().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesLimits) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Limits().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesLimits) WithKey(key string) *mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits {
	return &mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Limits().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Limits().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Limits().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Limits().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesLimits) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Limits().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersResourcesRequests struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesRequests) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesRequests) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesRequests) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesRequests) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesRequests) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesRequests) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesRequests) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Requests().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesRequests) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Requests().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesRequests) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Requests().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesRequests) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Requests().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesRequests) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Requests().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersResourcesRequests) WithKey(key string) *mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests {
	return &mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Requests().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Requests().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Requests().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Requests().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTemplateSpecContainersResourcesRequests) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().Resources().Requests().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersSecurityContext struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContext) Eq(value *common.SecurityContext) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContext) Neq(value *common.SecurityContext) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContext) Gt(value *common.SecurityContext) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContext) Gte(value *common.SecurityContext) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContext) Lt(value *common.SecurityContext) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContext) Lte(value *common.SecurityContext) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContext) In(values []*common.SecurityContext) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().SecurityContext().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContext) NotIn(values []*common.SecurityContext) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().SecurityContext().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContext) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().SecurityContext().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContext) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().SecurityContext().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContext) compare(op gotenfilter.CompareOperator, value *common.SecurityContext) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().SecurityContext().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContext) Privileged() *filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged {
	return &filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().SecurityContext().Privileged().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().SecurityContext().Privileged().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().SecurityContext().Privileged().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().SecurityContext().Privileged().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersSecurityContextPrivileged) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().SecurityContext().Privileged().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersVolumeMounts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) Eq(value []*common.VolumeMount) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) Neq(value []*common.VolumeMount) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) Gt(value []*common.VolumeMount) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) Gte(value []*common.VolumeMount) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) Lt(value []*common.VolumeMount) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) Lte(value []*common.VolumeMount) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) In(values [][]*common.VolumeMount) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) NotIn(values [][]*common.VolumeMount) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) Contains(value *common.VolumeMount) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) ContainsAnyOf(values []*common.VolumeMount) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) ContainsAll(values []*common.VolumeMount) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) compare(op gotenfilter.CompareOperator, value []*common.VolumeMount) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) Name() *filterCndBuilderSpecTemplateSpecContainersVolumeMountsName {
	return &filterCndBuilderSpecTemplateSpecContainersVolumeMountsName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) ReadOnly() *filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly {
	return &filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) MountPath() *filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath {
	return &filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMounts) SubPath() *filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath {
	return &filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecContainersVolumeMountsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().ReadOnly().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().ReadOnly().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().ReadOnly().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().ReadOnly().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsReadOnly) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().ReadOnly().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().MountPath().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().MountPath().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().MountPath().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().MountPath().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsMountPath) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().MountPath().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().SubPath().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().SubPath().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().SubPath().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().SubPath().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersVolumeMountsSubPath) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().VolumeMounts().SubPath().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersEnvFrom struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) Eq(value *common.EnvFromSource) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) Neq(value *common.EnvFromSource) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) Gt(value *common.EnvFromSource) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) Gte(value *common.EnvFromSource) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) Lt(value *common.EnvFromSource) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) Lte(value *common.EnvFromSource) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) In(values []*common.EnvFromSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) NotIn(values []*common.EnvFromSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) compare(op gotenfilter.CompareOperator, value *common.EnvFromSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) Prefix() *filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix {
	return &filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) ConfigMapRef() *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef {
	return &filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFrom) SecretRef() *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef {
	return &filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().Prefix().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().Prefix().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().Prefix().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().Prefix().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromPrefix) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().Prefix().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef) Eq(value *common.ConfigMapEnvSource) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef) Neq(value *common.ConfigMapEnvSource) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef) Gt(value *common.ConfigMapEnvSource) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef) Gte(value *common.ConfigMapEnvSource) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef) Lt(value *common.ConfigMapEnvSource) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef) Lte(value *common.ConfigMapEnvSource) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef) In(values []*common.ConfigMapEnvSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef) NotIn(values []*common.ConfigMapEnvSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef) compare(op gotenfilter.CompareOperator, value *common.ConfigMapEnvSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef) Name() *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName {
	return &filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRef) Optional() *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional {
	return &filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromConfigMapRefOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().ConfigMapRef().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef) Eq(value *common.SecretEnvSource) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef) Neq(value *common.SecretEnvSource) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef) Gt(value *common.SecretEnvSource) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef) Gte(value *common.SecretEnvSource) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef) Lt(value *common.SecretEnvSource) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef) Lte(value *common.SecretEnvSource) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef) In(values []*common.SecretEnvSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef) NotIn(values []*common.SecretEnvSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef) compare(op gotenfilter.CompareOperator, value *common.SecretEnvSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef) Name() *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName {
	return &filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRef) Optional() *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional {
	return &filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecContainersEnvFromSecretRefOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Containers().EnvFrom().SecretRef().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecHostNetwork struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecHostNetwork) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostNetwork) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostNetwork) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostNetwork) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostNetwork) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostNetwork) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostNetwork) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostNetwork().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostNetwork) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostNetwork().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostNetwork) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostNetwork().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostNetwork) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostNetwork().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostNetwork) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostNetwork().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecRestartPolicy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecRestartPolicy) Eq(value common.PodSpec_RestartPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecRestartPolicy) Neq(value common.PodSpec_RestartPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecRestartPolicy) Gt(value common.PodSpec_RestartPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecRestartPolicy) Gte(value common.PodSpec_RestartPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecRestartPolicy) Lt(value common.PodSpec_RestartPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecRestartPolicy) Lte(value common.PodSpec_RestartPolicy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecRestartPolicy) In(values []common.PodSpec_RestartPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().RestartPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecRestartPolicy) NotIn(values []common.PodSpec_RestartPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().RestartPolicy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecRestartPolicy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().RestartPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecRestartPolicy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().RestartPolicy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecRestartPolicy) compare(op gotenfilter.CompareOperator, value common.PodSpec_RestartPolicy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().RestartPolicy().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecImagePullSecrets struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) Eq(value []*common.LocalObjectReferenceSecret) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) Neq(value []*common.LocalObjectReferenceSecret) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) Gt(value []*common.LocalObjectReferenceSecret) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) Gte(value []*common.LocalObjectReferenceSecret) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) Lt(value []*common.LocalObjectReferenceSecret) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) Lte(value []*common.LocalObjectReferenceSecret) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) In(values [][]*common.LocalObjectReferenceSecret) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) NotIn(values [][]*common.LocalObjectReferenceSecret) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) Contains(value *common.LocalObjectReferenceSecret) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) ContainsAnyOf(values []*common.LocalObjectReferenceSecret) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) ContainsAll(values []*common.LocalObjectReferenceSecret) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) compare(op gotenfilter.CompareOperator, value []*common.LocalObjectReferenceSecret) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecrets) Name() *filterCndBuilderSpecTemplateSpecImagePullSecretsName {
	return &filterCndBuilderSpecTemplateSpecImagePullSecretsName{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecImagePullSecretsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecretsName) Eq(value *secrets_secret.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecretsName) Neq(value *secrets_secret.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecretsName) Gt(value *secrets_secret.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecretsName) Gte(value *secrets_secret.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecretsName) Lt(value *secrets_secret.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecretsName) Lte(value *secrets_secret.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecretsName) In(values []*secrets_secret.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecretsName) NotIn(values []*secrets_secret.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecretsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecretsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecImagePullSecretsName) compare(op gotenfilter.CompareOperator, value *secrets_secret.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().ImagePullSecrets().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) Eq(value []*common.Volume) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) Neq(value []*common.Volume) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) Gt(value []*common.Volume) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) Gte(value []*common.Volume) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) Lt(value []*common.Volume) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) Lte(value []*common.Volume) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) In(values [][]*common.Volume) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) NotIn(values [][]*common.Volume) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) Contains(value *common.Volume) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) ContainsAnyOf(values []*common.Volume) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) ContainsAll(values []*common.Volume) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) compare(op gotenfilter.CompareOperator, value []*common.Volume) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) Name() *filterCndBuilderSpecTemplateSpecVolumesName {
	return &filterCndBuilderSpecTemplateSpecVolumesName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) HostPath() *filterCndBuilderSpecTemplateSpecVolumesHostPath {
	return &filterCndBuilderSpecTemplateSpecVolumesHostPath{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) Secret() *filterCndBuilderSpecTemplateSpecVolumesSecret {
	return &filterCndBuilderSpecTemplateSpecVolumesSecret{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumes) ConfigMap() *filterCndBuilderSpecTemplateSpecVolumesConfigMap {
	return &filterCndBuilderSpecTemplateSpecVolumesConfigMap{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecVolumesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesHostPath struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPath) Eq(value *common.HostPathVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPath) Neq(value *common.HostPathVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPath) Gt(value *common.HostPathVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPath) Gte(value *common.HostPathVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPath) Lt(value *common.HostPathVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPath) Lte(value *common.HostPathVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPath) In(values []*common.HostPathVolumeSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPath) NotIn(values []*common.HostPathVolumeSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPath) compare(op gotenfilter.CompareOperator, value *common.HostPathVolumeSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPath) Path() *filterCndBuilderSpecTemplateSpecVolumesHostPathPath {
	return &filterCndBuilderSpecTemplateSpecVolumesHostPathPath{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPath) Type() *filterCndBuilderSpecTemplateSpecVolumesHostPathType {
	return &filterCndBuilderSpecTemplateSpecVolumesHostPathType{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecVolumesHostPathPath struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathPath) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathPath) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathPath) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathPath) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathPath) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathPath) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathPath) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().Path().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathPath) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().Path().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().Path().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().Path().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathPath) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().Path().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesHostPathType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathType) Eq(value common.HostPathVolumeSource_Type) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathType) Neq(value common.HostPathVolumeSource_Type) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathType) Gt(value common.HostPathVolumeSource_Type) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathType) Gte(value common.HostPathVolumeSource_Type) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathType) Lt(value common.HostPathVolumeSource_Type) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathType) Lte(value common.HostPathVolumeSource_Type) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathType) In(values []common.HostPathVolumeSource_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathType) NotIn(values []common.HostPathVolumeSource_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesHostPathType) compare(op gotenfilter.CompareOperator, value common.HostPathVolumeSource_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().HostPath().Type().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesSecret struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) Eq(value *common.SecretVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) Neq(value *common.SecretVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) Gt(value *common.SecretVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) Gte(value *common.SecretVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) Lt(value *common.SecretVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) Lte(value *common.SecretVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) In(values []*common.SecretVolumeSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) NotIn(values []*common.SecretVolumeSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) compare(op gotenfilter.CompareOperator, value *common.SecretVolumeSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) SecretName() *filterCndBuilderSpecTemplateSpecVolumesSecretSecretName {
	return &filterCndBuilderSpecTemplateSpecVolumesSecretSecretName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) Items() *filterCndBuilderSpecTemplateSpecVolumesSecretItems {
	return &filterCndBuilderSpecTemplateSpecVolumesSecretItems{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) DefaultMode() *filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode {
	return &filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecret) Optional() *filterCndBuilderSpecTemplateSpecVolumesSecretOptional {
	return &filterCndBuilderSpecTemplateSpecVolumesSecretOptional{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecVolumesSecretSecretName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretSecretName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretSecretName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretSecretName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretSecretName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretSecretName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretSecretName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretSecretName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().SecretName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretSecretName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().SecretName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretSecretName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().SecretName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretSecretName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().SecretName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretSecretName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().SecretName().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesSecretItems struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) Eq(value []*common.KeyToPath) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) Neq(value []*common.KeyToPath) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) Gt(value []*common.KeyToPath) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) Gte(value []*common.KeyToPath) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) Lt(value []*common.KeyToPath) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) Lte(value []*common.KeyToPath) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) In(values [][]*common.KeyToPath) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) NotIn(values [][]*common.KeyToPath) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) Contains(value *common.KeyToPath) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) ContainsAnyOf(values []*common.KeyToPath) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) ContainsAll(values []*common.KeyToPath) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) compare(op gotenfilter.CompareOperator, value []*common.KeyToPath) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) Key() *filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey {
	return &filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) Path() *filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath {
	return &filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItems) Mode() *filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode {
	return &filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Key().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Path().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Path().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Path().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Path().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsPath) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Path().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretItemsMode) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Items().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().DefaultMode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().DefaultMode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().DefaultMode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().DefaultMode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretDefaultMode) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().DefaultMode().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesSecretOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesSecretOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().Secret().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesConfigMap struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) Eq(value *common.ConfigMapVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) Neq(value *common.ConfigMapVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) Gt(value *common.ConfigMapVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) Gte(value *common.ConfigMapVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) Lt(value *common.ConfigMapVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) Lte(value *common.ConfigMapVolumeSource) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) In(values []*common.ConfigMapVolumeSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) NotIn(values []*common.ConfigMapVolumeSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) compare(op gotenfilter.CompareOperator, value *common.ConfigMapVolumeSource) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) Name() *filterCndBuilderSpecTemplateSpecVolumesConfigMapName {
	return &filterCndBuilderSpecTemplateSpecVolumesConfigMapName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) Items() *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems {
	return &filterCndBuilderSpecTemplateSpecVolumesConfigMapItems{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) DefaultMode() *filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode {
	return &filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMap) Optional() *filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional {
	return &filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecVolumesConfigMapName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesConfigMapItems struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) Eq(value []*common.KeyToPath) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) Neq(value []*common.KeyToPath) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) Gt(value []*common.KeyToPath) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) Gte(value []*common.KeyToPath) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) Lt(value []*common.KeyToPath) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) Lte(value []*common.KeyToPath) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) In(values [][]*common.KeyToPath) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) NotIn(values [][]*common.KeyToPath) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) Contains(value *common.KeyToPath) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) ContainsAnyOf(values []*common.KeyToPath) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) ContainsAll(values []*common.KeyToPath) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) compare(op gotenfilter.CompareOperator, value []*common.KeyToPath) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) Key() *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey {
	return &filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) Path() *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath {
	return &filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItems) Mode() *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode {
	return &filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Key().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Key().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Key().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Path().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Path().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Path().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Path().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsPath) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Path().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapItemsMode) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Items().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().DefaultMode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().DefaultMode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().DefaultMode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().DefaultMode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapDefaultMode) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().DefaultMode().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Optional().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Optional().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecVolumesConfigMapOptional) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Volumes().ConfigMap().Optional().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecCompose struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecCompose) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecCompose) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecCompose) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecCompose) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecCompose) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecCompose) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecCompose) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Compose().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecCompose) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().Compose().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecCompose) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Compose().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecCompose) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().Compose().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecCompose) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().Compose().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecHostVolumeMounts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) Eq(value []*common.VolumeMount) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) Neq(value []*common.VolumeMount) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) Gt(value []*common.VolumeMount) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) Gte(value []*common.VolumeMount) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) Lt(value []*common.VolumeMount) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) Lte(value []*common.VolumeMount) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) In(values [][]*common.VolumeMount) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) NotIn(values [][]*common.VolumeMount) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) Contains(value *common.VolumeMount) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().FieldPath(),
		Value:     NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) ContainsAnyOf(values []*common.VolumeMount) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) ContainsAll(values []*common.VolumeMount) *FilterBuilder {
	pathSelector := NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts()
	itemValues := make([]Distribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) compare(op gotenfilter.CompareOperator, value []*common.VolumeMount) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) Name() *filterCndBuilderSpecTemplateSpecHostVolumeMountsName {
	return &filterCndBuilderSpecTemplateSpecHostVolumeMountsName{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) ReadOnly() *filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly {
	return &filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) MountPath() *filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath {
	return &filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath{builder: b.builder}
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMounts) SubPath() *filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath {
	return &filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath{builder: b.builder}
}

type filterCndBuilderSpecTemplateSpecHostVolumeMountsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().Name().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().ReadOnly().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().ReadOnly().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().ReadOnly().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().ReadOnly().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsReadOnly) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().ReadOnly().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().MountPath().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().MountPath().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().MountPath().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().MountPath().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsMountPath) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().MountPath().WithValue(value),
	})
}

type filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().SubPath().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().SubPath().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().SubPath().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().SubPath().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTemplateSpecHostVolumeMountsSubPath) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Spec().Template().Spec().HostVolumeMounts().SubPath().WithValue(value),
	})
}

type filterCndBuilderStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatus) Eq(value *Distribution_Status) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatus) Neq(value *Distribution_Status) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatus) Gt(value *Distribution_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatus) Gte(value *Distribution_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatus) Lt(value *Distribution_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatus) Lte(value *Distribution_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatus) In(values []*Distribution_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) NotIn(values []*Distribution_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Distribution_FieldPathArrayOfValues: NewDistributionFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewDistributionFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewDistributionFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) compare(op gotenfilter.CompareOperator, value *Distribution_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                    op,
		Distribution_FieldPathValue: NewDistributionFieldPathBuilder().Status().WithValue(value),
	})
}
