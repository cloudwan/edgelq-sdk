// Code generated by protoc-gen-goten-object
// File: edgelq/applications/proto/v1alpha2/pod.proto
// DO NOT EDIT!!!

package pod

import (
	"encoding/json"
	"strings"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/common"
	distribution "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/distribution"
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha2/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &common.PodSpec{}
	_ = &distribution.Distribution{}
	_ = &project.Project{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

type Pod_FieldMask struct {
	Paths []Pod_FieldPath
}

func FullPod_FieldMask() *Pod_FieldMask {
	res := &Pod_FieldMask{}
	res.Paths = append(res.Paths, &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorSpec})
	res.Paths = append(res.Paths, &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorDistribution})
	res.Paths = append(res.Paths, &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorStatus})
	return res
}

func (fieldMask *Pod_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Pod_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Pod_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Pod_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePod_FieldPath(raw)
	})
}

func (fieldMask *Pod_FieldMask) ProtoMessage() {}

func (fieldMask *Pod_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Pod_FieldMask) Subtract(other *Pod_FieldMask) *Pod_FieldMask {
	result := &Pod_FieldMask{}
	removedSelectors := make([]bool, 6)
	otherSubMasks := map[Pod_FieldPathSelector]gotenobject.FieldMask{
		Pod_FieldPathSelectorMetadata: &meta.Meta_FieldMask{},
		Pod_FieldPathSelectorSpec:     &common.PodSpec_FieldMask{},
		Pod_FieldPathSelectorStatus:   &Pod_Status_FieldMask{},
	}
	mySubMasks := map[Pod_FieldPathSelector]gotenobject.FieldMask{
		Pod_FieldPathSelectorMetadata: &meta.Meta_FieldMask{},
		Pod_FieldPathSelectorSpec:     &common.PodSpec_FieldMask{},
		Pod_FieldPathSelectorStatus:   &Pod_Status_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Pod_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Pod_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Pod_FieldTerminalPath); ok {
					switch tp.selector {
					case Pod_FieldPathSelectorMetadata:
						mySubMasks[Pod_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case Pod_FieldPathSelectorSpec:
						mySubMasks[Pod_FieldPathSelectorSpec] = common.FullPodSpec_FieldMask()
					case Pod_FieldPathSelectorStatus:
						mySubMasks[Pod_FieldPathSelectorStatus] = FullPod_Status_FieldMask()
					}
				} else if tp, ok := path.(*Pod_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Pod_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Pod_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Pod_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Pod_FieldMask) FilterInputFields() *Pod_FieldMask {
	result := &Pod_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Pod_FieldPathSelectorMetadata:
			if _, ok := path.(*Pod_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Pod_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Pod_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Pod_FieldSubPath{selector: Pod_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Pod_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Pod_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Pod_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePod_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Pod_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Pod_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Pod_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Pod_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Pod_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Pod_FieldMask) AppendPath(path Pod_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Pod_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Pod_FieldPath))
}

func (fieldMask *Pod_FieldMask) GetPaths() []Pod_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Pod_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Pod_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePod_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Pod_FieldMask) Set(target, source *Pod) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Pod_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Pod), source.(*Pod))
}

func (fieldMask *Pod_FieldMask) Project(source *Pod) *Pod {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Pod{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	specMask := &common.PodSpec_FieldMask{}
	wholeSpecAccepted := false
	statusMask := &Pod_Status_FieldMask{}
	wholeStatusAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Pod_FieldTerminalPath:
			switch tp.selector {
			case Pod_FieldPathSelectorName:
				result.Name = source.Name
			case Pod_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case Pod_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case Pod_FieldPathSelectorSpec:
				result.Spec = source.Spec
				wholeSpecAccepted = true
			case Pod_FieldPathSelectorDistribution:
				result.Distribution = source.Distribution
			case Pod_FieldPathSelectorStatus:
				result.Status = source.Status
				wholeStatusAccepted = true
			}
		case *Pod_FieldSubPath:
			switch tp.selector {
			case Pod_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case Pod_FieldPathSelectorSpec:
				specMask.AppendPath(tp.subPath.(common.PodSpec_FieldPath))
			case Pod_FieldPathSelectorStatus:
				statusMask.AppendPath(tp.subPath.(PodStatus_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeSpecAccepted == false && len(specMask.Paths) > 0 {
		result.Spec = specMask.Project(source.GetSpec())
	}
	if wholeStatusAccepted == false && len(statusMask.Paths) > 0 {
		result.Status = statusMask.Project(source.GetStatus())
	}
	return result
}

func (fieldMask *Pod_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Pod))
}

func (fieldMask *Pod_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Pod_Status_FieldMask struct {
	Paths []PodStatus_FieldPath
}

func FullPod_Status_FieldMask() *Pod_Status_FieldMask {
	res := &Pod_Status_FieldMask{}
	res.Paths = append(res.Paths, &PodStatus_FieldTerminalPath{selector: PodStatus_FieldPathSelectorPhase})
	res.Paths = append(res.Paths, &PodStatus_FieldTerminalPath{selector: PodStatus_FieldPathSelectorContainerStatuses})
	res.Paths = append(res.Paths, &PodStatus_FieldTerminalPath{selector: PodStatus_FieldPathSelectorError})
	return res
}

func (fieldMask *Pod_Status_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Pod_Status_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PodStatus_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Pod_Status_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePodStatus_FieldPath(raw)
	})
}

func (fieldMask *Pod_Status_FieldMask) ProtoMessage() {}

func (fieldMask *Pod_Status_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Pod_Status_FieldMask) Subtract(other *Pod_Status_FieldMask) *Pod_Status_FieldMask {
	result := &Pod_Status_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[PodStatus_FieldPathSelector]gotenobject.FieldMask{
		PodStatus_FieldPathSelectorContainerStatuses: &Pod_Status_Container_FieldMask{},
	}
	mySubMasks := map[PodStatus_FieldPathSelector]gotenobject.FieldMask{
		PodStatus_FieldPathSelectorContainerStatuses: &Pod_Status_Container_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PodStatus_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *PodStatus_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*PodStatus_FieldTerminalPath); ok {
					switch tp.selector {
					case PodStatus_FieldPathSelectorContainerStatuses:
						mySubMasks[PodStatus_FieldPathSelectorContainerStatuses] = FullPod_Status_Container_FieldMask()
					}
				} else if tp, ok := path.(*PodStatus_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &PodStatus_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Pod_Status_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Pod_Status_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Pod_Status_FieldMask) FilterInputFields() *Pod_Status_FieldMask {
	result := &Pod_Status_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Pod_Status_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Pod_Status_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PodStatus_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePodStatus_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Pod_Status_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Pod_Status_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Pod_Status_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Pod_Status_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Pod_Status_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Pod_Status_FieldMask) AppendPath(path PodStatus_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Pod_Status_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PodStatus_FieldPath))
}

func (fieldMask *Pod_Status_FieldMask) GetPaths() []PodStatus_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Pod_Status_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Pod_Status_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePodStatus_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Pod_Status_FieldMask) Set(target, source *Pod_Status) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Pod_Status_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Pod_Status), source.(*Pod_Status))
}

func (fieldMask *Pod_Status_FieldMask) Project(source *Pod_Status) *Pod_Status {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Pod_Status{}
	containerStatusesMask := &Pod_Status_Container_FieldMask{}
	wholeContainerStatusesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PodStatus_FieldTerminalPath:
			switch tp.selector {
			case PodStatus_FieldPathSelectorPhase:
				result.Phase = source.Phase
			case PodStatus_FieldPathSelectorContainerStatuses:
				result.ContainerStatuses = source.ContainerStatuses
				wholeContainerStatusesAccepted = true
			case PodStatus_FieldPathSelectorError:
				result.Error = source.Error
			}
		case *PodStatus_FieldSubPath:
			switch tp.selector {
			case PodStatus_FieldPathSelectorContainerStatuses:
				containerStatusesMask.AppendPath(tp.subPath.(PodStatusContainer_FieldPath))
			}
		}
	}
	if wholeContainerStatusesAccepted == false && len(containerStatusesMask.Paths) > 0 {
		for _, sourceItem := range source.GetContainerStatuses() {
			result.ContainerStatuses = append(result.ContainerStatuses, containerStatusesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Pod_Status_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Pod_Status))
}

func (fieldMask *Pod_Status_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Pod_Status_Container_FieldMask struct {
	Paths []PodStatusContainer_FieldPath
}

func FullPod_Status_Container_FieldMask() *Pod_Status_Container_FieldMask {
	res := &Pod_Status_Container_FieldMask{}
	res.Paths = append(res.Paths, &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorName})
	res.Paths = append(res.Paths, &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorState})
	res.Paths = append(res.Paths, &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorWaiting})
	res.Paths = append(res.Paths, &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorRunning})
	res.Paths = append(res.Paths, &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorTerminated})
	return res
}

func (fieldMask *Pod_Status_Container_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Pod_Status_Container_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PodStatusContainer_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Pod_Status_Container_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePodStatusContainer_FieldPath(raw)
	})
}

func (fieldMask *Pod_Status_Container_FieldMask) ProtoMessage() {}

func (fieldMask *Pod_Status_Container_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Pod_Status_Container_FieldMask) Subtract(other *Pod_Status_Container_FieldMask) *Pod_Status_Container_FieldMask {
	result := &Pod_Status_Container_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[PodStatusContainer_FieldPathSelector]gotenobject.FieldMask{
		PodStatusContainer_FieldPathSelectorWaiting:    &Pod_Status_Container_StateWaiting_FieldMask{},
		PodStatusContainer_FieldPathSelectorRunning:    &Pod_Status_Container_StateRunning_FieldMask{},
		PodStatusContainer_FieldPathSelectorTerminated: &Pod_Status_Container_StateTerminated_FieldMask{},
	}
	mySubMasks := map[PodStatusContainer_FieldPathSelector]gotenobject.FieldMask{
		PodStatusContainer_FieldPathSelectorWaiting:    &Pod_Status_Container_StateWaiting_FieldMask{},
		PodStatusContainer_FieldPathSelectorRunning:    &Pod_Status_Container_StateRunning_FieldMask{},
		PodStatusContainer_FieldPathSelectorTerminated: &Pod_Status_Container_StateTerminated_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PodStatusContainer_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *PodStatusContainer_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*PodStatusContainer_FieldTerminalPath); ok {
					switch tp.selector {
					case PodStatusContainer_FieldPathSelectorWaiting:
						mySubMasks[PodStatusContainer_FieldPathSelectorWaiting] = FullPod_Status_Container_StateWaiting_FieldMask()
					case PodStatusContainer_FieldPathSelectorRunning:
						mySubMasks[PodStatusContainer_FieldPathSelectorRunning] = FullPod_Status_Container_StateRunning_FieldMask()
					case PodStatusContainer_FieldPathSelectorTerminated:
						mySubMasks[PodStatusContainer_FieldPathSelectorTerminated] = FullPod_Status_Container_StateTerminated_FieldMask()
					}
				} else if tp, ok := path.(*PodStatusContainer_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &PodStatusContainer_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Pod_Status_Container_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Pod_Status_Container_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Pod_Status_Container_FieldMask) FilterInputFields() *Pod_Status_Container_FieldMask {
	result := &Pod_Status_Container_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Pod_Status_Container_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Pod_Status_Container_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PodStatusContainer_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePodStatusContainer_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Pod_Status_Container_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Pod_Status_Container_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Pod_Status_Container_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Pod_Status_Container_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Pod_Status_Container_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Pod_Status_Container_FieldMask) AppendPath(path PodStatusContainer_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Pod_Status_Container_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PodStatusContainer_FieldPath))
}

func (fieldMask *Pod_Status_Container_FieldMask) GetPaths() []PodStatusContainer_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Pod_Status_Container_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Pod_Status_Container_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePodStatusContainer_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Pod_Status_Container_FieldMask) Set(target, source *Pod_Status_Container) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Pod_Status_Container_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Pod_Status_Container), source.(*Pod_Status_Container))
}

func (fieldMask *Pod_Status_Container_FieldMask) Project(source *Pod_Status_Container) *Pod_Status_Container {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Pod_Status_Container{}
	waitingMask := &Pod_Status_Container_StateWaiting_FieldMask{}
	wholeWaitingAccepted := false
	runningMask := &Pod_Status_Container_StateRunning_FieldMask{}
	wholeRunningAccepted := false
	terminatedMask := &Pod_Status_Container_StateTerminated_FieldMask{}
	wholeTerminatedAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PodStatusContainer_FieldTerminalPath:
			switch tp.selector {
			case PodStatusContainer_FieldPathSelectorName:
				result.Name = source.Name
			case PodStatusContainer_FieldPathSelectorState:
				result.State = source.State
			case PodStatusContainer_FieldPathSelectorWaiting:
				result.Waiting = source.Waiting
				wholeWaitingAccepted = true
			case PodStatusContainer_FieldPathSelectorRunning:
				result.Running = source.Running
				wholeRunningAccepted = true
			case PodStatusContainer_FieldPathSelectorTerminated:
				result.Terminated = source.Terminated
				wholeTerminatedAccepted = true
			}
		case *PodStatusContainer_FieldSubPath:
			switch tp.selector {
			case PodStatusContainer_FieldPathSelectorWaiting:
				waitingMask.AppendPath(tp.subPath.(PodStatusContainerStateWaiting_FieldPath))
			case PodStatusContainer_FieldPathSelectorRunning:
				runningMask.AppendPath(tp.subPath.(PodStatusContainerStateRunning_FieldPath))
			case PodStatusContainer_FieldPathSelectorTerminated:
				terminatedMask.AppendPath(tp.subPath.(PodStatusContainerStateTerminated_FieldPath))
			}
		}
	}
	if wholeWaitingAccepted == false && len(waitingMask.Paths) > 0 {
		result.Waiting = waitingMask.Project(source.GetWaiting())
	}
	if wholeRunningAccepted == false && len(runningMask.Paths) > 0 {
		result.Running = runningMask.Project(source.GetRunning())
	}
	if wholeTerminatedAccepted == false && len(terminatedMask.Paths) > 0 {
		result.Terminated = terminatedMask.Project(source.GetTerminated())
	}
	return result
}

func (fieldMask *Pod_Status_Container_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Pod_Status_Container))
}

func (fieldMask *Pod_Status_Container_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Pod_Status_Container_StateWaiting_FieldMask struct {
	Paths []PodStatusContainerStateWaiting_FieldPath
}

func FullPod_Status_Container_StateWaiting_FieldMask() *Pod_Status_Container_StateWaiting_FieldMask {
	res := &Pod_Status_Container_StateWaiting_FieldMask{}
	res.Paths = append(res.Paths, &PodStatusContainerStateWaiting_FieldTerminalPath{selector: PodStatusContainerStateWaiting_FieldPathSelectorReason})
	res.Paths = append(res.Paths, &PodStatusContainerStateWaiting_FieldTerminalPath{selector: PodStatusContainerStateWaiting_FieldPathSelectorMessage})
	return res
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PodStatusContainerStateWaiting_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePodStatusContainerStateWaiting_FieldPath(raw)
	})
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) ProtoMessage() {}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) Subtract(other *Pod_Status_Container_StateWaiting_FieldMask) *Pod_Status_Container_StateWaiting_FieldMask {
	result := &Pod_Status_Container_StateWaiting_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PodStatusContainerStateWaiting_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Pod_Status_Container_StateWaiting_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) FilterInputFields() *Pod_Status_Container_StateWaiting_FieldMask {
	result := &Pod_Status_Container_StateWaiting_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PodStatusContainerStateWaiting_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePodStatusContainerStateWaiting_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Pod_Status_Container_StateWaiting_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Pod_Status_Container_StateWaiting_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) AppendPath(path PodStatusContainerStateWaiting_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PodStatusContainerStateWaiting_FieldPath))
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) GetPaths() []PodStatusContainerStateWaiting_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePodStatusContainerStateWaiting_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) Set(target, source *Pod_Status_Container_StateWaiting) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Pod_Status_Container_StateWaiting), source.(*Pod_Status_Container_StateWaiting))
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) Project(source *Pod_Status_Container_StateWaiting) *Pod_Status_Container_StateWaiting {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Pod_Status_Container_StateWaiting{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PodStatusContainerStateWaiting_FieldTerminalPath:
			switch tp.selector {
			case PodStatusContainerStateWaiting_FieldPathSelectorReason:
				result.Reason = source.Reason
			case PodStatusContainerStateWaiting_FieldPathSelectorMessage:
				result.Message = source.Message
			}
		}
	}
	return result
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Pod_Status_Container_StateWaiting))
}

func (fieldMask *Pod_Status_Container_StateWaiting_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Pod_Status_Container_StateRunning_FieldMask struct {
	Paths []PodStatusContainerStateRunning_FieldPath
}

func FullPod_Status_Container_StateRunning_FieldMask() *Pod_Status_Container_StateRunning_FieldMask {
	res := &Pod_Status_Container_StateRunning_FieldMask{}
	res.Paths = append(res.Paths, &PodStatusContainerStateRunning_FieldTerminalPath{selector: PodStatusContainerStateRunning_FieldPathSelectorStartedAt})
	return res
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PodStatusContainerStateRunning_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePodStatusContainerStateRunning_FieldPath(raw)
	})
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) ProtoMessage() {}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) Subtract(other *Pod_Status_Container_StateRunning_FieldMask) *Pod_Status_Container_StateRunning_FieldMask {
	result := &Pod_Status_Container_StateRunning_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PodStatusContainerStateRunning_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Pod_Status_Container_StateRunning_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) FilterInputFields() *Pod_Status_Container_StateRunning_FieldMask {
	result := &Pod_Status_Container_StateRunning_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PodStatusContainerStateRunning_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePodStatusContainerStateRunning_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Pod_Status_Container_StateRunning_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Pod_Status_Container_StateRunning_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) AppendPath(path PodStatusContainerStateRunning_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PodStatusContainerStateRunning_FieldPath))
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) GetPaths() []PodStatusContainerStateRunning_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePodStatusContainerStateRunning_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) Set(target, source *Pod_Status_Container_StateRunning) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Pod_Status_Container_StateRunning), source.(*Pod_Status_Container_StateRunning))
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) Project(source *Pod_Status_Container_StateRunning) *Pod_Status_Container_StateRunning {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Pod_Status_Container_StateRunning{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PodStatusContainerStateRunning_FieldTerminalPath:
			switch tp.selector {
			case PodStatusContainerStateRunning_FieldPathSelectorStartedAt:
				result.StartedAt = source.StartedAt
			}
		}
	}
	return result
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Pod_Status_Container_StateRunning))
}

func (fieldMask *Pod_Status_Container_StateRunning_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Pod_Status_Container_StateTerminated_FieldMask struct {
	Paths []PodStatusContainerStateTerminated_FieldPath
}

func FullPod_Status_Container_StateTerminated_FieldMask() *Pod_Status_Container_StateTerminated_FieldMask {
	res := &Pod_Status_Container_StateTerminated_FieldMask{}
	res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorExitCode})
	res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorSignal})
	res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorReason})
	res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorMessage})
	res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorStartedAt})
	res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt})
	res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorContainerId})
	return res
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PodStatusContainerStateTerminated_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePodStatusContainerStateTerminated_FieldPath(raw)
	})
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) ProtoMessage() {}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) Subtract(other *Pod_Status_Container_StateTerminated_FieldMask) *Pod_Status_Container_StateTerminated_FieldMask {
	result := &Pod_Status_Container_StateTerminated_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PodStatusContainerStateTerminated_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Pod_Status_Container_StateTerminated_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) FilterInputFields() *Pod_Status_Container_StateTerminated_FieldMask {
	result := &Pod_Status_Container_StateTerminated_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PodStatusContainerStateTerminated_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePodStatusContainerStateTerminated_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Pod_Status_Container_StateTerminated_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Pod_Status_Container_StateTerminated_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) AppendPath(path PodStatusContainerStateTerminated_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PodStatusContainerStateTerminated_FieldPath))
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) GetPaths() []PodStatusContainerStateTerminated_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePodStatusContainerStateTerminated_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) Set(target, source *Pod_Status_Container_StateTerminated) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Pod_Status_Container_StateTerminated), source.(*Pod_Status_Container_StateTerminated))
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) Project(source *Pod_Status_Container_StateTerminated) *Pod_Status_Container_StateTerminated {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Pod_Status_Container_StateTerminated{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PodStatusContainerStateTerminated_FieldTerminalPath:
			switch tp.selector {
			case PodStatusContainerStateTerminated_FieldPathSelectorExitCode:
				result.ExitCode = source.ExitCode
			case PodStatusContainerStateTerminated_FieldPathSelectorSignal:
				result.Signal = source.Signal
			case PodStatusContainerStateTerminated_FieldPathSelectorReason:
				result.Reason = source.Reason
			case PodStatusContainerStateTerminated_FieldPathSelectorMessage:
				result.Message = source.Message
			case PodStatusContainerStateTerminated_FieldPathSelectorStartedAt:
				result.StartedAt = source.StartedAt
			case PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt:
				result.FinishedAt = source.FinishedAt
			case PodStatusContainerStateTerminated_FieldPathSelectorContainerId:
				result.ContainerId = source.ContainerId
			}
		}
	}
	return result
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Pod_Status_Container_StateTerminated))
}

func (fieldMask *Pod_Status_Container_StateTerminated_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
