// Code generated by protoc-gen-goten-go
// File: edgelq/applications/proto/v1/common.proto
// DO NOT EDIT!!!

package common

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	api "github.com/cloudwan/edgelq-sdk/common/api"
	devices_device "github.com/cloudwan/edgelq-sdk/devices/resources/v1/device"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1/secret"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &api.HealthCheckSpec{}
	_ = &devices_device.Device{}
	_ = &secrets_secret.Secret{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PodSpec_RestartPolicy int32

const (
	PodSpec_RESTART_POLICY_UNSPECIFIED PodSpec_RestartPolicy = 0
	PodSpec_ALWAYS                     PodSpec_RestartPolicy = 1
	PodSpec_ON_FAILURE                 PodSpec_RestartPolicy = 2
	PodSpec_NEVER                      PodSpec_RestartPolicy = 3
)

var (
	PodSpec_RestartPolicy_name = map[int32]string{
		0: "RESTART_POLICY_UNSPECIFIED",
		1: "ALWAYS",
		2: "ON_FAILURE",
		3: "NEVER",
	}

	PodSpec_RestartPolicy_value = map[string]int32{
		"RESTART_POLICY_UNSPECIFIED": 0,
		"ALWAYS":                     1,
		"ON_FAILURE":                 2,
		"NEVER":                      3,
	}
)

func (x PodSpec_RestartPolicy) Enum() *PodSpec_RestartPolicy {
	p := new(PodSpec_RestartPolicy)
	*p = x
	return p
}

func (x PodSpec_RestartPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (PodSpec_RestartPolicy) Descriptor() preflect.EnumDescriptor {
	return edgelq_applications_proto_v1_common_proto_enumTypes[0].Descriptor()
}

func (PodSpec_RestartPolicy) Type() preflect.EnumType {
	return &edgelq_applications_proto_v1_common_proto_enumTypes[0]
}

func (x PodSpec_RestartPolicy) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use PodSpec_RestartPolicy.ProtoReflect.Descriptor instead.
func (PodSpec_RestartPolicy) EnumDescriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{0, 0}
}

type HostPathVolumeSource_Type int32

const (
	// TYPE_UNSPECIFIED is not used. Type must be set to one of the concreate
	// values.
	HostPathVolumeSource_TYPE_UNSPECIFIED HostPathVolumeSource_Type = 0
	// If nothing exists at the given path, an empty directory will be created
	// there as needed with permission set to 0755, having the same group and
	// ownership with Droplet.
	HostPathVolumeSource_DIRECTORY_OR_CREATE HostPathVolumeSource_Type = 1
	// A directory must exist at the given path
	HostPathVolumeSource_DIRECTORY HostPathVolumeSource_Type = 2
	// If nothing exists at the given path, an empty file will be created there
	// as needed with permission set to 0644, having the same group and
	// ownership with Droplet.
	HostPathVolumeSource_FILE_OR_CREATE HostPathVolumeSource_Type = 3
	// A file must exist at the given path
	HostPathVolumeSource_FILE HostPathVolumeSource_Type = 4
	// A UNIX socket must exist at the given path
	HostPathVolumeSource_SOCKET HostPathVolumeSource_Type = 5
	// A character device must exist at the given path
	HostPathVolumeSource_CHAR_DEVICE HostPathVolumeSource_Type = 6
	// A block device must exist at the given path
	HostPathVolumeSource_BLOCK_DEVICE HostPathVolumeSource_Type = 7
)

var (
	HostPathVolumeSource_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "DIRECTORY_OR_CREATE",
		2: "DIRECTORY",
		3: "FILE_OR_CREATE",
		4: "FILE",
		5: "SOCKET",
		6: "CHAR_DEVICE",
		7: "BLOCK_DEVICE",
	}

	HostPathVolumeSource_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":    0,
		"DIRECTORY_OR_CREATE": 1,
		"DIRECTORY":           2,
		"FILE_OR_CREATE":      3,
		"FILE":                4,
		"SOCKET":              5,
		"CHAR_DEVICE":         6,
		"BLOCK_DEVICE":        7,
	}
)

func (x HostPathVolumeSource_Type) Enum() *HostPathVolumeSource_Type {
	p := new(HostPathVolumeSource_Type)
	*p = x
	return p
}

func (x HostPathVolumeSource_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (HostPathVolumeSource_Type) Descriptor() preflect.EnumDescriptor {
	return edgelq_applications_proto_v1_common_proto_enumTypes[1].Descriptor()
}

func (HostPathVolumeSource_Type) Type() preflect.EnumType {
	return &edgelq_applications_proto_v1_common_proto_enumTypes[1]
}

func (x HostPathVolumeSource_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use HostPathVolumeSource_Type.ProtoReflect.Descriptor instead.
func (HostPathVolumeSource_Type) EnumDescriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{12, 0}
}

// PodSpec defines the configuration of a Pod
type PodSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// node is the name of the target node that the Pod is meant to be deployed
	// to.
	Node *devices_device.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=node,proto3" json:"node,omitempty" firestore:"node"`
	// containers defines list of containers that the Pod launches.
	Containers []*PodSpec_Container `protobuf:"bytes,2,rep,name=containers,proto3" json:"containers,omitempty" firestore:"containers"`
	// Containers use the host network.
	HostNetwork   bool                  `protobuf:"varint,3,opt,name=host_network,json=hostNetwork,proto3" json:"host_network,omitempty" firestore:"hostNetwork"`
	RestartPolicy PodSpec_RestartPolicy `protobuf:"varint,4,opt,name=restart_policy,json=restartPolicy,proto3,enum=ntt.applications.v1.PodSpec_RestartPolicy" json:"restart_policy,omitempty" firestore:"restartPolicy"`
	// ImagePullSecrets is an optional list of references to secrets in the same
	// namespace to use for pulling any of the images used by this PodSpec. If
	// specified, these secrets will be passed to individual puller
	// implementations for them to use. For example, in the case of docker, only
	// DockerConfig type secrets are honored.
	ImagePullSecrets []*LocalObjectReferenceSecret `protobuf:"bytes,5,rep,name=image_pull_secrets,json=imagePullSecrets,proto3" json:"image_pull_secrets,omitempty" firestore:"imagePullSecrets"`
	// List of volumes that can be mounted by containers belonging to the pod.
	Volumes []*Volume `protobuf:"bytes,6,rep,name=volumes,proto3" json:"volumes,omitempty" firestore:"volumes"`
	// Compose file as a string.
	// When this value is provided, you can manage containers directlry
	// using Docker Compose. Other values in the Spec expect `node` will be
	// ignored.
	Compose string `protobuf:"bytes,7,opt,name=compose,proto3" json:"compose,omitempty" firestore:"compose"`
	// HostVolumeMounts defines volumes to be mounted to the host file system.
	HostVolumeMounts []*VolumeMount `protobuf:"bytes,8,rep,name=host_volume_mounts,json=hostVolumeMounts,proto3" json:"host_volume_mounts,omitempty" firestore:"hostVolumeMounts"`
	// Health checks for services defined in the compose.
	// map of serviceName to HealthCheck
	ComposeHealthChecks map[string]*PodSpec_ContainerHealthChecks `protobuf:"bytes,9,rep,name=compose_health_checks,json=composeHealthChecks,proto3" json:"compose_health_checks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"composeHealthChecks"`
}

func (m *PodSpec) Reset() {
	*m = PodSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PodSpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PodSpec) ProtoMessage() {}

func (m *PodSpec) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PodSpec) GotenMessage() {}

// Deprecated, Use PodSpec.ProtoReflect.Descriptor instead.
func (*PodSpec) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{0}
}

func (m *PodSpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PodSpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PodSpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PodSpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PodSpec) GetNode() *devices_device.Reference {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *PodSpec) GetContainers() []*PodSpec_Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *PodSpec) GetHostNetwork() bool {
	if m != nil {
		return m.HostNetwork
	}
	return false
}

func (m *PodSpec) GetRestartPolicy() PodSpec_RestartPolicy {
	if m != nil {
		return m.RestartPolicy
	}
	return PodSpec_RESTART_POLICY_UNSPECIFIED
}

func (m *PodSpec) GetImagePullSecrets() []*LocalObjectReferenceSecret {
	if m != nil {
		return m.ImagePullSecrets
	}
	return nil
}

func (m *PodSpec) GetVolumes() []*Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *PodSpec) GetCompose() string {
	if m != nil {
		return m.Compose
	}
	return ""
}

func (m *PodSpec) GetHostVolumeMounts() []*VolumeMount {
	if m != nil {
		return m.HostVolumeMounts
	}
	return nil
}

func (m *PodSpec) GetComposeHealthChecks() map[string]*PodSpec_ContainerHealthChecks {
	if m != nil {
		return m.ComposeHealthChecks
	}
	return nil
}

func (m *PodSpec) SetNode(fv *devices_device.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Node", "PodSpec"))
	}
	m.Node = fv
}

func (m *PodSpec) SetContainers(fv []*PodSpec_Container) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Containers", "PodSpec"))
	}
	m.Containers = fv
}

func (m *PodSpec) SetHostNetwork(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HostNetwork", "PodSpec"))
	}
	m.HostNetwork = fv
}

func (m *PodSpec) SetRestartPolicy(fv PodSpec_RestartPolicy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RestartPolicy", "PodSpec"))
	}
	m.RestartPolicy = fv
}

func (m *PodSpec) SetImagePullSecrets(fv []*LocalObjectReferenceSecret) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ImagePullSecrets", "PodSpec"))
	}
	m.ImagePullSecrets = fv
}

func (m *PodSpec) SetVolumes(fv []*Volume) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Volumes", "PodSpec"))
	}
	m.Volumes = fv
}

func (m *PodSpec) SetCompose(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Compose", "PodSpec"))
	}
	m.Compose = fv
}

func (m *PodSpec) SetHostVolumeMounts(fv []*VolumeMount) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HostVolumeMounts", "PodSpec"))
	}
	m.HostVolumeMounts = fv
}

func (m *PodSpec) SetComposeHealthChecks(fv map[string]*PodSpec_ContainerHealthChecks) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ComposeHealthChecks", "PodSpec"))
	}
	m.ComposeHealthChecks = fv
}

// EnvFromSource represents the source of a set of ConfigMaps
type EnvFromSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// An optional identifier to prepend to each key in the ConfigMap. Must be a
	// C_IDENTIFIER.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty" firestore:"prefix"`
	// The ConfigMap to select from
	ConfigMapRef *ConfigMapEnvSource `protobuf:"bytes,2,opt,name=config_map_ref,json=configMapRef,proto3" json:"config_map_ref,omitempty" firestore:"configMapRef"`
	// The Secret to select from
	SecretRef *SecretEnvSource `protobuf:"bytes,3,opt,name=secret_ref,json=secretRef,proto3" json:"secret_ref,omitempty" firestore:"secretRef"`
}

func (m *EnvFromSource) Reset() {
	*m = EnvFromSource{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *EnvFromSource) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*EnvFromSource) ProtoMessage() {}

func (m *EnvFromSource) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*EnvFromSource) GotenMessage() {}

// Deprecated, Use EnvFromSource.ProtoReflect.Descriptor instead.
func (*EnvFromSource) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{1}
}

func (m *EnvFromSource) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *EnvFromSource) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *EnvFromSource) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *EnvFromSource) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *EnvFromSource) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *EnvFromSource) GetConfigMapRef() *ConfigMapEnvSource {
	if m != nil {
		return m.ConfigMapRef
	}
	return nil
}

func (m *EnvFromSource) GetSecretRef() *SecretEnvSource {
	if m != nil {
		return m.SecretRef
	}
	return nil
}

func (m *EnvFromSource) SetPrefix(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Prefix", "EnvFromSource"))
	}
	m.Prefix = fv
}

func (m *EnvFromSource) SetConfigMapRef(fv *ConfigMapEnvSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConfigMapRef", "EnvFromSource"))
	}
	m.ConfigMapRef = fv
}

func (m *EnvFromSource) SetSecretRef(fv *SecretEnvSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SecretRef", "EnvFromSource"))
	}
	m.SecretRef = fv
}

// EnvVar is a key value pair for environment variables.
type EnvVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// name is the name of the environment variable.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// value is the value of the environment variable.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" firestore:"value"`
	// Source for the environment variable's value. Cannot be used if value is not
	// empty.
	ValueFrom *EnvVarSource `protobuf:"bytes,3,opt,name=value_from,json=valueFrom,proto3" json:"value_from,omitempty" firestore:"valueFrom"`
}

func (m *EnvVar) Reset() {
	*m = EnvVar{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *EnvVar) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*EnvVar) ProtoMessage() {}

func (m *EnvVar) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*EnvVar) GotenMessage() {}

// Deprecated, Use EnvVar.ProtoReflect.Descriptor instead.
func (*EnvVar) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{2}
}

func (m *EnvVar) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *EnvVar) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *EnvVar) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *EnvVar) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *EnvVar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnvVar) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *EnvVar) GetValueFrom() *EnvVarSource {
	if m != nil {
		return m.ValueFrom
	}
	return nil
}

func (m *EnvVar) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "EnvVar"))
	}
	m.Name = fv
}

func (m *EnvVar) SetValue(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Value", "EnvVar"))
	}
	m.Value = fv
}

func (m *EnvVar) SetValueFrom(fv *EnvVarSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ValueFrom", "EnvVar"))
	}
	m.ValueFrom = fv
}

// ConfigMapEnvSource selects a ConfigMap to populate the environment
// variables with.
//
// The contents of the target ConfigMap's Data field will represent the
// key-value pairs as environment variables.
type ConfigMapEnvSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The ConfigMap to select from.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Specify whether the ConfigMap must be defined
	Optional bool `protobuf:"varint,2,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
}

func (m *ConfigMapEnvSource) Reset() {
	*m = ConfigMapEnvSource{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConfigMapEnvSource) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConfigMapEnvSource) ProtoMessage() {}

func (m *ConfigMapEnvSource) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConfigMapEnvSource) GotenMessage() {}

// Deprecated, Use ConfigMapEnvSource.ProtoReflect.Descriptor instead.
func (*ConfigMapEnvSource) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{3}
}

func (m *ConfigMapEnvSource) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConfigMapEnvSource) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConfigMapEnvSource) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConfigMapEnvSource) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ConfigMapEnvSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigMapEnvSource) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *ConfigMapEnvSource) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ConfigMapEnvSource"))
	}
	m.Name = fv
}

func (m *ConfigMapEnvSource) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "ConfigMapEnvSource"))
	}
	m.Optional = fv
}

// SecretEnvSource selects a Secret to populate the environment
// variables with.
//
// The contents of the target Secret's Data field will represent the
// key-value pairs as environment variables.
type SecretEnvSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The Secret to select from.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Specify whether the Secret must be defined
	Optional bool `protobuf:"varint,2,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
}

func (m *SecretEnvSource) Reset() {
	*m = SecretEnvSource{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SecretEnvSource) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SecretEnvSource) ProtoMessage() {}

func (m *SecretEnvSource) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SecretEnvSource) GotenMessage() {}

// Deprecated, Use SecretEnvSource.ProtoReflect.Descriptor instead.
func (*SecretEnvSource) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{4}
}

func (m *SecretEnvSource) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SecretEnvSource) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SecretEnvSource) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SecretEnvSource) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SecretEnvSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecretEnvSource) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *SecretEnvSource) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "SecretEnvSource"))
	}
	m.Name = fv
}

func (m *SecretEnvSource) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "SecretEnvSource"))
	}
	m.Optional = fv
}

// EnvVarSource represents a source for the value of an EnvVar.
type EnvVarSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Selects a key of a ConfigMap.
	ConfigMapKeyRef *ConfigMapKeySelector `protobuf:"bytes,3,opt,name=config_map_key_ref,json=configMapKeyRef,proto3" json:"config_map_key_ref,omitempty" firestore:"configMapKeyRef"`
	// Selects a key of a secret in the pod's namespace
	SecretKeyRef *SecretKeySelector `protobuf:"bytes,4,opt,name=secret_key_ref,json=secretKeyRef,proto3" json:"secret_key_ref,omitempty" firestore:"secretKeyRef"`
}

func (m *EnvVarSource) Reset() {
	*m = EnvVarSource{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *EnvVarSource) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*EnvVarSource) ProtoMessage() {}

func (m *EnvVarSource) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*EnvVarSource) GotenMessage() {}

// Deprecated, Use EnvVarSource.ProtoReflect.Descriptor instead.
func (*EnvVarSource) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{5}
}

func (m *EnvVarSource) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *EnvVarSource) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *EnvVarSource) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *EnvVarSource) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *EnvVarSource) GetConfigMapKeyRef() *ConfigMapKeySelector {
	if m != nil {
		return m.ConfigMapKeyRef
	}
	return nil
}

func (m *EnvVarSource) GetSecretKeyRef() *SecretKeySelector {
	if m != nil {
		return m.SecretKeyRef
	}
	return nil
}

func (m *EnvVarSource) SetConfigMapKeyRef(fv *ConfigMapKeySelector) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConfigMapKeyRef", "EnvVarSource"))
	}
	m.ConfigMapKeyRef = fv
}

func (m *EnvVarSource) SetSecretKeyRef(fv *SecretKeySelector) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SecretKeyRef", "EnvVarSource"))
	}
	m.SecretKeyRef = fv
}

type ConfigMapKeySelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The ConfigMap to select from.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// The key to select.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty" firestore:"key"`
	// Specify whether the ConfigMap or its key must be defined
	Optional bool `protobuf:"varint,3,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
}

func (m *ConfigMapKeySelector) Reset() {
	*m = ConfigMapKeySelector{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConfigMapKeySelector) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConfigMapKeySelector) ProtoMessage() {}

func (m *ConfigMapKeySelector) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConfigMapKeySelector) GotenMessage() {}

// Deprecated, Use ConfigMapKeySelector.ProtoReflect.Descriptor instead.
func (*ConfigMapKeySelector) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{6}
}

func (m *ConfigMapKeySelector) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConfigMapKeySelector) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConfigMapKeySelector) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConfigMapKeySelector) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ConfigMapKeySelector) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigMapKeySelector) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ConfigMapKeySelector) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *ConfigMapKeySelector) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ConfigMapKeySelector"))
	}
	m.Name = fv
}

func (m *ConfigMapKeySelector) SetKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "ConfigMapKeySelector"))
	}
	m.Key = fv
}

func (m *ConfigMapKeySelector) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "ConfigMapKeySelector"))
	}
	m.Optional = fv
}

// SecretKeySelector selects a key of a Secret.
type SecretKeySelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The name of the secret in the pod's namespace to select from.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty" firestore:"key"`
	// Specify whether the Secret or its key must be defined
	Optional bool `protobuf:"varint,3,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
}

func (m *SecretKeySelector) Reset() {
	*m = SecretKeySelector{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SecretKeySelector) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SecretKeySelector) ProtoMessage() {}

func (m *SecretKeySelector) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SecretKeySelector) GotenMessage() {}

// Deprecated, Use SecretKeySelector.ProtoReflect.Descriptor instead.
func (*SecretKeySelector) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{7}
}

func (m *SecretKeySelector) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SecretKeySelector) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SecretKeySelector) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SecretKeySelector) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SecretKeySelector) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecretKeySelector) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SecretKeySelector) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *SecretKeySelector) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "SecretKeySelector"))
	}
	m.Name = fv
}

func (m *SecretKeySelector) SetKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "SecretKeySelector"))
	}
	m.Key = fv
}

func (m *SecretKeySelector) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "SecretKeySelector"))
	}
	m.Optional = fv
}

// LocalObjectReference contains enough information to let you locate the
// referenced object inside the same namespace.
type LocalObjectReferenceSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of the referent.
	Name *secrets_secret.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=name,proto3" json:"name,omitempty" firestore:"name"`
}

func (m *LocalObjectReferenceSecret) Reset() {
	*m = LocalObjectReferenceSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LocalObjectReferenceSecret) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LocalObjectReferenceSecret) ProtoMessage() {}

func (m *LocalObjectReferenceSecret) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LocalObjectReferenceSecret) GotenMessage() {}

// Deprecated, Use LocalObjectReferenceSecret.ProtoReflect.Descriptor instead.
func (*LocalObjectReferenceSecret) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{8}
}

func (m *LocalObjectReferenceSecret) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LocalObjectReferenceSecret) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LocalObjectReferenceSecret) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LocalObjectReferenceSecret) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LocalObjectReferenceSecret) GetName() *secrets_secret.Reference {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *LocalObjectReferenceSecret) SetName(fv *secrets_secret.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "LocalObjectReferenceSecret"))
	}
	m.Name = fv
}

// PodSecurityContext holds pod-level security attributes and common container
// settings. Some fields are also present in container.securityContext.  Field
// values of container.securityContext take precedence over field values of
// PodSecurityContext.
type SecurityContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Run container in privileged mode.
	// Processes in privileged containers are essentially equivalent to root on
	// the host. Defaults to false.
	Privileged bool `protobuf:"varint,2,opt,name=privileged,proto3" json:"privileged,omitempty" firestore:"privileged"`
}

func (m *SecurityContext) Reset() {
	*m = SecurityContext{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SecurityContext) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SecurityContext) ProtoMessage() {}

func (m *SecurityContext) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SecurityContext) GotenMessage() {}

// Deprecated, Use SecurityContext.ProtoReflect.Descriptor instead.
func (*SecurityContext) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{9}
}

func (m *SecurityContext) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SecurityContext) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SecurityContext) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SecurityContext) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SecurityContext) GetPrivileged() bool {
	if m != nil {
		return m.Privileged
	}
	return false
}

func (m *SecurityContext) SetPrivileged(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Privileged", "SecurityContext"))
	}
	m.Privileged = fv
}

// Volume represents a named volume in a pod that may be accessed by any
// container in the pod.
type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Volume's name.
	// Must be a DNS_LABEL and unique within the pod.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// HostPath represents a pre-existing file or directory on the host
	// machine that is directly exposed to the container. This is generally
	// used for system agents or other privileged things that are allowed
	// to see the host machine. Most containers will NOT need this.
	HostPath *HostPathVolumeSource `protobuf:"bytes,101,opt,name=host_path,json=hostPath,proto3" json:"host_path,omitempty" firestore:"hostPath"`
	// Secret represents a secret that should populate this volume.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	Secret *SecretVolumeSource `protobuf:"bytes,106,opt,name=secret,proto3" json:"secret,omitempty" firestore:"secret"`
	// ConfigMap represents a configMap that should populate this volume
	ConfigMap *ConfigMapVolumeSource `protobuf:"bytes,119,opt,name=config_map,json=configMap,proto3" json:"config_map,omitempty" firestore:"configMap"`
}

func (m *Volume) Reset() {
	*m = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Volume) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Volume) ProtoMessage() {}

func (m *Volume) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Volume) GotenMessage() {}

// Deprecated, Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{10}
}

func (m *Volume) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Volume) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Volume) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Volume) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Volume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Volume) GetHostPath() *HostPathVolumeSource {
	if m != nil {
		return m.HostPath
	}
	return nil
}

func (m *Volume) GetSecret() *SecretVolumeSource {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *Volume) GetConfigMap() *ConfigMapVolumeSource {
	if m != nil {
		return m.ConfigMap
	}
	return nil
}

func (m *Volume) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Volume"))
	}
	m.Name = fv
}

func (m *Volume) SetHostPath(fv *HostPathVolumeSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HostPath", "Volume"))
	}
	m.HostPath = fv
}

func (m *Volume) SetSecret(fv *SecretVolumeSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Secret", "Volume"))
	}
	m.Secret = fv
}

func (m *Volume) SetConfigMap(fv *ConfigMapVolumeSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConfigMap", "Volume"))
	}
	m.ConfigMap = fv
}

// VolumeMount describes a mounting of a Volume within a container.
type VolumeMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// This must match the Name of a Volume.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified).
	// Defaults to false.
	ReadOnly bool `protobuf:"varint,2,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty" firestore:"readOnly"`
	// Path within the container at which the volume should be mounted.  Must
	// not contain ':'.
	MountPath string `protobuf:"bytes,3,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty" firestore:"mountPath"`
	// Path within the volume from which the container's volume should be mounted.
	// Defaults to "" (volume's root).
	SubPath string `protobuf:"bytes,4,opt,name=sub_path,json=subPath,proto3" json:"sub_path,omitempty" firestore:"subPath"`
}

func (m *VolumeMount) Reset() {
	*m = VolumeMount{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *VolumeMount) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*VolumeMount) ProtoMessage() {}

func (m *VolumeMount) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*VolumeMount) GotenMessage() {}

// Deprecated, Use VolumeMount.ProtoReflect.Descriptor instead.
func (*VolumeMount) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{11}
}

func (m *VolumeMount) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *VolumeMount) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *VolumeMount) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *VolumeMount) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *VolumeMount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VolumeMount) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *VolumeMount) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

func (m *VolumeMount) GetSubPath() string {
	if m != nil {
		return m.SubPath
	}
	return ""
}

func (m *VolumeMount) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "VolumeMount"))
	}
	m.Name = fv
}

func (m *VolumeMount) SetReadOnly(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReadOnly", "VolumeMount"))
	}
	m.ReadOnly = fv
}

func (m *VolumeMount) SetMountPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MountPath", "VolumeMount"))
	}
	m.MountPath = fv
}

func (m *VolumeMount) SetSubPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SubPath", "VolumeMount"))
	}
	m.SubPath = fv
}

// Represents a host path mapped into a pod.
type HostPathVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Path of the directory on the host.
	// If the path is a symlink, it will follow the link to the real path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty" firestore:"path"`
	// Type for HostPath Volume
	Type HostPathVolumeSource_Type `protobuf:"varint,2,opt,name=type,proto3,enum=ntt.applications.v1.HostPathVolumeSource_Type" json:"type,omitempty" firestore:"type"`
}

func (m *HostPathVolumeSource) Reset() {
	*m = HostPathVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *HostPathVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*HostPathVolumeSource) ProtoMessage() {}

func (m *HostPathVolumeSource) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*HostPathVolumeSource) GotenMessage() {}

// Deprecated, Use HostPathVolumeSource.ProtoReflect.Descriptor instead.
func (*HostPathVolumeSource) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{12}
}

func (m *HostPathVolumeSource) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *HostPathVolumeSource) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *HostPathVolumeSource) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *HostPathVolumeSource) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *HostPathVolumeSource) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HostPathVolumeSource) GetType() HostPathVolumeSource_Type {
	if m != nil {
		return m.Type
	}
	return HostPathVolumeSource_TYPE_UNSPECIFIED
}

func (m *HostPathVolumeSource) SetPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Path", "HostPathVolumeSource"))
	}
	m.Path = fv
}

func (m *HostPathVolumeSource) SetType(fv HostPathVolumeSource_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "HostPathVolumeSource"))
	}
	m.Type = fv
}

// Adapts a Secret into a volume.
//
// The contents of the target Secret's Data field will be presented in a volume
// as files using the keys in the Data field as the file names.
// Secret volumes support ownership management and SELinux relabeling.
type SecretVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of the secret in the pod's namespace to use.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName string `protobuf:"bytes,1,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty" firestore:"secretName"`
	// If unspecified, each key-value pair in the Data field of the referenced
	// Secret will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the Secret,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	// +optional
	Items []*KeyToPath `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty" firestore:"items"`
	// Optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0
	// and 511. YAML accepts both octal and decimal values, JSON requires decimal
	// values for mode bits. Defaults to 0644. Directories within the path are not
	// affected by this setting. This might be in conflict with other options that
	// affect the file mode, like fsGroup, and the result can be other mode bits
	// set.
	DefaultMode int32 `protobuf:"varint,3,opt,name=default_mode,json=defaultMode,proto3" json:"default_mode,omitempty" firestore:"defaultMode"`
	// Specify whether the Secret or its keys must be defined
	Optional bool `protobuf:"varint,4,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
}

func (m *SecretVolumeSource) Reset() {
	*m = SecretVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SecretVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SecretVolumeSource) ProtoMessage() {}

func (m *SecretVolumeSource) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SecretVolumeSource) GotenMessage() {}

// Deprecated, Use SecretVolumeSource.ProtoReflect.Descriptor instead.
func (*SecretVolumeSource) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{13}
}

func (m *SecretVolumeSource) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SecretVolumeSource) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SecretVolumeSource) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SecretVolumeSource) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SecretVolumeSource) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func (m *SecretVolumeSource) GetItems() []*KeyToPath {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SecretVolumeSource) GetDefaultMode() int32 {
	if m != nil {
		return m.DefaultMode
	}
	return int32(0)
}

func (m *SecretVolumeSource) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *SecretVolumeSource) SetSecretName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SecretName", "SecretVolumeSource"))
	}
	m.SecretName = fv
}

func (m *SecretVolumeSource) SetItems(fv []*KeyToPath) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Items", "SecretVolumeSource"))
	}
	m.Items = fv
}

func (m *SecretVolumeSource) SetDefaultMode(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DefaultMode", "SecretVolumeSource"))
	}
	m.DefaultMode = fv
}

func (m *SecretVolumeSource) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "SecretVolumeSource"))
	}
	m.Optional = fv
}

// Maps a string key to a path within a volume.
type KeyToPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The key to project.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" firestore:"key"`
	// The relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty" firestore:"path"`
	// Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0
	// and 511. YAML accepts both octal and decimal values, JSON requires decimal
	// values for mode bits. If not specified, the volume defaultMode will be
	// used. This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode int32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty" firestore:"mode"`
}

func (m *KeyToPath) Reset() {
	*m = KeyToPath{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *KeyToPath) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*KeyToPath) ProtoMessage() {}

func (m *KeyToPath) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*KeyToPath) GotenMessage() {}

// Deprecated, Use KeyToPath.ProtoReflect.Descriptor instead.
func (*KeyToPath) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{14}
}

func (m *KeyToPath) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *KeyToPath) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *KeyToPath) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *KeyToPath) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *KeyToPath) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyToPath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *KeyToPath) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return int32(0)
}

func (m *KeyToPath) SetKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "KeyToPath"))
	}
	m.Key = fv
}

func (m *KeyToPath) SetPath(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Path", "KeyToPath"))
	}
	m.Path = fv
}

func (m *KeyToPath) SetMode(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "KeyToPath"))
	}
	m.Mode = fv
}

// Adapts a ConfigMap into a volume.
//
// The contents of the target ConfigMap's Data field will be presented in a
// volume as files using the keys in the Data field as the file names, unless
// the items element is populated with specific mappings of keys to paths.
// ConfigMap volumes support ownership management and SELinux relabeling.
type ConfigMapVolumeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// If unspecified, each key-value pair in the Data field of the referenced
	// ConfigMap will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the ConfigMap,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items []*KeyToPath `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty" firestore:"items"`
	// Optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0
	// and 511. YAML accepts both octal and decimal values, JSON requires decimal
	// values for mode bits. Defaults to 0644. Directories within the path are not
	// affected by this setting. This might be in conflict with other options that
	// affect the file mode, like fsGroup, and the result can be other mode bits
	// set.
	DefaultMode int32 `protobuf:"varint,3,opt,name=default_mode,json=defaultMode,proto3" json:"default_mode,omitempty" firestore:"defaultMode"`
	// Specify whether the ConfigMap or its keys must be defined
	Optional bool `protobuf:"varint,4,opt,name=optional,proto3" json:"optional,omitempty" firestore:"optional"`
}

func (m *ConfigMapVolumeSource) Reset() {
	*m = ConfigMapVolumeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ConfigMapVolumeSource) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ConfigMapVolumeSource) ProtoMessage() {}

func (m *ConfigMapVolumeSource) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ConfigMapVolumeSource) GotenMessage() {}

// Deprecated, Use ConfigMapVolumeSource.ProtoReflect.Descriptor instead.
func (*ConfigMapVolumeSource) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{15}
}

func (m *ConfigMapVolumeSource) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ConfigMapVolumeSource) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ConfigMapVolumeSource) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ConfigMapVolumeSource) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ConfigMapVolumeSource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigMapVolumeSource) GetItems() []*KeyToPath {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ConfigMapVolumeSource) GetDefaultMode() int32 {
	if m != nil {
		return m.DefaultMode
	}
	return int32(0)
}

func (m *ConfigMapVolumeSource) GetOptional() bool {
	if m != nil {
		return m.Optional
	}
	return false
}

func (m *ConfigMapVolumeSource) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ConfigMapVolumeSource"))
	}
	m.Name = fv
}

func (m *ConfigMapVolumeSource) SetItems(fv []*KeyToPath) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Items", "ConfigMapVolumeSource"))
	}
	m.Items = fv
}

func (m *ConfigMapVolumeSource) SetDefaultMode(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DefaultMode", "ConfigMapVolumeSource"))
	}
	m.DefaultMode = fv
}

func (m *ConfigMapVolumeSource) SetOptional(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Optional", "ConfigMapVolumeSource"))
	}
	m.Optional = fv
}

// Container defines configuration of a Container.
type PodSpec_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// args to run the command.
	Args []string `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty" firestore:"args"`
	// command to run the container.
	// The image default command will be used when it's not given.
	Command []string `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty" firestore:"command"`
	// env is additional environment variables passed to the container.
	Env []*EnvVar `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty" firestore:"env"`
	// image is the URL of the container image.
	Image           string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty" firestore:"image"`
	ImagePullPolicy string `protobuf:"bytes,5,opt,name=image_pull_policy,json=imagePullPolicy,proto3" json:"image_pull_policy,omitempty" firestore:"imagePullPolicy"`
	// name is the name of the container. Must be unique in the Pod.
	Name      string                                  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Resources *PodSpec_Container_ResourceRequirements `protobuf:"bytes,7,opt,name=resources,proto3" json:"resources,omitempty" firestore:"resources"`
	// Security options the pod should run with.
	SecurityContext *SecurityContext `protobuf:"bytes,8,opt,name=security_context,json=securityContext,proto3" json:"security_context,omitempty" firestore:"securityContext"`
	// Pod volumes to mount into the container's filesystem.
	// Cannot be updated.
	VolumeMounts []*VolumeMount `protobuf:"bytes,9,rep,name=volume_mounts,json=volumeMounts,proto3" json:"volume_mounts,omitempty" firestore:"volumeMounts"`
	// List of sources to populate environment variables in the container.
	// The keys defined within a source must be a C_IDENTIFIER. All invalid
	// keys will be reported as an event when the container is starting. When
	// a key exists in multiple sources, the value associated with the last
	// source will take precedence. Values defined by an Env with a duplicate
	// key will take precedence. Cannot be updated.
	EnvFrom *EnvFromSource `protobuf:"bytes,19,opt,name=envFrom,proto3" json:"envFrom,omitempty" firestore:"envFrom"`
	// Health check for container
	HealthCheck []*api.HealthCheckSpec `protobuf:"bytes,20,rep,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty" firestore:"healthCheck"`
}

func (m *PodSpec_Container) Reset() {
	*m = PodSpec_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PodSpec_Container) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PodSpec_Container) ProtoMessage() {}

func (m *PodSpec_Container) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PodSpec_Container) GotenMessage() {}

// Deprecated, Use PodSpec_Container.ProtoReflect.Descriptor instead.
func (*PodSpec_Container) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{0, 0}
}

func (m *PodSpec_Container) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PodSpec_Container) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PodSpec_Container) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PodSpec_Container) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PodSpec_Container) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *PodSpec_Container) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *PodSpec_Container) GetEnv() []*EnvVar {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *PodSpec_Container) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *PodSpec_Container) GetImagePullPolicy() string {
	if m != nil {
		return m.ImagePullPolicy
	}
	return ""
}

func (m *PodSpec_Container) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodSpec_Container) GetResources() *PodSpec_Container_ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *PodSpec_Container) GetSecurityContext() *SecurityContext {
	if m != nil {
		return m.SecurityContext
	}
	return nil
}

func (m *PodSpec_Container) GetVolumeMounts() []*VolumeMount {
	if m != nil {
		return m.VolumeMounts
	}
	return nil
}

func (m *PodSpec_Container) GetEnvFrom() *EnvFromSource {
	if m != nil {
		return m.EnvFrom
	}
	return nil
}

func (m *PodSpec_Container) GetHealthCheck() []*api.HealthCheckSpec {
	if m != nil {
		return m.HealthCheck
	}
	return nil
}

func (m *PodSpec_Container) SetArgs(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Args", "PodSpec_Container"))
	}
	m.Args = fv
}

func (m *PodSpec_Container) SetCommand(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Command", "PodSpec_Container"))
	}
	m.Command = fv
}

func (m *PodSpec_Container) SetEnv(fv []*EnvVar) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Env", "PodSpec_Container"))
	}
	m.Env = fv
}

func (m *PodSpec_Container) SetImage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Image", "PodSpec_Container"))
	}
	m.Image = fv
}

func (m *PodSpec_Container) SetImagePullPolicy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ImagePullPolicy", "PodSpec_Container"))
	}
	m.ImagePullPolicy = fv
}

func (m *PodSpec_Container) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "PodSpec_Container"))
	}
	m.Name = fv
}

func (m *PodSpec_Container) SetResources(fv *PodSpec_Container_ResourceRequirements) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Resources", "PodSpec_Container"))
	}
	m.Resources = fv
}

func (m *PodSpec_Container) SetSecurityContext(fv *SecurityContext) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SecurityContext", "PodSpec_Container"))
	}
	m.SecurityContext = fv
}

func (m *PodSpec_Container) SetVolumeMounts(fv []*VolumeMount) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "VolumeMounts", "PodSpec_Container"))
	}
	m.VolumeMounts = fv
}

func (m *PodSpec_Container) SetEnvFrom(fv *EnvFromSource) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnvFrom", "PodSpec_Container"))
	}
	m.EnvFrom = fv
}

func (m *PodSpec_Container) SetHealthCheck(fv []*api.HealthCheckSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HealthCheck", "PodSpec_Container"))
	}
	m.HealthCheck = fv
}

// There can be more than 1 health check for a container
type PodSpec_ContainerHealthChecks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	HealthChecks  []*api.HealthCheckSpec `protobuf:"bytes,1,rep,name=health_checks,json=healthChecks,proto3" json:"health_checks,omitempty" firestore:"healthChecks"`
}

func (m *PodSpec_ContainerHealthChecks) Reset() {
	*m = PodSpec_ContainerHealthChecks{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PodSpec_ContainerHealthChecks) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PodSpec_ContainerHealthChecks) ProtoMessage() {}

func (m *PodSpec_ContainerHealthChecks) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PodSpec_ContainerHealthChecks) GotenMessage() {}

// Deprecated, Use PodSpec_ContainerHealthChecks.ProtoReflect.Descriptor instead.
func (*PodSpec_ContainerHealthChecks) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{0, 1}
}

func (m *PodSpec_ContainerHealthChecks) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PodSpec_ContainerHealthChecks) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PodSpec_ContainerHealthChecks) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PodSpec_ContainerHealthChecks) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PodSpec_ContainerHealthChecks) GetHealthChecks() []*api.HealthCheckSpec {
	if m != nil {
		return m.HealthChecks
	}
	return nil
}

func (m *PodSpec_ContainerHealthChecks) SetHealthChecks(fv []*api.HealthCheckSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HealthChecks", "PodSpec_ContainerHealthChecks"))
	}
	m.HealthChecks = fv
}

type PodSpec_Container_ResourceRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// todo: change to k8s.io.apimachinery.pkg.api.resource.
	Limits   map[string]int64 `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" firestore:"limits"`
	Requests map[string]int64 `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" firestore:"requests"`
}

func (m *PodSpec_Container_ResourceRequirements) Reset() {
	*m = PodSpec_Container_ResourceRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PodSpec_Container_ResourceRequirements) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PodSpec_Container_ResourceRequirements) ProtoMessage() {}

func (m *PodSpec_Container_ResourceRequirements) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PodSpec_Container_ResourceRequirements) GotenMessage() {}

// Deprecated, Use PodSpec_Container_ResourceRequirements.ProtoReflect.Descriptor instead.
func (*PodSpec_Container_ResourceRequirements) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_common_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *PodSpec_Container_ResourceRequirements) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PodSpec_Container_ResourceRequirements) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PodSpec_Container_ResourceRequirements) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PodSpec_Container_ResourceRequirements) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PodSpec_Container_ResourceRequirements) GetLimits() map[string]int64 {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *PodSpec_Container_ResourceRequirements) GetRequests() map[string]int64 {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *PodSpec_Container_ResourceRequirements) SetLimits(fv map[string]int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Limits", "PodSpec_Container_ResourceRequirements"))
	}
	m.Limits = fv
}

func (m *PodSpec_Container_ResourceRequirements) SetRequests(fv map[string]int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Requests", "PodSpec_Container_ResourceRequirements"))
	}
	m.Requests = fv
}

var edgelq_applications_proto_v1_common_proto preflect.FileDescriptor

var edgelq_applications_proto_v1_common_proto_rawDesc = []byte{
	0x0a, 0x29, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x0e, 0x0a, 0x07, 0x50, 0x6f,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x05, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x46,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x6f,
	0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5d, 0x0a, 0x12,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x12,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x68, 0x6f, 0x73, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x1a, 0x8f, 0x07, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50,
	0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4f, 0x0a,
	0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x45,
	0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x1a, 0xd6, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x1a, 0x7a, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a,
	0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e,
	0x0a, 0x1a, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45,
	0x56, 0x45, 0x52, 0x10, 0x03, 0x22, 0xbb, 0x01, 0x0a, 0x0d, 0x45, 0x6e, 0x76, 0x46, 0x72, 0x6f,
	0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x76, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x66, 0x12, 0x43,
	0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45,
	0x6e, 0x76, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x22, 0x74, 0x0a, 0x06, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x44, 0x0a, 0x12, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x76, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0x41, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x22, 0xb4, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x12, 0x4c, 0x0a, 0x0e, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x22, 0x58, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x22, 0x55, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x55, 0x0a, 0x1a, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f, 0x12, 0x1d, 0x0a, 0x19,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x31, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x22, 0x78, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x82, 0x02, 0x0a, 0x14, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x42,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4f,
	0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x43, 0x4b, 0x45,
	0x54, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x07, 0x22, 0xaa, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x22, 0x45, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65,
	0x79, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x74, 0xe8,
	0xde, 0x21, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42,
	0x0c, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3b, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_applications_proto_v1_common_proto_rawDescOnce sync.Once
	edgelq_applications_proto_v1_common_proto_rawDescData = edgelq_applications_proto_v1_common_proto_rawDesc
)

func edgelq_applications_proto_v1_common_proto_rawDescGZIP() []byte {
	edgelq_applications_proto_v1_common_proto_rawDescOnce.Do(func() {
		edgelq_applications_proto_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_applications_proto_v1_common_proto_rawDescData)
	})
	return edgelq_applications_proto_v1_common_proto_rawDescData
}

var edgelq_applications_proto_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var edgelq_applications_proto_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var edgelq_applications_proto_v1_common_proto_goTypes = []interface{}{
	(PodSpec_RestartPolicy)(0),                     // 0: ntt.applications.v1.PodSpec_RestartPolicy
	(HostPathVolumeSource_Type)(0),                 // 1: ntt.applications.v1.HostPathVolumeSource_Type
	(*PodSpec)(nil),                                // 2: ntt.applications.v1.PodSpec
	(*EnvFromSource)(nil),                          // 3: ntt.applications.v1.EnvFromSource
	(*EnvVar)(nil),                                 // 4: ntt.applications.v1.EnvVar
	(*ConfigMapEnvSource)(nil),                     // 5: ntt.applications.v1.ConfigMapEnvSource
	(*SecretEnvSource)(nil),                        // 6: ntt.applications.v1.SecretEnvSource
	(*EnvVarSource)(nil),                           // 7: ntt.applications.v1.EnvVarSource
	(*ConfigMapKeySelector)(nil),                   // 8: ntt.applications.v1.ConfigMapKeySelector
	(*SecretKeySelector)(nil),                      // 9: ntt.applications.v1.SecretKeySelector
	(*LocalObjectReferenceSecret)(nil),             // 10: ntt.applications.v1.LocalObjectReferenceSecret
	(*SecurityContext)(nil),                        // 11: ntt.applications.v1.SecurityContext
	(*Volume)(nil),                                 // 12: ntt.applications.v1.Volume
	(*VolumeMount)(nil),                            // 13: ntt.applications.v1.VolumeMount
	(*HostPathVolumeSource)(nil),                   // 14: ntt.applications.v1.HostPathVolumeSource
	(*SecretVolumeSource)(nil),                     // 15: ntt.applications.v1.SecretVolumeSource
	(*KeyToPath)(nil),                              // 16: ntt.applications.v1.KeyToPath
	(*ConfigMapVolumeSource)(nil),                  // 17: ntt.applications.v1.ConfigMapVolumeSource
	(*PodSpec_Container)(nil),                      // 18: ntt.applications.v1.PodSpec.Container
	(*PodSpec_ContainerHealthChecks)(nil),          // 19: ntt.applications.v1.PodSpec.ContainerHealthChecks
	nil,                                            // 20: ntt.applications.v1.PodSpec.ComposeHealthChecksEntry
	(*PodSpec_Container_ResourceRequirements)(nil), // 21: ntt.applications.v1.PodSpec.Container.ResourceRequirements
	nil,                         // 22: ntt.applications.v1.PodSpec.Container.ResourceRequirements.LimitsEntry
	nil,                         // 23: ntt.applications.v1.PodSpec.Container.ResourceRequirements.RequestsEntry
	(*api.HealthCheckSpec)(nil), // 24: ntt.api.HealthCheckSpec
}
var edgelq_applications_proto_v1_common_proto_depIdxs = []int32{
	18, // 0: ntt.applications.v1.PodSpec.containers:type_name -> ntt.applications.v1.PodSpec.Container
	0,  // 1: ntt.applications.v1.PodSpec.restart_policy:type_name -> ntt.applications.v1.PodSpec_RestartPolicy
	10, // 2: ntt.applications.v1.PodSpec.image_pull_secrets:type_name -> ntt.applications.v1.LocalObjectReferenceSecret
	12, // 3: ntt.applications.v1.PodSpec.volumes:type_name -> ntt.applications.v1.Volume
	13, // 4: ntt.applications.v1.PodSpec.host_volume_mounts:type_name -> ntt.applications.v1.VolumeMount
	20, // 5: ntt.applications.v1.PodSpec.compose_health_checks:type_name -> ntt.applications.v1.PodSpec.ComposeHealthChecksEntry
	5,  // 6: ntt.applications.v1.EnvFromSource.config_map_ref:type_name -> ntt.applications.v1.ConfigMapEnvSource
	6,  // 7: ntt.applications.v1.EnvFromSource.secret_ref:type_name -> ntt.applications.v1.SecretEnvSource
	7,  // 8: ntt.applications.v1.EnvVar.value_from:type_name -> ntt.applications.v1.EnvVarSource
	8,  // 9: ntt.applications.v1.EnvVarSource.config_map_key_ref:type_name -> ntt.applications.v1.ConfigMapKeySelector
	9,  // 10: ntt.applications.v1.EnvVarSource.secret_key_ref:type_name -> ntt.applications.v1.SecretKeySelector
	14, // 11: ntt.applications.v1.Volume.host_path:type_name -> ntt.applications.v1.HostPathVolumeSource
	15, // 12: ntt.applications.v1.Volume.secret:type_name -> ntt.applications.v1.SecretVolumeSource
	17, // 13: ntt.applications.v1.Volume.config_map:type_name -> ntt.applications.v1.ConfigMapVolumeSource
	1,  // 14: ntt.applications.v1.HostPathVolumeSource.type:type_name -> ntt.applications.v1.HostPathVolumeSource_Type
	16, // 15: ntt.applications.v1.SecretVolumeSource.items:type_name -> ntt.applications.v1.KeyToPath
	16, // 16: ntt.applications.v1.ConfigMapVolumeSource.items:type_name -> ntt.applications.v1.KeyToPath
	4,  // 17: ntt.applications.v1.PodSpec.Container.env:type_name -> ntt.applications.v1.EnvVar
	21, // 18: ntt.applications.v1.PodSpec.Container.resources:type_name -> ntt.applications.v1.PodSpec.Container.ResourceRequirements
	11, // 19: ntt.applications.v1.PodSpec.Container.security_context:type_name -> ntt.applications.v1.SecurityContext
	13, // 20: ntt.applications.v1.PodSpec.Container.volume_mounts:type_name -> ntt.applications.v1.VolumeMount
	3,  // 21: ntt.applications.v1.PodSpec.Container.envFrom:type_name -> ntt.applications.v1.EnvFromSource
	24, // 22: ntt.applications.v1.PodSpec.Container.health_check:type_name -> ntt.api.HealthCheckSpec
	24, // 23: ntt.applications.v1.PodSpec.ContainerHealthChecks.health_checks:type_name -> ntt.api.HealthCheckSpec
	19, // 24: ntt.applications.v1.PodSpec.ComposeHealthChecksEntry.value:type_name -> ntt.applications.v1.PodSpec.ContainerHealthChecks
	22, // 25: ntt.applications.v1.PodSpec.Container.ResourceRequirements.limits:type_name -> ntt.applications.v1.PodSpec.Container.ResourceRequirements.LimitsEntry
	23, // 26: ntt.applications.v1.PodSpec.Container.ResourceRequirements.requests:type_name -> ntt.applications.v1.PodSpec.Container.ResourceRequirements.RequestsEntry
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { edgelq_applications_proto_v1_common_proto_init() }
func edgelq_applications_proto_v1_common_proto_init() {
	if edgelq_applications_proto_v1_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_applications_proto_v1_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvFromSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMapEnvSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretEnvSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVarSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMapKeySelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretKeySelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalObjectReferenceSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostPathVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyToPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMapVolumeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodSpec_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodSpec_ContainerHealthChecks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodSpec_Container_ResourceRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_applications_proto_v1_common_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_applications_proto_v1_common_proto_goTypes,
		DependencyIndexes: edgelq_applications_proto_v1_common_proto_depIdxs,
		EnumInfos:         edgelq_applications_proto_v1_common_proto_enumTypes,
		MessageInfos:      edgelq_applications_proto_v1_common_proto_msgTypes,
	}.Build()
	edgelq_applications_proto_v1_common_proto = out.File
	edgelq_applications_proto_v1_common_proto_rawDesc = nil
	edgelq_applications_proto_v1_common_proto_goTypes = nil
	edgelq_applications_proto_v1_common_proto_depIdxs = nil
}
