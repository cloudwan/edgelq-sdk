// Code generated by protoc-gen-goten-go
// File: edgelq/applications/proto/v1/pod.proto
// DO NOT EDIT!!!

package pod

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/applications/resources/v1/common"
	distribution "github.com/cloudwan/edgelq-sdk/applications/resources/v1/distribution"
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &common.PodSpec{}
	_ = &distribution.Distribution{}
	_ = &project.Project{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PodPhase is states of Pod.
// TODO remove prefixes when the name conflict issue by gogo is resolved
type Pod_Status_Phase int32

const (
	// PhaseUnspecified means the Pod is in unknown state. This state is
	// usually not used.
	Pod_Status_PHASE_UNSPECIFIED Pod_Status_Phase = 0
	// PhasePending is used when the Pod is accepted by the system and it's
	// under processing to be launched.
	Pod_Status_PENDING Pod_Status_Phase = 1
	// PhaseRunning indicates all the containers supposed to be running are up
	// and running.
	Pod_Status_RUNNING Pod_Status_Phase = 2
	// PhaseSucceeded indicates the Pod is terminated however the exit codes
	// of the containers are non-error numbers.
	Pod_Status_SUCCEEDED Pod_Status_Phase = 3
	// PhaseFailed is used when the Pod encountered an issue and some or all
	// of the container are not running. This Phase happens after the
	// containers are initially created successfully
	Pod_Status_FAILED Pod_Status_Phase = 4
	// PhaseUnknown is used when the assigned node doesn't respond anymore
	Pod_Status_UNKNOWN Pod_Status_Phase = 5
	// IMAGE_DOWNLOAD_FAILED is the state when docker image pull fails.
	Pod_Status_IMAGE_DOWNLOAD_FAILED Pod_Status_Phase = 6
	// INIT_FAILED is the state when validation fails or pod initialization
	// fails because of some system error. Typically caused by yaml syntax
	// errors or system errors on device such as disk full etc
	Pod_Status_INIT_FAILED Pod_Status_Phase = 7
	// POD_CREATE_FAILED is the state when pod UP fails.
	// In this case, the compose file is a valid yaml.
	// The failure could be wrong or could be caused by docker errors or
	// keyword errors
	Pod_Status_POD_CREATE_FAILED Pod_Status_Phase = 8
)

var (
	Pod_Status_Phase_name = map[int32]string{
		0: "PHASE_UNSPECIFIED",
		1: "PENDING",
		2: "RUNNING",
		3: "SUCCEEDED",
		4: "FAILED",
		5: "UNKNOWN",
		6: "IMAGE_DOWNLOAD_FAILED",
		7: "INIT_FAILED",
		8: "POD_CREATE_FAILED",
	}

	Pod_Status_Phase_value = map[string]int32{
		"PHASE_UNSPECIFIED":     0,
		"PENDING":               1,
		"RUNNING":               2,
		"SUCCEEDED":             3,
		"FAILED":                4,
		"UNKNOWN":               5,
		"IMAGE_DOWNLOAD_FAILED": 6,
		"INIT_FAILED":           7,
		"POD_CREATE_FAILED":     8,
	}
)

func (x Pod_Status_Phase) Enum() *Pod_Status_Phase {
	p := new(Pod_Status_Phase)
	*p = x
	return p
}

func (x Pod_Status_Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Pod_Status_Phase) Descriptor() preflect.EnumDescriptor {
	return edgelq_applications_proto_v1_pod_proto_enumTypes[0].Descriptor()
}

func (Pod_Status_Phase) Type() preflect.EnumType {
	return &edgelq_applications_proto_v1_pod_proto_enumTypes[0]
}

func (x Pod_Status_Phase) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Pod_Status_Phase.ProtoReflect.Descriptor instead.
func (Pod_Status_Phase) EnumDescriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_pod_proto_rawDescGZIP(), []int{0, 0, 0}
}

// TODO remove prefixes when the name conflict issue by gogo is resolved
type Pod_Status_Container_State int32

const (
	Pod_Status_Container_STATE_UNSPECIFIED Pod_Status_Container_State = 0
	Pod_Status_Container_WAITING           Pod_Status_Container_State = 1
	Pod_Status_Container_RUNNING           Pod_Status_Container_State = 2
	Pod_Status_Container_TERMINATED        Pod_Status_Container_State = 3
	Pod_Status_Container_UNKNOWN           Pod_Status_Container_State = 4
)

var (
	Pod_Status_Container_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "WAITING",
		2: "RUNNING",
		3: "TERMINATED",
		4: "UNKNOWN",
	}

	Pod_Status_Container_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"WAITING":           1,
		"RUNNING":           2,
		"TERMINATED":        3,
		"UNKNOWN":           4,
	}
)

func (x Pod_Status_Container_State) Enum() *Pod_Status_Container_State {
	p := new(Pod_Status_Container_State)
	*p = x
	return p
}

func (x Pod_Status_Container_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Pod_Status_Container_State) Descriptor() preflect.EnumDescriptor {
	return edgelq_applications_proto_v1_pod_proto_enumTypes[1].Descriptor()
}

func (Pod_Status_Container_State) Type() preflect.EnumType {
	return &edgelq_applications_proto_v1_pod_proto_enumTypes[1]
}

func (x Pod_Status_Container_State) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Pod_Status_Container_State.ProtoReflect.Descriptor instead.
func (Pod_Status_Container_State) EnumDescriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_pod_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

// Pod Resource
type Pod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Pod
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// Display name of Pod
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// Optional. Description of the Pod.
	Description string          `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	Spec        *common.PodSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	// Optional managing distribution.
	Distribution *distribution.Reference `protobuf:"bytes,6,opt,customtype=Reference,name=distribution,proto3" json:"distribution,omitempty" firestore:"distribution"`
	Status       *Pod_Status             `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
}

func (m *Pod) Reset() {
	*m = Pod{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_pod_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Pod) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Pod) ProtoMessage() {}

func (m *Pod) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_pod_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Pod) GotenMessage() {}

// Deprecated, Use Pod.ProtoReflect.Descriptor instead.
func (*Pod) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_pod_proto_rawDescGZIP(), []int{0}
}

func (m *Pod) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Pod) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Pod) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Pod) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Pod) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Pod) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Pod) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Pod) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Pod) GetSpec() *common.PodSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Pod) GetDistribution() *distribution.Reference {
	if m != nil {
		return m.Distribution
	}
	return nil
}

func (m *Pod) GetStatus() *Pod_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Pod) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Pod"))
	}
	m.Name = fv
}

func (m *Pod) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Pod"))
	}
	m.Metadata = fv
}

func (m *Pod) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Pod"))
	}
	m.DisplayName = fv
}

func (m *Pod) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Pod"))
	}
	m.Description = fv
}

func (m *Pod) SetSpec(fv *common.PodSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "Pod"))
	}
	m.Spec = fv
}

func (m *Pod) SetDistribution(fv *distribution.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Distribution", "Pod"))
	}
	m.Distribution = fv
}

func (m *Pod) SetStatus(fv *Pod_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Pod"))
	}
	m.Status = fv
}

// Status defines the status of a Pod
type Pod_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Phase is the state of the entire Pod.
	Phase Pod_Status_Phase `protobuf:"varint,1,opt,name=phase,proto3,enum=ntt.applications.v1.Pod_Status_Phase" json:"phase,omitempty" firestore:"phase"`
	// container_statuses lists individual status of the containers.
	ContainerStatuses []*Pod_Status_Container `protobuf:"bytes,2,rep,name=container_statuses,json=containerStatuses,proto3" json:"container_statuses,omitempty" firestore:"containerStatuses"`
	// Error message if Status.Phase is one of the failure phases.
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty" firestore:"error"`
	// Some of the Pod UP errors are retried and the failure count
	// is reported here
	FailureCount int32 `protobuf:"varint,4,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty" firestore:"failureCount"`
}

func (m *Pod_Status) Reset() {
	*m = Pod_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_pod_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Pod_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Pod_Status) ProtoMessage() {}

func (m *Pod_Status) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_pod_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Pod_Status) GotenMessage() {}

// Deprecated, Use Pod_Status.ProtoReflect.Descriptor instead.
func (*Pod_Status) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_pod_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Pod_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Pod_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Pod_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Pod_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Pod_Status) GetPhase() Pod_Status_Phase {
	if m != nil {
		return m.Phase
	}
	return Pod_Status_PHASE_UNSPECIFIED
}

func (m *Pod_Status) GetContainerStatuses() []*Pod_Status_Container {
	if m != nil {
		return m.ContainerStatuses
	}
	return nil
}

func (m *Pod_Status) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Pod_Status) GetFailureCount() int32 {
	if m != nil {
		return m.FailureCount
	}
	return int32(0)
}

func (m *Pod_Status) SetPhase(fv Pod_Status_Phase) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Phase", "Pod_Status"))
	}
	m.Phase = fv
}

func (m *Pod_Status) SetContainerStatuses(fv []*Pod_Status_Container) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerStatuses", "Pod_Status"))
	}
	m.ContainerStatuses = fv
}

func (m *Pod_Status) SetError(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Error", "Pod_Status"))
	}
	m.Error = fv
}

func (m *Pod_Status) SetFailureCount(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FailureCount", "Pod_Status"))
	}
	m.FailureCount = fv
}

// Container defines status of a Container.
type Pod_Status_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// name is the name of the container
	Name       string                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	State      Pod_Status_Container_State            `protobuf:"varint,3,opt,name=state,proto3,enum=ntt.applications.v1.Pod_Status_Container_State" json:"state,omitempty" firestore:"state"`
	Waiting    *Pod_Status_Container_StateWaiting    `protobuf:"bytes,4,opt,name=waiting,proto3" json:"waiting,omitempty" firestore:"waiting"`
	Running    *Pod_Status_Container_StateRunning    `protobuf:"bytes,5,opt,name=running,proto3" json:"running,omitempty" firestore:"running"`
	Terminated *Pod_Status_Container_StateTerminated `protobuf:"bytes,6,opt,name=terminated,proto3" json:"terminated,omitempty" firestore:"terminated"`
}

func (m *Pod_Status_Container) Reset() {
	*m = Pod_Status_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_pod_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Pod_Status_Container) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Pod_Status_Container) ProtoMessage() {}

func (m *Pod_Status_Container) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_pod_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Pod_Status_Container) GotenMessage() {}

// Deprecated, Use Pod_Status_Container.ProtoReflect.Descriptor instead.
func (*Pod_Status_Container) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_pod_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Pod_Status_Container) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Pod_Status_Container) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Pod_Status_Container) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Pod_Status_Container) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Pod_Status_Container) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pod_Status_Container) GetState() Pod_Status_Container_State {
	if m != nil {
		return m.State
	}
	return Pod_Status_Container_STATE_UNSPECIFIED
}

func (m *Pod_Status_Container) GetWaiting() *Pod_Status_Container_StateWaiting {
	if m != nil {
		return m.Waiting
	}
	return nil
}

func (m *Pod_Status_Container) GetRunning() *Pod_Status_Container_StateRunning {
	if m != nil {
		return m.Running
	}
	return nil
}

func (m *Pod_Status_Container) GetTerminated() *Pod_Status_Container_StateTerminated {
	if m != nil {
		return m.Terminated
	}
	return nil
}

func (m *Pod_Status_Container) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Pod_Status_Container"))
	}
	m.Name = fv
}

func (m *Pod_Status_Container) SetState(fv Pod_Status_Container_State) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "Pod_Status_Container"))
	}
	m.State = fv
}

func (m *Pod_Status_Container) SetWaiting(fv *Pod_Status_Container_StateWaiting) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Waiting", "Pod_Status_Container"))
	}
	m.Waiting = fv
}

func (m *Pod_Status_Container) SetRunning(fv *Pod_Status_Container_StateRunning) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Running", "Pod_Status_Container"))
	}
	m.Running = fv
}

func (m *Pod_Status_Container) SetTerminated(fv *Pod_Status_Container_StateTerminated) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Terminated", "Pod_Status_Container"))
	}
	m.Terminated = fv
}

type Pod_Status_Container_StateWaiting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// reason explains why the container is waiting now.
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty" firestore:"reason"`
	// message gives a human readable message that explains the state.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" firestore:"message"`
}

func (m *Pod_Status_Container_StateWaiting) Reset() {
	*m = Pod_Status_Container_StateWaiting{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_pod_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Pod_Status_Container_StateWaiting) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Pod_Status_Container_StateWaiting) ProtoMessage() {}

func (m *Pod_Status_Container_StateWaiting) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_pod_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Pod_Status_Container_StateWaiting) GotenMessage() {}

// Deprecated, Use Pod_Status_Container_StateWaiting.ProtoReflect.Descriptor instead.
func (*Pod_Status_Container_StateWaiting) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_pod_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (m *Pod_Status_Container_StateWaiting) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Pod_Status_Container_StateWaiting) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Pod_Status_Container_StateWaiting) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Pod_Status_Container_StateWaiting) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Pod_Status_Container_StateWaiting) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Pod_Status_Container_StateWaiting) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Pod_Status_Container_StateWaiting) SetReason(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reason", "Pod_Status_Container_StateWaiting"))
	}
	m.Reason = fv
}

func (m *Pod_Status_Container_StateWaiting) SetMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Message", "Pod_Status_Container_StateWaiting"))
	}
	m.Message = fv
}

type Pod_Status_Container_StateRunning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// started_at indicates when the container started at.
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty" firestore:"startedAt"`
}

func (m *Pod_Status_Container_StateRunning) Reset() {
	*m = Pod_Status_Container_StateRunning{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_pod_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Pod_Status_Container_StateRunning) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Pod_Status_Container_StateRunning) ProtoMessage() {}

func (m *Pod_Status_Container_StateRunning) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_pod_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Pod_Status_Container_StateRunning) GotenMessage() {}

// Deprecated, Use Pod_Status_Container_StateRunning.ProtoReflect.Descriptor instead.
func (*Pod_Status_Container_StateRunning) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_pod_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (m *Pod_Status_Container_StateRunning) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Pod_Status_Container_StateRunning) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Pod_Status_Container_StateRunning) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Pod_Status_Container_StateRunning) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Pod_Status_Container_StateRunning) GetStartedAt() *timestamppb.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *Pod_Status_Container_StateRunning) SetStartedAt(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartedAt", "Pod_Status_Container_StateRunning"))
	}
	m.StartedAt = fv
}

type Pod_Status_Container_StateTerminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// exit_code is the exist code that the process returns at the end.
	ExitCode int32 `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty" firestore:"exitCode"`
	// signal is the signal used to kill the process.
	Signal int32 `protobuf:"varint,2,opt,name=signal,proto3" json:"signal,omitempty" firestore:"signal"`
	// reason explains why the container is terminated.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty" firestore:"reason"`
	// message has detailed human readable message.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty" firestore:"message"`
	// started_at indicates when the container started at.
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty" firestore:"startedAt"`
	// finished_at indicates when the container exited at.
	FinishedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty" firestore:"finishedAt"`
	// containerID is the ID of the container when it was running.
	ContainerId string `protobuf:"bytes,7,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty" firestore:"containerId"`
}

func (m *Pod_Status_Container_StateTerminated) Reset() {
	*m = Pod_Status_Container_StateTerminated{}
	if protoimpl.UnsafeEnabled {
		mi := &edgelq_applications_proto_v1_pod_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Pod_Status_Container_StateTerminated) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Pod_Status_Container_StateTerminated) ProtoMessage() {}

func (m *Pod_Status_Container_StateTerminated) ProtoReflect() preflect.Message {
	mi := &edgelq_applications_proto_v1_pod_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Pod_Status_Container_StateTerminated) GotenMessage() {}

// Deprecated, Use Pod_Status_Container_StateTerminated.ProtoReflect.Descriptor instead.
func (*Pod_Status_Container_StateTerminated) Descriptor() ([]byte, []int) {
	return edgelq_applications_proto_v1_pod_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (m *Pod_Status_Container_StateTerminated) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Pod_Status_Container_StateTerminated) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Pod_Status_Container_StateTerminated) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Pod_Status_Container_StateTerminated) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Pod_Status_Container_StateTerminated) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return int32(0)
}

func (m *Pod_Status_Container_StateTerminated) GetSignal() int32 {
	if m != nil {
		return m.Signal
	}
	return int32(0)
}

func (m *Pod_Status_Container_StateTerminated) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Pod_Status_Container_StateTerminated) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Pod_Status_Container_StateTerminated) GetStartedAt() *timestamppb.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *Pod_Status_Container_StateTerminated) GetFinishedAt() *timestamppb.Timestamp {
	if m != nil {
		return m.FinishedAt
	}
	return nil
}

func (m *Pod_Status_Container_StateTerminated) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *Pod_Status_Container_StateTerminated) SetExitCode(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExitCode", "Pod_Status_Container_StateTerminated"))
	}
	m.ExitCode = fv
}

func (m *Pod_Status_Container_StateTerminated) SetSignal(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Signal", "Pod_Status_Container_StateTerminated"))
	}
	m.Signal = fv
}

func (m *Pod_Status_Container_StateTerminated) SetReason(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Reason", "Pod_Status_Container_StateTerminated"))
	}
	m.Reason = fv
}

func (m *Pod_Status_Container_StateTerminated) SetMessage(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Message", "Pod_Status_Container_StateTerminated"))
	}
	m.Message = fv
}

func (m *Pod_Status_Container_StateTerminated) SetStartedAt(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StartedAt", "Pod_Status_Container_StateTerminated"))
	}
	m.StartedAt = fv
}

func (m *Pod_Status_Container_StateTerminated) SetFinishedAt(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FinishedAt", "Pod_Status_Container_StateTerminated"))
	}
	m.FinishedAt = fv
}

func (m *Pod_Status_Container_StateTerminated) SetContainerId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContainerId", "Pod_Status_Container_StateTerminated"))
	}
	m.ContainerId = fv
}

var edgelq_applications_proto_v1_pod_proto preflect.FileDescriptor

var edgelq_applications_proto_v1_pod_proto_rawDesc = []byte{
	0x0a, 0x26, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x29, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x10, 0x0a, 0x03,
	0x50, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xb2, 0xda, 0x21, 0x07, 0x0a, 0x05, 0x0a, 0x03, 0x50, 0x6f, 0x64, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a,
	0x05, 0x22, 0x03, 0x08, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x2a, 0x05,
	0x22, 0x03, 0x08, 0x80, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x12,
	0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x06, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xe2, 0x09, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xdf, 0x06, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x50, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x50, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x40,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x49, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x93, 0x02, 0x0a, 0x0f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x55, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x22, 0xa3, 0x01, 0x0a, 0x05, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x44, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x3a, 0x91,
	0x04, 0xea, 0x41, 0x4d, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6f,
	0x64, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x64,
	0x7d, 0x92, 0xd9, 0x21, 0x9e, 0x01, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x04, 0x70, 0x6f,
	0x64, 0x73, 0x1a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x18, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x38, 0x05, 0x42, 0x6b, 0x08, 0x02, 0x12, 0x06, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x0f, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x11, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0xb2, 0xdf, 0x21, 0xa5, 0x01, 0x0a, 0xa2, 0x01, 0x0a, 0x75, 0x0a, 0x0d,
	0x62, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x2a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d,
	0x2f, 0x70, 0x6f, 0x64, 0x73, 0x2f, 0x2d, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2d, 0x2f, 0x70, 0x6f, 0x64, 0x73, 0x2f, 0x2d, 0x2a, 0x05, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x15, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0xda, 0x94,
	0x23, 0x25, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x09, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0xc2, 0x85, 0x2c, 0x47, 0x22, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0xf8, 0x01, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x41, 0x0a, 0x09,
	0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x64, 0xa2,
	0x80, 0xd1, 0x02, 0x43, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x64, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x76, 0x31, 0x42, 0x08, 0x50, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x64, 0x3b, 0x70, 0x6f, 0x64, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	edgelq_applications_proto_v1_pod_proto_rawDescOnce sync.Once
	edgelq_applications_proto_v1_pod_proto_rawDescData = edgelq_applications_proto_v1_pod_proto_rawDesc
)

func edgelq_applications_proto_v1_pod_proto_rawDescGZIP() []byte {
	edgelq_applications_proto_v1_pod_proto_rawDescOnce.Do(func() {
		edgelq_applications_proto_v1_pod_proto_rawDescData = protoimpl.X.CompressGZIP(edgelq_applications_proto_v1_pod_proto_rawDescData)
	})
	return edgelq_applications_proto_v1_pod_proto_rawDescData
}

var edgelq_applications_proto_v1_pod_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var edgelq_applications_proto_v1_pod_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var edgelq_applications_proto_v1_pod_proto_goTypes = []interface{}{
	(Pod_Status_Phase)(0),                        // 0: ntt.applications.v1.Pod_Status_Phase
	(Pod_Status_Container_State)(0),              // 1: ntt.applications.v1.Pod_Status_Container_State
	(*Pod)(nil),                                  // 2: ntt.applications.v1.Pod
	(*Pod_Status)(nil),                           // 3: ntt.applications.v1.Pod.Status
	(*Pod_Status_Container)(nil),                 // 4: ntt.applications.v1.Pod.Status.Container
	(*Pod_Status_Container_StateWaiting)(nil),    // 5: ntt.applications.v1.Pod.Status.Container.StateWaiting
	(*Pod_Status_Container_StateRunning)(nil),    // 6: ntt.applications.v1.Pod.Status.Container.StateRunning
	(*Pod_Status_Container_StateTerminated)(nil), // 7: ntt.applications.v1.Pod.Status.Container.StateTerminated
	(*meta.Meta)(nil),                            // 8: goten.types.Meta
	(*common.PodSpec)(nil),                       // 9: ntt.applications.v1.PodSpec
	(*timestamppb.Timestamp)(nil),                // 10: google.protobuf.Timestamp
}
var edgelq_applications_proto_v1_pod_proto_depIdxs = []int32{
	8,  // 0: ntt.applications.v1.Pod.metadata:type_name -> goten.types.Meta
	9,  // 1: ntt.applications.v1.Pod.spec:type_name -> ntt.applications.v1.PodSpec
	3,  // 2: ntt.applications.v1.Pod.status:type_name -> ntt.applications.v1.Pod.Status
	0,  // 3: ntt.applications.v1.Pod.Status.phase:type_name -> ntt.applications.v1.Pod_Status_Phase
	4,  // 4: ntt.applications.v1.Pod.Status.container_statuses:type_name -> ntt.applications.v1.Pod.Status.Container
	1,  // 5: ntt.applications.v1.Pod.Status.Container.state:type_name -> ntt.applications.v1.Pod_Status_Container_State
	5,  // 6: ntt.applications.v1.Pod.Status.Container.waiting:type_name -> ntt.applications.v1.Pod.Status.Container.StateWaiting
	6,  // 7: ntt.applications.v1.Pod.Status.Container.running:type_name -> ntt.applications.v1.Pod.Status.Container.StateRunning
	7,  // 8: ntt.applications.v1.Pod.Status.Container.terminated:type_name -> ntt.applications.v1.Pod.Status.Container.StateTerminated
	10, // 9: ntt.applications.v1.Pod.Status.Container.StateRunning.started_at:type_name -> google.protobuf.Timestamp
	10, // 10: ntt.applications.v1.Pod.Status.Container.StateTerminated.started_at:type_name -> google.protobuf.Timestamp
	10, // 11: ntt.applications.v1.Pod.Status.Container.StateTerminated.finished_at:type_name -> google.protobuf.Timestamp
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { edgelq_applications_proto_v1_pod_proto_init() }
func edgelq_applications_proto_v1_pod_proto_init() {
	if edgelq_applications_proto_v1_pod_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		edgelq_applications_proto_v1_pod_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_pod_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pod_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_pod_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pod_Status_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_pod_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pod_Status_Container_StateWaiting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_pod_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pod_Status_Container_StateRunning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		edgelq_applications_proto_v1_pod_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pod_Status_Container_StateTerminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: edgelq_applications_proto_v1_pod_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           edgelq_applications_proto_v1_pod_proto_goTypes,
		DependencyIndexes: edgelq_applications_proto_v1_pod_proto_depIdxs,
		EnumInfos:         edgelq_applications_proto_v1_pod_proto_enumTypes,
		MessageInfos:      edgelq_applications_proto_v1_pod_proto_msgTypes,
	}.Build()
	edgelq_applications_proto_v1_pod_proto = out.File
	edgelq_applications_proto_v1_pod_proto_rawDesc = nil
	edgelq_applications_proto_v1_pod_proto_goTypes = nil
	edgelq_applications_proto_v1_pod_proto_depIdxs = nil
}
