// Code generated by protoc-gen-goten-object
// File: edgelq/applications/proto/v1/pod.proto
// DO NOT EDIT!!!

package pod

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	common "github.com/cloudwan/edgelq-sdk/applications/resources/v1/common"
	distribution "github.com/cloudwan/edgelq-sdk/applications/resources/v1/distribution"
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1/project"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &common.PodSpec{}
	_ = &distribution.Distribution{}
	_ = &project.Project{}
	_ = &timestamppb.Timestamp{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Pod_FieldPath interface {
	gotenobject.FieldPath
	Selector() Pod_FieldPathSelector
	Get(source *Pod) []interface{}
	GetSingle(source *Pod) (interface{}, bool)
	ClearValue(item *Pod)

	// Those methods build corresponding Pod_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Pod_FieldPathValue
	WithIArrayOfValues(values interface{}) Pod_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Pod_FieldPathArrayItemValue
}

type Pod_FieldPathSelector int32

const (
	Pod_FieldPathSelectorName         Pod_FieldPathSelector = 0
	Pod_FieldPathSelectorMetadata     Pod_FieldPathSelector = 1
	Pod_FieldPathSelectorDisplayName  Pod_FieldPathSelector = 2
	Pod_FieldPathSelectorDescription  Pod_FieldPathSelector = 3
	Pod_FieldPathSelectorSpec         Pod_FieldPathSelector = 4
	Pod_FieldPathSelectorDistribution Pod_FieldPathSelector = 5
	Pod_FieldPathSelectorStatus       Pod_FieldPathSelector = 6
)

func (s Pod_FieldPathSelector) String() string {
	switch s {
	case Pod_FieldPathSelectorName:
		return "name"
	case Pod_FieldPathSelectorMetadata:
		return "metadata"
	case Pod_FieldPathSelectorDisplayName:
		return "display_name"
	case Pod_FieldPathSelectorDescription:
		return "description"
	case Pod_FieldPathSelectorSpec:
		return "spec"
	case Pod_FieldPathSelectorDistribution:
		return "distribution"
	case Pod_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for Pod: %d", s))
	}
}

func BuildPod_FieldPath(fp gotenobject.RawFieldPath) (Pod_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Pod")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorName}, nil
		case "metadata":
			return &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorDisplayName}, nil
		case "description":
			return &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorDescription}, nil
		case "spec":
			return &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorSpec}, nil
		case "distribution":
			return &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorDistribution}, nil
		case "status":
			return &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Pod_FieldSubPath{selector: Pod_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := common.BuildPodSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Pod_FieldSubPath{selector: Pod_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildPodStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Pod_FieldSubPath{selector: Pod_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Pod", fp)
}

func ParsePod_FieldPath(rawField string) (Pod_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPod_FieldPath(fp)
}

func MustParsePod_FieldPath(rawField string) Pod_FieldPath {
	fp, err := ParsePod_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Pod_FieldTerminalPath struct {
	selector Pod_FieldPathSelector
}

var _ Pod_FieldPath = (*Pod_FieldTerminalPath)(nil)

func (fp *Pod_FieldTerminalPath) Selector() Pod_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Pod_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Pod_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Pod
func (fp *Pod_FieldTerminalPath) Get(source *Pod) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Pod_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Pod_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Pod_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Pod_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case Pod_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case Pod_FieldPathSelectorDistribution:
			if source.Distribution != nil {
				values = append(values, source.Distribution)
			}
		case Pod_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Pod: %d", fp.selector))
		}
	}
	return
}

func (fp *Pod_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Pod))
}

// GetSingle returns value pointed by specific field of from source Pod
func (fp *Pod_FieldTerminalPath) GetSingle(source *Pod) (interface{}, bool) {
	switch fp.selector {
	case Pod_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Pod_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Pod_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Pod_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case Pod_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case Pod_FieldPathSelectorDistribution:
		res := source.GetDistribution()
		return res, res != nil
	case Pod_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Pod: %d", fp.selector))
	}
}

func (fp *Pod_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Pod))
}

// GetDefault returns a default value of the field type
func (fp *Pod_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Pod_FieldPathSelectorName:
		return (*Name)(nil)
	case Pod_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case Pod_FieldPathSelectorDisplayName:
		return ""
	case Pod_FieldPathSelectorDescription:
		return ""
	case Pod_FieldPathSelectorSpec:
		return (*common.PodSpec)(nil)
	case Pod_FieldPathSelectorDistribution:
		return (*distribution.Reference)(nil)
	case Pod_FieldPathSelectorStatus:
		return (*Pod_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Pod: %d", fp.selector))
	}
}

func (fp *Pod_FieldTerminalPath) ClearValue(item *Pod) {
	if item != nil {
		switch fp.selector {
		case Pod_FieldPathSelectorName:
			item.Name = nil
		case Pod_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Pod_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Pod_FieldPathSelectorDescription:
			item.Description = ""
		case Pod_FieldPathSelectorSpec:
			item.Spec = nil
		case Pod_FieldPathSelectorDistribution:
			item.Distribution = nil
		case Pod_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Pod: %d", fp.selector))
		}
	}
}

func (fp *Pod_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Pod))
}

// IsLeaf - whether field path is holds simple value
func (fp *Pod_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Pod_FieldPathSelectorName ||
		fp.selector == Pod_FieldPathSelectorDisplayName ||
		fp.selector == Pod_FieldPathSelectorDescription ||
		fp.selector == Pod_FieldPathSelectorDistribution
}

func (fp *Pod_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Pod_FieldTerminalPath) WithIValue(value interface{}) Pod_FieldPathValue {
	switch fp.selector {
	case Pod_FieldPathSelectorName:
		return &Pod_FieldTerminalPathValue{Pod_FieldTerminalPath: *fp, value: value.(*Name)}
	case Pod_FieldPathSelectorMetadata:
		return &Pod_FieldTerminalPathValue{Pod_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case Pod_FieldPathSelectorDisplayName:
		return &Pod_FieldTerminalPathValue{Pod_FieldTerminalPath: *fp, value: value.(string)}
	case Pod_FieldPathSelectorDescription:
		return &Pod_FieldTerminalPathValue{Pod_FieldTerminalPath: *fp, value: value.(string)}
	case Pod_FieldPathSelectorSpec:
		return &Pod_FieldTerminalPathValue{Pod_FieldTerminalPath: *fp, value: value.(*common.PodSpec)}
	case Pod_FieldPathSelectorDistribution:
		return &Pod_FieldTerminalPathValue{Pod_FieldTerminalPath: *fp, value: value.(*distribution.Reference)}
	case Pod_FieldPathSelectorStatus:
		return &Pod_FieldTerminalPathValue{Pod_FieldTerminalPath: *fp, value: value.(*Pod_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod: %d", fp.selector))
	}
}

func (fp *Pod_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Pod_FieldTerminalPath) WithIArrayOfValues(values interface{}) Pod_FieldPathArrayOfValues {
	fpaov := &Pod_FieldTerminalPathArrayOfValues{Pod_FieldTerminalPath: *fp}
	switch fp.selector {
	case Pod_FieldPathSelectorName:
		return &Pod_FieldTerminalPathArrayOfValues{Pod_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Pod_FieldPathSelectorMetadata:
		return &Pod_FieldTerminalPathArrayOfValues{Pod_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case Pod_FieldPathSelectorDisplayName:
		return &Pod_FieldTerminalPathArrayOfValues{Pod_FieldTerminalPath: *fp, values: values.([]string)}
	case Pod_FieldPathSelectorDescription:
		return &Pod_FieldTerminalPathArrayOfValues{Pod_FieldTerminalPath: *fp, values: values.([]string)}
	case Pod_FieldPathSelectorSpec:
		return &Pod_FieldTerminalPathArrayOfValues{Pod_FieldTerminalPath: *fp, values: values.([]*common.PodSpec)}
	case Pod_FieldPathSelectorDistribution:
		return &Pod_FieldTerminalPathArrayOfValues{Pod_FieldTerminalPath: *fp, values: values.([]*distribution.Reference)}
	case Pod_FieldPathSelectorStatus:
		return &Pod_FieldTerminalPathArrayOfValues{Pod_FieldTerminalPath: *fp, values: values.([]*Pod_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod: %d", fp.selector))
	}
	return fpaov
}

func (fp *Pod_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Pod_FieldTerminalPath) WithIArrayItemValue(value interface{}) Pod_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Pod: %d", fp.selector))
	}
}

func (fp *Pod_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Pod_FieldSubPath struct {
	selector Pod_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Pod_FieldPath = (*Pod_FieldSubPath)(nil)

func (fps *Pod_FieldSubPath) Selector() Pod_FieldPathSelector {
	return fps.selector
}
func (fps *Pod_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *Pod_FieldSubPath) AsSpecSubPath() (common.PodSpec_FieldPath, bool) {
	res, ok := fps.subPath.(common.PodSpec_FieldPath)
	return res, ok
}
func (fps *Pod_FieldSubPath) AsStatusSubPath() (PodStatus_FieldPath, bool) {
	res, ok := fps.subPath.(PodStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Pod_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Pod_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Pod
func (fps *Pod_FieldSubPath) Get(source *Pod) (values []interface{}) {
	switch fps.selector {
	case Pod_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case Pod_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	case Pod_FieldPathSelectorStatus:
		values = append(values, fps.subPath.GetRaw(source.GetStatus())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Pod: %d", fps.selector))
	}
	return
}

func (fps *Pod_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Pod))
}

// GetSingle returns value of selected field from source Pod
func (fps *Pod_FieldSubPath) GetSingle(source *Pod) (interface{}, bool) {
	switch fps.selector {
	case Pod_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Pod_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case Pod_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for Pod: %d", fps.selector))
	}
}

func (fps *Pod_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Pod))
}

// GetDefault returns a default value of the field type
func (fps *Pod_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Pod_FieldSubPath) ClearValue(item *Pod) {
	if item != nil {
		switch fps.selector {
		case Pod_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Pod_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case Pod_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for Pod: %d", fps.selector))
		}
	}
}

func (fps *Pod_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Pod))
}

// IsLeaf - whether field path is holds simple value
func (fps *Pod_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Pod_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Pod_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Pod_FieldSubPath) WithIValue(value interface{}) Pod_FieldPathValue {
	return &Pod_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Pod_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Pod_FieldSubPath) WithIArrayOfValues(values interface{}) Pod_FieldPathArrayOfValues {
	return &Pod_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Pod_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Pod_FieldSubPath) WithIArrayItemValue(value interface{}) Pod_FieldPathArrayItemValue {
	return &Pod_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Pod_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Pod_FieldPathValue allows storing values for Pod fields according to their type
type Pod_FieldPathValue interface {
	Pod_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Pod)
	CompareWith(*Pod) (cmp int, comparable bool)
}

func ParsePod_FieldPathValue(pathStr, valueStr string) (Pod_FieldPathValue, error) {
	fp, err := ParsePod_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Pod field path value from %s: %v", valueStr, err)
	}
	return fpv.(Pod_FieldPathValue), nil
}

func MustParsePod_FieldPathValue(pathStr, valueStr string) Pod_FieldPathValue {
	fpv, err := ParsePod_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Pod_FieldTerminalPathValue struct {
	Pod_FieldTerminalPath
	value interface{}
}

var _ Pod_FieldPathValue = (*Pod_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Pod' as interface{}
func (fpv *Pod_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Pod_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Pod_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *Pod_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Pod_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Pod_FieldTerminalPathValue) AsSpecValue() (*common.PodSpec, bool) {
	res, ok := fpv.value.(*common.PodSpec)
	return res, ok
}
func (fpv *Pod_FieldTerminalPathValue) AsDistributionValue() (*distribution.Reference, bool) {
	res, ok := fpv.value.(*distribution.Reference)
	return res, ok
}
func (fpv *Pod_FieldTerminalPathValue) AsStatusValue() (*Pod_Status, bool) {
	res, ok := fpv.value.(*Pod_Status)
	return res, ok
}

// SetTo stores value for selected field for object Pod
func (fpv *Pod_FieldTerminalPathValue) SetTo(target **Pod) {
	if *target == nil {
		*target = new(Pod)
	}
	switch fpv.selector {
	case Pod_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Pod_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case Pod_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Pod_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case Pod_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*common.PodSpec)
	case Pod_FieldPathSelectorDistribution:
		(*target).Distribution = fpv.value.(*distribution.Reference)
	case Pod_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*Pod_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for Pod: %d", fpv.selector))
	}
}

func (fpv *Pod_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Pod)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Pod_FieldTerminalPathValue' with the value under path in 'Pod'.
func (fpv *Pod_FieldTerminalPathValue) CompareWith(source *Pod) (int, bool) {
	switch fpv.selector {
	case Pod_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Pod_FieldPathSelectorMetadata:
		return 0, false
	case Pod_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Pod_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Pod_FieldPathSelectorSpec:
		return 0, false
	case Pod_FieldPathSelectorDistribution:
		leftValue := fpv.value.(*distribution.Reference)
		rightValue := source.GetDistribution()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Pod_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Pod: %d", fpv.selector))
	}
}

func (fpv *Pod_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Pod))
}

type Pod_FieldSubPathValue struct {
	Pod_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Pod_FieldPathValue = (*Pod_FieldSubPathValue)(nil)

func (fpvs *Pod_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Pod_FieldSubPathValue) AsSpecPathValue() (common.PodSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.PodSpec_FieldPathValue)
	return res, ok
}
func (fpvs *Pod_FieldSubPathValue) AsStatusPathValue() (PodStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(PodStatus_FieldPathValue)
	return res, ok
}

func (fpvs *Pod_FieldSubPathValue) SetTo(target **Pod) {
	if *target == nil {
		*target = new(Pod)
	}
	switch fpvs.Selector() {
	case Pod_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Pod_FieldPathSelectorSpec:
		fpvs.subPathValue.(common.PodSpec_FieldPathValue).SetTo(&(*target).Spec)
	case Pod_FieldPathSelectorStatus:
		fpvs.subPathValue.(PodStatus_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for Pod: %d", fpvs.Selector()))
	}
}

func (fpvs *Pod_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Pod)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Pod_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Pod_FieldSubPathValue) CompareWith(source *Pod) (int, bool) {
	switch fpvs.Selector() {
	case Pod_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Pod_FieldPathSelectorSpec:
		return fpvs.subPathValue.(common.PodSpec_FieldPathValue).CompareWith(source.GetSpec())
	case Pod_FieldPathSelectorStatus:
		return fpvs.subPathValue.(PodStatus_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for Pod: %d", fpvs.Selector()))
	}
}

func (fpvs *Pod_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Pod))
}

// Pod_FieldPathArrayItemValue allows storing single item in Path-specific values for Pod according to their type
// Present only for array (repeated) types.
type Pod_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Pod_FieldPath
	ContainsValue(*Pod) bool
}

// ParsePod_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePod_FieldPathArrayItemValue(pathStr, valueStr string) (Pod_FieldPathArrayItemValue, error) {
	fp, err := ParsePod_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Pod field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Pod_FieldPathArrayItemValue), nil
}

func MustParsePod_FieldPathArrayItemValue(pathStr, valueStr string) Pod_FieldPathArrayItemValue {
	fpaiv, err := ParsePod_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Pod_FieldTerminalPathArrayItemValue struct {
	Pod_FieldTerminalPath
	value interface{}
}

var _ Pod_FieldPathArrayItemValue = (*Pod_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Pod as interface{}
func (fpaiv *Pod_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Pod_FieldTerminalPathArrayItemValue) GetSingle(source *Pod) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Pod_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Pod))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Pod'
func (fpaiv *Pod_FieldTerminalPathArrayItemValue) ContainsValue(source *Pod) bool {
	slice := fpaiv.Pod_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Pod_FieldSubPathArrayItemValue struct {
	Pod_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Pod_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Pod_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Pod_FieldSubPathArrayItemValue) AsSpecPathItemValue() (common.PodSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.PodSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Pod_FieldSubPathArrayItemValue) AsStatusPathItemValue() (PodStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(PodStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Pod'
func (fpaivs *Pod_FieldSubPathArrayItemValue) ContainsValue(source *Pod) bool {
	switch fpaivs.Selector() {
	case Pod_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Pod_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(common.PodSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case Pod_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(PodStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for Pod: %d", fpaivs.Selector()))
	}
}

// Pod_FieldPathArrayOfValues allows storing slice of values for Pod fields according to their type
type Pod_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Pod_FieldPath
}

func ParsePod_FieldPathArrayOfValues(pathStr, valuesStr string) (Pod_FieldPathArrayOfValues, error) {
	fp, err := ParsePod_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Pod field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Pod_FieldPathArrayOfValues), nil
}

func MustParsePod_FieldPathArrayOfValues(pathStr, valuesStr string) Pod_FieldPathArrayOfValues {
	fpaov, err := ParsePod_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Pod_FieldTerminalPathArrayOfValues struct {
	Pod_FieldTerminalPath
	values interface{}
}

var _ Pod_FieldPathArrayOfValues = (*Pod_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Pod_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Pod_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Pod_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case Pod_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Pod_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Pod_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*common.PodSpec) {
			values = append(values, v)
		}
	case Pod_FieldPathSelectorDistribution:
		for _, v := range fpaov.values.([]*distribution.Reference) {
			values = append(values, v)
		}
	case Pod_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*Pod_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Pod_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Pod_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *Pod_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Pod_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Pod_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*common.PodSpec, bool) {
	res, ok := fpaov.values.([]*common.PodSpec)
	return res, ok
}
func (fpaov *Pod_FieldTerminalPathArrayOfValues) AsDistributionArrayOfValues() ([]*distribution.Reference, bool) {
	res, ok := fpaov.values.([]*distribution.Reference)
	return res, ok
}
func (fpaov *Pod_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*Pod_Status, bool) {
	res, ok := fpaov.values.([]*Pod_Status)
	return res, ok
}

type Pod_FieldSubPathArrayOfValues struct {
	Pod_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Pod_FieldPathArrayOfValues = (*Pod_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Pod_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Pod_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Pod_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (common.PodSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.PodSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Pod_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (PodStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(PodStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PodStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() PodStatus_FieldPathSelector
	Get(source *Pod_Status) []interface{}
	GetSingle(source *Pod_Status) (interface{}, bool)
	ClearValue(item *Pod_Status)

	// Those methods build corresponding PodStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PodStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) PodStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PodStatus_FieldPathArrayItemValue
}

type PodStatus_FieldPathSelector int32

const (
	PodStatus_FieldPathSelectorPhase             PodStatus_FieldPathSelector = 0
	PodStatus_FieldPathSelectorContainerStatuses PodStatus_FieldPathSelector = 1
	PodStatus_FieldPathSelectorError             PodStatus_FieldPathSelector = 2
	PodStatus_FieldPathSelectorFailureCount      PodStatus_FieldPathSelector = 3
	PodStatus_FieldPathSelectorHealthStatus      PodStatus_FieldPathSelector = 4
)

func (s PodStatus_FieldPathSelector) String() string {
	switch s {
	case PodStatus_FieldPathSelectorPhase:
		return "phase"
	case PodStatus_FieldPathSelectorContainerStatuses:
		return "container_statuses"
	case PodStatus_FieldPathSelectorError:
		return "error"
	case PodStatus_FieldPathSelectorFailureCount:
		return "failure_count"
	case PodStatus_FieldPathSelectorHealthStatus:
		return "health_status"
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", s))
	}
}

func BuildPodStatus_FieldPath(fp gotenobject.RawFieldPath) (PodStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Pod_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "phase":
			return &PodStatus_FieldTerminalPath{selector: PodStatus_FieldPathSelectorPhase}, nil
		case "container_statuses", "containerStatuses", "container-statuses":
			return &PodStatus_FieldTerminalPath{selector: PodStatus_FieldPathSelectorContainerStatuses}, nil
		case "error":
			return &PodStatus_FieldTerminalPath{selector: PodStatus_FieldPathSelectorError}, nil
		case "failure_count", "failureCount", "failure-count":
			return &PodStatus_FieldTerminalPath{selector: PodStatus_FieldPathSelectorFailureCount}, nil
		case "health_status", "healthStatus", "health-status":
			return &PodStatus_FieldTerminalPath{selector: PodStatus_FieldPathSelectorHealthStatus}, nil
		}
	} else {
		switch fp[0] {
		case "container_statuses", "containerStatuses", "container-statuses":
			if subpath, err := BuildPodStatusContainer_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &PodStatus_FieldSubPath{selector: PodStatus_FieldPathSelectorContainerStatuses, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Pod_Status", fp)
}

func ParsePodStatus_FieldPath(rawField string) (PodStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPodStatus_FieldPath(fp)
}

func MustParsePodStatus_FieldPath(rawField string) PodStatus_FieldPath {
	fp, err := ParsePodStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PodStatus_FieldTerminalPath struct {
	selector PodStatus_FieldPathSelector
}

var _ PodStatus_FieldPath = (*PodStatus_FieldTerminalPath)(nil)

func (fp *PodStatus_FieldTerminalPath) Selector() PodStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PodStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PodStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Pod_Status
func (fp *PodStatus_FieldTerminalPath) Get(source *Pod_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PodStatus_FieldPathSelectorPhase:
			values = append(values, source.Phase)
		case PodStatus_FieldPathSelectorContainerStatuses:
			for _, value := range source.GetContainerStatuses() {
				values = append(values, value)
			}
		case PodStatus_FieldPathSelectorError:
			values = append(values, source.Error)
		case PodStatus_FieldPathSelectorFailureCount:
			values = append(values, source.FailureCount)
		case PodStatus_FieldPathSelectorHealthStatus:
			values = append(values, source.HealthStatus)
		default:
			panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *PodStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Pod_Status))
}

// GetSingle returns value pointed by specific field of from source Pod_Status
func (fp *PodStatus_FieldTerminalPath) GetSingle(source *Pod_Status) (interface{}, bool) {
	switch fp.selector {
	case PodStatus_FieldPathSelectorPhase:
		return source.GetPhase(), source != nil
	case PodStatus_FieldPathSelectorContainerStatuses:
		res := source.GetContainerStatuses()
		return res, res != nil
	case PodStatus_FieldPathSelectorError:
		return source.GetError(), source != nil
	case PodStatus_FieldPathSelectorFailureCount:
		return source.GetFailureCount(), source != nil
	case PodStatus_FieldPathSelectorHealthStatus:
		return source.GetHealthStatus(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fp.selector))
	}
}

func (fp *PodStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Pod_Status))
}

// GetDefault returns a default value of the field type
func (fp *PodStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PodStatus_FieldPathSelectorPhase:
		return Pod_Status_PHASE_UNSPECIFIED
	case PodStatus_FieldPathSelectorContainerStatuses:
		return ([]*Pod_Status_Container)(nil)
	case PodStatus_FieldPathSelectorError:
		return ""
	case PodStatus_FieldPathSelectorFailureCount:
		return int32(0)
	case PodStatus_FieldPathSelectorHealthStatus:
		return Pod_Status_HEALTH_STATUS_UNKNOWN
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fp.selector))
	}
}

func (fp *PodStatus_FieldTerminalPath) ClearValue(item *Pod_Status) {
	if item != nil {
		switch fp.selector {
		case PodStatus_FieldPathSelectorPhase:
			item.Phase = Pod_Status_PHASE_UNSPECIFIED
		case PodStatus_FieldPathSelectorContainerStatuses:
			item.ContainerStatuses = nil
		case PodStatus_FieldPathSelectorError:
			item.Error = ""
		case PodStatus_FieldPathSelectorFailureCount:
			item.FailureCount = int32(0)
		case PodStatus_FieldPathSelectorHealthStatus:
			item.HealthStatus = Pod_Status_HEALTH_STATUS_UNKNOWN
		default:
			panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fp.selector))
		}
	}
}

func (fp *PodStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Pod_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *PodStatus_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PodStatus_FieldPathSelectorPhase ||
		fp.selector == PodStatus_FieldPathSelectorError ||
		fp.selector == PodStatus_FieldPathSelectorFailureCount ||
		fp.selector == PodStatus_FieldPathSelectorHealthStatus
}

func (fp *PodStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PodStatus_FieldTerminalPath) WithIValue(value interface{}) PodStatus_FieldPathValue {
	switch fp.selector {
	case PodStatus_FieldPathSelectorPhase:
		return &PodStatus_FieldTerminalPathValue{PodStatus_FieldTerminalPath: *fp, value: value.(Pod_Status_Phase)}
	case PodStatus_FieldPathSelectorContainerStatuses:
		return &PodStatus_FieldTerminalPathValue{PodStatus_FieldTerminalPath: *fp, value: value.([]*Pod_Status_Container)}
	case PodStatus_FieldPathSelectorError:
		return &PodStatus_FieldTerminalPathValue{PodStatus_FieldTerminalPath: *fp, value: value.(string)}
	case PodStatus_FieldPathSelectorFailureCount:
		return &PodStatus_FieldTerminalPathValue{PodStatus_FieldTerminalPath: *fp, value: value.(int32)}
	case PodStatus_FieldPathSelectorHealthStatus:
		return &PodStatus_FieldTerminalPathValue{PodStatus_FieldTerminalPath: *fp, value: value.(Pod_Status_HealthStatus)}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fp.selector))
	}
}

func (fp *PodStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PodStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) PodStatus_FieldPathArrayOfValues {
	fpaov := &PodStatus_FieldTerminalPathArrayOfValues{PodStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	case PodStatus_FieldPathSelectorPhase:
		return &PodStatus_FieldTerminalPathArrayOfValues{PodStatus_FieldTerminalPath: *fp, values: values.([]Pod_Status_Phase)}
	case PodStatus_FieldPathSelectorContainerStatuses:
		return &PodStatus_FieldTerminalPathArrayOfValues{PodStatus_FieldTerminalPath: *fp, values: values.([][]*Pod_Status_Container)}
	case PodStatus_FieldPathSelectorError:
		return &PodStatus_FieldTerminalPathArrayOfValues{PodStatus_FieldTerminalPath: *fp, values: values.([]string)}
	case PodStatus_FieldPathSelectorFailureCount:
		return &PodStatus_FieldTerminalPathArrayOfValues{PodStatus_FieldTerminalPath: *fp, values: values.([]int32)}
	case PodStatus_FieldPathSelectorHealthStatus:
		return &PodStatus_FieldTerminalPathArrayOfValues{PodStatus_FieldTerminalPath: *fp, values: values.([]Pod_Status_HealthStatus)}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *PodStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PodStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) PodStatus_FieldPathArrayItemValue {
	switch fp.selector {
	case PodStatus_FieldPathSelectorContainerStatuses:
		return &PodStatus_FieldTerminalPathArrayItemValue{PodStatus_FieldTerminalPath: *fp, value: value.(*Pod_Status_Container)}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fp.selector))
	}
}

func (fp *PodStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type PodStatus_FieldSubPath struct {
	selector PodStatus_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ PodStatus_FieldPath = (*PodStatus_FieldSubPath)(nil)

func (fps *PodStatus_FieldSubPath) Selector() PodStatus_FieldPathSelector {
	return fps.selector
}
func (fps *PodStatus_FieldSubPath) AsContainerStatusesSubPath() (PodStatusContainer_FieldPath, bool) {
	res, ok := fps.subPath.(PodStatusContainer_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *PodStatus_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *PodStatus_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Pod_Status
func (fps *PodStatus_FieldSubPath) Get(source *Pod_Status) (values []interface{}) {
	switch fps.selector {
	case PodStatus_FieldPathSelectorContainerStatuses:
		for _, item := range source.GetContainerStatuses() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fps.selector))
	}
	return
}

func (fps *PodStatus_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Pod_Status))
}

// GetSingle returns value of selected field from source Pod_Status
func (fps *PodStatus_FieldSubPath) GetSingle(source *Pod_Status) (interface{}, bool) {
	switch fps.selector {
	case PodStatus_FieldPathSelectorContainerStatuses:
		if len(source.GetContainerStatuses()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetContainerStatuses()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fps.selector))
	}
}

func (fps *PodStatus_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Pod_Status))
}

// GetDefault returns a default value of the field type
func (fps *PodStatus_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *PodStatus_FieldSubPath) ClearValue(item *Pod_Status) {
	if item != nil {
		switch fps.selector {
		case PodStatus_FieldPathSelectorContainerStatuses:
			for _, subItem := range item.ContainerStatuses {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fps.selector))
		}
	}
}

func (fps *PodStatus_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Pod_Status))
}

// IsLeaf - whether field path is holds simple value
func (fps *PodStatus_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *PodStatus_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&PodStatus_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *PodStatus_FieldSubPath) WithIValue(value interface{}) PodStatus_FieldPathValue {
	return &PodStatus_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *PodStatus_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *PodStatus_FieldSubPath) WithIArrayOfValues(values interface{}) PodStatus_FieldPathArrayOfValues {
	return &PodStatus_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *PodStatus_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *PodStatus_FieldSubPath) WithIArrayItemValue(value interface{}) PodStatus_FieldPathArrayItemValue {
	return &PodStatus_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *PodStatus_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// PodStatus_FieldPathValue allows storing values for Status fields according to their type
type PodStatus_FieldPathValue interface {
	PodStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Pod_Status)
	CompareWith(*Pod_Status) (cmp int, comparable bool)
}

func ParsePodStatus_FieldPathValue(pathStr, valueStr string) (PodStatus_FieldPathValue, error) {
	fp, err := ParsePodStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(PodStatus_FieldPathValue), nil
}

func MustParsePodStatus_FieldPathValue(pathStr, valueStr string) PodStatus_FieldPathValue {
	fpv, err := ParsePodStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PodStatus_FieldTerminalPathValue struct {
	PodStatus_FieldTerminalPath
	value interface{}
}

var _ PodStatus_FieldPathValue = (*PodStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *PodStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PodStatus_FieldTerminalPathValue) AsPhaseValue() (Pod_Status_Phase, bool) {
	res, ok := fpv.value.(Pod_Status_Phase)
	return res, ok
}
func (fpv *PodStatus_FieldTerminalPathValue) AsContainerStatusesValue() ([]*Pod_Status_Container, bool) {
	res, ok := fpv.value.([]*Pod_Status_Container)
	return res, ok
}
func (fpv *PodStatus_FieldTerminalPathValue) AsErrorValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PodStatus_FieldTerminalPathValue) AsFailureCountValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *PodStatus_FieldTerminalPathValue) AsHealthStatusValue() (Pod_Status_HealthStatus, bool) {
	res, ok := fpv.value.(Pod_Status_HealthStatus)
	return res, ok
}

// SetTo stores value for selected field for object Status
func (fpv *PodStatus_FieldTerminalPathValue) SetTo(target **Pod_Status) {
	if *target == nil {
		*target = new(Pod_Status)
	}
	switch fpv.selector {
	case PodStatus_FieldPathSelectorPhase:
		(*target).Phase = fpv.value.(Pod_Status_Phase)
	case PodStatus_FieldPathSelectorContainerStatuses:
		(*target).ContainerStatuses = fpv.value.([]*Pod_Status_Container)
	case PodStatus_FieldPathSelectorError:
		(*target).Error = fpv.value.(string)
	case PodStatus_FieldPathSelectorFailureCount:
		(*target).FailureCount = fpv.value.(int32)
	case PodStatus_FieldPathSelectorHealthStatus:
		(*target).HealthStatus = fpv.value.(Pod_Status_HealthStatus)
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fpv.selector))
	}
}

func (fpv *PodStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Pod_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PodStatus_FieldTerminalPathValue' with the value under path in 'Pod_Status'.
func (fpv *PodStatus_FieldTerminalPathValue) CompareWith(source *Pod_Status) (int, bool) {
	switch fpv.selector {
	case PodStatus_FieldPathSelectorPhase:
		leftValue := fpv.value.(Pod_Status_Phase)
		rightValue := source.GetPhase()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatus_FieldPathSelectorContainerStatuses:
		return 0, false
	case PodStatus_FieldPathSelectorError:
		leftValue := fpv.value.(string)
		rightValue := source.GetError()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatus_FieldPathSelectorFailureCount:
		leftValue := fpv.value.(int32)
		rightValue := source.GetFailureCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatus_FieldPathSelectorHealthStatus:
		leftValue := fpv.value.(Pod_Status_HealthStatus)
		rightValue := source.GetHealthStatus()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fpv.selector))
	}
}

func (fpv *PodStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Pod_Status))
}

type PodStatus_FieldSubPathValue struct {
	PodStatus_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ PodStatus_FieldPathValue = (*PodStatus_FieldSubPathValue)(nil)

func (fpvs *PodStatus_FieldSubPathValue) AsContainerStatusesPathValue() (PodStatusContainer_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(PodStatusContainer_FieldPathValue)
	return res, ok
}

func (fpvs *PodStatus_FieldSubPathValue) SetTo(target **Pod_Status) {
	if *target == nil {
		*target = new(Pod_Status)
	}
	switch fpvs.Selector() {
	case PodStatus_FieldPathSelectorContainerStatuses:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fpvs.Selector()))
	}
}

func (fpvs *PodStatus_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Pod_Status)
	fpvs.SetTo(&typedObject)
}

func (fpvs *PodStatus_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *PodStatus_FieldSubPathValue) CompareWith(source *Pod_Status) (int, bool) {
	switch fpvs.Selector() {
	case PodStatus_FieldPathSelectorContainerStatuses:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fpvs.Selector()))
	}
}

func (fpvs *PodStatus_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Pod_Status))
}

// PodStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type PodStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PodStatus_FieldPath
	ContainsValue(*Pod_Status) bool
}

// ParsePodStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePodStatus_FieldPathArrayItemValue(pathStr, valueStr string) (PodStatus_FieldPathArrayItemValue, error) {
	fp, err := ParsePodStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PodStatus_FieldPathArrayItemValue), nil
}

func MustParsePodStatus_FieldPathArrayItemValue(pathStr, valueStr string) PodStatus_FieldPathArrayItemValue {
	fpaiv, err := ParsePodStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PodStatus_FieldTerminalPathArrayItemValue struct {
	PodStatus_FieldTerminalPath
	value interface{}
}

var _ PodStatus_FieldPathArrayItemValue = (*PodStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Pod_Status as interface{}
func (fpaiv *PodStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *PodStatus_FieldTerminalPathArrayItemValue) AsContainerStatusesItemValue() (*Pod_Status_Container, bool) {
	res, ok := fpaiv.value.(*Pod_Status_Container)
	return res, ok
}

func (fpaiv *PodStatus_FieldTerminalPathArrayItemValue) GetSingle(source *Pod_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PodStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Pod_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *PodStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *Pod_Status) bool {
	slice := fpaiv.PodStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type PodStatus_FieldSubPathArrayItemValue struct {
	PodStatus_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *PodStatus_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *PodStatus_FieldSubPathArrayItemValue) AsContainerStatusesPathItemValue() (PodStatusContainer_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(PodStatusContainer_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaivs *PodStatus_FieldSubPathArrayItemValue) ContainsValue(source *Pod_Status) bool {
	switch fpaivs.Selector() {
	case PodStatus_FieldPathSelectorContainerStatuses:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status: %d", fpaivs.Selector()))
	}
}

// PodStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type PodStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PodStatus_FieldPath
}

func ParsePodStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (PodStatus_FieldPathArrayOfValues, error) {
	fp, err := ParsePodStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PodStatus_FieldPathArrayOfValues), nil
}

func MustParsePodStatus_FieldPathArrayOfValues(pathStr, valuesStr string) PodStatus_FieldPathArrayOfValues {
	fpaov, err := ParsePodStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PodStatus_FieldTerminalPathArrayOfValues struct {
	PodStatus_FieldTerminalPath
	values interface{}
}

var _ PodStatus_FieldPathArrayOfValues = (*PodStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PodStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PodStatus_FieldPathSelectorPhase:
		for _, v := range fpaov.values.([]Pod_Status_Phase) {
			values = append(values, v)
		}
	case PodStatus_FieldPathSelectorContainerStatuses:
		for _, v := range fpaov.values.([][]*Pod_Status_Container) {
			values = append(values, v)
		}
	case PodStatus_FieldPathSelectorError:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PodStatus_FieldPathSelectorFailureCount:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case PodStatus_FieldPathSelectorHealthStatus:
		for _, v := range fpaov.values.([]Pod_Status_HealthStatus) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PodStatus_FieldTerminalPathArrayOfValues) AsPhaseArrayOfValues() ([]Pod_Status_Phase, bool) {
	res, ok := fpaov.values.([]Pod_Status_Phase)
	return res, ok
}
func (fpaov *PodStatus_FieldTerminalPathArrayOfValues) AsContainerStatusesArrayOfValues() ([][]*Pod_Status_Container, bool) {
	res, ok := fpaov.values.([][]*Pod_Status_Container)
	return res, ok
}
func (fpaov *PodStatus_FieldTerminalPathArrayOfValues) AsErrorArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PodStatus_FieldTerminalPathArrayOfValues) AsFailureCountArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *PodStatus_FieldTerminalPathArrayOfValues) AsHealthStatusArrayOfValues() ([]Pod_Status_HealthStatus, bool) {
	res, ok := fpaov.values.([]Pod_Status_HealthStatus)
	return res, ok
}

type PodStatus_FieldSubPathArrayOfValues struct {
	PodStatus_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ PodStatus_FieldPathArrayOfValues = (*PodStatus_FieldSubPathArrayOfValues)(nil)

func (fpsaov *PodStatus_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *PodStatus_FieldSubPathArrayOfValues) AsContainerStatusesPathArrayOfValues() (PodStatusContainer_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(PodStatusContainer_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PodStatusContainer_FieldPath interface {
	gotenobject.FieldPath
	Selector() PodStatusContainer_FieldPathSelector
	Get(source *Pod_Status_Container) []interface{}
	GetSingle(source *Pod_Status_Container) (interface{}, bool)
	ClearValue(item *Pod_Status_Container)

	// Those methods build corresponding PodStatusContainer_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PodStatusContainer_FieldPathValue
	WithIArrayOfValues(values interface{}) PodStatusContainer_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PodStatusContainer_FieldPathArrayItemValue
}

type PodStatusContainer_FieldPathSelector int32

const (
	PodStatusContainer_FieldPathSelectorName         PodStatusContainer_FieldPathSelector = 0
	PodStatusContainer_FieldPathSelectorState        PodStatusContainer_FieldPathSelector = 1
	PodStatusContainer_FieldPathSelectorWaiting      PodStatusContainer_FieldPathSelector = 2
	PodStatusContainer_FieldPathSelectorRunning      PodStatusContainer_FieldPathSelector = 3
	PodStatusContainer_FieldPathSelectorTerminated   PodStatusContainer_FieldPathSelector = 4
	PodStatusContainer_FieldPathSelectorHealthStatus PodStatusContainer_FieldPathSelector = 5
	PodStatusContainer_FieldPathSelectorServiceName  PodStatusContainer_FieldPathSelector = 6
	PodStatusContainer_FieldPathSelectorContainerIp  PodStatusContainer_FieldPathSelector = 7
	PodStatusContainer_FieldPathSelectorContainerId  PodStatusContainer_FieldPathSelector = 8
)

func (s PodStatusContainer_FieldPathSelector) String() string {
	switch s {
	case PodStatusContainer_FieldPathSelectorName:
		return "name"
	case PodStatusContainer_FieldPathSelectorState:
		return "state"
	case PodStatusContainer_FieldPathSelectorWaiting:
		return "waiting"
	case PodStatusContainer_FieldPathSelectorRunning:
		return "running"
	case PodStatusContainer_FieldPathSelectorTerminated:
		return "terminated"
	case PodStatusContainer_FieldPathSelectorHealthStatus:
		return "health_status"
	case PodStatusContainer_FieldPathSelectorServiceName:
		return "service_name"
	case PodStatusContainer_FieldPathSelectorContainerIp:
		return "container_ip"
	case PodStatusContainer_FieldPathSelectorContainerId:
		return "container_id"
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", s))
	}
}

func BuildPodStatusContainer_FieldPath(fp gotenobject.RawFieldPath) (PodStatusContainer_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Pod_Status_Container")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorName}, nil
		case "state":
			return &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorState}, nil
		case "waiting":
			return &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorWaiting}, nil
		case "running":
			return &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorRunning}, nil
		case "terminated":
			return &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorTerminated}, nil
		case "health_status", "healthStatus", "health-status":
			return &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorHealthStatus}, nil
		case "service_name", "serviceName", "service-name":
			return &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorServiceName}, nil
		case "container_ip", "containerIp", "container-ip":
			return &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorContainerIp}, nil
		case "container_id", "containerId", "container-id":
			return &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorContainerId}, nil
		}
	} else {
		switch fp[0] {
		case "waiting":
			if subpath, err := BuildPodStatusContainerStateWaiting_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &PodStatusContainer_FieldSubPath{selector: PodStatusContainer_FieldPathSelectorWaiting, subPath: subpath}, nil
			}
		case "running":
			if subpath, err := BuildPodStatusContainerStateRunning_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &PodStatusContainer_FieldSubPath{selector: PodStatusContainer_FieldPathSelectorRunning, subPath: subpath}, nil
			}
		case "terminated":
			if subpath, err := BuildPodStatusContainerStateTerminated_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &PodStatusContainer_FieldSubPath{selector: PodStatusContainer_FieldPathSelectorTerminated, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Pod_Status_Container", fp)
}

func ParsePodStatusContainer_FieldPath(rawField string) (PodStatusContainer_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPodStatusContainer_FieldPath(fp)
}

func MustParsePodStatusContainer_FieldPath(rawField string) PodStatusContainer_FieldPath {
	fp, err := ParsePodStatusContainer_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PodStatusContainer_FieldTerminalPath struct {
	selector PodStatusContainer_FieldPathSelector
}

var _ PodStatusContainer_FieldPath = (*PodStatusContainer_FieldTerminalPath)(nil)

func (fp *PodStatusContainer_FieldTerminalPath) Selector() PodStatusContainer_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PodStatusContainer_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PodStatusContainer_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Pod_Status_Container
func (fp *PodStatusContainer_FieldTerminalPath) Get(source *Pod_Status_Container) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PodStatusContainer_FieldPathSelectorName:
			values = append(values, source.Name)
		case PodStatusContainer_FieldPathSelectorState:
			values = append(values, source.State)
		case PodStatusContainer_FieldPathSelectorWaiting:
			if source.Waiting != nil {
				values = append(values, source.Waiting)
			}
		case PodStatusContainer_FieldPathSelectorRunning:
			if source.Running != nil {
				values = append(values, source.Running)
			}
		case PodStatusContainer_FieldPathSelectorTerminated:
			if source.Terminated != nil {
				values = append(values, source.Terminated)
			}
		case PodStatusContainer_FieldPathSelectorHealthStatus:
			values = append(values, source.HealthStatus)
		case PodStatusContainer_FieldPathSelectorServiceName:
			values = append(values, source.ServiceName)
		case PodStatusContainer_FieldPathSelectorContainerIp:
			values = append(values, source.ContainerIp)
		case PodStatusContainer_FieldPathSelectorContainerId:
			values = append(values, source.ContainerId)
		default:
			panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fp.selector))
		}
	}
	return
}

func (fp *PodStatusContainer_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Pod_Status_Container))
}

// GetSingle returns value pointed by specific field of from source Pod_Status_Container
func (fp *PodStatusContainer_FieldTerminalPath) GetSingle(source *Pod_Status_Container) (interface{}, bool) {
	switch fp.selector {
	case PodStatusContainer_FieldPathSelectorName:
		return source.GetName(), source != nil
	case PodStatusContainer_FieldPathSelectorState:
		return source.GetState(), source != nil
	case PodStatusContainer_FieldPathSelectorWaiting:
		res := source.GetWaiting()
		return res, res != nil
	case PodStatusContainer_FieldPathSelectorRunning:
		res := source.GetRunning()
		return res, res != nil
	case PodStatusContainer_FieldPathSelectorTerminated:
		res := source.GetTerminated()
		return res, res != nil
	case PodStatusContainer_FieldPathSelectorHealthStatus:
		return source.GetHealthStatus(), source != nil
	case PodStatusContainer_FieldPathSelectorServiceName:
		return source.GetServiceName(), source != nil
	case PodStatusContainer_FieldPathSelectorContainerIp:
		return source.GetContainerIp(), source != nil
	case PodStatusContainer_FieldPathSelectorContainerId:
		return source.GetContainerId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fp.selector))
	}
}

func (fp *PodStatusContainer_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Pod_Status_Container))
}

// GetDefault returns a default value of the field type
func (fp *PodStatusContainer_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PodStatusContainer_FieldPathSelectorName:
		return ""
	case PodStatusContainer_FieldPathSelectorState:
		return Pod_Status_Container_STATE_UNSPECIFIED
	case PodStatusContainer_FieldPathSelectorWaiting:
		return (*Pod_Status_Container_StateWaiting)(nil)
	case PodStatusContainer_FieldPathSelectorRunning:
		return (*Pod_Status_Container_StateRunning)(nil)
	case PodStatusContainer_FieldPathSelectorTerminated:
		return (*Pod_Status_Container_StateTerminated)(nil)
	case PodStatusContainer_FieldPathSelectorHealthStatus:
		return Pod_Status_HEALTH_STATUS_UNKNOWN
	case PodStatusContainer_FieldPathSelectorServiceName:
		return ""
	case PodStatusContainer_FieldPathSelectorContainerIp:
		return ""
	case PodStatusContainer_FieldPathSelectorContainerId:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fp.selector))
	}
}

func (fp *PodStatusContainer_FieldTerminalPath) ClearValue(item *Pod_Status_Container) {
	if item != nil {
		switch fp.selector {
		case PodStatusContainer_FieldPathSelectorName:
			item.Name = ""
		case PodStatusContainer_FieldPathSelectorState:
			item.State = Pod_Status_Container_STATE_UNSPECIFIED
		case PodStatusContainer_FieldPathSelectorWaiting:
			item.Waiting = nil
		case PodStatusContainer_FieldPathSelectorRunning:
			item.Running = nil
		case PodStatusContainer_FieldPathSelectorTerminated:
			item.Terminated = nil
		case PodStatusContainer_FieldPathSelectorHealthStatus:
			item.HealthStatus = Pod_Status_HEALTH_STATUS_UNKNOWN
		case PodStatusContainer_FieldPathSelectorServiceName:
			item.ServiceName = ""
		case PodStatusContainer_FieldPathSelectorContainerIp:
			item.ContainerIp = ""
		case PodStatusContainer_FieldPathSelectorContainerId:
			item.ContainerId = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fp.selector))
		}
	}
}

func (fp *PodStatusContainer_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Pod_Status_Container))
}

// IsLeaf - whether field path is holds simple value
func (fp *PodStatusContainer_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PodStatusContainer_FieldPathSelectorName ||
		fp.selector == PodStatusContainer_FieldPathSelectorState ||
		fp.selector == PodStatusContainer_FieldPathSelectorHealthStatus ||
		fp.selector == PodStatusContainer_FieldPathSelectorServiceName ||
		fp.selector == PodStatusContainer_FieldPathSelectorContainerIp ||
		fp.selector == PodStatusContainer_FieldPathSelectorContainerId
}

func (fp *PodStatusContainer_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PodStatusContainer_FieldTerminalPath) WithIValue(value interface{}) PodStatusContainer_FieldPathValue {
	switch fp.selector {
	case PodStatusContainer_FieldPathSelectorName:
		return &PodStatusContainer_FieldTerminalPathValue{PodStatusContainer_FieldTerminalPath: *fp, value: value.(string)}
	case PodStatusContainer_FieldPathSelectorState:
		return &PodStatusContainer_FieldTerminalPathValue{PodStatusContainer_FieldTerminalPath: *fp, value: value.(Pod_Status_Container_State)}
	case PodStatusContainer_FieldPathSelectorWaiting:
		return &PodStatusContainer_FieldTerminalPathValue{PodStatusContainer_FieldTerminalPath: *fp, value: value.(*Pod_Status_Container_StateWaiting)}
	case PodStatusContainer_FieldPathSelectorRunning:
		return &PodStatusContainer_FieldTerminalPathValue{PodStatusContainer_FieldTerminalPath: *fp, value: value.(*Pod_Status_Container_StateRunning)}
	case PodStatusContainer_FieldPathSelectorTerminated:
		return &PodStatusContainer_FieldTerminalPathValue{PodStatusContainer_FieldTerminalPath: *fp, value: value.(*Pod_Status_Container_StateTerminated)}
	case PodStatusContainer_FieldPathSelectorHealthStatus:
		return &PodStatusContainer_FieldTerminalPathValue{PodStatusContainer_FieldTerminalPath: *fp, value: value.(Pod_Status_HealthStatus)}
	case PodStatusContainer_FieldPathSelectorServiceName:
		return &PodStatusContainer_FieldTerminalPathValue{PodStatusContainer_FieldTerminalPath: *fp, value: value.(string)}
	case PodStatusContainer_FieldPathSelectorContainerIp:
		return &PodStatusContainer_FieldTerminalPathValue{PodStatusContainer_FieldTerminalPath: *fp, value: value.(string)}
	case PodStatusContainer_FieldPathSelectorContainerId:
		return &PodStatusContainer_FieldTerminalPathValue{PodStatusContainer_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fp.selector))
	}
}

func (fp *PodStatusContainer_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PodStatusContainer_FieldTerminalPath) WithIArrayOfValues(values interface{}) PodStatusContainer_FieldPathArrayOfValues {
	fpaov := &PodStatusContainer_FieldTerminalPathArrayOfValues{PodStatusContainer_FieldTerminalPath: *fp}
	switch fp.selector {
	case PodStatusContainer_FieldPathSelectorName:
		return &PodStatusContainer_FieldTerminalPathArrayOfValues{PodStatusContainer_FieldTerminalPath: *fp, values: values.([]string)}
	case PodStatusContainer_FieldPathSelectorState:
		return &PodStatusContainer_FieldTerminalPathArrayOfValues{PodStatusContainer_FieldTerminalPath: *fp, values: values.([]Pod_Status_Container_State)}
	case PodStatusContainer_FieldPathSelectorWaiting:
		return &PodStatusContainer_FieldTerminalPathArrayOfValues{PodStatusContainer_FieldTerminalPath: *fp, values: values.([]*Pod_Status_Container_StateWaiting)}
	case PodStatusContainer_FieldPathSelectorRunning:
		return &PodStatusContainer_FieldTerminalPathArrayOfValues{PodStatusContainer_FieldTerminalPath: *fp, values: values.([]*Pod_Status_Container_StateRunning)}
	case PodStatusContainer_FieldPathSelectorTerminated:
		return &PodStatusContainer_FieldTerminalPathArrayOfValues{PodStatusContainer_FieldTerminalPath: *fp, values: values.([]*Pod_Status_Container_StateTerminated)}
	case PodStatusContainer_FieldPathSelectorHealthStatus:
		return &PodStatusContainer_FieldTerminalPathArrayOfValues{PodStatusContainer_FieldTerminalPath: *fp, values: values.([]Pod_Status_HealthStatus)}
	case PodStatusContainer_FieldPathSelectorServiceName:
		return &PodStatusContainer_FieldTerminalPathArrayOfValues{PodStatusContainer_FieldTerminalPath: *fp, values: values.([]string)}
	case PodStatusContainer_FieldPathSelectorContainerIp:
		return &PodStatusContainer_FieldTerminalPathArrayOfValues{PodStatusContainer_FieldTerminalPath: *fp, values: values.([]string)}
	case PodStatusContainer_FieldPathSelectorContainerId:
		return &PodStatusContainer_FieldTerminalPathArrayOfValues{PodStatusContainer_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fp.selector))
	}
	return fpaov
}

func (fp *PodStatusContainer_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PodStatusContainer_FieldTerminalPath) WithIArrayItemValue(value interface{}) PodStatusContainer_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fp.selector))
	}
}

func (fp *PodStatusContainer_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type PodStatusContainer_FieldSubPath struct {
	selector PodStatusContainer_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ PodStatusContainer_FieldPath = (*PodStatusContainer_FieldSubPath)(nil)

func (fps *PodStatusContainer_FieldSubPath) Selector() PodStatusContainer_FieldPathSelector {
	return fps.selector
}
func (fps *PodStatusContainer_FieldSubPath) AsWaitingSubPath() (PodStatusContainerStateWaiting_FieldPath, bool) {
	res, ok := fps.subPath.(PodStatusContainerStateWaiting_FieldPath)
	return res, ok
}
func (fps *PodStatusContainer_FieldSubPath) AsRunningSubPath() (PodStatusContainerStateRunning_FieldPath, bool) {
	res, ok := fps.subPath.(PodStatusContainerStateRunning_FieldPath)
	return res, ok
}
func (fps *PodStatusContainer_FieldSubPath) AsTerminatedSubPath() (PodStatusContainerStateTerminated_FieldPath, bool) {
	res, ok := fps.subPath.(PodStatusContainerStateTerminated_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *PodStatusContainer_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *PodStatusContainer_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Pod_Status_Container
func (fps *PodStatusContainer_FieldSubPath) Get(source *Pod_Status_Container) (values []interface{}) {
	switch fps.selector {
	case PodStatusContainer_FieldPathSelectorWaiting:
		values = append(values, fps.subPath.GetRaw(source.GetWaiting())...)
	case PodStatusContainer_FieldPathSelectorRunning:
		values = append(values, fps.subPath.GetRaw(source.GetRunning())...)
	case PodStatusContainer_FieldPathSelectorTerminated:
		values = append(values, fps.subPath.GetRaw(source.GetTerminated())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fps.selector))
	}
	return
}

func (fps *PodStatusContainer_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Pod_Status_Container))
}

// GetSingle returns value of selected field from source Pod_Status_Container
func (fps *PodStatusContainer_FieldSubPath) GetSingle(source *Pod_Status_Container) (interface{}, bool) {
	switch fps.selector {
	case PodStatusContainer_FieldPathSelectorWaiting:
		if source.GetWaiting() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetWaiting())
	case PodStatusContainer_FieldPathSelectorRunning:
		if source.GetRunning() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetRunning())
	case PodStatusContainer_FieldPathSelectorTerminated:
		if source.GetTerminated() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTerminated())
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fps.selector))
	}
}

func (fps *PodStatusContainer_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Pod_Status_Container))
}

// GetDefault returns a default value of the field type
func (fps *PodStatusContainer_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *PodStatusContainer_FieldSubPath) ClearValue(item *Pod_Status_Container) {
	if item != nil {
		switch fps.selector {
		case PodStatusContainer_FieldPathSelectorWaiting:
			fps.subPath.ClearValueRaw(item.Waiting)
		case PodStatusContainer_FieldPathSelectorRunning:
			fps.subPath.ClearValueRaw(item.Running)
		case PodStatusContainer_FieldPathSelectorTerminated:
			fps.subPath.ClearValueRaw(item.Terminated)
		default:
			panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fps.selector))
		}
	}
}

func (fps *PodStatusContainer_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Pod_Status_Container))
}

// IsLeaf - whether field path is holds simple value
func (fps *PodStatusContainer_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *PodStatusContainer_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&PodStatusContainer_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *PodStatusContainer_FieldSubPath) WithIValue(value interface{}) PodStatusContainer_FieldPathValue {
	return &PodStatusContainer_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *PodStatusContainer_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *PodStatusContainer_FieldSubPath) WithIArrayOfValues(values interface{}) PodStatusContainer_FieldPathArrayOfValues {
	return &PodStatusContainer_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *PodStatusContainer_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *PodStatusContainer_FieldSubPath) WithIArrayItemValue(value interface{}) PodStatusContainer_FieldPathArrayItemValue {
	return &PodStatusContainer_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *PodStatusContainer_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// PodStatusContainer_FieldPathValue allows storing values for Container fields according to their type
type PodStatusContainer_FieldPathValue interface {
	PodStatusContainer_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Pod_Status_Container)
	CompareWith(*Pod_Status_Container) (cmp int, comparable bool)
}

func ParsePodStatusContainer_FieldPathValue(pathStr, valueStr string) (PodStatusContainer_FieldPathValue, error) {
	fp, err := ParsePodStatusContainer_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Container field path value from %s: %v", valueStr, err)
	}
	return fpv.(PodStatusContainer_FieldPathValue), nil
}

func MustParsePodStatusContainer_FieldPathValue(pathStr, valueStr string) PodStatusContainer_FieldPathValue {
	fpv, err := ParsePodStatusContainer_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PodStatusContainer_FieldTerminalPathValue struct {
	PodStatusContainer_FieldTerminalPath
	value interface{}
}

var _ PodStatusContainer_FieldPathValue = (*PodStatusContainer_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Container' as interface{}
func (fpv *PodStatusContainer_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PodStatusContainer_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PodStatusContainer_FieldTerminalPathValue) AsStateValue() (Pod_Status_Container_State, bool) {
	res, ok := fpv.value.(Pod_Status_Container_State)
	return res, ok
}
func (fpv *PodStatusContainer_FieldTerminalPathValue) AsWaitingValue() (*Pod_Status_Container_StateWaiting, bool) {
	res, ok := fpv.value.(*Pod_Status_Container_StateWaiting)
	return res, ok
}
func (fpv *PodStatusContainer_FieldTerminalPathValue) AsRunningValue() (*Pod_Status_Container_StateRunning, bool) {
	res, ok := fpv.value.(*Pod_Status_Container_StateRunning)
	return res, ok
}
func (fpv *PodStatusContainer_FieldTerminalPathValue) AsTerminatedValue() (*Pod_Status_Container_StateTerminated, bool) {
	res, ok := fpv.value.(*Pod_Status_Container_StateTerminated)
	return res, ok
}
func (fpv *PodStatusContainer_FieldTerminalPathValue) AsHealthStatusValue() (Pod_Status_HealthStatus, bool) {
	res, ok := fpv.value.(Pod_Status_HealthStatus)
	return res, ok
}
func (fpv *PodStatusContainer_FieldTerminalPathValue) AsServiceNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PodStatusContainer_FieldTerminalPathValue) AsContainerIpValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PodStatusContainer_FieldTerminalPathValue) AsContainerIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Container
func (fpv *PodStatusContainer_FieldTerminalPathValue) SetTo(target **Pod_Status_Container) {
	if *target == nil {
		*target = new(Pod_Status_Container)
	}
	switch fpv.selector {
	case PodStatusContainer_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case PodStatusContainer_FieldPathSelectorState:
		(*target).State = fpv.value.(Pod_Status_Container_State)
	case PodStatusContainer_FieldPathSelectorWaiting:
		(*target).Waiting = fpv.value.(*Pod_Status_Container_StateWaiting)
	case PodStatusContainer_FieldPathSelectorRunning:
		(*target).Running = fpv.value.(*Pod_Status_Container_StateRunning)
	case PodStatusContainer_FieldPathSelectorTerminated:
		(*target).Terminated = fpv.value.(*Pod_Status_Container_StateTerminated)
	case PodStatusContainer_FieldPathSelectorHealthStatus:
		(*target).HealthStatus = fpv.value.(Pod_Status_HealthStatus)
	case PodStatusContainer_FieldPathSelectorServiceName:
		(*target).ServiceName = fpv.value.(string)
	case PodStatusContainer_FieldPathSelectorContainerIp:
		(*target).ContainerIp = fpv.value.(string)
	case PodStatusContainer_FieldPathSelectorContainerId:
		(*target).ContainerId = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fpv.selector))
	}
}

func (fpv *PodStatusContainer_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Pod_Status_Container)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PodStatusContainer_FieldTerminalPathValue' with the value under path in 'Pod_Status_Container'.
func (fpv *PodStatusContainer_FieldTerminalPathValue) CompareWith(source *Pod_Status_Container) (int, bool) {
	switch fpv.selector {
	case PodStatusContainer_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatusContainer_FieldPathSelectorState:
		leftValue := fpv.value.(Pod_Status_Container_State)
		rightValue := source.GetState()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatusContainer_FieldPathSelectorWaiting:
		return 0, false
	case PodStatusContainer_FieldPathSelectorRunning:
		return 0, false
	case PodStatusContainer_FieldPathSelectorTerminated:
		return 0, false
	case PodStatusContainer_FieldPathSelectorHealthStatus:
		leftValue := fpv.value.(Pod_Status_HealthStatus)
		rightValue := source.GetHealthStatus()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatusContainer_FieldPathSelectorServiceName:
		leftValue := fpv.value.(string)
		rightValue := source.GetServiceName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatusContainer_FieldPathSelectorContainerIp:
		leftValue := fpv.value.(string)
		rightValue := source.GetContainerIp()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatusContainer_FieldPathSelectorContainerId:
		leftValue := fpv.value.(string)
		rightValue := source.GetContainerId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fpv.selector))
	}
}

func (fpv *PodStatusContainer_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Pod_Status_Container))
}

type PodStatusContainer_FieldSubPathValue struct {
	PodStatusContainer_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ PodStatusContainer_FieldPathValue = (*PodStatusContainer_FieldSubPathValue)(nil)

func (fpvs *PodStatusContainer_FieldSubPathValue) AsWaitingPathValue() (PodStatusContainerStateWaiting_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(PodStatusContainerStateWaiting_FieldPathValue)
	return res, ok
}
func (fpvs *PodStatusContainer_FieldSubPathValue) AsRunningPathValue() (PodStatusContainerStateRunning_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(PodStatusContainerStateRunning_FieldPathValue)
	return res, ok
}
func (fpvs *PodStatusContainer_FieldSubPathValue) AsTerminatedPathValue() (PodStatusContainerStateTerminated_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(PodStatusContainerStateTerminated_FieldPathValue)
	return res, ok
}

func (fpvs *PodStatusContainer_FieldSubPathValue) SetTo(target **Pod_Status_Container) {
	if *target == nil {
		*target = new(Pod_Status_Container)
	}
	switch fpvs.Selector() {
	case PodStatusContainer_FieldPathSelectorWaiting:
		fpvs.subPathValue.(PodStatusContainerStateWaiting_FieldPathValue).SetTo(&(*target).Waiting)
	case PodStatusContainer_FieldPathSelectorRunning:
		fpvs.subPathValue.(PodStatusContainerStateRunning_FieldPathValue).SetTo(&(*target).Running)
	case PodStatusContainer_FieldPathSelectorTerminated:
		fpvs.subPathValue.(PodStatusContainerStateTerminated_FieldPathValue).SetTo(&(*target).Terminated)
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fpvs.Selector()))
	}
}

func (fpvs *PodStatusContainer_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Pod_Status_Container)
	fpvs.SetTo(&typedObject)
}

func (fpvs *PodStatusContainer_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *PodStatusContainer_FieldSubPathValue) CompareWith(source *Pod_Status_Container) (int, bool) {
	switch fpvs.Selector() {
	case PodStatusContainer_FieldPathSelectorWaiting:
		return fpvs.subPathValue.(PodStatusContainerStateWaiting_FieldPathValue).CompareWith(source.GetWaiting())
	case PodStatusContainer_FieldPathSelectorRunning:
		return fpvs.subPathValue.(PodStatusContainerStateRunning_FieldPathValue).CompareWith(source.GetRunning())
	case PodStatusContainer_FieldPathSelectorTerminated:
		return fpvs.subPathValue.(PodStatusContainerStateTerminated_FieldPathValue).CompareWith(source.GetTerminated())
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fpvs.Selector()))
	}
}

func (fpvs *PodStatusContainer_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Pod_Status_Container))
}

// PodStatusContainer_FieldPathArrayItemValue allows storing single item in Path-specific values for Container according to their type
// Present only for array (repeated) types.
type PodStatusContainer_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PodStatusContainer_FieldPath
	ContainsValue(*Pod_Status_Container) bool
}

// ParsePodStatusContainer_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePodStatusContainer_FieldPathArrayItemValue(pathStr, valueStr string) (PodStatusContainer_FieldPathArrayItemValue, error) {
	fp, err := ParsePodStatusContainer_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Container field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PodStatusContainer_FieldPathArrayItemValue), nil
}

func MustParsePodStatusContainer_FieldPathArrayItemValue(pathStr, valueStr string) PodStatusContainer_FieldPathArrayItemValue {
	fpaiv, err := ParsePodStatusContainer_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PodStatusContainer_FieldTerminalPathArrayItemValue struct {
	PodStatusContainer_FieldTerminalPath
	value interface{}
}

var _ PodStatusContainer_FieldPathArrayItemValue = (*PodStatusContainer_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Pod_Status_Container as interface{}
func (fpaiv *PodStatusContainer_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *PodStatusContainer_FieldTerminalPathArrayItemValue) GetSingle(source *Pod_Status_Container) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PodStatusContainer_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Pod_Status_Container))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Container'
func (fpaiv *PodStatusContainer_FieldTerminalPathArrayItemValue) ContainsValue(source *Pod_Status_Container) bool {
	slice := fpaiv.PodStatusContainer_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type PodStatusContainer_FieldSubPathArrayItemValue struct {
	PodStatusContainer_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *PodStatusContainer_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *PodStatusContainer_FieldSubPathArrayItemValue) AsWaitingPathItemValue() (PodStatusContainerStateWaiting_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(PodStatusContainerStateWaiting_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *PodStatusContainer_FieldSubPathArrayItemValue) AsRunningPathItemValue() (PodStatusContainerStateRunning_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(PodStatusContainerStateRunning_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *PodStatusContainer_FieldSubPathArrayItemValue) AsTerminatedPathItemValue() (PodStatusContainerStateTerminated_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(PodStatusContainerStateTerminated_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Container'
func (fpaivs *PodStatusContainer_FieldSubPathArrayItemValue) ContainsValue(source *Pod_Status_Container) bool {
	switch fpaivs.Selector() {
	case PodStatusContainer_FieldPathSelectorWaiting:
		return fpaivs.subPathItemValue.(PodStatusContainerStateWaiting_FieldPathArrayItemValue).ContainsValue(source.GetWaiting())
	case PodStatusContainer_FieldPathSelectorRunning:
		return fpaivs.subPathItemValue.(PodStatusContainerStateRunning_FieldPathArrayItemValue).ContainsValue(source.GetRunning())
	case PodStatusContainer_FieldPathSelectorTerminated:
		return fpaivs.subPathItemValue.(PodStatusContainerStateTerminated_FieldPathArrayItemValue).ContainsValue(source.GetTerminated())
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container: %d", fpaivs.Selector()))
	}
}

// PodStatusContainer_FieldPathArrayOfValues allows storing slice of values for Container fields according to their type
type PodStatusContainer_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PodStatusContainer_FieldPath
}

func ParsePodStatusContainer_FieldPathArrayOfValues(pathStr, valuesStr string) (PodStatusContainer_FieldPathArrayOfValues, error) {
	fp, err := ParsePodStatusContainer_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Container field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PodStatusContainer_FieldPathArrayOfValues), nil
}

func MustParsePodStatusContainer_FieldPathArrayOfValues(pathStr, valuesStr string) PodStatusContainer_FieldPathArrayOfValues {
	fpaov, err := ParsePodStatusContainer_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PodStatusContainer_FieldTerminalPathArrayOfValues struct {
	PodStatusContainer_FieldTerminalPath
	values interface{}
}

var _ PodStatusContainer_FieldPathArrayOfValues = (*PodStatusContainer_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PodStatusContainer_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PodStatusContainer_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PodStatusContainer_FieldPathSelectorState:
		for _, v := range fpaov.values.([]Pod_Status_Container_State) {
			values = append(values, v)
		}
	case PodStatusContainer_FieldPathSelectorWaiting:
		for _, v := range fpaov.values.([]*Pod_Status_Container_StateWaiting) {
			values = append(values, v)
		}
	case PodStatusContainer_FieldPathSelectorRunning:
		for _, v := range fpaov.values.([]*Pod_Status_Container_StateRunning) {
			values = append(values, v)
		}
	case PodStatusContainer_FieldPathSelectorTerminated:
		for _, v := range fpaov.values.([]*Pod_Status_Container_StateTerminated) {
			values = append(values, v)
		}
	case PodStatusContainer_FieldPathSelectorHealthStatus:
		for _, v := range fpaov.values.([]Pod_Status_HealthStatus) {
			values = append(values, v)
		}
	case PodStatusContainer_FieldPathSelectorServiceName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PodStatusContainer_FieldPathSelectorContainerIp:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PodStatusContainer_FieldPathSelectorContainerId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PodStatusContainer_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PodStatusContainer_FieldTerminalPathArrayOfValues) AsStateArrayOfValues() ([]Pod_Status_Container_State, bool) {
	res, ok := fpaov.values.([]Pod_Status_Container_State)
	return res, ok
}
func (fpaov *PodStatusContainer_FieldTerminalPathArrayOfValues) AsWaitingArrayOfValues() ([]*Pod_Status_Container_StateWaiting, bool) {
	res, ok := fpaov.values.([]*Pod_Status_Container_StateWaiting)
	return res, ok
}
func (fpaov *PodStatusContainer_FieldTerminalPathArrayOfValues) AsRunningArrayOfValues() ([]*Pod_Status_Container_StateRunning, bool) {
	res, ok := fpaov.values.([]*Pod_Status_Container_StateRunning)
	return res, ok
}
func (fpaov *PodStatusContainer_FieldTerminalPathArrayOfValues) AsTerminatedArrayOfValues() ([]*Pod_Status_Container_StateTerminated, bool) {
	res, ok := fpaov.values.([]*Pod_Status_Container_StateTerminated)
	return res, ok
}
func (fpaov *PodStatusContainer_FieldTerminalPathArrayOfValues) AsHealthStatusArrayOfValues() ([]Pod_Status_HealthStatus, bool) {
	res, ok := fpaov.values.([]Pod_Status_HealthStatus)
	return res, ok
}
func (fpaov *PodStatusContainer_FieldTerminalPathArrayOfValues) AsServiceNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PodStatusContainer_FieldTerminalPathArrayOfValues) AsContainerIpArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PodStatusContainer_FieldTerminalPathArrayOfValues) AsContainerIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type PodStatusContainer_FieldSubPathArrayOfValues struct {
	PodStatusContainer_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ PodStatusContainer_FieldPathArrayOfValues = (*PodStatusContainer_FieldSubPathArrayOfValues)(nil)

func (fpsaov *PodStatusContainer_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *PodStatusContainer_FieldSubPathArrayOfValues) AsWaitingPathArrayOfValues() (PodStatusContainerStateWaiting_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(PodStatusContainerStateWaiting_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *PodStatusContainer_FieldSubPathArrayOfValues) AsRunningPathArrayOfValues() (PodStatusContainerStateRunning_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(PodStatusContainerStateRunning_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *PodStatusContainer_FieldSubPathArrayOfValues) AsTerminatedPathArrayOfValues() (PodStatusContainerStateTerminated_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(PodStatusContainerStateTerminated_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PodStatusContainerStateWaiting_FieldPath interface {
	gotenobject.FieldPath
	Selector() PodStatusContainerStateWaiting_FieldPathSelector
	Get(source *Pod_Status_Container_StateWaiting) []interface{}
	GetSingle(source *Pod_Status_Container_StateWaiting) (interface{}, bool)
	ClearValue(item *Pod_Status_Container_StateWaiting)

	// Those methods build corresponding PodStatusContainerStateWaiting_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PodStatusContainerStateWaiting_FieldPathValue
	WithIArrayOfValues(values interface{}) PodStatusContainerStateWaiting_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PodStatusContainerStateWaiting_FieldPathArrayItemValue
}

type PodStatusContainerStateWaiting_FieldPathSelector int32

const (
	PodStatusContainerStateWaiting_FieldPathSelectorReason  PodStatusContainerStateWaiting_FieldPathSelector = 0
	PodStatusContainerStateWaiting_FieldPathSelectorMessage PodStatusContainerStateWaiting_FieldPathSelector = 1
)

func (s PodStatusContainerStateWaiting_FieldPathSelector) String() string {
	switch s {
	case PodStatusContainerStateWaiting_FieldPathSelectorReason:
		return "reason"
	case PodStatusContainerStateWaiting_FieldPathSelectorMessage:
		return "message"
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateWaiting: %d", s))
	}
}

func BuildPodStatusContainerStateWaiting_FieldPath(fp gotenobject.RawFieldPath) (PodStatusContainerStateWaiting_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Pod_Status_Container_StateWaiting")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "reason":
			return &PodStatusContainerStateWaiting_FieldTerminalPath{selector: PodStatusContainerStateWaiting_FieldPathSelectorReason}, nil
		case "message":
			return &PodStatusContainerStateWaiting_FieldTerminalPath{selector: PodStatusContainerStateWaiting_FieldPathSelectorMessage}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Pod_Status_Container_StateWaiting", fp)
}

func ParsePodStatusContainerStateWaiting_FieldPath(rawField string) (PodStatusContainerStateWaiting_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPodStatusContainerStateWaiting_FieldPath(fp)
}

func MustParsePodStatusContainerStateWaiting_FieldPath(rawField string) PodStatusContainerStateWaiting_FieldPath {
	fp, err := ParsePodStatusContainerStateWaiting_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PodStatusContainerStateWaiting_FieldTerminalPath struct {
	selector PodStatusContainerStateWaiting_FieldPathSelector
}

var _ PodStatusContainerStateWaiting_FieldPath = (*PodStatusContainerStateWaiting_FieldTerminalPath)(nil)

func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) Selector() PodStatusContainerStateWaiting_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Pod_Status_Container_StateWaiting
func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) Get(source *Pod_Status_Container_StateWaiting) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PodStatusContainerStateWaiting_FieldPathSelectorReason:
			values = append(values, source.Reason)
		case PodStatusContainerStateWaiting_FieldPathSelectorMessage:
			values = append(values, source.Message)
		default:
			panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateWaiting: %d", fp.selector))
		}
	}
	return
}

func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Pod_Status_Container_StateWaiting))
}

// GetSingle returns value pointed by specific field of from source Pod_Status_Container_StateWaiting
func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) GetSingle(source *Pod_Status_Container_StateWaiting) (interface{}, bool) {
	switch fp.selector {
	case PodStatusContainerStateWaiting_FieldPathSelectorReason:
		return source.GetReason(), source != nil
	case PodStatusContainerStateWaiting_FieldPathSelectorMessage:
		return source.GetMessage(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateWaiting: %d", fp.selector))
	}
}

func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Pod_Status_Container_StateWaiting))
}

// GetDefault returns a default value of the field type
func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PodStatusContainerStateWaiting_FieldPathSelectorReason:
		return ""
	case PodStatusContainerStateWaiting_FieldPathSelectorMessage:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateWaiting: %d", fp.selector))
	}
}

func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) ClearValue(item *Pod_Status_Container_StateWaiting) {
	if item != nil {
		switch fp.selector {
		case PodStatusContainerStateWaiting_FieldPathSelectorReason:
			item.Reason = ""
		case PodStatusContainerStateWaiting_FieldPathSelectorMessage:
			item.Message = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateWaiting: %d", fp.selector))
		}
	}
}

func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Pod_Status_Container_StateWaiting))
}

// IsLeaf - whether field path is holds simple value
func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PodStatusContainerStateWaiting_FieldPathSelectorReason ||
		fp.selector == PodStatusContainerStateWaiting_FieldPathSelectorMessage
}

func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) WithIValue(value interface{}) PodStatusContainerStateWaiting_FieldPathValue {
	switch fp.selector {
	case PodStatusContainerStateWaiting_FieldPathSelectorReason:
		return &PodStatusContainerStateWaiting_FieldTerminalPathValue{PodStatusContainerStateWaiting_FieldTerminalPath: *fp, value: value.(string)}
	case PodStatusContainerStateWaiting_FieldPathSelectorMessage:
		return &PodStatusContainerStateWaiting_FieldTerminalPathValue{PodStatusContainerStateWaiting_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateWaiting: %d", fp.selector))
	}
}

func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) WithIArrayOfValues(values interface{}) PodStatusContainerStateWaiting_FieldPathArrayOfValues {
	fpaov := &PodStatusContainerStateWaiting_FieldTerminalPathArrayOfValues{PodStatusContainerStateWaiting_FieldTerminalPath: *fp}
	switch fp.selector {
	case PodStatusContainerStateWaiting_FieldPathSelectorReason:
		return &PodStatusContainerStateWaiting_FieldTerminalPathArrayOfValues{PodStatusContainerStateWaiting_FieldTerminalPath: *fp, values: values.([]string)}
	case PodStatusContainerStateWaiting_FieldPathSelectorMessage:
		return &PodStatusContainerStateWaiting_FieldTerminalPathArrayOfValues{PodStatusContainerStateWaiting_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateWaiting: %d", fp.selector))
	}
	return fpaov
}

func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) WithIArrayItemValue(value interface{}) PodStatusContainerStateWaiting_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateWaiting: %d", fp.selector))
	}
}

func (fp *PodStatusContainerStateWaiting_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// PodStatusContainerStateWaiting_FieldPathValue allows storing values for StateWaiting fields according to their type
type PodStatusContainerStateWaiting_FieldPathValue interface {
	PodStatusContainerStateWaiting_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Pod_Status_Container_StateWaiting)
	CompareWith(*Pod_Status_Container_StateWaiting) (cmp int, comparable bool)
}

func ParsePodStatusContainerStateWaiting_FieldPathValue(pathStr, valueStr string) (PodStatusContainerStateWaiting_FieldPathValue, error) {
	fp, err := ParsePodStatusContainerStateWaiting_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StateWaiting field path value from %s: %v", valueStr, err)
	}
	return fpv.(PodStatusContainerStateWaiting_FieldPathValue), nil
}

func MustParsePodStatusContainerStateWaiting_FieldPathValue(pathStr, valueStr string) PodStatusContainerStateWaiting_FieldPathValue {
	fpv, err := ParsePodStatusContainerStateWaiting_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PodStatusContainerStateWaiting_FieldTerminalPathValue struct {
	PodStatusContainerStateWaiting_FieldTerminalPath
	value interface{}
}

var _ PodStatusContainerStateWaiting_FieldPathValue = (*PodStatusContainerStateWaiting_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'StateWaiting' as interface{}
func (fpv *PodStatusContainerStateWaiting_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PodStatusContainerStateWaiting_FieldTerminalPathValue) AsReasonValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PodStatusContainerStateWaiting_FieldTerminalPathValue) AsMessageValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object StateWaiting
func (fpv *PodStatusContainerStateWaiting_FieldTerminalPathValue) SetTo(target **Pod_Status_Container_StateWaiting) {
	if *target == nil {
		*target = new(Pod_Status_Container_StateWaiting)
	}
	switch fpv.selector {
	case PodStatusContainerStateWaiting_FieldPathSelectorReason:
		(*target).Reason = fpv.value.(string)
	case PodStatusContainerStateWaiting_FieldPathSelectorMessage:
		(*target).Message = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateWaiting: %d", fpv.selector))
	}
}

func (fpv *PodStatusContainerStateWaiting_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Pod_Status_Container_StateWaiting)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PodStatusContainerStateWaiting_FieldTerminalPathValue' with the value under path in 'Pod_Status_Container_StateWaiting'.
func (fpv *PodStatusContainerStateWaiting_FieldTerminalPathValue) CompareWith(source *Pod_Status_Container_StateWaiting) (int, bool) {
	switch fpv.selector {
	case PodStatusContainerStateWaiting_FieldPathSelectorReason:
		leftValue := fpv.value.(string)
		rightValue := source.GetReason()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatusContainerStateWaiting_FieldPathSelectorMessage:
		leftValue := fpv.value.(string)
		rightValue := source.GetMessage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateWaiting: %d", fpv.selector))
	}
}

func (fpv *PodStatusContainerStateWaiting_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Pod_Status_Container_StateWaiting))
}

// PodStatusContainerStateWaiting_FieldPathArrayItemValue allows storing single item in Path-specific values for StateWaiting according to their type
// Present only for array (repeated) types.
type PodStatusContainerStateWaiting_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PodStatusContainerStateWaiting_FieldPath
	ContainsValue(*Pod_Status_Container_StateWaiting) bool
}

// ParsePodStatusContainerStateWaiting_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePodStatusContainerStateWaiting_FieldPathArrayItemValue(pathStr, valueStr string) (PodStatusContainerStateWaiting_FieldPathArrayItemValue, error) {
	fp, err := ParsePodStatusContainerStateWaiting_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StateWaiting field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PodStatusContainerStateWaiting_FieldPathArrayItemValue), nil
}

func MustParsePodStatusContainerStateWaiting_FieldPathArrayItemValue(pathStr, valueStr string) PodStatusContainerStateWaiting_FieldPathArrayItemValue {
	fpaiv, err := ParsePodStatusContainerStateWaiting_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PodStatusContainerStateWaiting_FieldTerminalPathArrayItemValue struct {
	PodStatusContainerStateWaiting_FieldTerminalPath
	value interface{}
}

var _ PodStatusContainerStateWaiting_FieldPathArrayItemValue = (*PodStatusContainerStateWaiting_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Pod_Status_Container_StateWaiting as interface{}
func (fpaiv *PodStatusContainerStateWaiting_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *PodStatusContainerStateWaiting_FieldTerminalPathArrayItemValue) GetSingle(source *Pod_Status_Container_StateWaiting) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PodStatusContainerStateWaiting_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Pod_Status_Container_StateWaiting))
}

// Contains returns a boolean indicating if value that is being held is present in given 'StateWaiting'
func (fpaiv *PodStatusContainerStateWaiting_FieldTerminalPathArrayItemValue) ContainsValue(source *Pod_Status_Container_StateWaiting) bool {
	slice := fpaiv.PodStatusContainerStateWaiting_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// PodStatusContainerStateWaiting_FieldPathArrayOfValues allows storing slice of values for StateWaiting fields according to their type
type PodStatusContainerStateWaiting_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PodStatusContainerStateWaiting_FieldPath
}

func ParsePodStatusContainerStateWaiting_FieldPathArrayOfValues(pathStr, valuesStr string) (PodStatusContainerStateWaiting_FieldPathArrayOfValues, error) {
	fp, err := ParsePodStatusContainerStateWaiting_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StateWaiting field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PodStatusContainerStateWaiting_FieldPathArrayOfValues), nil
}

func MustParsePodStatusContainerStateWaiting_FieldPathArrayOfValues(pathStr, valuesStr string) PodStatusContainerStateWaiting_FieldPathArrayOfValues {
	fpaov, err := ParsePodStatusContainerStateWaiting_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PodStatusContainerStateWaiting_FieldTerminalPathArrayOfValues struct {
	PodStatusContainerStateWaiting_FieldTerminalPath
	values interface{}
}

var _ PodStatusContainerStateWaiting_FieldPathArrayOfValues = (*PodStatusContainerStateWaiting_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PodStatusContainerStateWaiting_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PodStatusContainerStateWaiting_FieldPathSelectorReason:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PodStatusContainerStateWaiting_FieldPathSelectorMessage:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PodStatusContainerStateWaiting_FieldTerminalPathArrayOfValues) AsReasonArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PodStatusContainerStateWaiting_FieldTerminalPathArrayOfValues) AsMessageArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PodStatusContainerStateRunning_FieldPath interface {
	gotenobject.FieldPath
	Selector() PodStatusContainerStateRunning_FieldPathSelector
	Get(source *Pod_Status_Container_StateRunning) []interface{}
	GetSingle(source *Pod_Status_Container_StateRunning) (interface{}, bool)
	ClearValue(item *Pod_Status_Container_StateRunning)

	// Those methods build corresponding PodStatusContainerStateRunning_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PodStatusContainerStateRunning_FieldPathValue
	WithIArrayOfValues(values interface{}) PodStatusContainerStateRunning_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PodStatusContainerStateRunning_FieldPathArrayItemValue
}

type PodStatusContainerStateRunning_FieldPathSelector int32

const (
	PodStatusContainerStateRunning_FieldPathSelectorStartedAt PodStatusContainerStateRunning_FieldPathSelector = 0
)

func (s PodStatusContainerStateRunning_FieldPathSelector) String() string {
	switch s {
	case PodStatusContainerStateRunning_FieldPathSelectorStartedAt:
		return "started_at"
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateRunning: %d", s))
	}
}

func BuildPodStatusContainerStateRunning_FieldPath(fp gotenobject.RawFieldPath) (PodStatusContainerStateRunning_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Pod_Status_Container_StateRunning")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "started_at", "startedAt", "started-at":
			return &PodStatusContainerStateRunning_FieldTerminalPath{selector: PodStatusContainerStateRunning_FieldPathSelectorStartedAt}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Pod_Status_Container_StateRunning", fp)
}

func ParsePodStatusContainerStateRunning_FieldPath(rawField string) (PodStatusContainerStateRunning_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPodStatusContainerStateRunning_FieldPath(fp)
}

func MustParsePodStatusContainerStateRunning_FieldPath(rawField string) PodStatusContainerStateRunning_FieldPath {
	fp, err := ParsePodStatusContainerStateRunning_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PodStatusContainerStateRunning_FieldTerminalPath struct {
	selector PodStatusContainerStateRunning_FieldPathSelector
}

var _ PodStatusContainerStateRunning_FieldPath = (*PodStatusContainerStateRunning_FieldTerminalPath)(nil)

func (fp *PodStatusContainerStateRunning_FieldTerminalPath) Selector() PodStatusContainerStateRunning_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PodStatusContainerStateRunning_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PodStatusContainerStateRunning_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Pod_Status_Container_StateRunning
func (fp *PodStatusContainerStateRunning_FieldTerminalPath) Get(source *Pod_Status_Container_StateRunning) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PodStatusContainerStateRunning_FieldPathSelectorStartedAt:
			if source.StartedAt != nil {
				values = append(values, source.StartedAt)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateRunning: %d", fp.selector))
		}
	}
	return
}

func (fp *PodStatusContainerStateRunning_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Pod_Status_Container_StateRunning))
}

// GetSingle returns value pointed by specific field of from source Pod_Status_Container_StateRunning
func (fp *PodStatusContainerStateRunning_FieldTerminalPath) GetSingle(source *Pod_Status_Container_StateRunning) (interface{}, bool) {
	switch fp.selector {
	case PodStatusContainerStateRunning_FieldPathSelectorStartedAt:
		res := source.GetStartedAt()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateRunning: %d", fp.selector))
	}
}

func (fp *PodStatusContainerStateRunning_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Pod_Status_Container_StateRunning))
}

// GetDefault returns a default value of the field type
func (fp *PodStatusContainerStateRunning_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PodStatusContainerStateRunning_FieldPathSelectorStartedAt:
		return (*timestamppb.Timestamp)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateRunning: %d", fp.selector))
	}
}

func (fp *PodStatusContainerStateRunning_FieldTerminalPath) ClearValue(item *Pod_Status_Container_StateRunning) {
	if item != nil {
		switch fp.selector {
		case PodStatusContainerStateRunning_FieldPathSelectorStartedAt:
			item.StartedAt = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateRunning: %d", fp.selector))
		}
	}
}

func (fp *PodStatusContainerStateRunning_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Pod_Status_Container_StateRunning))
}

// IsLeaf - whether field path is holds simple value
func (fp *PodStatusContainerStateRunning_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PodStatusContainerStateRunning_FieldPathSelectorStartedAt
}

func (fp *PodStatusContainerStateRunning_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PodStatusContainerStateRunning_FieldTerminalPath) WithIValue(value interface{}) PodStatusContainerStateRunning_FieldPathValue {
	switch fp.selector {
	case PodStatusContainerStateRunning_FieldPathSelectorStartedAt:
		return &PodStatusContainerStateRunning_FieldTerminalPathValue{PodStatusContainerStateRunning_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateRunning: %d", fp.selector))
	}
}

func (fp *PodStatusContainerStateRunning_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PodStatusContainerStateRunning_FieldTerminalPath) WithIArrayOfValues(values interface{}) PodStatusContainerStateRunning_FieldPathArrayOfValues {
	fpaov := &PodStatusContainerStateRunning_FieldTerminalPathArrayOfValues{PodStatusContainerStateRunning_FieldTerminalPath: *fp}
	switch fp.selector {
	case PodStatusContainerStateRunning_FieldPathSelectorStartedAt:
		return &PodStatusContainerStateRunning_FieldTerminalPathArrayOfValues{PodStatusContainerStateRunning_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateRunning: %d", fp.selector))
	}
	return fpaov
}

func (fp *PodStatusContainerStateRunning_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PodStatusContainerStateRunning_FieldTerminalPath) WithIArrayItemValue(value interface{}) PodStatusContainerStateRunning_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateRunning: %d", fp.selector))
	}
}

func (fp *PodStatusContainerStateRunning_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// PodStatusContainerStateRunning_FieldPathValue allows storing values for StateRunning fields according to their type
type PodStatusContainerStateRunning_FieldPathValue interface {
	PodStatusContainerStateRunning_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Pod_Status_Container_StateRunning)
	CompareWith(*Pod_Status_Container_StateRunning) (cmp int, comparable bool)
}

func ParsePodStatusContainerStateRunning_FieldPathValue(pathStr, valueStr string) (PodStatusContainerStateRunning_FieldPathValue, error) {
	fp, err := ParsePodStatusContainerStateRunning_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StateRunning field path value from %s: %v", valueStr, err)
	}
	return fpv.(PodStatusContainerStateRunning_FieldPathValue), nil
}

func MustParsePodStatusContainerStateRunning_FieldPathValue(pathStr, valueStr string) PodStatusContainerStateRunning_FieldPathValue {
	fpv, err := ParsePodStatusContainerStateRunning_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PodStatusContainerStateRunning_FieldTerminalPathValue struct {
	PodStatusContainerStateRunning_FieldTerminalPath
	value interface{}
}

var _ PodStatusContainerStateRunning_FieldPathValue = (*PodStatusContainerStateRunning_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'StateRunning' as interface{}
func (fpv *PodStatusContainerStateRunning_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PodStatusContainerStateRunning_FieldTerminalPathValue) AsStartedAtValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}

// SetTo stores value for selected field for object StateRunning
func (fpv *PodStatusContainerStateRunning_FieldTerminalPathValue) SetTo(target **Pod_Status_Container_StateRunning) {
	if *target == nil {
		*target = new(Pod_Status_Container_StateRunning)
	}
	switch fpv.selector {
	case PodStatusContainerStateRunning_FieldPathSelectorStartedAt:
		(*target).StartedAt = fpv.value.(*timestamppb.Timestamp)
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateRunning: %d", fpv.selector))
	}
}

func (fpv *PodStatusContainerStateRunning_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Pod_Status_Container_StateRunning)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PodStatusContainerStateRunning_FieldTerminalPathValue' with the value under path in 'Pod_Status_Container_StateRunning'.
func (fpv *PodStatusContainerStateRunning_FieldTerminalPathValue) CompareWith(source *Pod_Status_Container_StateRunning) (int, bool) {
	switch fpv.selector {
	case PodStatusContainerStateRunning_FieldPathSelectorStartedAt:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetStartedAt()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateRunning: %d", fpv.selector))
	}
}

func (fpv *PodStatusContainerStateRunning_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Pod_Status_Container_StateRunning))
}

// PodStatusContainerStateRunning_FieldPathArrayItemValue allows storing single item in Path-specific values for StateRunning according to their type
// Present only for array (repeated) types.
type PodStatusContainerStateRunning_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PodStatusContainerStateRunning_FieldPath
	ContainsValue(*Pod_Status_Container_StateRunning) bool
}

// ParsePodStatusContainerStateRunning_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePodStatusContainerStateRunning_FieldPathArrayItemValue(pathStr, valueStr string) (PodStatusContainerStateRunning_FieldPathArrayItemValue, error) {
	fp, err := ParsePodStatusContainerStateRunning_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StateRunning field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PodStatusContainerStateRunning_FieldPathArrayItemValue), nil
}

func MustParsePodStatusContainerStateRunning_FieldPathArrayItemValue(pathStr, valueStr string) PodStatusContainerStateRunning_FieldPathArrayItemValue {
	fpaiv, err := ParsePodStatusContainerStateRunning_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PodStatusContainerStateRunning_FieldTerminalPathArrayItemValue struct {
	PodStatusContainerStateRunning_FieldTerminalPath
	value interface{}
}

var _ PodStatusContainerStateRunning_FieldPathArrayItemValue = (*PodStatusContainerStateRunning_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Pod_Status_Container_StateRunning as interface{}
func (fpaiv *PodStatusContainerStateRunning_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *PodStatusContainerStateRunning_FieldTerminalPathArrayItemValue) GetSingle(source *Pod_Status_Container_StateRunning) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PodStatusContainerStateRunning_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Pod_Status_Container_StateRunning))
}

// Contains returns a boolean indicating if value that is being held is present in given 'StateRunning'
func (fpaiv *PodStatusContainerStateRunning_FieldTerminalPathArrayItemValue) ContainsValue(source *Pod_Status_Container_StateRunning) bool {
	slice := fpaiv.PodStatusContainerStateRunning_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// PodStatusContainerStateRunning_FieldPathArrayOfValues allows storing slice of values for StateRunning fields according to their type
type PodStatusContainerStateRunning_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PodStatusContainerStateRunning_FieldPath
}

func ParsePodStatusContainerStateRunning_FieldPathArrayOfValues(pathStr, valuesStr string) (PodStatusContainerStateRunning_FieldPathArrayOfValues, error) {
	fp, err := ParsePodStatusContainerStateRunning_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StateRunning field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PodStatusContainerStateRunning_FieldPathArrayOfValues), nil
}

func MustParsePodStatusContainerStateRunning_FieldPathArrayOfValues(pathStr, valuesStr string) PodStatusContainerStateRunning_FieldPathArrayOfValues {
	fpaov, err := ParsePodStatusContainerStateRunning_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PodStatusContainerStateRunning_FieldTerminalPathArrayOfValues struct {
	PodStatusContainerStateRunning_FieldTerminalPath
	values interface{}
}

var _ PodStatusContainerStateRunning_FieldPathArrayOfValues = (*PodStatusContainerStateRunning_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PodStatusContainerStateRunning_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PodStatusContainerStateRunning_FieldPathSelectorStartedAt:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PodStatusContainerStateRunning_FieldTerminalPathArrayOfValues) AsStartedAtArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PodStatusContainerStateTerminated_FieldPath interface {
	gotenobject.FieldPath
	Selector() PodStatusContainerStateTerminated_FieldPathSelector
	Get(source *Pod_Status_Container_StateTerminated) []interface{}
	GetSingle(source *Pod_Status_Container_StateTerminated) (interface{}, bool)
	ClearValue(item *Pod_Status_Container_StateTerminated)

	// Those methods build corresponding PodStatusContainerStateTerminated_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PodStatusContainerStateTerminated_FieldPathValue
	WithIArrayOfValues(values interface{}) PodStatusContainerStateTerminated_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PodStatusContainerStateTerminated_FieldPathArrayItemValue
}

type PodStatusContainerStateTerminated_FieldPathSelector int32

const (
	PodStatusContainerStateTerminated_FieldPathSelectorExitCode    PodStatusContainerStateTerminated_FieldPathSelector = 0
	PodStatusContainerStateTerminated_FieldPathSelectorSignal      PodStatusContainerStateTerminated_FieldPathSelector = 1
	PodStatusContainerStateTerminated_FieldPathSelectorReason      PodStatusContainerStateTerminated_FieldPathSelector = 2
	PodStatusContainerStateTerminated_FieldPathSelectorMessage     PodStatusContainerStateTerminated_FieldPathSelector = 3
	PodStatusContainerStateTerminated_FieldPathSelectorStartedAt   PodStatusContainerStateTerminated_FieldPathSelector = 4
	PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt  PodStatusContainerStateTerminated_FieldPathSelector = 5
	PodStatusContainerStateTerminated_FieldPathSelectorContainerId PodStatusContainerStateTerminated_FieldPathSelector = 6
)

func (s PodStatusContainerStateTerminated_FieldPathSelector) String() string {
	switch s {
	case PodStatusContainerStateTerminated_FieldPathSelectorExitCode:
		return "exit_code"
	case PodStatusContainerStateTerminated_FieldPathSelectorSignal:
		return "signal"
	case PodStatusContainerStateTerminated_FieldPathSelectorReason:
		return "reason"
	case PodStatusContainerStateTerminated_FieldPathSelectorMessage:
		return "message"
	case PodStatusContainerStateTerminated_FieldPathSelectorStartedAt:
		return "started_at"
	case PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt:
		return "finished_at"
	case PodStatusContainerStateTerminated_FieldPathSelectorContainerId:
		return "container_id"
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateTerminated: %d", s))
	}
}

func BuildPodStatusContainerStateTerminated_FieldPath(fp gotenobject.RawFieldPath) (PodStatusContainerStateTerminated_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Pod_Status_Container_StateTerminated")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "exit_code", "exitCode", "exit-code":
			return &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorExitCode}, nil
		case "signal":
			return &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorSignal}, nil
		case "reason":
			return &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorReason}, nil
		case "message":
			return &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorMessage}, nil
		case "started_at", "startedAt", "started-at":
			return &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorStartedAt}, nil
		case "finished_at", "finishedAt", "finished-at":
			return &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt}, nil
		case "container_id", "containerId", "container-id":
			return &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorContainerId}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Pod_Status_Container_StateTerminated", fp)
}

func ParsePodStatusContainerStateTerminated_FieldPath(rawField string) (PodStatusContainerStateTerminated_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPodStatusContainerStateTerminated_FieldPath(fp)
}

func MustParsePodStatusContainerStateTerminated_FieldPath(rawField string) PodStatusContainerStateTerminated_FieldPath {
	fp, err := ParsePodStatusContainerStateTerminated_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PodStatusContainerStateTerminated_FieldTerminalPath struct {
	selector PodStatusContainerStateTerminated_FieldPathSelector
}

var _ PodStatusContainerStateTerminated_FieldPath = (*PodStatusContainerStateTerminated_FieldTerminalPath)(nil)

func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) Selector() PodStatusContainerStateTerminated_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Pod_Status_Container_StateTerminated
func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) Get(source *Pod_Status_Container_StateTerminated) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PodStatusContainerStateTerminated_FieldPathSelectorExitCode:
			values = append(values, source.ExitCode)
		case PodStatusContainerStateTerminated_FieldPathSelectorSignal:
			values = append(values, source.Signal)
		case PodStatusContainerStateTerminated_FieldPathSelectorReason:
			values = append(values, source.Reason)
		case PodStatusContainerStateTerminated_FieldPathSelectorMessage:
			values = append(values, source.Message)
		case PodStatusContainerStateTerminated_FieldPathSelectorStartedAt:
			if source.StartedAt != nil {
				values = append(values, source.StartedAt)
			}
		case PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt:
			if source.FinishedAt != nil {
				values = append(values, source.FinishedAt)
			}
		case PodStatusContainerStateTerminated_FieldPathSelectorContainerId:
			values = append(values, source.ContainerId)
		default:
			panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateTerminated: %d", fp.selector))
		}
	}
	return
}

func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Pod_Status_Container_StateTerminated))
}

// GetSingle returns value pointed by specific field of from source Pod_Status_Container_StateTerminated
func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) GetSingle(source *Pod_Status_Container_StateTerminated) (interface{}, bool) {
	switch fp.selector {
	case PodStatusContainerStateTerminated_FieldPathSelectorExitCode:
		return source.GetExitCode(), source != nil
	case PodStatusContainerStateTerminated_FieldPathSelectorSignal:
		return source.GetSignal(), source != nil
	case PodStatusContainerStateTerminated_FieldPathSelectorReason:
		return source.GetReason(), source != nil
	case PodStatusContainerStateTerminated_FieldPathSelectorMessage:
		return source.GetMessage(), source != nil
	case PodStatusContainerStateTerminated_FieldPathSelectorStartedAt:
		res := source.GetStartedAt()
		return res, res != nil
	case PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt:
		res := source.GetFinishedAt()
		return res, res != nil
	case PodStatusContainerStateTerminated_FieldPathSelectorContainerId:
		return source.GetContainerId(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateTerminated: %d", fp.selector))
	}
}

func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Pod_Status_Container_StateTerminated))
}

// GetDefault returns a default value of the field type
func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PodStatusContainerStateTerminated_FieldPathSelectorExitCode:
		return int32(0)
	case PodStatusContainerStateTerminated_FieldPathSelectorSignal:
		return int32(0)
	case PodStatusContainerStateTerminated_FieldPathSelectorReason:
		return ""
	case PodStatusContainerStateTerminated_FieldPathSelectorMessage:
		return ""
	case PodStatusContainerStateTerminated_FieldPathSelectorStartedAt:
		return (*timestamppb.Timestamp)(nil)
	case PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt:
		return (*timestamppb.Timestamp)(nil)
	case PodStatusContainerStateTerminated_FieldPathSelectorContainerId:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateTerminated: %d", fp.selector))
	}
}

func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) ClearValue(item *Pod_Status_Container_StateTerminated) {
	if item != nil {
		switch fp.selector {
		case PodStatusContainerStateTerminated_FieldPathSelectorExitCode:
			item.ExitCode = int32(0)
		case PodStatusContainerStateTerminated_FieldPathSelectorSignal:
			item.Signal = int32(0)
		case PodStatusContainerStateTerminated_FieldPathSelectorReason:
			item.Reason = ""
		case PodStatusContainerStateTerminated_FieldPathSelectorMessage:
			item.Message = ""
		case PodStatusContainerStateTerminated_FieldPathSelectorStartedAt:
			item.StartedAt = nil
		case PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt:
			item.FinishedAt = nil
		case PodStatusContainerStateTerminated_FieldPathSelectorContainerId:
			item.ContainerId = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateTerminated: %d", fp.selector))
		}
	}
}

func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Pod_Status_Container_StateTerminated))
}

// IsLeaf - whether field path is holds simple value
func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PodStatusContainerStateTerminated_FieldPathSelectorExitCode ||
		fp.selector == PodStatusContainerStateTerminated_FieldPathSelectorSignal ||
		fp.selector == PodStatusContainerStateTerminated_FieldPathSelectorReason ||
		fp.selector == PodStatusContainerStateTerminated_FieldPathSelectorMessage ||
		fp.selector == PodStatusContainerStateTerminated_FieldPathSelectorStartedAt ||
		fp.selector == PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt ||
		fp.selector == PodStatusContainerStateTerminated_FieldPathSelectorContainerId
}

func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) WithIValue(value interface{}) PodStatusContainerStateTerminated_FieldPathValue {
	switch fp.selector {
	case PodStatusContainerStateTerminated_FieldPathSelectorExitCode:
		return &PodStatusContainerStateTerminated_FieldTerminalPathValue{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, value: value.(int32)}
	case PodStatusContainerStateTerminated_FieldPathSelectorSignal:
		return &PodStatusContainerStateTerminated_FieldTerminalPathValue{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, value: value.(int32)}
	case PodStatusContainerStateTerminated_FieldPathSelectorReason:
		return &PodStatusContainerStateTerminated_FieldTerminalPathValue{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, value: value.(string)}
	case PodStatusContainerStateTerminated_FieldPathSelectorMessage:
		return &PodStatusContainerStateTerminated_FieldTerminalPathValue{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, value: value.(string)}
	case PodStatusContainerStateTerminated_FieldPathSelectorStartedAt:
		return &PodStatusContainerStateTerminated_FieldTerminalPathValue{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	case PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt:
		return &PodStatusContainerStateTerminated_FieldTerminalPathValue{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, value: value.(*timestamppb.Timestamp)}
	case PodStatusContainerStateTerminated_FieldPathSelectorContainerId:
		return &PodStatusContainerStateTerminated_FieldTerminalPathValue{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateTerminated: %d", fp.selector))
	}
}

func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) WithIArrayOfValues(values interface{}) PodStatusContainerStateTerminated_FieldPathArrayOfValues {
	fpaov := &PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues{PodStatusContainerStateTerminated_FieldTerminalPath: *fp}
	switch fp.selector {
	case PodStatusContainerStateTerminated_FieldPathSelectorExitCode:
		return &PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, values: values.([]int32)}
	case PodStatusContainerStateTerminated_FieldPathSelectorSignal:
		return &PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, values: values.([]int32)}
	case PodStatusContainerStateTerminated_FieldPathSelectorReason:
		return &PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, values: values.([]string)}
	case PodStatusContainerStateTerminated_FieldPathSelectorMessage:
		return &PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, values: values.([]string)}
	case PodStatusContainerStateTerminated_FieldPathSelectorStartedAt:
		return &PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	case PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt:
		return &PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, values: values.([]*timestamppb.Timestamp)}
	case PodStatusContainerStateTerminated_FieldPathSelectorContainerId:
		return &PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues{PodStatusContainerStateTerminated_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateTerminated: %d", fp.selector))
	}
	return fpaov
}

func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) WithIArrayItemValue(value interface{}) PodStatusContainerStateTerminated_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateTerminated: %d", fp.selector))
	}
}

func (fp *PodStatusContainerStateTerminated_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// PodStatusContainerStateTerminated_FieldPathValue allows storing values for StateTerminated fields according to their type
type PodStatusContainerStateTerminated_FieldPathValue interface {
	PodStatusContainerStateTerminated_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Pod_Status_Container_StateTerminated)
	CompareWith(*Pod_Status_Container_StateTerminated) (cmp int, comparable bool)
}

func ParsePodStatusContainerStateTerminated_FieldPathValue(pathStr, valueStr string) (PodStatusContainerStateTerminated_FieldPathValue, error) {
	fp, err := ParsePodStatusContainerStateTerminated_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StateTerminated field path value from %s: %v", valueStr, err)
	}
	return fpv.(PodStatusContainerStateTerminated_FieldPathValue), nil
}

func MustParsePodStatusContainerStateTerminated_FieldPathValue(pathStr, valueStr string) PodStatusContainerStateTerminated_FieldPathValue {
	fpv, err := ParsePodStatusContainerStateTerminated_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PodStatusContainerStateTerminated_FieldTerminalPathValue struct {
	PodStatusContainerStateTerminated_FieldTerminalPath
	value interface{}
}

var _ PodStatusContainerStateTerminated_FieldPathValue = (*PodStatusContainerStateTerminated_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'StateTerminated' as interface{}
func (fpv *PodStatusContainerStateTerminated_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PodStatusContainerStateTerminated_FieldTerminalPathValue) AsExitCodeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *PodStatusContainerStateTerminated_FieldTerminalPathValue) AsSignalValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *PodStatusContainerStateTerminated_FieldTerminalPathValue) AsReasonValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PodStatusContainerStateTerminated_FieldTerminalPathValue) AsMessageValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PodStatusContainerStateTerminated_FieldTerminalPathValue) AsStartedAtValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}
func (fpv *PodStatusContainerStateTerminated_FieldTerminalPathValue) AsFinishedAtValue() (*timestamppb.Timestamp, bool) {
	res, ok := fpv.value.(*timestamppb.Timestamp)
	return res, ok
}
func (fpv *PodStatusContainerStateTerminated_FieldTerminalPathValue) AsContainerIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object StateTerminated
func (fpv *PodStatusContainerStateTerminated_FieldTerminalPathValue) SetTo(target **Pod_Status_Container_StateTerminated) {
	if *target == nil {
		*target = new(Pod_Status_Container_StateTerminated)
	}
	switch fpv.selector {
	case PodStatusContainerStateTerminated_FieldPathSelectorExitCode:
		(*target).ExitCode = fpv.value.(int32)
	case PodStatusContainerStateTerminated_FieldPathSelectorSignal:
		(*target).Signal = fpv.value.(int32)
	case PodStatusContainerStateTerminated_FieldPathSelectorReason:
		(*target).Reason = fpv.value.(string)
	case PodStatusContainerStateTerminated_FieldPathSelectorMessage:
		(*target).Message = fpv.value.(string)
	case PodStatusContainerStateTerminated_FieldPathSelectorStartedAt:
		(*target).StartedAt = fpv.value.(*timestamppb.Timestamp)
	case PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt:
		(*target).FinishedAt = fpv.value.(*timestamppb.Timestamp)
	case PodStatusContainerStateTerminated_FieldPathSelectorContainerId:
		(*target).ContainerId = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateTerminated: %d", fpv.selector))
	}
}

func (fpv *PodStatusContainerStateTerminated_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Pod_Status_Container_StateTerminated)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PodStatusContainerStateTerminated_FieldTerminalPathValue' with the value under path in 'Pod_Status_Container_StateTerminated'.
func (fpv *PodStatusContainerStateTerminated_FieldTerminalPathValue) CompareWith(source *Pod_Status_Container_StateTerminated) (int, bool) {
	switch fpv.selector {
	case PodStatusContainerStateTerminated_FieldPathSelectorExitCode:
		leftValue := fpv.value.(int32)
		rightValue := source.GetExitCode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatusContainerStateTerminated_FieldPathSelectorSignal:
		leftValue := fpv.value.(int32)
		rightValue := source.GetSignal()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatusContainerStateTerminated_FieldPathSelectorReason:
		leftValue := fpv.value.(string)
		rightValue := source.GetReason()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatusContainerStateTerminated_FieldPathSelectorMessage:
		leftValue := fpv.value.(string)
		rightValue := source.GetMessage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatusContainerStateTerminated_FieldPathSelectorStartedAt:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetStartedAt()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt:
		leftValue := fpv.value.(*timestamppb.Timestamp)
		rightValue := source.GetFinishedAt()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case PodStatusContainerStateTerminated_FieldPathSelectorContainerId:
		leftValue := fpv.value.(string)
		rightValue := source.GetContainerId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Pod_Status_Container_StateTerminated: %d", fpv.selector))
	}
}

func (fpv *PodStatusContainerStateTerminated_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Pod_Status_Container_StateTerminated))
}

// PodStatusContainerStateTerminated_FieldPathArrayItemValue allows storing single item in Path-specific values for StateTerminated according to their type
// Present only for array (repeated) types.
type PodStatusContainerStateTerminated_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PodStatusContainerStateTerminated_FieldPath
	ContainsValue(*Pod_Status_Container_StateTerminated) bool
}

// ParsePodStatusContainerStateTerminated_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePodStatusContainerStateTerminated_FieldPathArrayItemValue(pathStr, valueStr string) (PodStatusContainerStateTerminated_FieldPathArrayItemValue, error) {
	fp, err := ParsePodStatusContainerStateTerminated_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StateTerminated field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PodStatusContainerStateTerminated_FieldPathArrayItemValue), nil
}

func MustParsePodStatusContainerStateTerminated_FieldPathArrayItemValue(pathStr, valueStr string) PodStatusContainerStateTerminated_FieldPathArrayItemValue {
	fpaiv, err := ParsePodStatusContainerStateTerminated_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PodStatusContainerStateTerminated_FieldTerminalPathArrayItemValue struct {
	PodStatusContainerStateTerminated_FieldTerminalPath
	value interface{}
}

var _ PodStatusContainerStateTerminated_FieldPathArrayItemValue = (*PodStatusContainerStateTerminated_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Pod_Status_Container_StateTerminated as interface{}
func (fpaiv *PodStatusContainerStateTerminated_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *PodStatusContainerStateTerminated_FieldTerminalPathArrayItemValue) GetSingle(source *Pod_Status_Container_StateTerminated) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PodStatusContainerStateTerminated_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Pod_Status_Container_StateTerminated))
}

// Contains returns a boolean indicating if value that is being held is present in given 'StateTerminated'
func (fpaiv *PodStatusContainerStateTerminated_FieldTerminalPathArrayItemValue) ContainsValue(source *Pod_Status_Container_StateTerminated) bool {
	slice := fpaiv.PodStatusContainerStateTerminated_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// PodStatusContainerStateTerminated_FieldPathArrayOfValues allows storing slice of values for StateTerminated fields according to their type
type PodStatusContainerStateTerminated_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PodStatusContainerStateTerminated_FieldPath
}

func ParsePodStatusContainerStateTerminated_FieldPathArrayOfValues(pathStr, valuesStr string) (PodStatusContainerStateTerminated_FieldPathArrayOfValues, error) {
	fp, err := ParsePodStatusContainerStateTerminated_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing StateTerminated field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PodStatusContainerStateTerminated_FieldPathArrayOfValues), nil
}

func MustParsePodStatusContainerStateTerminated_FieldPathArrayOfValues(pathStr, valuesStr string) PodStatusContainerStateTerminated_FieldPathArrayOfValues {
	fpaov, err := ParsePodStatusContainerStateTerminated_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues struct {
	PodStatusContainerStateTerminated_FieldTerminalPath
	values interface{}
}

var _ PodStatusContainerStateTerminated_FieldPathArrayOfValues = (*PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PodStatusContainerStateTerminated_FieldPathSelectorExitCode:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case PodStatusContainerStateTerminated_FieldPathSelectorSignal:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case PodStatusContainerStateTerminated_FieldPathSelectorReason:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PodStatusContainerStateTerminated_FieldPathSelectorMessage:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PodStatusContainerStateTerminated_FieldPathSelectorStartedAt:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	case PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt:
		for _, v := range fpaov.values.([]*timestamppb.Timestamp) {
			values = append(values, v)
		}
	case PodStatusContainerStateTerminated_FieldPathSelectorContainerId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues) AsExitCodeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues) AsSignalArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues) AsReasonArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues) AsMessageArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues) AsStartedAtArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}
func (fpaov *PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues) AsFinishedAtArrayOfValues() ([]*timestamppb.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamppb.Timestamp)
	return res, ok
}
func (fpaov *PodStatusContainerStateTerminated_FieldTerminalPathArrayOfValues) AsContainerIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
