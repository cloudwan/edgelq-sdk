// Code generated by protoc-gen-goten-resource
// Resource: ConfigMap
// DO NOT EDIT!!!

package config_map

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha/project"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &ntt_meta.Meta{}
)

type ConfigMapList []*ConfigMap

func (l ConfigMapList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*ConfigMap))
}

func (l ConfigMapList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ConfigMapList)...)
}

func (l ConfigMapList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConfigMapList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ConfigMapList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*ConfigMap)
}

func (l ConfigMapList) Length() int {
	return len(l)
}

type ConfigMapChangeList []*ConfigMapChange

func (l ConfigMapChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ConfigMapChange))
}

func (l ConfigMapChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ConfigMapChangeList)...)
}

func (l ConfigMapChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConfigMapChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ConfigMapChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ConfigMapChange)
}

func (l ConfigMapChangeList) Length() int {
	return len(l)
}

type ConfigMapNameList []*Name

func (l ConfigMapNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ConfigMapNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ConfigMapNameList)...)
}

func (l ConfigMapNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConfigMapNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ConfigMapNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ConfigMapNameList) Length() int {
	return len(l)
}

type ConfigMapReferenceList []*Reference

func (l ConfigMapReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ConfigMapReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ConfigMapReferenceList)...)
}

func (l ConfigMapReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConfigMapReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ConfigMapReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ConfigMapReferenceList) Length() int {
	return len(l)
}

type ConfigMapParentNameList []*ParentName

func (l ConfigMapParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ConfigMapParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ConfigMapParentNameList)...)
}

func (l ConfigMapParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConfigMapParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ConfigMapParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ConfigMapParentNameList) Length() int {
	return len(l)
}

type ConfigMapParentReferenceList []*ParentReference

func (l ConfigMapParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ConfigMapParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ConfigMapParentReferenceList)...)
}

func (l ConfigMapParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ConfigMapParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ConfigMapParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ConfigMapParentReferenceList) Length() int {
	return len(l)
}

type ConfigMapMap map[Name]*ConfigMap

func (m ConfigMapMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ConfigMapMap) Set(res gotenresource.Resource) {
	tRes := res.(*ConfigMap)
	m[*tRes.Name] = tRes
}

func (m ConfigMapMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ConfigMapMap) Length() int {
	return len(m)
}

func (m ConfigMapMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ConfigMapChangeMap map[Name]*ConfigMapChange

func (m ConfigMapChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ConfigMapChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ConfigMapChange)
	m[*tChange.GetConfigMapName()] = tChange
}

func (m ConfigMapChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ConfigMapChangeMap) Length() int {
	return len(m)
}

func (m ConfigMapChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
