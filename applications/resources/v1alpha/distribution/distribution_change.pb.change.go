// Code generated by protoc-gen-goten-resource
// Resource change: DistributionChange
// DO NOT EDIT!!!

package distribution

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha/project"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &field_mask.FieldMask{}
)

func (c *DistributionChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*DistributionChange_Added_)
	return ok
}

func (c *DistributionChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*DistributionChange_Modified_)
	return ok
}

func (c *DistributionChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*DistributionChange_Current_)
	return ok
}

func (c *DistributionChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*DistributionChange_Removed_)
	return ok
}

func (c *DistributionChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *DistributionChange_Added_:
		return cType.Added.ViewIndex
	case *DistributionChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *DistributionChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *DistributionChange_Removed_:
		return cType.Removed.ViewIndex
	case *DistributionChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *DistributionChange) GetDistribution() *Distribution {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *DistributionChange_Added_:
		return cType.Added.Distribution
	case *DistributionChange_Modified_:
		return cType.Modified.Distribution
	case *DistributionChange_Current_:
		return cType.Current.Distribution
	case *DistributionChange_Removed_:
		return nil
	}
	return nil
}

func (c *DistributionChange) GetRawResource() gotenresource.Resource {
	return c.GetDistribution()
}

func (c *DistributionChange) GetDistributionName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *DistributionChange_Added_:
		return cType.Added.Distribution.GetName()
	case *DistributionChange_Modified_:
		return cType.Modified.Name
	case *DistributionChange_Current_:
		return cType.Current.Distribution.GetName()
	case *DistributionChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *DistributionChange) GetRawName() gotenresource.Name {
	return c.GetDistributionName()
}

func (c *DistributionChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &DistributionChange_Added_{
		Added: &DistributionChange_Added{
			Distribution: snapshot.(*Distribution),
			ViewIndex:    int32(idx),
		},
	}
}

func (c *DistributionChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &DistributionChange_Modified_{
		Modified: &DistributionChange_Modified{
			Name:              name.(*Name),
			Distribution:      snapshot.(*Distribution),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *DistributionChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &DistributionChange_Current_{
		Current: &DistributionChange_Current{
			Distribution: snapshot.(*Distribution),
		},
	}
}

func (c *DistributionChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &DistributionChange_Removed_{
		Removed: &DistributionChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
