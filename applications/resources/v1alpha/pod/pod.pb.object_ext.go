// Code generated by protoc-gen-goten-object
// File: edgelq/applications/proto/v1alpha/pod.proto
// DO NOT EDIT!!!

package pod

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha/project"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	devices_device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/device"
	secrets_secret "github.com/cloudwan/edgelq-sdk/secrets/resources/v1alpha/secret"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &ntt_meta.Meta{}
	_ = &devices_device.Device{}
	_ = &secrets_secret.Secret{}
	_ = &timestamp.Timestamp{}
)

func (o *Pod) GotenObjectExt() {}

func (o *Pod) MakeFullFieldMask() *Pod_FieldMask {
	return FullPod_FieldMask()
}

func (o *Pod) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPod_FieldMask()
}

func (o *Pod) MakeDiffFieldMask(other *Pod) *Pod_FieldMask {
	if o == nil && other == nil {
		return &Pod_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPod_FieldMask()
	}

	res := &Pod_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorDisplayName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Pod_FieldSubPath{selector: Pod_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Pod_FieldSubPath{selector: Pod_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetStatus().MakeDiffFieldMask(other.GetStatus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Pod_FieldTerminalPath{selector: Pod_FieldPathSelectorStatus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Pod_FieldSubPath{selector: Pod_FieldPathSelectorStatus, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Pod) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Pod))
}

func (o *Pod) Clone() *Pod {
	if o == nil {
		return nil
	}
	result := &Pod{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.Metadata = o.Metadata.Clone()
	result.Spec = o.Spec.Clone()
	result.Status = o.Status.Clone()
	return result
}

func (o *Pod) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Pod) Merge(source *Pod) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(Pod_Spec)
		}
		o.Spec.Merge(source.GetSpec())
	}
	if source.GetStatus() != nil {
		if o.Status == nil {
			o.Status = new(Pod_Status)
		}
		o.Status.Merge(source.GetStatus())
	}
}

func (o *Pod) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Pod))
}

func (o *Pod_Spec) GotenObjectExt() {}

func (o *Pod_Spec) MakeFullFieldMask() *Pod_Spec_FieldMask {
	return FullPod_Spec_FieldMask()
}

func (o *Pod_Spec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPod_Spec_FieldMask()
}

func (o *Pod_Spec) MakeDiffFieldMask(other *Pod_Spec) *Pod_Spec_FieldMask {
	if o == nil && other == nil {
		return &Pod_Spec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPod_Spec_FieldMask()
	}

	res := &Pod_Spec_FieldMask{}
	if o.GetNode().String() != other.GetNode().String() {
		res.Paths = append(res.Paths, &PodSpec_FieldTerminalPath{selector: PodSpec_FieldPathSelectorNode})
	}

	if len(o.GetContainers()) == len(other.GetContainers()) {
		for i, lValue := range o.GetContainers() {
			rValue := other.GetContainers()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PodSpec_FieldTerminalPath{selector: PodSpec_FieldPathSelectorContainers})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PodSpec_FieldTerminalPath{selector: PodSpec_FieldPathSelectorContainers})
	}
	if o.GetHostNetwork() != other.GetHostNetwork() {
		res.Paths = append(res.Paths, &PodSpec_FieldTerminalPath{selector: PodSpec_FieldPathSelectorHostNetwork})
	}
	if o.GetRestartPolicy() != other.GetRestartPolicy() {
		res.Paths = append(res.Paths, &PodSpec_FieldTerminalPath{selector: PodSpec_FieldPathSelectorRestartPolicy})
	}

	if len(o.GetImagePullSecrets()) == len(other.GetImagePullSecrets()) {
		for i, lValue := range o.GetImagePullSecrets() {
			rValue := other.GetImagePullSecrets()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PodSpec_FieldTerminalPath{selector: PodSpec_FieldPathSelectorImagePullSecrets})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PodSpec_FieldTerminalPath{selector: PodSpec_FieldPathSelectorImagePullSecrets})
	}

	if len(o.GetVolumes()) == len(other.GetVolumes()) {
		for i, lValue := range o.GetVolumes() {
			rValue := other.GetVolumes()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PodSpec_FieldTerminalPath{selector: PodSpec_FieldPathSelectorVolumes})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PodSpec_FieldTerminalPath{selector: PodSpec_FieldPathSelectorVolumes})
	}
	if o.GetCompose() != other.GetCompose() {
		res.Paths = append(res.Paths, &PodSpec_FieldTerminalPath{selector: PodSpec_FieldPathSelectorCompose})
	}

	if len(o.GetHostVolumeMounts()) == len(other.GetHostVolumeMounts()) {
		for i, lValue := range o.GetHostVolumeMounts() {
			rValue := other.GetHostVolumeMounts()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PodSpec_FieldTerminalPath{selector: PodSpec_FieldPathSelectorHostVolumeMounts})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PodSpec_FieldTerminalPath{selector: PodSpec_FieldPathSelectorHostVolumeMounts})
	}
	return res
}

func (o *Pod_Spec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Pod_Spec))
}

func (o *Pod_Spec) Clone() *Pod_Spec {
	if o == nil {
		return nil
	}
	result := &Pod_Spec{}
	if o.Node == nil {
		result.Node = nil
	} else if data, err := o.Node.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Node = &devices_device.Reference{}
		if err := result.Node.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Containers = make([]*Pod_Spec_Container, len(o.Containers))
	for i, sourceValue := range o.Containers {
		result.Containers[i] = sourceValue.Clone()
	}
	result.HostNetwork = o.HostNetwork
	result.RestartPolicy = o.RestartPolicy
	result.ImagePullSecrets = make([]*LocalObjectReferenceSecret, len(o.ImagePullSecrets))
	for i, sourceValue := range o.ImagePullSecrets {
		result.ImagePullSecrets[i] = sourceValue.Clone()
	}
	result.Volumes = make([]*Volume, len(o.Volumes))
	for i, sourceValue := range o.Volumes {
		result.Volumes[i] = sourceValue.Clone()
	}
	result.Compose = o.Compose
	result.HostVolumeMounts = make([]*VolumeMount, len(o.HostVolumeMounts))
	for i, sourceValue := range o.HostVolumeMounts {
		result.HostVolumeMounts[i] = sourceValue.Clone()
	}
	return result
}

func (o *Pod_Spec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Pod_Spec) Merge(source *Pod_Spec) {
	if source.GetNode() != nil {
		if data, err := source.GetNode().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Node = &devices_device.Reference{}
			if err := o.Node.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Node = nil
	}
	for _, sourceValue := range source.GetContainers() {
		exists := false
		for _, currentValue := range o.Containers {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Pod_Spec_Container
			if sourceValue != nil {
				newDstElement = new(Pod_Spec_Container)
				newDstElement.Merge(sourceValue)
			}
			o.Containers = append(o.Containers, newDstElement)
		}
	}

	o.HostNetwork = source.GetHostNetwork()
	o.RestartPolicy = source.GetRestartPolicy()
	for _, sourceValue := range source.GetImagePullSecrets() {
		exists := false
		for _, currentValue := range o.ImagePullSecrets {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *LocalObjectReferenceSecret
			if sourceValue != nil {
				newDstElement = new(LocalObjectReferenceSecret)
				newDstElement.Merge(sourceValue)
			}
			o.ImagePullSecrets = append(o.ImagePullSecrets, newDstElement)
		}
	}

	for _, sourceValue := range source.GetVolumes() {
		exists := false
		for _, currentValue := range o.Volumes {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Volume
			if sourceValue != nil {
				newDstElement = new(Volume)
				newDstElement.Merge(sourceValue)
			}
			o.Volumes = append(o.Volumes, newDstElement)
		}
	}

	o.Compose = source.GetCompose()
	for _, sourceValue := range source.GetHostVolumeMounts() {
		exists := false
		for _, currentValue := range o.HostVolumeMounts {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *VolumeMount
			if sourceValue != nil {
				newDstElement = new(VolumeMount)
				newDstElement.Merge(sourceValue)
			}
			o.HostVolumeMounts = append(o.HostVolumeMounts, newDstElement)
		}
	}

}

func (o *Pod_Spec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Pod_Spec))
}

func (o *Pod_Status) GotenObjectExt() {}

func (o *Pod_Status) MakeFullFieldMask() *Pod_Status_FieldMask {
	return FullPod_Status_FieldMask()
}

func (o *Pod_Status) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPod_Status_FieldMask()
}

func (o *Pod_Status) MakeDiffFieldMask(other *Pod_Status) *Pod_Status_FieldMask {
	if o == nil && other == nil {
		return &Pod_Status_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPod_Status_FieldMask()
	}

	res := &Pod_Status_FieldMask{}
	if o.GetPhase() != other.GetPhase() {
		res.Paths = append(res.Paths, &PodStatus_FieldTerminalPath{selector: PodStatus_FieldPathSelectorPhase})
	}

	if len(o.GetContainerStatuses()) == len(other.GetContainerStatuses()) {
		for i, lValue := range o.GetContainerStatuses() {
			rValue := other.GetContainerStatuses()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PodStatus_FieldTerminalPath{selector: PodStatus_FieldPathSelectorContainerStatuses})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PodStatus_FieldTerminalPath{selector: PodStatus_FieldPathSelectorContainerStatuses})
	}
	return res
}

func (o *Pod_Status) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Pod_Status))
}

func (o *Pod_Status) Clone() *Pod_Status {
	if o == nil {
		return nil
	}
	result := &Pod_Status{}
	result.Phase = o.Phase
	result.ContainerStatuses = make([]*Pod_Status_Container, len(o.ContainerStatuses))
	for i, sourceValue := range o.ContainerStatuses {
		result.ContainerStatuses[i] = sourceValue.Clone()
	}
	return result
}

func (o *Pod_Status) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Pod_Status) Merge(source *Pod_Status) {
	o.Phase = source.GetPhase()
	for _, sourceValue := range source.GetContainerStatuses() {
		exists := false
		for _, currentValue := range o.ContainerStatuses {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Pod_Status_Container
			if sourceValue != nil {
				newDstElement = new(Pod_Status_Container)
				newDstElement.Merge(sourceValue)
			}
			o.ContainerStatuses = append(o.ContainerStatuses, newDstElement)
		}
	}

}

func (o *Pod_Status) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Pod_Status))
}

func (o *Pod_Spec_Container) GotenObjectExt() {}

func (o *Pod_Spec_Container) MakeFullFieldMask() *Pod_Spec_Container_FieldMask {
	return FullPod_Spec_Container_FieldMask()
}

func (o *Pod_Spec_Container) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPod_Spec_Container_FieldMask()
}

func (o *Pod_Spec_Container) MakeDiffFieldMask(other *Pod_Spec_Container) *Pod_Spec_Container_FieldMask {
	if o == nil && other == nil {
		return &Pod_Spec_Container_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPod_Spec_Container_FieldMask()
	}

	res := &Pod_Spec_Container_FieldMask{}

	if len(o.GetArgs()) == len(other.GetArgs()) {
		for i, lValue := range o.GetArgs() {
			rValue := other.GetArgs()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorArgs})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorArgs})
	}

	if len(o.GetCommand()) == len(other.GetCommand()) {
		for i, lValue := range o.GetCommand() {
			rValue := other.GetCommand()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorCommand})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorCommand})
	}

	if len(o.GetEnv()) == len(other.GetEnv()) {
		for i, lValue := range o.GetEnv() {
			rValue := other.GetEnv()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorEnv})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorEnv})
	}
	if o.GetImage() != other.GetImage() {
		res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorImage})
	}
	if o.GetImagePullPolicy() != other.GetImagePullPolicy() {
		res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorImagePullPolicy})
	}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorName})
	}
	{
		subMask := o.GetResources().MakeDiffFieldMask(other.GetResources())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorResources})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PodSpecContainer_FieldSubPath{selector: PodSpecContainer_FieldPathSelectorResources, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSecurityContext().MakeDiffFieldMask(other.GetSecurityContext())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorSecurityContext})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PodSpecContainer_FieldSubPath{selector: PodSpecContainer_FieldPathSelectorSecurityContext, subPath: subpath})
			}
		}
	}

	if len(o.GetVolumeMounts()) == len(other.GetVolumeMounts()) {
		for i, lValue := range o.GetVolumeMounts() {
			rValue := other.GetVolumeMounts()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorVolumeMounts})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorVolumeMounts})
	}
	{
		subMask := o.GetEnvFrom().MakeDiffFieldMask(other.GetEnvFrom())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PodSpecContainer_FieldTerminalPath{selector: PodSpecContainer_FieldPathSelectorEnvFrom})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PodSpecContainer_FieldSubPath{selector: PodSpecContainer_FieldPathSelectorEnvFrom, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Pod_Spec_Container) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Pod_Spec_Container))
}

func (o *Pod_Spec_Container) Clone() *Pod_Spec_Container {
	if o == nil {
		return nil
	}
	result := &Pod_Spec_Container{}
	result.Args = make([]string, len(o.Args))
	for i, sourceValue := range o.Args {
		result.Args[i] = sourceValue
	}
	result.Command = make([]string, len(o.Command))
	for i, sourceValue := range o.Command {
		result.Command[i] = sourceValue
	}
	result.Env = make([]*EnvVar, len(o.Env))
	for i, sourceValue := range o.Env {
		result.Env[i] = sourceValue.Clone()
	}
	result.Image = o.Image
	result.ImagePullPolicy = o.ImagePullPolicy
	result.Name = o.Name
	result.Resources = o.Resources.Clone()
	result.SecurityContext = o.SecurityContext.Clone()
	result.VolumeMounts = make([]*VolumeMount, len(o.VolumeMounts))
	for i, sourceValue := range o.VolumeMounts {
		result.VolumeMounts[i] = sourceValue.Clone()
	}
	result.EnvFrom = o.EnvFrom.Clone()
	return result
}

func (o *Pod_Spec_Container) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Pod_Spec_Container) Merge(source *Pod_Spec_Container) {
	for _, sourceValue := range source.GetArgs() {
		exists := false
		for _, currentValue := range o.Args {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Args = append(o.Args, newDstElement)
		}
	}

	for _, sourceValue := range source.GetCommand() {
		exists := false
		for _, currentValue := range o.Command {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Command = append(o.Command, newDstElement)
		}
	}

	for _, sourceValue := range source.GetEnv() {
		exists := false
		for _, currentValue := range o.Env {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *EnvVar
			if sourceValue != nil {
				newDstElement = new(EnvVar)
				newDstElement.Merge(sourceValue)
			}
			o.Env = append(o.Env, newDstElement)
		}
	}

	o.Image = source.GetImage()
	o.ImagePullPolicy = source.GetImagePullPolicy()
	o.Name = source.GetName()
	if source.GetResources() != nil {
		if o.Resources == nil {
			o.Resources = new(Pod_Spec_Container_ResourceRequirements)
		}
		o.Resources.Merge(source.GetResources())
	}
	if source.GetSecurityContext() != nil {
		if o.SecurityContext == nil {
			o.SecurityContext = new(SecurityContext)
		}
		o.SecurityContext.Merge(source.GetSecurityContext())
	}
	for _, sourceValue := range source.GetVolumeMounts() {
		exists := false
		for _, currentValue := range o.VolumeMounts {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *VolumeMount
			if sourceValue != nil {
				newDstElement = new(VolumeMount)
				newDstElement.Merge(sourceValue)
			}
			o.VolumeMounts = append(o.VolumeMounts, newDstElement)
		}
	}

	if source.GetEnvFrom() != nil {
		if o.EnvFrom == nil {
			o.EnvFrom = new(EnvFromSource)
		}
		o.EnvFrom.Merge(source.GetEnvFrom())
	}
}

func (o *Pod_Spec_Container) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Pod_Spec_Container))
}

func (o *Pod_Spec_Container_ResourceRequirements) GotenObjectExt() {}

func (o *Pod_Spec_Container_ResourceRequirements) MakeFullFieldMask() *Pod_Spec_Container_ResourceRequirements_FieldMask {
	return FullPod_Spec_Container_ResourceRequirements_FieldMask()
}

func (o *Pod_Spec_Container_ResourceRequirements) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPod_Spec_Container_ResourceRequirements_FieldMask()
}

func (o *Pod_Spec_Container_ResourceRequirements) MakeDiffFieldMask(other *Pod_Spec_Container_ResourceRequirements) *Pod_Spec_Container_ResourceRequirements_FieldMask {
	if o == nil && other == nil {
		return &Pod_Spec_Container_ResourceRequirements_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPod_Spec_Container_ResourceRequirements_FieldMask()
	}

	res := &Pod_Spec_Container_ResourceRequirements_FieldMask{}

	if len(o.GetLimits()) == len(other.GetLimits()) {
		for i, lValue := range o.GetLimits() {
			rValue := other.GetLimits()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PodSpecContainerResourceRequirements_FieldTerminalPath{selector: PodSpecContainerResourceRequirements_FieldPathSelectorLimits})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PodSpecContainerResourceRequirements_FieldTerminalPath{selector: PodSpecContainerResourceRequirements_FieldPathSelectorLimits})
	}

	if len(o.GetRequests()) == len(other.GetRequests()) {
		for i, lValue := range o.GetRequests() {
			rValue := other.GetRequests()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PodSpecContainerResourceRequirements_FieldTerminalPath{selector: PodSpecContainerResourceRequirements_FieldPathSelectorRequests})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PodSpecContainerResourceRequirements_FieldTerminalPath{selector: PodSpecContainerResourceRequirements_FieldPathSelectorRequests})
	}
	return res
}

func (o *Pod_Spec_Container_ResourceRequirements) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Pod_Spec_Container_ResourceRequirements))
}

func (o *Pod_Spec_Container_ResourceRequirements) Clone() *Pod_Spec_Container_ResourceRequirements {
	if o == nil {
		return nil
	}
	result := &Pod_Spec_Container_ResourceRequirements{}
	result.Limits = map[string]int64{}
	for key, sourceValue := range o.Limits {
		result.Limits[key] = sourceValue
	}
	result.Requests = map[string]int64{}
	for key, sourceValue := range o.Requests {
		result.Requests[key] = sourceValue
	}
	return result
}

func (o *Pod_Spec_Container_ResourceRequirements) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Pod_Spec_Container_ResourceRequirements) Merge(source *Pod_Spec_Container_ResourceRequirements) {
	if source.GetLimits() != nil {
		if o.Limits == nil {
			o.Limits = make(map[string]int64, len(source.GetLimits()))
		}
		for key, sourceValue := range source.GetLimits() {
			o.Limits[key] = sourceValue
		}
	}
	if source.GetRequests() != nil {
		if o.Requests == nil {
			o.Requests = make(map[string]int64, len(source.GetRequests()))
		}
		for key, sourceValue := range source.GetRequests() {
			o.Requests[key] = sourceValue
		}
	}
}

func (o *Pod_Spec_Container_ResourceRequirements) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Pod_Spec_Container_ResourceRequirements))
}

func (o *Pod_Status_Container) GotenObjectExt() {}

func (o *Pod_Status_Container) MakeFullFieldMask() *Pod_Status_Container_FieldMask {
	return FullPod_Status_Container_FieldMask()
}

func (o *Pod_Status_Container) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPod_Status_Container_FieldMask()
}

func (o *Pod_Status_Container) MakeDiffFieldMask(other *Pod_Status_Container) *Pod_Status_Container_FieldMask {
	if o == nil && other == nil {
		return &Pod_Status_Container_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPod_Status_Container_FieldMask()
	}

	res := &Pod_Status_Container_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorName})
	}
	if o.GetState() != other.GetState() {
		res.Paths = append(res.Paths, &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorState})
	}
	{
		subMask := o.GetWaiting().MakeDiffFieldMask(other.GetWaiting())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorWaiting})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PodStatusContainer_FieldSubPath{selector: PodStatusContainer_FieldPathSelectorWaiting, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetRunning().MakeDiffFieldMask(other.GetRunning())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorRunning})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PodStatusContainer_FieldSubPath{selector: PodStatusContainer_FieldPathSelectorRunning, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetTerminated().MakeDiffFieldMask(other.GetTerminated())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PodStatusContainer_FieldTerminalPath{selector: PodStatusContainer_FieldPathSelectorTerminated})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PodStatusContainer_FieldSubPath{selector: PodStatusContainer_FieldPathSelectorTerminated, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Pod_Status_Container) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Pod_Status_Container))
}

func (o *Pod_Status_Container) Clone() *Pod_Status_Container {
	if o == nil {
		return nil
	}
	result := &Pod_Status_Container{}
	result.Name = o.Name
	result.State = o.State
	result.Waiting = o.Waiting.Clone()
	result.Running = o.Running.Clone()
	result.Terminated = o.Terminated.Clone()
	return result
}

func (o *Pod_Status_Container) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Pod_Status_Container) Merge(source *Pod_Status_Container) {
	o.Name = source.GetName()
	o.State = source.GetState()
	if source.GetWaiting() != nil {
		if o.Waiting == nil {
			o.Waiting = new(Pod_Status_Container_StateWaiting)
		}
		o.Waiting.Merge(source.GetWaiting())
	}
	if source.GetRunning() != nil {
		if o.Running == nil {
			o.Running = new(Pod_Status_Container_StateRunning)
		}
		o.Running.Merge(source.GetRunning())
	}
	if source.GetTerminated() != nil {
		if o.Terminated == nil {
			o.Terminated = new(Pod_Status_Container_StateTerminated)
		}
		o.Terminated.Merge(source.GetTerminated())
	}
}

func (o *Pod_Status_Container) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Pod_Status_Container))
}

func (o *Pod_Status_Container_StateWaiting) GotenObjectExt() {}

func (o *Pod_Status_Container_StateWaiting) MakeFullFieldMask() *Pod_Status_Container_StateWaiting_FieldMask {
	return FullPod_Status_Container_StateWaiting_FieldMask()
}

func (o *Pod_Status_Container_StateWaiting) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPod_Status_Container_StateWaiting_FieldMask()
}

func (o *Pod_Status_Container_StateWaiting) MakeDiffFieldMask(other *Pod_Status_Container_StateWaiting) *Pod_Status_Container_StateWaiting_FieldMask {
	if o == nil && other == nil {
		return &Pod_Status_Container_StateWaiting_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPod_Status_Container_StateWaiting_FieldMask()
	}

	res := &Pod_Status_Container_StateWaiting_FieldMask{}
	if o.GetReason() != other.GetReason() {
		res.Paths = append(res.Paths, &PodStatusContainerStateWaiting_FieldTerminalPath{selector: PodStatusContainerStateWaiting_FieldPathSelectorReason})
	}
	if o.GetMessage() != other.GetMessage() {
		res.Paths = append(res.Paths, &PodStatusContainerStateWaiting_FieldTerminalPath{selector: PodStatusContainerStateWaiting_FieldPathSelectorMessage})
	}
	return res
}

func (o *Pod_Status_Container_StateWaiting) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Pod_Status_Container_StateWaiting))
}

func (o *Pod_Status_Container_StateWaiting) Clone() *Pod_Status_Container_StateWaiting {
	if o == nil {
		return nil
	}
	result := &Pod_Status_Container_StateWaiting{}
	result.Reason = o.Reason
	result.Message = o.Message
	return result
}

func (o *Pod_Status_Container_StateWaiting) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Pod_Status_Container_StateWaiting) Merge(source *Pod_Status_Container_StateWaiting) {
	o.Reason = source.GetReason()
	o.Message = source.GetMessage()
}

func (o *Pod_Status_Container_StateWaiting) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Pod_Status_Container_StateWaiting))
}

func (o *Pod_Status_Container_StateRunning) GotenObjectExt() {}

func (o *Pod_Status_Container_StateRunning) MakeFullFieldMask() *Pod_Status_Container_StateRunning_FieldMask {
	return FullPod_Status_Container_StateRunning_FieldMask()
}

func (o *Pod_Status_Container_StateRunning) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPod_Status_Container_StateRunning_FieldMask()
}

func (o *Pod_Status_Container_StateRunning) MakeDiffFieldMask(other *Pod_Status_Container_StateRunning) *Pod_Status_Container_StateRunning_FieldMask {
	if o == nil && other == nil {
		return &Pod_Status_Container_StateRunning_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPod_Status_Container_StateRunning_FieldMask()
	}

	res := &Pod_Status_Container_StateRunning_FieldMask{}
	if !proto.Equal(o.GetStartedAt(), other.GetStartedAt()) {
		res.Paths = append(res.Paths, &PodStatusContainerStateRunning_FieldTerminalPath{selector: PodStatusContainerStateRunning_FieldPathSelectorStartedAt})
	}
	return res
}

func (o *Pod_Status_Container_StateRunning) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Pod_Status_Container_StateRunning))
}

func (o *Pod_Status_Container_StateRunning) Clone() *Pod_Status_Container_StateRunning {
	if o == nil {
		return nil
	}
	result := &Pod_Status_Container_StateRunning{}
	result.StartedAt = proto.Clone(o.StartedAt).(*timestamp.Timestamp)
	return result
}

func (o *Pod_Status_Container_StateRunning) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Pod_Status_Container_StateRunning) Merge(source *Pod_Status_Container_StateRunning) {
	if source.GetStartedAt() != nil {
		if o.StartedAt == nil {
			o.StartedAt = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartedAt, source.GetStartedAt())
	}
}

func (o *Pod_Status_Container_StateRunning) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Pod_Status_Container_StateRunning))
}

func (o *Pod_Status_Container_StateTerminated) GotenObjectExt() {}

func (o *Pod_Status_Container_StateTerminated) MakeFullFieldMask() *Pod_Status_Container_StateTerminated_FieldMask {
	return FullPod_Status_Container_StateTerminated_FieldMask()
}

func (o *Pod_Status_Container_StateTerminated) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPod_Status_Container_StateTerminated_FieldMask()
}

func (o *Pod_Status_Container_StateTerminated) MakeDiffFieldMask(other *Pod_Status_Container_StateTerminated) *Pod_Status_Container_StateTerminated_FieldMask {
	if o == nil && other == nil {
		return &Pod_Status_Container_StateTerminated_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPod_Status_Container_StateTerminated_FieldMask()
	}

	res := &Pod_Status_Container_StateTerminated_FieldMask{}
	if o.GetExitCode() != other.GetExitCode() {
		res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorExitCode})
	}
	if o.GetSignal() != other.GetSignal() {
		res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorSignal})
	}
	if o.GetReason() != other.GetReason() {
		res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorReason})
	}
	if o.GetMessage() != other.GetMessage() {
		res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorMessage})
	}
	if !proto.Equal(o.GetStartedAt(), other.GetStartedAt()) {
		res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorStartedAt})
	}
	if !proto.Equal(o.GetFinishedAt(), other.GetFinishedAt()) {
		res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorFinishedAt})
	}
	if o.GetContainerId() != other.GetContainerId() {
		res.Paths = append(res.Paths, &PodStatusContainerStateTerminated_FieldTerminalPath{selector: PodStatusContainerStateTerminated_FieldPathSelectorContainerId})
	}
	return res
}

func (o *Pod_Status_Container_StateTerminated) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Pod_Status_Container_StateTerminated))
}

func (o *Pod_Status_Container_StateTerminated) Clone() *Pod_Status_Container_StateTerminated {
	if o == nil {
		return nil
	}
	result := &Pod_Status_Container_StateTerminated{}
	result.ExitCode = o.ExitCode
	result.Signal = o.Signal
	result.Reason = o.Reason
	result.Message = o.Message
	result.StartedAt = proto.Clone(o.StartedAt).(*timestamp.Timestamp)
	result.FinishedAt = proto.Clone(o.FinishedAt).(*timestamp.Timestamp)
	result.ContainerId = o.ContainerId
	return result
}

func (o *Pod_Status_Container_StateTerminated) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Pod_Status_Container_StateTerminated) Merge(source *Pod_Status_Container_StateTerminated) {
	o.ExitCode = source.GetExitCode()
	o.Signal = source.GetSignal()
	o.Reason = source.GetReason()
	o.Message = source.GetMessage()
	if source.GetStartedAt() != nil {
		if o.StartedAt == nil {
			o.StartedAt = new(timestamp.Timestamp)
		}
		proto.Merge(o.StartedAt, source.GetStartedAt())
	}
	if source.GetFinishedAt() != nil {
		if o.FinishedAt == nil {
			o.FinishedAt = new(timestamp.Timestamp)
		}
		proto.Merge(o.FinishedAt, source.GetFinishedAt())
	}
	o.ContainerId = source.GetContainerId()
}

func (o *Pod_Status_Container_StateTerminated) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Pod_Status_Container_StateTerminated))
}

func (o *EnvFromSource) GotenObjectExt() {}

func (o *EnvFromSource) MakeFullFieldMask() *EnvFromSource_FieldMask {
	return FullEnvFromSource_FieldMask()
}

func (o *EnvFromSource) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullEnvFromSource_FieldMask()
}

func (o *EnvFromSource) MakeDiffFieldMask(other *EnvFromSource) *EnvFromSource_FieldMask {
	if o == nil && other == nil {
		return &EnvFromSource_FieldMask{}
	}
	if o == nil || other == nil {
		return FullEnvFromSource_FieldMask()
	}

	res := &EnvFromSource_FieldMask{}
	if o.GetPrefix() != other.GetPrefix() {
		res.Paths = append(res.Paths, &EnvFromSource_FieldTerminalPath{selector: EnvFromSource_FieldPathSelectorPrefix})
	}
	{
		subMask := o.GetConfigMapRef().MakeDiffFieldMask(other.GetConfigMapRef())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &EnvFromSource_FieldTerminalPath{selector: EnvFromSource_FieldPathSelectorConfigMapRef})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &EnvFromSource_FieldSubPath{selector: EnvFromSource_FieldPathSelectorConfigMapRef, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSecretRef().MakeDiffFieldMask(other.GetSecretRef())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &EnvFromSource_FieldTerminalPath{selector: EnvFromSource_FieldPathSelectorSecretRef})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &EnvFromSource_FieldSubPath{selector: EnvFromSource_FieldPathSelectorSecretRef, subPath: subpath})
			}
		}
	}
	return res
}

func (o *EnvFromSource) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*EnvFromSource))
}

func (o *EnvFromSource) Clone() *EnvFromSource {
	if o == nil {
		return nil
	}
	result := &EnvFromSource{}
	result.Prefix = o.Prefix
	result.ConfigMapRef = o.ConfigMapRef.Clone()
	result.SecretRef = o.SecretRef.Clone()
	return result
}

func (o *EnvFromSource) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *EnvFromSource) Merge(source *EnvFromSource) {
	o.Prefix = source.GetPrefix()
	if source.GetConfigMapRef() != nil {
		if o.ConfigMapRef == nil {
			o.ConfigMapRef = new(ConfigMapEnvSource)
		}
		o.ConfigMapRef.Merge(source.GetConfigMapRef())
	}
	if source.GetSecretRef() != nil {
		if o.SecretRef == nil {
			o.SecretRef = new(SecretEnvSource)
		}
		o.SecretRef.Merge(source.GetSecretRef())
	}
}

func (o *EnvFromSource) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*EnvFromSource))
}

func (o *EnvVar) GotenObjectExt() {}

func (o *EnvVar) MakeFullFieldMask() *EnvVar_FieldMask {
	return FullEnvVar_FieldMask()
}

func (o *EnvVar) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullEnvVar_FieldMask()
}

func (o *EnvVar) MakeDiffFieldMask(other *EnvVar) *EnvVar_FieldMask {
	if o == nil && other == nil {
		return &EnvVar_FieldMask{}
	}
	if o == nil || other == nil {
		return FullEnvVar_FieldMask()
	}

	res := &EnvVar_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &EnvVar_FieldTerminalPath{selector: EnvVar_FieldPathSelectorName})
	}
	if o.GetValue() != other.GetValue() {
		res.Paths = append(res.Paths, &EnvVar_FieldTerminalPath{selector: EnvVar_FieldPathSelectorValue})
	}
	{
		subMask := o.GetValueFrom().MakeDiffFieldMask(other.GetValueFrom())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &EnvVar_FieldTerminalPath{selector: EnvVar_FieldPathSelectorValueFrom})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &EnvVar_FieldSubPath{selector: EnvVar_FieldPathSelectorValueFrom, subPath: subpath})
			}
		}
	}
	return res
}

func (o *EnvVar) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*EnvVar))
}

func (o *EnvVar) Clone() *EnvVar {
	if o == nil {
		return nil
	}
	result := &EnvVar{}
	result.Name = o.Name
	result.Value = o.Value
	result.ValueFrom = o.ValueFrom.Clone()
	return result
}

func (o *EnvVar) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *EnvVar) Merge(source *EnvVar) {
	o.Name = source.GetName()
	o.Value = source.GetValue()
	if source.GetValueFrom() != nil {
		if o.ValueFrom == nil {
			o.ValueFrom = new(EnvVarSource)
		}
		o.ValueFrom.Merge(source.GetValueFrom())
	}
}

func (o *EnvVar) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*EnvVar))
}

func (o *ConfigMapEnvSource) GotenObjectExt() {}

func (o *ConfigMapEnvSource) MakeFullFieldMask() *ConfigMapEnvSource_FieldMask {
	return FullConfigMapEnvSource_FieldMask()
}

func (o *ConfigMapEnvSource) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConfigMapEnvSource_FieldMask()
}

func (o *ConfigMapEnvSource) MakeDiffFieldMask(other *ConfigMapEnvSource) *ConfigMapEnvSource_FieldMask {
	if o == nil && other == nil {
		return &ConfigMapEnvSource_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConfigMapEnvSource_FieldMask()
	}

	res := &ConfigMapEnvSource_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &ConfigMapEnvSource_FieldTerminalPath{selector: ConfigMapEnvSource_FieldPathSelectorName})
	}
	if o.GetOptional() != other.GetOptional() {
		res.Paths = append(res.Paths, &ConfigMapEnvSource_FieldTerminalPath{selector: ConfigMapEnvSource_FieldPathSelectorOptional})
	}
	return res
}

func (o *ConfigMapEnvSource) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConfigMapEnvSource))
}

func (o *ConfigMapEnvSource) Clone() *ConfigMapEnvSource {
	if o == nil {
		return nil
	}
	result := &ConfigMapEnvSource{}
	result.Name = o.Name
	result.Optional = o.Optional
	return result
}

func (o *ConfigMapEnvSource) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConfigMapEnvSource) Merge(source *ConfigMapEnvSource) {
	o.Name = source.GetName()
	o.Optional = source.GetOptional()
}

func (o *ConfigMapEnvSource) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConfigMapEnvSource))
}

func (o *SecretEnvSource) GotenObjectExt() {}

func (o *SecretEnvSource) MakeFullFieldMask() *SecretEnvSource_FieldMask {
	return FullSecretEnvSource_FieldMask()
}

func (o *SecretEnvSource) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSecretEnvSource_FieldMask()
}

func (o *SecretEnvSource) MakeDiffFieldMask(other *SecretEnvSource) *SecretEnvSource_FieldMask {
	if o == nil && other == nil {
		return &SecretEnvSource_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSecretEnvSource_FieldMask()
	}

	res := &SecretEnvSource_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &SecretEnvSource_FieldTerminalPath{selector: SecretEnvSource_FieldPathSelectorName})
	}
	if o.GetOptional() != other.GetOptional() {
		res.Paths = append(res.Paths, &SecretEnvSource_FieldTerminalPath{selector: SecretEnvSource_FieldPathSelectorOptional})
	}
	return res
}

func (o *SecretEnvSource) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SecretEnvSource))
}

func (o *SecretEnvSource) Clone() *SecretEnvSource {
	if o == nil {
		return nil
	}
	result := &SecretEnvSource{}
	result.Name = o.Name
	result.Optional = o.Optional
	return result
}

func (o *SecretEnvSource) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SecretEnvSource) Merge(source *SecretEnvSource) {
	o.Name = source.GetName()
	o.Optional = source.GetOptional()
}

func (o *SecretEnvSource) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SecretEnvSource))
}

func (o *EnvVarSource) GotenObjectExt() {}

func (o *EnvVarSource) MakeFullFieldMask() *EnvVarSource_FieldMask {
	return FullEnvVarSource_FieldMask()
}

func (o *EnvVarSource) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullEnvVarSource_FieldMask()
}

func (o *EnvVarSource) MakeDiffFieldMask(other *EnvVarSource) *EnvVarSource_FieldMask {
	if o == nil && other == nil {
		return &EnvVarSource_FieldMask{}
	}
	if o == nil || other == nil {
		return FullEnvVarSource_FieldMask()
	}

	res := &EnvVarSource_FieldMask{}
	{
		subMask := o.GetConfigMapKeyRef().MakeDiffFieldMask(other.GetConfigMapKeyRef())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &EnvVarSource_FieldTerminalPath{selector: EnvVarSource_FieldPathSelectorConfigMapKeyRef})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &EnvVarSource_FieldSubPath{selector: EnvVarSource_FieldPathSelectorConfigMapKeyRef, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSecretKeyRef().MakeDiffFieldMask(other.GetSecretKeyRef())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &EnvVarSource_FieldTerminalPath{selector: EnvVarSource_FieldPathSelectorSecretKeyRef})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &EnvVarSource_FieldSubPath{selector: EnvVarSource_FieldPathSelectorSecretKeyRef, subPath: subpath})
			}
		}
	}
	return res
}

func (o *EnvVarSource) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*EnvVarSource))
}

func (o *EnvVarSource) Clone() *EnvVarSource {
	if o == nil {
		return nil
	}
	result := &EnvVarSource{}
	result.ConfigMapKeyRef = o.ConfigMapKeyRef.Clone()
	result.SecretKeyRef = o.SecretKeyRef.Clone()
	return result
}

func (o *EnvVarSource) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *EnvVarSource) Merge(source *EnvVarSource) {
	if source.GetConfigMapKeyRef() != nil {
		if o.ConfigMapKeyRef == nil {
			o.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		o.ConfigMapKeyRef.Merge(source.GetConfigMapKeyRef())
	}
	if source.GetSecretKeyRef() != nil {
		if o.SecretKeyRef == nil {
			o.SecretKeyRef = new(SecretKeySelector)
		}
		o.SecretKeyRef.Merge(source.GetSecretKeyRef())
	}
}

func (o *EnvVarSource) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*EnvVarSource))
}

func (o *ConfigMapKeySelector) GotenObjectExt() {}

func (o *ConfigMapKeySelector) MakeFullFieldMask() *ConfigMapKeySelector_FieldMask {
	return FullConfigMapKeySelector_FieldMask()
}

func (o *ConfigMapKeySelector) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConfigMapKeySelector_FieldMask()
}

func (o *ConfigMapKeySelector) MakeDiffFieldMask(other *ConfigMapKeySelector) *ConfigMapKeySelector_FieldMask {
	if o == nil && other == nil {
		return &ConfigMapKeySelector_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConfigMapKeySelector_FieldMask()
	}

	res := &ConfigMapKeySelector_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &ConfigMapKeySelector_FieldTerminalPath{selector: ConfigMapKeySelector_FieldPathSelectorName})
	}
	if o.GetKey() != other.GetKey() {
		res.Paths = append(res.Paths, &ConfigMapKeySelector_FieldTerminalPath{selector: ConfigMapKeySelector_FieldPathSelectorKey})
	}
	if o.GetOptional() != other.GetOptional() {
		res.Paths = append(res.Paths, &ConfigMapKeySelector_FieldTerminalPath{selector: ConfigMapKeySelector_FieldPathSelectorOptional})
	}
	return res
}

func (o *ConfigMapKeySelector) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConfigMapKeySelector))
}

func (o *ConfigMapKeySelector) Clone() *ConfigMapKeySelector {
	if o == nil {
		return nil
	}
	result := &ConfigMapKeySelector{}
	result.Name = o.Name
	result.Key = o.Key
	result.Optional = o.Optional
	return result
}

func (o *ConfigMapKeySelector) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConfigMapKeySelector) Merge(source *ConfigMapKeySelector) {
	o.Name = source.GetName()
	o.Key = source.GetKey()
	o.Optional = source.GetOptional()
}

func (o *ConfigMapKeySelector) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConfigMapKeySelector))
}

func (o *SecretKeySelector) GotenObjectExt() {}

func (o *SecretKeySelector) MakeFullFieldMask() *SecretKeySelector_FieldMask {
	return FullSecretKeySelector_FieldMask()
}

func (o *SecretKeySelector) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSecretKeySelector_FieldMask()
}

func (o *SecretKeySelector) MakeDiffFieldMask(other *SecretKeySelector) *SecretKeySelector_FieldMask {
	if o == nil && other == nil {
		return &SecretKeySelector_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSecretKeySelector_FieldMask()
	}

	res := &SecretKeySelector_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &SecretKeySelector_FieldTerminalPath{selector: SecretKeySelector_FieldPathSelectorName})
	}
	if o.GetKey() != other.GetKey() {
		res.Paths = append(res.Paths, &SecretKeySelector_FieldTerminalPath{selector: SecretKeySelector_FieldPathSelectorKey})
	}
	if o.GetOptional() != other.GetOptional() {
		res.Paths = append(res.Paths, &SecretKeySelector_FieldTerminalPath{selector: SecretKeySelector_FieldPathSelectorOptional})
	}
	return res
}

func (o *SecretKeySelector) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SecretKeySelector))
}

func (o *SecretKeySelector) Clone() *SecretKeySelector {
	if o == nil {
		return nil
	}
	result := &SecretKeySelector{}
	result.Name = o.Name
	result.Key = o.Key
	result.Optional = o.Optional
	return result
}

func (o *SecretKeySelector) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SecretKeySelector) Merge(source *SecretKeySelector) {
	o.Name = source.GetName()
	o.Key = source.GetKey()
	o.Optional = source.GetOptional()
}

func (o *SecretKeySelector) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SecretKeySelector))
}

func (o *LocalObjectReference) GotenObjectExt() {}

func (o *LocalObjectReference) MakeFullFieldMask() *LocalObjectReference_FieldMask {
	return FullLocalObjectReference_FieldMask()
}

func (o *LocalObjectReference) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLocalObjectReference_FieldMask()
}

func (o *LocalObjectReference) MakeDiffFieldMask(other *LocalObjectReference) *LocalObjectReference_FieldMask {
	if o == nil && other == nil {
		return &LocalObjectReference_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLocalObjectReference_FieldMask()
	}

	res := &LocalObjectReference_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &LocalObjectReference_FieldTerminalPath{selector: LocalObjectReference_FieldPathSelectorName})
	}
	return res
}

func (o *LocalObjectReference) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LocalObjectReference))
}

func (o *LocalObjectReference) Clone() *LocalObjectReference {
	if o == nil {
		return nil
	}
	result := &LocalObjectReference{}
	result.Name = o.Name
	return result
}

func (o *LocalObjectReference) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LocalObjectReference) Merge(source *LocalObjectReference) {
	o.Name = source.GetName()
}

func (o *LocalObjectReference) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LocalObjectReference))
}

func (o *LocalObjectReferenceSecret) GotenObjectExt() {}

func (o *LocalObjectReferenceSecret) MakeFullFieldMask() *LocalObjectReferenceSecret_FieldMask {
	return FullLocalObjectReferenceSecret_FieldMask()
}

func (o *LocalObjectReferenceSecret) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLocalObjectReferenceSecret_FieldMask()
}

func (o *LocalObjectReferenceSecret) MakeDiffFieldMask(other *LocalObjectReferenceSecret) *LocalObjectReferenceSecret_FieldMask {
	if o == nil && other == nil {
		return &LocalObjectReferenceSecret_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLocalObjectReferenceSecret_FieldMask()
	}

	res := &LocalObjectReferenceSecret_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &LocalObjectReferenceSecret_FieldTerminalPath{selector: LocalObjectReferenceSecret_FieldPathSelectorName})
	}
	return res
}

func (o *LocalObjectReferenceSecret) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LocalObjectReferenceSecret))
}

func (o *LocalObjectReferenceSecret) Clone() *LocalObjectReferenceSecret {
	if o == nil {
		return nil
	}
	result := &LocalObjectReferenceSecret{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &secrets_secret.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *LocalObjectReferenceSecret) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LocalObjectReferenceSecret) Merge(source *LocalObjectReferenceSecret) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &secrets_secret.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *LocalObjectReferenceSecret) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LocalObjectReferenceSecret))
}

func (o *SecurityContext) GotenObjectExt() {}

func (o *SecurityContext) MakeFullFieldMask() *SecurityContext_FieldMask {
	return FullSecurityContext_FieldMask()
}

func (o *SecurityContext) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSecurityContext_FieldMask()
}

func (o *SecurityContext) MakeDiffFieldMask(other *SecurityContext) *SecurityContext_FieldMask {
	if o == nil && other == nil {
		return &SecurityContext_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSecurityContext_FieldMask()
	}

	res := &SecurityContext_FieldMask{}
	if o.GetPrivileged() != other.GetPrivileged() {
		res.Paths = append(res.Paths, &SecurityContext_FieldTerminalPath{selector: SecurityContext_FieldPathSelectorPrivileged})
	}
	return res
}

func (o *SecurityContext) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SecurityContext))
}

func (o *SecurityContext) Clone() *SecurityContext {
	if o == nil {
		return nil
	}
	result := &SecurityContext{}
	result.Privileged = o.Privileged
	return result
}

func (o *SecurityContext) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SecurityContext) Merge(source *SecurityContext) {
	o.Privileged = source.GetPrivileged()
}

func (o *SecurityContext) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SecurityContext))
}

func (o *Volume) GotenObjectExt() {}

func (o *Volume) MakeFullFieldMask() *Volume_FieldMask {
	return FullVolume_FieldMask()
}

func (o *Volume) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullVolume_FieldMask()
}

func (o *Volume) MakeDiffFieldMask(other *Volume) *Volume_FieldMask {
	if o == nil && other == nil {
		return &Volume_FieldMask{}
	}
	if o == nil || other == nil {
		return FullVolume_FieldMask()
	}

	res := &Volume_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &Volume_FieldTerminalPath{selector: Volume_FieldPathSelectorName})
	}
	{
		subMask := o.GetHostPath().MakeDiffFieldMask(other.GetHostPath())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Volume_FieldTerminalPath{selector: Volume_FieldPathSelectorHostPath})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Volume_FieldSubPath{selector: Volume_FieldPathSelectorHostPath, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSecret().MakeDiffFieldMask(other.GetSecret())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Volume_FieldTerminalPath{selector: Volume_FieldPathSelectorSecret})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Volume_FieldSubPath{selector: Volume_FieldPathSelectorSecret, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetConfigMap().MakeDiffFieldMask(other.GetConfigMap())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Volume_FieldTerminalPath{selector: Volume_FieldPathSelectorConfigMap})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Volume_FieldSubPath{selector: Volume_FieldPathSelectorConfigMap, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Volume) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Volume))
}

func (o *Volume) Clone() *Volume {
	if o == nil {
		return nil
	}
	result := &Volume{}
	result.Name = o.Name
	result.HostPath = o.HostPath.Clone()
	result.Secret = o.Secret.Clone()
	result.ConfigMap = o.ConfigMap.Clone()
	return result
}

func (o *Volume) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Volume) Merge(source *Volume) {
	o.Name = source.GetName()
	if source.GetHostPath() != nil {
		if o.HostPath == nil {
			o.HostPath = new(HostPathVolumeSource)
		}
		o.HostPath.Merge(source.GetHostPath())
	}
	if source.GetSecret() != nil {
		if o.Secret == nil {
			o.Secret = new(SecretVolumeSource)
		}
		o.Secret.Merge(source.GetSecret())
	}
	if source.GetConfigMap() != nil {
		if o.ConfigMap == nil {
			o.ConfigMap = new(ConfigMapVolumeSource)
		}
		o.ConfigMap.Merge(source.GetConfigMap())
	}
}

func (o *Volume) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Volume))
}

func (o *VolumeMount) GotenObjectExt() {}

func (o *VolumeMount) MakeFullFieldMask() *VolumeMount_FieldMask {
	return FullVolumeMount_FieldMask()
}

func (o *VolumeMount) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullVolumeMount_FieldMask()
}

func (o *VolumeMount) MakeDiffFieldMask(other *VolumeMount) *VolumeMount_FieldMask {
	if o == nil && other == nil {
		return &VolumeMount_FieldMask{}
	}
	if o == nil || other == nil {
		return FullVolumeMount_FieldMask()
	}

	res := &VolumeMount_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &VolumeMount_FieldTerminalPath{selector: VolumeMount_FieldPathSelectorName})
	}
	if o.GetReadOnly() != other.GetReadOnly() {
		res.Paths = append(res.Paths, &VolumeMount_FieldTerminalPath{selector: VolumeMount_FieldPathSelectorReadOnly})
	}
	if o.GetMountPath() != other.GetMountPath() {
		res.Paths = append(res.Paths, &VolumeMount_FieldTerminalPath{selector: VolumeMount_FieldPathSelectorMountPath})
	}
	if o.GetSubPath() != other.GetSubPath() {
		res.Paths = append(res.Paths, &VolumeMount_FieldTerminalPath{selector: VolumeMount_FieldPathSelectorSubPath})
	}
	return res
}

func (o *VolumeMount) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*VolumeMount))
}

func (o *VolumeMount) Clone() *VolumeMount {
	if o == nil {
		return nil
	}
	result := &VolumeMount{}
	result.Name = o.Name
	result.ReadOnly = o.ReadOnly
	result.MountPath = o.MountPath
	result.SubPath = o.SubPath
	return result
}

func (o *VolumeMount) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *VolumeMount) Merge(source *VolumeMount) {
	o.Name = source.GetName()
	o.ReadOnly = source.GetReadOnly()
	o.MountPath = source.GetMountPath()
	o.SubPath = source.GetSubPath()
}

func (o *VolumeMount) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*VolumeMount))
}

func (o *HostPathVolumeSource) GotenObjectExt() {}

func (o *HostPathVolumeSource) MakeFullFieldMask() *HostPathVolumeSource_FieldMask {
	return FullHostPathVolumeSource_FieldMask()
}

func (o *HostPathVolumeSource) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullHostPathVolumeSource_FieldMask()
}

func (o *HostPathVolumeSource) MakeDiffFieldMask(other *HostPathVolumeSource) *HostPathVolumeSource_FieldMask {
	if o == nil && other == nil {
		return &HostPathVolumeSource_FieldMask{}
	}
	if o == nil || other == nil {
		return FullHostPathVolumeSource_FieldMask()
	}

	res := &HostPathVolumeSource_FieldMask{}
	if o.GetPath() != other.GetPath() {
		res.Paths = append(res.Paths, &HostPathVolumeSource_FieldTerminalPath{selector: HostPathVolumeSource_FieldPathSelectorPath})
	}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &HostPathVolumeSource_FieldTerminalPath{selector: HostPathVolumeSource_FieldPathSelectorType})
	}
	return res
}

func (o *HostPathVolumeSource) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*HostPathVolumeSource))
}

func (o *HostPathVolumeSource) Clone() *HostPathVolumeSource {
	if o == nil {
		return nil
	}
	result := &HostPathVolumeSource{}
	result.Path = o.Path
	result.Type = o.Type
	return result
}

func (o *HostPathVolumeSource) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *HostPathVolumeSource) Merge(source *HostPathVolumeSource) {
	o.Path = source.GetPath()
	o.Type = source.GetType()
}

func (o *HostPathVolumeSource) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*HostPathVolumeSource))
}

func (o *SecretVolumeSource) GotenObjectExt() {}

func (o *SecretVolumeSource) MakeFullFieldMask() *SecretVolumeSource_FieldMask {
	return FullSecretVolumeSource_FieldMask()
}

func (o *SecretVolumeSource) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSecretVolumeSource_FieldMask()
}

func (o *SecretVolumeSource) MakeDiffFieldMask(other *SecretVolumeSource) *SecretVolumeSource_FieldMask {
	if o == nil && other == nil {
		return &SecretVolumeSource_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSecretVolumeSource_FieldMask()
	}

	res := &SecretVolumeSource_FieldMask{}
	if o.GetSecretName() != other.GetSecretName() {
		res.Paths = append(res.Paths, &SecretVolumeSource_FieldTerminalPath{selector: SecretVolumeSource_FieldPathSelectorSecretName})
	}

	if len(o.GetItems()) == len(other.GetItems()) {
		for i, lValue := range o.GetItems() {
			rValue := other.GetItems()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &SecretVolumeSource_FieldTerminalPath{selector: SecretVolumeSource_FieldPathSelectorItems})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SecretVolumeSource_FieldTerminalPath{selector: SecretVolumeSource_FieldPathSelectorItems})
	}
	if o.GetDefaultMode() != other.GetDefaultMode() {
		res.Paths = append(res.Paths, &SecretVolumeSource_FieldTerminalPath{selector: SecretVolumeSource_FieldPathSelectorDefaultMode})
	}
	if o.GetOptional() != other.GetOptional() {
		res.Paths = append(res.Paths, &SecretVolumeSource_FieldTerminalPath{selector: SecretVolumeSource_FieldPathSelectorOptional})
	}
	return res
}

func (o *SecretVolumeSource) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SecretVolumeSource))
}

func (o *SecretVolumeSource) Clone() *SecretVolumeSource {
	if o == nil {
		return nil
	}
	result := &SecretVolumeSource{}
	result.SecretName = o.SecretName
	result.Items = make([]*KeyToPath, len(o.Items))
	for i, sourceValue := range o.Items {
		result.Items[i] = sourceValue.Clone()
	}
	result.DefaultMode = o.DefaultMode
	result.Optional = o.Optional
	return result
}

func (o *SecretVolumeSource) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SecretVolumeSource) Merge(source *SecretVolumeSource) {
	o.SecretName = source.GetSecretName()
	for _, sourceValue := range source.GetItems() {
		exists := false
		for _, currentValue := range o.Items {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *KeyToPath
			if sourceValue != nil {
				newDstElement = new(KeyToPath)
				newDstElement.Merge(sourceValue)
			}
			o.Items = append(o.Items, newDstElement)
		}
	}

	o.DefaultMode = source.GetDefaultMode()
	o.Optional = source.GetOptional()
}

func (o *SecretVolumeSource) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SecretVolumeSource))
}

func (o *KeyToPath) GotenObjectExt() {}

func (o *KeyToPath) MakeFullFieldMask() *KeyToPath_FieldMask {
	return FullKeyToPath_FieldMask()
}

func (o *KeyToPath) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullKeyToPath_FieldMask()
}

func (o *KeyToPath) MakeDiffFieldMask(other *KeyToPath) *KeyToPath_FieldMask {
	if o == nil && other == nil {
		return &KeyToPath_FieldMask{}
	}
	if o == nil || other == nil {
		return FullKeyToPath_FieldMask()
	}

	res := &KeyToPath_FieldMask{}
	if o.GetKey() != other.GetKey() {
		res.Paths = append(res.Paths, &KeyToPath_FieldTerminalPath{selector: KeyToPath_FieldPathSelectorKey})
	}
	if o.GetPath() != other.GetPath() {
		res.Paths = append(res.Paths, &KeyToPath_FieldTerminalPath{selector: KeyToPath_FieldPathSelectorPath})
	}
	if o.GetMode() != other.GetMode() {
		res.Paths = append(res.Paths, &KeyToPath_FieldTerminalPath{selector: KeyToPath_FieldPathSelectorMode})
	}
	return res
}

func (o *KeyToPath) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*KeyToPath))
}

func (o *KeyToPath) Clone() *KeyToPath {
	if o == nil {
		return nil
	}
	result := &KeyToPath{}
	result.Key = o.Key
	result.Path = o.Path
	result.Mode = o.Mode
	return result
}

func (o *KeyToPath) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *KeyToPath) Merge(source *KeyToPath) {
	o.Key = source.GetKey()
	o.Path = source.GetPath()
	o.Mode = source.GetMode()
}

func (o *KeyToPath) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*KeyToPath))
}

func (o *ConfigMapVolumeSource) GotenObjectExt() {}

func (o *ConfigMapVolumeSource) MakeFullFieldMask() *ConfigMapVolumeSource_FieldMask {
	return FullConfigMapVolumeSource_FieldMask()
}

func (o *ConfigMapVolumeSource) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullConfigMapVolumeSource_FieldMask()
}

func (o *ConfigMapVolumeSource) MakeDiffFieldMask(other *ConfigMapVolumeSource) *ConfigMapVolumeSource_FieldMask {
	if o == nil && other == nil {
		return &ConfigMapVolumeSource_FieldMask{}
	}
	if o == nil || other == nil {
		return FullConfigMapVolumeSource_FieldMask()
	}

	res := &ConfigMapVolumeSource_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &ConfigMapVolumeSource_FieldTerminalPath{selector: ConfigMapVolumeSource_FieldPathSelectorName})
	}

	if len(o.GetItems()) == len(other.GetItems()) {
		for i, lValue := range o.GetItems() {
			rValue := other.GetItems()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ConfigMapVolumeSource_FieldTerminalPath{selector: ConfigMapVolumeSource_FieldPathSelectorItems})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ConfigMapVolumeSource_FieldTerminalPath{selector: ConfigMapVolumeSource_FieldPathSelectorItems})
	}
	if o.GetDefaultMode() != other.GetDefaultMode() {
		res.Paths = append(res.Paths, &ConfigMapVolumeSource_FieldTerminalPath{selector: ConfigMapVolumeSource_FieldPathSelectorDefaultMode})
	}
	if o.GetOptional() != other.GetOptional() {
		res.Paths = append(res.Paths, &ConfigMapVolumeSource_FieldTerminalPath{selector: ConfigMapVolumeSource_FieldPathSelectorOptional})
	}
	return res
}

func (o *ConfigMapVolumeSource) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ConfigMapVolumeSource))
}

func (o *ConfigMapVolumeSource) Clone() *ConfigMapVolumeSource {
	if o == nil {
		return nil
	}
	result := &ConfigMapVolumeSource{}
	result.Name = o.Name
	result.Items = make([]*KeyToPath, len(o.Items))
	for i, sourceValue := range o.Items {
		result.Items[i] = sourceValue.Clone()
	}
	result.DefaultMode = o.DefaultMode
	result.Optional = o.Optional
	return result
}

func (o *ConfigMapVolumeSource) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ConfigMapVolumeSource) Merge(source *ConfigMapVolumeSource) {
	o.Name = source.GetName()
	for _, sourceValue := range source.GetItems() {
		exists := false
		for _, currentValue := range o.Items {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *KeyToPath
			if sourceValue != nil {
				newDstElement = new(KeyToPath)
				newDstElement.Merge(sourceValue)
			}
			o.Items = append(o.Items, newDstElement)
		}
	}

	o.DefaultMode = source.GetDefaultMode()
	o.Optional = source.GetOptional()
}

func (o *ConfigMapVolumeSource) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ConfigMapVolumeSource))
}
