// Code generated by protoc-gen-goten-resource
// Resource: Pod
// DO NOT EDIT!!!

package pod

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/edgelq-sdk/applications/resources/v1alpha/project"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	devices_device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha/device"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &project.Project{}
	_ = &ntt_meta.Meta{}
	_ = &devices_device.Device{}
	_ = &timestamp.Timestamp{}
)

type PodList []*Pod

func (l PodList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Pod))
}

func (l PodList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(PodList)...)
}

func (l PodList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PodList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l PodList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Pod)
}

func (l PodList) Length() int {
	return len(l)
}

type PodChangeList []*PodChange

func (l PodChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*PodChange))
}

func (l PodChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(PodChangeList)...)
}

func (l PodChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PodChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l PodChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*PodChange)
}

func (l PodChangeList) Length() int {
	return len(l)
}

type PodNameList []*Name

func (l PodNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l PodNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(PodNameList)...)
}

func (l PodNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PodNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l PodNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l PodNameList) Length() int {
	return len(l)
}

type PodReferenceList []*Reference

func (l PodReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l PodReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(PodReferenceList)...)
}

func (l PodReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PodReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l PodReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l PodReferenceList) Length() int {
	return len(l)
}

type PodParentNameList []*ParentName

func (l PodParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l PodParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(PodParentNameList)...)
}

func (l PodParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PodParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l PodParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l PodParentNameList) Length() int {
	return len(l)
}

type PodParentReferenceList []*ParentReference

func (l PodParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l PodParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(PodParentReferenceList)...)
}

func (l PodParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l PodParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l PodParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l PodParentReferenceList) Length() int {
	return len(l)
}

type PodMap map[Name]*Pod

func (m PodMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m PodMap) Set(res gotenresource.Resource) {
	tRes := res.(*Pod)
	m[*tRes.Name] = tRes
}

func (m PodMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m PodMap) Length() int {
	return len(m)
}

func (m PodMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type PodChangeMap map[Name]*PodChange

func (m PodChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m PodChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*PodChange)
	m[*tChange.GetPodName()] = tChange
}

func (m PodChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m PodChangeMap) Length() int {
	return len(m)
}

func (m PodChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
